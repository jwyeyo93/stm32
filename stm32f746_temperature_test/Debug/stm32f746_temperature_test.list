
stm32f746_temperature_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013514  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080136e4  080136e4  000236e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013804  08013804  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08013804  08013804  00023804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801380c  0801380c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801380c  0801380c  0002380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013810  08013810  00023810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08013814  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000972c  20000094  080138a8  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200097c0  080138a8  000397c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004826f  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000976e  00000000  00000000  00078333  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003430  00000000  00000000  00081aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002f80  00000000  00000000  00084ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ac42  00000000  00000000  00087e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003ab63  00000000  00000000  000c2a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012d292  00000000  00000000  000fd5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022a88f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dd38  00000000  00000000  0022a90c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080136cc 	.word	0x080136cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	080136cc 	.word	0x080136cc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	463b      	mov	r3, r7
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <MX_ADC3_Init+0x9c>)
 8000526:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_ADC3_Init+0x98>)
 800052a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800052e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_ADC3_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_ADC3_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_ADC3_Init+0xa0>)
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_ADC3_Init+0x98>)
 800055e:	2201      	movs	r2, #1
 8000560:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_ADC3_Init+0x98>)
 800056c:	2201      	movs	r2, #1
 800056e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000572:	f002 fcb7 	bl	8002ee4 <HAL_ADC_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800057c:	f001 f986 	bl	800188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000580:	2304      	movs	r3, #4
 8000582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000584:	2301      	movs	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000592:	f002 fceb 	bl	8002f6c <HAL_ADC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800059c:	f001 f976 	bl	800188c <Error_Handler>
  }

}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20008480 	.word	0x20008480
 80005ac:	40012200 	.word	0x40012200
 80005b0:	0f000001 	.word	0x0f000001

080005b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <HAL_ADC_MspInit+0xa4>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d13c      	bne.n	8000650 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005da:	4a20      	ldr	r2, [pc, #128]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005e0:	6453      	str	r3, [r2, #68]	; 0x44
 80005e2:	4b1e      	ldr	r3, [pc, #120]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a1a      	ldr	r2, [pc, #104]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005f4:	f043 0320 	orr.w	r3, r3, #32
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_ADC_MspInit+0xa8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_ADC_MspInit+0xa8>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_ADC_MspInit+0xa8>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800061e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000622:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000624:	2303      	movs	r3, #3
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_ADC_MspInit+0xac>)
 8000634:	f004 f838 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063c:	2303      	movs	r3, #3
 800063e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <HAL_ADC_MspInit+0xb0>)
 800064c:	f004 f82c 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40012200 	.word	0x40012200
 800065c:	40023800 	.word	0x40023800
 8000660:	40021400 	.word	0x40021400
 8000664:	40020000 	.word	0x40020000

08000668 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_CRC_Init+0x3c>)
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <MX_CRC_Init+0x40>)
 8000670:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_CRC_Init+0x3c>)
 800067a:	2200      	movs	r2, #0
 800067c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_CRC_Init+0x3c>)
 800068c:	2201      	movs	r2, #1
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000692:	f002 ff91 	bl	80035b8 <HAL_CRC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800069c:	f001 f8f6 	bl	800188c <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200084c8 	.word	0x200084c8
 80006a8:	40023000 	.word	0x40023000

080006ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <HAL_CRC_MspInit+0x38>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10b      	bne.n	80006d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_CRC_MspInit+0x3c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <HAL_CRC_MspInit+0x3c>)
 80006c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <HAL_CRC_MspInit+0x3c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023000 	.word	0x40023000
 80006e8:	40023800 	.word	0x40023800

080006ec <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_DCMI_Init+0x60>)
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_DCMI_Init+0x64>)
 80006f4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_DCMI_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_DCMI_Init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_DCMI_Init+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_DCMI_Init+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_DCMI_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_DCMI_Init+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_DCMI_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_DCMI_Init+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_DCMI_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_DCMI_Init+0x60>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_DCMI_Init+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_DCMI_Init+0x60>)
 800073a:	f003 f827 	bl	800378c <HAL_DCMI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000744:	f001 f8a2 	bl	800188c <Error_Handler>
  }

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200084ec 	.word	0x200084ec
 8000750:	50050000 	.word	0x50050000

08000754 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a50      	ldr	r2, [pc, #320]	; (80008b4 <HAL_DCMI_MspInit+0x160>)
 8000772:	4293      	cmp	r3, r2
 8000774:	f040 809a 	bne.w	80008ac <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000778:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 800077a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077c:	4a4e      	ldr	r2, [pc, #312]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6353      	str	r3, [r2, #52]	; 0x34
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 8000786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	623b      	str	r3, [r7, #32]
 800078e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000790:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a48      	ldr	r2, [pc, #288]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
 800079c:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a8:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a42      	ldr	r2, [pc, #264]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c0:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d8:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6313      	str	r3, [r2, #48]	; 0x30
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000808:	2360      	movs	r3, #96	; 0x60
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000818:	230d      	movs	r3, #13
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4826      	ldr	r0, [pc, #152]	; (80008bc <HAL_DCMI_MspInit+0x168>)
 8000824:	f003 ff40 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000828:	2308      	movs	r3, #8
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000838:	230d      	movs	r3, #13
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	481f      	ldr	r0, [pc, #124]	; (80008c0 <HAL_DCMI_MspInit+0x16c>)
 8000844:	f003 ff30 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800085a:	230d      	movs	r3, #13
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <HAL_DCMI_MspInit+0x170>)
 8000866:	f003 ff1f 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800086a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800087c:	230d      	movs	r3, #13
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <HAL_DCMI_MspInit+0x174>)
 8000888:	f003 ff0e 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800088c:	2350      	movs	r3, #80	; 0x50
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800089c:	230d      	movs	r3, #13
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4809      	ldr	r0, [pc, #36]	; (80008cc <HAL_DCMI_MspInit+0x178>)
 80008a8:	f003 fefe 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	50050000 	.word	0x50050000
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	40021800 	.word	0x40021800
 80008c8:	40021c00 	.word	0x40021c00
 80008cc:	40020000 	.word	0x40020000

080008d0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <MX_DMA2D_Init+0x60>)
 80008d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_DMA2D_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_DMA2D_Init+0x5c>)
 8000906:	f003 f877 	bl	80039f8 <HAL_DMA2D_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000910:	f000 ffbc 	bl	800188c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000914:	2101      	movs	r1, #1
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_DMA2D_Init+0x5c>)
 8000918:	f003 f9c8 	bl	8003cac <HAL_DMA2D_ConfigLayer>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000922:	f000 ffb3 	bl	800188c <Error_Handler>
  }

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000853c 	.word	0x2000853c
 8000930:	4002b000 	.word	0x4002b000

08000934 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <HAL_DMA2D_MspInit+0x44>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d113      	bne.n	800096e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_DMA2D_MspInit+0x48>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <HAL_DMA2D_MspInit+0x48>)
 800094c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_DMA2D_MspInit+0x48>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	205a      	movs	r0, #90	; 0x5a
 8000964:	f002 fdfe 	bl	8003564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000968:	205a      	movs	r0, #90	; 0x5a
 800096a:	f002 fe17 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	4002b000 	.word	0x4002b000
 800097c:	40023800 	.word	0x40023800

08000980 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_ETH_Init+0x78>)
 8000986:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <MX_ETH_Init+0x7c>)
 8000988:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_ETH_Init+0x78>)
 800098c:	2201      	movs	r2, #1
 800098e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_ETH_Init+0x78>)
 8000992:	2200      	movs	r2, #0
 8000994:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ETH_Init+0x78>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_ETH_Init+0x78>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_ETH_Init+0x78>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	3302      	adds	r3, #2
 80009ae:	22e1      	movs	r2, #225	; 0xe1
 80009b0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_ETH_Init+0x78>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	3303      	adds	r3, #3
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_ETH_Init+0x78>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_ETH_Init+0x78>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	3305      	adds	r3, #5
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_ETH_Init+0x78>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_ETH_Init+0x78>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_ETH_Init+0x78>)
 80009de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009e2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_ETH_Init+0x78>)
 80009e6:	f003 f9f3 	bl	8003dd0 <HAL_ETH_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80009f0:	f000 ff4c 	bl	800188c <Error_Handler>
  }

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000857c 	.word	0x2000857c
 80009fc:	40028000 	.word	0x40028000

08000a00 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_ETH_MspInit+0x11c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d178      	bne.n	8000b14 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3e      	ldr	r2, [pc, #248]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a36:	623b      	str	r3, [r7, #32]
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a38      	ldr	r2, [pc, #224]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000ab2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac4:	230b      	movs	r3, #11
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <HAL_ETH_MspInit+0x124>)
 8000ad0:	f003 fdea 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ad4:	2332      	movs	r3, #50	; 0x32
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <HAL_ETH_MspInit+0x128>)
 8000af0:	f003 fdda 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000af4:	2386      	movs	r3, #134	; 0x86
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4807      	ldr	r0, [pc, #28]	; (8000b2c <HAL_ETH_MspInit+0x12c>)
 8000b10:	f003 fdca 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000b14:	bf00      	nop
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40028000 	.word	0x40028000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <MX_FMC_Init+0x9c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b62:	2210      	movs	r2, #16
 8000b64:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b6e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b72:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000bb2:	f009 f999 	bl	8009ee8 <HAL_SDRAM_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bbc:	f000 fe66 	bl	800188c <Error_Handler>
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200085c4 	.word	0x200085c4
 8000bcc:	a0000140 	.word	0xa0000140

08000bd0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <HAL_FMC_MspInit+0x100>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d16d      	bne.n	8000cc8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_FMC_MspInit+0x100>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <HAL_FMC_MspInit+0x104>)
 8000bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf6:	4a37      	ldr	r2, [pc, #220]	; (8000cd4 <HAL_FMC_MspInit+0x104>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6393      	str	r3, [r2, #56]	; 0x38
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <HAL_FMC_MspInit+0x104>)
 8000c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c0a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c0e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <HAL_FMC_MspInit+0x108>)
 8000c26:	f003 fd3f 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c2a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c2e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4825      	ldr	r0, [pc, #148]	; (8000cdc <HAL_FMC_MspInit+0x10c>)
 8000c46:	f003 fd2f 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c4a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c4e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <HAL_FMC_MspInit+0x110>)
 8000c66:	f003 fd1f 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c6a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c6e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <HAL_FMC_MspInit+0x114>)
 8000c86:	f003 fd0f 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c8a:	2328      	movs	r3, #40	; 0x28
 8000c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <HAL_FMC_MspInit+0x118>)
 8000ca4:	f003 fd00 	bl	80046a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <HAL_FMC_MspInit+0x11c>)
 8000cc2:	f003 fcf1 	bl	80046a8 <HAL_GPIO_Init>
 8000cc6:	e000      	b.n	8000cca <HAL_FMC_MspInit+0xfa>
    return;
 8000cc8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000b0 	.word	0x200000b0
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40021800 	.word	0x40021800
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40021400 	.word	0x40021400
 8000ce8:	40021c00 	.word	0x40021c00
 8000cec:	40020800 	.word	0x40020800

08000cf0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cf8:	f7ff ff6a 	bl	8000bd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <vApplicationGetIdleTaskMemory+0x30>)
 8000d4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000b4 	.word	0x200000b4
 8000d68:	2000010c 	.word	0x2000010c

08000d6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_FREERTOS_Init+0x30>)
 8000d74:	1d3c      	adds	r4, r7, #4
 8000d76:	461d      	mov	r5, r3
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00f fa63 	bl	8010254 <osThreadCreate>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <MX_FREERTOS_Init+0x34>)
 8000d92:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9c:	080136f0 	.word	0x080136f0
 8000da0:	200085f8 	.word	0x200085f8

08000da4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000dac:	f011 fce2 	bl	8012774 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f00f fa9b 	bl	80102ec <osDelay>
 8000db6:	e7fb      	b.n	8000db0 <StartDefaultTask+0xc>

08000db8 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4baf      	ldr	r3, [pc, #700]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4aae      	ldr	r2, [pc, #696]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4bac      	ldr	r3, [pc, #688]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	4ba9      	ldr	r3, [pc, #676]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4aa8      	ldr	r2, [pc, #672]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4ba6      	ldr	r3, [pc, #664]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4ba3      	ldr	r3, [pc, #652]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4aa2      	ldr	r2, [pc, #648]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4ba0      	ldr	r3, [pc, #640]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b9d      	ldr	r3, [pc, #628]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a9c      	ldr	r2, [pc, #624]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b9a      	ldr	r3, [pc, #616]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b97      	ldr	r3, [pc, #604]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a96      	ldr	r2, [pc, #600]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b94      	ldr	r3, [pc, #592]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b91      	ldr	r3, [pc, #580]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a90      	ldr	r2, [pc, #576]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b8e      	ldr	r3, [pc, #568]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a8a      	ldr	r2, [pc, #552]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b88      	ldr	r3, [pc, #544]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e76:	4b85      	ldr	r3, [pc, #532]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a84      	ldr	r2, [pc, #528]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b82      	ldr	r3, [pc, #520]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e8e:	4b7f      	ldr	r3, [pc, #508]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a7e      	ldr	r2, [pc, #504]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b7c      	ldr	r3, [pc, #496]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b79      	ldr	r3, [pc, #484]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a78      	ldr	r2, [pc, #480]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	4b73      	ldr	r3, [pc, #460]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a72      	ldr	r2, [pc, #456]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b70      	ldr	r3, [pc, #448]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2120      	movs	r1, #32
 8000eda:	486d      	ldr	r0, [pc, #436]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000edc:	f003 fda6 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	210c      	movs	r1, #12
 8000ee4:	486b      	ldr	r0, [pc, #428]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000ee6:	f003 fda1 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2108      	movs	r1, #8
 8000eee:	486a      	ldr	r0, [pc, #424]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000ef0:	f003 fd9c 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efa:	4866      	ldr	r0, [pc, #408]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000efc:	f003 fd96 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	4865      	ldr	r0, [pc, #404]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000f08:	f003 fd90 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	21c8      	movs	r1, #200	; 0xc8
 8000f10:	4863      	ldr	r0, [pc, #396]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000f12:	f003 fd8b 	bl	8004a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000f16:	2308      	movs	r3, #8
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	485e      	ldr	r0, [pc, #376]	; (80010a4 <MX_GPIO_Init+0x2ec>)
 8000f2a:	f003 fbbd 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000f2e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f40:	230a      	movs	r3, #10
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4857      	ldr	r0, [pc, #348]	; (80010a8 <MX_GPIO_Init+0x2f0>)
 8000f4c:	f003 fbac 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4851      	ldr	r0, [pc, #324]	; (80010ac <MX_GPIO_Init+0x2f4>)
 8000f66:	f003 fb9f 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f6a:	2340      	movs	r3, #64	; 0x40
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f6e:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <MX_GPIO_Init+0x2f8>)
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4844      	ldr	r0, [pc, #272]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f7e:	f003 fb93 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f82:	2320      	movs	r3, #32
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	4619      	mov	r1, r3
 8000f98:	483d      	ldr	r0, [pc, #244]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f9a:	f003 fb85 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000f9e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4837      	ldr	r0, [pc, #220]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000fb8:	f003 fb76 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4838      	ldr	r0, [pc, #224]	; (80010b4 <MX_GPIO_Init+0x2fc>)
 8000fd2:	f003 fb69 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fea:	4619      	mov	r1, r3
 8000fec:	482a      	ldr	r0, [pc, #168]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000fee:	f003 fb5b 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	4619      	mov	r1, r3
 8001004:	4822      	ldr	r0, [pc, #136]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8001006:	f003 fb4f 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800100a:	f248 0304 	movw	r3, #32772	; 0x8004
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101c:	4619      	mov	r1, r3
 800101e:	481f      	ldr	r0, [pc, #124]	; (800109c <MX_GPIO_Init+0x2e4>)
 8001020:	f003 fb42 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <MX_GPIO_Init+0x2e4>)
 800103e:	f003 fb33 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_GPIO_Init+0x2f8>)
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8001058:	f003 fb26 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800105c:	2310      	movs	r3, #16
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800106c:	230a      	movs	r3, #10
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <MX_GPIO_Init+0x2e4>)
 8001078:	f003 fb16 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800107c:	23c8      	movs	r3, #200	; 0xc8
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
 8001088:	e016      	b.n	80010b8 <MX_GPIO_Init+0x300>
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40022000 	.word	0x40022000
 8001098:	40022800 	.word	0x40022800
 800109c:	40021c00 	.word	0x40021c00
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40022400 	.word	0x40022400
 80010b0:	10120000 	.word	0x10120000
 80010b4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	4619      	mov	r1, r3
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <MX_GPIO_Init+0x370>)
 80010c4:	f003 faf0 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010c8:	2305      	movs	r3, #5
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010d8:	230a      	movs	r3, #10
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e0:	4619      	mov	r1, r3
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_GPIO_Init+0x374>)
 80010e4:	f003 fae0 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010e8:	2304      	movs	r3, #4
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <MX_GPIO_Init+0x370>)
 80010fc:	f003 fad4 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001100:	2328      	movs	r3, #40	; 0x28
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001110:	230a      	movs	r3, #10
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_GPIO_Init+0x378>)
 800111c:	f003 fac4 	bl	80046a8 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3740      	adds	r7, #64	; 0x40
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021800 	.word	0x40021800
 800112c:	40020800 	.word	0x40020800
 8001130:	40020000 	.word	0x40020000

08001134 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_I2C1_Init+0x74>)
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <MX_I2C1_Init+0x78>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <MX_I2C1_Init+0x7c>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_I2C1_Init+0x74>)
 800114c:	2201      	movs	r2, #1
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001170:	f005 f966 	bl	8006440 <HAL_I2C_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117a:	f000 fb87 	bl	800188c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001182:	f005 f9ed 	bl	8006560 <HAL_I2CEx_ConfigAnalogFilter>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800118c:	f000 fb7e 	bl	800188c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001194:	f005 fa2f 	bl	80065f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800119e:	f000 fb75 	bl	800188c <Error_Handler>
  }

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20008648 	.word	0x20008648
 80011ac:	40005400 	.word	0x40005400
 80011b0:	00c0eaff 	.word	0x00c0eaff

080011b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_I2C3_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_I2C3_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_I2C3_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <MX_I2C3_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_I2C3_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_I2C3_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_I2C3_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_I2C3_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C3_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C3_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C3_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_I2C3_Init+0x74>)
 80011f0:	f005 f926 	bl	8006440 <HAL_I2C_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f000 fb47 	bl	800188c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <MX_I2C3_Init+0x74>)
 8001202:	f005 f9ad 	bl	8006560 <HAL_I2CEx_ConfigAnalogFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800120c:	f000 fb3e 	bl	800188c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_I2C3_Init+0x74>)
 8001214:	f005 f9ef 	bl	80065f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 fb35 	bl	800188c <Error_Handler>
  }

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200085fc 	.word	0x200085fc
 800122c:	40005c00 	.word	0x40005c00
 8001230:	00c0eaff 	.word	0x00c0eaff

08001234 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_I2C_MspInit+0xdc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d129      	bne.n	80012aa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800126e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001280:	2304      	movs	r3, #4
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4823      	ldr	r0, [pc, #140]	; (8001318 <HAL_I2C_MspInit+0xe4>)
 800128c:	f003 fa0c 	bl	80046a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012a8:	e02d      	b.n	8001306 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C3)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_I2C_MspInit+0xe8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d128      	bne.n	8001306 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a16      	ldr	r2, [pc, #88]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d2:	2312      	movs	r3, #18
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012de:	2304      	movs	r3, #4
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <HAL_I2C_MspInit+0xec>)
 80012ea:	f003 f9dd 	bl	80046a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	3730      	adds	r7, #48	; 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40005400 	.word	0x40005400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400
 800131c:	40005c00 	.word	0x40005c00
 8001320:	40021c00 	.word	0x40021c00

08001324 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09a      	sub	sp, #104	; 0x68
 8001328:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800132a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800132e:	2234      	movs	r2, #52	; 0x34
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f011 fd59 	bl	8012dea <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2234      	movs	r2, #52	; 0x34
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f011 fd53 	bl	8012dea <memset>

  hltdc.Instance = LTDC;
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <MX_LTDC_Init+0x164>)
 8001346:	4a51      	ldr	r2, [pc, #324]	; (800148c <MX_LTDC_Init+0x168>)
 8001348:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <MX_LTDC_Init+0x164>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001350:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <MX_LTDC_Init+0x164>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <MX_LTDC_Init+0x164>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800135c:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <MX_LTDC_Init+0x164>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <MX_LTDC_Init+0x164>)
 8001364:	2228      	movs	r2, #40	; 0x28
 8001366:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <MX_LTDC_Init+0x164>)
 800136a:	2209      	movs	r2, #9
 800136c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800136e:	4b46      	ldr	r3, [pc, #280]	; (8001488 <MX_LTDC_Init+0x164>)
 8001370:	2235      	movs	r2, #53	; 0x35
 8001372:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001374:	4b44      	ldr	r3, [pc, #272]	; (8001488 <MX_LTDC_Init+0x164>)
 8001376:	220b      	movs	r2, #11
 8001378:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800137a:	4b43      	ldr	r3, [pc, #268]	; (8001488 <MX_LTDC_Init+0x164>)
 800137c:	f240 2215 	movw	r2, #533	; 0x215
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_LTDC_Init+0x164>)
 8001384:	f240 121b 	movw	r2, #283	; 0x11b
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <MX_LTDC_Init+0x164>)
 800138c:	f240 2235 	movw	r2, #565	; 0x235
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <MX_LTDC_Init+0x164>)
 8001394:	f240 121d 	movw	r2, #285	; 0x11d
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <MX_LTDC_Init+0x164>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_LTDC_Init+0x164>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <MX_LTDC_Init+0x164>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013b2:	4835      	ldr	r0, [pc, #212]	; (8001488 <MX_LTDC_Init+0x164>)
 80013b4:	f005 f96c 	bl	8006690 <HAL_LTDC_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80013be:	f000 fa65 	bl	800188c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80013c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80013d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013d4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013d6:	2302      	movs	r3, #2
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013e8:	2307      	movs	r3, #7
 80013ea:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013f0:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80013f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80013f8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	481b      	ldr	r0, [pc, #108]	; (8001488 <MX_LTDC_Init+0x164>)
 800141a:	f005 facb 	bl	80069b4 <HAL_LTDC_ConfigLayer>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001424:	f000 fa32 	bl	800188c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001446:	2305      	movs	r3, #5
 8001448:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_LTDC_Init+0x164>)
 8001470:	f005 faa0 	bl	80069b4 <HAL_LTDC_ConfigLayer>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800147a:	f000 fa07 	bl	800188c <Error_Handler>
  }

}
 800147e:	bf00      	nop
 8001480:	3768      	adds	r7, #104	; 0x68
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20008694 	.word	0x20008694
 800148c:	40016800 	.word	0x40016800

08001490 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	; 0x38
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_LTDC_MspInit+0x174>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	f040 80a3 	bne.w	80015fa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014b4:	4b54      	ldr	r3, [pc, #336]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	4a53      	ldr	r2, [pc, #332]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014be:	6453      	str	r3, [r2, #68]	; 0x44
 80014c0:	4b51      	ldr	r3, [pc, #324]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c8:	623b      	str	r3, [r7, #32]
 80014ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014cc:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6313      	str	r3, [r2, #48]	; 0x30
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a47      	ldr	r2, [pc, #284]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a41      	ldr	r2, [pc, #260]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001514:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151e:	6313      	str	r3, [r2, #48]	; 0x30
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a35      	ldr	r2, [pc, #212]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001544:	2310      	movs	r3, #16
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001554:	230e      	movs	r3, #14
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	482b      	ldr	r0, [pc, #172]	; (800160c <HAL_LTDC_MspInit+0x17c>)
 8001560:	f003 f8a2 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001564:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001576:	230e      	movs	r3, #14
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4823      	ldr	r0, [pc, #140]	; (8001610 <HAL_LTDC_MspInit+0x180>)
 8001582:	f003 f891 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001586:	23f7      	movs	r3, #247	; 0xf7
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001596:	230e      	movs	r3, #14
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <HAL_LTDC_MspInit+0x184>)
 80015a2:	f003 f881 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80015a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015b8:	2309      	movs	r3, #9
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4815      	ldr	r0, [pc, #84]	; (8001618 <HAL_LTDC_MspInit+0x188>)
 80015c4:	f003 f870 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80015c8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015da:	230e      	movs	r3, #14
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <HAL_LTDC_MspInit+0x18c>)
 80015e6:	f003 f85f 	bl	80046a8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2058      	movs	r0, #88	; 0x58
 80015f0:	f001 ffb8 	bl	8003564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015f4:	2058      	movs	r0, #88	; 0x58
 80015f6:	f001 ffd1 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	; 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40016800 	.word	0x40016800
 8001608:	40023800 	.word	0x40023800
 800160c:	40021000 	.word	0x40021000
 8001610:	40022400 	.word	0x40022400
 8001614:	40022800 	.word	0x40022800
 8001618:	40021800 	.word	0x40021800
 800161c:	40022000 	.word	0x40022000

08001620 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	if(ch == '\n')
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b0a      	cmp	r3, #10
 800162c:	d106      	bne.n	800163c <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *) "\r", 1, 0xFFFF);
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	2201      	movs	r2, #1
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__io_putchar+0x34>)
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <__io_putchar+0x38>)
 8001638:	f009 fe22 	bl	800b280 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 800163c:	1d39      	adds	r1, r7, #4
 800163e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001642:	2201      	movs	r2, #1
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <__io_putchar+0x38>)
 8001646:	f009 fe1b 	bl	800b280 <HAL_UART_Transmit>

	return ch;
 800164a:	687b      	ldr	r3, [r7, #4]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	0801370c 	.word	0x0801370c
 8001658:	20008ba4 	.word	0x20008ba4

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f001 fbf1 	bl	8002e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f840 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f7ff fba6 	bl	8000db8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800166c:	f7fe ff50 	bl	8000510 <MX_ADC3_Init>
  MX_CRC_Init();
 8001670:	f7fe fffa 	bl	8000668 <MX_CRC_Init>
  MX_DCMI_Init();
 8001674:	f7ff f83a 	bl	80006ec <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001678:	f7ff f92a 	bl	80008d0 <MX_DMA2D_Init>
  MX_ETH_Init();
 800167c:	f7ff f980 	bl	8000980 <MX_ETH_Init>
  MX_FMC_Init();
 8001680:	f7ff fa56 	bl	8000b30 <MX_FMC_Init>
  MX_I2C1_Init();
 8001684:	f7ff fd56 	bl	8001134 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001688:	f7ff fd94 	bl	80011b4 <MX_I2C3_Init>
  MX_LTDC_Init();
 800168c:	f7ff fe4a 	bl	8001324 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001690:	f000 f904 	bl	800189c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001694:	f000 f9be 	bl	8001a14 <MX_RTC_Init>
  MX_SAI2_Init();
 8001698:	f000 fa7c 	bl	8001b94 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800169c:	f000 fb8c 	bl	8001db8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80016a0:	f000 fc0c 	bl	8001ebc <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80016a4:	f000 fc7c 	bl	8001fa0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80016a8:	f000 fea0 	bl	80023ec <MX_TIM1_Init>
  MX_TIM2_Init();
 80016ac:	f000 ff4a 	bl	8002544 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016b0:	f000 ffbe 	bl	8002630 <MX_TIM3_Init>
  MX_TIM5_Init();
 80016b4:	f001 f834 	bl	8002720 <MX_TIM5_Init>
  MX_TIM8_Init();
 80016b8:	f001 f8aa 	bl	8002810 <MX_TIM8_Init>
  MX_TIM12_Init();
 80016bc:	f001 f8fc 	bl	80028b8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80016c0:	f001 fa9c 	bl	8002bfc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80016c4:	f001 faca 	bl	8002c5c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80016c8:	f00c f976 	bl	800d9b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80016cc:	f7ff fb4e 	bl	8000d6c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80016d0:	f00e fd9d 	bl	801020e <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World!\n");
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <main+0x88>)
 80016d6:	f011 fc95 	bl	8013004 <puts>
	  HAL_Delay(1000);
 80016da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016de:	f001 fbdf 	bl	8002ea0 <HAL_Delay>
	  printf("Hello World!\n");
 80016e2:	e7f7      	b.n	80016d4 <main+0x78>
 80016e4:	08013710 	.word	0x08013710

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0b4      	sub	sp, #208	; 0xd0
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016f2:	2230      	movs	r2, #48	; 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f011 fb77 	bl	8012dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	2284      	movs	r2, #132	; 0x84
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f011 fb68 	bl	8012dea <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800171a:	f005 fb23 	bl	8006d64 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b4f      	ldr	r3, [pc, #316]	; (800185c <SystemClock_Config+0x174>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a4e      	ldr	r2, [pc, #312]	; (800185c <SystemClock_Config+0x174>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <SystemClock_Config+0x174>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <SystemClock_Config+0x178>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a49      	ldr	r2, [pc, #292]	; (8001860 <SystemClock_Config+0x178>)
 800173c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <SystemClock_Config+0x178>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800174e:	2309      	movs	r3, #9
 8001750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800175c:	2301      	movs	r3, #1
 800175e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001768:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800176c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001770:	2319      	movs	r3, #25
 8001772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001776:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800177a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001784:	2309      	movs	r3, #9
 8001786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fc0a 	bl	8006fa8 <HAL_RCC_OscConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800179a:	f000 f877 	bl	800188c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800179e:	f005 faf1 	bl	8006d84 <HAL_PWREx_EnableOverDrive>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017a8:	f000 f870 	bl	800188c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017d2:	2106      	movs	r1, #6
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 fe8b 	bl	80074f0 <HAL_RCC_ClockConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80017e0:	f000 f854 	bl	800188c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <SystemClock_Config+0x17c>)
 80017e6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80017e8:	2364      	movs	r3, #100	; 0x64
 80017ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017fe:	2305      	movs	r3, #5
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001806:	2303      	movs	r3, #3
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800181e:	2300      	movs	r3, #0
 8001820:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001822:	2300      	movs	r3, #0
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001826:	2300      	movs	r3, #0
 8001828:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800182a:	2300      	movs	r3, #0
 800182c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800182e:	2300      	movs	r3, #0
 8001830:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f006 f857 	bl	80078f8 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8001850:	f000 f81c 	bl	800188c <Error_Handler>
  }
}
 8001854:	bf00      	nop
 8001856:	37d0      	adds	r7, #208	; 0xd0
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
 8001864:	01b14868 	.word	0x01b14868

08001868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187a:	f001 faf1 	bl	8002e60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40001000 	.word	0x40001000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <MX_QUADSPI_Init+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018a8:	22ff      	movs	r2, #255	; 0xff
 80018aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018d8:	f005 faa4 	bl	8006e24 <HAL_QSPI_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80018e2:	f7ff ffd3 	bl	800188c <Error_Handler>
  }

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000873c 	.word	0x2000873c
 80018f0:	a0001000 	.word	0xa0001000

080018f4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3b      	ldr	r2, [pc, #236]	; (8001a00 <HAL_QSPI_MspInit+0x10c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d170      	bne.n	80019f8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6393      	str	r3, [r2, #56]	; 0x38
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a2e      	ldr	r2, [pc, #184]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001976:	2304      	movs	r3, #4
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001986:	2309      	movs	r3, #9
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	481d      	ldr	r0, [pc, #116]	; (8001a08 <HAL_QSPI_MspInit+0x114>)
 8001992:	f002 fe89 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001996:	2340      	movs	r3, #64	; 0x40
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019a6:	230a      	movs	r3, #10
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4816      	ldr	r0, [pc, #88]	; (8001a0c <HAL_QSPI_MspInit+0x118>)
 80019b2:	f002 fe79 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b6:	2304      	movs	r3, #4
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019c6:	2309      	movs	r3, #9
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	480e      	ldr	r0, [pc, #56]	; (8001a0c <HAL_QSPI_MspInit+0x118>)
 80019d2:	f002 fe69 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80019d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019e8:	2309      	movs	r3, #9
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <HAL_QSPI_MspInit+0x11c>)
 80019f4:	f002 fe58 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3730      	adds	r7, #48	; 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	a0001000 	.word	0xa0001000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020c00 	.word	0x40020c00

08001a14 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b092      	sub	sp, #72	; 0x48
 8001a18:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	222c      	movs	r2, #44	; 0x2c
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f011 f9d7 	bl	8012dea <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a3c:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a3e:	4a47      	ldr	r2, [pc, #284]	; (8001b5c <MX_RTC_Init+0x148>)
 8001a40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a42:	4b45      	ldr	r3, [pc, #276]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a4a:	227f      	movs	r2, #127	; 0x7f
 8001a4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a4e:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a50:	22ff      	movs	r2, #255	; 0xff
 8001a52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a60:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a66:	483c      	ldr	r0, [pc, #240]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a68:	f006 fc68 	bl	800833c <HAL_RTC_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001a72:	f7ff ff0b 	bl	800188c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	482f      	ldr	r0, [pc, #188]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a9a:	f006 fccb 	bl	8008434 <HAL_RTC_SetTime>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001aa4:	f7ff fef2 	bl	800188c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4823      	ldr	r0, [pc, #140]	; (8001b58 <MX_RTC_Init+0x144>)
 8001aca:	f006 fd71 	bl	80085b0 <HAL_RTC_SetDate>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001ad4:	f7ff feda 	bl	800188c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4812      	ldr	r0, [pc, #72]	; (8001b58 <MX_RTC_Init+0x144>)
 8001b10:	f006 fdf6 	bl	8008700 <HAL_RTC_SetAlarm>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001b1a:	f7ff feb7 	bl	800188c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	2201      	movs	r2, #1
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480b      	ldr	r0, [pc, #44]	; (8001b58 <MX_RTC_Init+0x144>)
 8001b2c:	f006 fde8 	bl	8008700 <HAL_RTC_SetAlarm>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001b36:	f7ff fea9 	bl	800188c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_RTC_Init+0x144>)
 8001b40:	f006 ff68 	bl	8008a14 <HAL_RTCEx_SetTimeStamp>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001b4a:	f7ff fe9f 	bl	800188c <Error_Handler>
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3748      	adds	r7, #72	; 0x48
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20008788 	.word	0x20008788
 8001b5c:	40002800 	.word	0x40002800

08001b60 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_RTC_MspInit+0x2c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d105      	bne.n	8001b7e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RTC_MspInit+0x30>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_RTC_MspInit+0x30>)
 8001b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40002800 	.word	0x40002800
 8001b90:	40023800 	.word	0x40023800

08001b94 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001b9a:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <MX_SAI2_Init+0x140>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bb0:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bbc:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bc8:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <MX_SAI2_Init+0x144>)
 8001bd8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bec:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c0a:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c28:	4829      	ldr	r0, [pc, #164]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c2a:	f006 ff49 	bl	8008ac0 <HAL_SAI_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001c34:	f7ff fe2a 	bl	800188c <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c3a:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <MX_SAI2_Init+0x14c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c46:	2203      	movs	r2, #3
 8001c48:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c88:	2208      	movs	r2, #8
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cbe:	f006 feff 	bl	8008ac0 <HAL_SAI_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001cc8:	f7ff fde0 	bl	800188c <Error_Handler>
  }

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000882c 	.word	0x2000882c
 8001cd4:	40015c04 	.word	0x40015c04
 8001cd8:	0002ee00 	.word	0x0002ee00
 8001cdc:	200087a8 	.word	0x200087a8
 8001ce0:	40015c24 	.word	0x40015c24

08001ce4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_SAI_MspInit+0xbc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d124      	bne.n	8001d40 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d1e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001d20:	23f0      	movs	r3, #240	; 0xf0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d30:	230a      	movs	r3, #10
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	481c      	ldr	r0, [pc, #112]	; (8001dac <HAL_SAI_MspInit+0xc8>)
 8001d3c:	f002 fcb4 	bl	80046a8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <HAL_SAI_MspInit+0xcc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d125      	bne.n	8001d96 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d72:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d86:	230a      	movs	r3, #10
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <HAL_SAI_MspInit+0xd0>)
 8001d92:	f002 fc89 	bl	80046a8 <HAL_GPIO_Init>

    }
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40015c04 	.word	0x40015c04
 8001da4:	2000030c 	.word	0x2000030c
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40015c24 	.word	0x40015c24
 8001db4:	40021800 	.word	0x40021800

08001db8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <MX_SDMMC1_SD_Init+0x3c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]

}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	200088b0 	.word	0x200088b0
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_SD_MspInit+0xb4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d144      	bne.n	8001ea4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e62:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e74:	230c      	movs	r3, #12
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <HAL_SD_MspInit+0xbc>)
 8001e80:	f002 fc12 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e84:	2304      	movs	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e94:	230c      	movs	r3, #12
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <HAL_SD_MspInit+0xc0>)
 8001ea0:	f002 fc02 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00

08001ebc <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

  hspdif.Instance = SPDIFRX;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ec2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ec6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001f06:	f008 f823 	bl	8009f50 <HAL_SPDIFRX_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001f10:	f7ff fcbc 	bl	800188c <Error_Handler>
  }

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20008934 	.word	0x20008934

08001f1c <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(spdifrxHandle->Instance==SPDIFRX)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001f3c:	d127      	bne.n	8001f8e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <HAL_SPDIFRX_MspInit+0x80>)
 8001f8a:	f002 fb8d 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020c00 	.word	0x40020c00

08001fa0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <MX_SPI2_Init+0x78>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fbe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fee:	2207      	movs	r2, #7
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_SPI2_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_SPI2_Init+0x74>)
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_SPI2_Init+0x74>)
 8002000:	f008 f802 	bl	800a008 <HAL_SPI_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800200a:	f7ff fc3f 	bl	800188c <Error_Handler>
  }

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20008980 	.word	0x20008980
 8002018:	40003800 	.word	0x40003800

0800201c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <HAL_SPI_MspInit+0xb4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d144      	bne.n	80020c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002086:	2302      	movs	r3, #2
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002096:	2305      	movs	r3, #5
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <HAL_SPI_MspInit+0xbc>)
 80020a2:	f002 fb01 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020b8:	2305      	movs	r3, #5
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	4806      	ldr	r0, [pc, #24]	; (80020dc <HAL_SPI_MspInit+0xc0>)
 80020c4:	f002 faf0 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40003800 	.word	0x40003800
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40020400 	.word	0x40020400

080020e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_MspInit+0x4c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_MspInit+0x4c>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_MspInit+0x4c>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	210f      	movs	r1, #15
 800211a:	f06f 0001 	mvn.w	r0, #1
 800211e:	f001 fa21 	bl	8003564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	2036      	movs	r0, #54	; 0x36
 8002146:	f001 fa0d 	bl	8003564 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214a:	2036      	movs	r0, #54	; 0x36
 800214c:	f001 fa26 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_InitTick+0xa0>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_InitTick+0xa0>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_InitTick+0xa0>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002168:	f107 0210 	add.w	r2, r7, #16
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f005 fb8e 	bl	8007894 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002178:	f005 fb64 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800217c:	4603      	mov	r3, r0
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_InitTick+0xa4>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3b01      	subs	r3, #1
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_InitTick+0xa8>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_InitTick+0xac>)
 8002194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_InitTick+0xa8>)
 8002198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800219c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <HAL_InitTick+0xa8>)
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_InitTick+0xa8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_InitTick+0xa8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021b0:	4809      	ldr	r0, [pc, #36]	; (80021d8 <HAL_InitTick+0xa8>)
 80021b2:	f007 ffbb 	bl	800a12c <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021bc:	4806      	ldr	r0, [pc, #24]	; (80021d8 <HAL_InitTick+0xa8>)
 80021be:	f007 ffe1 	bl	800a184 <HAL_TIM_Base_Start_IT>
 80021c2:	4603      	mov	r3, r0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3730      	adds	r7, #48	; 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	200089e4 	.word	0x200089e4
 80021dc:	40001000 	.word	0x40001000

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <USART1_IRQHandler+0x10>)
 800221a:	f009 f8c3 	bl	800b3a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20008ba4 	.word	0x20008ba4

08002228 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <TIM6_DAC_IRQHandler+0x10>)
 800222e:	f007 fffe 	bl	800a22e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200089e4 	.word	0x200089e4

0800223c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <OTG_FS_IRQHandler+0x10>)
 8002242:	f002 fe9b 	bl	8004f7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200094f8 	.word	0x200094f8

08002250 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <LTDC_IRQHandler+0x10>)
 8002256:	f004 faeb 	bl	8006830 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20008694 	.word	0x20008694

08002264 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <DMA2D_IRQHandler+0x10>)
 800226a:	f001 fc0f 	bl	8003a8c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000853c 	.word	0x2000853c

08002278 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	e00a      	b.n	80022a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800228a:	f3af 8000 	nop.w
 800228e:	4601      	mov	r1, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	b2ca      	uxtb	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbf0      	blt.n	800228a <_read+0x12>
	}

return len;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e009      	b.n	80022d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f9a7 	bl	8001620 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbf1      	blt.n	80022c4 <_write+0x12>
	}
	return len;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_close>:

int _close(int file)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002312:	605a      	str	r2, [r3, #4]
	return 0;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_isatty>:

int _isatty(int file)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	return 1;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <_sbrk+0x5c>)
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <_sbrk+0x60>)
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_sbrk+0x64>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <_sbrk+0x68>)
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002384:	f010 fcec 	bl	8012d60 <__errno>
 8002388:	4602      	mov	r2, r0
 800238a:	230c      	movs	r3, #12
 800238c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	e009      	b.n	80023a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <_sbrk+0x64>)
 80023a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20050000 	.word	0x20050000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	20000310 	.word	0x20000310
 80023bc:	200097c0 	.word	0x200097c0

080023c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <SystemInit+0x28>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <SystemInit+0x28>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SystemInit+0x28>)
 80023d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023da:	609a      	str	r2, [r3, #8]
#endif
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b09a      	sub	sp, #104	; 0x68
 80023f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	615a      	str	r2, [r3, #20]
 800241e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	222c      	movs	r2, #44	; 0x2c
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f010 fcdf 	bl	8012dea <memset>

  htim1.Instance = TIM1;
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <MX_TIM1_Init+0x150>)
 800242e:	4a44      	ldr	r2, [pc, #272]	; (8002540 <MX_TIM1_Init+0x154>)
 8002430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002432:	4b42      	ldr	r3, [pc, #264]	; (800253c <MX_TIM1_Init+0x150>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002438:	4b40      	ldr	r3, [pc, #256]	; (800253c <MX_TIM1_Init+0x150>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800243e:	4b3f      	ldr	r3, [pc, #252]	; (800253c <MX_TIM1_Init+0x150>)
 8002440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <MX_TIM1_Init+0x150>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800244c:	4b3b      	ldr	r3, [pc, #236]	; (800253c <MX_TIM1_Init+0x150>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <MX_TIM1_Init+0x150>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002458:	4838      	ldr	r0, [pc, #224]	; (800253c <MX_TIM1_Init+0x150>)
 800245a:	f007 fe67 	bl	800a12c <HAL_TIM_Base_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002464:	f7ff fa12 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800246e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002472:	4619      	mov	r1, r3
 8002474:	4831      	ldr	r0, [pc, #196]	; (800253c <MX_TIM1_Init+0x150>)
 8002476:	f008 f911 	bl	800a69c <HAL_TIM_ConfigClockSource>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002480:	f7ff fa04 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002484:	482d      	ldr	r0, [pc, #180]	; (800253c <MX_TIM1_Init+0x150>)
 8002486:	f007 fea7 	bl	800a1d8 <HAL_TIM_PWM_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002490:	f7ff f9fc 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4825      	ldr	r0, [pc, #148]	; (800253c <MX_TIM1_Init+0x150>)
 80024a8:	f008 fd72 	bl	800af90 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80024b2:	f7ff f9eb 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b6:	2360      	movs	r3, #96	; 0x60
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024be:	2300      	movs	r3, #0
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024c2:	2300      	movs	r3, #0
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d6:	2200      	movs	r2, #0
 80024d8:	4619      	mov	r1, r3
 80024da:	4818      	ldr	r0, [pc, #96]	; (800253c <MX_TIM1_Init+0x150>)
 80024dc:	f007 ffc6 	bl	800a46c <HAL_TIM_PWM_ConfigChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80024e6:	f7ff f9d1 	bl	800188c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002502:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800250c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4807      	ldr	r0, [pc, #28]	; (800253c <MX_TIM1_Init+0x150>)
 8002520:	f008 fdc4 	bl	800b0ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800252a:	f7ff f9af 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <MX_TIM1_Init+0x150>)
 8002530:	f000 fa96 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 8002534:	bf00      	nop
 8002536:	3768      	adds	r7, #104	; 0x68
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20008ae4 	.word	0x20008ae4
 8002540:	40010000 	.word	0x40010000

08002544 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	; 0x38
 8002548:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002564:	463b      	mov	r3, r7
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	615a      	str	r2, [r3, #20]
 8002574:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <MX_TIM2_Init+0xe8>)
 8002578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800257c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800257e:	4b2b      	ldr	r3, [pc, #172]	; (800262c <MX_TIM2_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002584:	4b29      	ldr	r3, [pc, #164]	; (800262c <MX_TIM2_Init+0xe8>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800258a:	4b28      	ldr	r3, [pc, #160]	; (800262c <MX_TIM2_Init+0xe8>)
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <MX_TIM2_Init+0xe8>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <MX_TIM2_Init+0xe8>)
 800259a:	2200      	movs	r2, #0
 800259c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800259e:	4823      	ldr	r0, [pc, #140]	; (800262c <MX_TIM2_Init+0xe8>)
 80025a0:	f007 fdc4 	bl	800a12c <HAL_TIM_Base_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80025aa:	f7ff f96f 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b8:	4619      	mov	r1, r3
 80025ba:	481c      	ldr	r0, [pc, #112]	; (800262c <MX_TIM2_Init+0xe8>)
 80025bc:	f008 f86e 	bl	800a69c <HAL_TIM_ConfigClockSource>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80025c6:	f7ff f961 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025ca:	4818      	ldr	r0, [pc, #96]	; (800262c <MX_TIM2_Init+0xe8>)
 80025cc:	f007 fe04 	bl	800a1d8 <HAL_TIM_PWM_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80025d6:	f7ff f959 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	4619      	mov	r1, r3
 80025e8:	4810      	ldr	r0, [pc, #64]	; (800262c <MX_TIM2_Init+0xe8>)
 80025ea:	f008 fcd1 	bl	800af90 <HAL_TIMEx_MasterConfigSynchronization>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80025f4:	f7ff f94a 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f8:	2360      	movs	r3, #96	; 0x60
 80025fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002608:	463b      	mov	r3, r7
 800260a:	2200      	movs	r2, #0
 800260c:	4619      	mov	r1, r3
 800260e:	4807      	ldr	r0, [pc, #28]	; (800262c <MX_TIM2_Init+0xe8>)
 8002610:	f007 ff2c 	bl	800a46c <HAL_TIM_PWM_ConfigChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800261a:	f7ff f937 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800261e:	4803      	ldr	r0, [pc, #12]	; (800262c <MX_TIM2_Init+0xe8>)
 8002620:	f000 fa1e 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 8002624:	bf00      	nop
 8002626:	3738      	adds	r7, #56	; 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20008b24 	.word	0x20008b24

08002630 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08e      	sub	sp, #56	; 0x38
 8002634:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002650:	463b      	mov	r3, r7
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002662:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <MX_TIM3_Init+0xe8>)
 8002664:	4a2d      	ldr	r2, [pc, #180]	; (800271c <MX_TIM3_Init+0xec>)
 8002666:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <MX_TIM3_Init+0xe8>)
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <MX_TIM3_Init+0xe8>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <MX_TIM3_Init+0xe8>)
 8002676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800267a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <MX_TIM3_Init+0xe8>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002682:	4b25      	ldr	r3, [pc, #148]	; (8002718 <MX_TIM3_Init+0xe8>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002688:	4823      	ldr	r0, [pc, #140]	; (8002718 <MX_TIM3_Init+0xe8>)
 800268a:	f007 fd4f 	bl	800a12c <HAL_TIM_Base_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002694:	f7ff f8fa 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800269e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a2:	4619      	mov	r1, r3
 80026a4:	481c      	ldr	r0, [pc, #112]	; (8002718 <MX_TIM3_Init+0xe8>)
 80026a6:	f007 fff9 	bl	800a69c <HAL_TIM_ConfigClockSource>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80026b0:	f7ff f8ec 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026b4:	4818      	ldr	r0, [pc, #96]	; (8002718 <MX_TIM3_Init+0xe8>)
 80026b6:	f007 fd8f 	bl	800a1d8 <HAL_TIM_PWM_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80026c0:	f7ff f8e4 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4811      	ldr	r0, [pc, #68]	; (8002718 <MX_TIM3_Init+0xe8>)
 80026d4:	f008 fc5c 	bl	800af90 <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80026de:	f7ff f8d5 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e2:	2360      	movs	r3, #96	; 0x60
 80026e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <MX_TIM3_Init+0xe8>)
 80026fa:	f007 feb7 	bl	800a46c <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002704:	f7ff f8c2 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002708:	4803      	ldr	r0, [pc, #12]	; (8002718 <MX_TIM3_Init+0xe8>)
 800270a:	f000 f9a9 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 800270e:	bf00      	nop
 8002710:	3738      	adds	r7, #56	; 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20008aa4 	.word	0x20008aa4
 800271c:	40000400 	.word	0x40000400

08002720 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08e      	sub	sp, #56	; 0x38
 8002724:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002740:	463b      	mov	r3, r7
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	615a      	str	r2, [r3, #20]
 8002750:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <MX_TIM5_Init+0xe8>)
 8002754:	4a2d      	ldr	r2, [pc, #180]	; (800280c <MX_TIM5_Init+0xec>)
 8002756:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <MX_TIM5_Init+0xe8>)
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <MX_TIM5_Init+0xe8>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002764:	4b28      	ldr	r3, [pc, #160]	; (8002808 <MX_TIM5_Init+0xe8>)
 8002766:	f04f 32ff 	mov.w	r2, #4294967295
 800276a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <MX_TIM5_Init+0xe8>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <MX_TIM5_Init+0xe8>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002778:	4823      	ldr	r0, [pc, #140]	; (8002808 <MX_TIM5_Init+0xe8>)
 800277a:	f007 fcd7 	bl	800a12c <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002784:	f7ff f882 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800278e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002792:	4619      	mov	r1, r3
 8002794:	481c      	ldr	r0, [pc, #112]	; (8002808 <MX_TIM5_Init+0xe8>)
 8002796:	f007 ff81 	bl	800a69c <HAL_TIM_ConfigClockSource>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80027a0:	f7ff f874 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80027a4:	4818      	ldr	r0, [pc, #96]	; (8002808 <MX_TIM5_Init+0xe8>)
 80027a6:	f007 fd17 	bl	800a1d8 <HAL_TIM_PWM_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80027b0:	f7ff f86c 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4811      	ldr	r0, [pc, #68]	; (8002808 <MX_TIM5_Init+0xe8>)
 80027c4:	f008 fbe4 	bl	800af90 <HAL_TIMEx_MasterConfigSynchronization>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80027ce:	f7ff f85d 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d2:	2360      	movs	r3, #96	; 0x60
 80027d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027e2:	463b      	mov	r3, r7
 80027e4:	220c      	movs	r2, #12
 80027e6:	4619      	mov	r1, r3
 80027e8:	4807      	ldr	r0, [pc, #28]	; (8002808 <MX_TIM5_Init+0xe8>)
 80027ea:	f007 fe3f 	bl	800a46c <HAL_TIM_PWM_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80027f4:	f7ff f84a 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80027f8:	4803      	ldr	r0, [pc, #12]	; (8002808 <MX_TIM5_Init+0xe8>)
 80027fa:	f000 f931 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 80027fe:	bf00      	nop
 8002800:	3738      	adds	r7, #56	; 0x38
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20008a64 	.word	0x20008a64
 800280c:	40000c00 	.word	0x40000c00

08002810 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <MX_TIM8_Init+0xa0>)
 8002830:	4a20      	ldr	r2, [pc, #128]	; (80028b4 <MX_TIM8_Init+0xa4>)
 8002832:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <MX_TIM8_Init+0xa0>)
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_TIM8_Init+0xa0>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_TIM8_Init+0xa0>)
 8002842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002846:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_TIM8_Init+0xa0>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_TIM8_Init+0xa0>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MX_TIM8_Init+0xa0>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800285a:	4815      	ldr	r0, [pc, #84]	; (80028b0 <MX_TIM8_Init+0xa0>)
 800285c:	f007 fc66 	bl	800a12c <HAL_TIM_Base_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002866:	f7ff f811 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	4619      	mov	r1, r3
 8002876:	480e      	ldr	r0, [pc, #56]	; (80028b0 <MX_TIM8_Init+0xa0>)
 8002878:	f007 ff10 	bl	800a69c <HAL_TIM_ConfigClockSource>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002882:	f7ff f803 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4806      	ldr	r0, [pc, #24]	; (80028b0 <MX_TIM8_Init+0xa0>)
 8002898:	f008 fb7a 	bl	800af90 <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80028a2:	f7fe fff3 	bl	800188c <Error_Handler>
  }

}
 80028a6:	bf00      	nop
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20008a24 	.word	0x20008a24
 80028b4:	40010400 	.word	0x40010400

080028b8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
 80028cc:	615a      	str	r2, [r3, #20]
 80028ce:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_TIM12_Init+0x84>)
 80028d2:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <MX_TIM12_Init+0x88>)
 80028d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80028d6:	4b19      	ldr	r3, [pc, #100]	; (800293c <MX_TIM12_Init+0x84>)
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <MX_TIM12_Init+0x84>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_TIM12_Init+0x84>)
 80028e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_TIM12_Init+0x84>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_TIM12_Init+0x84>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028f6:	4811      	ldr	r0, [pc, #68]	; (800293c <MX_TIM12_Init+0x84>)
 80028f8:	f007 fc6e 	bl	800a1d8 <HAL_TIM_PWM_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002902:	f7fe ffc3 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002906:	2360      	movs	r3, #96	; 0x60
 8002908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2200      	movs	r2, #0
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	; (800293c <MX_TIM12_Init+0x84>)
 800291e:	f007 fda5 	bl	800a46c <HAL_TIM_PWM_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002928:	f7fe ffb0 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <MX_TIM12_Init+0x84>)
 800292e:	f000 f897 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 8002932:	bf00      	nop
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20008b64 	.word	0x20008b64
 8002940:	40001800 	.word	0x40001800

08002944 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <HAL_TIM_Base_MspInit+0xc8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10c      	bne.n	8002970 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002956:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a2d      	ldr	r2, [pc, #180]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800296e:	e046      	b.n	80029fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d10c      	bne.n	8002994 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800297a:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	69bb      	ldr	r3, [r7, #24]
}
 8002992:	e034      	b.n	80029fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <HAL_TIM_Base_MspInit+0xd0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]
}
 80029b6:	e022      	b.n	80029fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a16      	ldr	r2, [pc, #88]	; (8002a18 <HAL_TIM_Base_MspInit+0xd4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10c      	bne.n	80029dc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
}
 80029da:	e010      	b.n	80029fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_TIM_Base_MspInit+0xd8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10b      	bne.n	80029fe <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <HAL_TIM_Base_MspInit+0xcc>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
}
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000c00 	.word	0x40000c00
 8002a1c:	40010400 	.word	0x40010400

08002a20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_TIM_PWM_MspInit+0x38>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10b      	bne.n	8002a4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40001800 	.word	0x40001800
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a56      	ldr	r2, [pc, #344]	; (8002bd8 <HAL_TIM_MspPostInit+0x178>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11d      	bne.n	8002abe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	4b56      	ldr	r3, [pc, #344]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a55      	ldr	r2, [pc, #340]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aac:	2301      	movs	r3, #1
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	484a      	ldr	r0, [pc, #296]	; (8002be0 <HAL_TIM_MspPostInit+0x180>)
 8002ab8:	f001 fdf6 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002abc:	e087      	b.n	8002bce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d11d      	bne.n	8002b04 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a43      	ldr	r2, [pc, #268]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002af2:	2301      	movs	r3, #1
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4619      	mov	r1, r3
 8002afc:	4838      	ldr	r0, [pc, #224]	; (8002be0 <HAL_TIM_MspPostInit+0x180>)
 8002afe:	f001 fdd3 	bl	80046a8 <HAL_GPIO_Init>
}
 8002b02:	e064      	b.n	8002bce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a36      	ldr	r2, [pc, #216]	; (8002be4 <HAL_TIM_MspPostInit+0x184>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d11c      	bne.n	8002b48 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a32      	ldr	r2, [pc, #200]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002b26:	2310      	movs	r3, #16
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b36:	2302      	movs	r3, #2
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4829      	ldr	r0, [pc, #164]	; (8002be8 <HAL_TIM_MspPostInit+0x188>)
 8002b42:	f001 fdb1 	bl	80046a8 <HAL_GPIO_Init>
}
 8002b46:	e042      	b.n	8002bce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_TIM_MspPostInit+0x18c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d11c      	bne.n	8002b8c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	f107 031c 	add.w	r3, r7, #28
 8002b82:	4619      	mov	r1, r3
 8002b84:	481a      	ldr	r0, [pc, #104]	; (8002bf0 <HAL_TIM_MspPostInit+0x190>)
 8002b86:	f001 fd8f 	bl	80046a8 <HAL_GPIO_Init>
}
 8002b8a:	e020      	b.n	8002bce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_TIM_MspPostInit+0x194>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d11b      	bne.n	8002bce <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_TIM_MspPostInit+0x17c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bbe:	2309      	movs	r3, #9
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	480b      	ldr	r0, [pc, #44]	; (8002bf8 <HAL_TIM_MspPostInit+0x198>)
 8002bca:	f001 fd6d 	bl	80046a8 <HAL_GPIO_Init>
}
 8002bce:	bf00      	nop
 8002bd0:	3730      	adds	r7, #48	; 0x30
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40001800 	.word	0x40001800
 8002bf8:	40021c00 	.word	0x40021c00

08002bfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <MX_USART1_UART_Init+0x5c>)
 8002c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c22:	220c      	movs	r2, #12
 8002c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <MX_USART1_UART_Init+0x58>)
 8002c40:	f008 fad0 	bl	800b1e4 <HAL_UART_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c4a:	f7fe fe1f 	bl	800188c <Error_Handler>
  }

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20008ba4 	.word	0x20008ba4
 8002c58:	40011000 	.word	0x40011000

08002c5c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <MX_USART6_UART_Init+0x5c>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_USART6_UART_Init+0x58>)
 8002ca0:	f008 faa0 	bl	800b1e4 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002caa:	f7fe fdef 	bl	800188c <Error_Handler>
  }

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20008c24 	.word	0x20008c24
 8002cb8:	40011400 	.word	0x40011400

08002cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a40      	ldr	r2, [pc, #256]	; (8002ddc <HAL_UART_MspInit+0x120>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d14d      	bne.n	8002d7a <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cde:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cea:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a39      	ldr	r2, [pc, #228]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a33      	ldr	r2, [pc, #204]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d32:	2303      	movs	r3, #3
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d36:	2307      	movs	r3, #7
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4828      	ldr	r0, [pc, #160]	; (8002de4 <HAL_UART_MspInit+0x128>)
 8002d42:	f001 fcb1 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	4619      	mov	r1, r3
 8002d62:	4821      	ldr	r0, [pc, #132]	; (8002de8 <HAL_UART_MspInit+0x12c>)
 8002d64:	f001 fca0 	bl	80046a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2025      	movs	r0, #37	; 0x25
 8002d6e:	f000 fbf9 	bl	8003564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d72:	2025      	movs	r0, #37	; 0x25
 8002d74:	f000 fc12 	bl	800359c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d78:	e02c      	b.n	8002dd4 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART6)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_UART_MspInit+0x130>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d127      	bne.n	8002dd4 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d8a:	f043 0320 	orr.w	r3, r3, #32
 8002d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6313      	str	r3, [r2, #48]	; 0x30
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_UART_MspInit+0x124>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002db4:	23c0      	movs	r3, #192	; 0xc0
 8002db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4808      	ldr	r0, [pc, #32]	; (8002df0 <HAL_UART_MspInit+0x134>)
 8002dd0:	f001 fc6a 	bl	80046a8 <HAL_GPIO_Init>
}
 8002dd4:	bf00      	nop
 8002dd6:	3730      	adds	r7, #48	; 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40011000 	.word	0x40011000
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40011400 	.word	0x40011400
 8002df0:	40020800 	.word	0x40020800

08002df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002df8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dfa:	e003      	b.n	8002e04 <LoopCopyDataInit>

08002dfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e02:	3104      	adds	r1, #4

08002e04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e04:	480b      	ldr	r0, [pc, #44]	; (8002e34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e0c:	d3f6      	bcc.n	8002dfc <CopyDataInit>
  ldr  r2, =_sbss
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e10:	e002      	b.n	8002e18 <LoopFillZerobss>

08002e12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e14:	f842 3b04 	str.w	r3, [r2], #4

08002e18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e1c:	d3f9      	bcc.n	8002e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e1e:	f7ff facf 	bl	80023c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e22:	f00f ffa3 	bl	8012d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e26:	f7fe fc19 	bl	800165c <main>
  bx  lr    
 8002e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e2c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002e30:	08013814 	.word	0x08013814
  ldr  r0, =_sdata
 8002e34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e38:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002e3c:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8002e40:	200097c0 	.word	0x200097c0

08002e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e44:	e7fe      	b.n	8002e44 <ADC_IRQHandler>

08002e46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	f000 fb7f 	bl	800354e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7ff f96d 	bl	8002130 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e56:	f7ff f943 	bl	80020e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_IncTick+0x20>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_IncTick+0x24>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_IncTick+0x24>)
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000008 	.word	0x20000008
 8002e84:	20008ca4 	.word	0x20008ca4

08002e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_GetTick+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20008ca4 	.word	0x20008ca4

08002ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff ffee 	bl	8002e88 <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d005      	beq.n	8002ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_Delay+0x40>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ec6:	bf00      	nop
 8002ec8:	f7ff ffde 	bl	8002e88 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d8f7      	bhi.n	8002ec8 <HAL_Delay+0x28>
  {
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000008 	.word	0x20000008

08002ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e031      	b.n	8002f5e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fb56 	bl	80005b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HAL_ADC_Init+0x84>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	f043 0202 	orr.w	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f964 	bl	8003200 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4e:	e001      	b.n	8002f54 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	ffffeefd 	.word	0xffffeefd

08002f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1c>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e12a      	b.n	80031de <HAL_ADC_ConfigChannel+0x272>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	d93a      	bls.n	800300e <HAL_ADC_ConfigChannel+0xa2>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fa0:	d035      	beq.n	800300e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68d9      	ldr	r1, [r3, #12]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b1e      	subs	r3, #30
 8002fb8:	2207      	movs	r2, #7
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a87      	ldr	r2, [pc, #540]	; (80031ec <HAL_ADC_ConfigChannel+0x280>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68d9      	ldr	r1, [r3, #12]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	061a      	lsls	r2, r3, #24
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe6:	e035      	b.n	8003054 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68d9      	ldr	r1, [r3, #12]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4403      	add	r3, r0
 8003000:	3b1e      	subs	r3, #30
 8003002:	409a      	lsls	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800300c:	e022      	b.n	8003054 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6919      	ldr	r1, [r3, #16]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	2207      	movs	r2, #7
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43da      	mvns	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	400a      	ands	r2, r1
 8003030:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6919      	ldr	r1, [r3, #16]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	4603      	mov	r3, r0
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4403      	add	r3, r0
 800304a:	409a      	lsls	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b06      	cmp	r3, #6
 800305a:	d824      	bhi.n	80030a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b05      	subs	r3, #5
 800306e:	221f      	movs	r2, #31
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43da      	mvns	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	400a      	ands	r2, r1
 800307c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	4618      	mov	r0, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b05      	subs	r3, #5
 8003098:	fa00 f203 	lsl.w	r2, r0, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	635a      	str	r2, [r3, #52]	; 0x34
 80030a4:	e04c      	b.n	8003140 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d824      	bhi.n	80030f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	3b23      	subs	r3, #35	; 0x23
 80030c0:	221f      	movs	r2, #31
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43da      	mvns	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	400a      	ands	r2, r1
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	3b23      	subs	r3, #35	; 0x23
 80030ea:	fa00 f203 	lsl.w	r2, r0, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
 80030f6:	e023      	b.n	8003140 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b41      	subs	r3, #65	; 0x41
 800310a:	221f      	movs	r2, #31
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43da      	mvns	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	400a      	ands	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b41      	subs	r3, #65	; 0x41
 8003134:	fa00 f203 	lsl.w	r2, r0, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <HAL_ADC_ConfigChannel+0x284>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1f4>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003152:	d105      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_ADC_ConfigChannel+0x288>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_ADC_ConfigChannel+0x288>)
 800315a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800315e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_ADC_ConfigChannel+0x284>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d109      	bne.n	800317e <HAL_ADC_ConfigChannel+0x212>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b12      	cmp	r3, #18
 8003170:	d105      	bne.n	800317e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_ADC_ConfigChannel+0x288>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_ADC_ConfigChannel+0x288>)
 8003178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800317c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_ADC_ConfigChannel+0x284>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d125      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x268>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_ADC_ConfigChannel+0x280>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <HAL_ADC_ConfigChannel+0x22e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b11      	cmp	r3, #17
 8003198:	d11c      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <HAL_ADC_ConfigChannel+0x288>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <HAL_ADC_ConfigChannel+0x288>)
 80031a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <HAL_ADC_ConfigChannel+0x280>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d111      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_ADC_ConfigChannel+0x28c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a11      	ldr	r2, [pc, #68]	; (80031fc <HAL_ADC_ConfigChannel+0x290>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0c9a      	lsrs	r2, r3, #18
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031c6:	e002      	b.n	80031ce <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	10000012 	.word	0x10000012
 80031f0:	40012000 	.word	0x40012000
 80031f4:	40012300 	.word	0x40012300
 80031f8:	20000000 	.word	0x20000000
 80031fc:	431bde83 	.word	0x431bde83

08003200 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003208:	4b78      	ldr	r3, [pc, #480]	; (80033ec <ADC_Init+0x1ec>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a77      	ldr	r2, [pc, #476]	; (80033ec <ADC_Init+0x1ec>)
 800320e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003212:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <ADC_Init+0x1ec>)
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4973      	ldr	r1, [pc, #460]	; (80033ec <ADC_Init+0x1ec>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	021a      	lsls	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <ADC_Init+0x1f0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e00f      	b.n	80032fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0202 	bic.w	r2, r2, #2
 8003308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6899      	ldr	r1, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	005a      	lsls	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003336:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	3b01      	subs	r3, #1
 8003354:	035a      	lsls	r2, r3, #13
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e007      	b.n	8003370 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	3b01      	subs	r3, #1
 800338c:	051a      	lsls	r2, r3, #20
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033b2:	025a      	lsls	r2, r3, #9
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	029a      	lsls	r2, r3, #10
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40012300 	.word	0x40012300
 80033f0:	0f000001 	.word	0x0f000001

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	; (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	05fa0000 	.word	0x05fa0000

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff4c 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003576:	f7ff ff61 	bl	800343c <__NVIC_GetPriorityGrouping>
 800357a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	6978      	ldr	r0, [r7, #20]
 8003582:	f7ff ffb1 	bl	80034e8 <NVIC_EncodePriority>
 8003586:	4602      	mov	r2, r0
 8003588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff80 	bl	8003494 <__NVIC_SetPriority>
}
 8003594:	bf00      	nop
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff54 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e054      	b.n	8003674 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7f5b      	ldrb	r3, [r3, #29]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd f866 	bl	80006ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	791b      	ldrb	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a22      	ldr	r2, [pc, #136]	; (800367c <HAL_CRC_Init+0xc4>)
 80035f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0218 	bic.w	r2, r2, #24
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	e00c      	b.n	8003622 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	461a      	mov	r2, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f834 	bl	8003680 <HAL_CRCEx_Polynomial_Set>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e028      	b.n	8003674 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	795b      	ldrb	r3, [r3, #5]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f04f 32ff 	mov.w	r2, #4294967295
 8003632:	611a      	str	r2, [r3, #16]
 8003634:	e004      	b.n	8003640 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6912      	ldr	r2, [r2, #16]
 800363e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	04c11db7 	.word	0x04c11db7

08003680 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003690:	231f      	movs	r3, #31
 8003692:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003694:	bf00      	nop
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	613a      	str	r2, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b18      	cmp	r3, #24
 80036b8:	d846      	bhi.n	8003748 <HAL_CRCEx_Polynomial_Set+0xc8>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	0800374f 	.word	0x0800374f
 80036c4:	08003749 	.word	0x08003749
 80036c8:	08003749 	.word	0x08003749
 80036cc:	08003749 	.word	0x08003749
 80036d0:	08003749 	.word	0x08003749
 80036d4:	08003749 	.word	0x08003749
 80036d8:	08003749 	.word	0x08003749
 80036dc:	08003749 	.word	0x08003749
 80036e0:	0800373d 	.word	0x0800373d
 80036e4:	08003749 	.word	0x08003749
 80036e8:	08003749 	.word	0x08003749
 80036ec:	08003749 	.word	0x08003749
 80036f0:	08003749 	.word	0x08003749
 80036f4:	08003749 	.word	0x08003749
 80036f8:	08003749 	.word	0x08003749
 80036fc:	08003749 	.word	0x08003749
 8003700:	08003731 	.word	0x08003731
 8003704:	08003749 	.word	0x08003749
 8003708:	08003749 	.word	0x08003749
 800370c:	08003749 	.word	0x08003749
 8003710:	08003749 	.word	0x08003749
 8003714:	08003749 	.word	0x08003749
 8003718:	08003749 	.word	0x08003749
 800371c:	08003749 	.word	0x08003749
 8003720:	08003725 	.word	0x08003725
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d913      	bls.n	8003752 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800372e:	e010      	b.n	8003752 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b07      	cmp	r3, #7
 8003734:	d90f      	bls.n	8003756 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800373a:	e00c      	b.n	8003756 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b0f      	cmp	r3, #15
 8003740:	d90b      	bls.n	800375a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003746:	e008      	b.n	800375a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
      break;
 800374c:	e006      	b.n	800375c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800375a:	bf00      	nop
  }
  if (status == HAL_OK)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 0118 	bic.w	r1, r3, #24
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e069      	b.n	8003872 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fc ffd2 	bl	8000754 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <HAL_DCMI_Init+0xf0>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003802:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800380e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800381a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b10      	cmp	r3, #16
 800382a:	d112      	bne.n	8003852 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7f1b      	ldrb	r3, [r3, #28]
 8003830:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7f5b      	ldrb	r3, [r3, #29]
 8003836:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003838:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7f9b      	ldrb	r3, [r3, #30]
 800383e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003840:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7fdb      	ldrb	r3, [r3, #31]
 8003848:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800384e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003850:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 021e 	orr.w	r2, r2, #30
 8003860:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	ffe0f007 	.word	0xffe0f007

08003880 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_DMA_Start_IT+0x26>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e048      	b.n	8003938 <HAL_DMA_Start_IT+0xb8>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d137      	bne.n	800392a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f864 	bl	800399c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	223f      	movs	r2, #63	; 0x3f
 80038da:	409a      	lsls	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0216 	orr.w	r2, r2, #22
 80038ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0208 	orr.w	r2, r2, #8
 8003916:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e005      	b.n	8003936 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d004      	beq.n	800395e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e00c      	b.n	8003978 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2205      	movs	r2, #5
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d108      	bne.n	80039dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039da:	e007      	b.n	80039ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e039      	b.n	8003a7e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fc ff88 	bl	8000934 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	f023 0107 	bic.w	r1, r3, #7
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_DMA2D_Init+0x90>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d1      	ldr	r1, [r2, #12]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	ffffc000 	.word	0xffffc000

08003a8c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d026      	beq.n	8003afc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d021      	beq.n	8003afc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d026      	beq.n	8003b54 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d021      	beq.n	8003b54 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2220      	movs	r2, #32
 8003b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	f043 0202 	orr.w	r2, r3, #2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2204      	movs	r2, #4
 8003b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d026      	beq.n	8003bac <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d021      	beq.n	8003bac <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b76:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	f043 0204 	orr.w	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d013      	beq.n	8003bde <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bce:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f853 	bl	8003c84 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d024      	beq.n	8003c32 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01f      	beq.n	8003c32 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c00:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2202      	movs	r2, #2
 8003c08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01f      	beq.n	8003c7c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01a      	beq.n	8003c7c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c54:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f80e 	bl	8003c98 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_DMA2D_ConfigLayer+0x20>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e079      	b.n	8003dc0 <HAL_DMA2D_ConfigLayer+0x114>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	3318      	adds	r3, #24
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003cf6:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <HAL_DMA2D_ConfigLayer+0x120>)
 8003cf8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b0a      	cmp	r3, #10
 8003d00:	d003      	beq.n	8003d0a <HAL_DMA2D_ConfigLayer+0x5e>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b09      	cmp	r3, #9
 8003d08:	d107      	bne.n	8003d1a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e005      	b.n	8003d26 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d120      	bne.n	8003d6e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	ea02 0103 	and.w	r1, r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b0a      	cmp	r3, #10
 8003d54:	d003      	beq.n	8003d5e <HAL_DMA2D_ConfigLayer+0xb2>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b09      	cmp	r3, #9
 8003d5c:	d127      	bne.n	8003dae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d6c:	e01f      	b.n	8003dae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	ea02 0103 	and.w	r1, r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b0a      	cmp	r3, #10
 8003d96:	d003      	beq.n	8003da0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b09      	cmp	r3, #9
 8003d9e:	d106      	bne.n	8003dae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003dac:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	ff03000f 	.word	0xff03000f

08003dd0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003de0:	4ba9      	ldr	r3, [pc, #676]	; (8004088 <HAL_ETH_Init+0x2b8>)
 8003de2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e183      	b.n	80040fe <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fc fdf8 	bl	8000a00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e10:	4b9e      	ldr	r3, [pc, #632]	; (800408c <HAL_ETH_Init+0x2bc>)
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	4a9d      	ldr	r2, [pc, #628]	; (800408c <HAL_ETH_Init+0x2bc>)
 8003e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e1a:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1c:	4b9b      	ldr	r3, [pc, #620]	; (800408c <HAL_ETH_Init+0x2bc>)
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e28:	4b99      	ldr	r3, [pc, #612]	; (8004090 <HAL_ETH_Init+0x2c0>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a98      	ldr	r2, [pc, #608]	; (8004090 <HAL_ETH_Init+0x2c0>)
 8003e2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e32:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e34:	4b96      	ldr	r3, [pc, #600]	; (8004090 <HAL_ETH_Init+0x2c0>)
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4994      	ldr	r1, [pc, #592]	; (8004090 <HAL_ETH_Init+0x2c0>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e58:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003e5a:	f7ff f815 	bl	8002e88 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003e60:	e011      	b.n	8003e86 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003e62:	f7ff f811 	bl	8002e88 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e70:	d909      	bls.n	8003e86 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2203      	movs	r2, #3
 8003e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e13b      	b.n	80040fe <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e4      	bne.n	8003e62 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f023 031c 	bic.w	r3, r3, #28
 8003ea6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ea8:	f003 fcc0 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8003eac:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4a78      	ldr	r2, [pc, #480]	; (8004094 <HAL_ETH_Init+0x2c4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d908      	bls.n	8003ec8 <HAL_ETH_Init+0xf8>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	4a77      	ldr	r2, [pc, #476]	; (8004098 <HAL_ETH_Init+0x2c8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d804      	bhi.n	8003ec8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f043 0308 	orr.w	r3, r3, #8
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e027      	b.n	8003f18 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4a73      	ldr	r2, [pc, #460]	; (8004098 <HAL_ETH_Init+0x2c8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d908      	bls.n	8003ee2 <HAL_ETH_Init+0x112>
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	4a72      	ldr	r2, [pc, #456]	; (800409c <HAL_ETH_Init+0x2cc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d804      	bhi.n	8003ee2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f043 030c 	orr.w	r3, r3, #12
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e01a      	b.n	8003f18 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	4a6d      	ldr	r2, [pc, #436]	; (800409c <HAL_ETH_Init+0x2cc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d903      	bls.n	8003ef2 <HAL_ETH_Init+0x122>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4a6c      	ldr	r2, [pc, #432]	; (80040a0 <HAL_ETH_Init+0x2d0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d911      	bls.n	8003f16 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	4a6a      	ldr	r2, [pc, #424]	; (80040a0 <HAL_ETH_Init+0x2d0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d908      	bls.n	8003f0c <HAL_ETH_Init+0x13c>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4a69      	ldr	r2, [pc, #420]	; (80040a4 <HAL_ETH_Init+0x2d4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d804      	bhi.n	8003f0c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	e005      	b.n	8003f18 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f043 0310 	orr.w	r3, r3, #16
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	e000      	b.n	8003f18 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003f16:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003f20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f24:	2100      	movs	r1, #0
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f956 	bl	80041d8 <HAL_ETH_WritePHYRegister>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003f36:	6939      	ldr	r1, [r7, #16]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f9b3 	bl	80042a4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0d9      	b.n	80040fe <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003f4a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003f4e:	f7fe ffa7 	bl	8002ea0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80a6 	beq.w	80040a8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f5c:	f7fe ff94 	bl	8002e88 <HAL_GetTick>
 8003f60:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003f62:	f107 030c 	add.w	r3, r7, #12
 8003f66:	461a      	mov	r2, r3
 8003f68:	2101      	movs	r1, #1
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8cc 	bl	8004108 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003f70:	f7fe ff8a 	bl	8002e88 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d90f      	bls.n	8003fa2 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003f86:	6939      	ldr	r1, [r7, #16]
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f98b 	bl	80042a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0ad      	b.n	80040fe <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0da      	beq.n	8003f62 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f910 	bl	80041d8 <HAL_ETH_WritePHYRegister>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003fc2:	6939      	ldr	r1, [r7, #16]
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f96d 	bl	80042a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e093      	b.n	80040fe <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd6:	f7fe ff57 	bl	8002e88 <HAL_GetTick>
 8003fda:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f88f 	bl	8004108 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003fea:	f7fe ff4d 	bl	8002e88 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d90f      	bls.n	800401c <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004000:	6939      	ldr	r1, [r7, #16]
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f94e 	bl	80042a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e070      	b.n	80040fe <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0da      	beq.n	8003fdc <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004026:	f107 030c 	add.w	r3, r7, #12
 800402a:	461a      	mov	r2, r3
 800402c:	211f      	movs	r1, #31
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f86a 	bl	8004108 <HAL_ETH_ReadPHYRegister>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800403e:	6939      	ldr	r1, [r7, #16]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f92f 	bl	80042a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800404e:	2301      	movs	r3, #1
 8004050:	e055      	b.n	80040fe <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	e002      	b.n	800406c <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	e036      	b.n	80040ec <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004084:	609a      	str	r2, [r3, #8]
 8004086:	e031      	b.n	80040ec <HAL_ETH_Init+0x31c>
 8004088:	03938700 	.word	0x03938700
 800408c:	40023800 	.word	0x40023800
 8004090:	40013800 	.word	0x40013800
 8004094:	01312cff 	.word	0x01312cff
 8004098:	02160ebf 	.word	0x02160ebf
 800409c:	039386ff 	.word	0x039386ff
 80040a0:	05f5e0ff 	.word	0x05f5e0ff
 80040a4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	08db      	lsrs	r3, r3, #3
 80040ae:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80040b8:	4313      	orrs	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	2100      	movs	r1, #0
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f889 	bl	80041d8 <HAL_ETH_WritePHYRegister>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80040d0:	6939      	ldr	r1, [r7, #16]
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8e6 	bl	80042a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e00c      	b.n	80040fe <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80040e4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80040e8:	f7fe feda 	bl	8002ea0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80040ec:	6939      	ldr	r1, [r7, #16]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8d8 	bl	80042a4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop

08004108 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	460b      	mov	r3, r1
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b82      	cmp	r3, #130	; 0x82
 8004128:	d101      	bne.n	800412e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
 800412c:	e050      	b.n	80041d0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2282      	movs	r2, #130	; 0x82
 8004132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 031c 	and.w	r3, r3, #28
 8004144:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8a1b      	ldrh	r3, [r3, #16]
 800414a:	02db      	lsls	r3, r3, #11
 800414c:	b29b      	uxth	r3, r3
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004154:	897b      	ldrh	r3, [r7, #10]
 8004156:	019b      	lsls	r3, r3, #6
 8004158:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 0302 	bic.w	r3, r3, #2
 8004168:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800417a:	f7fe fe85 	bl	8002e88 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004180:	e015      	b.n	80041ae <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004182:	f7fe fe81 	bl	8002e88 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d309      	bcc.n	80041a6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e014      	b.n	80041d0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e4      	bne.n	8004182 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	460b      	mov	r3, r1
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b42      	cmp	r3, #66	; 0x42
 80041f8:	d101      	bne.n	80041fe <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
 80041fc:	e04e      	b.n	800429c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2242      	movs	r2, #66	; 0x42
 8004202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 031c 	and.w	r3, r3, #28
 8004214:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8a1b      	ldrh	r3, [r3, #16]
 800421a:	02db      	lsls	r3, r3, #11
 800421c:	b29b      	uxth	r3, r3
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004224:	897b      	ldrh	r3, [r7, #10]
 8004226:	019b      	lsls	r3, r3, #6
 8004228:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f043 0302 	orr.w	r3, r3, #2
 8004238:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004254:	f7fe fe18 	bl	8002e88 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800425a:	e015      	b.n	8004288 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800425c:	f7fe fe14 	bl	8002e88 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d309      	bcc.n	8004280 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e00d      	b.n	800429c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e4      	bne.n	800425c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b0b0      	sub	sp, #192	; 0xc0
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80042d2:	2300      	movs	r3, #0
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80042da:	2300      	movs	r3, #0
 80042dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80042de:	2300      	movs	r3, #0
 80042e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80042ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ee:	663b      	str	r3, [r7, #96]	; 0x60
 80042f0:	e001      	b.n	80042f6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80042f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042fa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004300:	2300      	movs	r3, #0
 8004302:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004304:	2300      	movs	r3, #0
 8004306:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800430c:	2300      	movs	r3, #0
 800430e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004356:	2300      	movs	r3, #0
 8004358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004362:	2300      	movs	r3, #0
 8004364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004378:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800437c:	4bab      	ldr	r3, [pc, #684]	; (800462c <ETH_MACDMAConfig+0x388>)
 800437e:	4013      	ands	r3, r2
 8004380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004384:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004388:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800438a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800438c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800438e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004390:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004396:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800439a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800439c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800439e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80043a4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80043a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80043a8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80043aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80043ac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80043ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80043b0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80043b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80043b4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80043b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80043b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80043ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043cc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043d8:	2001      	movs	r0, #1
 80043da:	f7fe fd61 	bl	8002ea0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043e6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80043ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043ec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80043ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80043f0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80043f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80043f6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80043f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80043fc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80043fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004402:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004408:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800440c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004414:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004416:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004422:	2001      	movs	r0, #1
 8004424:	f7fe fd3c 	bl	8002ea0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004430:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800443a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004444:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004450:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004454:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004458:	4013      	ands	r3, r2
 800445a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800445e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004462:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004468:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800446a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800446e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004474:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800447a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800447c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004480:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004482:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004494:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80044a0:	2001      	movs	r0, #1
 80044a2:	f7fe fcfd 	bl	8002ea0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044ae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80044b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80044b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fe fce8 	bl	8002ea0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044d8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80044de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80044e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044ec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80044fa:	2300      	movs	r3, #0
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80044fe:	2304      	movs	r3, #4
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800450e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800451e:	2300      	movs	r3, #0
 8004520:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004522:	2300      	movs	r3, #0
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	f241 0318 	movw	r3, #4120	; 0x1018
 800452e:	4413      	add	r3, r2
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004536:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800453a:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <ETH_MACDMAConfig+0x38c>)
 800453c:	4013      	ands	r3, r2
 800453e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004542:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004544:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004546:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004548:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800454a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800454c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800454e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004550:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004552:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004554:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004556:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004558:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800455a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800455e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004562:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004564:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	f241 0318 	movw	r3, #4120	; 0x1018
 8004576:	4413      	add	r3, r2
 8004578:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800457c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	f241 0318 	movw	r3, #4120	; 0x1018
 8004586:	4413      	add	r3, r2
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800458e:	2001      	movs	r0, #1
 8004590:	f7fe fc86 	bl	8002ea0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	f241 0318 	movw	r3, #4120	; 0x1018
 800459c:	4413      	add	r3, r2
 800459e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045a2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80045a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80045a8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80045ac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80045b0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80045b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80045b4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80045b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80045ba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80045be:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80045c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045cc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80045dc:	2001      	movs	r0, #1
 80045de:	f7fe fc5f 	bl	8002ea0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045ee:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8004600:	4413      	add	r3, r2
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6811      	ldr	r1, [r2, #0]
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <ETH_MACDMAConfig+0x390>)
 800460a:	431a      	orrs	r2, r3
 800460c:	f241 031c 	movw	r3, #4124	; 0x101c
 8004610:	440b      	add	r3, r1
 8004612:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	461a      	mov	r2, r3
 800461a:	2100      	movs	r1, #0
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f80b 	bl	8004638 <ETH_MACAddressConfig>
}
 8004622:	bf00      	nop
 8004624:	37c0      	adds	r7, #192	; 0xc0
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	ff20810f 	.word	0xff20810f
 8004630:	f8de3f23 	.word	0xf8de3f23
 8004634:	00010040 	.word	0x00010040

08004638 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3305      	adds	r3, #5
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	3204      	adds	r2, #4
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <ETH_MACAddressConfig+0x68>)
 800465a:	4413      	add	r3, r2
 800465c:	461a      	mov	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3303      	adds	r3, #3
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	061a      	lsls	r2, r3, #24
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3302      	adds	r3, #2
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	041b      	lsls	r3, r3, #16
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3301      	adds	r3, #1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	4313      	orrs	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <ETH_MACAddressConfig+0x6c>)
 800468a:	4413      	add	r3, r2
 800468c:	461a      	mov	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	6013      	str	r3, [r2, #0]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40028040 	.word	0x40028040
 80046a4:	40028044 	.word	0x40028044

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e175      	b.n	80049b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 8164 	bne.w	80049ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d00b      	beq.n	8004706 <HAL_GPIO_Init+0x5e>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d007      	beq.n	8004706 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046fa:	2b11      	cmp	r3, #17
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b12      	cmp	r3, #18
 8004704:	d130      	bne.n	8004768 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	2203      	movs	r2, #3
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800473c:	2201      	movs	r2, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 0201 	and.w	r2, r3, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x100>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b12      	cmp	r3, #18
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80be 	beq.w	80049ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_GPIO_Init+0x320>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4a64      	ldr	r2, [pc, #400]	; (80049c8 <HAL_GPIO_Init+0x320>)
 8004838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483c:	6453      	str	r3, [r2, #68]	; 0x44
 800483e:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_GPIO_Init+0x320>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800484a:	4a60      	ldr	r2, [pc, #384]	; (80049cc <HAL_GPIO_Init+0x324>)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	3302      	adds	r3, #2
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	220f      	movs	r2, #15
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_GPIO_Init+0x328>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d037      	beq.n	80048e6 <HAL_GPIO_Init+0x23e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a56      	ldr	r2, [pc, #344]	; (80049d4 <HAL_GPIO_Init+0x32c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d031      	beq.n	80048e2 <HAL_GPIO_Init+0x23a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a55      	ldr	r2, [pc, #340]	; (80049d8 <HAL_GPIO_Init+0x330>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d02b      	beq.n	80048de <HAL_GPIO_Init+0x236>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a54      	ldr	r2, [pc, #336]	; (80049dc <HAL_GPIO_Init+0x334>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d025      	beq.n	80048da <HAL_GPIO_Init+0x232>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a53      	ldr	r2, [pc, #332]	; (80049e0 <HAL_GPIO_Init+0x338>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <HAL_GPIO_Init+0x22e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <HAL_GPIO_Init+0x33c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d019      	beq.n	80048d2 <HAL_GPIO_Init+0x22a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a51      	ldr	r2, [pc, #324]	; (80049e8 <HAL_GPIO_Init+0x340>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_GPIO_Init+0x226>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a50      	ldr	r2, [pc, #320]	; (80049ec <HAL_GPIO_Init+0x344>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00d      	beq.n	80048ca <HAL_GPIO_Init+0x222>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4f      	ldr	r2, [pc, #316]	; (80049f0 <HAL_GPIO_Init+0x348>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <HAL_GPIO_Init+0x21e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_GPIO_Init+0x34c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_GPIO_Init+0x21a>
 80048be:	2309      	movs	r3, #9
 80048c0:	e012      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048c2:	230a      	movs	r3, #10
 80048c4:	e010      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048c6:	2308      	movs	r3, #8
 80048c8:	e00e      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048ca:	2307      	movs	r3, #7
 80048cc:	e00c      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048ce:	2306      	movs	r3, #6
 80048d0:	e00a      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048d2:	2305      	movs	r3, #5
 80048d4:	e008      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048da:	2303      	movs	r3, #3
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x240>
 80048e6:	2300      	movs	r3, #0
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	f002 0203 	and.w	r2, r2, #3
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4093      	lsls	r3, r2
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048f8:	4934      	ldr	r1, [pc, #208]	; (80049cc <HAL_GPIO_Init+0x324>)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	3302      	adds	r3, #2
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004906:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <HAL_GPIO_Init+0x350>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800492a:	4a33      	ldr	r2, [pc, #204]	; (80049f8 <HAL_GPIO_Init+0x350>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004930:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_GPIO_Init+0x350>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004954:	4a28      	ldr	r2, [pc, #160]	; (80049f8 <HAL_GPIO_Init+0x350>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <HAL_GPIO_Init+0x350>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800497e:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_GPIO_Init+0x350>)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004984:	4b1c      	ldr	r3, [pc, #112]	; (80049f8 <HAL_GPIO_Init+0x350>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049a8:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <HAL_GPIO_Init+0x350>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	f67f ae86 	bls.w	80046c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049bc:	bf00      	nop
 80049be:	3724      	adds	r7, #36	; 0x24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40020000 	.word	0x40020000
 80049d4:	40020400 	.word	0x40020400
 80049d8:	40020800 	.word	0x40020800
 80049dc:	40020c00 	.word	0x40020c00
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40021400 	.word	0x40021400
 80049e8:	40021800 	.word	0x40021800
 80049ec:	40021c00 	.word	0x40021c00
 80049f0:	40022000 	.word	0x40022000
 80049f4:	40022400 	.word	0x40022400
 80049f8:	40013c00 	.word	0x40013c00

080049fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	887b      	ldrh	r3, [r7, #2]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
 8004a18:	e001      	b.n	8004a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a3c:	787b      	ldrb	r3, [r7, #1]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a48:	e003      	b.n	8004a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	041a      	lsls	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	619a      	str	r2, [r3, #24]
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a60:	b08f      	sub	sp, #60	; 0x3c
 8004a62:	af0a      	add	r7, sp, #40	; 0x28
 8004a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e054      	b.n	8004b1a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f00d fec6 	bl	801281c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2203      	movs	r2, #3
 8004a94:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f008 f8b5 	bl	800cc1e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	687e      	ldr	r6, [r7, #4]
 8004abc:	466d      	mov	r5, sp
 8004abe:	f106 0410 	add.w	r4, r6, #16
 8004ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ad2:	1d33      	adds	r3, r6, #4
 8004ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad6:	6838      	ldr	r0, [r7, #0]
 8004ad8:	f008 f838 	bl	800cb4c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f008 f8ac 	bl	800cc40 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	687e      	ldr	r6, [r7, #4]
 8004af0:	466d      	mov	r5, sp
 8004af2:	f106 0410 	add.w	r4, r6, #16
 8004af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b02:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b06:	1d33      	adds	r3, r6, #4
 8004b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f008 f9be 	bl	800ce8c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b22 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004b22:	b590      	push	{r4, r7, lr}
 8004b24:	b089      	sub	sp, #36	; 0x24
 8004b26:	af04      	add	r7, sp, #16
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4603      	mov	r3, r0
 8004b32:	70fb      	strb	r3, [r7, #3]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70bb      	strb	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_HCD_HC_Init+0x28>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e07f      	b.n	8004c4a <HAL_HCD_HC_Init+0x128>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	440b      	add	r3, r1
 8004b60:	333d      	adds	r3, #61	; 0x3d
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	440b      	add	r3, r1
 8004b74:	3338      	adds	r3, #56	; 0x38
 8004b76:	787a      	ldrb	r2, [r7, #1]
 8004b78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	440b      	add	r3, r1
 8004b88:	3340      	adds	r3, #64	; 0x40
 8004b8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b8c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3339      	adds	r3, #57	; 0x39
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	333f      	adds	r3, #63	; 0x3f
 8004bb2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004bb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	78bb      	ldrb	r3, [r7, #2]
 8004bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc0:	b2d8      	uxtb	r0, r3
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	440b      	add	r3, r1
 8004bce:	333a      	adds	r3, #58	; 0x3a
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004bd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	da0a      	bge.n	8004bf2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	440b      	add	r3, r1
 8004bea:	333b      	adds	r3, #59	; 0x3b
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e009      	b.n	8004c06 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	440b      	add	r3, r1
 8004c00:	333b      	adds	r3, #59	; 0x3b
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	440b      	add	r3, r1
 8004c14:	333c      	adds	r3, #60	; 0x3c
 8004c16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c1a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	787c      	ldrb	r4, [r7, #1]
 8004c22:	78ba      	ldrb	r2, [r7, #2]
 8004c24:	78f9      	ldrb	r1, [r7, #3]
 8004c26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c28:	9302      	str	r3, [sp, #8]
 8004c2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	4623      	mov	r3, r4
 8004c38:	f008 fa9e 	bl	800d178 <USB_HC_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}

08004c52 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_HCD_HC_Halt+0x1e>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e00f      	b.n	8004c90 <HAL_HCD_HC_Halt+0x3e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f008 fcd8 	bl	800d636 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	70fb      	strb	r3, [r7, #3]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70bb      	strb	r3, [r7, #2]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	333b      	adds	r3, #59	; 0x3b
 8004cc2:	78ba      	ldrb	r2, [r7, #2]
 8004cc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	333f      	adds	r3, #63	; 0x3f
 8004cd6:	787a      	ldrb	r2, [r7, #1]
 8004cd8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004cda:	7c3b      	ldrb	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d114      	bne.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	3342      	adds	r3, #66	; 0x42
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	440b      	add	r3, r1
 8004d02:	333d      	adds	r3, #61	; 0x3d
 8004d04:	7f3a      	ldrb	r2, [r7, #28]
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e009      	b.n	8004d1e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	3342      	adds	r3, #66	; 0x42
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d1e:	787b      	ldrb	r3, [r7, #1]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	f200 80d6 	bhi.w	8004ed2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_HCD_HC_SubmitRequest+0x94>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004ebd 	.word	0x08004ebd
 8004d34:	08004da9 	.word	0x08004da9
 8004d38:	08004e33 	.word	0x08004e33
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d3c:	7c3b      	ldrb	r3, [r7, #16]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	f040 80c9 	bne.w	8004ed6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004d44:	78bb      	ldrb	r3, [r7, #2]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 80c5 	bne.w	8004ed6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004d4c:	8b3b      	ldrh	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	440b      	add	r3, r1
 8004d60:	3351      	adds	r3, #81	; 0x51
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	440b      	add	r3, r1
 8004d74:	3351      	adds	r3, #81	; 0x51
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	440b      	add	r3, r1
 8004d8a:	3342      	adds	r3, #66	; 0x42
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d90:	e0a1      	b.n	8004ed6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	440b      	add	r3, r1
 8004da0:	3342      	adds	r3, #66	; 0x42
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
      break;
 8004da6:	e096      	b.n	8004ed6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004da8:	78bb      	ldrb	r3, [r7, #2]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d120      	bne.n	8004df0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	440b      	add	r3, r1
 8004dbc:	3351      	adds	r3, #81	; 0x51
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3342      	adds	r3, #66	; 0x42
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004dd8:	e07e      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	440b      	add	r3, r1
 8004de8:	3342      	adds	r3, #66	; 0x42
 8004dea:	2202      	movs	r2, #2
 8004dec:	701a      	strb	r2, [r3, #0]
      break;
 8004dee:	e073      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004df0:	78fa      	ldrb	r2, [r7, #3]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3350      	adds	r3, #80	; 0x50
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	440b      	add	r3, r1
 8004e14:	3342      	adds	r3, #66	; 0x42
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]
      break;
 8004e1a:	e05d      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	440b      	add	r3, r1
 8004e2a:	3342      	adds	r3, #66	; 0x42
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	701a      	strb	r2, [r3, #0]
      break;
 8004e30:	e052      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e32:	78bb      	ldrb	r3, [r7, #2]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d120      	bne.n	8004e7a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	440b      	add	r3, r1
 8004e46:	3351      	adds	r3, #81	; 0x51
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3342      	adds	r3, #66	; 0x42
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e62:	e039      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	440b      	add	r3, r1
 8004e72:	3342      	adds	r3, #66	; 0x42
 8004e74:	2202      	movs	r2, #2
 8004e76:	701a      	strb	r2, [r3, #0]
      break;
 8004e78:	e02e      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	440b      	add	r3, r1
 8004e88:	3350      	adds	r3, #80	; 0x50
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3342      	adds	r3, #66	; 0x42
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
      break;
 8004ea4:	e018      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	440b      	add	r3, r1
 8004eb4:	3342      	adds	r3, #66	; 0x42
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e00d      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	440b      	add	r3, r1
 8004eca:	3342      	adds	r3, #66	; 0x42
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
      break;
 8004ed0:	e002      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004ed6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3344      	adds	r3, #68	; 0x44
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	8b39      	ldrh	r1, [r7, #24]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4403      	add	r3, r0
 8004efc:	3348      	adds	r3, #72	; 0x48
 8004efe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	440b      	add	r3, r1
 8004f0e:	335c      	adds	r3, #92	; 0x5c
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	440b      	add	r3, r1
 8004f22:	334c      	adds	r3, #76	; 0x4c
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	440b      	add	r3, r1
 8004f36:	3339      	adds	r3, #57	; 0x39
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	335d      	adds	r3, #93	; 0x5d
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	3338      	adds	r3, #56	; 0x38
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	18d1      	adds	r1, r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f008 fa0e 	bl	800d38c <USB_HC_StartXfer>
 8004f70:	4603      	mov	r3, r0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop

08004f7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f007 ff37 	bl	800ce06 <USB_GetMode>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	f040 80ef 	bne.w	800517e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f007 ff1b 	bl	800cde0 <USB_ReadInterrupts>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80e5 	beq.w	800517c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f007 ff12 	bl	800cde0 <USB_ReadInterrupts>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc6:	d104      	bne.n	8004fd2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f007 ff02 	bl	800cde0 <USB_ReadInterrupts>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe6:	d104      	bne.n	8004ff2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ff0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f007 fef2 	bl	800cde0 <USB_ReadInterrupts>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005006:	d104      	bne.n	8005012 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005010:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f007 fee2 	bl	800cde0 <USB_ReadInterrupts>
 800501c:	4603      	mov	r3, r0
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d103      	bne.n	800502e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2202      	movs	r2, #2
 800502c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f007 fed4 	bl	800cde0 <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800503e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005042:	d115      	bne.n	8005070 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800504c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f00d fc4e 	bl	8012900 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2101      	movs	r1, #1
 800506a:	4618      	mov	r0, r3
 800506c:	f007 ffbe 	bl	800cfec <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f007 feb3 	bl	800cde0 <USB_ReadInterrupts>
 800507a:	4603      	mov	r3, r0
 800507c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005084:	d102      	bne.n	800508c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f001 f966 	bl	8006358 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f007 fea5 	bl	800cde0 <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b08      	cmp	r3, #8
 800509e:	d106      	bne.n	80050ae <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f00d fc11 	bl	80128c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2208      	movs	r2, #8
 80050ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f007 fe94 	bl	800cde0 <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c2:	d138      	bne.n	8005136 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f008 faa3 	bl	800d614 <USB_HC_ReadInterrupt>
 80050ce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e025      	b.n	8005122 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d018      	beq.n	800511c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005100:	d106      	bne.n	8005110 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f8cf 	bl	80052ac <HCD_HC_IN_IRQHandler>
 800510e:	e005      	b.n	800511c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fcfd 	bl	8005b16 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d3d4      	bcc.n	80050d6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f007 fe50 	bl	800cde0 <USB_ReadInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b10      	cmp	r3, #16
 8005148:	d101      	bne.n	800514e <HAL_HCD_IRQHandler+0x1d2>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_HCD_IRQHandler+0x1d4>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d014      	beq.n	800517e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0210 	bic.w	r2, r2, #16
 8005162:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 f84b 	bl	8006200 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0210 	orr.w	r2, r2, #16
 8005178:	619a      	str	r2, [r3, #24]
 800517a:	e000      	b.n	800517e <HAL_HCD_IRQHandler+0x202>
      return;
 800517c:	bf00      	nop
    }
  }
}
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_HCD_Start+0x16>
 8005196:	2302      	movs	r3, #2
 8005198:	e013      	b.n	80051c2 <HAL_HCD_Start+0x3e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f007 fd28 	bl	800cbfc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2101      	movs	r1, #1
 80051b2:	4618      	mov	r0, r3
 80051b4:	f007 ff7e 	bl	800d0b4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_HCD_Stop+0x16>
 80051dc:	2302      	movs	r3, #2
 80051de:	e00d      	b.n	80051fc <HAL_HCD_Stop+0x32>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f008 fb5d 	bl	800d8ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f007 ff25 	bl	800d060 <USB_ResetPort>
 8005216:	4603      	mov	r3, r0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	335c      	adds	r3, #92	; 0x5c
 800523c:	781b      	ldrb	r3, [r3, #0]
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	334c      	adds	r3, #76	; 0x4c
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f007 ff67 	bl	800d154 <USB_GetCurrentFrame>
 8005286:	4603      	mov	r3, r0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f007 ff42 	bl	800d126 <USB_GetHostSpeed>
 80052a2:	4603      	mov	r3, r0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d119      	bne.n	8005310 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e8:	461a      	mov	r2, r3
 80052ea:	2304      	movs	r3, #4
 80052ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	440a      	add	r2, r1
 8005304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	60d3      	str	r3, [r2, #12]
 800530e:	e0ce      	b.n	80054ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d12c      	bne.n	8005382 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800533a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	440b      	add	r3, r1
 800534a:	335d      	adds	r3, #93	; 0x5d
 800534c:	2207      	movs	r2, #7
 800534e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	440a      	add	r2, r1
 8005366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800536a:	f043 0302 	orr.w	r3, r3, #2
 800536e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f008 f95b 	bl	800d636 <USB_HC_Halt>
 8005380:	e095      	b.n	80054ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b20      	cmp	r3, #32
 8005396:	d109      	bne.n	80053ac <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	461a      	mov	r2, r3
 80053a6:	2320      	movs	r3, #32
 80053a8:	6093      	str	r3, [r2, #8]
 80053aa:	e080      	b.n	80054ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d134      	bne.n	800542c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	440b      	add	r3, r1
 80053f0:	335d      	adds	r3, #93	; 0x5d
 80053f2:	2205      	movs	r2, #5
 80053f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	461a      	mov	r2, r3
 8005404:	2310      	movs	r3, #16
 8005406:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005414:	461a      	mov	r2, r3
 8005416:	2308      	movs	r3, #8
 8005418:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f008 f906 	bl	800d636 <USB_HC_Halt>
 800542a:	e040      	b.n	80054ae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005442:	d134      	bne.n	80054ae <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	440a      	add	r2, r1
 800545a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545e:	f043 0302 	orr.w	r3, r3, #2
 8005462:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f008 f8e1 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	461a      	mov	r2, r3
 8005482:	2310      	movs	r3, #16
 8005484:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	440b      	add	r3, r1
 8005494:	335d      	adds	r3, #93	; 0x5d
 8005496:	2208      	movs	r2, #8
 8005498:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d122      	bne.n	800550c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f008 f8a0 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	461a      	mov	r2, r3
 8005504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005508:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800550a:	e300      	b.n	8005b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	f040 80fd 	bne.w	800571e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	440b      	add	r3, r1
 800553a:	3348      	adds	r3, #72	; 0x48
 800553c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	0159      	lsls	r1, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	440b      	add	r3, r1
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005550:	1ad1      	subs	r1, r2, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4403      	add	r3, r0
 8005560:	334c      	adds	r3, #76	; 0x4c
 8005562:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	440b      	add	r3, r1
 8005572:	335d      	adds	r3, #93	; 0x5d
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	3358      	adds	r3, #88	; 0x58
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	461a      	mov	r2, r3
 800559a:	2301      	movs	r3, #1
 800559c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	440b      	add	r3, r1
 80055ac:	333f      	adds	r3, #63	; 0x3f
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	333f      	adds	r3, #63	; 0x3f
 80055c4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d121      	bne.n	800560e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e4:	f043 0302 	orr.w	r3, r3, #2
 80055e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f008 f81e 	bl	800d636 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	461a      	mov	r2, r3
 8005608:	2310      	movs	r3, #16
 800560a:	6093      	str	r3, [r2, #8]
 800560c:	e070      	b.n	80056f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	440b      	add	r3, r1
 800561c:	333f      	adds	r3, #63	; 0x3f
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d12a      	bne.n	800567a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	440a      	add	r2, r1
 800563a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005642:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	440b      	add	r3, r1
 8005652:	335c      	adds	r3, #92	; 0x5c
 8005654:	2201      	movs	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	b2d8      	uxtb	r0, r3
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	440b      	add	r3, r1
 800566a:	335c      	adds	r3, #92	; 0x5c
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	4601      	mov	r1, r0
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f00d f952 	bl	801291c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005678:	e03a      	b.n	80056f0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	440b      	add	r3, r1
 8005688:	333f      	adds	r3, #63	; 0x3f
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d12f      	bne.n	80056f0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	440b      	add	r3, r1
 800569e:	335c      	adds	r3, #92	; 0x5c
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	440b      	add	r3, r1
 80056b2:	3350      	adds	r3, #80	; 0x50
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f083 0301 	eor.w	r3, r3, #1
 80056ba:	b2d8      	uxtb	r0, r3
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	440b      	add	r3, r1
 80056ca:	3350      	adds	r3, #80	; 0x50
 80056cc:	4602      	mov	r2, r0
 80056ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	b2d8      	uxtb	r0, r3
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	440b      	add	r3, r1
 80056e2:	335c      	adds	r3, #92	; 0x5c
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	4601      	mov	r1, r0
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f00d f916 	bl	801291c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	440b      	add	r3, r1
 80056fe:	3350      	adds	r3, #80	; 0x50
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f083 0301 	eor.w	r3, r3, #1
 8005706:	b2d8      	uxtb	r0, r3
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	440b      	add	r3, r1
 8005716:	3350      	adds	r3, #80	; 0x50
 8005718:	4602      	mov	r2, r0
 800571a:	701a      	strb	r2, [r3, #0]
}
 800571c:	e1f7      	b.n	8005b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b02      	cmp	r3, #2
 8005732:	f040 811a 	bne.w	800596a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	440a      	add	r2, r1
 800574c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005750:	f023 0302 	bic.w	r3, r3, #2
 8005754:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	440b      	add	r3, r1
 8005764:	335d      	adds	r3, #93	; 0x5d
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10a      	bne.n	8005782 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	440b      	add	r3, r1
 800577a:	335c      	adds	r3, #92	; 0x5c
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e0d9      	b.n	8005936 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	440b      	add	r3, r1
 8005790:	335d      	adds	r3, #93	; 0x5d
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b05      	cmp	r3, #5
 8005796:	d10a      	bne.n	80057ae <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	440b      	add	r3, r1
 80057a6:	335c      	adds	r3, #92	; 0x5c
 80057a8:	2205      	movs	r2, #5
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e0c3      	b.n	8005936 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	440b      	add	r3, r1
 80057bc:	335d      	adds	r3, #93	; 0x5d
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b06      	cmp	r3, #6
 80057c2:	d00a      	beq.n	80057da <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	440b      	add	r3, r1
 80057d2:	335d      	adds	r3, #93	; 0x5d
 80057d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d156      	bne.n	8005888 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	440b      	add	r3, r1
 80057e8:	3358      	adds	r3, #88	; 0x58
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4403      	add	r3, r0
 80057fc:	3358      	adds	r3, #88	; 0x58
 80057fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	440b      	add	r3, r1
 800580e:	3358      	adds	r3, #88	; 0x58
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d914      	bls.n	8005840 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	3358      	adds	r3, #88	; 0x58
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	440b      	add	r3, r1
 8005838:	335c      	adds	r3, #92	; 0x5c
 800583a:	2204      	movs	r2, #4
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e009      	b.n	8005854 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	440b      	add	r3, r1
 800584e:	335c      	adds	r3, #92	; 0x5c
 8005850:	2202      	movs	r2, #2
 8005852:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800586a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005872:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e056      	b.n	8005936 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	440b      	add	r3, r1
 8005896:	335d      	adds	r3, #93	; 0x5d
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d123      	bne.n	80058e6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	335c      	adds	r3, #92	; 0x5c
 80058ae:	2202      	movs	r2, #2
 80058b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058de:	461a      	mov	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e027      	b.n	8005936 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	440b      	add	r3, r1
 80058f4:	335d      	adds	r3, #93	; 0x5d
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d11c      	bne.n	8005936 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	440b      	add	r3, r1
 800590a:	3358      	adds	r3, #88	; 0x58
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	1c59      	adds	r1, r3, #1
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	4403      	add	r3, r0
 800591e:	3358      	adds	r3, #88	; 0x58
 8005920:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	335c      	adds	r3, #92	; 0x5c
 8005932:	2204      	movs	r2, #4
 8005934:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	461a      	mov	r2, r3
 8005944:	2302      	movs	r3, #2
 8005946:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	b2d8      	uxtb	r0, r3
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	440b      	add	r3, r1
 800595a:	335c      	adds	r3, #92	; 0x5c
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	4601      	mov	r1, r0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f00c ffda 	bl	801291c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005968:	e0d1      	b.n	8005b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d13e      	bne.n	80059fe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	440a      	add	r2, r1
 8005996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599a:	f043 0302 	orr.w	r3, r3, #2
 800599e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	440b      	add	r3, r1
 80059ae:	3358      	adds	r3, #88	; 0x58
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1c59      	adds	r1, r3, #1
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4403      	add	r3, r0
 80059c2:	3358      	adds	r3, #88	; 0x58
 80059c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	440b      	add	r3, r1
 80059d4:	335d      	adds	r3, #93	; 0x5d
 80059d6:	2206      	movs	r2, #6
 80059d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	4611      	mov	r1, r2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f007 fe26 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f6:	461a      	mov	r2, r3
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	6093      	str	r3, [r2, #8]
}
 80059fc:	e087      	b.n	8005b0e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d17c      	bne.n	8005b0e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	333f      	adds	r3, #63	; 0x3f
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d122      	bne.n	8005a70 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	3358      	adds	r3, #88	; 0x58
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a58:	f043 0302 	orr.w	r3, r3, #2
 8005a5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f007 fde4 	bl	800d636 <USB_HC_Halt>
 8005a6e:	e045      	b.n	8005afc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	440b      	add	r3, r1
 8005a7e:	333f      	adds	r3, #63	; 0x3f
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	333f      	adds	r3, #63	; 0x3f
 8005a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d12f      	bne.n	8005afc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3358      	adds	r3, #88	; 0x58
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d121      	bne.n	8005afc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	440b      	add	r3, r1
 8005ac6:	335d      	adds	r3, #93	; 0x5d
 8005ac8:	2203      	movs	r2, #3
 8005aca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae6:	f043 0302 	orr.w	r3, r3, #2
 8005aea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f007 fd9d 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2310      	movs	r3, #16
 8005b0c:	6093      	str	r3, [r2, #8]
}
 8005b0e:	bf00      	nop
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d119      	bne.n	8005b7a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b52:	461a      	mov	r2, r3
 8005b54:	2304      	movs	r3, #4
 8005b56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b72:	f043 0302 	orr.w	r3, r3, #2
 8005b76:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005b78:	e33e      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d141      	bne.n	8005c14 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	440b      	add	r3, r1
 8005bb0:	333d      	adds	r3, #61	; 0x3d
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 831f 	bne.w	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	440b      	add	r3, r1
 8005bc8:	333d      	adds	r3, #61	; 0x3d
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	440b      	add	r3, r1
 8005bdc:	335c      	adds	r3, #92	; 0x5c
 8005bde:	2202      	movs	r2, #2
 8005be0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f007 fd12 	bl	800d636 <USB_HC_Halt>
}
 8005c12:	e2f1      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d13f      	bne.n	8005caa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	335d      	adds	r3, #93	; 0x5d
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	440b      	add	r3, r1
 8005c4c:	333d      	adds	r3, #61	; 0x3d
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	440b      	add	r3, r1
 8005c60:	3358      	adds	r3, #88	; 0x58
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c80:	f043 0302 	orr.w	r3, r3, #2
 8005c84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f007 fcd0 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	2340      	movs	r3, #64	; 0x40
 8005ca6:	6093      	str	r3, [r2, #8]
}
 8005ca8:	e2a6      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc0:	d122      	bne.n	8005d08 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f007 fca2 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d04:	6093      	str	r3, [r2, #8]
}
 8005d06:	e277      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d135      	bne.n	8005d8a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	440b      	add	r3, r1
 8005d2c:	3358      	adds	r3, #88	; 0x58
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f007 fc6a 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2301      	movs	r3, #1
 8005d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	440b      	add	r3, r1
 8005d82:	335d      	adds	r3, #93	; 0x5d
 8005d84:	2201      	movs	r2, #1
 8005d86:	701a      	strb	r2, [r3, #0]
}
 8005d88:	e236      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d12b      	bne.n	8005df8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dac:	461a      	mov	r2, r3
 8005dae:	2308      	movs	r3, #8
 8005db0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dcc:	f043 0302 	orr.w	r3, r3, #2
 8005dd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f007 fc2a 	bl	800d636 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	440b      	add	r3, r1
 8005df0:	335d      	adds	r3, #93	; 0x5d
 8005df2:	2205      	movs	r2, #5
 8005df4:	701a      	strb	r2, [r3, #0]
}
 8005df6:	e1ff      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d155      	bne.n	8005eba <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3358      	adds	r3, #88	; 0x58
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	440b      	add	r3, r1
 8005e30:	335d      	adds	r3, #93	; 0x5d
 8005e32:	2203      	movs	r2, #3
 8005e34:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	440b      	add	r3, r1
 8005e44:	333d      	adds	r3, #61	; 0x3d
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d114      	bne.n	8005e76 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	440b      	add	r3, r1
 8005e5a:	333c      	adds	r3, #60	; 0x3c
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	333d      	adds	r3, #61	; 0x3d
 8005e72:	2201      	movs	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e90:	f043 0302 	orr.w	r3, r3, #2
 8005e94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f007 fbc8 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	6093      	str	r3, [r2, #8]
}
 8005eb8:	e19e      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ecc:	2b80      	cmp	r3, #128	; 0x80
 8005ece:	d12b      	bne.n	8005f28 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eea:	f043 0302 	orr.w	r3, r3, #2
 8005eee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f007 fb9b 	bl	800d636 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	335d      	adds	r3, #93	; 0x5d
 8005f10:	2206      	movs	r2, #6
 8005f12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	461a      	mov	r2, r3
 8005f22:	2380      	movs	r3, #128	; 0x80
 8005f24:	6093      	str	r3, [r2, #8]
}
 8005f26:	e167      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3e:	d135      	bne.n	8005fac <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5a:	f043 0302 	orr.w	r3, r3, #2
 8005f5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	4611      	mov	r1, r2
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f007 fb63 	bl	800d636 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2310      	movs	r3, #16
 8005f80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	440b      	add	r3, r1
 8005fa4:	335d      	adds	r3, #93	; 0x5d
 8005fa6:	2208      	movs	r2, #8
 8005fa8:	701a      	strb	r2, [r3, #0]
}
 8005faa:	e125      	b.n	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	f040 811a 	bne.w	80061f8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fde:	f023 0302 	bic.w	r3, r3, #2
 8005fe2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	440b      	add	r3, r1
 8005ff2:	335d      	adds	r3, #93	; 0x5d
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d137      	bne.n	800606a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	440b      	add	r3, r1
 8006008:	335c      	adds	r3, #92	; 0x5c
 800600a:	2201      	movs	r2, #1
 800600c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	440b      	add	r3, r1
 800601c:	333f      	adds	r3, #63	; 0x3f
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d00b      	beq.n	800603c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	333f      	adds	r3, #63	; 0x3f
 8006034:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006036:	2b03      	cmp	r3, #3
 8006038:	f040 80c5 	bne.w	80061c6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	440b      	add	r3, r1
 800604a:	3351      	adds	r3, #81	; 0x51
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f083 0301 	eor.w	r3, r3, #1
 8006052:	b2d8      	uxtb	r0, r3
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	440b      	add	r3, r1
 8006062:	3351      	adds	r3, #81	; 0x51
 8006064:	4602      	mov	r2, r0
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e0ad      	b.n	80061c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	440b      	add	r3, r1
 8006078:	335d      	adds	r3, #93	; 0x5d
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b03      	cmp	r3, #3
 800607e:	d10a      	bne.n	8006096 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	335c      	adds	r3, #92	; 0x5c
 8006090:	2202      	movs	r2, #2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	e097      	b.n	80061c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	440b      	add	r3, r1
 80060a4:	335d      	adds	r3, #93	; 0x5d
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d10a      	bne.n	80060c2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	440b      	add	r3, r1
 80060ba:	335c      	adds	r3, #92	; 0x5c
 80060bc:	2202      	movs	r2, #2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e081      	b.n	80061c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	440b      	add	r3, r1
 80060d0:	335d      	adds	r3, #93	; 0x5d
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	d10a      	bne.n	80060ee <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	440b      	add	r3, r1
 80060e6:	335c      	adds	r3, #92	; 0x5c
 80060e8:	2205      	movs	r2, #5
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e06b      	b.n	80061c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	440b      	add	r3, r1
 80060fc:	335d      	adds	r3, #93	; 0x5d
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b06      	cmp	r3, #6
 8006102:	d00a      	beq.n	800611a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	440b      	add	r3, r1
 8006112:	335d      	adds	r3, #93	; 0x5d
 8006114:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006116:	2b08      	cmp	r3, #8
 8006118:	d155      	bne.n	80061c6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	440b      	add	r3, r1
 8006128:	3358      	adds	r3, #88	; 0x58
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	1c59      	adds	r1, r3, #1
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4403      	add	r3, r0
 800613c:	3358      	adds	r3, #88	; 0x58
 800613e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	440b      	add	r3, r1
 800614e:	3358      	adds	r3, #88	; 0x58
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d914      	bls.n	8006180 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	440b      	add	r3, r1
 8006164:	3358      	adds	r3, #88	; 0x58
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	440b      	add	r3, r1
 8006178:	335c      	adds	r3, #92	; 0x5c
 800617a:	2204      	movs	r2, #4
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e009      	b.n	8006194 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	335c      	adds	r3, #92	; 0x5c
 8006190:	2202      	movs	r2, #2
 8006192:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c0:	461a      	mov	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	461a      	mov	r2, r3
 80061d4:	2302      	movs	r3, #2
 80061d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	b2d8      	uxtb	r0, r3
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	440b      	add	r3, r1
 80061ea:	335c      	adds	r3, #92	; 0x5c
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	4601      	mov	r1, r0
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f00c fb92 	bl	801291c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80061f8:	bf00      	nop
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	0c5b      	lsrs	r3, r3, #17
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006234:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d003      	beq.n	8006244 <HCD_RXQLVL_IRQHandler+0x44>
 800623c:	2b05      	cmp	r3, #5
 800623e:	f000 8082 	beq.w	8006346 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006242:	e083      	b.n	800634c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d07f      	beq.n	800634a <HCD_RXQLVL_IRQHandler+0x14a>
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	440b      	add	r3, r1
 8006258:	3344      	adds	r3, #68	; 0x44
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d074      	beq.n	800634a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	440b      	add	r3, r1
 8006272:	3344      	adds	r3, #68	; 0x44
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	b292      	uxth	r2, r2
 800627a:	4619      	mov	r1, r3
 800627c:	f006 fd87 	bl	800cd8e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	440b      	add	r3, r1
 800628e:	3344      	adds	r3, #68	; 0x44
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	18d1      	adds	r1, r2, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	4403      	add	r3, r0
 80062a4:	3344      	adds	r3, #68	; 0x44
 80062a6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	440b      	add	r3, r1
 80062b6:	334c      	adds	r3, #76	; 0x4c
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	18d1      	adds	r1, r2, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4403      	add	r3, r0
 80062cc:	334c      	adds	r3, #76	; 0x4c
 80062ce:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <HCD_RXQLVL_IRQHandler+0x154>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d031      	beq.n	800634a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006304:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	440b      	add	r3, r1
 8006326:	3350      	adds	r3, #80	; 0x50
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f083 0301 	eor.w	r3, r3, #1
 800632e:	b2d8      	uxtb	r0, r3
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	440b      	add	r3, r1
 800633e:	3350      	adds	r3, #80	; 0x50
 8006340:	4602      	mov	r2, r0
 8006342:	701a      	strb	r2, [r3, #0]
      break;
 8006344:	e001      	b.n	800634a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800634a:	bf00      	nop
  }
}
 800634c:	bf00      	nop
 800634e:	3728      	adds	r7, #40	; 0x28
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	1ff80000 	.word	0x1ff80000

08006358 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006384:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d10b      	bne.n	80063a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	d102      	bne.n	80063a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f00c faa2 	bl	80128e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d132      	bne.n	8006418 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f043 0308 	orr.w	r3, r3, #8
 80063b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d126      	bne.n	8006412 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d113      	bne.n	80063f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80063d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063d6:	d106      	bne.n	80063e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2102      	movs	r1, #2
 80063de:	4618      	mov	r0, r3
 80063e0:	f006 fe04 	bl	800cfec <USB_InitFSLSPClkSel>
 80063e4:	e011      	b.n	800640a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2101      	movs	r1, #1
 80063ec:	4618      	mov	r0, r3
 80063ee:	f006 fdfd 	bl	800cfec <USB_InitFSLSPClkSel>
 80063f2:	e00a      	b.n	800640a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d106      	bne.n	800640a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006402:	461a      	mov	r2, r3
 8006404:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006408:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f00c fa98 	bl	8012940 <HAL_HCD_PortEnabled_Callback>
 8006410:	e002      	b.n	8006418 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f00c faa2 	bl	801295c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	d103      	bne.n	800642a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f043 0320 	orr.w	r3, r3, #32
 8006428:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006430:	461a      	mov	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6013      	str	r3, [r2, #0]
}
 8006436:	bf00      	nop
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e07f      	b.n	8006552 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fa fee4 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	; 0x24
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006490:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d107      	bne.n	80064ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064b6:	609a      	str	r2, [r3, #8]
 80064b8:	e006      	b.n	80064c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d104      	bne.n	80064da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6859      	ldr	r1, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4b1d      	ldr	r3, [pc, #116]	; (800655c <HAL_I2C_Init+0x11c>)
 80064e6:	430b      	orrs	r3, r1
 80064e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	ea42 0103 	orr.w	r1, r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69d9      	ldr	r1, [r3, #28]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1a      	ldr	r2, [r3, #32]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	02008000 	.word	0x02008000

08006560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d138      	bne.n	80065e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006580:	2302      	movs	r3, #2
 8006582:	e032      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	; 0x24
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b20      	cmp	r3, #32
 800660a:	d139      	bne.n	8006680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006616:	2302      	movs	r3, #2
 8006618:	e033      	b.n	8006682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2224      	movs	r2, #36	; 0x24
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	e000      	b.n	8006682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006680:	2302      	movs	r3, #2
  }
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e0bf      	b.n	8006822 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fa feea 	bl	8001490 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80066d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6999      	ldr	r1, [r3, #24]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6899      	ldr	r1, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	4b4a      	ldr	r3, [pc, #296]	; (800682c <HAL_LTDC_Init+0x19c>)
 8006704:	400b      	ands	r3, r1
 8006706:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	041b      	lsls	r3, r3, #16
 800670e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6899      	ldr	r1, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68d9      	ldr	r1, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4b3e      	ldr	r3, [pc, #248]	; (800682c <HAL_LTDC_Init+0x19c>)
 8006732:	400b      	ands	r3, r1
 8006734:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68d9      	ldr	r1, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6919      	ldr	r1, [r3, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b33      	ldr	r3, [pc, #204]	; (800682c <HAL_LTDC_Init+0x19c>)
 8006760:	400b      	ands	r3, r1
 8006762:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6919      	ldr	r1, [r3, #16]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6959      	ldr	r1, [r3, #20]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b27      	ldr	r3, [pc, #156]	; (800682c <HAL_LTDC_Init+0x19c>)
 800678e:	400b      	ands	r3, r1
 8006790:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6959      	ldr	r1, [r3, #20]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80067d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0206 	orr.w	r2, r2, #6
 80067fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	f000f800 	.word	0xf000f800

08006830 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006846:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d023      	beq.n	800689a <HAL_LTDC_IRQHandler+0x6a>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01e      	beq.n	800689a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0204 	bic.w	r2, r2, #4
 800686a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2204      	movs	r2, #4
 8006872:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800687a:	f043 0201 	orr.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2204      	movs	r2, #4
 8006888:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f86f 	bl	8006978 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d023      	beq.n	80068ec <HAL_LTDC_IRQHandler+0xbc>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01e      	beq.n	80068ec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0202 	bic.w	r2, r2, #2
 80068bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2202      	movs	r2, #2
 80068c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068cc:	f043 0202 	orr.w	r2, r3, #2
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2204      	movs	r2, #4
 80068da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f846 	bl	8006978 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01b      	beq.n	800692e <HAL_LTDC_IRQHandler+0xfe>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d016      	beq.n	800692e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f82f 	bl	800698c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <HAL_LTDC_IRQHandler+0x140>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0208 	bic.w	r2, r2, #8
 8006950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2208      	movs	r2, #8
 8006958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f818 	bl	80069a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069b4:	b5b0      	push	{r4, r5, r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_LTDC_ConfigLayer+0x1a>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e02c      	b.n	8006a28 <HAL_LTDC_ConfigLayer+0x74>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2134      	movs	r1, #52	; 0x34
 80069e4:	fb01 f303 	mul.w	r3, r1, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4614      	mov	r4, r2
 80069f2:	461d      	mov	r5, r3
 80069f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f811 	bl	8006a30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bdb0      	pop	{r4, r5, r7, pc}

08006a30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4c:	4413      	add	r3, r2
 8006a4e:	041b      	lsls	r3, r3, #16
 8006a50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	01db      	lsls	r3, r3, #7
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3384      	adds	r3, #132	; 0x84
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	4611      	mov	r1, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	01d2      	lsls	r2, r2, #7
 8006a6c:	440a      	add	r2, r1
 8006a6e:	3284      	adds	r2, #132	; 0x84
 8006a70:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a86:	4413      	add	r3, r2
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	01db      	lsls	r3, r3, #7
 8006a94:	440b      	add	r3, r1
 8006a96:	3384      	adds	r3, #132	; 0x84
 8006a98:	4619      	mov	r1, r3
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aae:	4413      	add	r3, r2
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	01db      	lsls	r3, r3, #7
 8006abe:	4413      	add	r3, r2
 8006ac0:	3384      	adds	r3, #132	; 0x84
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	4611      	mov	r1, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	01d2      	lsls	r2, r2, #7
 8006ace:	440a      	add	r2, r1
 8006ad0:	3284      	adds	r2, #132	; 0x84
 8006ad2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006ad6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae6:	4413      	add	r3, r2
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	440b      	add	r3, r1
 8006af6:	3384      	adds	r3, #132	; 0x84
 8006af8:	4619      	mov	r1, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	01db      	lsls	r3, r3, #7
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3384      	adds	r3, #132	; 0x84
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	4611      	mov	r1, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	01d2      	lsls	r2, r2, #7
 8006b1a:	440a      	add	r2, r1
 8006b1c:	3284      	adds	r2, #132	; 0x84
 8006b1e:	f023 0307 	bic.w	r3, r3, #7
 8006b22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	01db      	lsls	r3, r3, #7
 8006b2e:	4413      	add	r3, r2
 8006b30:	3384      	adds	r3, #132	; 0x84
 8006b32:	461a      	mov	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	061b      	lsls	r3, r3, #24
 8006b54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	01db      	lsls	r3, r3, #7
 8006b60:	4413      	add	r3, r2
 8006b62:	3384      	adds	r3, #132	; 0x84
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	01db      	lsls	r3, r3, #7
 8006b70:	4413      	add	r3, r2
 8006b72:	3384      	adds	r3, #132	; 0x84
 8006b74:	461a      	mov	r2, r3
 8006b76:	2300      	movs	r3, #0
 8006b78:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b80:	461a      	mov	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	431a      	orrs	r2, r3
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	01db      	lsls	r3, r3, #7
 8006b94:	440b      	add	r3, r1
 8006b96:	3384      	adds	r3, #132	; 0x84
 8006b98:	4619      	mov	r1, r3
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	01db      	lsls	r3, r3, #7
 8006baa:	4413      	add	r3, r2
 8006bac:	3384      	adds	r3, #132	; 0x84
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	01d2      	lsls	r2, r2, #7
 8006bba:	440a      	add	r2, r1
 8006bbc:	3284      	adds	r2, #132	; 0x84
 8006bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bc2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	01db      	lsls	r3, r3, #7
 8006bce:	4413      	add	r3, r2
 8006bd0:	3384      	adds	r3, #132	; 0x84
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	01db      	lsls	r3, r3, #7
 8006be4:	4413      	add	r3, r2
 8006be6:	3384      	adds	r3, #132	; 0x84
 8006be8:	69da      	ldr	r2, [r3, #28]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	01db      	lsls	r3, r3, #7
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3384      	adds	r3, #132	; 0x84
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4b58      	ldr	r3, [pc, #352]	; (8006d5c <LTDC_SetConfig+0x32c>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	68f9      	ldr	r1, [r7, #12]
 8006c0a:	6809      	ldr	r1, [r1, #0]
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	01c9      	lsls	r1, r1, #7
 8006c12:	4401      	add	r1, r0
 8006c14:	3184      	adds	r1, #132	; 0x84
 8006c16:	4313      	orrs	r3, r2
 8006c18:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	01db      	lsls	r3, r3, #7
 8006c24:	4413      	add	r3, r2
 8006c26:	3384      	adds	r3, #132	; 0x84
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	01db      	lsls	r3, r3, #7
 8006c34:	4413      	add	r3, r2
 8006c36:	3384      	adds	r3, #132	; 0x84
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	01db      	lsls	r3, r3, #7
 8006c48:	4413      	add	r3, r2
 8006c4a:	3384      	adds	r3, #132	; 0x84
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	e01b      	b.n	8006c9a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d102      	bne.n	8006c70 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	e014      	b.n	8006c9a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d00b      	beq.n	8006c90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d007      	beq.n	8006c90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d003      	beq.n	8006c90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	d102      	bne.n	8006c96 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c90:	2302      	movs	r3, #2
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	e001      	b.n	8006c9a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c96:	2301      	movs	r3, #1
 8006c98:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	01db      	lsls	r3, r3, #7
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3384      	adds	r3, #132	; 0x84
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	01d2      	lsls	r2, r2, #7
 8006cb4:	440a      	add	r2, r1
 8006cb6:	3284      	adds	r2, #132	; 0x84
 8006cb8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	041a      	lsls	r2, r3, #16
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	1acb      	subs	r3, r1, r3
 8006cd4:	69f9      	ldr	r1, [r7, #28]
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	3303      	adds	r3, #3
 8006cdc:	68f9      	ldr	r1, [r7, #12]
 8006cde:	6809      	ldr	r1, [r1, #0]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	01c9      	lsls	r1, r1, #7
 8006ce6:	4401      	add	r1, r0
 8006ce8:	3184      	adds	r1, #132	; 0x84
 8006cea:	4313      	orrs	r3, r2
 8006cec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	01db      	lsls	r3, r3, #7
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3384      	adds	r3, #132	; 0x84
 8006cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	01db      	lsls	r3, r3, #7
 8006d08:	440b      	add	r3, r1
 8006d0a:	3384      	adds	r3, #132	; 0x84
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <LTDC_SetConfig+0x330>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	01db      	lsls	r3, r3, #7
 8006d1e:	4413      	add	r3, r2
 8006d20:	3384      	adds	r3, #132	; 0x84
 8006d22:	461a      	mov	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	01db      	lsls	r3, r3, #7
 8006d34:	4413      	add	r3, r2
 8006d36:	3384      	adds	r3, #132	; 0x84
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	01d2      	lsls	r2, r2, #7
 8006d44:	440a      	add	r2, r1
 8006d46:	3284      	adds	r2, #132	; 0x84
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	6013      	str	r3, [r2, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	3724      	adds	r7, #36	; 0x24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	fffff8f8 	.word	0xfffff8f8
 8006d60:	fffff800 	.word	0xfffff800

08006d64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d68:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40007000 	.word	0x40007000

08006d84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d8e:	4b23      	ldr	r3, [pc, #140]	; (8006e1c <HAL_PWREx_EnableOverDrive+0x98>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	4a22      	ldr	r2, [pc, #136]	; (8006e1c <HAL_PWREx_EnableOverDrive+0x98>)
 8006d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d98:	6413      	str	r3, [r2, #64]	; 0x40
 8006d9a:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <HAL_PWREx_EnableOverDrive+0x98>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006db2:	f7fc f869 	bl	8002e88 <HAL_GetTick>
 8006db6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006db8:	e009      	b.n	8006dce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dba:	f7fc f865 	bl	8002e88 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dc8:	d901      	bls.n	8006dce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e022      	b.n	8006e14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dda:	d1ee      	bne.n	8006dba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006ddc:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a0f      	ldr	r2, [pc, #60]	; (8006e20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006de8:	f7fc f84e 	bl	8002e88 <HAL_GetTick>
 8006dec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dee:	e009      	b.n	8006e04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006df0:	f7fc f84a 	bl	8002e88 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dfe:	d901      	bls.n	8006e04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e007      	b.n	8006e14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e10:	d1ee      	bne.n	8006df0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40007000 	.word	0x40007000

08006e24 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e2c:	f7fc f82c 	bl	8002e88 <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e067      	b.n	8006f0c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fa fd4f 	bl	80018f4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e56:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f85e 	bl	8006f1c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	021a      	lsls	r2, r3, #8
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	2120      	movs	r1, #32
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f856 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d135      	bne.n	8006f02 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <HAL_QSPI_Init+0xf0>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6852      	ldr	r2, [r2, #4]
 8006ea4:	0611      	lsls	r1, r2, #24
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	68d2      	ldr	r2, [r2, #12]
 8006eaa:	4311      	orrs	r1, r2
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	69d2      	ldr	r2, [r2, #28]
 8006eb0:	4311      	orrs	r1, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6a12      	ldr	r2, [r2, #32]
 8006eb6:	4311      	orrs	r1, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <HAL_QSPI_Init+0xf4>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6912      	ldr	r2, [r2, #16]
 8006ece:	0411      	lsls	r1, r2, #16
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6952      	ldr	r2, [r2, #20]
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6992      	ldr	r2, [r2, #24]
 8006eda:	4311      	orrs	r1, r2
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	00ffff2f 	.word	0x00ffff2f
 8006f18:	ffe0f8fe 	.word	0xffe0f8fe

08006f1c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f48:	e01a      	b.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d016      	beq.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f52:	f7fb ff99 	bl	8002e88 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2204      	movs	r2, #4
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	f043 0201 	orr.w	r2, r3, #1
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e00e      	b.n	8006f9e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf14      	ite	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	2300      	moveq	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d1d6      	bne.n	8006f4a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e291      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8087 	beq.w	80070da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fcc:	4b96      	ldr	r3, [pc, #600]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 030c 	and.w	r3, r3, #12
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d00c      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fd8:	4b93      	ldr	r3, [pc, #588]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 030c 	and.w	r3, r3, #12
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d112      	bne.n	800700a <HAL_RCC_OscConfig+0x62>
 8006fe4:	4b90      	ldr	r3, [pc, #576]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ff0:	d10b      	bne.n	800700a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff2:	4b8d      	ldr	r3, [pc, #564]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d06c      	beq.n	80070d8 <HAL_RCC_OscConfig+0x130>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d168      	bne.n	80070d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e26b      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007012:	d106      	bne.n	8007022 <HAL_RCC_OscConfig+0x7a>
 8007014:	4b84      	ldr	r3, [pc, #528]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a83      	ldr	r2, [pc, #524]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800701a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	e02e      	b.n	8007080 <HAL_RCC_OscConfig+0xd8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <HAL_RCC_OscConfig+0x9c>
 800702a:	4b7f      	ldr	r3, [pc, #508]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a7e      	ldr	r2, [pc, #504]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b7c      	ldr	r3, [pc, #496]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a7b      	ldr	r2, [pc, #492]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800703c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e01d      	b.n	8007080 <HAL_RCC_OscConfig+0xd8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800704c:	d10c      	bne.n	8007068 <HAL_RCC_OscConfig+0xc0>
 800704e:	4b76      	ldr	r3, [pc, #472]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a75      	ldr	r2, [pc, #468]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	4b73      	ldr	r3, [pc, #460]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a72      	ldr	r2, [pc, #456]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e00b      	b.n	8007080 <HAL_RCC_OscConfig+0xd8>
 8007068:	4b6f      	ldr	r3, [pc, #444]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6e      	ldr	r2, [pc, #440]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800706e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	4b6c      	ldr	r3, [pc, #432]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6b      	ldr	r2, [pc, #428]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800707a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d013      	beq.n	80070b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fb fefe 	bl	8002e88 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007090:	f7fb fefa 	bl	8002e88 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b64      	cmp	r3, #100	; 0x64
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e21f      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a2:	4b61      	ldr	r3, [pc, #388]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCC_OscConfig+0xe8>
 80070ae:	e014      	b.n	80070da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b0:	f7fb feea 	bl	8002e88 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b8:	f7fb fee6 	bl	8002e88 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b64      	cmp	r3, #100	; 0x64
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e20b      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ca:	4b57      	ldr	r3, [pc, #348]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f0      	bne.n	80070b8 <HAL_RCC_OscConfig+0x110>
 80070d6:	e000      	b.n	80070da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d069      	beq.n	80071ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070e6:	4b50      	ldr	r3, [pc, #320]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 030c 	and.w	r3, r3, #12
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f2:	4b4d      	ldr	r3, [pc, #308]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 030c 	and.w	r3, r3, #12
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d11c      	bne.n	8007138 <HAL_RCC_OscConfig+0x190>
 80070fe:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d116      	bne.n	8007138 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_RCC_OscConfig+0x17a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d001      	beq.n	8007122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e1df      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007122:	4b41      	ldr	r3, [pc, #260]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	493d      	ldr	r1, [pc, #244]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007132:	4313      	orrs	r3, r2
 8007134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007136:	e040      	b.n	80071ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d023      	beq.n	8007188 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007140:	4b39      	ldr	r3, [pc, #228]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a38      	ldr	r2, [pc, #224]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fb fe9c 	bl	8002e88 <HAL_GetTick>
 8007150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007154:	f7fb fe98 	bl	8002e88 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e1bd      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007166:	4b30      	ldr	r3, [pc, #192]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0f0      	beq.n	8007154 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007172:	4b2d      	ldr	r3, [pc, #180]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4929      	ldr	r1, [pc, #164]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007182:	4313      	orrs	r3, r2
 8007184:	600b      	str	r3, [r1, #0]
 8007186:	e018      	b.n	80071ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007188:	4b27      	ldr	r3, [pc, #156]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a26      	ldr	r2, [pc, #152]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007194:	f7fb fe78 	bl	8002e88 <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800719c:	f7fb fe74 	bl	8002e88 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e199      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ae:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1f0      	bne.n	800719c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d038      	beq.n	8007238 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d019      	beq.n	8007202 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ce:	4b16      	ldr	r3, [pc, #88]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80071d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80071d4:	f043 0301 	orr.w	r3, r3, #1
 80071d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071da:	f7fb fe55 	bl	8002e88 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e2:	f7fb fe51 	bl	8002e88 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e176      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 80071f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x23a>
 8007200:	e01a      	b.n	8007238 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007206:	4a08      	ldr	r2, [pc, #32]	; (8007228 <HAL_RCC_OscConfig+0x280>)
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720e:	f7fb fe3b 	bl	8002e88 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007214:	e00a      	b.n	800722c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007216:	f7fb fe37 	bl	8002e88 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d903      	bls.n	800722c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e15c      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
 8007228:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800722c:	4b91      	ldr	r3, [pc, #580]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 800722e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1ee      	bne.n	8007216 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80a4 	beq.w	800738e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007246:	4b8b      	ldr	r3, [pc, #556]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007252:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	4a87      	ldr	r2, [pc, #540]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725c:	6413      	str	r3, [r2, #64]	; 0x40
 800725e:	4b85      	ldr	r3, [pc, #532]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800726e:	4b82      	ldr	r3, [pc, #520]	; (8007478 <HAL_RCC_OscConfig+0x4d0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d118      	bne.n	80072ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800727a:	4b7f      	ldr	r3, [pc, #508]	; (8007478 <HAL_RCC_OscConfig+0x4d0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a7e      	ldr	r2, [pc, #504]	; (8007478 <HAL_RCC_OscConfig+0x4d0>)
 8007280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007286:	f7fb fdff 	bl	8002e88 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800728e:	f7fb fdfb 	bl	8002e88 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b64      	cmp	r3, #100	; 0x64
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e120      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a0:	4b75      	ldr	r3, [pc, #468]	; (8007478 <HAL_RCC_OscConfig+0x4d0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0f0      	beq.n	800728e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d106      	bne.n	80072c2 <HAL_RCC_OscConfig+0x31a>
 80072b4:	4b6f      	ldr	r3, [pc, #444]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b8:	4a6e      	ldr	r2, [pc, #440]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	6713      	str	r3, [r2, #112]	; 0x70
 80072c0:	e02d      	b.n	800731e <HAL_RCC_OscConfig+0x376>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10c      	bne.n	80072e4 <HAL_RCC_OscConfig+0x33c>
 80072ca:	4b6a      	ldr	r3, [pc, #424]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a69      	ldr	r2, [pc, #420]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70
 80072d6:	4b67      	ldr	r3, [pc, #412]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	4a66      	ldr	r2, [pc, #408]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072dc:	f023 0304 	bic.w	r3, r3, #4
 80072e0:	6713      	str	r3, [r2, #112]	; 0x70
 80072e2:	e01c      	b.n	800731e <HAL_RCC_OscConfig+0x376>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b05      	cmp	r3, #5
 80072ea:	d10c      	bne.n	8007306 <HAL_RCC_OscConfig+0x35e>
 80072ec:	4b61      	ldr	r3, [pc, #388]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a60      	ldr	r2, [pc, #384]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072f2:	f043 0304 	orr.w	r3, r3, #4
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
 80072f8:	4b5e      	ldr	r3, [pc, #376]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	4a5d      	ldr	r2, [pc, #372]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	6713      	str	r3, [r2, #112]	; 0x70
 8007304:	e00b      	b.n	800731e <HAL_RCC_OscConfig+0x376>
 8007306:	4b5b      	ldr	r3, [pc, #364]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	4a5a      	ldr	r2, [pc, #360]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	6713      	str	r3, [r2, #112]	; 0x70
 8007312:	4b58      	ldr	r3, [pc, #352]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	4a57      	ldr	r2, [pc, #348]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007318:	f023 0304 	bic.w	r3, r3, #4
 800731c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d015      	beq.n	8007352 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007326:	f7fb fdaf 	bl	8002e88 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732c:	e00a      	b.n	8007344 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732e:	f7fb fdab 	bl	8002e88 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	f241 3288 	movw	r2, #5000	; 0x1388
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e0ce      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007344:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0ee      	beq.n	800732e <HAL_RCC_OscConfig+0x386>
 8007350:	e014      	b.n	800737c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007352:	f7fb fd99 	bl	8002e88 <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007358:	e00a      	b.n	8007370 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735a:	f7fb fd95 	bl	8002e88 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f241 3288 	movw	r2, #5000	; 0x1388
 8007368:	4293      	cmp	r3, r2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e0b8      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007370:	4b40      	ldr	r3, [pc, #256]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1ee      	bne.n	800735a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d105      	bne.n	800738e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007382:	4b3c      	ldr	r3, [pc, #240]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	4a3b      	ldr	r2, [pc, #236]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800738c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80a4 	beq.w	80074e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007398:	4b36      	ldr	r3, [pc, #216]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 030c 	and.w	r3, r3, #12
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d06b      	beq.n	800747c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d149      	bne.n	8007440 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ac:	4b31      	ldr	r3, [pc, #196]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a30      	ldr	r2, [pc, #192]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80073b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fb fd66 	bl	8002e88 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c0:	f7fb fd62 	bl	8002e88 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e087      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d2:	4b28      	ldr	r3, [pc, #160]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f0      	bne.n	80073c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69da      	ldr	r2, [r3, #28]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	019b      	lsls	r3, r3, #6
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	3b01      	subs	r3, #1
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	4313      	orrs	r3, r2
 8007404:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800740a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800740c:	4b19      	ldr	r3, [pc, #100]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a18      	ldr	r2, [pc, #96]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fb fd36 	bl	8002e88 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007420:	f7fb fd32 	bl	8002e88 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e057      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCC_OscConfig+0x478>
 800743e:	e04f      	b.n	80074e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007440:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a0b      	ldr	r2, [pc, #44]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fb fd1c 	bl	8002e88 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007454:	f7fb fd18 	bl	8002e88 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e03d      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007466:	4b03      	ldr	r3, [pc, #12]	; (8007474 <HAL_RCC_OscConfig+0x4cc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f0      	bne.n	8007454 <HAL_RCC_OscConfig+0x4ac>
 8007472:	e035      	b.n	80074e0 <HAL_RCC_OscConfig+0x538>
 8007474:	40023800 	.word	0x40023800
 8007478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800747c:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <HAL_RCC_OscConfig+0x544>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d028      	beq.n	80074dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007494:	429a      	cmp	r2, r3
 8007496:	d121      	bne.n	80074dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d11a      	bne.n	80074dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074ac:	4013      	ands	r3, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d111      	bne.n	80074dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	3b01      	subs	r3, #1
 80074c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074d8:	429a      	cmp	r2, r3
 80074da:	d001      	beq.n	80074e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800

080074f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0d0      	b.n	80076aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007508:	4b6a      	ldr	r3, [pc, #424]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d910      	bls.n	8007538 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007516:	4b67      	ldr	r3, [pc, #412]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 020f 	bic.w	r2, r3, #15
 800751e:	4965      	ldr	r1, [pc, #404]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007526:	4b63      	ldr	r3, [pc, #396]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d001      	beq.n	8007538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e0b8      	b.n	80076aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d020      	beq.n	8007586 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007550:	4b59      	ldr	r3, [pc, #356]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	4a58      	ldr	r2, [pc, #352]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800755a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007568:	4b53      	ldr	r3, [pc, #332]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4a52      	ldr	r2, [pc, #328]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 800756e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007574:	4b50      	ldr	r3, [pc, #320]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	494d      	ldr	r1, [pc, #308]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007582:	4313      	orrs	r3, r2
 8007584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d040      	beq.n	8007614 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d107      	bne.n	80075aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759a:	4b47      	ldr	r3, [pc, #284]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d115      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e07f      	b.n	80076aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d107      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075b2:	4b41      	ldr	r3, [pc, #260]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d109      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e073      	b.n	80076aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075c2:	4b3d      	ldr	r3, [pc, #244]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e06b      	b.n	80076aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075d2:	4b39      	ldr	r3, [pc, #228]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f023 0203 	bic.w	r2, r3, #3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4936      	ldr	r1, [pc, #216]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e4:	f7fb fc50 	bl	8002e88 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ea:	e00a      	b.n	8007602 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075ec:	f7fb fc4c 	bl	8002e88 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e053      	b.n	80076aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 020c 	and.w	r2, r3, #12
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	429a      	cmp	r2, r3
 8007612:	d1eb      	bne.n	80075ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007614:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d210      	bcs.n	8007644 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007622:	4b24      	ldr	r3, [pc, #144]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f023 020f 	bic.w	r2, r3, #15
 800762a:	4922      	ldr	r1, [pc, #136]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	4313      	orrs	r3, r2
 8007630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007632:	4b20      	ldr	r3, [pc, #128]	; (80076b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d001      	beq.n	8007644 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e032      	b.n	80076aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d008      	beq.n	8007662 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007650:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	4916      	ldr	r1, [pc, #88]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 800765e:	4313      	orrs	r3, r2
 8007660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d009      	beq.n	8007682 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	490e      	ldr	r1, [pc, #56]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 800767e:	4313      	orrs	r3, r2
 8007680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007682:	f000 f821 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 8007686:	4601      	mov	r1, r0
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <HAL_RCC_ClockConfig+0x1c8>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <HAL_RCC_ClockConfig+0x1cc>)
 8007694:	5cd3      	ldrb	r3, [r2, r3]
 8007696:	fa21 f303 	lsr.w	r3, r1, r3
 800769a:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <HAL_RCC_ClockConfig+0x1d0>)
 800769c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800769e:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <HAL_RCC_ClockConfig+0x1d4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fa fd44 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40023c00 	.word	0x40023c00
 80076b8:	40023800 	.word	0x40023800
 80076bc:	08013774 	.word	0x08013774
 80076c0:	20000000 	.word	0x20000000
 80076c4:	20000004 	.word	0x20000004

080076c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	2300      	movs	r3, #0
 80076d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076de:	4b50      	ldr	r3, [pc, #320]	; (8007820 <HAL_RCC_GetSysClockFreq+0x158>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 030c 	and.w	r3, r3, #12
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d007      	beq.n	80076fa <HAL_RCC_GetSysClockFreq+0x32>
 80076ea:	2b08      	cmp	r3, #8
 80076ec:	d008      	beq.n	8007700 <HAL_RCC_GetSysClockFreq+0x38>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f040 808d 	bne.w	800780e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076f4:	4b4b      	ldr	r3, [pc, #300]	; (8007824 <HAL_RCC_GetSysClockFreq+0x15c>)
 80076f6:	60bb      	str	r3, [r7, #8]
      break;
 80076f8:	e08c      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076fa:	4b4b      	ldr	r3, [pc, #300]	; (8007828 <HAL_RCC_GetSysClockFreq+0x160>)
 80076fc:	60bb      	str	r3, [r7, #8]
      break;
 80076fe:	e089      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007700:	4b47      	ldr	r3, [pc, #284]	; (8007820 <HAL_RCC_GetSysClockFreq+0x158>)
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007708:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800770a:	4b45      	ldr	r3, [pc, #276]	; (8007820 <HAL_RCC_GetSysClockFreq+0x158>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d023      	beq.n	800775e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007716:	4b42      	ldr	r3, [pc, #264]	; (8007820 <HAL_RCC_GetSysClockFreq+0x158>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	099b      	lsrs	r3, r3, #6
 800771c:	f04f 0400 	mov.w	r4, #0
 8007720:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	ea03 0501 	and.w	r5, r3, r1
 800772c:	ea04 0602 	and.w	r6, r4, r2
 8007730:	4a3d      	ldr	r2, [pc, #244]	; (8007828 <HAL_RCC_GetSysClockFreq+0x160>)
 8007732:	fb02 f106 	mul.w	r1, r2, r6
 8007736:	2200      	movs	r2, #0
 8007738:	fb02 f205 	mul.w	r2, r2, r5
 800773c:	440a      	add	r2, r1
 800773e:	493a      	ldr	r1, [pc, #232]	; (8007828 <HAL_RCC_GetSysClockFreq+0x160>)
 8007740:	fba5 0101 	umull	r0, r1, r5, r1
 8007744:	1853      	adds	r3, r2, r1
 8007746:	4619      	mov	r1, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f04f 0400 	mov.w	r4, #0
 800774e:	461a      	mov	r2, r3
 8007750:	4623      	mov	r3, r4
 8007752:	f7f8 fd5d 	bl	8000210 <__aeabi_uldivmod>
 8007756:	4603      	mov	r3, r0
 8007758:	460c      	mov	r4, r1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e049      	b.n	80077f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800775e:	4b30      	ldr	r3, [pc, #192]	; (8007820 <HAL_RCC_GetSysClockFreq+0x158>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	099b      	lsrs	r3, r3, #6
 8007764:	f04f 0400 	mov.w	r4, #0
 8007768:	f240 11ff 	movw	r1, #511	; 0x1ff
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	ea03 0501 	and.w	r5, r3, r1
 8007774:	ea04 0602 	and.w	r6, r4, r2
 8007778:	4629      	mov	r1, r5
 800777a:	4632      	mov	r2, r6
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	f04f 0400 	mov.w	r4, #0
 8007784:	0154      	lsls	r4, r2, #5
 8007786:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800778a:	014b      	lsls	r3, r1, #5
 800778c:	4619      	mov	r1, r3
 800778e:	4622      	mov	r2, r4
 8007790:	1b49      	subs	r1, r1, r5
 8007792:	eb62 0206 	sbc.w	r2, r2, r6
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	f04f 0400 	mov.w	r4, #0
 800779e:	0194      	lsls	r4, r2, #6
 80077a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80077a4:	018b      	lsls	r3, r1, #6
 80077a6:	1a5b      	subs	r3, r3, r1
 80077a8:	eb64 0402 	sbc.w	r4, r4, r2
 80077ac:	f04f 0100 	mov.w	r1, #0
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	00e2      	lsls	r2, r4, #3
 80077b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077ba:	00d9      	lsls	r1, r3, #3
 80077bc:	460b      	mov	r3, r1
 80077be:	4614      	mov	r4, r2
 80077c0:	195b      	adds	r3, r3, r5
 80077c2:	eb44 0406 	adc.w	r4, r4, r6
 80077c6:	f04f 0100 	mov.w	r1, #0
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	02a2      	lsls	r2, r4, #10
 80077d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80077d4:	0299      	lsls	r1, r3, #10
 80077d6:	460b      	mov	r3, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	4621      	mov	r1, r4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f04f 0400 	mov.w	r4, #0
 80077e4:	461a      	mov	r2, r3
 80077e6:	4623      	mov	r3, r4
 80077e8:	f7f8 fd12 	bl	8000210 <__aeabi_uldivmod>
 80077ec:	4603      	mov	r3, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <HAL_RCC_GetSysClockFreq+0x158>)
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	0c1b      	lsrs	r3, r3, #16
 80077f8:	f003 0303 	and.w	r3, r3, #3
 80077fc:	3301      	adds	r3, #1
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	60bb      	str	r3, [r7, #8]
      break;
 800780c:	e002      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800780e:	4b05      	ldr	r3, [pc, #20]	; (8007824 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007810:	60bb      	str	r3, [r7, #8]
      break;
 8007812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007814:	68bb      	ldr	r3, [r7, #8]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781e:	bf00      	nop
 8007820:	40023800 	.word	0x40023800
 8007824:	00f42400 	.word	0x00f42400
 8007828:	017d7840 	.word	0x017d7840

0800782c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <HAL_RCC_GetHCLKFreq+0x14>)
 8007832:	681b      	ldr	r3, [r3, #0]
}
 8007834:	4618      	mov	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000000 	.word	0x20000000

08007844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007848:	f7ff fff0 	bl	800782c <HAL_RCC_GetHCLKFreq>
 800784c:	4601      	mov	r1, r0
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	0a9b      	lsrs	r3, r3, #10
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4a03      	ldr	r2, [pc, #12]	; (8007868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800785a:	5cd3      	ldrb	r3, [r2, r3]
 800785c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007860:	4618      	mov	r0, r3
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40023800 	.word	0x40023800
 8007868:	08013784 	.word	0x08013784

0800786c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007870:	f7ff ffdc 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8007874:	4601      	mov	r1, r0
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	0b5b      	lsrs	r3, r3, #13
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	4a03      	ldr	r2, [pc, #12]	; (8007890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007882:	5cd3      	ldrb	r3, [r2, r3]
 8007884:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007888:	4618      	mov	r0, r3
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40023800 	.word	0x40023800
 8007890:	08013784 	.word	0x08013784

08007894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	220f      	movs	r2, #15
 80078a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078a4:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0203 	and.w	r2, r3, #3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078b0:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078bc:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80078c8:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	08db      	lsrs	r3, r3, #3
 80078ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <HAL_RCC_GetClockConfig+0x60>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 020f 	and.w	r2, r3, #15
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	601a      	str	r2, [r3, #0]
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40023800 	.word	0x40023800
 80078f4:	40023c00 	.word	0x40023c00

080078f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d012      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007920:	4b69      	ldr	r3, [pc, #420]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	4a68      	ldr	r2, [pc, #416]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007926:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800792a:	6093      	str	r3, [r2, #8]
 800792c:	4b66      	ldr	r3, [pc, #408]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007934:	4964      	ldr	r1, [pc, #400]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007942:	2301      	movs	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d017      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007952:	4b5d      	ldr	r3, [pc, #372]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007960:	4959      	ldr	r1, [pc, #356]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007970:	d101      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007972:	2301      	movs	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d017      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800798e:	4b4e      	ldr	r3, [pc, #312]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	494a      	ldr	r1, [pc, #296]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ac:	d101      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079ae:	2301      	movs	r3, #1
 80079b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079ba:	2301      	movs	r3, #1
 80079bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079ca:	2301      	movs	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 808b 	beq.w	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079dc:	4b3a      	ldr	r3, [pc, #232]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	4a39      	ldr	r2, [pc, #228]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e6:	6413      	str	r3, [r2, #64]	; 0x40
 80079e8:	4b37      	ldr	r3, [pc, #220]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f0:	60bb      	str	r3, [r7, #8]
 80079f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079f4:	4b35      	ldr	r3, [pc, #212]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a34      	ldr	r2, [pc, #208]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a00:	f7fb fa42 	bl	8002e88 <HAL_GetTick>
 8007a04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a08:	f7fb fa3e 	bl	8002e88 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b64      	cmp	r3, #100	; 0x64
 8007a14:	d901      	bls.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e355      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a1a:	4b2c      	ldr	r3, [pc, #176]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a26:	4b28      	ldr	r3, [pc, #160]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d035      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d02e      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a44:	4b20      	ldr	r3, [pc, #128]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5e:	4a1a      	ldr	r2, [pc, #104]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a66:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a6c:	4b16      	ldr	r3, [pc, #88]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d114      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a78:	f7fb fa06 	bl	8002e88 <HAL_GetTick>
 8007a7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a7e:	e00a      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a80:	f7fb fa02 	bl	8002e88 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d901      	bls.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e317      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0ee      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aae:	d111      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007abc:	4b04      	ldr	r3, [pc, #16]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007abe:	400b      	ands	r3, r1
 8007ac0:	4901      	ldr	r1, [pc, #4]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	608b      	str	r3, [r1, #8]
 8007ac6:	e00b      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40007000 	.word	0x40007000
 8007ad0:	0ffffcff 	.word	0x0ffffcff
 8007ad4:	4bb0      	ldr	r3, [pc, #704]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	4aaf      	ldr	r2, [pc, #700]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ada:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ade:	6093      	str	r3, [r2, #8]
 8007ae0:	4bad      	ldr	r3, [pc, #692]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aec:	49aa      	ldr	r1, [pc, #680]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d010      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007afe:	4ba6      	ldr	r3, [pc, #664]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b04:	4aa4      	ldr	r2, [pc, #656]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007b0e:	4ba2      	ldr	r3, [pc, #648]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	499f      	ldr	r1, [pc, #636]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b2c:	4b9a      	ldr	r3, [pc, #616]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b3a:	4997      	ldr	r1, [pc, #604]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b4e:	4b92      	ldr	r3, [pc, #584]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b5c:	498e      	ldr	r1, [pc, #568]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b70:	4b89      	ldr	r3, [pc, #548]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7e:	4986      	ldr	r1, [pc, #536]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b92:	4b81      	ldr	r3, [pc, #516]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	497d      	ldr	r1, [pc, #500]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bb4:	4b78      	ldr	r3, [pc, #480]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bba:	f023 0203 	bic.w	r2, r3, #3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc2:	4975      	ldr	r1, [pc, #468]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bd6:	4b70      	ldr	r3, [pc, #448]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bdc:	f023 020c 	bic.w	r2, r3, #12
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be4:	496c      	ldr	r1, [pc, #432]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bf8:	4b67      	ldr	r3, [pc, #412]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c06:	4964      	ldr	r1, [pc, #400]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c1a:	4b5f      	ldr	r3, [pc, #380]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c28:	495b      	ldr	r1, [pc, #364]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c3c:	4b56      	ldr	r3, [pc, #344]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	4953      	ldr	r1, [pc, #332]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c5e:	4b4e      	ldr	r3, [pc, #312]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6c:	494a      	ldr	r1, [pc, #296]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c80:	4b45      	ldr	r3, [pc, #276]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8e:	4942      	ldr	r1, [pc, #264]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ca2:	4b3d      	ldr	r3, [pc, #244]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb0:	4939      	ldr	r1, [pc, #228]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cc4:	4b34      	ldr	r3, [pc, #208]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd2:	4931      	ldr	r1, [pc, #196]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d011      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ce6:	4b2c      	ldr	r3, [pc, #176]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf4:	4928      	ldr	r1, [pc, #160]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d04:	d101      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d06:	2301      	movs	r3, #1
 8007d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d16:	2301      	movs	r3, #1
 8007d18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d26:	4b1c      	ldr	r3, [pc, #112]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d34:	4918      	ldr	r1, [pc, #96]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d48:	4b13      	ldr	r3, [pc, #76]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d58:	490f      	ldr	r1, [pc, #60]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d005      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d6e:	f040 80d8 	bne.w	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d72:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a08      	ldr	r2, [pc, #32]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7e:	f7fb f883 	bl	8002e88 <HAL_GetTick>
 8007d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d84:	e00a      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d86:	f7fb f87f 	bl	8002e88 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b64      	cmp	r3, #100	; 0x64
 8007d92:	d903      	bls.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e196      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007d98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d9c:	4b6c      	ldr	r3, [pc, #432]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1ee      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d021      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11d      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007dbc:	4b64      	ldr	r3, [pc, #400]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007dca:	4b61      	ldr	r3, [pc, #388]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd0:	0e1b      	lsrs	r3, r3, #24
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	019a      	lsls	r2, r3, #6
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	041b      	lsls	r3, r3, #16
 8007de2:	431a      	orrs	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	061b      	lsls	r3, r3, #24
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	071b      	lsls	r3, r3, #28
 8007df0:	4957      	ldr	r1, [pc, #348]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d004      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e0c:	d00a      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d02e      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e22:	d129      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e24:	4b4a      	ldr	r3, [pc, #296]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e32:	4b47      	ldr	r3, [pc, #284]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e38:	0f1b      	lsrs	r3, r3, #28
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	019a      	lsls	r2, r3, #6
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	061b      	lsls	r3, r3, #24
 8007e52:	431a      	orrs	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	071b      	lsls	r3, r3, #28
 8007e58:	493d      	ldr	r1, [pc, #244]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e60:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e66:	f023 021f 	bic.w	r2, r3, #31
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	4937      	ldr	r1, [pc, #220]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01d      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e84:	4b32      	ldr	r3, [pc, #200]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e8a:	0e1b      	lsrs	r3, r3, #24
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e92:	4b2f      	ldr	r3, [pc, #188]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e98:	0f1b      	lsrs	r3, r3, #28
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	019a      	lsls	r2, r3, #6
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	041b      	lsls	r3, r3, #16
 8007eac:	431a      	orrs	r2, r3
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	061b      	lsls	r3, r3, #24
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	071b      	lsls	r3, r3, #28
 8007eb8:	4925      	ldr	r1, [pc, #148]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d011      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	019a      	lsls	r2, r3, #6
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	061b      	lsls	r3, r3, #24
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	071b      	lsls	r3, r3, #28
 8007ee8:	4919      	ldr	r1, [pc, #100]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ef0:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a16      	ldr	r2, [pc, #88]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007efc:	f7fa ffc4 	bl	8002e88 <HAL_GetTick>
 8007f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f04:	f7fa ffc0 	bl	8002e88 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b64      	cmp	r3, #100	; 0x64
 8007f10:	d901      	bls.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e0d7      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f16:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0f0      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	f040 80cd 	bne.w	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f36:	f7fa ffa7 	bl	8002e88 <HAL_GetTick>
 8007f3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f3c:	e00a      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f3e:	f7fa ffa3 	bl	8002e88 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b64      	cmp	r3, #100	; 0x64
 8007f4a:	d903      	bls.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e0ba      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007f50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f54:	4b5e      	ldr	r3, [pc, #376]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f60:	d0ed      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d02e      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d12a      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f8a:	4b51      	ldr	r3, [pc, #324]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f90:	0c1b      	lsrs	r3, r3, #16
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f98:	4b4d      	ldr	r3, [pc, #308]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9e:	0f1b      	lsrs	r3, r3, #28
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	019a      	lsls	r2, r3, #6
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	061b      	lsls	r3, r3, #24
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	071b      	lsls	r3, r3, #28
 8007fbe:	4944      	ldr	r1, [pc, #272]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007fc6:	4b42      	ldr	r3, [pc, #264]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	493d      	ldr	r1, [pc, #244]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d022      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ff4:	d11d      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ff6:	4b36      	ldr	r3, [pc, #216]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffc:	0e1b      	lsrs	r3, r3, #24
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008004:	4b32      	ldr	r3, [pc, #200]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800a:	0f1b      	lsrs	r3, r3, #28
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	019a      	lsls	r2, r3, #6
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	431a      	orrs	r2, r3
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	061b      	lsls	r3, r3, #24
 8008024:	431a      	orrs	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	071b      	lsls	r3, r3, #28
 800802a:	4929      	ldr	r1, [pc, #164]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800802c:	4313      	orrs	r3, r2
 800802e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d028      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800803e:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008044:	0e1b      	lsrs	r3, r3, #24
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800804c:	4b20      	ldr	r3, [pc, #128]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800804e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	f003 0303 	and.w	r3, r3, #3
 8008058:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	019a      	lsls	r2, r3, #6
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	041b      	lsls	r3, r3, #16
 8008064:	431a      	orrs	r2, r3
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	061b      	lsls	r3, r3, #24
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	071b      	lsls	r3, r3, #28
 8008072:	4917      	ldr	r1, [pc, #92]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008074:	4313      	orrs	r3, r2
 8008076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800807a:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800807c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4911      	ldr	r1, [pc, #68]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800808a:	4313      	orrs	r3, r2
 800808c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008090:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a0e      	ldr	r2, [pc, #56]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809c:	f7fa fef4 	bl	8002e88 <HAL_GetTick>
 80080a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080a2:	e008      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080a4:	f7fa fef0 	bl	8002e88 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b64      	cmp	r3, #100	; 0x64
 80080b0:	d901      	bls.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e007      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c2:	d1ef      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40023800 	.word	0x40023800

080080d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080f2:	f040 8086 	bne.w	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80080f6:	4b8d      	ldr	r3, [pc, #564]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008104:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800810c:	d03e      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800810e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008112:	d073      	beq.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d000      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008118:	e074      	b.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800811a:	4b84      	ldr	r3, [pc, #528]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d108      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008126:	4b81      	ldr	r3, [pc, #516]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800812e:	4a80      	ldr	r2, [pc, #512]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008130:	fbb2 f3f3 	udiv	r3, r2, r3
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	e007      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008138:	4b7c      	ldr	r3, [pc, #496]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008140:	4a7c      	ldr	r2, [pc, #496]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008142:	fbb2 f3f3 	udiv	r3, r2, r3
 8008146:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008148:	4b78      	ldr	r3, [pc, #480]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800814a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814e:	0e1b      	lsrs	r3, r3, #24
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008156:	4b75      	ldr	r3, [pc, #468]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	099b      	lsrs	r3, r3, #6
 800815e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	fb02 f203 	mul.w	r2, r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	fbb2 f3f3 	udiv	r3, r2, r3
 800816e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008170:	4b6e      	ldr	r3, [pc, #440]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	3301      	adds	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	fbb2 f3f3 	udiv	r3, r2, r3
 8008188:	617b      	str	r3, [r7, #20]
        break;
 800818a:	e03b      	b.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800818c:	4b67      	ldr	r3, [pc, #412]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d108      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008198:	4b64      	ldr	r3, [pc, #400]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a0:	4a63      	ldr	r2, [pc, #396]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80081a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	e007      	b.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081aa:	4b60      	ldr	r3, [pc, #384]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b2:	4a60      	ldr	r2, [pc, #384]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80081ba:	4b5c      	ldr	r3, [pc, #368]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c0:	0e1b      	lsrs	r3, r3, #24
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80081c8:	4b58      	ldr	r3, [pc, #352]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ce:	099b      	lsrs	r3, r3, #6
 80081d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	fb02 f203 	mul.w	r2, r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80081e2:	4b52      	ldr	r3, [pc, #328]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	3301      	adds	r3, #1
 80081ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]
        break;
 80081fa:	e003      	b.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80081fc:	4b4e      	ldr	r3, [pc, #312]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80081fe:	617b      	str	r3, [r7, #20]
        break;
 8008200:	e000      	b.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008202:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800820a:	f040 8086 	bne.w	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800820e:	4b47      	ldr	r3, [pc, #284]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008214:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800821c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008224:	d03e      	beq.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800822a:	d073      	beq.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d000      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008230:	e074      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008232:	4b3e      	ldr	r3, [pc, #248]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d108      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800823e:	4b3b      	ldr	r3, [pc, #236]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008246:	4a3a      	ldr	r2, [pc, #232]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	e007      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008250:	4b36      	ldr	r3, [pc, #216]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008258:	4a36      	ldr	r2, [pc, #216]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800825a:	fbb2 f3f3 	udiv	r3, r2, r3
 800825e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008260:	4b32      	ldr	r3, [pc, #200]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008266:	0e1b      	lsrs	r3, r3, #24
 8008268:	f003 030f 	and.w	r3, r3, #15
 800826c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800826e:	4b2f      	ldr	r3, [pc, #188]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008274:	099b      	lsrs	r3, r3, #6
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	fb02 f203 	mul.w	r2, r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	fbb2 f3f3 	udiv	r3, r2, r3
 8008286:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008288:	4b28      	ldr	r3, [pc, #160]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800828a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a0:	617b      	str	r3, [r7, #20]
        break;
 80082a2:	e03b      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80082a4:	4b21      	ldr	r3, [pc, #132]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d108      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80082b0:	4b1e      	ldr	r3, [pc, #120]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b8:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80082ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	e007      	b.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80082c2:	4b1a      	ldr	r3, [pc, #104]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ca:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80082cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80082d2:	4b16      	ldr	r3, [pc, #88]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d8:	0e1b      	lsrs	r3, r3, #24
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80082e0:	4b12      	ldr	r3, [pc, #72]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e6:	099b      	lsrs	r3, r3, #6
 80082e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	fb02 f203 	mul.w	r2, r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80082fa:	4b0c      	ldr	r3, [pc, #48]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008310:	617b      	str	r3, [r7, #20]
        break;
 8008312:	e003      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008314:	4b08      	ldr	r3, [pc, #32]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008316:	617b      	str	r3, [r7, #20]
        break;
 8008318:	e000      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800831a:	bf00      	nop

  return frequency;
 800831c:	697b      	ldr	r3, [r7, #20]
}
 800831e:	4618      	mov	r0, r3
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	40023800 	.word	0x40023800
 8008330:	00f42400 	.word	0x00f42400
 8008334:	017d7840 	.word	0x017d7840
 8008338:	00bb8000 	.word	0x00bb8000

0800833c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e06b      	b.n	8008426 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7f5b      	ldrb	r3, [r3, #29]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d105      	bne.n	8008364 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7f9 fbfe 	bl	8001b60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	22ca      	movs	r2, #202	; 0xca
 8008370:	625a      	str	r2, [r3, #36]	; 0x24
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2253      	movs	r2, #83	; 0x53
 8008378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fb00 	bl	8008980 <RTC_EnterInitMode>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d008      	beq.n	8008398 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	22ff      	movs	r2, #255	; 0xff
 800838c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e046      	b.n	8008426 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6899      	ldr	r1, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4b23      	ldr	r3, [pc, #140]	; (8008430 <HAL_RTC_Init+0xf4>)
 80083a4:	400b      	ands	r3, r1
 80083a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6899      	ldr	r1, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	68d2      	ldr	r2, [r2, #12]
 80083ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6919      	ldr	r1, [r3, #16]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	041a      	lsls	r2, r3, #16
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083f2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0208 	bic.w	r2, r2, #8
 8008402:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	22ff      	movs	r2, #255	; 0xff
 800841c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008424:	2300      	movs	r3, #0
  }
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	ff8fffbf 	.word	0xff8fffbf

08008434 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008434:	b590      	push	{r4, r7, lr}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	7f1b      	ldrb	r3, [r3, #28]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_RTC_SetTime+0x1c>
 800844c:	2302      	movs	r3, #2
 800844e:	e0a8      	b.n	80085a2 <HAL_RTC_SetTime+0x16e>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2202      	movs	r2, #2
 800845a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d126      	bne.n	80084b0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 faac 	bl	80089d8 <RTC_ByteToBcd2>
 8008480:	4603      	mov	r3, r0
 8008482:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 faa5 	bl	80089d8 <RTC_ByteToBcd2>
 800848e:	4603      	mov	r3, r0
 8008490:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008492:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	789b      	ldrb	r3, [r3, #2]
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fa9d 	bl	80089d8 <RTC_ByteToBcd2>
 800849e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80084a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	7b1b      	ldrb	r3, [r3, #12]
 80084a8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80084aa:	4313      	orrs	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	e018      	b.n	80084e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2200      	movs	r2, #0
 80084c2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084d0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80084d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	7b1b      	ldrb	r3, [r3, #12]
 80084dc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	22ca      	movs	r2, #202	; 0xca
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2253      	movs	r2, #83	; 0x53
 80084f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 fa44 	bl	8008980 <RTC_EnterInitMode>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	22ff      	movs	r2, #255	; 0xff
 8008504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2204      	movs	r2, #4
 800850a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e045      	b.n	80085a2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	6979      	ldr	r1, [r7, #20]
 800851c:	4b23      	ldr	r3, [pc, #140]	; (80085ac <HAL_RTC_SetTime+0x178>)
 800851e:	400b      	ands	r3, r1
 8008520:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008530:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6899      	ldr	r1, [r3, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	431a      	orrs	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008558:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b00      	cmp	r3, #0
 8008566:	d111      	bne.n	800858c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f9e1 	bl	8008930 <HAL_RTC_WaitForSynchro>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	22ff      	movs	r2, #255	; 0xff
 800857a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2204      	movs	r2, #4
 8008580:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e00a      	b.n	80085a2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	22ff      	movs	r2, #255	; 0xff
 8008592:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80085a0:	2300      	movs	r3, #0
  }
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd90      	pop	{r4, r7, pc}
 80085aa:	bf00      	nop
 80085ac:	007f7f7f 	.word	0x007f7f7f

080085b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085b0:	b590      	push	{r4, r7, lr}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	7f1b      	ldrb	r3, [r3, #28]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_RTC_SetDate+0x1c>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e092      	b.n	80086f2 <HAL_RTC_SetDate+0x142>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2202      	movs	r2, #2
 80085d6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10e      	bne.n	80085fc <HAL_RTC_SetDate+0x4c>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	785b      	ldrb	r3, [r3, #1]
 80085ee:	f023 0310 	bic.w	r3, r3, #16
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	330a      	adds	r3, #10
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d11c      	bne.n	800863c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f9e6 	bl	80089d8 <RTC_ByteToBcd2>
 800860c:	4603      	mov	r3, r0
 800860e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f9df 	bl	80089d8 <RTC_ByteToBcd2>
 800861a:	4603      	mov	r3, r0
 800861c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800861e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	789b      	ldrb	r3, [r3, #2]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 f9d7 	bl	80089d8 <RTC_ByteToBcd2>
 800862a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800862c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	e00e      	b.n	800865a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	78db      	ldrb	r3, [r3, #3]
 8008640:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008648:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800864e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	22ca      	movs	r2, #202	; 0xca
 8008660:	625a      	str	r2, [r3, #36]	; 0x24
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2253      	movs	r2, #83	; 0x53
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f988 	bl	8008980 <RTC_EnterInitMode>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	22ff      	movs	r2, #255	; 0xff
 800867c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2204      	movs	r2, #4
 8008682:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e031      	b.n	80086f2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	6979      	ldr	r1, [r7, #20]
 8008694:	4b19      	ldr	r3, [pc, #100]	; (80086fc <HAL_RTC_SetDate+0x14c>)
 8008696:	400b      	ands	r3, r1
 8008698:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f003 0320 	and.w	r3, r3, #32
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d111      	bne.n	80086dc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f939 	bl	8008930 <HAL_RTC_WaitForSynchro>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2204      	movs	r2, #4
 80086d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e00a      	b.n	80086f2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80086f0:	2300      	movs	r3, #0
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}
 80086fa:	bf00      	nop
 80086fc:	00ffff3f 	.word	0x00ffff3f

08008700 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008700:	b590      	push	{r4, r7, lr}
 8008702:	b089      	sub	sp, #36	; 0x24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	7f1b      	ldrb	r3, [r3, #28]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_RTC_SetAlarm+0x24>
 8008720:	2302      	movs	r3, #2
 8008722:	e101      	b.n	8008928 <HAL_RTC_SetAlarm+0x228>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2202      	movs	r2, #2
 800872e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d137      	bne.n	80087a6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2200      	movs	r2, #0
 8008748:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f942 	bl	80089d8 <RTC_ByteToBcd2>
 8008754:	4603      	mov	r3, r0
 8008756:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f93b 	bl	80089d8 <RTC_ByteToBcd2>
 8008762:	4603      	mov	r3, r0
 8008764:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008766:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	789b      	ldrb	r3, [r3, #2]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f933 	bl	80089d8 <RTC_ByteToBcd2>
 8008772:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008774:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	7b1b      	ldrb	r3, [r3, #12]
 800877c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800877e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f925 	bl	80089d8 <RTC_ByteToBcd2>
 800878e:	4603      	mov	r3, r0
 8008790:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008792:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800879a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80087a0:	4313      	orrs	r3, r2
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	e023      	b.n	80087ee <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087c6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80087cc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	7b1b      	ldrb	r3, [r3, #12]
 80087d2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80087d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80087e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087ea:	4313      	orrs	r3, r2
 80087ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	22ca      	movs	r2, #202	; 0xca
 8008800:	625a      	str	r2, [r3, #36]	; 0x24
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2253      	movs	r2, #83	; 0x53
 8008808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008812:	d13f      	bne.n	8008894 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689a      	ldr	r2, [r3, #8]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008822:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008832:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008834:	f7fa fb28 	bl	8002e88 <HAL_GetTick>
 8008838:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800883a:	e013      	b.n	8008864 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800883c:	f7fa fb24 	bl	8002e88 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800884a:	d90b      	bls.n	8008864 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	22ff      	movs	r2, #255	; 0xff
 8008852:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2203      	movs	r2, #3
 8008858:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e061      	b.n	8008928 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0e4      	beq.n	800883c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008890:	609a      	str	r2, [r3, #8]
 8008892:	e03e      	b.n	8008912 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689a      	ldr	r2, [r3, #8]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088a2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088b2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088b4:	f7fa fae8 	bl	8002e88 <HAL_GetTick>
 80088b8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80088ba:	e013      	b.n	80088e4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088bc:	f7fa fae4 	bl	8002e88 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ca:	d90b      	bls.n	80088e4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	22ff      	movs	r2, #255	; 0xff
 80088d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2203      	movs	r2, #3
 80088d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e021      	b.n	8008928 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0e4      	beq.n	80088bc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008910:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	22ff      	movs	r2, #255	; 0xff
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3724      	adds	r7, #36	; 0x24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd90      	pop	{r4, r7, pc}

08008930 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800894a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800894c:	f7fa fa9c 	bl	8002e88 <HAL_GetTick>
 8008950:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008952:	e009      	b.n	8008968 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008954:	f7fa fa98 	bl	8002e88 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008962:	d901      	bls.n	8008968 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e007      	b.n	8008978 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0ee      	beq.n	8008954 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d119      	bne.n	80089ce <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f04f 32ff 	mov.w	r2, #4294967295
 80089a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089a4:	f7fa fa70 	bl	8002e88 <HAL_GetTick>
 80089a8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089aa:	e009      	b.n	80089c0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089ac:	f7fa fa6c 	bl	8002e88 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ba:	d901      	bls.n	80089c0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e007      	b.n	80089d0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0ee      	beq.n	80089ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80089e6:	e005      	b.n	80089f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	3b0a      	subs	r3, #10
 80089f2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d8f6      	bhi.n	80089e8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	b2db      	uxtb	r3, r3
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	7f1b      	ldrb	r3, [r3, #28]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e03e      	b.n	8008aae <HAL_RTCEx_SetTimeStamp+0x9a>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2202      	movs	r2, #2
 8008a3a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	22ca      	movs	r2, #202	; 0xca
 8008a56:	625a      	str	r2, [r3, #36]	; 0x24
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2253      	movs	r2, #83	; 0x53
 8008a5e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0206 	bic.w	r2, r2, #6
 8008a6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	22ff      	movs	r2, #255	; 0xff
 8008a9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	fffff7f7 	.word	0xfffff7f7

08008ac0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e149      	b.n	8008d72 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d106      	bne.n	8008af8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7f9 f8f6 	bl	8001ce4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f94f 	bl	8008da4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d007      	beq.n	8008b1e <HAL_SAI_Init+0x5e>
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d302      	bcc.n	8008b18 <HAL_SAI_Init+0x58>
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d006      	beq.n	8008b24 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008b16:	e008      	b.n	8008b2a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	61fb      	str	r3, [r7, #28]
      break;
 8008b1c:	e005      	b.n	8008b2a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008b1e:	2310      	movs	r3, #16
 8008b20:	61fb      	str	r3, [r7, #28]
      break;
 8008b22:	e002      	b.n	8008b2a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008b24:	2320      	movs	r3, #32
 8008b26:	61fb      	str	r3, [r7, #28]
      break;
 8008b28:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d81d      	bhi.n	8008b6e <HAL_SAI_Init+0xae>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <HAL_SAI_Init+0x78>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b57 	.word	0x08008b57
 8008b44:	08008b5f 	.word	0x08008b5f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b4c:	e010      	b.n	8008b70 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b52:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b54:	e00c      	b.n	8008b70 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b5a:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b5c:	e008      	b.n	8008b70 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b62:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008b6c:	e000      	b.n	8008b70 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008b6e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a81      	ldr	r2, [pc, #516]	; (8008d7c <HAL_SAI_Init+0x2bc>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_SAI_Init+0xc4>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a80      	ldr	r2, [pc, #512]	; (8008d80 <HAL_SAI_Init+0x2c0>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d103      	bne.n	8008b8c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008b84:	4a7f      	ldr	r2, [pc, #508]	; (8008d84 <HAL_SAI_Init+0x2c4>)
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	e002      	b.n	8008b92 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b8c:	4a7e      	ldr	r2, [pc, #504]	; (8008d88 <HAL_SAI_Init+0x2c8>)
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d043      	beq.n	8008c22 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a76      	ldr	r2, [pc, #472]	; (8008d7c <HAL_SAI_Init+0x2bc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d004      	beq.n	8008bb2 <HAL_SAI_Init+0xf2>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a74      	ldr	r2, [pc, #464]	; (8008d80 <HAL_SAI_Init+0x2c0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d104      	bne.n	8008bbc <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008bb2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008bb6:	f7ff fa8d 	bl	80080d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bba:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a72      	ldr	r2, [pc, #456]	; (8008d8c <HAL_SAI_Init+0x2cc>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d004      	beq.n	8008bd0 <HAL_SAI_Init+0x110>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a71      	ldr	r2, [pc, #452]	; (8008d90 <HAL_SAI_Init+0x2d0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d104      	bne.n	8008bda <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008bd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008bd4:	f7ff fa7e 	bl	80080d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bd8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	461a      	mov	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	025b      	lsls	r3, r3, #9
 8008bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4a67      	ldr	r2, [pc, #412]	; (8008d94 <HAL_SAI_Init+0x2d4>)
 8008bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfa:	08da      	lsrs	r2, r3, #3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008c00:	68f9      	ldr	r1, [r7, #12]
 8008c02:	4b64      	ldr	r3, [pc, #400]	; (8008d94 <HAL_SAI_Init+0x2d4>)
 8008c04:	fba3 2301 	umull	r2, r3, r3, r1
 8008c08:	08da      	lsrs	r2, r3, #3
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	1aca      	subs	r2, r1, r3
 8008c14:	2a08      	cmp	r2, #8
 8008c16:	d904      	bls.n	8008c22 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_SAI_Init+0x172>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d109      	bne.n	8008c46 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_SAI_Init+0x17e>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e001      	b.n	8008c42 <HAL_SAI_Init+0x182>
 8008c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	e008      	b.n	8008c58 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d102      	bne.n	8008c54 <HAL_SAI_Init+0x194>
 8008c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c52:	e000      	b.n	8008c56 <HAL_SAI_Init+0x196>
 8008c54:	2300      	movs	r3, #0
 8008c56:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6819      	ldr	r1, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	4b4d      	ldr	r3, [pc, #308]	; (8008d98 <HAL_SAI_Init+0x2d8>)
 8008c64:	400b      	ands	r3, r1
 8008c66:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6819      	ldr	r1, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c7c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	431a      	orrs	r2, r3
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008c90:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c9c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	051b      	lsls	r3, r3, #20
 8008ca4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6859      	ldr	r1, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b38      	ldr	r3, [pc, #224]	; (8008d9c <HAL_SAI_Init+0x2dc>)
 8008cba:	400b      	ands	r3, r1
 8008cbc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6859      	ldr	r1, [r3, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6899      	ldr	r1, [r3, #8]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4b2e      	ldr	r3, [pc, #184]	; (8008da0 <HAL_SAI_Init+0x2e0>)
 8008ce8:	400b      	ands	r3, r1
 8008cea:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6899      	ldr	r1, [r3, #8]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cfc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008d02:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008d08:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008d12:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68d9      	ldr	r1, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008d2a:	400b      	ands	r3, r1
 8008d2c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68d9      	ldr	r1, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d42:	041b      	lsls	r3, r3, #16
 8008d44:	431a      	orrs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40015804 	.word	0x40015804
 8008d80:	40015824 	.word	0x40015824
 8008d84:	40015800 	.word	0x40015800
 8008d88:	40015c00 	.word	0x40015c00
 8008d8c:	40015c04 	.word	0x40015c04
 8008d90:	40015c24 	.word	0x40015c24
 8008d94:	cccccccd 	.word	0xcccccccd
 8008d98:	ff05c010 	.word	0xff05c010
 8008d9c:	ffff1ff0 	.word	0xffff1ff0
 8008da0:	fff88000 	.word	0xfff88000

08008da4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008da4:	b490      	push	{r4, r7}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008dac:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <SAI_Disable+0x64>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a16      	ldr	r2, [pc, #88]	; (8008e0c <SAI_Disable+0x68>)
 8008db2:	fba2 2303 	umull	r2, r3, r2, r3
 8008db6:	0b1b      	lsrs	r3, r3, #12
 8008db8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dcc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008dce:	4623      	mov	r3, r4
 8008dd0:	1e5c      	subs	r4, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dea:	e006      	b.n	8008dfa <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e9      	bne.n	8008dce <SAI_Disable+0x2a>

  return status;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc90      	pop	{r4, r7}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000000 	.word	0x20000000
 8008e0c:	95cbec1b 	.word	0x95cbec1b

08008e10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e022      	b.n	8008e68 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d105      	bne.n	8008e3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7f8 ffdf 	bl	8001df8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f814 	bl	8008e70 <HAL_SD_InitCard>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e00a      	b.n	8008e68 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e70:	b5b0      	push	{r4, r5, r7, lr}
 8008e72:	b08e      	sub	sp, #56	; 0x38
 8008e74:	af04      	add	r7, sp, #16
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008e8c:	2376      	movs	r3, #118	; 0x76
 8008e8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681d      	ldr	r5, [r3, #0]
 8008e94:	466c      	mov	r4, sp
 8008e96:	f107 0314 	add.w	r3, r7, #20
 8008e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ea2:	f107 0308 	add.w	r3, r7, #8
 8008ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f003 f8f9 	bl	800c0a0 <SDMMC_Init>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e03b      	b.n	8008f38 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ece:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f003 f91c 	bl	800c112 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ee8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fde6 	bl	8009abc <SD_PowerON>
 8008ef0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e013      	b.n	8008f38 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fd05 	bl	8009920 <SD_InitCard>
 8008f16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e000      	b.n	8008f38 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3728      	adds	r7, #40	; 0x28
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bdb0      	pop	{r4, r5, r7, pc}

08008f40 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08c      	sub	sp, #48	; 0x30
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d107      	bne.n	8008f68 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0cc      	b.n	8009102 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	f040 80c5 	bne.w	8009100 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	441a      	add	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d907      	bls.n	8008f9a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e0b3      	b.n	8009102 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	4a53      	ldr	r2, [pc, #332]	; (800910c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	4a52      	ldr	r2, [pc, #328]	; (8009110 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008fc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	2200      	movs	r2, #0
 8008fd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3380      	adds	r3, #128	; 0x80
 8008fdc:	4619      	mov	r1, r3
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	025b      	lsls	r3, r3, #9
 8008fe4:	089b      	lsrs	r3, r3, #2
 8008fe6:	f7fa fc4b 	bl	8003880 <HAL_DMA_Start_IT>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008ffe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a43      	ldr	r2, [pc, #268]	; (8009114 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8009006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e070      	b.n	8009102 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0208 	orr.w	r2, r2, #8
 800902e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009034:	2b01      	cmp	r3, #1
 8009036:	d002      	beq.n	800903e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	025b      	lsls	r3, r3, #9
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009046:	4618      	mov	r0, r3
 8009048:	f003 f8f6 	bl	800c238 <SDMMC_CmdBlockLength>
 800904c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00f      	beq.n	8009074 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a2e      	ldr	r2, [pc, #184]	; (8009114 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800905a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	431a      	orrs	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e046      	b.n	8009102 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009074:	f04f 33ff 	mov.w	r3, #4294967295
 8009078:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	025b      	lsls	r3, r3, #9
 800907e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009080:	2390      	movs	r3, #144	; 0x90
 8009082:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009084:	2302      	movs	r3, #2
 8009086:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009088:	2300      	movs	r3, #0
 800908a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800908c:	2301      	movs	r3, #1
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f107 0210 	add.w	r2, r7, #16
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f003 f8a0 	bl	800c1e0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d90a      	bls.n	80090bc <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2282      	movs	r2, #130	; 0x82
 80090aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090b2:	4618      	mov	r0, r3
 80090b4:	f003 f904 	bl	800c2c0 <SDMMC_CmdReadMultiBlock>
 80090b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090ba:	e009      	b.n	80090d0 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2281      	movs	r2, #129	; 0x81
 80090c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c8:	4618      	mov	r0, r3
 80090ca:	f003 f8d7 	bl	800c27c <SDMMC_CmdReadSingleBlock>
 80090ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d012      	beq.n	80090fc <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a0e      	ldr	r2, [pc, #56]	; (8009114 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80090dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	431a      	orrs	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e002      	b.n	8009102 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e000      	b.n	8009102 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8009100:	2302      	movs	r3, #2
  }
}
 8009102:	4618      	mov	r0, r3
 8009104:	3730      	adds	r7, #48	; 0x30
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	0800980b 	.word	0x0800980b
 8009110:	0800987d 	.word	0x0800987d
 8009114:	004005ff 	.word	0x004005ff

08009118 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08c      	sub	sp, #48	; 0x30
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d107      	bne.n	8009140 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009134:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e0cf      	b.n	80092e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b01      	cmp	r3, #1
 800914a:	f040 80c8 	bne.w	80092de <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	441a      	add	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800915e:	429a      	cmp	r2, r3
 8009160:	d907      	bls.n	8009172 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e0b6      	b.n	80092e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2203      	movs	r2, #3
 8009176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2200      	movs	r2, #0
 8009180:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 021a 	orr.w	r2, r2, #26
 8009190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	4a54      	ldr	r2, [pc, #336]	; (80092e8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	4a53      	ldr	r2, [pc, #332]	; (80092ec <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80091a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a6:	2200      	movs	r2, #0
 80091a8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d002      	beq.n	80091b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	025b      	lsls	r3, r3, #9
 80091b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80091c0:	4618      	mov	r0, r3
 80091c2:	f003 f839 	bl	800c238 <SDMMC_CmdBlockLength>
 80091c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00f      	beq.n	80091ee <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a47      	ldr	r2, [pc, #284]	; (80092f0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	431a      	orrs	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e078      	b.n	80092e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d90a      	bls.n	800920a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	22a0      	movs	r2, #160	; 0xa0
 80091f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009200:	4618      	mov	r0, r3
 8009202:	f003 f8a1 	bl	800c348 <SDMMC_CmdWriteMultiBlock>
 8009206:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009208:	e009      	b.n	800921e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2290      	movs	r2, #144	; 0x90
 800920e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009216:	4618      	mov	r0, r3
 8009218:	f003 f874 	bl	800c304 <SDMMC_CmdWriteSingleBlock>
 800921c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d012      	beq.n	800924a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a31      	ldr	r2, [pc, #196]	; (80092f0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800922a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	431a      	orrs	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e04a      	b.n	80092e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0208 	orr.w	r2, r2, #8
 8009258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3380      	adds	r3, #128	; 0x80
 8009266:	461a      	mov	r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	025b      	lsls	r3, r3, #9
 800926c:	089b      	lsrs	r3, r3, #2
 800926e:	f7fa fb07 	bl	8003880 <HAL_DMA_Start_IT>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01a      	beq.n	80092ae <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 021a 	bic.w	r2, r2, #26
 8009286:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a18      	ldr	r2, [pc, #96]	; (80092f0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800928e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e018      	b.n	80092e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092ae:	f04f 33ff 	mov.w	r3, #4294967295
 80092b2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	025b      	lsls	r3, r3, #9
 80092b8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80092ba:	2390      	movs	r3, #144	; 0x90
 80092bc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80092be:	2300      	movs	r3, #0
 80092c0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80092c6:	2301      	movs	r3, #1
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f107 0210 	add.w	r2, r7, #16
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f002 ff83 	bl	800c1e0 <SDMMC_ConfigData>

      return HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	e000      	b.n	80092e0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80092de:	2302      	movs	r3, #2
  }
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3730      	adds	r7, #48	; 0x30
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	080097e1 	.word	0x080097e1
 80092ec:	0800987d 	.word	0x0800987d
 80092f0:	004005ff 	.word	0x004005ff

080092f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009316:	0f9b      	lsrs	r3, r3, #30
 8009318:	b2da      	uxtb	r2, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009322:	0e9b      	lsrs	r3, r3, #26
 8009324:	b2db      	uxtb	r3, r3
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	b2da      	uxtb	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009334:	0e1b      	lsrs	r3, r3, #24
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 0303 	and.w	r3, r3, #3
 800933c:	b2da      	uxtb	r2, r3
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009346:	0c1b      	lsrs	r3, r3, #16
 8009348:	b2da      	uxtb	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	b2da      	uxtb	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935e:	b2da      	uxtb	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009368:	0d1b      	lsrs	r3, r3, #20
 800936a:	b29a      	uxth	r2, r3
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009374:	0c1b      	lsrs	r3, r3, #16
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 030f 	and.w	r3, r3, #15
 800937c:	b2da      	uxtb	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009386:	0bdb      	lsrs	r3, r3, #15
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009398:	0b9b      	lsrs	r3, r3, #14
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093aa:	0b5b      	lsrs	r3, r3, #13
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093bc:	0b1b      	lsrs	r3, r3, #12
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2200      	movs	r2, #0
 80093ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d163      	bne.n	80094a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093dc:	009a      	lsls	r2, r3, #2
 80093de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093e2:	4013      	ands	r3, r2
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80093e8:	0f92      	lsrs	r2, r2, #30
 80093ea:	431a      	orrs	r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f4:	0edb      	lsrs	r3, r3, #27
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009406:	0e1b      	lsrs	r3, r3, #24
 8009408:	b2db      	uxtb	r3, r3
 800940a:	f003 0307 	and.w	r3, r3, #7
 800940e:	b2da      	uxtb	r2, r3
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009418:	0d5b      	lsrs	r3, r3, #21
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	b2da      	uxtb	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800942a:	0c9b      	lsrs	r3, r3, #18
 800942c:	b2db      	uxtb	r3, r3
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	b2da      	uxtb	r2, r3
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943c:	0bdb      	lsrs	r3, r3, #15
 800943e:	b2db      	uxtb	r3, r3
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	b2da      	uxtb	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	7e1b      	ldrb	r3, [r3, #24]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	3302      	adds	r3, #2
 8009460:	2201      	movs	r2, #1
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800946a:	fb02 f203 	mul.w	r2, r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	7a1b      	ldrb	r3, [r3, #8]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f003 030f 	and.w	r3, r3, #15
 800947c:	2201      	movs	r2, #1
 800947e:	409a      	lsls	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800948c:	0a52      	lsrs	r2, r2, #9
 800948e:	fb02 f203 	mul.w	r2, r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
 800949e:	e031      	b.n	8009504 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d11d      	bne.n	80094e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ac:	041b      	lsls	r3, r3, #16
 80094ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	431a      	orrs	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	3301      	adds	r3, #1
 80094c4:	029a      	lsls	r2, r3, #10
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	661a      	str	r2, [r3, #96]	; 0x60
 80094e2:	e00f      	b.n	8009504 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a58      	ldr	r2, [pc, #352]	; (800964c <HAL_SD_GetCardCSD+0x344>)
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e09d      	b.n	8009640 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009508:	0b9b      	lsrs	r3, r3, #14
 800950a:	b2db      	uxtb	r3, r3
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	b2da      	uxtb	r2, r3
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800951a:	09db      	lsrs	r3, r3, #7
 800951c:	b2db      	uxtb	r3, r3
 800951e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009522:	b2da      	uxtb	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952c:	b2db      	uxtb	r3, r3
 800952e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009532:	b2da      	uxtb	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953c:	0fdb      	lsrs	r3, r3, #31
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009548:	0f5b      	lsrs	r3, r3, #29
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f003 0303 	and.w	r3, r3, #3
 8009550:	b2da      	uxtb	r2, r3
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955a:	0e9b      	lsrs	r3, r3, #26
 800955c:	b2db      	uxtb	r3, r3
 800955e:	f003 0307 	and.w	r3, r3, #7
 8009562:	b2da      	uxtb	r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956c:	0d9b      	lsrs	r3, r3, #22
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 030f 	and.w	r3, r3, #15
 8009574:	b2da      	uxtb	r2, r3
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957e:	0d5b      	lsrs	r3, r3, #21
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959a:	0c1b      	lsrs	r3, r3, #16
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	0bdb      	lsrs	r3, r3, #15
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c2:	0b9b      	lsrs	r3, r3, #14
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d6:	0b5b      	lsrs	r3, r3, #13
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	0b1b      	lsrs	r3, r3, #12
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fe:	0a9b      	lsrs	r3, r3, #10
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	b2da      	uxtb	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009626:	085b      	lsrs	r3, r3, #1
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962e:	b2da      	uxtb	r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	004005ff 	.word	0x004005ff

08009650 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80096a8:	b5b0      	push	{r4, r5, r7, lr}
 80096aa:	b08e      	sub	sp, #56	; 0x38
 80096ac:	af04      	add	r7, sp, #16
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2203      	movs	r2, #3
 80096b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d02e      	beq.n	8009720 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c8:	d106      	bne.n	80096d8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38
 80096d6:	e029      	b.n	800972c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096de:	d10a      	bne.n	80096f6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 faa1 	bl	8009c28 <SD_WideBus_Enable>
 80096e6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	431a      	orrs	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	639a      	str	r2, [r3, #56]	; 0x38
 80096f4:	e01a      	b.n	800972c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10a      	bne.n	8009712 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fade 	bl	8009cbe <SD_WideBus_Disable>
 8009702:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
 8009710:	e00c      	b.n	800972c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	639a      	str	r2, [r3, #56]	; 0x38
 800971e:	e005      	b.n	800972c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009730:	2b00      	cmp	r3, #0
 8009732:	d009      	beq.n	8009748 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a18      	ldr	r2, [pc, #96]	; (800979c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800973a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e024      	b.n	8009792 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681d      	ldr	r5, [r3, #0]
 800976e:	466c      	mov	r4, sp
 8009770:	f107 0318 	add.w	r3, r7, #24
 8009774:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009778:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800977c:	f107 030c 	add.w	r3, r7, #12
 8009780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009782:	4628      	mov	r0, r5
 8009784:	f002 fc8c 	bl	800c0a0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3728      	adds	r7, #40	; 0x28
 8009796:	46bd      	mov	sp, r7
 8009798:	bdb0      	pop	{r4, r5, r7, pc}
 800979a:	bf00      	nop
 800979c:	004005ff 	.word	0x004005ff

080097a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80097ac:	f107 030c 	add.w	r3, r7, #12
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa10 	bl	8009bd8 <SD_SendStatus>
 80097b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	431a      	orrs	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	0a5b      	lsrs	r3, r3, #9
 80097d0:	f003 030f 	and.w	r3, r3, #15
 80097d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80097d6:	693b      	ldr	r3, [r7, #16]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80097fe:	bf00      	nop
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	2b82      	cmp	r3, #130	; 0x82
 800981e:	d111      	bne.n	8009844 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4618      	mov	r0, r3
 8009826:	f002 fdb1 	bl	800c38c <SDMMC_CmdStopTransfer>
 800982a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d008      	beq.n	8009844 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	431a      	orrs	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fd58 	bl	80092f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0208 	bic.w	r2, r2, #8
 8009852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f240 523a 	movw	r2, #1338	; 0x53a
 800985c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f004 f92d 	bl	800dacc <HAL_SD_RxCpltCallback>
#endif
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7fa f87a 	bl	8003984 <HAL_DMA_GetError>
 8009890:	4603      	mov	r3, r0
 8009892:	2b02      	cmp	r3, #2
 8009894:	d03e      	beq.n	8009914 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d002      	beq.n	80098b2 <SD_DMAError+0x36>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d12d      	bne.n	800990e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a19      	ldr	r2, [pc, #100]	; (800991c <SD_DMAError+0xa0>)
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80098c8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80098d6:	6978      	ldr	r0, [r7, #20]
 80098d8:	f7ff ff62 	bl	80097a0 <HAL_SD_GetCardState>
 80098dc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b06      	cmp	r3, #6
 80098e2:	d002      	beq.n	80098ea <SD_DMAError+0x6e>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2b05      	cmp	r3, #5
 80098e8:	d10a      	bne.n	8009900 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f002 fd4c 	bl	800c38c <SDMMC_CmdStopTransfer>
 80098f4:	4602      	mov	r2, r0
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	431a      	orrs	r2, r3
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2200      	movs	r2, #0
 800990c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800990e:	6978      	ldr	r0, [r7, #20]
 8009910:	f7ff fcf0 	bl	80092f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009914:	bf00      	nop
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	004005ff 	.word	0x004005ff

08009920 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009920:	b5b0      	push	{r4, r5, r7, lr}
 8009922:	b094      	sub	sp, #80	; 0x50
 8009924:	af04      	add	r7, sp, #16
 8009926:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009928:	2301      	movs	r3, #1
 800992a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f002 fbfd 	bl	800c130 <SDMMC_GetPowerState>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800993c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009940:	e0b7      	b.n	8009ab2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	2b03      	cmp	r3, #3
 8009948:	d02f      	beq.n	80099aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f002 fe27 	bl	800c5a2 <SDMMC_CmdSendCID>
 8009954:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <SD_InitCard+0x40>
    {
      return errorstate;
 800995c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995e:	e0a8      	b.n	8009ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f002 fc27 	bl	800c1ba <SDMMC_GetResponse>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2104      	movs	r1, #4
 8009978:	4618      	mov	r0, r3
 800997a:	f002 fc1e 	bl	800c1ba <SDMMC_GetResponse>
 800997e:	4602      	mov	r2, r0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2108      	movs	r1, #8
 800998a:	4618      	mov	r0, r3
 800998c:	f002 fc15 	bl	800c1ba <SDMMC_GetResponse>
 8009990:	4602      	mov	r2, r0
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	210c      	movs	r1, #12
 800999c:	4618      	mov	r0, r3
 800999e:	f002 fc0c 	bl	800c1ba <SDMMC_GetResponse>
 80099a2:	4602      	mov	r2, r0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d00d      	beq.n	80099ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f107 020e 	add.w	r2, r7, #14
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f002 fe2d 	bl	800c61c <SDMMC_CmdSetRelAdd>
 80099c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <SD_InitCard+0xae>
    {
      return errorstate;
 80099ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099cc:	e071      	b.n	8009ab2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d036      	beq.n	8009a44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80099d6:	89fb      	ldrh	r3, [r7, #14]
 80099d8:	461a      	mov	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e6:	041b      	lsls	r3, r3, #16
 80099e8:	4619      	mov	r1, r3
 80099ea:	4610      	mov	r0, r2
 80099ec:	f002 fdf7 	bl	800c5de <SDMMC_CmdSendCSD>
 80099f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80099f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fa:	e05a      	b.n	8009ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2100      	movs	r1, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f002 fbd9 	bl	800c1ba <SDMMC_GetResponse>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2104      	movs	r1, #4
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 fbd0 	bl	800c1ba <SDMMC_GetResponse>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2108      	movs	r1, #8
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 fbc7 	bl	800c1ba <SDMMC_GetResponse>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	210c      	movs	r1, #12
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 fbbe 	bl	800c1ba <SDMMC_GetResponse>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2104      	movs	r1, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f002 fbb5 	bl	800c1ba <SDMMC_GetResponse>
 8009a50:	4603      	mov	r3, r0
 8009a52:	0d1a      	lsrs	r2, r3, #20
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a58:	f107 0310 	add.w	r3, r7, #16
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff fc52 	bl	8009308 <HAL_SD_GetCardCSD>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a6e:	e020      	b.n	8009ab2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6819      	ldr	r1, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a78:	041b      	lsls	r3, r3, #16
 8009a7a:	f04f 0400 	mov.w	r4, #0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	4623      	mov	r3, r4
 8009a82:	4608      	mov	r0, r1
 8009a84:	f002 fca4 	bl	800c3d0 <SDMMC_CmdSelDesel>
 8009a88:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <SD_InitCard+0x174>
  {
    return errorstate;
 8009a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a92:	e00e      	b.n	8009ab2 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681d      	ldr	r5, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	466c      	mov	r4, sp
 8009a9c:	f103 0210 	add.w	r2, r3, #16
 8009aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8009aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f002 faf8 	bl	800c0a0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3740      	adds	r7, #64	; 0x40
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009abc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	2300      	movs	r3, #0
 8009ace:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 fc9e 	bl	800c416 <SDMMC_CmdGoIdleState>
 8009ada:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e072      	b.n	8009bcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fcb1 	bl	800c452 <SDMMC_CmdOperCond>
 8009af0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00d      	beq.n	8009b14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 fc87 	bl	800c416 <SDMMC_CmdGoIdleState>
 8009b08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	e05b      	b.n	8009bcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d137      	bne.n	8009b92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2100      	movs	r1, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 fcb1 	bl	800c490 <SDMMC_CmdAppCommand>
 8009b2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d02d      	beq.n	8009b92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b3a:	e047      	b.n	8009bcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f002 fca4 	bl	800c490 <SDMMC_CmdAppCommand>
 8009b48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <SD_PowerON+0x98>
    {
      return errorstate;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	e03b      	b.n	8009bcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	491e      	ldr	r1, [pc, #120]	; (8009bd4 <SD_PowerON+0x118>)
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f002 fcba 	bl	800c4d4 <SDMMC_CmdAppOperCommand>
 8009b60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b6c:	e02e      	b.n	8009bcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f002 fb20 	bl	800c1ba <SDMMC_GetResponse>
 8009b7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	0fdb      	lsrs	r3, r3, #31
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d101      	bne.n	8009b88 <SD_PowerON+0xcc>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <SD_PowerON+0xce>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	613b      	str	r3, [r7, #16]

    count++;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d802      	bhi.n	8009ba2 <SD_PowerON+0xe6>
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0cc      	beq.n	8009b3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d902      	bls.n	8009bb2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bb0:	e00c      	b.n	8009bcc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8009bc2:	e002      	b.n	8009bca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	c1100000 	.word	0xc1100000

08009bd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bec:	e018      	b.n	8009c20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f002 fd2f 	bl	800c65e <SDMMC_CmdSendStatus>
 8009c00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	e009      	b.n	8009c20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2100      	movs	r1, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f002 fad1 	bl	800c1ba <SDMMC_GetResponse>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c30:	2300      	movs	r3, #0
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	2300      	movs	r3, #0
 8009c36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f002 fabb 	bl	800c1ba <SDMMC_GetResponse>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c4e:	d102      	bne.n	8009c56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c54:	e02f      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c56:	f107 030c 	add.w	r3, r7, #12
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f879 	bl	8009d54 <SD_FindSCR>
 8009c62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	e023      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01c      	beq.n	8009cb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	041b      	lsls	r3, r3, #16
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f002 fc03 	bl	800c490 <SDMMC_CmdAppCommand>
 8009c8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	e00f      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2102      	movs	r1, #2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f002 fc3d 	bl	800c51c <SDMMC_CmdBusWidth>
 8009ca2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	e003      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e001      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b086      	sub	sp, #24
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f002 fa70 	bl	800c1ba <SDMMC_GetResponse>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ce4:	d102      	bne.n	8009cec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cea:	e02f      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009cec:	f107 030c 	add.w	r3, r7, #12
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f82e 	bl	8009d54 <SD_FindSCR>
 8009cf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	e023      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01c      	beq.n	8009d48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d16:	041b      	lsls	r3, r3, #16
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f002 fbb8 	bl	800c490 <SDMMC_CmdAppCommand>
 8009d20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	e00f      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f002 fbf2 	bl	800c51c <SDMMC_CmdBusWidth>
 8009d38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	e003      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d44:	2300      	movs	r3, #0
 8009d46:	e001      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009d54:	b590      	push	{r4, r7, lr}
 8009d56:	b08f      	sub	sp, #60	; 0x3c
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d5e:	f7f9 f893 	bl	8002e88 <HAL_GetTick>
 8009d62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60bb      	str	r3, [r7, #8]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2108      	movs	r1, #8
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f002 fa5c 	bl	800c238 <SDMMC_CmdBlockLength>
 8009d80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	e0a9      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d94:	041b      	lsls	r3, r3, #16
 8009d96:	4619      	mov	r1, r3
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f002 fb79 	bl	800c490 <SDMMC_CmdAppCommand>
 8009d9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <SD_FindSCR+0x56>
  {
    return errorstate;
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	e09a      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009daa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009db0:	2308      	movs	r3, #8
 8009db2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009db4:	2330      	movs	r3, #48	; 0x30
 8009db6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009db8:	2302      	movs	r3, #2
 8009dba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f107 0210 	add.w	r2, r7, #16
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f002 fa06 	bl	800c1e0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f002 fbc1 	bl	800c560 <SDMMC_CmdSendSCR>
 8009dde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d022      	beq.n	8009e2c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	e07a      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00e      	beq.n	8009e16 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6819      	ldr	r1, [r3, #0]
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	f107 0208 	add.w	r2, r7, #8
 8009e04:	18d4      	adds	r4, r2, r3
 8009e06:	4608      	mov	r0, r1
 8009e08:	f002 f976 	bl	800c0f8 <SDMMC_ReadFIFO>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	6023      	str	r3, [r4, #0]
      index++;
 8009e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e12:	3301      	adds	r3, #1
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e16:	f7f9 f837 	bl	8002e88 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e24:	d102      	bne.n	8009e2c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e2a:	e059      	b.n	8009ee0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e32:	f240 432a 	movw	r3, #1066	; 0x42a
 8009e36:	4013      	ands	r3, r2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0d6      	beq.n	8009dea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2208      	movs	r2, #8
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e52:	2308      	movs	r3, #8
 8009e54:	e044      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e037      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2220      	movs	r2, #32
 8009e84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009e86:	2320      	movs	r3, #32
 8009e88:	e02a      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	061a      	lsls	r2, r3, #24
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	021b      	lsls	r3, r3, #8
 8009e9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ea0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	0a1b      	lsrs	r3, r3, #8
 8009ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009eaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	0e1b      	lsrs	r3, r3, #24
 8009eb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	601a      	str	r2, [r3, #0]
    scr++;
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb8:	3304      	adds	r3, #4
 8009eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	061a      	lsls	r2, r3, #24
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ec8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	0a1b      	lsrs	r3, r3, #8
 8009ece:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ed2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	0e1b      	lsrs	r3, r3, #24
 8009ed8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009edc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	373c      	adds	r7, #60	; 0x3c
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd90      	pop	{r4, r7, pc}

08009ee8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e025      	b.n	8009f48 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7f6 feed 	bl	8000cf0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f001 ffc7 	bl	800bebc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	f002 f831 	bl	800bfa0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e04c      	b.n	8009ffc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7f7 ffd0 	bl	8001f1c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0203 	bic.w	r2, r2, #3
 8009f92:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4b19      	ldr	r3, [pc, #100]	; (800a004 <HAL_SPDIFRX_Init+0xb4>)
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009fac:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009fb2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009fb8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009fbe:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009fc4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009fca:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009fd0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009fd6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009fdc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	fff88407 	.word	0xfff88407

0800a008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e084      	b.n	800a124 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7f7 fff1 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2202      	movs	r2, #2
 800a03e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a050:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a05a:	d902      	bls.n	800a062 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	e002      	b.n	800a068 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a066:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a070:	d007      	beq.n	800a082 <HAL_SPI_Init+0x7a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a07a:	d002      	beq.n	800a082 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a092:	d903      	bls.n	800a09c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
 800a09a:	e002      	b.n	800a0a2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	ea42 0103 	orr.w	r1, r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	0c1b      	lsrs	r3, r3, #16
 800a0e2:	f003 0204 	and.w	r2, r3, #4
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	ea42 0103 	orr.w	r1, r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	430a      	orrs	r2, r1
 800a102:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	69da      	ldr	r2, [r3, #28]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a112:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e01d      	b.n	800a17a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d106      	bne.n	800a158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7f8 fbf6 	bl	8002944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3304      	adds	r3, #4
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	f000 fb78 	bl	800a860 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <HAL_TIM_Base_Start_IT+0x50>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b06      	cmp	r3, #6
 800a1ac:	d00b      	beq.n	800a1c6 <HAL_TIM_Base_Start_IT+0x42>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1b4:	d007      	beq.n	800a1c6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f042 0201 	orr.w	r2, r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	00010007 	.word	0x00010007

0800a1d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e01d      	b.n	800a226 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7f8 fc0e 	bl	8002a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f000 fb22 	bl	800a860 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b02      	cmp	r3, #2
 800a242:	d122      	bne.n	800a28a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f003 0302 	and.w	r3, r3, #2
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d11b      	bne.n	800a28a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f06f 0202 	mvn.w	r2, #2
 800a25a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fad7 	bl	800a824 <HAL_TIM_IC_CaptureCallback>
 800a276:	e005      	b.n	800a284 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fac9 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fada 	bl	800a838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	f003 0304 	and.w	r3, r3, #4
 800a294:	2b04      	cmp	r3, #4
 800a296:	d122      	bne.n	800a2de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f003 0304 	and.w	r3, r3, #4
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d11b      	bne.n	800a2de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f06f 0204 	mvn.w	r2, #4
 800a2ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d003      	beq.n	800a2cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 faad 	bl	800a824 <HAL_TIM_IC_CaptureCallback>
 800a2ca:	e005      	b.n	800a2d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fa9f 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fab0 	bl	800a838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	f003 0308 	and.w	r3, r3, #8
 800a2e8:	2b08      	cmp	r3, #8
 800a2ea:	d122      	bne.n	800a332 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	f003 0308 	and.w	r3, r3, #8
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	d11b      	bne.n	800a332 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f06f 0208 	mvn.w	r2, #8
 800a302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2204      	movs	r2, #4
 800a308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d003      	beq.n	800a320 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fa83 	bl	800a824 <HAL_TIM_IC_CaptureCallback>
 800a31e:	e005      	b.n	800a32c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fa75 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa86 	bl	800a838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f003 0310 	and.w	r3, r3, #16
 800a33c:	2b10      	cmp	r3, #16
 800a33e:	d122      	bne.n	800a386 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f003 0310 	and.w	r3, r3, #16
 800a34a:	2b10      	cmp	r3, #16
 800a34c:	d11b      	bne.n	800a386 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f06f 0210 	mvn.w	r2, #16
 800a356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2208      	movs	r2, #8
 800a35c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa59 	bl	800a824 <HAL_TIM_IC_CaptureCallback>
 800a372:	e005      	b.n	800a380 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fa4b 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa5c 	bl	800a838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b01      	cmp	r3, #1
 800a392:	d10e      	bne.n	800a3b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d107      	bne.n	800a3b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f06f 0201 	mvn.w	r2, #1
 800a3aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7f7 fa5b 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3bc:	2b80      	cmp	r3, #128	; 0x80
 800a3be:	d10e      	bne.n	800a3de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ca:	2b80      	cmp	r3, #128	; 0x80
 800a3cc:	d107      	bne.n	800a3de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 feef 	bl	800b1bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ec:	d10e      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f8:	2b80      	cmp	r3, #128	; 0x80
 800a3fa:	d107      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fee2 	bl	800b1d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d10e      	bne.n	800a438 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a424:	2b40      	cmp	r3, #64	; 0x40
 800a426:	d107      	bne.n	800a438 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fa0a 	bl	800a84c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b20      	cmp	r3, #32
 800a444:	d10e      	bne.n	800a464 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f003 0320 	and.w	r3, r3, #32
 800a450:	2b20      	cmp	r3, #32
 800a452:	d107      	bne.n	800a464 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f06f 0220 	mvn.w	r2, #32
 800a45c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fea2 	bl	800b1a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d101      	bne.n	800a486 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a482:	2302      	movs	r3, #2
 800a484:	e105      	b.n	800a692 <HAL_TIM_PWM_ConfigChannel+0x226>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2202      	movs	r2, #2
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b14      	cmp	r3, #20
 800a49a:	f200 80f0 	bhi.w	800a67e <HAL_TIM_PWM_ConfigChannel+0x212>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a67f 	.word	0x0800a67f
 800a4ac:	0800a67f 	.word	0x0800a67f
 800a4b0:	0800a67f 	.word	0x0800a67f
 800a4b4:	0800a539 	.word	0x0800a539
 800a4b8:	0800a67f 	.word	0x0800a67f
 800a4bc:	0800a67f 	.word	0x0800a67f
 800a4c0:	0800a67f 	.word	0x0800a67f
 800a4c4:	0800a57b 	.word	0x0800a57b
 800a4c8:	0800a67f 	.word	0x0800a67f
 800a4cc:	0800a67f 	.word	0x0800a67f
 800a4d0:	0800a67f 	.word	0x0800a67f
 800a4d4:	0800a5bb 	.word	0x0800a5bb
 800a4d8:	0800a67f 	.word	0x0800a67f
 800a4dc:	0800a67f 	.word	0x0800a67f
 800a4e0:	0800a67f 	.word	0x0800a67f
 800a4e4:	0800a5fd 	.word	0x0800a5fd
 800a4e8:	0800a67f 	.word	0x0800a67f
 800a4ec:	0800a67f 	.word	0x0800a67f
 800a4f0:	0800a67f 	.word	0x0800a67f
 800a4f4:	0800a63d 	.word	0x0800a63d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fa4e 	bl	800a9a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0208 	orr.w	r2, r2, #8
 800a512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	699a      	ldr	r2, [r3, #24]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0204 	bic.w	r2, r2, #4
 800a522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6999      	ldr	r1, [r3, #24]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	619a      	str	r2, [r3, #24]
      break;
 800a536:	e0a3      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68b9      	ldr	r1, [r7, #8]
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 faa0 	bl	800aa84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6999      	ldr	r1, [r3, #24]
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	021a      	lsls	r2, r3, #8
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	430a      	orrs	r2, r1
 800a576:	619a      	str	r2, [r3, #24]
      break;
 800a578:	e082      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68b9      	ldr	r1, [r7, #8]
 800a580:	4618      	mov	r0, r3
 800a582:	f000 faf7 	bl	800ab74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f042 0208 	orr.w	r2, r2, #8
 800a594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69da      	ldr	r2, [r3, #28]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f022 0204 	bic.w	r2, r2, #4
 800a5a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69d9      	ldr	r1, [r3, #28]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	691a      	ldr	r2, [r3, #16]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	61da      	str	r2, [r3, #28]
      break;
 800a5b8:	e062      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68b9      	ldr	r1, [r7, #8]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fb4d 	bl	800ac60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	69da      	ldr	r2, [r3, #28]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69da      	ldr	r2, [r3, #28]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69d9      	ldr	r1, [r3, #28]
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	021a      	lsls	r2, r3, #8
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	61da      	str	r2, [r3, #28]
      break;
 800a5fa:	e041      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fb84 	bl	800ad10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0208 	orr.w	r2, r2, #8
 800a616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f022 0204 	bic.w	r2, r2, #4
 800a626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691a      	ldr	r2, [r3, #16]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a63a:	e021      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fbb6 	bl	800adb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	021a      	lsls	r2, r3, #8
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	430a      	orrs	r2, r1
 800a67a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a67c:	e000      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a67e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop

0800a69c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d101      	bne.n	800a6b4 <HAL_TIM_ConfigClockSource+0x18>
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	e0a6      	b.n	800a802 <HAL_TIM_ConfigClockSource+0x166>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4b4f      	ldr	r3, [pc, #316]	; (800a80c <HAL_TIM_ConfigClockSource+0x170>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b40      	cmp	r3, #64	; 0x40
 800a6ea:	d067      	beq.n	800a7bc <HAL_TIM_ConfigClockSource+0x120>
 800a6ec:	2b40      	cmp	r3, #64	; 0x40
 800a6ee:	d80b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x6c>
 800a6f0:	2b10      	cmp	r3, #16
 800a6f2:	d073      	beq.n	800a7dc <HAL_TIM_ConfigClockSource+0x140>
 800a6f4:	2b10      	cmp	r3, #16
 800a6f6:	d802      	bhi.n	800a6fe <HAL_TIM_ConfigClockSource+0x62>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d06f      	beq.n	800a7dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a6fc:	e078      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a6fe:	2b20      	cmp	r3, #32
 800a700:	d06c      	beq.n	800a7dc <HAL_TIM_ConfigClockSource+0x140>
 800a702:	2b30      	cmp	r3, #48	; 0x30
 800a704:	d06a      	beq.n	800a7dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a706:	e073      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a708:	2b70      	cmp	r3, #112	; 0x70
 800a70a:	d00d      	beq.n	800a728 <HAL_TIM_ConfigClockSource+0x8c>
 800a70c:	2b70      	cmp	r3, #112	; 0x70
 800a70e:	d804      	bhi.n	800a71a <HAL_TIM_ConfigClockSource+0x7e>
 800a710:	2b50      	cmp	r3, #80	; 0x50
 800a712:	d033      	beq.n	800a77c <HAL_TIM_ConfigClockSource+0xe0>
 800a714:	2b60      	cmp	r3, #96	; 0x60
 800a716:	d041      	beq.n	800a79c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a718:	e06a      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a71a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a71e:	d066      	beq.n	800a7ee <HAL_TIM_ConfigClockSource+0x152>
 800a720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a724:	d017      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a726:	e063      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	6899      	ldr	r1, [r3, #8]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f000 fc0a 	bl	800af50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a74a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	609a      	str	r2, [r3, #8]
      break;
 800a754:	e04c      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6899      	ldr	r1, [r3, #8]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f000 fbf3 	bl	800af50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a778:	609a      	str	r2, [r3, #8]
      break;
 800a77a:	e039      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6818      	ldr	r0, [r3, #0]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	6859      	ldr	r1, [r3, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	461a      	mov	r2, r3
 800a78a:	f000 fb67 	bl	800ae5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2150      	movs	r1, #80	; 0x50
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fbc0 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800a79a:	e029      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	6859      	ldr	r1, [r3, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	f000 fb86 	bl	800aeba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2160      	movs	r1, #96	; 0x60
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 fbb0 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800a7ba:	e019      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	6859      	ldr	r1, [r3, #4]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	f000 fb47 	bl	800ae5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2140      	movs	r1, #64	; 0x40
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 fba0 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800a7da:	e009      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f000 fb97 	bl	800af1a <TIM_ITRx_SetConfig>
      break;
 800a7ec:	e000      	b.n	800a7f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a7ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	fffeff88 	.word	0xfffeff88

0800a810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a40      	ldr	r2, [pc, #256]	; (800a974 <TIM_Base_SetConfig+0x114>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d013      	beq.n	800a8a0 <TIM_Base_SetConfig+0x40>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a87e:	d00f      	beq.n	800a8a0 <TIM_Base_SetConfig+0x40>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a3d      	ldr	r2, [pc, #244]	; (800a978 <TIM_Base_SetConfig+0x118>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d00b      	beq.n	800a8a0 <TIM_Base_SetConfig+0x40>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a3c      	ldr	r2, [pc, #240]	; (800a97c <TIM_Base_SetConfig+0x11c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d007      	beq.n	800a8a0 <TIM_Base_SetConfig+0x40>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a3b      	ldr	r2, [pc, #236]	; (800a980 <TIM_Base_SetConfig+0x120>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d003      	beq.n	800a8a0 <TIM_Base_SetConfig+0x40>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a3a      	ldr	r2, [pc, #232]	; (800a984 <TIM_Base_SetConfig+0x124>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d108      	bne.n	800a8b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a2f      	ldr	r2, [pc, #188]	; (800a974 <TIM_Base_SetConfig+0x114>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d02b      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c0:	d027      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a2c      	ldr	r2, [pc, #176]	; (800a978 <TIM_Base_SetConfig+0x118>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d023      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a2b      	ldr	r2, [pc, #172]	; (800a97c <TIM_Base_SetConfig+0x11c>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d01f      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a2a      	ldr	r2, [pc, #168]	; (800a980 <TIM_Base_SetConfig+0x120>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d01b      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a29      	ldr	r2, [pc, #164]	; (800a984 <TIM_Base_SetConfig+0x124>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d017      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a28      	ldr	r2, [pc, #160]	; (800a988 <TIM_Base_SetConfig+0x128>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d013      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a27      	ldr	r2, [pc, #156]	; (800a98c <TIM_Base_SetConfig+0x12c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d00f      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a26      	ldr	r2, [pc, #152]	; (800a990 <TIM_Base_SetConfig+0x130>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d00b      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a25      	ldr	r2, [pc, #148]	; (800a994 <TIM_Base_SetConfig+0x134>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d007      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a24      	ldr	r2, [pc, #144]	; (800a998 <TIM_Base_SetConfig+0x138>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d003      	beq.n	800a912 <TIM_Base_SetConfig+0xb2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a23      	ldr	r2, [pc, #140]	; (800a99c <TIM_Base_SetConfig+0x13c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d108      	bne.n	800a924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	4313      	orrs	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	689a      	ldr	r2, [r3, #8]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a0a      	ldr	r2, [pc, #40]	; (800a974 <TIM_Base_SetConfig+0x114>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d003      	beq.n	800a958 <TIM_Base_SetConfig+0xf8>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a0c      	ldr	r2, [pc, #48]	; (800a984 <TIM_Base_SetConfig+0x124>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d103      	bne.n	800a960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	691a      	ldr	r2, [r3, #16]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	615a      	str	r2, [r3, #20]
}
 800a966:	bf00      	nop
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	40010000 	.word	0x40010000
 800a978:	40000400 	.word	0x40000400
 800a97c:	40000800 	.word	0x40000800
 800a980:	40000c00 	.word	0x40000c00
 800a984:	40010400 	.word	0x40010400
 800a988:	40014000 	.word	0x40014000
 800a98c:	40014400 	.word	0x40014400
 800a990:	40014800 	.word	0x40014800
 800a994:	40001800 	.word	0x40001800
 800a998:	40001c00 	.word	0x40001c00
 800a99c:	40002000 	.word	0x40002000

0800a9a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	f023 0201 	bic.w	r2, r3, #1
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	4b2b      	ldr	r3, [pc, #172]	; (800aa78 <TIM_OC1_SetConfig+0xd8>)
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f023 0303 	bic.w	r3, r3, #3
 800a9d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f023 0302 	bic.w	r3, r3, #2
 800a9e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a21      	ldr	r2, [pc, #132]	; (800aa7c <TIM_OC1_SetConfig+0xdc>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d003      	beq.n	800aa04 <TIM_OC1_SetConfig+0x64>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a20      	ldr	r2, [pc, #128]	; (800aa80 <TIM_OC1_SetConfig+0xe0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d10c      	bne.n	800aa1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f023 0308 	bic.w	r3, r3, #8
 800aa0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 0304 	bic.w	r3, r3, #4
 800aa1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a16      	ldr	r2, [pc, #88]	; (800aa7c <TIM_OC1_SetConfig+0xdc>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d003      	beq.n	800aa2e <TIM_OC1_SetConfig+0x8e>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a15      	ldr	r2, [pc, #84]	; (800aa80 <TIM_OC1_SetConfig+0xe0>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d111      	bne.n	800aa52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	621a      	str	r2, [r3, #32]
}
 800aa6c:	bf00      	nop
 800aa6e:	371c      	adds	r7, #28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	fffeff8f 	.word	0xfffeff8f
 800aa7c:	40010000 	.word	0x40010000
 800aa80:	40010400 	.word	0x40010400

0800aa84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	f023 0210 	bic.w	r2, r3, #16
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4b2e      	ldr	r3, [pc, #184]	; (800ab68 <TIM_OC2_SetConfig+0xe4>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	021b      	lsls	r3, r3, #8
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f023 0320 	bic.w	r3, r3, #32
 800aace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	011b      	lsls	r3, r3, #4
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4313      	orrs	r3, r2
 800aada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a23      	ldr	r2, [pc, #140]	; (800ab6c <TIM_OC2_SetConfig+0xe8>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_OC2_SetConfig+0x68>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a22      	ldr	r2, [pc, #136]	; (800ab70 <TIM_OC2_SetConfig+0xec>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d10d      	bne.n	800ab08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a18      	ldr	r2, [pc, #96]	; (800ab6c <TIM_OC2_SetConfig+0xe8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d003      	beq.n	800ab18 <TIM_OC2_SetConfig+0x94>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a17      	ldr	r2, [pc, #92]	; (800ab70 <TIM_OC2_SetConfig+0xec>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d113      	bne.n	800ab40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	621a      	str	r2, [r3, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	feff8fff 	.word	0xfeff8fff
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40010400 	.word	0x40010400

0800ab74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4b2d      	ldr	r3, [pc, #180]	; (800ac54 <TIM_OC3_SetConfig+0xe0>)
 800aba0:	4013      	ands	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 0303 	bic.w	r3, r3, #3
 800abaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	021b      	lsls	r3, r3, #8
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a22      	ldr	r2, [pc, #136]	; (800ac58 <TIM_OC3_SetConfig+0xe4>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <TIM_OC3_SetConfig+0x66>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a21      	ldr	r2, [pc, #132]	; (800ac5c <TIM_OC3_SetConfig+0xe8>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d10d      	bne.n	800abf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	021b      	lsls	r3, r3, #8
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a17      	ldr	r2, [pc, #92]	; (800ac58 <TIM_OC3_SetConfig+0xe4>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d003      	beq.n	800ac06 <TIM_OC3_SetConfig+0x92>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a16      	ldr	r2, [pc, #88]	; (800ac5c <TIM_OC3_SetConfig+0xe8>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d113      	bne.n	800ac2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	621a      	str	r2, [r3, #32]
}
 800ac48:	bf00      	nop
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	fffeff8f 	.word	0xfffeff8f
 800ac58:	40010000 	.word	0x40010000
 800ac5c:	40010400 	.word	0x40010400

0800ac60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4b1e      	ldr	r3, [pc, #120]	; (800ad04 <TIM_OC4_SetConfig+0xa4>)
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	021b      	lsls	r3, r3, #8
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	031b      	lsls	r3, r3, #12
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a13      	ldr	r2, [pc, #76]	; (800ad08 <TIM_OC4_SetConfig+0xa8>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d003      	beq.n	800acc8 <TIM_OC4_SetConfig+0x68>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a12      	ldr	r2, [pc, #72]	; (800ad0c <TIM_OC4_SetConfig+0xac>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d109      	bne.n	800acdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	019b      	lsls	r3, r3, #6
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	4313      	orrs	r3, r2
 800acda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	621a      	str	r2, [r3, #32]
}
 800acf6:	bf00      	nop
 800acf8:	371c      	adds	r7, #28
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	feff8fff 	.word	0xfeff8fff
 800ad08:	40010000 	.word	0x40010000
 800ad0c:	40010400 	.word	0x40010400

0800ad10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <TIM_OC5_SetConfig+0x98>)
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	041b      	lsls	r3, r3, #16
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a12      	ldr	r2, [pc, #72]	; (800adac <TIM_OC5_SetConfig+0x9c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d003      	beq.n	800ad6e <TIM_OC5_SetConfig+0x5e>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a11      	ldr	r2, [pc, #68]	; (800adb0 <TIM_OC5_SetConfig+0xa0>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d109      	bne.n	800ad82 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	021b      	lsls	r3, r3, #8
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	621a      	str	r2, [r3, #32]
}
 800ad9c:	bf00      	nop
 800ad9e:	371c      	adds	r7, #28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	fffeff8f 	.word	0xfffeff8f
 800adac:	40010000 	.word	0x40010000
 800adb0:	40010400 	.word	0x40010400

0800adb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4b1c      	ldr	r3, [pc, #112]	; (800ae50 <TIM_OC6_SetConfig+0x9c>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	4313      	orrs	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	051b      	lsls	r3, r3, #20
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a13      	ldr	r2, [pc, #76]	; (800ae54 <TIM_OC6_SetConfig+0xa0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d003      	beq.n	800ae14 <TIM_OC6_SetConfig+0x60>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a12      	ldr	r2, [pc, #72]	; (800ae58 <TIM_OC6_SetConfig+0xa4>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d109      	bne.n	800ae28 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	029b      	lsls	r3, r3, #10
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	621a      	str	r2, [r3, #32]
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	feff8fff 	.word	0xfeff8fff
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40010400 	.word	0x40010400

0800ae5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	f023 0201 	bic.w	r2, r3, #1
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	011b      	lsls	r3, r3, #4
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f023 030a 	bic.w	r3, r3, #10
 800ae98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	621a      	str	r2, [r3, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	371c      	adds	r7, #28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b087      	sub	sp, #28
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	f023 0210 	bic.w	r2, r3, #16
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6a1b      	ldr	r3, [r3, #32]
 800aedc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	031b      	lsls	r3, r3, #12
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	4313      	orrs	r3, r2
 800af00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	621a      	str	r2, [r3, #32]
}
 800af0e:	bf00      	nop
 800af10:	371c      	adds	r7, #28
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b085      	sub	sp, #20
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	f043 0307 	orr.w	r3, r3, #7
 800af3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	609a      	str	r2, [r3, #8]
}
 800af44:	bf00      	nop
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	021a      	lsls	r2, r3, #8
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	431a      	orrs	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4313      	orrs	r3, r2
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	609a      	str	r2, [r3, #8]
}
 800af84:	bf00      	nop
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d101      	bne.n	800afa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afa4:	2302      	movs	r3, #2
 800afa6:	e06d      	b.n	800b084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a30      	ldr	r2, [pc, #192]	; (800b090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d004      	beq.n	800afdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a2f      	ldr	r2, [pc, #188]	; (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d108      	bne.n	800afee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	4313      	orrs	r3, r2
 800afec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	4313      	orrs	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a20      	ldr	r2, [pc, #128]	; (800b090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d022      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b01a:	d01d      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1d      	ldr	r2, [pc, #116]	; (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d018      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1c      	ldr	r2, [pc, #112]	; (800b09c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d013      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1a      	ldr	r2, [pc, #104]	; (800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d00e      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a15      	ldr	r2, [pc, #84]	; (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d009      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a16      	ldr	r2, [pc, #88]	; (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d10c      	bne.n	800b072 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b05e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	4313      	orrs	r3, r2
 800b068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	40010000 	.word	0x40010000
 800b094:	40010400 	.word	0x40010400
 800b098:	40000400 	.word	0x40000400
 800b09c:	40000800 	.word	0x40000800
 800b0a0:	40000c00 	.word	0x40000c00
 800b0a4:	40014000 	.word	0x40014000
 800b0a8:	40001800 	.word	0x40001800

0800b0ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d101      	bne.n	800b0c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e065      	b.n	800b194 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4313      	orrs	r3, r2
 800b106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	4313      	orrs	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	041b      	lsls	r3, r3, #16
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a16      	ldr	r2, [pc, #88]	; (800b1a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d004      	beq.n	800b156 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a14      	ldr	r2, [pc, #80]	; (800b1a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d115      	bne.n	800b182 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	051b      	lsls	r3, r3, #20
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	4313      	orrs	r3, r2
 800b172:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	4313      	orrs	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	40010000 	.word	0x40010000
 800b1a4:	40010400 	.word	0x40010400

0800b1a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e040      	b.n	800b278 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d106      	bne.n	800b20c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7f7 fd58 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2224      	movs	r2, #36	; 0x24
 800b210:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f022 0201 	bic.w	r2, r2, #1
 800b220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fa04 	bl	800b630 <UART_SetConfig>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d101      	bne.n	800b232 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e022      	b.n	800b278 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2b00      	cmp	r3, #0
 800b238:	d002      	beq.n	800b240 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fca2 	bl	800bb84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b24e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689a      	ldr	r2, [r3, #8]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b25e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f042 0201 	orr.w	r2, r2, #1
 800b26e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fd29 	bl	800bcc8 <UART_CheckIdleState>
 800b276:	4603      	mov	r3, r0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08a      	sub	sp, #40	; 0x28
 800b284:	af02      	add	r7, sp, #8
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	4613      	mov	r3, r2
 800b28e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b294:	2b20      	cmp	r3, #32
 800b296:	d17f      	bne.n	800b398 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <HAL_UART_Transmit+0x24>
 800b29e:	88fb      	ldrh	r3, [r7, #6]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e078      	b.n	800b39a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d101      	bne.n	800b2b6 <HAL_UART_Transmit+0x36>
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	e071      	b.n	800b39a <HAL_UART_Transmit+0x11a>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2221      	movs	r2, #33	; 0x21
 800b2c8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b2ca:	f7f7 fddd 	bl	8002e88 <HAL_GetTick>
 800b2ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	88fa      	ldrh	r2, [r7, #6]
 800b2d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	88fa      	ldrh	r2, [r7, #6]
 800b2dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e8:	d108      	bne.n	800b2fc <HAL_UART_Transmit+0x7c>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d104      	bne.n	800b2fc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	61bb      	str	r3, [r7, #24]
 800b2fa:	e003      	b.n	800b304 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b300:	2300      	movs	r3, #0
 800b302:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b30c:	e02c      	b.n	800b368 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2200      	movs	r2, #0
 800b316:	2180      	movs	r1, #128	; 0x80
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 fd04 	bl	800bd26 <UART_WaitOnFlagUntilTimeout>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e038      	b.n	800b39a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10b      	bne.n	800b346 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b33c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	3302      	adds	r3, #2
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	e007      	b.n	800b356 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	3301      	adds	r3, #1
 800b354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b36e:	b29b      	uxth	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1cc      	bne.n	800b30e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2200      	movs	r2, #0
 800b37c:	2140      	movs	r1, #64	; 0x40
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f000 fcd1 	bl	800bd26 <UART_WaitOnFlagUntilTimeout>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	e005      	b.n	800b39a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2220      	movs	r2, #32
 800b392:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	e000      	b.n	800b39a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b398:	2302      	movs	r3, #2
  }
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b088      	sub	sp, #32
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3c4:	69fa      	ldr	r2, [r7, #28]
 800b3c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d113      	bne.n	800b3fc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	f003 0320 	and.w	r3, r3, #32
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00e      	beq.n	800b3fc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d009      	beq.n	800b3fc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 8100 	beq.w	800b5f2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	4798      	blx	r3
      }
      return;
 800b3fa:	e0fa      	b.n	800b5f2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 80d5 	beq.w	800b5ae <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f003 0301 	and.w	r3, r3, #1
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d105      	bne.n	800b41a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 80ca 	beq.w	800b5ae <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	f003 0301 	and.w	r3, r3, #1
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00e      	beq.n	800b442 <HAL_UART_IRQHandler+0x9e>
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d009      	beq.n	800b442 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2201      	movs	r2, #1
 800b434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b43a:	f043 0201 	orr.w	r2, r3, #1
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	f003 0302 	and.w	r3, r3, #2
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00e      	beq.n	800b46a <HAL_UART_IRQHandler+0xc6>
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d009      	beq.n	800b46a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2202      	movs	r2, #2
 800b45c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b462:	f043 0204 	orr.w	r2, r3, #4
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00e      	beq.n	800b492 <HAL_UART_IRQHandler+0xee>
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d009      	beq.n	800b492 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2204      	movs	r2, #4
 800b484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48a:	f043 0202 	orr.w	r2, r3, #2
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	f003 0308 	and.w	r3, r3, #8
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d013      	beq.n	800b4c4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	f003 0320 	and.w	r3, r3, #32
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d104      	bne.n	800b4b0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d009      	beq.n	800b4c4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4bc:	f043 0208 	orr.w	r2, r3, #8
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00f      	beq.n	800b4ee <HAL_UART_IRQHandler+0x14a>
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00a      	beq.n	800b4ee <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4e6:	f043 0220 	orr.w	r2, r3, #32
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d07f      	beq.n	800b5f6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	f003 0320 	and.w	r3, r3, #32
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00c      	beq.n	800b51a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	f003 0320 	and.w	r3, r3, #32
 800b506:	2b00      	cmp	r3, #0
 800b508:	d007      	beq.n	800b51a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52a:	2b40      	cmp	r3, #64	; 0x40
 800b52c:	d004      	beq.n	800b538 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b534:	2b00      	cmp	r3, #0
 800b536:	d031      	beq.n	800b59c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fc6f 	bl	800be1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b548:	2b40      	cmp	r3, #64	; 0x40
 800b54a:	d123      	bne.n	800b594 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b55a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b560:	2b00      	cmp	r3, #0
 800b562:	d013      	beq.n	800b58c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b568:	4a26      	ldr	r2, [pc, #152]	; (800b604 <HAL_UART_IRQHandler+0x260>)
 800b56a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b570:	4618      	mov	r0, r3
 800b572:	f7f8 f9e5 	bl	8003940 <HAL_DMA_Abort_IT>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d016      	beq.n	800b5aa <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b586:	4610      	mov	r0, r2
 800b588:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b58a:	e00e      	b.n	800b5aa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f845 	bl	800b61c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b592:	e00a      	b.n	800b5aa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f841 	bl	800b61c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b59a:	e006      	b.n	800b5aa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 f83d 	bl	800b61c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b5a8:	e025      	b.n	800b5f6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5aa:	bf00      	nop
    return;
 800b5ac:	e023      	b.n	800b5f6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00d      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d008      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d017      	beq.n	800b5fa <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	4798      	blx	r3
    }
    return;
 800b5d2:	e012      	b.n	800b5fa <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00e      	beq.n	800b5fc <HAL_UART_IRQHandler+0x258>
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d009      	beq.n	800b5fc <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fc4d 	bl	800be88 <UART_EndTransmit_IT>
    return;
 800b5ee:	bf00      	nop
 800b5f0:	e004      	b.n	800b5fc <HAL_UART_IRQHandler+0x258>
      return;
 800b5f2:	bf00      	nop
 800b5f4:	e002      	b.n	800b5fc <HAL_UART_IRQHandler+0x258>
    return;
 800b5f6:	bf00      	nop
 800b5f8:	e000      	b.n	800b5fc <HAL_UART_IRQHandler+0x258>
    return;
 800b5fa:	bf00      	nop
  }

}
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	0800be5d 	.word	0x0800be5d

0800b608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b638:	2300      	movs	r3, #0
 800b63a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	689a      	ldr	r2, [r3, #8]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	431a      	orrs	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	431a      	orrs	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	4313      	orrs	r3, r2
 800b656:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	4bb1      	ldr	r3, [pc, #708]	; (800b924 <UART_SetConfig+0x2f4>)
 800b660:	4013      	ands	r3, r2
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	6812      	ldr	r2, [r2, #0]
 800b666:	6939      	ldr	r1, [r7, #16]
 800b668:	430b      	orrs	r3, r1
 800b66a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4313      	orrs	r3, r2
 800b690:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a9f      	ldr	r2, [pc, #636]	; (800b928 <UART_SetConfig+0x2f8>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d121      	bne.n	800b6f4 <UART_SetConfig+0xc4>
 800b6b0:	4b9e      	ldr	r3, [pc, #632]	; (800b92c <UART_SetConfig+0x2fc>)
 800b6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d816      	bhi.n	800b6ec <UART_SetConfig+0xbc>
 800b6be:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <UART_SetConfig+0x94>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b6e1 	.word	0x0800b6e1
 800b6cc:	0800b6db 	.word	0x0800b6db
 800b6d0:	0800b6e7 	.word	0x0800b6e7
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	77fb      	strb	r3, [r7, #31]
 800b6d8:	e151      	b.n	800b97e <UART_SetConfig+0x34e>
 800b6da:	2302      	movs	r3, #2
 800b6dc:	77fb      	strb	r3, [r7, #31]
 800b6de:	e14e      	b.n	800b97e <UART_SetConfig+0x34e>
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	77fb      	strb	r3, [r7, #31]
 800b6e4:	e14b      	b.n	800b97e <UART_SetConfig+0x34e>
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	77fb      	strb	r3, [r7, #31]
 800b6ea:	e148      	b.n	800b97e <UART_SetConfig+0x34e>
 800b6ec:	2310      	movs	r3, #16
 800b6ee:	77fb      	strb	r3, [r7, #31]
 800b6f0:	bf00      	nop
 800b6f2:	e144      	b.n	800b97e <UART_SetConfig+0x34e>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a8d      	ldr	r2, [pc, #564]	; (800b930 <UART_SetConfig+0x300>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d134      	bne.n	800b768 <UART_SetConfig+0x138>
 800b6fe:	4b8b      	ldr	r3, [pc, #556]	; (800b92c <UART_SetConfig+0x2fc>)
 800b700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b704:	f003 030c 	and.w	r3, r3, #12
 800b708:	2b0c      	cmp	r3, #12
 800b70a:	d829      	bhi.n	800b760 <UART_SetConfig+0x130>
 800b70c:	a201      	add	r2, pc, #4	; (adr r2, 800b714 <UART_SetConfig+0xe4>)
 800b70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b712:	bf00      	nop
 800b714:	0800b749 	.word	0x0800b749
 800b718:	0800b761 	.word	0x0800b761
 800b71c:	0800b761 	.word	0x0800b761
 800b720:	0800b761 	.word	0x0800b761
 800b724:	0800b755 	.word	0x0800b755
 800b728:	0800b761 	.word	0x0800b761
 800b72c:	0800b761 	.word	0x0800b761
 800b730:	0800b761 	.word	0x0800b761
 800b734:	0800b74f 	.word	0x0800b74f
 800b738:	0800b761 	.word	0x0800b761
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b761 	.word	0x0800b761
 800b744:	0800b75b 	.word	0x0800b75b
 800b748:	2300      	movs	r3, #0
 800b74a:	77fb      	strb	r3, [r7, #31]
 800b74c:	e117      	b.n	800b97e <UART_SetConfig+0x34e>
 800b74e:	2302      	movs	r3, #2
 800b750:	77fb      	strb	r3, [r7, #31]
 800b752:	e114      	b.n	800b97e <UART_SetConfig+0x34e>
 800b754:	2304      	movs	r3, #4
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e111      	b.n	800b97e <UART_SetConfig+0x34e>
 800b75a:	2308      	movs	r3, #8
 800b75c:	77fb      	strb	r3, [r7, #31]
 800b75e:	e10e      	b.n	800b97e <UART_SetConfig+0x34e>
 800b760:	2310      	movs	r3, #16
 800b762:	77fb      	strb	r3, [r7, #31]
 800b764:	bf00      	nop
 800b766:	e10a      	b.n	800b97e <UART_SetConfig+0x34e>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a71      	ldr	r2, [pc, #452]	; (800b934 <UART_SetConfig+0x304>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d120      	bne.n	800b7b4 <UART_SetConfig+0x184>
 800b772:	4b6e      	ldr	r3, [pc, #440]	; (800b92c <UART_SetConfig+0x2fc>)
 800b774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b778:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b77c:	2b10      	cmp	r3, #16
 800b77e:	d00f      	beq.n	800b7a0 <UART_SetConfig+0x170>
 800b780:	2b10      	cmp	r3, #16
 800b782:	d802      	bhi.n	800b78a <UART_SetConfig+0x15a>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d005      	beq.n	800b794 <UART_SetConfig+0x164>
 800b788:	e010      	b.n	800b7ac <UART_SetConfig+0x17c>
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	d005      	beq.n	800b79a <UART_SetConfig+0x16a>
 800b78e:	2b30      	cmp	r3, #48	; 0x30
 800b790:	d009      	beq.n	800b7a6 <UART_SetConfig+0x176>
 800b792:	e00b      	b.n	800b7ac <UART_SetConfig+0x17c>
 800b794:	2300      	movs	r3, #0
 800b796:	77fb      	strb	r3, [r7, #31]
 800b798:	e0f1      	b.n	800b97e <UART_SetConfig+0x34e>
 800b79a:	2302      	movs	r3, #2
 800b79c:	77fb      	strb	r3, [r7, #31]
 800b79e:	e0ee      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7a0:	2304      	movs	r3, #4
 800b7a2:	77fb      	strb	r3, [r7, #31]
 800b7a4:	e0eb      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7a6:	2308      	movs	r3, #8
 800b7a8:	77fb      	strb	r3, [r7, #31]
 800b7aa:	e0e8      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7ac:	2310      	movs	r3, #16
 800b7ae:	77fb      	strb	r3, [r7, #31]
 800b7b0:	bf00      	nop
 800b7b2:	e0e4      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a5f      	ldr	r2, [pc, #380]	; (800b938 <UART_SetConfig+0x308>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d120      	bne.n	800b800 <UART_SetConfig+0x1d0>
 800b7be:	4b5b      	ldr	r3, [pc, #364]	; (800b92c <UART_SetConfig+0x2fc>)
 800b7c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b7c8:	2b40      	cmp	r3, #64	; 0x40
 800b7ca:	d00f      	beq.n	800b7ec <UART_SetConfig+0x1bc>
 800b7cc:	2b40      	cmp	r3, #64	; 0x40
 800b7ce:	d802      	bhi.n	800b7d6 <UART_SetConfig+0x1a6>
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <UART_SetConfig+0x1b0>
 800b7d4:	e010      	b.n	800b7f8 <UART_SetConfig+0x1c8>
 800b7d6:	2b80      	cmp	r3, #128	; 0x80
 800b7d8:	d005      	beq.n	800b7e6 <UART_SetConfig+0x1b6>
 800b7da:	2bc0      	cmp	r3, #192	; 0xc0
 800b7dc:	d009      	beq.n	800b7f2 <UART_SetConfig+0x1c2>
 800b7de:	e00b      	b.n	800b7f8 <UART_SetConfig+0x1c8>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	77fb      	strb	r3, [r7, #31]
 800b7e4:	e0cb      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	77fb      	strb	r3, [r7, #31]
 800b7ea:	e0c8      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7ec:	2304      	movs	r3, #4
 800b7ee:	77fb      	strb	r3, [r7, #31]
 800b7f0:	e0c5      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7f2:	2308      	movs	r3, #8
 800b7f4:	77fb      	strb	r3, [r7, #31]
 800b7f6:	e0c2      	b.n	800b97e <UART_SetConfig+0x34e>
 800b7f8:	2310      	movs	r3, #16
 800b7fa:	77fb      	strb	r3, [r7, #31]
 800b7fc:	bf00      	nop
 800b7fe:	e0be      	b.n	800b97e <UART_SetConfig+0x34e>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a4d      	ldr	r2, [pc, #308]	; (800b93c <UART_SetConfig+0x30c>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d124      	bne.n	800b854 <UART_SetConfig+0x224>
 800b80a:	4b48      	ldr	r3, [pc, #288]	; (800b92c <UART_SetConfig+0x2fc>)
 800b80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b818:	d012      	beq.n	800b840 <UART_SetConfig+0x210>
 800b81a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b81e:	d802      	bhi.n	800b826 <UART_SetConfig+0x1f6>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d007      	beq.n	800b834 <UART_SetConfig+0x204>
 800b824:	e012      	b.n	800b84c <UART_SetConfig+0x21c>
 800b826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b82a:	d006      	beq.n	800b83a <UART_SetConfig+0x20a>
 800b82c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b830:	d009      	beq.n	800b846 <UART_SetConfig+0x216>
 800b832:	e00b      	b.n	800b84c <UART_SetConfig+0x21c>
 800b834:	2300      	movs	r3, #0
 800b836:	77fb      	strb	r3, [r7, #31]
 800b838:	e0a1      	b.n	800b97e <UART_SetConfig+0x34e>
 800b83a:	2302      	movs	r3, #2
 800b83c:	77fb      	strb	r3, [r7, #31]
 800b83e:	e09e      	b.n	800b97e <UART_SetConfig+0x34e>
 800b840:	2304      	movs	r3, #4
 800b842:	77fb      	strb	r3, [r7, #31]
 800b844:	e09b      	b.n	800b97e <UART_SetConfig+0x34e>
 800b846:	2308      	movs	r3, #8
 800b848:	77fb      	strb	r3, [r7, #31]
 800b84a:	e098      	b.n	800b97e <UART_SetConfig+0x34e>
 800b84c:	2310      	movs	r3, #16
 800b84e:	77fb      	strb	r3, [r7, #31]
 800b850:	bf00      	nop
 800b852:	e094      	b.n	800b97e <UART_SetConfig+0x34e>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a39      	ldr	r2, [pc, #228]	; (800b940 <UART_SetConfig+0x310>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d124      	bne.n	800b8a8 <UART_SetConfig+0x278>
 800b85e:	4b33      	ldr	r3, [pc, #204]	; (800b92c <UART_SetConfig+0x2fc>)
 800b860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b86c:	d012      	beq.n	800b894 <UART_SetConfig+0x264>
 800b86e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b872:	d802      	bhi.n	800b87a <UART_SetConfig+0x24a>
 800b874:	2b00      	cmp	r3, #0
 800b876:	d007      	beq.n	800b888 <UART_SetConfig+0x258>
 800b878:	e012      	b.n	800b8a0 <UART_SetConfig+0x270>
 800b87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b87e:	d006      	beq.n	800b88e <UART_SetConfig+0x25e>
 800b880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b884:	d009      	beq.n	800b89a <UART_SetConfig+0x26a>
 800b886:	e00b      	b.n	800b8a0 <UART_SetConfig+0x270>
 800b888:	2301      	movs	r3, #1
 800b88a:	77fb      	strb	r3, [r7, #31]
 800b88c:	e077      	b.n	800b97e <UART_SetConfig+0x34e>
 800b88e:	2302      	movs	r3, #2
 800b890:	77fb      	strb	r3, [r7, #31]
 800b892:	e074      	b.n	800b97e <UART_SetConfig+0x34e>
 800b894:	2304      	movs	r3, #4
 800b896:	77fb      	strb	r3, [r7, #31]
 800b898:	e071      	b.n	800b97e <UART_SetConfig+0x34e>
 800b89a:	2308      	movs	r3, #8
 800b89c:	77fb      	strb	r3, [r7, #31]
 800b89e:	e06e      	b.n	800b97e <UART_SetConfig+0x34e>
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	77fb      	strb	r3, [r7, #31]
 800b8a4:	bf00      	nop
 800b8a6:	e06a      	b.n	800b97e <UART_SetConfig+0x34e>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a25      	ldr	r2, [pc, #148]	; (800b944 <UART_SetConfig+0x314>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d124      	bne.n	800b8fc <UART_SetConfig+0x2cc>
 800b8b2:	4b1e      	ldr	r3, [pc, #120]	; (800b92c <UART_SetConfig+0x2fc>)
 800b8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c0:	d012      	beq.n	800b8e8 <UART_SetConfig+0x2b8>
 800b8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c6:	d802      	bhi.n	800b8ce <UART_SetConfig+0x29e>
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d007      	beq.n	800b8dc <UART_SetConfig+0x2ac>
 800b8cc:	e012      	b.n	800b8f4 <UART_SetConfig+0x2c4>
 800b8ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d2:	d006      	beq.n	800b8e2 <UART_SetConfig+0x2b2>
 800b8d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b8d8:	d009      	beq.n	800b8ee <UART_SetConfig+0x2be>
 800b8da:	e00b      	b.n	800b8f4 <UART_SetConfig+0x2c4>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	77fb      	strb	r3, [r7, #31]
 800b8e0:	e04d      	b.n	800b97e <UART_SetConfig+0x34e>
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	77fb      	strb	r3, [r7, #31]
 800b8e6:	e04a      	b.n	800b97e <UART_SetConfig+0x34e>
 800b8e8:	2304      	movs	r3, #4
 800b8ea:	77fb      	strb	r3, [r7, #31]
 800b8ec:	e047      	b.n	800b97e <UART_SetConfig+0x34e>
 800b8ee:	2308      	movs	r3, #8
 800b8f0:	77fb      	strb	r3, [r7, #31]
 800b8f2:	e044      	b.n	800b97e <UART_SetConfig+0x34e>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	77fb      	strb	r3, [r7, #31]
 800b8f8:	bf00      	nop
 800b8fa:	e040      	b.n	800b97e <UART_SetConfig+0x34e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a11      	ldr	r2, [pc, #68]	; (800b948 <UART_SetConfig+0x318>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d139      	bne.n	800b97a <UART_SetConfig+0x34a>
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <UART_SetConfig+0x2fc>)
 800b908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b90c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b914:	d027      	beq.n	800b966 <UART_SetConfig+0x336>
 800b916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b91a:	d817      	bhi.n	800b94c <UART_SetConfig+0x31c>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d01c      	beq.n	800b95a <UART_SetConfig+0x32a>
 800b920:	e027      	b.n	800b972 <UART_SetConfig+0x342>
 800b922:	bf00      	nop
 800b924:	efff69f3 	.word	0xefff69f3
 800b928:	40011000 	.word	0x40011000
 800b92c:	40023800 	.word	0x40023800
 800b930:	40004400 	.word	0x40004400
 800b934:	40004800 	.word	0x40004800
 800b938:	40004c00 	.word	0x40004c00
 800b93c:	40005000 	.word	0x40005000
 800b940:	40011400 	.word	0x40011400
 800b944:	40007800 	.word	0x40007800
 800b948:	40007c00 	.word	0x40007c00
 800b94c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b950:	d006      	beq.n	800b960 <UART_SetConfig+0x330>
 800b952:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b956:	d009      	beq.n	800b96c <UART_SetConfig+0x33c>
 800b958:	e00b      	b.n	800b972 <UART_SetConfig+0x342>
 800b95a:	2300      	movs	r3, #0
 800b95c:	77fb      	strb	r3, [r7, #31]
 800b95e:	e00e      	b.n	800b97e <UART_SetConfig+0x34e>
 800b960:	2302      	movs	r3, #2
 800b962:	77fb      	strb	r3, [r7, #31]
 800b964:	e00b      	b.n	800b97e <UART_SetConfig+0x34e>
 800b966:	2304      	movs	r3, #4
 800b968:	77fb      	strb	r3, [r7, #31]
 800b96a:	e008      	b.n	800b97e <UART_SetConfig+0x34e>
 800b96c:	2308      	movs	r3, #8
 800b96e:	77fb      	strb	r3, [r7, #31]
 800b970:	e005      	b.n	800b97e <UART_SetConfig+0x34e>
 800b972:	2310      	movs	r3, #16
 800b974:	77fb      	strb	r3, [r7, #31]
 800b976:	bf00      	nop
 800b978:	e001      	b.n	800b97e <UART_SetConfig+0x34e>
 800b97a:	2310      	movs	r3, #16
 800b97c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b986:	d17f      	bne.n	800ba88 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b988:	7ffb      	ldrb	r3, [r7, #31]
 800b98a:	2b08      	cmp	r3, #8
 800b98c:	d85c      	bhi.n	800ba48 <UART_SetConfig+0x418>
 800b98e:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <UART_SetConfig+0x364>)
 800b990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b994:	0800b9b9 	.word	0x0800b9b9
 800b998:	0800b9d9 	.word	0x0800b9d9
 800b99c:	0800b9f9 	.word	0x0800b9f9
 800b9a0:	0800ba49 	.word	0x0800ba49
 800b9a4:	0800ba11 	.word	0x0800ba11
 800b9a8:	0800ba49 	.word	0x0800ba49
 800b9ac:	0800ba49 	.word	0x0800ba49
 800b9b0:	0800ba49 	.word	0x0800ba49
 800b9b4:	0800ba31 	.word	0x0800ba31
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9b8:	f7fb ff44 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800b9bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	005a      	lsls	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	085b      	lsrs	r3, r3, #1
 800b9c8:	441a      	add	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	61bb      	str	r3, [r7, #24]
        break;
 800b9d6:	e03a      	b.n	800ba4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9d8:	f7fb ff48 	bl	800786c <HAL_RCC_GetPCLK2Freq>
 800b9dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	005a      	lsls	r2, r3, #1
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	085b      	lsrs	r3, r3, #1
 800b9e8:	441a      	add	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	61bb      	str	r3, [r7, #24]
        break;
 800b9f6:	e02a      	b.n	800ba4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	085a      	lsrs	r2, r3, #1
 800b9fe:	4b5f      	ldr	r3, [pc, #380]	; (800bb7c <UART_SetConfig+0x54c>)
 800ba00:	4413      	add	r3, r2
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	6852      	ldr	r2, [r2, #4]
 800ba06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	61bb      	str	r3, [r7, #24]
        break;
 800ba0e:	e01e      	b.n	800ba4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba10:	f7fb fe5a 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 800ba14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	005a      	lsls	r2, r3, #1
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	085b      	lsrs	r3, r3, #1
 800ba20:	441a      	add	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	61bb      	str	r3, [r7, #24]
        break;
 800ba2e:	e00e      	b.n	800ba4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	085b      	lsrs	r3, r3, #1
 800ba36:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	61bb      	str	r3, [r7, #24]
        break;
 800ba46:	e002      	b.n	800ba4e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	75fb      	strb	r3, [r7, #23]
        break;
 800ba4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	2b0f      	cmp	r3, #15
 800ba52:	d916      	bls.n	800ba82 <UART_SetConfig+0x452>
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba5a:	d212      	bcs.n	800ba82 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	f023 030f 	bic.w	r3, r3, #15
 800ba64:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	085b      	lsrs	r3, r3, #1
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	f003 0307 	and.w	r3, r3, #7
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	897b      	ldrh	r3, [r7, #10]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	897a      	ldrh	r2, [r7, #10]
 800ba7e:	60da      	str	r2, [r3, #12]
 800ba80:	e070      	b.n	800bb64 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	75fb      	strb	r3, [r7, #23]
 800ba86:	e06d      	b.n	800bb64 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ba88:	7ffb      	ldrb	r3, [r7, #31]
 800ba8a:	2b08      	cmp	r3, #8
 800ba8c:	d859      	bhi.n	800bb42 <UART_SetConfig+0x512>
 800ba8e:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <UART_SetConfig+0x464>)
 800ba90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba94:	0800bab9 	.word	0x0800bab9
 800ba98:	0800bad7 	.word	0x0800bad7
 800ba9c:	0800baf5 	.word	0x0800baf5
 800baa0:	0800bb43 	.word	0x0800bb43
 800baa4:	0800bb0d 	.word	0x0800bb0d
 800baa8:	0800bb43 	.word	0x0800bb43
 800baac:	0800bb43 	.word	0x0800bb43
 800bab0:	0800bb43 	.word	0x0800bb43
 800bab4:	0800bb2b 	.word	0x0800bb2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bab8:	f7fb fec4 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 800babc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	085a      	lsrs	r2, r3, #1
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	441a      	add	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	61bb      	str	r3, [r7, #24]
        break;
 800bad4:	e038      	b.n	800bb48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bad6:	f7fb fec9 	bl	800786c <HAL_RCC_GetPCLK2Freq>
 800bada:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	085a      	lsrs	r2, r3, #1
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	441a      	add	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	fbb2 f3f3 	udiv	r3, r2, r3
 800baee:	b29b      	uxth	r3, r3
 800baf0:	61bb      	str	r3, [r7, #24]
        break;
 800baf2:	e029      	b.n	800bb48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	085a      	lsrs	r2, r3, #1
 800bafa:	4b21      	ldr	r3, [pc, #132]	; (800bb80 <UART_SetConfig+0x550>)
 800bafc:	4413      	add	r3, r2
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	6852      	ldr	r2, [r2, #4]
 800bb02:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	61bb      	str	r3, [r7, #24]
        break;
 800bb0a:	e01d      	b.n	800bb48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb0c:	f7fb fddc 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 800bb10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	085a      	lsrs	r2, r3, #1
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	441a      	add	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	61bb      	str	r3, [r7, #24]
        break;
 800bb28:	e00e      	b.n	800bb48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	085b      	lsrs	r3, r3, #1
 800bb30:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	61bb      	str	r3, [r7, #24]
        break;
 800bb40:	e002      	b.n	800bb48 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	75fb      	strb	r3, [r7, #23]
        break;
 800bb46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	2b0f      	cmp	r3, #15
 800bb4c:	d908      	bls.n	800bb60 <UART_SetConfig+0x530>
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb54:	d204      	bcs.n	800bb60 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69ba      	ldr	r2, [r7, #24]
 800bb5c:	60da      	str	r2, [r3, #12]
 800bb5e:	e001      	b.n	800bb64 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3720      	adds	r7, #32
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	01e84800 	.word	0x01e84800
 800bb80:	00f42400 	.word	0x00f42400

0800bb84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00a      	beq.n	800bbae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00a      	beq.n	800bbd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	430a      	orrs	r2, r1
 800bbce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00a      	beq.n	800bbf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	f003 0308 	and.w	r3, r3, #8
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00a      	beq.n	800bc14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	430a      	orrs	r2, r1
 800bc12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	f003 0310 	and.w	r3, r3, #16
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00a      	beq.n	800bc36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3a:	f003 0320 	and.w	r3, r3, #32
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00a      	beq.n	800bc58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	430a      	orrs	r2, r1
 800bc56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d01a      	beq.n	800bc9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	430a      	orrs	r2, r1
 800bc78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc82:	d10a      	bne.n	800bc9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	430a      	orrs	r2, r1
 800bc98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	605a      	str	r2, [r3, #4]
  }
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bcd6:	f7f7 f8d7 	bl	8002e88 <HAL_GetTick>
 800bcda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f003 0308 	and.w	r3, r3, #8
 800bce6:	2b08      	cmp	r3, #8
 800bce8:	d10e      	bne.n	800bd08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f814 	bl	800bd26 <UART_WaitOnFlagUntilTimeout>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e00a      	b.n	800bd1e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2220      	movs	r2, #32
 800bd0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2220      	movs	r2, #32
 800bd12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	60f8      	str	r0, [r7, #12]
 800bd2e:	60b9      	str	r1, [r7, #8]
 800bd30:	603b      	str	r3, [r7, #0]
 800bd32:	4613      	mov	r3, r2
 800bd34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd36:	e05d      	b.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3e:	d059      	beq.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd40:	f7f7 f8a2 	bl	8002e88 <HAL_GetTick>
 800bd44:	4602      	mov	r2, r0
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	69ba      	ldr	r2, [r7, #24]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d302      	bcc.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d11b      	bne.n	800bd8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	689a      	ldr	r2, [r3, #8]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0201 	bic.w	r2, r2, #1
 800bd74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2220      	movs	r2, #32
 800bd7a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e042      	b.n	800be14 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0304 	and.w	r3, r3, #4
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d02b      	beq.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bda6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdaa:	d123      	bne.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdb4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdc4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689a      	ldr	r2, [r3, #8]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2220      	movs	r2, #32
 800bde0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2220      	movs	r2, #32
 800bde6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	e00f      	b.n	800be14 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	69da      	ldr	r2, [r3, #28]
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	429a      	cmp	r2, r3
 800be02:	bf0c      	ite	eq
 800be04:	2301      	moveq	r3, #1
 800be06:	2300      	movne	r3, #0
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d092      	beq.n	800bd38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be32:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689a      	ldr	r2, [r3, #8]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f022 0201 	bic.w	r2, r2, #1
 800be42:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2220      	movs	r2, #32
 800be48:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	661a      	str	r2, [r3, #96]	; 0x60
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7ff fbce 	bl	800b61c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be80:	bf00      	nop
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be9e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2220      	movs	r2, #32
 800bea4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7ff fbab 	bl	800b608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beb2:	bf00      	nop
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d027      	beq.n	800bf26 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4b2f      	ldr	r3, [pc, #188]	; (800bf9c <FMC_SDRAM_Init+0xe0>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800beec:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bef2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bef8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800befe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bf04:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bf0a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bf10:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bf16:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	e032      	b.n	800bf8c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf32:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bf3c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bf42:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <FMC_SDRAM_Init+0xe0>)
 800bf54:	4013      	ands	r3, r2
 800bf56:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bf60:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bf66:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bf6c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bf72:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bf78:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	ffff8000 	.word	0xffff8000

0800bfa0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b087      	sub	sp, #28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d02e      	beq.n	800c018 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bfc6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bfd6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bfe0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bfea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bff4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bffe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	3b01      	subs	r3, #1
 800c006:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c008:	4313      	orrs	r3, r2
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	609a      	str	r2, [r3, #8]
 800c016:	e039      	b.n	800c08c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	4b1e      	ldr	r3, [pc, #120]	; (800c09c <FMC_SDRAM_Timing_Init+0xfc>)
 800c022:	4013      	ands	r3, r2
 800c024:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	3b01      	subs	r3, #1
 800c02c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	3b01      	subs	r3, #1
 800c034:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c036:	4313      	orrs	r3, r2
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c04a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	3b01      	subs	r3, #1
 800c058:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c05a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	3b01      	subs	r3, #1
 800c062:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c064:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c06e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	3b01      	subs	r3, #1
 800c076:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c078:	4313      	orrs	r3, r2
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	ff0f0fff 	.word	0xff0f0fff

0800c0a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	b480      	push	{r7}
 800c0a4:	b085      	sub	sp, #20
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	f107 001c 	add.w	r0, r7, #28
 800c0ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c0b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c0ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c0be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c0c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c0c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c0ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <SDMMC_Init+0x54>)
 800c0d8:	4013      	ands	r3, r2
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	b004      	add	sp, #16
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	ffff8100 	.word	0xffff8100

0800c0f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c106:	4618      	mov	r0, r3
 800c108:	370c      	adds	r7, #12
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2203      	movs	r2, #3
 800c11e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c120:	2002      	movs	r0, #2
 800c122:	f7f6 febd 	bl	8002ea0 <HAL_Delay>
  
  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0303 	and.w	r3, r3, #3
}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c16a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c170:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c176:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	4b06      	ldr	r3, [pc, #24]	; (800c19c <SDMMC_SendCommand+0x50>)
 800c184:	4013      	ands	r3, r2
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	431a      	orrs	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	fffff000 	.word	0xfffff000

0800c1a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	b2db      	uxtb	r3, r3
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b085      	sub	sp, #20
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
}  
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	685a      	ldr	r2, [r3, #4]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c206:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c20c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c212:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4313      	orrs	r3, r2
 800c218:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	431a      	orrs	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c22a:	2300      	movs	r3, #0

}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b088      	sub	sp, #32
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c246:	2310      	movs	r3, #16
 800c248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c24a:	2340      	movs	r3, #64	; 0x40
 800c24c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c256:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c258:	f107 0308 	add.w	r3, r7, #8
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff ff74 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c264:	f241 3288 	movw	r2, #5000	; 0x1388
 800c268:	2110      	movs	r1, #16
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fa42 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c272:	69fb      	ldr	r3, [r7, #28]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3720      	adds	r7, #32
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c28a:	2311      	movs	r3, #17
 800c28c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c28e:	2340      	movs	r3, #64	; 0x40
 800c290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c292:	2300      	movs	r3, #0
 800c294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c29a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c29c:	f107 0308 	add.w	r3, r7, #8
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff ff52 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c2a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2ac:	2111      	movs	r1, #17
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fa20 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c2b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2b6:	69fb      	ldr	r3, [r7, #28]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3720      	adds	r7, #32
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b088      	sub	sp, #32
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c2ce:	2312      	movs	r3, #18
 800c2d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2d2:	2340      	movs	r3, #64	; 0x40
 800c2d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2e0:	f107 0308 	add.w	r3, r7, #8
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff ff30 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c2ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2f0:	2112      	movs	r1, #18
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f9fe 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c2f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2fa:	69fb      	ldr	r3, [r7, #28]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c312:	2318      	movs	r3, #24
 800c314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c316:	2340      	movs	r3, #64	; 0x40
 800c318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c31a:	2300      	movs	r3, #0
 800c31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c322:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c324:	f107 0308 	add.w	r3, r7, #8
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff ff0e 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c330:	f241 3288 	movw	r2, #5000	; 0x1388
 800c334:	2118      	movs	r1, #24
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f9dc 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c33e:	69fb      	ldr	r3, [r7, #28]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3720      	adds	r7, #32
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c356:	2319      	movs	r3, #25
 800c358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c35e:	2300      	movs	r3, #0
 800c360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c368:	f107 0308 	add.w	r3, r7, #8
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff feec 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c374:	f241 3288 	movw	r2, #5000	; 0x1388
 800c378:	2119      	movs	r1, #25
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f9ba 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c382:	69fb      	ldr	r3, [r7, #28]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3720      	adds	r7, #32
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b088      	sub	sp, #32
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c394:	2300      	movs	r3, #0
 800c396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c398:	230c      	movs	r3, #12
 800c39a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c39c:	2340      	movs	r3, #64	; 0x40
 800c39e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3aa:	f107 0308 	add.w	r3, r7, #8
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff fecb 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c3b6:	4a05      	ldr	r2, [pc, #20]	; (800c3cc <SDMMC_CmdStopTransfer+0x40>)
 800c3b8:	210c      	movs	r1, #12
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f99a 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3c2:	69fb      	ldr	r3, [r7, #28]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3720      	adds	r7, #32
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	05f5e100 	.word	0x05f5e100

0800c3d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08a      	sub	sp, #40	; 0x28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c3e0:	2307      	movs	r3, #7
 800c3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3e4:	2340      	movs	r3, #64	; 0x40
 800c3e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3f0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3f2:	f107 0310 	add.w	r3, r7, #16
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f7ff fea7 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c3fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c402:	2107      	movs	r1, #7
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f000 f975 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c40a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3728      	adds	r7, #40	; 0x28
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b088      	sub	sp, #32
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c41e:	2300      	movs	r3, #0
 800c420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c422:	2300      	movs	r3, #0
 800c424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c426:	2300      	movs	r3, #0
 800c428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c42a:	2300      	movs	r3, #0
 800c42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c434:	f107 0308 	add.w	r3, r7, #8
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff fe86 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f92f 	bl	800c6a4 <SDMMC_GetCmdError>
 800c446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c448:	69fb      	ldr	r3, [r7, #28]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b088      	sub	sp, #32
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c45a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c460:	2308      	movs	r3, #8
 800c462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c468:	2300      	movs	r3, #0
 800c46a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c46c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c470:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c472:	f107 0308 	add.w	r3, r7, #8
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff fe67 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fb18 	bl	800cab4 <SDMMC_GetCmdResp7>
 800c484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c486:	69fb      	ldr	r3, [r7, #28]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3720      	adds	r7, #32
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c49e:	2337      	movs	r3, #55	; 0x37
 800c4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4b0:	f107 0308 	add.w	r3, r7, #8
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fe48 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c4bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4c0:	2137      	movs	r1, #55	; 0x37
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f916 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4ca:	69fb      	ldr	r3, [r7, #28]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3720      	adds	r7, #32
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	4b0d      	ldr	r3, [pc, #52]	; (800c518 <SDMMC_CmdAppOperCommand+0x44>)
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c4e6:	2329      	movs	r3, #41	; 0x29
 800c4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4ea:	2340      	movs	r3, #64	; 0x40
 800c4ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7ff fe24 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fa27 	bl	800c958 <SDMMC_GetCmdResp3>
 800c50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c50c:	69fb      	ldr	r3, [r7, #28]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3720      	adds	r7, #32
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	80100000 	.word	0x80100000

0800c51c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c52a:	2306      	movs	r3, #6
 800c52c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c52e:	2340      	movs	r3, #64	; 0x40
 800c530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c532:	2300      	movs	r3, #0
 800c534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c53a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c53c:	f107 0308 	add.w	r3, r7, #8
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff fe02 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c548:	f241 3288 	movw	r2, #5000	; 0x1388
 800c54c:	2106      	movs	r1, #6
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f8d0 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c556:	69fb      	ldr	r3, [r7, #28]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3720      	adds	r7, #32
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c56c:	2333      	movs	r3, #51	; 0x33
 800c56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c570:	2340      	movs	r3, #64	; 0x40
 800c572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c574:	2300      	movs	r3, #0
 800c576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c57c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff fde1 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c58a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58e:	2133      	movs	r1, #51	; 0x33
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f8af 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c598:	69fb      	ldr	r3, [r7, #28]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b088      	sub	sp, #32
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c5b2:	23c0      	movs	r3, #192	; 0xc0
 800c5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5c0:	f107 0308 	add.w	r3, r7, #8
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff fdc0 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f97d 	bl	800c8cc <SDMMC_GetCmdResp2>
 800c5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3720      	adds	r7, #32
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b088      	sub	sp, #32
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c5ec:	2309      	movs	r3, #9
 800c5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c5f0:	23c0      	movs	r3, #192	; 0xc0
 800c5f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5fe:	f107 0308 	add.w	r3, r7, #8
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7ff fda1 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f95e 	bl	800c8cc <SDMMC_GetCmdResp2>
 800c610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c612:	69fb      	ldr	r3, [r7, #28]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c62a:	2303      	movs	r3, #3
 800c62c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c632:	2300      	movs	r3, #0
 800c634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c63a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c63c:	f107 0308 	add.w	r3, r7, #8
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff fd82 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c648:	683a      	ldr	r2, [r7, #0]
 800c64a:	2103      	movs	r1, #3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f9bd 	bl	800c9cc <SDMMC_GetCmdResp6>
 800c652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c654:	69fb      	ldr	r3, [r7, #28]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b088      	sub	sp, #32
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c66c:	230d      	movs	r3, #13
 800c66e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c670:	2340      	movs	r3, #64	; 0x40
 800c672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c674:	2300      	movs	r3, #0
 800c676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c67c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c67e:	f107 0308 	add.w	r3, r7, #8
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff fd61 	bl	800c14c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c68a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c68e:	210d      	movs	r1, #13
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f82f 	bl	800c6f4 <SDMMC_GetCmdResp1>
 800c696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c698:	69fb      	ldr	r3, [r7, #28]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
	...

0800c6a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c6a4:	b490      	push	{r4, r7}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c6ac:	4b0f      	ldr	r3, [pc, #60]	; (800c6ec <SDMMC_GetCmdError+0x48>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a0f      	ldr	r2, [pc, #60]	; (800c6f0 <SDMMC_GetCmdError+0x4c>)
 800c6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b6:	0a5b      	lsrs	r3, r3, #9
 800c6b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c6c0:	4623      	mov	r3, r4
 800c6c2:	1e5c      	subs	r4, r3, #1
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d102      	bne.n	800c6ce <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6cc:	e009      	b.n	800c6e2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0f2      	beq.n	800c6c0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	22c5      	movs	r2, #197	; 0xc5
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bc90      	pop	{r4, r7}
 800c6ea:	4770      	bx	lr
 800c6ec:	20000000 	.word	0x20000000
 800c6f0:	10624dd3 	.word	0x10624dd3

0800c6f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c6f4:	b590      	push	{r4, r7, lr}
 800c6f6:	b087      	sub	sp, #28
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c702:	4b6f      	ldr	r3, [pc, #444]	; (800c8c0 <SDMMC_GetCmdResp1+0x1cc>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a6f      	ldr	r2, [pc, #444]	; (800c8c4 <SDMMC_GetCmdResp1+0x1d0>)
 800c708:	fba2 2303 	umull	r2, r3, r2, r3
 800c70c:	0a5b      	lsrs	r3, r3, #9
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c714:	4623      	mov	r3, r4
 800c716:	1e5c      	subs	r4, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c71c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c720:	e0c9      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c726:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0f0      	beq.n	800c714 <SDMMC_GetCmdResp1+0x20>
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1eb      	bne.n	800c714 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c740:	f003 0304 	and.w	r3, r3, #4
 800c744:	2b00      	cmp	r3, #0
 800c746:	d004      	beq.n	800c752 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2204      	movs	r2, #4
 800c74c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c74e:	2304      	movs	r3, #4
 800c750:	e0b1      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c756:	f003 0301 	and.w	r3, r3, #1
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d004      	beq.n	800c768 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2201      	movs	r2, #1
 800c762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c764:	2301      	movs	r3, #1
 800c766:	e0a6      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	22c5      	movs	r2, #197	; 0xc5
 800c76c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f7ff fd16 	bl	800c1a0 <SDMMC_GetCommandResponse>
 800c774:	4603      	mov	r3, r0
 800c776:	461a      	mov	r2, r3
 800c778:	7afb      	ldrb	r3, [r7, #11]
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d001      	beq.n	800c782 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c77e:	2301      	movs	r3, #1
 800c780:	e099      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c782:	2100      	movs	r1, #0
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f7ff fd18 	bl	800c1ba <SDMMC_GetResponse>
 800c78a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	4b4e      	ldr	r3, [pc, #312]	; (800c8c8 <SDMMC_GetCmdResp1+0x1d4>)
 800c790:	4013      	ands	r3, r2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c796:	2300      	movs	r3, #0
 800c798:	e08d      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	da02      	bge.n	800c7a6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c7a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c7a4:	e087      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d001      	beq.n	800c7b4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c7b0:	2340      	movs	r3, #64	; 0x40
 800c7b2:	e080      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c7be:	2380      	movs	r3, #128	; 0x80
 800c7c0:	e079      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c7cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7d0:	e071      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c7dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7e0:	e069      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7f0:	e061      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c7fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c800:	e059      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c810:	e051      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c81c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c820:	e049      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c82c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c830:	e041      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c83c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c840:	e039      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d002      	beq.n	800c852 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c84c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c850:	e031      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c85c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c860:	e029      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c86c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c870:	e021      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c87c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c880:	e019      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c88c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c890:	e011      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c89c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c8a0:	e009      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	f003 0308 	and.w	r3, r3, #8
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c8ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c8b0:	e001      	b.n	800c8b6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c8b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	371c      	adds	r7, #28
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd90      	pop	{r4, r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20000000 	.word	0x20000000
 800c8c4:	10624dd3 	.word	0x10624dd3
 800c8c8:	fdffe008 	.word	0xfdffe008

0800c8cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c8cc:	b490      	push	{r4, r7}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8d4:	4b1e      	ldr	r3, [pc, #120]	; (800c950 <SDMMC_GetCmdResp2+0x84>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a1e      	ldr	r2, [pc, #120]	; (800c954 <SDMMC_GetCmdResp2+0x88>)
 800c8da:	fba2 2303 	umull	r2, r3, r2, r3
 800c8de:	0a5b      	lsrs	r3, r3, #9
 800c8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c8e8:	4623      	mov	r3, r4
 800c8ea:	1e5c      	subs	r4, r3, #1
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d102      	bne.n	800c8f6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8f4:	e026      	b.n	800c944 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0f0      	beq.n	800c8e8 <SDMMC_GetCmdResp2+0x1c>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d1eb      	bne.n	800c8e8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c914:	f003 0304 	and.w	r3, r3, #4
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d004      	beq.n	800c926 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2204      	movs	r2, #4
 800c920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c922:	2304      	movs	r3, #4
 800c924:	e00e      	b.n	800c944 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c92a:	f003 0301 	and.w	r3, r3, #1
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d004      	beq.n	800c93c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2201      	movs	r2, #1
 800c936:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c938:	2301      	movs	r3, #1
 800c93a:	e003      	b.n	800c944 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	22c5      	movs	r2, #197	; 0xc5
 800c940:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bc90      	pop	{r4, r7}
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	20000000 	.word	0x20000000
 800c954:	10624dd3 	.word	0x10624dd3

0800c958 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c958:	b490      	push	{r4, r7}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c960:	4b18      	ldr	r3, [pc, #96]	; (800c9c4 <SDMMC_GetCmdResp3+0x6c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a18      	ldr	r2, [pc, #96]	; (800c9c8 <SDMMC_GetCmdResp3+0x70>)
 800c966:	fba2 2303 	umull	r2, r3, r2, r3
 800c96a:	0a5b      	lsrs	r3, r3, #9
 800c96c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c970:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c974:	4623      	mov	r3, r4
 800c976:	1e5c      	subs	r4, r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d102      	bne.n	800c982 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c97c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c980:	e01b      	b.n	800c9ba <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c986:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0f0      	beq.n	800c974 <SDMMC_GetCmdResp3+0x1c>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1eb      	bne.n	800c974 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a0:	f003 0304 	and.w	r3, r3, #4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d004      	beq.n	800c9b2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9ae:	2304      	movs	r3, #4
 800c9b0:	e003      	b.n	800c9ba <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	22c5      	movs	r2, #197	; 0xc5
 800c9b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bc90      	pop	{r4, r7}
 800c9c2:	4770      	bx	lr
 800c9c4:	20000000 	.word	0x20000000
 800c9c8:	10624dd3 	.word	0x10624dd3

0800c9cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c9cc:	b590      	push	{r4, r7, lr}
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9da:	4b34      	ldr	r3, [pc, #208]	; (800caac <SDMMC_GetCmdResp6+0xe0>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a34      	ldr	r2, [pc, #208]	; (800cab0 <SDMMC_GetCmdResp6+0xe4>)
 800c9e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e4:	0a5b      	lsrs	r3, r3, #9
 800c9e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ea:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c9ee:	4623      	mov	r3, r4
 800c9f0:	1e5c      	subs	r4, r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9fa:	e052      	b.n	800caa2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca00:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0f0      	beq.n	800c9ee <SDMMC_GetCmdResp6+0x22>
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1eb      	bne.n	800c9ee <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1a:	f003 0304 	and.w	r3, r3, #4
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d004      	beq.n	800ca2c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2204      	movs	r2, #4
 800ca26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca28:	2304      	movs	r3, #4
 800ca2a:	e03a      	b.n	800caa2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d004      	beq.n	800ca42 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e02f      	b.n	800caa2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f7ff fbac 	bl	800c1a0 <SDMMC_GetCommandResponse>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	7afb      	ldrb	r3, [r7, #11]
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d001      	beq.n	800ca56 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca52:	2301      	movs	r3, #1
 800ca54:	e025      	b.n	800caa2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	22c5      	movs	r2, #197	; 0xc5
 800ca5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f7ff fbab 	bl	800c1ba <SDMMC_GetResponse>
 800ca64:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d106      	bne.n	800ca7e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	0c1b      	lsrs	r3, r3, #16
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e011      	b.n	800caa2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca8c:	e009      	b.n	800caa2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca9c:	e001      	b.n	800caa2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	371c      	adds	r7, #28
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd90      	pop	{r4, r7, pc}
 800caaa:	bf00      	nop
 800caac:	20000000 	.word	0x20000000
 800cab0:	10624dd3 	.word	0x10624dd3

0800cab4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cab4:	b490      	push	{r4, r7}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cabc:	4b21      	ldr	r3, [pc, #132]	; (800cb44 <SDMMC_GetCmdResp7+0x90>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a21      	ldr	r2, [pc, #132]	; (800cb48 <SDMMC_GetCmdResp7+0x94>)
 800cac2:	fba2 2303 	umull	r2, r3, r2, r3
 800cac6:	0a5b      	lsrs	r3, r3, #9
 800cac8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cacc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cad0:	4623      	mov	r3, r4
 800cad2:	1e5c      	subs	r4, r3, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cadc:	e02c      	b.n	800cb38 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0f0      	beq.n	800cad0 <SDMMC_GetCmdResp7+0x1c>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1eb      	bne.n	800cad0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafc:	f003 0304 	and.w	r3, r3, #4
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d004      	beq.n	800cb0e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2204      	movs	r2, #4
 800cb08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb0a:	2304      	movs	r3, #4
 800cb0c:	e014      	b.n	800cb38 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d004      	beq.n	800cb24 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e009      	b.n	800cb38 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2240      	movs	r2, #64	; 0x40
 800cb34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cb36:	2300      	movs	r3, #0
  
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bc90      	pop	{r4, r7}
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	20000000 	.word	0x20000000
 800cb48:	10624dd3 	.word	0x10624dd3

0800cb4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	f107 001c 	add.w	r0, r7, #28
 800cb5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d120      	bne.n	800cba6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	68da      	ldr	r2, [r3, #12]
 800cb74:	4b20      	ldr	r3, [pc, #128]	; (800cbf8 <USB_CoreInit+0xac>)
 800cb76:	4013      	ands	r3, r2
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d105      	bne.n	800cb9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f942 	bl	800ce24 <USB_CoreReset>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73fb      	strb	r3, [r7, #15]
 800cba4:	e010      	b.n	800cbc8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f936 	bl	800ce24 <USB_CoreReset>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d10b      	bne.n	800cbe6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f043 0206 	orr.w	r2, r3, #6
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	f043 0220 	orr.w	r2, r3, #32
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbf2:	b004      	add	sp, #16
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	ffbdffbf 	.word	0xffbdffbf

0800cbfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b083      	sub	sp, #12
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	f043 0201 	orr.w	r2, r3, #1
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b083      	sub	sp, #12
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	f023 0201 	bic.w	r2, r3, #1
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc32:	2300      	movs	r3, #0
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cc58:	78fb      	ldrb	r3, [r7, #3]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d106      	bne.n	800cc6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60da      	str	r2, [r3, #12]
 800cc6a:	e00b      	b.n	800cc84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	60da      	str	r2, [r3, #12]
 800cc7e:	e001      	b.n	800cc84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e003      	b.n	800cc8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cc84:	2032      	movs	r0, #50	; 0x32
 800cc86:	f7f6 f90b 	bl	8002ea0 <HAL_Delay>

  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	019b      	lsls	r3, r3, #6
 800cca6:	f043 0220 	orr.w	r2, r3, #32
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	60fb      	str	r3, [r7, #12]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4a09      	ldr	r2, [pc, #36]	; (800ccdc <USB_FlushTxFifo+0x48>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d901      	bls.n	800ccc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e006      	b.n	800ccce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b20      	cmp	r3, #32
 800ccca:	d0f0      	beq.n	800ccae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	00030d40 	.word	0x00030d40

0800cce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2210      	movs	r2, #16
 800ccf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	4a09      	ldr	r2, [pc, #36]	; (800cd20 <USB_FlushRxFifo+0x40>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d901      	bls.n	800cd04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e006      	b.n	800cd12 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	f003 0310 	and.w	r3, r3, #16
 800cd0c:	2b10      	cmp	r3, #16
 800cd0e:	d0f0      	beq.n	800ccf2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	00030d40 	.word	0x00030d40

0800cd24 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b089      	sub	sp, #36	; 0x24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4611      	mov	r1, r2
 800cd30:	461a      	mov	r2, r3
 800cd32:	460b      	mov	r3, r1
 800cd34:	71fb      	strb	r3, [r7, #7]
 800cd36:	4613      	mov	r3, r2
 800cd38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cd42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d11a      	bne.n	800cd80 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cd4a:	88bb      	ldrh	r3, [r7, #4]
 800cd4c:	3303      	adds	r3, #3
 800cd4e:	089b      	lsrs	r3, r3, #2
 800cd50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cd52:	2300      	movs	r3, #0
 800cd54:	61bb      	str	r3, [r7, #24]
 800cd56:	e00f      	b.n	800cd78 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd58:	79fb      	ldrb	r3, [r7, #7]
 800cd5a:	031a      	lsls	r2, r3, #12
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	4413      	add	r3, r2
 800cd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd64:	461a      	mov	r2, r3
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	3301      	adds	r3, #1
 800cd76:	61bb      	str	r3, [r7, #24]
 800cd78:	69ba      	ldr	r2, [r7, #24]
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d3eb      	bcc.n	800cd58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3724      	adds	r7, #36	; 0x24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b089      	sub	sp, #36	; 0x24
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	60f8      	str	r0, [r7, #12]
 800cd96:	60b9      	str	r1, [r7, #8]
 800cd98:	4613      	mov	r3, r2
 800cd9a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cda4:	88fb      	ldrh	r3, [r7, #6]
 800cda6:	3303      	adds	r3, #3
 800cda8:	089b      	lsrs	r3, r3, #2
 800cdaa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cdac:	2300      	movs	r3, #0
 800cdae:	61bb      	str	r3, [r7, #24]
 800cdb0:	e00b      	b.n	800cdca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	601a      	str	r2, [r3, #0]
    pDest++;
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	61bb      	str	r3, [r7, #24]
 800cdca:	69ba      	ldr	r2, [r7, #24]
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d3ef      	bcc.n	800cdb2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cdd2:	69fb      	ldr	r3, [r7, #28]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3724      	adds	r7, #36	; 0x24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	695b      	ldr	r3, [r3, #20]
 800ce12:	f003 0301 	and.w	r3, r3, #1
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
	...

0800ce24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3301      	adds	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4a13      	ldr	r2, [pc, #76]	; (800ce88 <USB_CoreReset+0x64>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d901      	bls.n	800ce42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	e01b      	b.n	800ce7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	daf2      	bge.n	800ce30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	f043 0201 	orr.w	r2, r3, #1
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4a09      	ldr	r2, [pc, #36]	; (800ce88 <USB_CoreReset+0x64>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d901      	bls.n	800ce6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	e006      	b.n	800ce7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d0f0      	beq.n	800ce5a <USB_CoreReset+0x36>

  return HAL_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	00030d40 	.word	0x00030d40

0800ce8c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	f107 001c 	add.w	r0, r7, #28
 800ce9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cea8:	461a      	mov	r2, r3
 800ceaa:	2300      	movs	r3, #0
 800ceac:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d018      	beq.n	800cef8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d10a      	bne.n	800cee2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ceda:	f043 0304 	orr.w	r3, r3, #4
 800cede:	6013      	str	r3, [r2, #0]
 800cee0:	e014      	b.n	800cf0c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cef0:	f023 0304 	bic.w	r3, r3, #4
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	e009      	b.n	800cf0c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf06:	f023 0304 	bic.w	r3, r3, #4
 800cf0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cf0c:	2110      	movs	r1, #16
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff fec0 	bl	800cc94 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff fee3 	bl	800cce0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60fb      	str	r3, [r7, #12]
 800cf1e:	e015      	b.n	800cf4c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	015a      	lsls	r2, r3, #5
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	4413      	add	r3, r2
 800cf28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	015a      	lsls	r2, r3, #5
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf40:	461a      	mov	r2, r3
 800cf42:	2300      	movs	r3, #0
 800cf44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d3e5      	bcc.n	800cf20 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cf54:	2101      	movs	r1, #1
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f8ac 	bl	800d0b4 <USB_DriveVbus>

  HAL_Delay(200U);
 800cf5c:	20c8      	movs	r0, #200	; 0xc8
 800cf5e:	f7f5 ff9f 	bl	8002ea0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00b      	beq.n	800cf94 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf82:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a14      	ldr	r2, [pc, #80]	; (800cfd8 <USB_HostInit+0x14c>)
 800cf88:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a13      	ldr	r2, [pc, #76]	; (800cfdc <USB_HostInit+0x150>)
 800cf8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cf92:	e009      	b.n	800cfa8 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2280      	movs	r2, #128	; 0x80
 800cf98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a10      	ldr	r2, [pc, #64]	; (800cfe0 <USB_HostInit+0x154>)
 800cf9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a10      	ldr	r2, [pc, #64]	; (800cfe4 <USB_HostInit+0x158>)
 800cfa4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d105      	bne.n	800cfba <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	f043 0210 	orr.w	r2, r3, #16
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	699a      	ldr	r2, [r3, #24]
 800cfbe:	4b0a      	ldr	r3, [pc, #40]	; (800cfe8 <USB_HostInit+0x15c>)
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfd2:	b004      	add	sp, #16
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	01000200 	.word	0x01000200
 800cfdc:	00e00300 	.word	0x00e00300
 800cfe0:	00600080 	.word	0x00600080
 800cfe4:	004000e0 	.word	0x004000e0
 800cfe8:	a3200008 	.word	0xa3200008

0800cfec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d00a:	f023 0303 	bic.w	r3, r3, #3
 800d00e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	f003 0303 	and.w	r3, r3, #3
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d024:	4313      	orrs	r3, r2
 800d026:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d028:	78fb      	ldrb	r3, [r7, #3]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d107      	bne.n	800d03e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d034:	461a      	mov	r2, r3
 800d036:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d03a:	6053      	str	r3, [r2, #4]
 800d03c:	e009      	b.n	800d052 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	2b02      	cmp	r3, #2
 800d042:	d106      	bne.n	800d052 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d04a:	461a      	mov	r2, r3
 800d04c:	f241 7370 	movw	r3, #6000	; 0x1770
 800d050:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3714      	adds	r7, #20
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d080:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d08e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d090:	2064      	movs	r0, #100	; 0x64
 800d092:	f7f5 ff05 	bl	8002ea0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d09e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d0a4:	200a      	movs	r0, #10
 800d0a6:	f7f5 fefb 	bl	8002ea0 <HAL_Delay>

  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d0d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d109      	bne.n	800d0f8 <USB_DriveVbus+0x44>
 800d0e4:	78fb      	ldrb	r3, [r7, #3]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d106      	bne.n	800d0f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d0f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d0f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d102:	d109      	bne.n	800d118 <USB_DriveVbus+0x64>
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d116:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d126:	b480      	push	{r7}
 800d128:	b085      	sub	sp, #20
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	0c5b      	lsrs	r3, r3, #17
 800d144:	f003 0303 	and.w	r3, r3, #3
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	b29b      	uxth	r3, r3
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
	...

0800d178 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800d178:	b480      	push	{r7}
 800d17a:	b087      	sub	sp, #28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	4608      	mov	r0, r1
 800d182:	4611      	mov	r1, r2
 800d184:	461a      	mov	r2, r3
 800d186:	4603      	mov	r3, r0
 800d188:	70fb      	strb	r3, [r7, #3]
 800d18a:	460b      	mov	r3, r1
 800d18c:	70bb      	strb	r3, [r7, #2]
 800d18e:	4613      	mov	r3, r2
 800d190:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d192:	2300      	movs	r3, #0
 800d194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d19a:	78fb      	ldrb	r3, [r7, #3]
 800d19c:	015a      	lsls	r2, r3, #5
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d1ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d87e      	bhi.n	800d2b4 <USB_HC_Init+0x13c>
 800d1b6:	a201      	add	r2, pc, #4	; (adr r2, 800d1bc <USB_HC_Init+0x44>)
 800d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1bc:	0800d1cd 	.word	0x0800d1cd
 800d1c0:	0800d277 	.word	0x0800d277
 800d1c4:	0800d1cd 	.word	0x0800d1cd
 800d1c8:	0800d239 	.word	0x0800d239
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d1cc:	78fb      	ldrb	r3, [r7, #3]
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1d8:	461a      	mov	r2, r3
 800d1da:	f240 439d 	movw	r3, #1181	; 0x49d
 800d1de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d1e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	da10      	bge.n	800d20a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d1e8:	78fb      	ldrb	r3, [r7, #3]
 800d1ea:	015a      	lsls	r2, r3, #5
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	78fa      	ldrb	r2, [r7, #3]
 800d1f8:	0151      	lsls	r1, r2, #5
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	440a      	add	r2, r1
 800d1fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d206:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800d208:	e057      	b.n	800d2ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d212:	2b00      	cmp	r3, #0
 800d214:	d051      	beq.n	800d2ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d216:	78fb      	ldrb	r3, [r7, #3]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	78fa      	ldrb	r2, [r7, #3]
 800d226:	0151      	lsls	r1, r2, #5
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	440a      	add	r2, r1
 800d22c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d230:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d234:	60d3      	str	r3, [r2, #12]
      break;
 800d236:	e040      	b.n	800d2ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d238:	78fb      	ldrb	r3, [r7, #3]
 800d23a:	015a      	lsls	r2, r3, #5
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	4413      	add	r3, r2
 800d240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d244:	461a      	mov	r2, r3
 800d246:	f240 639d 	movw	r3, #1693	; 0x69d
 800d24a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d24c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d250:	2b00      	cmp	r3, #0
 800d252:	da34      	bge.n	800d2be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	015a      	lsls	r2, r3, #5
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	4413      	add	r3, r2
 800d25c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	78fa      	ldrb	r2, [r7, #3]
 800d264:	0151      	lsls	r1, r2, #5
 800d266:	68ba      	ldr	r2, [r7, #8]
 800d268:	440a      	add	r2, r1
 800d26a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d26e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d272:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d274:	e023      	b.n	800d2be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d276:	78fb      	ldrb	r3, [r7, #3]
 800d278:	015a      	lsls	r2, r3, #5
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d282:	461a      	mov	r2, r3
 800d284:	f240 2325 	movw	r3, #549	; 0x225
 800d288:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d28a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	da17      	bge.n	800d2c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d292:	78fb      	ldrb	r3, [r7, #3]
 800d294:	015a      	lsls	r2, r3, #5
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	4413      	add	r3, r2
 800d29a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	78fa      	ldrb	r2, [r7, #3]
 800d2a2:	0151      	lsls	r1, r2, #5
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	440a      	add	r2, r1
 800d2a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d2b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d2b2:	e006      	b.n	800d2c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800d2b8:	e004      	b.n	800d2c4 <USB_HC_Init+0x14c>
      break;
 800d2ba:	bf00      	nop
 800d2bc:	e002      	b.n	800d2c4 <USB_HC_Init+0x14c>
      break;
 800d2be:	bf00      	nop
 800d2c0:	e000      	b.n	800d2c4 <USB_HC_Init+0x14c>
      break;
 800d2c2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2ca:	699a      	ldr	r2, [r3, #24]
 800d2cc:	78fb      	ldrb	r3, [r7, #3]
 800d2ce:	f003 030f 	and.w	r3, r3, #15
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d2d8:	68b9      	ldr	r1, [r7, #8]
 800d2da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d2ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	da03      	bge.n	800d2fe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2fa:	613b      	str	r3, [r7, #16]
 800d2fc:	e001      	b.n	800d302 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d2fe:	2300      	movs	r3, #0
 800d300:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800d302:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d306:	2b02      	cmp	r3, #2
 800d308:	d103      	bne.n	800d312 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d30a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	e001      	b.n	800d316 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d312:	2300      	movs	r3, #0
 800d314:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d316:	787b      	ldrb	r3, [r7, #1]
 800d318:	059b      	lsls	r3, r3, #22
 800d31a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d31e:	78bb      	ldrb	r3, [r7, #2]
 800d320:	02db      	lsls	r3, r3, #11
 800d322:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d326:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d32c:	049b      	lsls	r3, r3, #18
 800d32e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d332:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d336:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d33a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d340:	78fb      	ldrb	r3, [r7, #3]
 800d342:	0159      	lsls	r1, r3, #5
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	440b      	add	r3, r1
 800d348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d34c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d352:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d358:	2b03      	cmp	r3, #3
 800d35a:	d10f      	bne.n	800d37c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d35c:	78fb      	ldrb	r3, [r7, #3]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	4413      	add	r3, r2
 800d364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	78fa      	ldrb	r2, [r7, #3]
 800d36c:	0151      	lsls	r1, r2, #5
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	440a      	add	r2, r1
 800d372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d376:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d37a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	371c      	adds	r7, #28
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop

0800d38c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08c      	sub	sp, #48	; 0x30
 800d390:	af02      	add	r7, sp, #8
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d3a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d028      	beq.n	800d408 <USB_HC_StartXfer+0x7c>
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	791b      	ldrb	r3, [r3, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d124      	bne.n	800d408 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800d3be:	79fb      	ldrb	r3, [r7, #7]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d10b      	bne.n	800d3dc <USB_HC_StartXfer+0x50>
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	795b      	ldrb	r3, [r3, #5]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d107      	bne.n	800d3dc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	785b      	ldrb	r3, [r3, #1]
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f000 fa2e 	bl	800d834 <USB_DoPing>
      return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	e112      	b.n	800d602 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800d3dc:	79fb      	ldrb	r3, [r7, #7]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d112      	bne.n	800d408 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	015a      	lsls	r2, r3, #5
 800d3e6:	6a3b      	ldr	r3, [r7, #32]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	69fa      	ldr	r2, [r7, #28]
 800d3f2:	0151      	lsls	r1, r2, #5
 800d3f4:	6a3a      	ldr	r2, [r7, #32]
 800d3f6:	440a      	add	r2, r1
 800d3f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3fc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d400:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2200      	movs	r2, #0
 800d406:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d018      	beq.n	800d442 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	8912      	ldrh	r2, [r2, #8]
 800d418:	4413      	add	r3, r2
 800d41a:	3b01      	subs	r3, #1
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	8912      	ldrh	r2, [r2, #8]
 800d420:	fbb3 f3f2 	udiv	r3, r3, r2
 800d424:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d426:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d428:	8b7b      	ldrh	r3, [r7, #26]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d90b      	bls.n	800d446 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800d42e:	8b7b      	ldrh	r3, [r7, #26]
 800d430:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d432:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	8912      	ldrh	r2, [r2, #8]
 800d438:	fb02 f203 	mul.w	r2, r2, r3
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	611a      	str	r2, [r3, #16]
 800d440:	e001      	b.n	800d446 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800d442:	2301      	movs	r3, #1
 800d444:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	78db      	ldrb	r3, [r3, #3]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d006      	beq.n	800d45c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d44e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	8912      	ldrh	r2, [r2, #8]
 800d454:	fb02 f203 	mul.w	r2, r2, r3
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d466:	04d9      	lsls	r1, r3, #19
 800d468:	4b68      	ldr	r3, [pc, #416]	; (800d60c <USB_HC_StartXfer+0x280>)
 800d46a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d46c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	7a9b      	ldrb	r3, [r3, #10]
 800d472:	075b      	lsls	r3, r3, #29
 800d474:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d478:	69f9      	ldr	r1, [r7, #28]
 800d47a:	0148      	lsls	r0, r1, #5
 800d47c:	6a39      	ldr	r1, [r7, #32]
 800d47e:	4401      	add	r1, r0
 800d480:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d484:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d486:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d488:	79fb      	ldrb	r3, [r7, #7]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d009      	beq.n	800d4a2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	68d9      	ldr	r1, [r3, #12]
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	015a      	lsls	r2, r3, #5
 800d496:	6a3b      	ldr	r3, [r7, #32]
 800d498:	4413      	add	r3, r2
 800d49a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d49e:	460a      	mov	r2, r1
 800d4a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d4a2:	6a3b      	ldr	r3, [r7, #32]
 800d4a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bf0c      	ite	eq
 800d4b2:	2301      	moveq	r3, #1
 800d4b4:	2300      	movne	r3, #0
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	015a      	lsls	r2, r3, #5
 800d4be:	6a3b      	ldr	r3, [r7, #32]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	69fa      	ldr	r2, [r7, #28]
 800d4ca:	0151      	lsls	r1, r2, #5
 800d4cc:	6a3a      	ldr	r2, [r7, #32]
 800d4ce:	440a      	add	r2, r1
 800d4d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d4d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	015a      	lsls	r2, r3, #5
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	7e7b      	ldrb	r3, [r7, #25]
 800d4ea:	075b      	lsls	r3, r3, #29
 800d4ec:	69f9      	ldr	r1, [r7, #28]
 800d4ee:	0148      	lsls	r0, r1, #5
 800d4f0:	6a39      	ldr	r1, [r7, #32]
 800d4f2:	4401      	add	r1, r0
 800d4f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	015a      	lsls	r2, r3, #5
 800d500:	6a3b      	ldr	r3, [r7, #32]
 800d502:	4413      	add	r3, r2
 800d504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a41      	ldr	r2, [pc, #260]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d50c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d50e:	4b40      	ldr	r3, [pc, #256]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d516:	4a3e      	ldr	r2, [pc, #248]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d518:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	78db      	ldrb	r3, [r3, #3]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d006      	beq.n	800d530 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d522:	4b3b      	ldr	r3, [pc, #236]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d52a:	4a39      	ldr	r2, [pc, #228]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d52c:	6013      	str	r3, [r2, #0]
 800d52e:	e005      	b.n	800d53c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d530:	4b37      	ldr	r3, [pc, #220]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d538:	4a35      	ldr	r2, [pc, #212]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d53a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d53c:	4b34      	ldr	r3, [pc, #208]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d544:	4a32      	ldr	r2, [pc, #200]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d546:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	015a      	lsls	r2, r3, #5
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	4413      	add	r3, r2
 800d550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d554:	461a      	mov	r2, r3
 800d556:	4b2e      	ldr	r3, [pc, #184]	; (800d610 <USB_HC_StartXfer+0x284>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d14e      	bne.n	800d600 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	78db      	ldrb	r3, [r3, #3]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d14a      	bne.n	800d600 <USB_HC_StartXfer+0x274>
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d046      	beq.n	800d600 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	79db      	ldrb	r3, [r3, #7]
 800d576:	2b03      	cmp	r3, #3
 800d578:	d830      	bhi.n	800d5dc <USB_HC_StartXfer+0x250>
 800d57a:	a201      	add	r2, pc, #4	; (adr r2, 800d580 <USB_HC_StartXfer+0x1f4>)
 800d57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d580:	0800d591 	.word	0x0800d591
 800d584:	0800d5b5 	.word	0x0800d5b5
 800d588:	0800d591 	.word	0x0800d591
 800d58c:	0800d5b5 	.word	0x0800d5b5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	3303      	adds	r3, #3
 800d596:	089b      	lsrs	r3, r3, #2
 800d598:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d59a:	8afa      	ldrh	r2, [r7, #22]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d91c      	bls.n	800d5e0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	f043 0220 	orr.w	r2, r3, #32
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	619a      	str	r2, [r3, #24]
          }
          break;
 800d5b2:	e015      	b.n	800d5e0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	3303      	adds	r3, #3
 800d5ba:	089b      	lsrs	r3, r3, #2
 800d5bc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d5be:	8afa      	ldrh	r2, [r7, #22]
 800d5c0:	6a3b      	ldr	r3, [r7, #32]
 800d5c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d90a      	bls.n	800d5e4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	699b      	ldr	r3, [r3, #24]
 800d5d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	619a      	str	r2, [r3, #24]
          }
          break;
 800d5da:	e003      	b.n	800d5e4 <USB_HC_StartXfer+0x258>

        default:
          break;
 800d5dc:	bf00      	nop
 800d5de:	e002      	b.n	800d5e6 <USB_HC_StartXfer+0x25a>
          break;
 800d5e0:	bf00      	nop
 800d5e2:	e000      	b.n	800d5e6 <USB_HC_StartXfer+0x25a>
          break;
 800d5e4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	68d9      	ldr	r1, [r3, #12]
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	785a      	ldrb	r2, [r3, #1]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	b298      	uxth	r0, r3
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7ff fb92 	bl	800cd24 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3728      	adds	r7, #40	; 0x28
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	1ff80000 	.word	0x1ff80000
 800d610:	20000314 	.word	0x20000314

0800d614 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	b29b      	uxth	r3, r3
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3714      	adds	r7, #20
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d636:	b480      	push	{r7}
 800d638:	b087      	sub	sp, #28
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
 800d63e:	460b      	mov	r3, r1
 800d640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800d646:	78fb      	ldrb	r3, [r7, #3]
 800d648:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	015a      	lsls	r2, r3, #5
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	4413      	add	r3, r2
 800d656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	0c9b      	lsrs	r3, r3, #18
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d002      	beq.n	800d670 <USB_HC_Halt+0x3a>
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d16c      	bne.n	800d74a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	015a      	lsls	r2, r3, #5
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	4413      	add	r3, r2
 800d678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	0151      	lsls	r1, r2, #5
 800d682:	693a      	ldr	r2, [r7, #16]
 800d684:	440a      	add	r2, r1
 800d686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d68a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d68e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d143      	bne.n	800d724 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	015a      	lsls	r2, r3, #5
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	0151      	lsls	r1, r2, #5
 800d6ae:	693a      	ldr	r2, [r7, #16]
 800d6b0:	440a      	add	r2, r1
 800d6b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	0151      	lsls	r1, r2, #5
 800d6ce:	693a      	ldr	r2, [r7, #16]
 800d6d0:	440a      	add	r2, r1
 800d6d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d6da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	015a      	lsls	r2, r3, #5
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	0151      	lsls	r1, r2, #5
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	440a      	add	r2, r1
 800d6f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d6f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6fa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	3301      	adds	r3, #1
 800d700:	617b      	str	r3, [r7, #20]
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d708:	d81d      	bhi.n	800d746 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	4413      	add	r3, r2
 800d712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d71c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d720:	d0ec      	beq.n	800d6fc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d722:	e080      	b.n	800d826 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	015a      	lsls	r2, r3, #5
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	4413      	add	r3, r2
 800d72c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	0151      	lsls	r1, r2, #5
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	440a      	add	r2, r1
 800d73a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d73e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d742:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d744:	e06f      	b.n	800d826 <USB_HC_Halt+0x1f0>
          break;
 800d746:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d748:	e06d      	b.n	800d826 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	4413      	add	r3, r2
 800d752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	0151      	lsls	r1, r2, #5
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	440a      	add	r2, r1
 800d760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d768:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d143      	bne.n	800d802 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	015a      	lsls	r2, r3, #5
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	4413      	add	r3, r2
 800d782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	0151      	lsls	r1, r2, #5
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	440a      	add	r2, r1
 800d790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d798:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	015a      	lsls	r2, r3, #5
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	0151      	lsls	r1, r2, #5
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	440a      	add	r2, r1
 800d7b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d7b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	015a      	lsls	r2, r3, #5
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	0151      	lsls	r1, r2, #5
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	440a      	add	r2, r1
 800d7d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d7d8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	617b      	str	r3, [r7, #20]
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7e6:	d81d      	bhi.n	800d824 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	015a      	lsls	r2, r3, #5
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7fe:	d0ec      	beq.n	800d7da <USB_HC_Halt+0x1a4>
 800d800:	e011      	b.n	800d826 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	015a      	lsls	r2, r3, #5
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	4413      	add	r3, r2
 800d80a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	0151      	lsls	r1, r2, #5
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	440a      	add	r2, r1
 800d818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d81c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d820:	6013      	str	r3, [r2, #0]
 800d822:	e000      	b.n	800d826 <USB_HC_Halt+0x1f0>
          break;
 800d824:	bf00      	nop
    }
  }

  return HAL_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	371c      	adds	r7, #28
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d834:	b480      	push	{r7}
 800d836:	b087      	sub	sp, #28
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d844:	78fb      	ldrb	r3, [r7, #3]
 800d846:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d848:	2301      	movs	r3, #1
 800d84a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	04da      	lsls	r2, r3, #19
 800d850:	4b15      	ldr	r3, [pc, #84]	; (800d8a8 <USB_DoPing+0x74>)
 800d852:	4013      	ands	r3, r2
 800d854:	693a      	ldr	r2, [r7, #16]
 800d856:	0151      	lsls	r1, r2, #5
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	440a      	add	r2, r1
 800d85c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d864:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	015a      	lsls	r2, r3, #5
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	4413      	add	r3, r2
 800d86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d87c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d884:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	015a      	lsls	r2, r3, #5
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	4413      	add	r3, r2
 800d88e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d892:	461a      	mov	r2, r3
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	371c      	adds	r7, #28
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	1ff80000 	.word	0x1ff80000

0800d8ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff f9ae 	bl	800cc1e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d8c2:	2110      	movs	r1, #16
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7ff f9e5 	bl	800cc94 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff fa08 	bl	800cce0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	613b      	str	r3, [r7, #16]
 800d8d4:	e01f      	b.n	800d916 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d8ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d8fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	015a      	lsls	r2, r3, #5
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	4413      	add	r3, r2
 800d906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d90a:	461a      	mov	r2, r3
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	3301      	adds	r3, #1
 800d914:	613b      	str	r3, [r7, #16]
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b0f      	cmp	r3, #15
 800d91a:	d9dc      	bls.n	800d8d6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d91c:	2300      	movs	r3, #0
 800d91e:	613b      	str	r3, [r7, #16]
 800d920:	e034      	b.n	800d98c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	015a      	lsls	r2, r3, #5
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	4413      	add	r3, r2
 800d92a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d938:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d940:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d948:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	015a      	lsls	r2, r3, #5
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	4413      	add	r3, r2
 800d952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d956:	461a      	mov	r2, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	3301      	adds	r3, #1
 800d960:	617b      	str	r3, [r7, #20]
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d968:	d80c      	bhi.n	800d984 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	015a      	lsls	r2, r3, #5
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	4413      	add	r3, r2
 800d972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d97c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d980:	d0ec      	beq.n	800d95c <USB_StopHost+0xb0>
 800d982:	e000      	b.n	800d986 <USB_StopHost+0xda>
        break;
 800d984:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	3301      	adds	r3, #1
 800d98a:	613b      	str	r3, [r7, #16]
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	2b0f      	cmp	r3, #15
 800d990:	d9c7      	bls.n	800d922 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d998:	461a      	mov	r2, r3
 800d99a:	f04f 33ff 	mov.w	r3, #4294967295
 800d99e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff f927 	bl	800cbfc <USB_EnableGlobalInt>

  return HAL_OK;
 800d9ae:	2300      	movs	r3, #0
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d9bc:	4904      	ldr	r1, [pc, #16]	; (800d9d0 <MX_FATFS_Init+0x18>)
 800d9be:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <MX_FATFS_Init+0x1c>)
 800d9c0:	f002 fbec 	bl	801019c <FATFS_LinkDriver>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <MX_FATFS_Init+0x20>)
 800d9ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d9cc:	bf00      	nop
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	20008cac 	.word	0x20008cac
 800d9d4:	0801378c 	.word	0x0801378c
 800d9d8:	20008ca8 	.word	0x20008ca8

0800d9dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d9e6:	f000 f87b 	bl	800dae0 <BSP_SD_IsDetected>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d001      	beq.n	800d9f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	e012      	b.n	800da1a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d9f4:	480b      	ldr	r0, [pc, #44]	; (800da24 <BSP_SD_Init+0x48>)
 800d9f6:	f7fb fa0b 	bl	8008e10 <HAL_SD_Init>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d9fe:	79fb      	ldrb	r3, [r7, #7]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d109      	bne.n	800da18 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800da04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800da08:	4806      	ldr	r0, [pc, #24]	; (800da24 <BSP_SD_Init+0x48>)
 800da0a:	f7fb fe4d 	bl	80096a8 <HAL_SD_ConfigWideBusOperation>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800da18:	79fb      	ldrb	r3, [r7, #7]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	200088b0 	.word	0x200088b0

0800da28 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da34:	2300      	movs	r3, #0
 800da36:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	68f9      	ldr	r1, [r7, #12]
 800da3e:	4806      	ldr	r0, [pc, #24]	; (800da58 <BSP_SD_ReadBlocks_DMA+0x30>)
 800da40:	f7fb fa7e 	bl	8008f40 <HAL_SD_ReadBlocks_DMA>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	200088b0 	.word	0x200088b0

0800da5c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b086      	sub	sp, #24
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	68f9      	ldr	r1, [r7, #12]
 800da72:	4806      	ldr	r0, [pc, #24]	; (800da8c <BSP_SD_WriteBlocks_DMA+0x30>)
 800da74:	f7fb fb50 	bl	8009118 <HAL_SD_WriteBlocks_DMA>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da82:	7dfb      	ldrb	r3, [r7, #23]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	200088b0 	.word	0x200088b0

0800da90 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800da94:	4805      	ldr	r0, [pc, #20]	; (800daac <BSP_SD_GetCardState+0x1c>)
 800da96:	f7fb fe83 	bl	80097a0 <HAL_SD_GetCardState>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b04      	cmp	r3, #4
 800da9e:	bf14      	ite	ne
 800daa0:	2301      	movne	r3, #1
 800daa2:	2300      	moveq	r3, #0
 800daa4:	b2db      	uxtb	r3, r3
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	200088b0 	.word	0x200088b0

0800dab0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dab8:	6879      	ldr	r1, [r7, #4]
 800daba:	4803      	ldr	r0, [pc, #12]	; (800dac8 <BSP_SD_GetCardInfo+0x18>)
 800dabc:	f7fb fdc8 	bl	8009650 <HAL_SD_GetCardInfo>
}
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	200088b0 	.word	0x200088b0

0800dacc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dad4:	f000 f9b2 	bl	800de3c <BSP_SD_ReadCpltCallback>
}
 800dad8:	bf00      	nop
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dae6:	2301      	movs	r3, #1
 800dae8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800daea:	f000 f80b 	bl	800db04 <BSP_PlatformIsDetected>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800daf4:	2300      	movs	r3, #0
 800daf6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	b2db      	uxtb	r3, r3
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800db0a:	2301      	movs	r3, #1
 800db0c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800db0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800db12:	4806      	ldr	r0, [pc, #24]	; (800db2c <BSP_PlatformIsDetected+0x28>)
 800db14:	f7f6 ff72 	bl	80049fc <HAL_GPIO_ReadPin>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800db1e:	2300      	movs	r3, #0
 800db20:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800db22:	79fb      	ldrb	r3, [r7, #7]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	40020800 	.word	0x40020800

0800db30 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800db38:	f002 fb7c 	bl	8010234 <osKernelSysTick>
 800db3c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800db3e:	e006      	b.n	800db4e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800db40:	f7ff ffa6 	bl	800da90 <BSP_SD_GetCardState>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d101      	bne.n	800db4e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	e009      	b.n	800db62 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800db4e:	f002 fb71 	bl	8010234 <osKernelSysTick>
 800db52:	4602      	mov	r2, r0
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	1ad3      	subs	r3, r2, r3
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d8f0      	bhi.n	800db40 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800db5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	4603      	mov	r3, r0
 800db74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800db76:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <SD_CheckStatus+0x38>)
 800db78:	2201      	movs	r2, #1
 800db7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800db7c:	f7ff ff88 	bl	800da90 <BSP_SD_GetCardState>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d107      	bne.n	800db96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800db86:	4b07      	ldr	r3, [pc, #28]	; (800dba4 <SD_CheckStatus+0x38>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	f023 0301 	bic.w	r3, r3, #1
 800db90:	b2da      	uxtb	r2, r3
 800db92:	4b04      	ldr	r3, [pc, #16]	; (800dba4 <SD_CheckStatus+0x38>)
 800db94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800db96:	4b03      	ldr	r3, [pc, #12]	; (800dba4 <SD_CheckStatus+0x38>)
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	b2db      	uxtb	r3, r3
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	20000009 	.word	0x20000009

0800dba8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b087      	sub	sp, #28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dbb2:	4b20      	ldr	r3, [pc, #128]	; (800dc34 <SD_initialize+0x8c>)
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800dbb8:	f002 fb30 	bl	801021c <osKernelRunning>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d030      	beq.n	800dc24 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dbc2:	f7ff ff0b 	bl	800d9dc <BSP_SD_Init>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d107      	bne.n	800dbdc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff ffcc 	bl	800db6c <SD_CheckStatus>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	4b16      	ldr	r3, [pc, #88]	; (800dc34 <SD_initialize+0x8c>)
 800dbda:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dbdc:	4b15      	ldr	r3, [pc, #84]	; (800dc34 <SD_initialize+0x8c>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d01e      	beq.n	800dc24 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800dbe6:	4b14      	ldr	r3, [pc, #80]	; (800dc38 <SD_initialize+0x90>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10e      	bne.n	800dc0c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800dbee:	4b13      	ldr	r3, [pc, #76]	; (800dc3c <SD_initialize+0x94>)
 800dbf0:	f107 0408 	add.w	r4, r7, #8
 800dbf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dbf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800dbfa:	f107 0308 	add.w	r3, r7, #8
 800dbfe:	2100      	movs	r1, #0
 800dc00:	4618      	mov	r0, r3
 800dc02:	f002 fb87 	bl	8010314 <osMessageCreate>
 800dc06:	4602      	mov	r2, r0
 800dc08:	4b0b      	ldr	r3, [pc, #44]	; (800dc38 <SD_initialize+0x90>)
 800dc0a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800dc0c:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <SD_initialize+0x90>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d107      	bne.n	800dc24 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800dc14:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <SD_initialize+0x8c>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	f043 0301 	orr.w	r3, r3, #1
 800dc1e:	b2da      	uxtb	r2, r3
 800dc20:	4b04      	ldr	r3, [pc, #16]	; (800dc34 <SD_initialize+0x8c>)
 800dc22:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800dc24:	4b03      	ldr	r3, [pc, #12]	; (800dc34 <SD_initialize+0x8c>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	b2db      	uxtb	r3, r3
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	371c      	adds	r7, #28
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd90      	pop	{r4, r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20000009 	.word	0x20000009
 800dc38:	20000318 	.word	0x20000318
 800dc3c:	08013720 	.word	0x08013720

0800dc40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4603      	mov	r3, r0
 800dc48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff ff8d 	bl	800db6c <SD_CheckStatus>
 800dc52:	4603      	mov	r3, r0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b08a      	sub	sp, #40	; 0x28
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	607a      	str	r2, [r7, #4]
 800dc66:	603b      	str	r3, [r7, #0]
 800dc68:	4603      	mov	r3, r0
 800dc6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dc72:	f247 5030 	movw	r0, #30000	; 0x7530
 800dc76:	f7ff ff5b 	bl	800db30 <SD_CheckStatusWithTimeout>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	da02      	bge.n	800dc86 <SD_read+0x2a>
  {
    return res;
 800dc80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc84:	e032      	b.n	800dcec <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	6879      	ldr	r1, [r7, #4]
 800dc8a:	68b8      	ldr	r0, [r7, #8]
 800dc8c:	f7ff fecc 	bl	800da28 <BSP_SD_ReadBlocks_DMA>
 800dc90:	4603      	mov	r3, r0
 800dc92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800dc96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d124      	bne.n	800dce8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800dc9e:	4b15      	ldr	r3, [pc, #84]	; (800dcf4 <SD_read+0x98>)
 800dca0:	6819      	ldr	r1, [r3, #0]
 800dca2:	f107 0314 	add.w	r3, r7, #20
 800dca6:	f247 5230 	movw	r2, #30000	; 0x7530
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f002 fb9c 	bl	80103e8 <osMessageGet>

    if (event.status == osEventMessage)
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	2b10      	cmp	r3, #16
 800dcb4:	d118      	bne.n	800dce8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d115      	bne.n	800dce8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800dcbc:	f002 faba 	bl	8010234 <osKernelSysTick>
 800dcc0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dcc2:	e008      	b.n	800dcd6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dcc4:	f7ff fee4 	bl	800da90 <BSP_SD_GetCardState>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d103      	bne.n	800dcd6 <SD_read+0x7a>
              {
                res = RES_OK;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800dcd4:	e008      	b.n	800dce8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dcd6:	f002 faad 	bl	8010234 <osKernelSysTick>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	1ad3      	subs	r3, r2, r3
 800dce0:	f247 522f 	movw	r2, #29999	; 0x752f
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d9ed      	bls.n	800dcc4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800dce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3728      	adds	r7, #40	; 0x28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	20000318 	.word	0x20000318

0800dcf8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08a      	sub	sp, #40	; 0x28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60b9      	str	r1, [r7, #8]
 800dd00:	607a      	str	r2, [r7, #4]
 800dd02:	603b      	str	r3, [r7, #0]
 800dd04:	4603      	mov	r3, r0
 800dd06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd0e:	f247 5030 	movw	r0, #30000	; 0x7530
 800dd12:	f7ff ff0d 	bl	800db30 <SD_CheckStatusWithTimeout>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da02      	bge.n	800dd22 <SD_write+0x2a>
  {
    return res;
 800dd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd20:	e02e      	b.n	800dd80 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dd22:	683a      	ldr	r2, [r7, #0]
 800dd24:	6879      	ldr	r1, [r7, #4]
 800dd26:	68b8      	ldr	r0, [r7, #8]
 800dd28:	f7ff fe98 	bl	800da5c <BSP_SD_WriteBlocks_DMA>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d124      	bne.n	800dd7c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800dd32:	4b15      	ldr	r3, [pc, #84]	; (800dd88 <SD_write+0x90>)
 800dd34:	6819      	ldr	r1, [r3, #0]
 800dd36:	f107 0314 	add.w	r3, r7, #20
 800dd3a:	f247 5230 	movw	r2, #30000	; 0x7530
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f002 fb52 	bl	80103e8 <osMessageGet>

    if (event.status == osEventMessage)
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	2b10      	cmp	r3, #16
 800dd48:	d118      	bne.n	800dd7c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d115      	bne.n	800dd7c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800dd50:	f002 fa70 	bl	8010234 <osKernelSysTick>
 800dd54:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800dd56:	e008      	b.n	800dd6a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd58:	f7ff fe9a 	bl	800da90 <BSP_SD_GetCardState>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d103      	bne.n	800dd6a <SD_write+0x72>
          {
            res = RES_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800dd68:	e008      	b.n	800dd7c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800dd6a:	f002 fa63 	bl	8010234 <osKernelSysTick>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	6a3b      	ldr	r3, [r7, #32]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	f247 522f 	movw	r2, #29999	; 0x752f
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d9ed      	bls.n	800dd58 <SD_write+0x60>
    }

  }
#endif

  return res;
 800dd7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3728      	adds	r7, #40	; 0x28
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	20000318 	.word	0x20000318

0800dd8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b08c      	sub	sp, #48	; 0x30
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	4603      	mov	r3, r0
 800dd94:	603a      	str	r2, [r7, #0]
 800dd96:	71fb      	strb	r3, [r7, #7]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dda2:	4b25      	ldr	r3, [pc, #148]	; (800de38 <SD_ioctl+0xac>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	f003 0301 	and.w	r3, r3, #1
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <SD_ioctl+0x28>
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e03c      	b.n	800de2e <SD_ioctl+0xa2>

  switch (cmd)
 800ddb4:	79bb      	ldrb	r3, [r7, #6]
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d834      	bhi.n	800de24 <SD_ioctl+0x98>
 800ddba:	a201      	add	r2, pc, #4	; (adr r2, 800ddc0 <SD_ioctl+0x34>)
 800ddbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc0:	0800ddd1 	.word	0x0800ddd1
 800ddc4:	0800ddd9 	.word	0x0800ddd9
 800ddc8:	0800ddf1 	.word	0x0800ddf1
 800ddcc:	0800de0b 	.word	0x0800de0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddd6:	e028      	b.n	800de2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddd8:	f107 030c 	add.w	r3, r7, #12
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff fe67 	bl	800dab0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dde2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddee:	e01c      	b.n	800de2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddf0:	f107 030c 	add.w	r3, r7, #12
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff fe5b 	bl	800dab0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ddfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de08:	e00f      	b.n	800de2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de0a:	f107 030c 	add.w	r3, r7, #12
 800de0e:	4618      	mov	r0, r3
 800de10:	f7ff fe4e 	bl	800dab0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	0a5a      	lsrs	r2, r3, #9
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de22:	e002      	b.n	800de2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800de24:	2304      	movs	r3, #4
 800de26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800de2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3730      	adds	r7, #48	; 0x30
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20000009 	.word	0x20000009

0800de3c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800de40:	4b04      	ldr	r3, [pc, #16]	; (800de54 <BSP_SD_ReadCpltCallback+0x18>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2200      	movs	r2, #0
 800de46:	2101      	movs	r1, #1
 800de48:	4618      	mov	r0, r3
 800de4a:	f002 fa8d 	bl	8010368 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800de4e:	bf00      	nop
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	20000318 	.word	0x20000318

0800de58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800de58:	b590      	push	{r4, r7, lr}
 800de5a:	b089      	sub	sp, #36	; 0x24
 800de5c:	af04      	add	r7, sp, #16
 800de5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800de60:	2301      	movs	r3, #1
 800de62:	2202      	movs	r2, #2
 800de64:	2102      	movs	r1, #2
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fcba 	bl	800e7e0 <USBH_FindInterface>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800de70:	7bfb      	ldrb	r3, [r7, #15]
 800de72:	2bff      	cmp	r3, #255	; 0xff
 800de74:	d002      	beq.n	800de7c <USBH_CDC_InterfaceInit+0x24>
 800de76:	7bfb      	ldrb	r3, [r7, #15]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d901      	bls.n	800de80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800de7c:	2302      	movs	r3, #2
 800de7e:	e13d      	b.n	800e0fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800de80:	7bfb      	ldrb	r3, [r7, #15]
 800de82:	4619      	mov	r1, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fc8f 	bl	800e7a8 <USBH_SelectInterface>
 800de8a:	4603      	mov	r3, r0
 800de8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d001      	beq.n	800de98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800de94:	2302      	movs	r3, #2
 800de96:	e131      	b.n	800e0fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800de9e:	2050      	movs	r0, #80	; 0x50
 800dea0:	f004 ff88 	bl	8012db4 <malloc>
 800dea4:	4603      	mov	r3, r0
 800dea6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800deae:	69db      	ldr	r3, [r3, #28]
 800deb0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800deb8:	2302      	movs	r3, #2
 800deba:	e11f      	b.n	800e0fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800debc:	2250      	movs	r2, #80	; 0x50
 800debe:	2100      	movs	r1, #0
 800dec0:	68b8      	ldr	r0, [r7, #8]
 800dec2:	f004 ff92 	bl	8012dea <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	211a      	movs	r1, #26
 800decc:	fb01 f303 	mul.w	r3, r1, r3
 800ded0:	4413      	add	r3, r2
 800ded2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	b25b      	sxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	da15      	bge.n	800df0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dede:	7bfb      	ldrb	r3, [r7, #15]
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	211a      	movs	r1, #26
 800dee4:	fb01 f303 	mul.w	r3, r1, r3
 800dee8:	4413      	add	r3, r2
 800deea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800deee:	781a      	ldrb	r2, [r3, #0]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	211a      	movs	r1, #26
 800defa:	fb01 f303 	mul.w	r3, r1, r3
 800defe:	4413      	add	r3, r2
 800df00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800df04:	881a      	ldrh	r2, [r3, #0]
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f002 f894 	bl	801003e <USBH_AllocPipe>
 800df16:	4603      	mov	r3, r0
 800df18:	461a      	mov	r2, r3
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	7819      	ldrb	r1, [r3, #0]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	7858      	ldrb	r0, [r3, #1]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	8952      	ldrh	r2, [r2, #10]
 800df36:	9202      	str	r2, [sp, #8]
 800df38:	2203      	movs	r2, #3
 800df3a:	9201      	str	r2, [sp, #4]
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	4623      	mov	r3, r4
 800df40:	4602      	mov	r2, r0
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f002 f84c 	bl	800ffe0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	2200      	movs	r2, #0
 800df4e:	4619      	mov	r1, r3
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f004 fe7f 	bl	8012c54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800df56:	2300      	movs	r3, #0
 800df58:	2200      	movs	r2, #0
 800df5a:	210a      	movs	r1, #10
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fc3f 	bl	800e7e0 <USBH_FindInterface>
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	2bff      	cmp	r3, #255	; 0xff
 800df6a:	d002      	beq.n	800df72 <USBH_CDC_InterfaceInit+0x11a>
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d901      	bls.n	800df76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800df72:	2302      	movs	r3, #2
 800df74:	e0c2      	b.n	800e0fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800df76:	7bfb      	ldrb	r3, [r7, #15]
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	211a      	movs	r1, #26
 800df7c:	fb01 f303 	mul.w	r3, r1, r3
 800df80:	4413      	add	r3, r2
 800df82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	b25b      	sxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	da16      	bge.n	800dfbc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	211a      	movs	r1, #26
 800df94:	fb01 f303 	mul.w	r3, r1, r3
 800df98:	4413      	add	r3, r2
 800df9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800df9e:	781a      	ldrb	r2, [r3, #0]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	211a      	movs	r1, #26
 800dfaa:	fb01 f303 	mul.w	r3, r1, r3
 800dfae:	4413      	add	r3, r2
 800dfb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dfb4:	881a      	ldrh	r2, [r3, #0]
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	835a      	strh	r2, [r3, #26]
 800dfba:	e015      	b.n	800dfe8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	211a      	movs	r1, #26
 800dfc2:	fb01 f303 	mul.w	r3, r1, r3
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dfcc:	781a      	ldrb	r2, [r3, #0]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	211a      	movs	r1, #26
 800dfd8:	fb01 f303 	mul.w	r3, r1, r3
 800dfdc:	4413      	add	r3, r2
 800dfde:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dfe2:	881a      	ldrh	r2, [r3, #0]
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	211a      	movs	r1, #26
 800dfee:	fb01 f303 	mul.w	r3, r1, r3
 800dff2:	4413      	add	r3, r2
 800dff4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	b25b      	sxtb	r3, r3
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	da16      	bge.n	800e02e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e000:	7bfb      	ldrb	r3, [r7, #15]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	211a      	movs	r1, #26
 800e006:	fb01 f303 	mul.w	r3, r1, r3
 800e00a:	4413      	add	r3, r2
 800e00c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e010:	781a      	ldrb	r2, [r3, #0]
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e016:	7bfb      	ldrb	r3, [r7, #15]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	211a      	movs	r1, #26
 800e01c:	fb01 f303 	mul.w	r3, r1, r3
 800e020:	4413      	add	r3, r2
 800e022:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e026:	881a      	ldrh	r2, [r3, #0]
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	835a      	strh	r2, [r3, #26]
 800e02c:	e015      	b.n	800e05a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	211a      	movs	r1, #26
 800e034:	fb01 f303 	mul.w	r3, r1, r3
 800e038:	4413      	add	r3, r2
 800e03a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e03e:	781a      	ldrb	r2, [r3, #0]
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e044:	7bfb      	ldrb	r3, [r7, #15]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	211a      	movs	r1, #26
 800e04a:	fb01 f303 	mul.w	r3, r1, r3
 800e04e:	4413      	add	r3, r2
 800e050:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e054:	881a      	ldrh	r2, [r3, #0]
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	7b9b      	ldrb	r3, [r3, #14]
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f001 ffec 	bl	801003e <USBH_AllocPipe>
 800e066:	4603      	mov	r3, r0
 800e068:	461a      	mov	r2, r3
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	7bdb      	ldrb	r3, [r3, #15]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f001 ffe2 	bl	801003e <USBH_AllocPipe>
 800e07a:	4603      	mov	r3, r0
 800e07c:	461a      	mov	r2, r3
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	7b59      	ldrb	r1, [r3, #13]
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	7b98      	ldrb	r0, [r3, #14]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	8b12      	ldrh	r2, [r2, #24]
 800e09a:	9202      	str	r2, [sp, #8]
 800e09c:	2202      	movs	r2, #2
 800e09e:	9201      	str	r2, [sp, #4]
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	4623      	mov	r3, r4
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f001 ff9a 	bl	800ffe0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	7b19      	ldrb	r1, [r3, #12]
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	7bd8      	ldrb	r0, [r3, #15]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	8b52      	ldrh	r2, [r2, #26]
 800e0c4:	9202      	str	r2, [sp, #8]
 800e0c6:	2202      	movs	r2, #2
 800e0c8:	9201      	str	r2, [sp, #4]
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	4623      	mov	r3, r4
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f001 ff85 	bl	800ffe0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	7b5b      	ldrb	r3, [r3, #13]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f004 fdb4 	bl	8012c54 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	7b1b      	ldrb	r3, [r3, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f004 fdad 	bl	8012c54 <USBH_LL_SetToggle>

  return USBH_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	bd90      	pop	{r4, r7, pc}

0800e104 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e112:	69db      	ldr	r3, [r3, #28]
 800e114:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00e      	beq.n	800e13c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	4619      	mov	r1, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f001 ff7a 	bl	801001e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	4619      	mov	r1, r3
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f001 ffa5 	bl	8010080 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2200      	movs	r2, #0
 800e13a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	7b1b      	ldrb	r3, [r3, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00e      	beq.n	800e162 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	7b1b      	ldrb	r3, [r3, #12]
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f001 ff67 	bl	801001e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	7b1b      	ldrb	r3, [r3, #12]
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f001 ff92 	bl	8010080 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	7b5b      	ldrb	r3, [r3, #13]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00e      	beq.n	800e188 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	7b5b      	ldrb	r3, [r3, #13]
 800e16e:	4619      	mov	r1, r3
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f001 ff54 	bl	801001e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	7b5b      	ldrb	r3, [r3, #13]
 800e17a:	4619      	mov	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f001 ff7f 	bl	8010080 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e18e:	69db      	ldr	r3, [r3, #28]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00b      	beq.n	800e1ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e19a:	69db      	ldr	r3, [r3, #28]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f004 fe11 	bl	8012dc4 <free>
    phost->pActiveClass->pData = 0U;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b084      	sub	sp, #16
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1c4:	69db      	ldr	r3, [r3, #28]
 800e1c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	3340      	adds	r3, #64	; 0x40
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 f8b1 	bl	800e336 <GetLineCoding>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e1d8:	7afb      	ldrb	r3, [r7, #11]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d105      	bne.n	800e1ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1e4:	2102      	movs	r1, #2
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e1ea:	7afb      	ldrb	r3, [r7, #11]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e20a:	69db      	ldr	r3, [r3, #28]
 800e20c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e214:	2b04      	cmp	r3, #4
 800e216:	d877      	bhi.n	800e308 <USBH_CDC_Process+0x114>
 800e218:	a201      	add	r2, pc, #4	; (adr r2, 800e220 <USBH_CDC_Process+0x2c>)
 800e21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21e:	bf00      	nop
 800e220:	0800e235 	.word	0x0800e235
 800e224:	0800e23b 	.word	0x0800e23b
 800e228:	0800e26b 	.word	0x0800e26b
 800e22c:	0800e2df 	.word	0x0800e2df
 800e230:	0800e2ed 	.word	0x0800e2ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e234:	2300      	movs	r3, #0
 800e236:	73fb      	strb	r3, [r7, #15]
      break;
 800e238:	e06d      	b.n	800e316 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 f897 	bl	800e374 <SetLineCoding>
 800e246:	4603      	mov	r3, r0
 800e248:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e24a:	7bbb      	ldrb	r3, [r7, #14]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d104      	bne.n	800e25a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2202      	movs	r2, #2
 800e254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e258:	e058      	b.n	800e30c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d055      	beq.n	800e30c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2204      	movs	r2, #4
 800e264:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e268:	e050      	b.n	800e30c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	3340      	adds	r3, #64	; 0x40
 800e26e:	4619      	mov	r1, r3
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 f860 	bl	800e336 <GetLineCoding>
 800e276:	4603      	mov	r3, r0
 800e278:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e27a:	7bbb      	ldrb	r3, [r7, #14]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d126      	bne.n	800e2ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e292:	791b      	ldrb	r3, [r3, #4]
 800e294:	429a      	cmp	r2, r3
 800e296:	d13b      	bne.n	800e310 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d133      	bne.n	800e310 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d12b      	bne.n	800e310 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d124      	bne.n	800e310 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 f984 	bl	800e5d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e2cc:	e020      	b.n	800e310 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d01d      	beq.n	800e310 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	2204      	movs	r2, #4
 800e2d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e2dc:	e018      	b.n	800e310 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 f867 	bl	800e3b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f8f8 	bl	800e4da <CDC_ProcessReception>
      break;
 800e2ea:	e014      	b.n	800e316 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f001 f953 	bl	800f59a <USBH_ClrFeature>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10a      	bne.n	800e314 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2200      	movs	r2, #0
 800e302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e306:	e005      	b.n	800e314 <USBH_CDC_Process+0x120>

    default:
      break;
 800e308:	bf00      	nop
 800e30a:	e004      	b.n	800e316 <USBH_CDC_Process+0x122>
      break;
 800e30c:	bf00      	nop
 800e30e:	e002      	b.n	800e316 <USBH_CDC_Process+0x122>
      break;
 800e310:	bf00      	nop
 800e312:	e000      	b.n	800e316 <USBH_CDC_Process+0x122>
      break;
 800e314:	bf00      	nop

  }

  return status;
 800e316:	7bfb      	ldrb	r3, [r7, #15]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	370c      	adds	r7, #12
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr

0800e336 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b082      	sub	sp, #8
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	22a1      	movs	r2, #161	; 0xa1
 800e344:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2221      	movs	r2, #33	; 0x21
 800e34a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2207      	movs	r2, #7
 800e35c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2207      	movs	r2, #7
 800e362:	4619      	mov	r1, r3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f001 faf8 	bl	800f95a <USBH_CtlReq>
 800e36a:	4603      	mov	r3, r0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2221      	movs	r2, #33	; 0x21
 800e382:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2220      	movs	r2, #32
 800e388:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2207      	movs	r2, #7
 800e39a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2207      	movs	r2, #7
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f001 fad9 	bl	800f95a <USBH_CtlReq>
 800e3a8:	4603      	mov	r3, r0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b086      	sub	sp, #24
 800e3b6:	af02      	add	r7, sp, #8
 800e3b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3c0:	69db      	ldr	r3, [r3, #28]
 800e3c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d002      	beq.n	800e3d8 <CDC_ProcessTransmission+0x26>
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d025      	beq.n	800e422 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e3d6:	e07c      	b.n	800e4d2 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	8b12      	ldrh	r2, [r2, #24]
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d90c      	bls.n	800e3fe <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	69d9      	ldr	r1, [r3, #28]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	8b1a      	ldrh	r2, [r3, #24]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	7b58      	ldrb	r0, [r3, #13]
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fdaf 	bl	800ff5a <USBH_BulkSendData>
 800e3fc:	e00c      	b.n	800e418 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e406:	b29a      	uxth	r2, r3
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	7b58      	ldrb	r0, [r3, #13]
 800e40c:	2301      	movs	r3, #1
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	4603      	mov	r3, r0
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f001 fda1 	bl	800ff5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2202      	movs	r2, #2
 800e41c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e420:	e057      	b.n	800e4d2 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	7b5b      	ldrb	r3, [r3, #13]
 800e426:	4619      	mov	r1, r3
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f004 fbe9 	bl	8012c00 <USBH_LL_GetURBState>
 800e42e:	4603      	mov	r3, r0
 800e430:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e432:	7afb      	ldrb	r3, [r7, #11]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d136      	bne.n	800e4a6 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	8b12      	ldrh	r2, [r2, #24]
 800e440:	4293      	cmp	r3, r2
 800e442:	d90e      	bls.n	800e462 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	8b12      	ldrh	r2, [r2, #24]
 800e44c:	1a9a      	subs	r2, r3, r2
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	69db      	ldr	r3, [r3, #28]
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	8b12      	ldrh	r2, [r2, #24]
 800e45a:	441a      	add	r2, r3
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	61da      	str	r2, [r3, #28]
 800e460:	e002      	b.n	800e468 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e478:	e006      	b.n	800e488 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2200      	movs	r2, #0
 800e47e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f892 	bl	800e5ac <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2204      	movs	r2, #4
 800e48c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e49c:	2200      	movs	r2, #0
 800e49e:	4619      	mov	r1, r3
 800e4a0:	f001 ff62 	bl	8010368 <osMessagePut>
      break;
 800e4a4:	e014      	b.n	800e4d0 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800e4a6:	7afb      	ldrb	r3, [r7, #11]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d111      	bne.n	800e4d0 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2204      	movs	r2, #4
 800e4b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	f001 ff4c 	bl	8010368 <osMessagePut>
      break;
 800e4d0:	bf00      	nop
  }
}
 800e4d2:	bf00      	nop
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b086      	sub	sp, #24
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4e8:	69db      	ldr	r3, [r3, #28]
 800e4ea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e4f6:	2b03      	cmp	r3, #3
 800e4f8:	d002      	beq.n	800e500 <CDC_ProcessReception+0x26>
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	d00e      	beq.n	800e51c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e4fe:	e051      	b.n	800e5a4 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	6a19      	ldr	r1, [r3, #32]
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	8b5a      	ldrh	r2, [r3, #26]
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	7b1b      	ldrb	r3, [r3, #12]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 fd49 	bl	800ffa4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2204      	movs	r2, #4
 800e516:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e51a:	e043      	b.n	800e5a4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	7b1b      	ldrb	r3, [r3, #12]
 800e520:	4619      	mov	r1, r3
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f004 fb6c 	bl	8012c00 <USBH_LL_GetURBState>
 800e528:	4603      	mov	r3, r0
 800e52a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e52c:	7cfb      	ldrb	r3, [r7, #19]
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d137      	bne.n	800e5a2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	7b1b      	ldrb	r3, [r3, #12]
 800e536:	4619      	mov	r1, r3
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f004 facf 	bl	8012adc <USBH_LL_GetLastXferSize>
 800e53e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	429a      	cmp	r2, r3
 800e548:	d016      	beq.n	800e578 <CDC_ProcessReception+0x9e>
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	8b5b      	ldrh	r3, [r3, #26]
 800e54e:	461a      	mov	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	4293      	cmp	r3, r2
 800e554:	d910      	bls.n	800e578 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	1ad2      	subs	r2, r2, r3
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	6a1a      	ldr	r2, [r3, #32]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	441a      	add	r2, r3
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	2203      	movs	r2, #3
 800e572:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e576:	e006      	b.n	800e586 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f81d 	bl	800e5c0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2204      	movs	r2, #4
 800e58a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e59a:	2200      	movs	r2, #0
 800e59c:	4619      	mov	r1, r3
 800e59e:	f001 fee3 	bl	8010368 <osMessagePut>
      break;
 800e5a2:	bf00      	nop
  }
}
 800e5a4:	bf00      	nop
 800e5a6:	3718      	adds	r7, #24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e5c8:	bf00      	nop
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e5dc:	bf00      	nop
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e5e8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ea:	b090      	sub	sp, #64	; 0x40
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	e04d      	b.n	800e69c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	79fa      	ldrb	r2, [r7, #7]
 800e604:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f000 f847 	bl	800e6ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d003      	beq.n	800e64c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e64c:	4b15      	ldr	r3, [pc, #84]	; (800e6a4 <USBH_Init+0xbc>)
 800e64e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e65c:	2100      	movs	r1, #0
 800e65e:	4618      	mov	r0, r3
 800e660:	f001 fe58 	bl	8010314 <osMessageCreate>
 800e664:	4602      	mov	r2, r0
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e66c:	4b0e      	ldr	r3, [pc, #56]	; (800e6a8 <USBH_Init+0xc0>)
 800e66e:	f107 0414 	add.w	r4, r7, #20
 800e672:	461d      	mov	r5, r3
 800e674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e67c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e680:	f107 0314 	add.w	r3, r7, #20
 800e684:	68f9      	ldr	r1, [r7, #12]
 800e686:	4618      	mov	r0, r3
 800e688:	f001 fde4 	bl	8010254 <osThreadCreate>
 800e68c:	4602      	mov	r2, r0
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f004 f96f 	bl	8012978 <USBH_LL_Init>

  return USBH_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3740      	adds	r7, #64	; 0x40
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bdb0      	pop	{r4, r5, r7, pc}
 800e6a4:	08013734 	.word	0x08013734
 800e6a8:	08013750 	.word	0x08013750

0800e6ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60fb      	str	r3, [r7, #12]
 800e6bc:	e009      	b.n	800e6d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	33e0      	adds	r3, #224	; 0xe0
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	60fb      	str	r3, [r7, #12]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b0e      	cmp	r3, #14
 800e6d6:	d9f2      	bls.n	800e6be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e6d8:	2300      	movs	r3, #0
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	e009      	b.n	800e6f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	60fb      	str	r3, [r7, #12]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6f8:	d3f1      	bcc.n	800e6de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2200      	movs	r2, #0
 800e704:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2201      	movs	r2, #1
 800e70a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2240      	movs	r2, #64	; 0x40
 800e71e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d016      	beq.n	800e796 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10e      	bne.n	800e790 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e778:	1c59      	adds	r1, r3, #1
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	33de      	adds	r3, #222	; 0xde
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	73fb      	strb	r3, [r7, #15]
 800e78e:	e004      	b.n	800e79a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e790:	2302      	movs	r3, #2
 800e792:	73fb      	strb	r3, [r7, #15]
 800e794:	e001      	b.n	800e79a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e796:	2302      	movs	r3, #2
 800e798:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3714      	adds	r7, #20
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e7be:	78fa      	ldrb	r2, [r7, #3]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d204      	bcs.n	800e7ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	78fa      	ldrb	r2, [r7, #3]
 800e7c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e7cc:	e001      	b.n	800e7d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e7ce:	2302      	movs	r3, #2
 800e7d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3714      	adds	r7, #20
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b087      	sub	sp, #28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	4608      	mov	r0, r1
 800e7ea:	4611      	mov	r1, r2
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	70fb      	strb	r3, [r7, #3]
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	70bb      	strb	r3, [r7, #2]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e808:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e80a:	e025      	b.n	800e858 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
 800e80e:	221a      	movs	r2, #26
 800e810:	fb02 f303 	mul.w	r3, r2, r3
 800e814:	3308      	adds	r3, #8
 800e816:	68fa      	ldr	r2, [r7, #12]
 800e818:	4413      	add	r3, r2
 800e81a:	3302      	adds	r3, #2
 800e81c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	795b      	ldrb	r3, [r3, #5]
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	429a      	cmp	r2, r3
 800e826:	d002      	beq.n	800e82e <USBH_FindInterface+0x4e>
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	2bff      	cmp	r3, #255	; 0xff
 800e82c:	d111      	bne.n	800e852 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e832:	78ba      	ldrb	r2, [r7, #2]
 800e834:	429a      	cmp	r2, r3
 800e836:	d002      	beq.n	800e83e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e838:	78bb      	ldrb	r3, [r7, #2]
 800e83a:	2bff      	cmp	r3, #255	; 0xff
 800e83c:	d109      	bne.n	800e852 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e842:	787a      	ldrb	r2, [r7, #1]
 800e844:	429a      	cmp	r2, r3
 800e846:	d002      	beq.n	800e84e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e848:	787b      	ldrb	r3, [r7, #1]
 800e84a:	2bff      	cmp	r3, #255	; 0xff
 800e84c:	d101      	bne.n	800e852 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e84e:	7dfb      	ldrb	r3, [r7, #23]
 800e850:	e006      	b.n	800e860 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e852:	7dfb      	ldrb	r3, [r7, #23]
 800e854:	3301      	adds	r3, #1
 800e856:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e858:	7dfb      	ldrb	r3, [r7, #23]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d9d6      	bls.n	800e80c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e85e:	23ff      	movs	r3, #255	; 0xff
}
 800e860:	4618      	mov	r0, r3
 800e862:	371c      	adds	r7, #28
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f004 f8bb 	bl	80129f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e87a:	2101      	movs	r1, #1
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f004 f9d2 	bl	8012c26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af04      	add	r7, sp, #16
 800e892:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e894:	2302      	movs	r3, #2
 800e896:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e898:	2300      	movs	r3, #0
 800e89a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d102      	bne.n	800e8ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2203      	movs	r2, #3
 800e8ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	2b0b      	cmp	r3, #11
 800e8b6:	f200 823c 	bhi.w	800ed32 <USBH_Process+0x4a6>
 800e8ba:	a201      	add	r2, pc, #4	; (adr r2, 800e8c0 <USBH_Process+0x34>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e8f1 	.word	0x0800e8f1
 800e8c4:	0800e93f 	.word	0x0800e93f
 800e8c8:	0800e9c3 	.word	0x0800e9c3
 800e8cc:	0800ecb1 	.word	0x0800ecb1
 800e8d0:	0800ed33 	.word	0x0800ed33
 800e8d4:	0800ea83 	.word	0x0800ea83
 800e8d8:	0800ec3b 	.word	0x0800ec3b
 800e8dc:	0800ead5 	.word	0x0800ead5
 800e8e0:	0800eb11 	.word	0x0800eb11
 800e8e4:	0800eb4b 	.word	0x0800eb4b
 800e8e8:	0800eb93 	.word	0x0800eb93
 800e8ec:	0800ec99 	.word	0x0800ec99
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 821c 	beq.w	800ed36 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2201      	movs	r2, #1
 800e902:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e904:	20c8      	movs	r0, #200	; 0xc8
 800e906:	f004 f9d8 	bl	8012cba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f004 f8cb 	bl	8012aa6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e934:	2200      	movs	r2, #0
 800e936:	4619      	mov	r1, r3
 800e938:	f001 fd16 	bl	8010368 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e93c:	e1fb      	b.n	800ed36 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e944:	2b01      	cmp	r3, #1
 800e946:	d107      	bne.n	800e958 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2202      	movs	r2, #2
 800e954:	701a      	strb	r2, [r3, #0]
 800e956:	e025      	b.n	800e9a4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e95e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e962:	d914      	bls.n	800e98e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e96a:	3301      	adds	r3, #1
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e97a:	2b03      	cmp	r3, #3
 800e97c:	d903      	bls.n	800e986 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	220d      	movs	r2, #13
 800e982:	701a      	strb	r2, [r3, #0]
 800e984:	e00e      	b.n	800e9a4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	701a      	strb	r2, [r3, #0]
 800e98c:	e00a      	b.n	800e9a4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e994:	f103 020a 	add.w	r2, r3, #10
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e99e:	200a      	movs	r0, #10
 800e9a0:	f004 f98b 	bl	8012cba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	f001 fcd4 	bl	8010368 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e9c0:	e1c0      	b.n	800ed44 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d005      	beq.n	800e9d8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9d2:	2104      	movs	r1, #4
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e9d8:	2064      	movs	r0, #100	; 0x64
 800e9da:	f004 f96e 	bl	8012cba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f004 f83c 	bl	8012a5c <USBH_LL_GetSpeed>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2205      	movs	r2, #5
 800e9f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f001 fb21 	bl	801003e <USBH_AllocPipe>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	461a      	mov	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ea04:	2180      	movs	r1, #128	; 0x80
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f001 fb19 	bl	801003e <USBH_AllocPipe>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	461a      	mov	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	7919      	ldrb	r1, [r3, #4]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ea28:	b292      	uxth	r2, r2
 800ea2a:	9202      	str	r2, [sp, #8]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	9201      	str	r2, [sp, #4]
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	4603      	mov	r3, r0
 800ea34:	2280      	movs	r2, #128	; 0x80
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f001 fad2 	bl	800ffe0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	7959      	ldrb	r1, [r3, #5]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ea50:	b292      	uxth	r2, r2
 800ea52:	9202      	str	r2, [sp, #8]
 800ea54:	2200      	movs	r2, #0
 800ea56:	9201      	str	r2, [sp, #4]
 800ea58:	9300      	str	r3, [sp, #0]
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f001 fabe 	bl	800ffe0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	f001 fc74 	bl	8010368 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ea80:	e160      	b.n	800ed44 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f964 	bl	800ed50 <USBH_HandleEnum>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ea8c:	7bbb      	ldrb	r3, [r7, #14]
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f040 8152 	bne.w	800ed3a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d103      	bne.n	800eab0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2208      	movs	r2, #8
 800eaac:	701a      	strb	r2, [r3, #0]
 800eaae:	e002      	b.n	800eab6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2207      	movs	r2, #7
 800eab4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2205      	movs	r2, #5
 800eaba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eaca:	2200      	movs	r2, #0
 800eacc:	4619      	mov	r1, r3
 800eace:	f001 fc4b 	bl	8010368 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ead2:	e132      	b.n	800ed3a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f000 812f 	beq.w	800ed3e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eae6:	2101      	movs	r1, #1
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2208      	movs	r2, #8
 800eaf0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2205      	movs	r2, #5
 800eaf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb06:	2200      	movs	r2, #0
 800eb08:	4619      	mov	r1, r3
 800eb0a:	f001 fc2d 	bl	8010368 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800eb0e:	e116      	b.n	800ed3e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 fcf6 	bl	800f50c <USBH_SetCfg>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d102      	bne.n	800eb2c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2209      	movs	r2, #9
 800eb2a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb40:	2200      	movs	r2, #0
 800eb42:	4619      	mov	r1, r3
 800eb44:	f001 fc10 	bl	8010368 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb48:	e0fc      	b.n	800ed44 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800eb50:	f003 0320 	and.w	r3, r3, #32
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00a      	beq.n	800eb6e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800eb58:	2101      	movs	r1, #1
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 fcf9 	bl	800f552 <USBH_SetFeature>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d106      	bne.n	800eb74 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	220a      	movs	r2, #10
 800eb6a:	701a      	strb	r2, [r3, #0]
 800eb6c:	e002      	b.n	800eb74 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	220a      	movs	r2, #10
 800eb72:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2201      	movs	r2, #1
 800eb78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb88:	2200      	movs	r2, #0
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	f001 fbec 	bl	8010368 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb90:	e0d8      	b.n	800ed44 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d03f      	beq.n	800ec1c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800eba4:	2300      	movs	r3, #0
 800eba6:	73fb      	strb	r3, [r7, #15]
 800eba8:	e016      	b.n	800ebd8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ebaa:	7bfa      	ldrb	r2, [r7, #15]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	32de      	adds	r2, #222	; 0xde
 800ebb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb4:	791a      	ldrb	r2, [r3, #4]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d108      	bne.n	800ebd2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ebc0:	7bfa      	ldrb	r2, [r7, #15]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	32de      	adds	r2, #222	; 0xde
 800ebc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ebd0:	e005      	b.n	800ebde <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	73fb      	strb	r3, [r7, #15]
 800ebd8:	7bfb      	ldrb	r3, [r7, #15]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d0e5      	beq.n	800ebaa <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d016      	beq.n	800ec16 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	4798      	blx	r3
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d109      	bne.n	800ec0e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2206      	movs	r2, #6
 800ebfe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec06:	2103      	movs	r1, #3
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	4798      	blx	r3
 800ec0c:	e006      	b.n	800ec1c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	220d      	movs	r2, #13
 800ec12:	701a      	strb	r2, [r3, #0]
 800ec14:	e002      	b.n	800ec1c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	220d      	movs	r2, #13
 800ec1a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2205      	movs	r2, #5
 800ec20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ec30:	2200      	movs	r2, #0
 800ec32:	4619      	mov	r1, r3
 800ec34:	f001 fb98 	bl	8010368 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec38:	e084      	b.n	800ed44 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d017      	beq.n	800ec74 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	4798      	blx	r3
 800ec50:	4603      	mov	r3, r0
 800ec52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ec54:	7bbb      	ldrb	r3, [r7, #14]
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	220b      	movs	r2, #11
 800ec60:	701a      	strb	r2, [r3, #0]
 800ec62:	e00a      	b.n	800ec7a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ec64:	7bbb      	ldrb	r3, [r7, #14]
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d106      	bne.n	800ec7a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	220d      	movs	r2, #13
 800ec70:	701a      	strb	r2, [r3, #0]
 800ec72:	e002      	b.n	800ec7a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	220d      	movs	r2, #13
 800ec78:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2205      	movs	r2, #5
 800ec7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ec8e:	2200      	movs	r2, #0
 800ec90:	4619      	mov	r1, r3
 800ec92:	f001 fb69 	bl	8010368 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec96:	e055      	b.n	800ed44 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d04f      	beq.n	800ed42 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	4798      	blx	r3
      }
      break;
 800ecae:	e048      	b.n	800ed42 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff fcf7 	bl	800e6ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d009      	beq.n	800ecdc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d005      	beq.n	800ecf2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecec:	2105      	movs	r1, #5
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d107      	bne.n	800ed0e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7ff fdb0 	bl	800e86c <USBH_Start>
 800ed0c:	e002      	b.n	800ed14 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f003 fe6e 	bl	80129f0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed28:	2200      	movs	r2, #0
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	f001 fb1c 	bl	8010368 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ed30:	e008      	b.n	800ed44 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800ed32:	bf00      	nop
 800ed34:	e006      	b.n	800ed44 <USBH_Process+0x4b8>
      break;
 800ed36:	bf00      	nop
 800ed38:	e004      	b.n	800ed44 <USBH_Process+0x4b8>
      break;
 800ed3a:	bf00      	nop
 800ed3c:	e002      	b.n	800ed44 <USBH_Process+0x4b8>
    break;
 800ed3e:	bf00      	nop
 800ed40:	e000      	b.n	800ed44 <USBH_Process+0x4b8>
      break;
 800ed42:	bf00      	nop
  }
  return USBH_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop

0800ed50 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af04      	add	r7, sp, #16
 800ed56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	785b      	ldrb	r3, [r3, #1]
 800ed64:	2b07      	cmp	r3, #7
 800ed66:	f200 8208 	bhi.w	800f17a <USBH_HandleEnum+0x42a>
 800ed6a:	a201      	add	r2, pc, #4	; (adr r2, 800ed70 <USBH_HandleEnum+0x20>)
 800ed6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed70:	0800ed91 	.word	0x0800ed91
 800ed74:	0800ee4f 	.word	0x0800ee4f
 800ed78:	0800eeb9 	.word	0x0800eeb9
 800ed7c:	0800ef47 	.word	0x0800ef47
 800ed80:	0800efb1 	.word	0x0800efb1
 800ed84:	0800f021 	.word	0x0800f021
 800ed88:	0800f0bd 	.word	0x0800f0bd
 800ed8c:	0800f13b 	.word	0x0800f13b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ed90:	2108      	movs	r1, #8
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 faea 	bl	800f36c <USBH_Get_DevDesc>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ed9c:	7bbb      	ldrb	r3, [r7, #14]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d130      	bne.n	800ee04 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	7919      	ldrb	r1, [r3, #4]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800edc6:	b292      	uxth	r2, r2
 800edc8:	9202      	str	r2, [sp, #8]
 800edca:	2200      	movs	r2, #0
 800edcc:	9201      	str	r2, [sp, #4]
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	4603      	mov	r3, r0
 800edd2:	2280      	movs	r2, #128	; 0x80
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f001 f903 	bl	800ffe0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	7959      	ldrb	r1, [r3, #5]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800edee:	b292      	uxth	r2, r2
 800edf0:	9202      	str	r2, [sp, #8]
 800edf2:	2200      	movs	r2, #0
 800edf4:	9201      	str	r2, [sp, #4]
 800edf6:	9300      	str	r3, [sp, #0]
 800edf8:	4603      	mov	r3, r0
 800edfa:	2200      	movs	r2, #0
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f001 f8ef 	bl	800ffe0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ee02:	e1bc      	b.n	800f17e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee04:	7bbb      	ldrb	r3, [r7, #14]
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	f040 81b9 	bne.w	800f17e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee12:	3301      	adds	r3, #1
 800ee14:	b2da      	uxtb	r2, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee22:	2b03      	cmp	r3, #3
 800ee24:	d903      	bls.n	800ee2e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	220d      	movs	r2, #13
 800ee2a:	701a      	strb	r2, [r3, #0]
      break;
 800ee2c:	e1a7      	b.n	800f17e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	795b      	ldrb	r3, [r3, #5]
 800ee32:	4619      	mov	r1, r3
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f001 f923 	bl	8010080 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	791b      	ldrb	r3, [r3, #4]
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f001 f91d 	bl	8010080 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	701a      	strb	r2, [r3, #0]
      break;
 800ee4c:	e197      	b.n	800f17e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ee4e:	2112      	movs	r1, #18
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 fa8b 	bl	800f36c <USBH_Get_DevDesc>
 800ee56:	4603      	mov	r3, r0
 800ee58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ee5a:	7bbb      	ldrb	r3, [r7, #14]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d103      	bne.n	800ee68 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ee66:	e18c      	b.n	800f182 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	2b03      	cmp	r3, #3
 800ee6c:	f040 8189 	bne.w	800f182 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee76:	3301      	adds	r3, #1
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee86:	2b03      	cmp	r3, #3
 800ee88:	d903      	bls.n	800ee92 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	220d      	movs	r2, #13
 800ee8e:	701a      	strb	r2, [r3, #0]
      break;
 800ee90:	e177      	b.n	800f182 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	795b      	ldrb	r3, [r3, #5]
 800ee96:	4619      	mov	r1, r3
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f001 f8f1 	bl	8010080 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	791b      	ldrb	r3, [r3, #4]
 800eea2:	4619      	mov	r1, r3
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f001 f8eb 	bl	8010080 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	701a      	strb	r2, [r3, #0]
      break;
 800eeb6:	e164      	b.n	800f182 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800eeb8:	2101      	movs	r1, #1
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 fb02 	bl	800f4c4 <USBH_SetAddress>
 800eec0:	4603      	mov	r3, r0
 800eec2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d132      	bne.n	800ef30 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800eeca:	2002      	movs	r0, #2
 800eecc:	f003 fef5 	bl	8012cba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2203      	movs	r2, #3
 800eedc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	7919      	ldrb	r1, [r3, #4]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800eef2:	b292      	uxth	r2, r2
 800eef4:	9202      	str	r2, [sp, #8]
 800eef6:	2200      	movs	r2, #0
 800eef8:	9201      	str	r2, [sp, #4]
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4603      	mov	r3, r0
 800eefe:	2280      	movs	r2, #128	; 0x80
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f001 f86d 	bl	800ffe0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	7959      	ldrb	r1, [r3, #5]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef1a:	b292      	uxth	r2, r2
 800ef1c:	9202      	str	r2, [sp, #8]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	9201      	str	r2, [sp, #4]
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	4603      	mov	r3, r0
 800ef26:	2200      	movs	r2, #0
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f001 f859 	bl	800ffe0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ef2e:	e12a      	b.n	800f186 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef30:	7bbb      	ldrb	r3, [r7, #14]
 800ef32:	2b03      	cmp	r3, #3
 800ef34:	f040 8127 	bne.w	800f186 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	220d      	movs	r2, #13
 800ef3c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	705a      	strb	r2, [r3, #1]
      break;
 800ef44:	e11f      	b.n	800f186 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ef46:	2109      	movs	r1, #9
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 fa37 	bl	800f3bc <USBH_Get_CfgDesc>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef52:	7bbb      	ldrb	r3, [r7, #14]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d103      	bne.n	800ef60 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2204      	movs	r2, #4
 800ef5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ef5e:	e114      	b.n	800f18a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef60:	7bbb      	ldrb	r3, [r7, #14]
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	f040 8111 	bne.w	800f18a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef6e:	3301      	adds	r3, #1
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef7e:	2b03      	cmp	r3, #3
 800ef80:	d903      	bls.n	800ef8a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	220d      	movs	r2, #13
 800ef86:	701a      	strb	r2, [r3, #0]
      break;
 800ef88:	e0ff      	b.n	800f18a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	795b      	ldrb	r3, [r3, #5]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f001 f875 	bl	8010080 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	791b      	ldrb	r3, [r3, #4]
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f001 f86f 	bl	8010080 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	701a      	strb	r2, [r3, #0]
      break;
 800efae:	e0ec      	b.n	800f18a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800efb6:	4619      	mov	r1, r3
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 f9ff 	bl	800f3bc <USBH_Get_CfgDesc>
 800efbe:	4603      	mov	r3, r0
 800efc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800efc2:	7bbb      	ldrb	r3, [r7, #14]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d103      	bne.n	800efd0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2205      	movs	r2, #5
 800efcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800efce:	e0de      	b.n	800f18e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800efd0:	7bbb      	ldrb	r3, [r7, #14]
 800efd2:	2b03      	cmp	r3, #3
 800efd4:	f040 80db 	bne.w	800f18e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800efde:	3301      	adds	r3, #1
 800efe0:	b2da      	uxtb	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800efee:	2b03      	cmp	r3, #3
 800eff0:	d903      	bls.n	800effa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	220d      	movs	r2, #13
 800eff6:	701a      	strb	r2, [r3, #0]
      break;
 800eff8:	e0c9      	b.n	800f18e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	795b      	ldrb	r3, [r3, #5]
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f001 f83d 	bl	8010080 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	791b      	ldrb	r3, [r3, #4]
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f001 f837 	bl	8010080 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	701a      	strb	r2, [r3, #0]
      break;
 800f01e:	e0b6      	b.n	800f18e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f026:	2b00      	cmp	r3, #0
 800f028:	d036      	beq.n	800f098 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f036:	23ff      	movs	r3, #255	; 0xff
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f9e3 	bl	800f404 <USBH_Get_StringDesc>
 800f03e:	4603      	mov	r3, r0
 800f040:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f042:	7bbb      	ldrb	r3, [r7, #14]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d111      	bne.n	800f06c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2206      	movs	r2, #6
 800f04c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2205      	movs	r2, #5
 800f052:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f062:	2200      	movs	r2, #0
 800f064:	4619      	mov	r1, r3
 800f066:	f001 f97f 	bl	8010368 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f06a:	e092      	b.n	800f192 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f06c:	7bbb      	ldrb	r3, [r7, #14]
 800f06e:	2b03      	cmp	r3, #3
 800f070:	f040 808f 	bne.w	800f192 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2206      	movs	r2, #6
 800f078:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2205      	movs	r2, #5
 800f07e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f08e:	2200      	movs	r2, #0
 800f090:	4619      	mov	r1, r3
 800f092:	f001 f969 	bl	8010368 <osMessagePut>
      break;
 800f096:	e07c      	b.n	800f192 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2206      	movs	r2, #6
 800f09c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2205      	movs	r2, #5
 800f0a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	f001 f957 	bl	8010368 <osMessagePut>
      break;
 800f0ba:	e06a      	b.n	800f192 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d027      	beq.n	800f116 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f0d2:	23ff      	movs	r3, #255	; 0xff
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f995 	bl	800f404 <USBH_Get_StringDesc>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f0de:	7bbb      	ldrb	r3, [r7, #14]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d103      	bne.n	800f0ec <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2207      	movs	r2, #7
 800f0e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f0ea:	e054      	b.n	800f196 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0ec:	7bbb      	ldrb	r3, [r7, #14]
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d151      	bne.n	800f196 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2207      	movs	r2, #7
 800f0f6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2205      	movs	r2, #5
 800f0fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f10c:	2200      	movs	r2, #0
 800f10e:	4619      	mov	r1, r3
 800f110:	f001 f92a 	bl	8010368 <osMessagePut>
      break;
 800f114:	e03f      	b.n	800f196 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2207      	movs	r2, #7
 800f11a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2205      	movs	r2, #5
 800f120:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f130:	2200      	movs	r2, #0
 800f132:	4619      	mov	r1, r3
 800f134:	f001 f918 	bl	8010368 <osMessagePut>
      break;
 800f138:	e02d      	b.n	800f196 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f140:	2b00      	cmp	r3, #0
 800f142:	d017      	beq.n	800f174 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f150:	23ff      	movs	r3, #255	; 0xff
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f956 	bl	800f404 <USBH_Get_StringDesc>
 800f158:	4603      	mov	r3, r0
 800f15a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f15c:	7bbb      	ldrb	r3, [r7, #14]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d102      	bne.n	800f168 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f166:	e018      	b.n	800f19a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f168:	7bbb      	ldrb	r3, [r7, #14]
 800f16a:	2b03      	cmp	r3, #3
 800f16c:	d115      	bne.n	800f19a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]
      break;
 800f172:	e012      	b.n	800f19a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800f174:	2300      	movs	r3, #0
 800f176:	73fb      	strb	r3, [r7, #15]
      break;
 800f178:	e00f      	b.n	800f19a <USBH_HandleEnum+0x44a>

    default:
      break;
 800f17a:	bf00      	nop
 800f17c:	e00e      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f17e:	bf00      	nop
 800f180:	e00c      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f182:	bf00      	nop
 800f184:	e00a      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f186:	bf00      	nop
 800f188:	e008      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f18a:	bf00      	nop
 800f18c:	e006      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f18e:	bf00      	nop
 800f190:	e004      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f192:	bf00      	nop
 800f194:	e002      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f196:	bf00      	nop
 800f198:	e000      	b.n	800f19c <USBH_HandleEnum+0x44c>
      break;
 800f19a:	bf00      	nop
  }
  return Status;
 800f19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop

0800f1a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f1ba:	bf00      	nop
 800f1bc:	370c      	adds	r7, #12
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b082      	sub	sp, #8
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f1d4:	1c5a      	adds	r2, r3, #1
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f804 	bl	800f1ea <USBH_HandleSof>
}
 800f1e2:	bf00      	nop
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	2b0b      	cmp	r3, #11
 800f1fa:	d10a      	bne.n	800f212 <USBH_HandleSof+0x28>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f202:	2b00      	cmp	r3, #0
 800f204:	d005      	beq.n	800f212 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f20c:	699b      	ldr	r3, [r3, #24]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	4798      	blx	r3
  }
}
 800f212:	bf00      	nop
 800f214:	3708      	adds	r7, #8
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b082      	sub	sp, #8
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2201      	movs	r2, #1
 800f226:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2201      	movs	r2, #1
 800f22e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f23e:	2200      	movs	r2, #0
 800f240:	4619      	mov	r1, r3
 800f242:	f001 f891 	bl	8010368 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f246:	bf00      	nop
}
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f24e:	b480      	push	{r7}
 800f250:	b083      	sub	sp, #12
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f25e:	bf00      	nop
}
 800f260:	370c      	adds	r7, #12
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b082      	sub	sp, #8
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2201      	movs	r2, #1
 800f276:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f29e:	2200      	movs	r2, #0
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	f001 f861 	bl	8010368 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f003 fba8 	bl	8012a26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	791b      	ldrb	r3, [r3, #4]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f000 fecf 	bl	8010080 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	795b      	ldrb	r3, [r3, #5]
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fec9 	bl	8010080 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f302:	2200      	movs	r2, #0
 800f304:	4619      	mov	r1, r3
 800f306:	f001 f82f 	bl	8010368 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800f322:	f107 030c 	add.w	r3, r7, #12
 800f326:	f04f 32ff 	mov.w	r2, #4294967295
 800f32a:	4618      	mov	r0, r3
 800f32c:	f001 f85c 	bl	80103e8 <osMessageGet>
    if (event.status == osEventMessage)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2b10      	cmp	r3, #16
 800f334:	d1f2      	bne.n	800f31c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7ff faa8 	bl	800e88c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f33c:	e7ee      	b.n	800f31c <USBH_Process_OS+0x8>

0800f33e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b082      	sub	sp, #8
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2201      	movs	r2, #1
 800f34a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f35a:	2200      	movs	r2, #0
 800f35c:	4619      	mov	r1, r3
 800f35e:	f001 f803 	bl	8010368 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b086      	sub	sp, #24
 800f370:	af02      	add	r7, sp, #8
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	460b      	mov	r3, r1
 800f376:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f37e:	78fb      	ldrb	r3, [r7, #3]
 800f380:	b29b      	uxth	r3, r3
 800f382:	9300      	str	r3, [sp, #0]
 800f384:	4613      	mov	r3, r2
 800f386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f38a:	2100      	movs	r1, #0
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 f864 	bl	800f45a <USBH_GetDescriptor>
 800f392:	4603      	mov	r3, r0
 800f394:	73fb      	strb	r3, [r7, #15]
 800f396:	7bfb      	ldrb	r3, [r7, #15]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d10a      	bne.n	800f3b2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f3a8:	78fa      	ldrb	r2, [r7, #3]
 800f3aa:	b292      	uxth	r2, r2
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	f000 f918 	bl	800f5e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af02      	add	r7, sp, #8
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	331c      	adds	r3, #28
 800f3cc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f3ce:	887b      	ldrh	r3, [r7, #2]
 800f3d0:	9300      	str	r3, [sp, #0]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3d8:	2100      	movs	r1, #0
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 f83d 	bl	800f45a <USBH_GetDescriptor>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	72fb      	strb	r3, [r7, #11]
 800f3e4:	7afb      	ldrb	r3, [r7, #11]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d107      	bne.n	800f3fa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f3f0:	887a      	ldrh	r2, [r7, #2]
 800f3f2:	68f9      	ldr	r1, [r7, #12]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 f964 	bl	800f6c2 <USBH_ParseCfgDesc>
  }

  return status;
 800f3fa:	7afb      	ldrb	r3, [r7, #11]
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b088      	sub	sp, #32
 800f408:	af02      	add	r7, sp, #8
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	607a      	str	r2, [r7, #4]
 800f40e:	461a      	mov	r2, r3
 800f410:	460b      	mov	r3, r1
 800f412:	72fb      	strb	r3, [r7, #11]
 800f414:	4613      	mov	r3, r2
 800f416:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f418:	7afb      	ldrb	r3, [r7, #11]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f420:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f428:	893b      	ldrh	r3, [r7, #8]
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	460b      	mov	r3, r1
 800f42e:	2100      	movs	r1, #0
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	f000 f812 	bl	800f45a <USBH_GetDescriptor>
 800f436:	4603      	mov	r3, r0
 800f438:	75fb      	strb	r3, [r7, #23]
 800f43a:	7dfb      	ldrb	r3, [r7, #23]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d107      	bne.n	800f450 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f446:	893a      	ldrh	r2, [r7, #8]
 800f448:	6879      	ldr	r1, [r7, #4]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 fa37 	bl	800f8be <USBH_ParseStringDesc>
  }

  return status;
 800f450:	7dfb      	ldrb	r3, [r7, #23]
}
 800f452:	4618      	mov	r0, r3
 800f454:	3718      	adds	r7, #24
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b084      	sub	sp, #16
 800f45e:	af00      	add	r7, sp, #0
 800f460:	60f8      	str	r0, [r7, #12]
 800f462:	607b      	str	r3, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	72fb      	strb	r3, [r7, #11]
 800f468:	4613      	mov	r3, r2
 800f46a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	789b      	ldrb	r3, [r3, #2]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d11c      	bne.n	800f4ae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f474:	7afb      	ldrb	r3, [r7, #11]
 800f476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f47a:	b2da      	uxtb	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2206      	movs	r2, #6
 800f484:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	893a      	ldrh	r2, [r7, #8]
 800f48a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f48c:	893b      	ldrh	r3, [r7, #8]
 800f48e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f496:	d104      	bne.n	800f4a2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f240 4209 	movw	r2, #1033	; 0x409
 800f49e:	829a      	strh	r2, [r3, #20]
 800f4a0:	e002      	b.n	800f4a8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	8b3a      	ldrh	r2, [r7, #24]
 800f4ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f4ae:	8b3b      	ldrh	r3, [r7, #24]
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	6879      	ldr	r1, [r7, #4]
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	f000 fa50 	bl	800f95a <USBH_CtlReq>
 800f4ba:	4603      	mov	r3, r0
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	789b      	ldrb	r3, [r3, #2]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d10f      	bne.n	800f4f8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2205      	movs	r2, #5
 800f4e2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f4e4:	78fb      	ldrb	r3, [r7, #3]
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 fa2c 	bl	800f95a <USBH_CtlReq>
 800f502:	4603      	mov	r3, r0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	460b      	mov	r3, r1
 800f516:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	789b      	ldrb	r3, [r3, #2]
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d10e      	bne.n	800f53e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2209      	movs	r2, #9
 800f52a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	887a      	ldrh	r2, [r7, #2]
 800f530:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f53e:	2200      	movs	r2, #0
 800f540:	2100      	movs	r1, #0
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fa09 	bl	800f95a <USBH_CtlReq>
 800f548:	4603      	mov	r3, r0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	789b      	ldrb	r3, [r3, #2]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d10f      	bne.n	800f586 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2203      	movs	r2, #3
 800f570:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f572:	78fb      	ldrb	r3, [r7, #3]
 800f574:	b29a      	uxth	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f586:	2200      	movs	r2, #0
 800f588:	2100      	movs	r1, #0
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f9e5 	bl	800f95a <USBH_CtlReq>
 800f590:	4603      	mov	r3, r0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b082      	sub	sp, #8
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	789b      	ldrb	r3, [r3, #2]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d10f      	bne.n	800f5ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f5c0:	78fb      	ldrb	r3, [r7, #3]
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 f9c1 	bl	800f95a <USBH_CtlReq>
 800f5d8:	4603      	mov	r3, r0
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3708      	adds	r7, #8
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f5e2:	b480      	push	{r7}
 800f5e4:	b085      	sub	sp, #20
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	60f8      	str	r0, [r7, #12]
 800f5ea:	60b9      	str	r1, [r7, #8]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	781a      	ldrb	r2, [r3, #0]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	785a      	ldrb	r2, [r3, #1]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	3302      	adds	r3, #2
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	b29a      	uxth	r2, r3
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	3303      	adds	r3, #3
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	b29b      	uxth	r3, r3
 800f610:	021b      	lsls	r3, r3, #8
 800f612:	b29b      	uxth	r3, r3
 800f614:	4313      	orrs	r3, r2
 800f616:	b29a      	uxth	r2, r3
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	791a      	ldrb	r2, [r3, #4]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	795a      	ldrb	r2, [r3, #5]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	799a      	ldrb	r2, [r3, #6]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	79da      	ldrb	r2, [r3, #7]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f63c:	88fb      	ldrh	r3, [r7, #6]
 800f63e:	2b08      	cmp	r3, #8
 800f640:	d939      	bls.n	800f6b6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	3308      	adds	r3, #8
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	b29a      	uxth	r2, r3
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	3309      	adds	r3, #9
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	b29b      	uxth	r3, r3
 800f652:	021b      	lsls	r3, r3, #8
 800f654:	b29b      	uxth	r3, r3
 800f656:	4313      	orrs	r3, r2
 800f658:	b29a      	uxth	r2, r3
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	330a      	adds	r3, #10
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	b29a      	uxth	r2, r3
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	330b      	adds	r3, #11
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	021b      	lsls	r3, r3, #8
 800f670:	b29b      	uxth	r3, r3
 800f672:	4313      	orrs	r3, r2
 800f674:	b29a      	uxth	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	330c      	adds	r3, #12
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	b29a      	uxth	r2, r3
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	330d      	adds	r3, #13
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	b29b      	uxth	r3, r3
 800f68a:	021b      	lsls	r3, r3, #8
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	4313      	orrs	r3, r2
 800f690:	b29a      	uxth	r2, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	7b9a      	ldrb	r2, [r3, #14]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	7bda      	ldrb	r2, [r3, #15]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	7c1a      	ldrb	r2, [r3, #16]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	7c5a      	ldrb	r2, [r3, #17]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	745a      	strb	r2, [r3, #17]
  }
}
 800f6b6:	bf00      	nop
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b08a      	sub	sp, #40	; 0x28
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	781a      	ldrb	r2, [r3, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	785a      	ldrb	r2, [r3, #1]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	3302      	adds	r3, #2
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	3303      	adds	r3, #3
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	b29b      	uxth	r3, r3
 800f704:	021b      	lsls	r3, r3, #8
 800f706:	b29b      	uxth	r3, r3
 800f708:	4313      	orrs	r3, r2
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	791a      	ldrb	r2, [r3, #4]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	795a      	ldrb	r2, [r3, #5]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	799a      	ldrb	r2, [r3, #6]
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	79da      	ldrb	r2, [r3, #7]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	7a1a      	ldrb	r2, [r3, #8]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f738:	88fb      	ldrh	r3, [r7, #6]
 800f73a:	2b09      	cmp	r3, #9
 800f73c:	d95f      	bls.n	800f7fe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f73e:	2309      	movs	r3, #9
 800f740:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f742:	2300      	movs	r3, #0
 800f744:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f746:	e051      	b.n	800f7ec <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f748:	f107 0316 	add.w	r3, r7, #22
 800f74c:	4619      	mov	r1, r3
 800f74e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f750:	f000 f8e8 	bl	800f924 <USBH_GetNextDesc>
 800f754:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	785b      	ldrb	r3, [r3, #1]
 800f75a:	2b04      	cmp	r3, #4
 800f75c:	d146      	bne.n	800f7ec <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f75e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f762:	221a      	movs	r2, #26
 800f764:	fb02 f303 	mul.w	r3, r2, r3
 800f768:	3308      	adds	r3, #8
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	4413      	add	r3, r2
 800f76e:	3302      	adds	r3, #2
 800f770:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f774:	69f8      	ldr	r0, [r7, #28]
 800f776:	f000 f846 	bl	800f806 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f77a:	2300      	movs	r3, #0
 800f77c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f780:	2300      	movs	r3, #0
 800f782:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f784:	e022      	b.n	800f7cc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f786:	f107 0316 	add.w	r3, r7, #22
 800f78a:	4619      	mov	r1, r3
 800f78c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f78e:	f000 f8c9 	bl	800f924 <USBH_GetNextDesc>
 800f792:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f796:	785b      	ldrb	r3, [r3, #1]
 800f798:	2b05      	cmp	r3, #5
 800f79a:	d117      	bne.n	800f7cc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f79c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f7a4:	3201      	adds	r2, #1
 800f7a6:	00d2      	lsls	r2, r2, #3
 800f7a8:	211a      	movs	r1, #26
 800f7aa:	fb01 f303 	mul.w	r3, r1, r3
 800f7ae:	4413      	add	r3, r2
 800f7b0:	3308      	adds	r3, #8
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f7ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7bc:	69b8      	ldr	r0, [r7, #24]
 800f7be:	f000 f851 	bl	800f864 <USBH_ParseEPDesc>
            ep_ix++;
 800f7c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	791b      	ldrb	r3, [r3, #4]
 800f7d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d204      	bcs.n	800f7e2 <USBH_ParseCfgDesc+0x120>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	885a      	ldrh	r2, [r3, #2]
 800f7dc:	8afb      	ldrh	r3, [r7, #22]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d8d1      	bhi.n	800f786 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f7e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f7ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d804      	bhi.n	800f7fe <USBH_ParseCfgDesc+0x13c>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	885a      	ldrh	r2, [r3, #2]
 800f7f8:	8afb      	ldrh	r3, [r7, #22]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d8a4      	bhi.n	800f748 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f7fe:	bf00      	nop
 800f800:	3728      	adds	r7, #40	; 0x28
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f806:	b480      	push	{r7}
 800f808:	b083      	sub	sp, #12
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	781a      	ldrb	r2, [r3, #0]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	785a      	ldrb	r2, [r3, #1]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	789a      	ldrb	r2, [r3, #2]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	78da      	ldrb	r2, [r3, #3]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	791a      	ldrb	r2, [r3, #4]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	795a      	ldrb	r2, [r3, #5]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	799a      	ldrb	r2, [r3, #6]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	79da      	ldrb	r2, [r3, #7]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	7a1a      	ldrb	r2, [r3, #8]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	721a      	strb	r2, [r3, #8]
}
 800f858:	bf00      	nop
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	781a      	ldrb	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	785a      	ldrb	r2, [r3, #1]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	789a      	ldrb	r2, [r3, #2]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	78da      	ldrb	r2, [r3, #3]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	3304      	adds	r3, #4
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	b29a      	uxth	r2, r3
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	3305      	adds	r3, #5
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	021b      	lsls	r3, r3, #8
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	799a      	ldrb	r2, [r3, #6]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	719a      	strb	r2, [r3, #6]
}
 800f8b2:	bf00      	nop
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr

0800f8be <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f8be:	b480      	push	{r7}
 800f8c0:	b087      	sub	sp, #28
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	60f8      	str	r0, [r7, #12]
 800f8c6:	60b9      	str	r1, [r7, #8]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	2b03      	cmp	r3, #3
 800f8d4:	d120      	bne.n	800f918 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	1e9a      	subs	r2, r3, #2
 800f8dc:	88fb      	ldrh	r3, [r7, #6]
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	bf28      	it	cs
 800f8e2:	4613      	movcs	r3, r2
 800f8e4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	3302      	adds	r3, #2
 800f8ea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	82fb      	strh	r3, [r7, #22]
 800f8f0:	e00b      	b.n	800f90a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f8f2:	8afb      	ldrh	r3, [r7, #22]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	781a      	ldrb	r2, [r3, #0]
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	3301      	adds	r3, #1
 800f902:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f904:	8afb      	ldrh	r3, [r7, #22]
 800f906:	3302      	adds	r3, #2
 800f908:	82fb      	strh	r3, [r7, #22]
 800f90a:	8afa      	ldrh	r2, [r7, #22]
 800f90c:	8abb      	ldrh	r3, [r7, #20]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d3ef      	bcc.n	800f8f2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2200      	movs	r2, #0
 800f916:	701a      	strb	r2, [r3, #0]
  }
}
 800f918:	bf00      	nop
 800f91a:	371c      	adds	r7, #28
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f924:	b480      	push	{r7}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	881a      	ldrh	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	b29b      	uxth	r3, r3
 800f938:	4413      	add	r3, r2
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4413      	add	r3, r2
 800f94a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f94c:	68fb      	ldr	r3, [r7, #12]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3714      	adds	r7, #20
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f95a:	b580      	push	{r7, lr}
 800f95c:	b086      	sub	sp, #24
 800f95e:	af00      	add	r7, sp, #0
 800f960:	60f8      	str	r0, [r7, #12]
 800f962:	60b9      	str	r1, [r7, #8]
 800f964:	4613      	mov	r3, r2
 800f966:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f968:	2301      	movs	r3, #1
 800f96a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	789b      	ldrb	r3, [r3, #2]
 800f970:	2b01      	cmp	r3, #1
 800f972:	d002      	beq.n	800f97a <USBH_CtlReq+0x20>
 800f974:	2b02      	cmp	r3, #2
 800f976:	d01d      	beq.n	800f9b4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f978:	e043      	b.n	800fa02 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	88fa      	ldrh	r2, [r7, #6]
 800f984:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2201      	movs	r2, #1
 800f98a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2202      	movs	r2, #2
 800f990:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f992:	2301      	movs	r3, #1
 800f994:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2203      	movs	r2, #3
 800f99a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	f000 fcdb 	bl	8010368 <osMessagePut>
      break;
 800f9b2:	e026      	b.n	800fa02 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f000 f829 	bl	800fa0c <USBH_HandleControl>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f9be:	7dfb      	ldrb	r3, [r7, #23]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <USBH_CtlReq+0x70>
 800f9c4:	7dfb      	ldrb	r3, [r7, #23]
 800f9c6:	2b03      	cmp	r3, #3
 800f9c8:	d106      	bne.n	800f9d8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	761a      	strb	r2, [r3, #24]
 800f9d6:	e005      	b.n	800f9e4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	2b02      	cmp	r3, #2
 800f9dc:	d102      	bne.n	800f9e4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2203      	movs	r2, #3
 800f9e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	f000 fcb4 	bl	8010368 <osMessagePut>
      break;
 800fa00:	bf00      	nop
  }
  return status;
 800fa02:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3718      	adds	r7, #24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b086      	sub	sp, #24
 800fa10:	af02      	add	r7, sp, #8
 800fa12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fa14:	2301      	movs	r3, #1
 800fa16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7e1b      	ldrb	r3, [r3, #24]
 800fa20:	3b01      	subs	r3, #1
 800fa22:	2b0a      	cmp	r3, #10
 800fa24:	f200 822b 	bhi.w	800fe7e <USBH_HandleControl+0x472>
 800fa28:	a201      	add	r2, pc, #4	; (adr r2, 800fa30 <USBH_HandleControl+0x24>)
 800fa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2e:	bf00      	nop
 800fa30:	0800fa5d 	.word	0x0800fa5d
 800fa34:	0800fa77 	.word	0x0800fa77
 800fa38:	0800fb19 	.word	0x0800fb19
 800fa3c:	0800fb3f 	.word	0x0800fb3f
 800fa40:	0800fbcb 	.word	0x0800fbcb
 800fa44:	0800fbf7 	.word	0x0800fbf7
 800fa48:	0800fcb9 	.word	0x0800fcb9
 800fa4c:	0800fcdb 	.word	0x0800fcdb
 800fa50:	0800fd6d 	.word	0x0800fd6d
 800fa54:	0800fd95 	.word	0x0800fd95
 800fa58:	0800fe27 	.word	0x0800fe27
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f103 0110 	add.w	r1, r3, #16
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	795b      	ldrb	r3, [r3, #5]
 800fa66:	461a      	mov	r2, r3
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 fa19 	bl	800fea0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2202      	movs	r2, #2
 800fa72:	761a      	strb	r2, [r3, #24]
      break;
 800fa74:	e20e      	b.n	800fe94 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	795b      	ldrb	r3, [r3, #5]
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f003 f8bf 	bl	8012c00 <USBH_LL_GetURBState>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fa86:	7bbb      	ldrb	r3, [r7, #14]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d12c      	bne.n	800fae6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	7c1b      	ldrb	r3, [r3, #16]
 800fa90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fa94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	8adb      	ldrh	r3, [r3, #22]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00a      	beq.n	800fab4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fa9e:	7b7b      	ldrb	r3, [r7, #13]
 800faa0:	2b80      	cmp	r3, #128	; 0x80
 800faa2:	d103      	bne.n	800faac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2203      	movs	r2, #3
 800faa8:	761a      	strb	r2, [r3, #24]
 800faaa:	e00d      	b.n	800fac8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2205      	movs	r2, #5
 800fab0:	761a      	strb	r2, [r3, #24]
 800fab2:	e009      	b.n	800fac8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800fab4:	7b7b      	ldrb	r3, [r7, #13]
 800fab6:	2b80      	cmp	r3, #128	; 0x80
 800fab8:	d103      	bne.n	800fac2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2209      	movs	r2, #9
 800fabe:	761a      	strb	r2, [r3, #24]
 800fac0:	e002      	b.n	800fac8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2207      	movs	r2, #7
 800fac6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2203      	movs	r2, #3
 800facc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fadc:	2200      	movs	r2, #0
 800fade:	4619      	mov	r1, r3
 800fae0:	f000 fc42 	bl	8010368 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fae4:	e1cd      	b.n	800fe82 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fae6:	7bbb      	ldrb	r3, [r7, #14]
 800fae8:	2b04      	cmp	r3, #4
 800faea:	d003      	beq.n	800faf4 <USBH_HandleControl+0xe8>
 800faec:	7bbb      	ldrb	r3, [r7, #14]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	f040 81c7 	bne.w	800fe82 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	220b      	movs	r2, #11
 800faf8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2203      	movs	r2, #3
 800fafe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb0e:	2200      	movs	r2, #0
 800fb10:	4619      	mov	r1, r3
 800fb12:	f000 fc29 	bl	8010368 <osMessagePut>
      break;
 800fb16:	e1b4      	b.n	800fe82 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6899      	ldr	r1, [r3, #8]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	899a      	ldrh	r2, [r3, #12]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	791b      	ldrb	r3, [r3, #4]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 f9f4 	bl	800ff1e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2204      	movs	r2, #4
 800fb3a:	761a      	strb	r2, [r3, #24]
      break;
 800fb3c:	e1aa      	b.n	800fe94 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	791b      	ldrb	r3, [r3, #4]
 800fb42:	4619      	mov	r1, r3
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f003 f85b 	bl	8012c00 <USBH_LL_GetURBState>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fb4e:	7bbb      	ldrb	r3, [r7, #14]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d110      	bne.n	800fb76 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2209      	movs	r2, #9
 800fb58:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2203      	movs	r2, #3
 800fb5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb6e:	2200      	movs	r2, #0
 800fb70:	4619      	mov	r1, r3
 800fb72:	f000 fbf9 	bl	8010368 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fb76:	7bbb      	ldrb	r3, [r7, #14]
 800fb78:	2b05      	cmp	r3, #5
 800fb7a:	d110      	bne.n	800fb9e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fb7c:	2303      	movs	r3, #3
 800fb7e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2203      	movs	r2, #3
 800fb84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb94:	2200      	movs	r2, #0
 800fb96:	4619      	mov	r1, r3
 800fb98:	f000 fbe6 	bl	8010368 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fb9c:	e173      	b.n	800fe86 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800fb9e:	7bbb      	ldrb	r3, [r7, #14]
 800fba0:	2b04      	cmp	r3, #4
 800fba2:	f040 8170 	bne.w	800fe86 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	220b      	movs	r2, #11
 800fbaa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2203      	movs	r2, #3
 800fbb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	f000 fbd0 	bl	8010368 <osMessagePut>
      break;
 800fbc8:	e15d      	b.n	800fe86 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6899      	ldr	r1, [r3, #8]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	899a      	ldrh	r2, [r3, #12]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7958      	ldrb	r0, [r3, #5]
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	9300      	str	r3, [sp, #0]
 800fbda:	4603      	mov	r3, r0
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 f979 	bl	800fed4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2206      	movs	r2, #6
 800fbf2:	761a      	strb	r2, [r3, #24]
      break;
 800fbf4:	e14e      	b.n	800fe94 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	795b      	ldrb	r3, [r3, #5]
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f002 ffff 	bl	8012c00 <USBH_LL_GetURBState>
 800fc02:	4603      	mov	r3, r0
 800fc04:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fc06:	7bbb      	ldrb	r3, [r7, #14]
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d111      	bne.n	800fc30 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2207      	movs	r2, #7
 800fc10:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2203      	movs	r2, #3
 800fc16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc26:	2200      	movs	r2, #0
 800fc28:	4619      	mov	r1, r3
 800fc2a:	f000 fb9d 	bl	8010368 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fc2e:	e12c      	b.n	800fe8a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
 800fc32:	2b05      	cmp	r3, #5
 800fc34:	d113      	bne.n	800fc5e <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	220c      	movs	r2, #12
 800fc3a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2203      	movs	r2, #3
 800fc44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc54:	2200      	movs	r2, #0
 800fc56:	4619      	mov	r1, r3
 800fc58:	f000 fb86 	bl	8010368 <osMessagePut>
      break;
 800fc5c:	e115      	b.n	800fe8a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fc5e:	7bbb      	ldrb	r3, [r7, #14]
 800fc60:	2b02      	cmp	r3, #2
 800fc62:	d111      	bne.n	800fc88 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2205      	movs	r2, #5
 800fc68:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2203      	movs	r2, #3
 800fc6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc7e:	2200      	movs	r2, #0
 800fc80:	4619      	mov	r1, r3
 800fc82:	f000 fb71 	bl	8010368 <osMessagePut>
      break;
 800fc86:	e100      	b.n	800fe8a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800fc88:	7bbb      	ldrb	r3, [r7, #14]
 800fc8a:	2b04      	cmp	r3, #4
 800fc8c:	f040 80fd 	bne.w	800fe8a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	220b      	movs	r2, #11
 800fc94:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fc96:	2302      	movs	r3, #2
 800fc98:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2203      	movs	r2, #3
 800fc9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fcae:	2200      	movs	r2, #0
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	f000 fb59 	bl	8010368 <osMessagePut>
      break;
 800fcb6:	e0e8      	b.n	800fe8a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	791b      	ldrb	r3, [r3, #4]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 f92c 	bl	800ff1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fccc:	b29a      	uxth	r2, r3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2208      	movs	r2, #8
 800fcd6:	761a      	strb	r2, [r3, #24]

      break;
 800fcd8:	e0dc      	b.n	800fe94 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	791b      	ldrb	r3, [r3, #4]
 800fcde:	4619      	mov	r1, r3
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f002 ff8d 	bl	8012c00 <USBH_LL_GetURBState>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fcea:	7bbb      	ldrb	r3, [r7, #14]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d113      	bne.n	800fd18 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	220d      	movs	r2, #13
 800fcf4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2203      	movs	r2, #3
 800fcfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd0e:	2200      	movs	r2, #0
 800fd10:	4619      	mov	r1, r3
 800fd12:	f000 fb29 	bl	8010368 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fd16:	e0ba      	b.n	800fe8e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800fd18:	7bbb      	ldrb	r3, [r7, #14]
 800fd1a:	2b04      	cmp	r3, #4
 800fd1c:	d111      	bne.n	800fd42 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	220b      	movs	r2, #11
 800fd22:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2203      	movs	r2, #3
 800fd28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd38:	2200      	movs	r2, #0
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	f000 fb14 	bl	8010368 <osMessagePut>
      break;
 800fd40:	e0a5      	b.n	800fe8e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800fd42:	7bbb      	ldrb	r3, [r7, #14]
 800fd44:	2b05      	cmp	r3, #5
 800fd46:	f040 80a2 	bne.w	800fe8e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800fd4a:	2303      	movs	r3, #3
 800fd4c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2203      	movs	r2, #3
 800fd52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd62:	2200      	movs	r2, #0
 800fd64:	4619      	mov	r1, r3
 800fd66:	f000 faff 	bl	8010368 <osMessagePut>
      break;
 800fd6a:	e090      	b.n	800fe8e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	795a      	ldrb	r2, [r3, #5]
 800fd70:	2301      	movs	r3, #1
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	4613      	mov	r3, r2
 800fd76:	2200      	movs	r2, #0
 800fd78:	2100      	movs	r1, #0
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 f8aa 	bl	800fed4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	220a      	movs	r2, #10
 800fd90:	761a      	strb	r2, [r3, #24]
      break;
 800fd92:	e07f      	b.n	800fe94 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	795b      	ldrb	r3, [r3, #5]
 800fd98:	4619      	mov	r1, r3
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f002 ff30 	bl	8012c00 <USBH_LL_GetURBState>
 800fda0:	4603      	mov	r3, r0
 800fda2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fda4:	7bbb      	ldrb	r3, [r7, #14]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d113      	bne.n	800fdd2 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	220d      	movs	r2, #13
 800fdb2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2203      	movs	r2, #3
 800fdb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fdc8:	2200      	movs	r2, #0
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f000 facc 	bl	8010368 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fdd0:	e05f      	b.n	800fe92 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fdd2:	7bbb      	ldrb	r3, [r7, #14]
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d111      	bne.n	800fdfc <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2209      	movs	r2, #9
 800fddc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2203      	movs	r2, #3
 800fde2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	f000 fab7 	bl	8010368 <osMessagePut>
      break;
 800fdfa:	e04a      	b.n	800fe92 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800fdfc:	7bbb      	ldrb	r3, [r7, #14]
 800fdfe:	2b04      	cmp	r3, #4
 800fe00:	d147      	bne.n	800fe92 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	220b      	movs	r2, #11
 800fe06:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2203      	movs	r2, #3
 800fe0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	4619      	mov	r1, r3
 800fe20:	f000 faa2 	bl	8010368 <osMessagePut>
      break;
 800fe24:	e035      	b.n	800fe92 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	7e5b      	ldrb	r3, [r3, #25]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	765a      	strb	r2, [r3, #25]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	7e5b      	ldrb	r3, [r3, #25]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d806      	bhi.n	800fe48 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fe46:	e025      	b.n	800fe94 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe4e:	2106      	movs	r1, #6
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	795b      	ldrb	r3, [r3, #5]
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 f90d 	bl	8010080 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	791b      	ldrb	r3, [r3, #4]
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 f907 	bl	8010080 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fe78:	2302      	movs	r3, #2
 800fe7a:	73fb      	strb	r3, [r7, #15]
      break;
 800fe7c:	e00a      	b.n	800fe94 <USBH_HandleControl+0x488>

    default:
      break;
 800fe7e:	bf00      	nop
 800fe80:	e008      	b.n	800fe94 <USBH_HandleControl+0x488>
      break;
 800fe82:	bf00      	nop
 800fe84:	e006      	b.n	800fe94 <USBH_HandleControl+0x488>
      break;
 800fe86:	bf00      	nop
 800fe88:	e004      	b.n	800fe94 <USBH_HandleControl+0x488>
      break;
 800fe8a:	bf00      	nop
 800fe8c:	e002      	b.n	800fe94 <USBH_HandleControl+0x488>
      break;
 800fe8e:	bf00      	nop
 800fe90:	e000      	b.n	800fe94 <USBH_HandleControl+0x488>
      break;
 800fe92:	bf00      	nop
  }

  return status;
 800fe94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop

0800fea0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b088      	sub	sp, #32
 800fea4:	af04      	add	r7, sp, #16
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	4613      	mov	r3, r2
 800feac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800feae:	79f9      	ldrb	r1, [r7, #7]
 800feb0:	2300      	movs	r3, #0
 800feb2:	9303      	str	r3, [sp, #12]
 800feb4:	2308      	movs	r3, #8
 800feb6:	9302      	str	r3, [sp, #8]
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	2300      	movs	r3, #0
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	2300      	movs	r3, #0
 800fec2:	2200      	movs	r2, #0
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f002 fe6a 	bl	8012b9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800feca:	2300      	movs	r3, #0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b088      	sub	sp, #32
 800fed8:	af04      	add	r7, sp, #16
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	4611      	mov	r1, r2
 800fee0:	461a      	mov	r2, r3
 800fee2:	460b      	mov	r3, r1
 800fee4:	80fb      	strh	r3, [r7, #6]
 800fee6:	4613      	mov	r3, r2
 800fee8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fef4:	2300      	movs	r3, #0
 800fef6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fef8:	7979      	ldrb	r1, [r7, #5]
 800fefa:	7e3b      	ldrb	r3, [r7, #24]
 800fefc:	9303      	str	r3, [sp, #12]
 800fefe:	88fb      	ldrh	r3, [r7, #6]
 800ff00:	9302      	str	r3, [sp, #8]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	9301      	str	r3, [sp, #4]
 800ff06:	2301      	movs	r3, #1
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	68f8      	ldr	r0, [r7, #12]
 800ff10:	f002 fe45 	bl	8012b9e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ff14:	2300      	movs	r3, #0
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b088      	sub	sp, #32
 800ff22:	af04      	add	r7, sp, #16
 800ff24:	60f8      	str	r0, [r7, #12]
 800ff26:	60b9      	str	r1, [r7, #8]
 800ff28:	4611      	mov	r1, r2
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	80fb      	strh	r3, [r7, #6]
 800ff30:	4613      	mov	r3, r2
 800ff32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ff34:	7979      	ldrb	r1, [r7, #5]
 800ff36:	2300      	movs	r3, #0
 800ff38:	9303      	str	r3, [sp, #12]
 800ff3a:	88fb      	ldrh	r3, [r7, #6]
 800ff3c:	9302      	str	r3, [sp, #8]
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	2301      	movs	r3, #1
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	2300      	movs	r3, #0
 800ff48:	2201      	movs	r2, #1
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f002 fe27 	bl	8012b9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ff50:	2300      	movs	r3, #0

}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b088      	sub	sp, #32
 800ff5e:	af04      	add	r7, sp, #16
 800ff60:	60f8      	str	r0, [r7, #12]
 800ff62:	60b9      	str	r1, [r7, #8]
 800ff64:	4611      	mov	r1, r2
 800ff66:	461a      	mov	r2, r3
 800ff68:	460b      	mov	r3, r1
 800ff6a:	80fb      	strh	r3, [r7, #6]
 800ff6c:	4613      	mov	r3, r2
 800ff6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d001      	beq.n	800ff7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ff7e:	7979      	ldrb	r1, [r7, #5]
 800ff80:	7e3b      	ldrb	r3, [r7, #24]
 800ff82:	9303      	str	r3, [sp, #12]
 800ff84:	88fb      	ldrh	r3, [r7, #6]
 800ff86:	9302      	str	r3, [sp, #8]
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	9301      	str	r3, [sp, #4]
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	2302      	movs	r3, #2
 800ff92:	2200      	movs	r2, #0
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f002 fe02 	bl	8012b9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ff9a:	2300      	movs	r3, #0
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b088      	sub	sp, #32
 800ffa8:	af04      	add	r7, sp, #16
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	4611      	mov	r1, r2
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	80fb      	strh	r3, [r7, #6]
 800ffb6:	4613      	mov	r3, r2
 800ffb8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ffba:	7979      	ldrb	r1, [r7, #5]
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	9303      	str	r3, [sp, #12]
 800ffc0:	88fb      	ldrh	r3, [r7, #6]
 800ffc2:	9302      	str	r3, [sp, #8]
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	9301      	str	r3, [sp, #4]
 800ffc8:	2301      	movs	r3, #1
 800ffca:	9300      	str	r3, [sp, #0]
 800ffcc:	2302      	movs	r3, #2
 800ffce:	2201      	movs	r2, #1
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f002 fde4 	bl	8012b9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af04      	add	r7, sp, #16
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	4608      	mov	r0, r1
 800ffea:	4611      	mov	r1, r2
 800ffec:	461a      	mov	r2, r3
 800ffee:	4603      	mov	r3, r0
 800fff0:	70fb      	strb	r3, [r7, #3]
 800fff2:	460b      	mov	r3, r1
 800fff4:	70bb      	strb	r3, [r7, #2]
 800fff6:	4613      	mov	r3, r2
 800fff8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fffa:	7878      	ldrb	r0, [r7, #1]
 800fffc:	78ba      	ldrb	r2, [r7, #2]
 800fffe:	78f9      	ldrb	r1, [r7, #3]
 8010000:	8b3b      	ldrh	r3, [r7, #24]
 8010002:	9302      	str	r3, [sp, #8]
 8010004:	7d3b      	ldrb	r3, [r7, #20]
 8010006:	9301      	str	r3, [sp, #4]
 8010008:	7c3b      	ldrb	r3, [r7, #16]
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	4603      	mov	r3, r0
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f002 fd77 	bl	8012b02 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010014:	2300      	movs	r3, #0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3708      	adds	r7, #8
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b082      	sub	sp, #8
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	460b      	mov	r3, r1
 8010028:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801002a:	78fb      	ldrb	r3, [r7, #3]
 801002c:	4619      	mov	r1, r3
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f002 fd96 	bl	8012b60 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b084      	sub	sp, #16
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	460b      	mov	r3, r1
 8010048:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 f836 	bl	80100bc <USBH_GetFreePipe>
 8010050:	4603      	mov	r3, r0
 8010052:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010054:	89fb      	ldrh	r3, [r7, #14]
 8010056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801005a:	4293      	cmp	r3, r2
 801005c:	d00a      	beq.n	8010074 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801005e:	78fa      	ldrb	r2, [r7, #3]
 8010060:	89fb      	ldrh	r3, [r7, #14]
 8010062:	f003 030f 	and.w	r3, r3, #15
 8010066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801006a:	6879      	ldr	r1, [r7, #4]
 801006c:	33e0      	adds	r3, #224	; 0xe0
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	440b      	add	r3, r1
 8010072:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010074:	89fb      	ldrh	r3, [r7, #14]
 8010076:	b2db      	uxtb	r3, r3
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	460b      	mov	r3, r1
 801008a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 801008c:	78fb      	ldrb	r3, [r7, #3]
 801008e:	2b0a      	cmp	r3, #10
 8010090:	d80d      	bhi.n	80100ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010092:	78fb      	ldrb	r3, [r7, #3]
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	33e0      	adds	r3, #224	; 0xe0
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	4413      	add	r3, r2
 801009c:	685a      	ldr	r2, [r3, #4]
 801009e:	78fb      	ldrb	r3, [r7, #3]
 80100a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80100a4:	6879      	ldr	r1, [r7, #4]
 80100a6:	33e0      	adds	r3, #224	; 0xe0
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	440b      	add	r3, r1
 80100ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80100bc:	b480      	push	{r7}
 80100be:	b085      	sub	sp, #20
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80100c8:	2300      	movs	r3, #0
 80100ca:	73fb      	strb	r3, [r7, #15]
 80100cc:	e00f      	b.n	80100ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80100ce:	7bfb      	ldrb	r3, [r7, #15]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	33e0      	adds	r3, #224	; 0xe0
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	4413      	add	r3, r2
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d102      	bne.n	80100e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80100e2:	7bfb      	ldrb	r3, [r7, #15]
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	e007      	b.n	80100f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
 80100ea:	3301      	adds	r3, #1
 80100ec:	73fb      	strb	r3, [r7, #15]
 80100ee:	7bfb      	ldrb	r3, [r7, #15]
 80100f0:	2b0a      	cmp	r3, #10
 80100f2:	d9ec      	bls.n	80100ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80100f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3714      	adds	r7, #20
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr

08010104 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010104:	b480      	push	{r7}
 8010106:	b087      	sub	sp, #28
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	4613      	mov	r3, r2
 8010110:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010112:	2301      	movs	r3, #1
 8010114:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010116:	2300      	movs	r3, #0
 8010118:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801011a:	4b1f      	ldr	r3, [pc, #124]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 801011c:	7a5b      	ldrb	r3, [r3, #9]
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b00      	cmp	r3, #0
 8010122:	d131      	bne.n	8010188 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010124:	4b1c      	ldr	r3, [pc, #112]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 8010126:	7a5b      	ldrb	r3, [r3, #9]
 8010128:	b2db      	uxtb	r3, r3
 801012a:	461a      	mov	r2, r3
 801012c:	4b1a      	ldr	r3, [pc, #104]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 801012e:	2100      	movs	r1, #0
 8010130:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010132:	4b19      	ldr	r3, [pc, #100]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 8010134:	7a5b      	ldrb	r3, [r3, #9]
 8010136:	b2db      	uxtb	r3, r3
 8010138:	4a17      	ldr	r2, [pc, #92]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	68fa      	ldr	r2, [r7, #12]
 8010140:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010142:	4b15      	ldr	r3, [pc, #84]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 8010144:	7a5b      	ldrb	r3, [r3, #9]
 8010146:	b2db      	uxtb	r3, r3
 8010148:	461a      	mov	r2, r3
 801014a:	4b13      	ldr	r3, [pc, #76]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 801014c:	4413      	add	r3, r2
 801014e:	79fa      	ldrb	r2, [r7, #7]
 8010150:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010152:	4b11      	ldr	r3, [pc, #68]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 8010154:	7a5b      	ldrb	r3, [r3, #9]
 8010156:	b2db      	uxtb	r3, r3
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	b2d1      	uxtb	r1, r2
 801015c:	4a0e      	ldr	r2, [pc, #56]	; (8010198 <FATFS_LinkDriverEx+0x94>)
 801015e:	7251      	strb	r1, [r2, #9]
 8010160:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010162:	7dbb      	ldrb	r3, [r7, #22]
 8010164:	3330      	adds	r3, #48	; 0x30
 8010166:	b2da      	uxtb	r2, r3
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	3301      	adds	r3, #1
 8010170:	223a      	movs	r2, #58	; 0x3a
 8010172:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	3302      	adds	r3, #2
 8010178:	222f      	movs	r2, #47	; 0x2f
 801017a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	3303      	adds	r3, #3
 8010180:	2200      	movs	r2, #0
 8010182:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010184:	2300      	movs	r3, #0
 8010186:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010188:	7dfb      	ldrb	r3, [r7, #23]
}
 801018a:	4618      	mov	r0, r3
 801018c:	371c      	adds	r7, #28
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	2000031c 	.word	0x2000031c

0801019c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80101a6:	2200      	movs	r2, #0
 80101a8:	6839      	ldr	r1, [r7, #0]
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7ff ffaa 	bl	8010104 <FATFS_LinkDriverEx>
 80101b0:	4603      	mov	r3, r0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80101ba:	b480      	push	{r7}
 80101bc:	b085      	sub	sp, #20
 80101be:	af00      	add	r7, sp, #0
 80101c0:	4603      	mov	r3, r0
 80101c2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80101c4:	2300      	movs	r3, #0
 80101c6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80101c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101cc:	2b84      	cmp	r3, #132	; 0x84
 80101ce:	d005      	beq.n	80101dc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80101d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	4413      	add	r3, r2
 80101d8:	3303      	adds	r3, #3
 80101da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80101dc:	68fb      	ldr	r3, [r7, #12]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b083      	sub	sp, #12
 80101ee:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101f0:	f3ef 8305 	mrs	r3, IPSR
 80101f4:	607b      	str	r3, [r7, #4]
  return(result);
 80101f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	bf14      	ite	ne
 80101fc:	2301      	movne	r3, #1
 80101fe:	2300      	moveq	r3, #0
 8010200:	b2db      	uxtb	r3, r3
}
 8010202:	4618      	mov	r0, r3
 8010204:	370c      	adds	r7, #12
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr

0801020e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010212:	f001 f945 	bl	80114a0 <vTaskStartScheduler>
  
  return osOK;
 8010216:	2300      	movs	r3, #0
}
 8010218:	4618      	mov	r0, r3
 801021a:	bd80      	pop	{r7, pc}

0801021c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010220:	f001 fd90 	bl	8011d44 <xTaskGetSchedulerState>
 8010224:	4603      	mov	r3, r0
 8010226:	2b01      	cmp	r3, #1
 8010228:	d101      	bne.n	801022e <osKernelRunning+0x12>
    return 0;
 801022a:	2300      	movs	r3, #0
 801022c:	e000      	b.n	8010230 <osKernelRunning+0x14>
  else
    return 1;
 801022e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010230:	4618      	mov	r0, r3
 8010232:	bd80      	pop	{r7, pc}

08010234 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010238:	f7ff ffd7 	bl	80101ea <inHandlerMode>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d003      	beq.n	801024a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010242:	f001 fa4b 	bl	80116dc <xTaskGetTickCountFromISR>
 8010246:	4603      	mov	r3, r0
 8010248:	e002      	b.n	8010250 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801024a:	f001 fa37 	bl	80116bc <xTaskGetTickCount>
 801024e:	4603      	mov	r3, r0
  }
}
 8010250:	4618      	mov	r0, r3
 8010252:	bd80      	pop	{r7, pc}

08010254 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010256:	b089      	sub	sp, #36	; 0x24
 8010258:	af04      	add	r7, sp, #16
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	695b      	ldr	r3, [r3, #20]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d020      	beq.n	80102a8 <osThreadCreate+0x54>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d01c      	beq.n	80102a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	685c      	ldr	r4, [r3, #4]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681d      	ldr	r5, [r3, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	691e      	ldr	r6, [r3, #16]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010280:	4618      	mov	r0, r3
 8010282:	f7ff ff9a 	bl	80101ba <makeFreeRtosPriority>
 8010286:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	695b      	ldr	r3, [r3, #20]
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010290:	9202      	str	r2, [sp, #8]
 8010292:	9301      	str	r3, [sp, #4]
 8010294:	9100      	str	r1, [sp, #0]
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	4632      	mov	r2, r6
 801029a:	4629      	mov	r1, r5
 801029c:	4620      	mov	r0, r4
 801029e:	f000 ff26 	bl	80110ee <xTaskCreateStatic>
 80102a2:	4603      	mov	r3, r0
 80102a4:	60fb      	str	r3, [r7, #12]
 80102a6:	e01c      	b.n	80102e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	685c      	ldr	r4, [r3, #4]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102b4:	b29e      	uxth	r6, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80102bc:	4618      	mov	r0, r3
 80102be:	f7ff ff7c 	bl	80101ba <makeFreeRtosPriority>
 80102c2:	4602      	mov	r2, r0
 80102c4:	f107 030c 	add.w	r3, r7, #12
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	9200      	str	r2, [sp, #0]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	4632      	mov	r2, r6
 80102d0:	4629      	mov	r1, r5
 80102d2:	4620      	mov	r0, r4
 80102d4:	f000 ff6b 	bl	80111ae <xTaskCreate>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d001      	beq.n	80102e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80102de:	2300      	movs	r3, #0
 80102e0:	e000      	b.n	80102e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80102e2:	68fb      	ldr	r3, [r7, #12]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3714      	adds	r7, #20
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d001      	beq.n	8010302 <osDelay+0x16>
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	e000      	b.n	8010304 <osDelay+0x18>
 8010302:	2301      	movs	r3, #1
 8010304:	4618      	mov	r0, r3
 8010306:	f001 f895 	bl	8011434 <vTaskDelay>
  
  return osOK;
 801030a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010314:	b590      	push	{r4, r7, lr}
 8010316:	b085      	sub	sp, #20
 8010318:	af02      	add	r7, sp, #8
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d012      	beq.n	801034c <osMessageCreate+0x38>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00e      	beq.n	801034c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6818      	ldr	r0, [r3, #0]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6859      	ldr	r1, [r3, #4]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	689a      	ldr	r2, [r3, #8]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	68dc      	ldr	r4, [r3, #12]
 801033e:	2300      	movs	r3, #0
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	4623      	mov	r3, r4
 8010344:	f000 f9e2 	bl	801070c <xQueueGenericCreateStatic>
 8010348:	4603      	mov	r3, r0
 801034a:	e008      	b.n	801035e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	2200      	movs	r2, #0
 8010356:	4619      	mov	r1, r3
 8010358:	f000 fa55 	bl	8010806 <xQueueGenericCreate>
 801035c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801035e:	4618      	mov	r0, r3
 8010360:	370c      	adds	r7, #12
 8010362:	46bd      	mov	sp, r7
 8010364:	bd90      	pop	{r4, r7, pc}
	...

08010368 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b086      	sub	sp, #24
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010374:	2300      	movs	r3, #0
 8010376:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d101      	bne.n	8010386 <osMessagePut+0x1e>
    ticks = 1;
 8010382:	2301      	movs	r3, #1
 8010384:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010386:	f7ff ff30 	bl	80101ea <inHandlerMode>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d018      	beq.n	80103c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010390:	f107 0210 	add.w	r2, r7, #16
 8010394:	f107 0108 	add.w	r1, r7, #8
 8010398:	2300      	movs	r3, #0
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f000 fb96 	bl	8010acc <xQueueGenericSendFromISR>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d001      	beq.n	80103aa <osMessagePut+0x42>
      return osErrorOS;
 80103a6:	23ff      	movs	r3, #255	; 0xff
 80103a8:	e018      	b.n	80103dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d014      	beq.n	80103da <osMessagePut+0x72>
 80103b0:	4b0c      	ldr	r3, [pc, #48]	; (80103e4 <osMessagePut+0x7c>)
 80103b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103b6:	601a      	str	r2, [r3, #0]
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	f3bf 8f6f 	isb	sy
 80103c0:	e00b      	b.n	80103da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80103c2:	f107 0108 	add.w	r1, r7, #8
 80103c6:	2300      	movs	r3, #0
 80103c8:	697a      	ldr	r2, [r7, #20]
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f000 fa7c 	bl	80108c8 <xQueueGenericSend>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d001      	beq.n	80103da <osMessagePut+0x72>
      return osErrorOS;
 80103d6:	23ff      	movs	r3, #255	; 0xff
 80103d8:	e000      	b.n	80103dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80103da:	2300      	movs	r3, #0
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3718      	adds	r7, #24
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	e000ed04 	.word	0xe000ed04

080103e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80103e8:	b590      	push	{r4, r7, lr}
 80103ea:	b08b      	sub	sp, #44	; 0x2c
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80103f8:	2300      	movs	r3, #0
 80103fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10a      	bne.n	8010418 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010402:	2380      	movs	r3, #128	; 0x80
 8010404:	617b      	str	r3, [r7, #20]
    return event;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	461c      	mov	r4, r3
 801040a:	f107 0314 	add.w	r3, r7, #20
 801040e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010416:	e054      	b.n	80104c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010418:	2300      	movs	r3, #0
 801041a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801041c:	2300      	movs	r3, #0
 801041e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010426:	d103      	bne.n	8010430 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010428:	f04f 33ff 	mov.w	r3, #4294967295
 801042c:	627b      	str	r3, [r7, #36]	; 0x24
 801042e:	e009      	b.n	8010444 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d006      	beq.n	8010444 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043c:	2b00      	cmp	r3, #0
 801043e:	d101      	bne.n	8010444 <osMessageGet+0x5c>
      ticks = 1;
 8010440:	2301      	movs	r3, #1
 8010442:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010444:	f7ff fed1 	bl	80101ea <inHandlerMode>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d01c      	beq.n	8010488 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801044e:	f107 0220 	add.w	r2, r7, #32
 8010452:	f107 0314 	add.w	r3, r7, #20
 8010456:	3304      	adds	r3, #4
 8010458:	4619      	mov	r1, r3
 801045a:	68b8      	ldr	r0, [r7, #8]
 801045c:	f000 fcb4 	bl	8010dc8 <xQueueReceiveFromISR>
 8010460:	4603      	mov	r3, r0
 8010462:	2b01      	cmp	r3, #1
 8010464:	d102      	bne.n	801046c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010466:	2310      	movs	r3, #16
 8010468:	617b      	str	r3, [r7, #20]
 801046a:	e001      	b.n	8010470 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801046c:	2300      	movs	r3, #0
 801046e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d01d      	beq.n	80104b2 <osMessageGet+0xca>
 8010476:	4b15      	ldr	r3, [pc, #84]	; (80104cc <osMessageGet+0xe4>)
 8010478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801047c:	601a      	str	r2, [r3, #0]
 801047e:	f3bf 8f4f 	dsb	sy
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	e014      	b.n	80104b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010488:	f107 0314 	add.w	r3, r7, #20
 801048c:	3304      	adds	r3, #4
 801048e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010490:	4619      	mov	r1, r3
 8010492:	68b8      	ldr	r0, [r7, #8]
 8010494:	f000 fbb6 	bl	8010c04 <xQueueReceive>
 8010498:	4603      	mov	r3, r0
 801049a:	2b01      	cmp	r3, #1
 801049c:	d102      	bne.n	80104a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801049e:	2310      	movs	r3, #16
 80104a0:	617b      	str	r3, [r7, #20]
 80104a2:	e006      	b.n	80104b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80104a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <osMessageGet+0xc6>
 80104aa:	2300      	movs	r3, #0
 80104ac:	e000      	b.n	80104b0 <osMessageGet+0xc8>
 80104ae:	2340      	movs	r3, #64	; 0x40
 80104b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	461c      	mov	r4, r3
 80104b6:	f107 0314 	add.w	r3, r7, #20
 80104ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80104be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	372c      	adds	r7, #44	; 0x2c
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd90      	pop	{r4, r7, pc}
 80104ca:	bf00      	nop
 80104cc:	e000ed04 	.word	0xe000ed04

080104d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f103 0208 	add.w	r2, r3, #8
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f04f 32ff 	mov.w	r2, #4294967295
 80104e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f103 0208 	add.w	r2, r3, #8
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f103 0208 	add.w	r2, r3, #8
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2200      	movs	r2, #0
 8010502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010504:	bf00      	nop
 8010506:	370c      	adds	r7, #12
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801051e:	bf00      	nop
 8010520:	370c      	adds	r7, #12
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801052a:	b480      	push	{r7}
 801052c:	b085      	sub	sp, #20
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	689a      	ldr	r2, [r3, #8]
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	1c5a      	adds	r2, r3, #1
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	601a      	str	r2, [r3, #0]
}
 8010566:	bf00      	nop
 8010568:	3714      	adds	r7, #20
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010572:	b480      	push	{r7}
 8010574:	b085      	sub	sp, #20
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
 801057a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010588:	d103      	bne.n	8010592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	691b      	ldr	r3, [r3, #16]
 801058e:	60fb      	str	r3, [r7, #12]
 8010590:	e00c      	b.n	80105ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	3308      	adds	r3, #8
 8010596:	60fb      	str	r3, [r7, #12]
 8010598:	e002      	b.n	80105a0 <vListInsert+0x2e>
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	60fb      	str	r3, [r7, #12]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d2f6      	bcs.n	801059a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	685a      	ldr	r2, [r3, #4]
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	68fa      	ldr	r2, [r7, #12]
 80105c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	683a      	ldr	r2, [r7, #0]
 80105c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	1c5a      	adds	r2, r3, #1
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	601a      	str	r2, [r3, #0]
}
 80105d8:	bf00      	nop
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	691b      	ldr	r3, [r3, #16]
 80105f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6892      	ldr	r2, [r2, #8]
 80105fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	6852      	ldr	r2, [r2, #4]
 8010604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d103      	bne.n	8010618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	689a      	ldr	r2, [r3, #8]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	1e5a      	subs	r2, r3, #1
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
}
 801062c:	4618      	mov	r0, r3
 801062e:	3714      	adds	r7, #20
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10b      	bne.n	8010664 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010650:	b672      	cpsid	i
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	b662      	cpsie	i
 8010660:	60bb      	str	r3, [r7, #8]
 8010662:	e7fe      	b.n	8010662 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010664:	f001 fd80 	bl	8012168 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010670:	68f9      	ldr	r1, [r7, #12]
 8010672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010674:	fb01 f303 	mul.w	r3, r1, r3
 8010678:	441a      	add	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2200      	movs	r2, #0
 8010682:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010694:	3b01      	subs	r3, #1
 8010696:	68f9      	ldr	r1, [r7, #12]
 8010698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801069a:	fb01 f303 	mul.w	r3, r1, r3
 801069e:	441a      	add	r2, r3
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	22ff      	movs	r2, #255	; 0xff
 80106a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	22ff      	movs	r2, #255	; 0xff
 80106b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d114      	bne.n	80106e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	691b      	ldr	r3, [r3, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d01a      	beq.n	80106f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	3310      	adds	r3, #16
 80106c6:	4618      	mov	r0, r3
 80106c8:	f001 f97c 	bl	80119c4 <xTaskRemoveFromEventList>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d012      	beq.n	80106f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80106d2:	4b0d      	ldr	r3, [pc, #52]	; (8010708 <xQueueGenericReset+0xd0>)
 80106d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	f3bf 8f6f 	isb	sy
 80106e2:	e009      	b.n	80106f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	3310      	adds	r3, #16
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ff fef1 	bl	80104d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	3324      	adds	r3, #36	; 0x24
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7ff feec 	bl	80104d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80106f8:	f001 fd68 	bl	80121cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80106fc:	2301      	movs	r3, #1
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3710      	adds	r7, #16
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	e000ed04 	.word	0xe000ed04

0801070c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08e      	sub	sp, #56	; 0x38
 8010710:	af02      	add	r7, sp, #8
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10b      	bne.n	8010738 <xQueueGenericCreateStatic+0x2c>
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	b672      	cpsid	i
 8010726:	f383 8811 	msr	BASEPRI, r3
 801072a:	f3bf 8f6f 	isb	sy
 801072e:	f3bf 8f4f 	dsb	sy
 8010732:	b662      	cpsie	i
 8010734:	62bb      	str	r3, [r7, #40]	; 0x28
 8010736:	e7fe      	b.n	8010736 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d10b      	bne.n	8010756 <xQueueGenericCreateStatic+0x4a>
 801073e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010742:	b672      	cpsid	i
 8010744:	f383 8811 	msr	BASEPRI, r3
 8010748:	f3bf 8f6f 	isb	sy
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	b662      	cpsie	i
 8010752:	627b      	str	r3, [r7, #36]	; 0x24
 8010754:	e7fe      	b.n	8010754 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <xQueueGenericCreateStatic+0x56>
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <xQueueGenericCreateStatic+0x5a>
 8010762:	2301      	movs	r3, #1
 8010764:	e000      	b.n	8010768 <xQueueGenericCreateStatic+0x5c>
 8010766:	2300      	movs	r3, #0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d10b      	bne.n	8010784 <xQueueGenericCreateStatic+0x78>
 801076c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010770:	b672      	cpsid	i
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	b662      	cpsie	i
 8010780:	623b      	str	r3, [r7, #32]
 8010782:	e7fe      	b.n	8010782 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d102      	bne.n	8010790 <xQueueGenericCreateStatic+0x84>
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <xQueueGenericCreateStatic+0x88>
 8010790:	2301      	movs	r3, #1
 8010792:	e000      	b.n	8010796 <xQueueGenericCreateStatic+0x8a>
 8010794:	2300      	movs	r3, #0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d10b      	bne.n	80107b2 <xQueueGenericCreateStatic+0xa6>
 801079a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079e:	b672      	cpsid	i
 80107a0:	f383 8811 	msr	BASEPRI, r3
 80107a4:	f3bf 8f6f 	isb	sy
 80107a8:	f3bf 8f4f 	dsb	sy
 80107ac:	b662      	cpsie	i
 80107ae:	61fb      	str	r3, [r7, #28]
 80107b0:	e7fe      	b.n	80107b0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80107b2:	2348      	movs	r3, #72	; 0x48
 80107b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	2b48      	cmp	r3, #72	; 0x48
 80107ba:	d00b      	beq.n	80107d4 <xQueueGenericCreateStatic+0xc8>
 80107bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c0:	b672      	cpsid	i
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	b662      	cpsie	i
 80107d0:	61bb      	str	r3, [r7, #24]
 80107d2:	e7fe      	b.n	80107d2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80107d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00d      	beq.n	80107fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e2:	2201      	movs	r2, #1
 80107e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80107e8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80107ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	4613      	mov	r3, r2
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	68b9      	ldr	r1, [r7, #8]
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f000 f846 	bl	8010888 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80107fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80107fe:	4618      	mov	r0, r3
 8010800:	3730      	adds	r7, #48	; 0x30
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010806:	b580      	push	{r7, lr}
 8010808:	b08a      	sub	sp, #40	; 0x28
 801080a:	af02      	add	r7, sp, #8
 801080c:	60f8      	str	r0, [r7, #12]
 801080e:	60b9      	str	r1, [r7, #8]
 8010810:	4613      	mov	r3, r2
 8010812:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d10b      	bne.n	8010832 <xQueueGenericCreate+0x2c>
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	b672      	cpsid	i
 8010820:	f383 8811 	msr	BASEPRI, r3
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	f3bf 8f4f 	dsb	sy
 801082c:	b662      	cpsie	i
 801082e:	613b      	str	r3, [r7, #16]
 8010830:	e7fe      	b.n	8010830 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d102      	bne.n	801083e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010838:	2300      	movs	r3, #0
 801083a:	61fb      	str	r3, [r7, #28]
 801083c:	e004      	b.n	8010848 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	fb02 f303 	mul.w	r3, r2, r3
 8010846:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	3348      	adds	r3, #72	; 0x48
 801084c:	4618      	mov	r0, r3
 801084e:	f001 fdad 	bl	80123ac <pvPortMalloc>
 8010852:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d011      	beq.n	801087e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	3348      	adds	r3, #72	; 0x48
 8010862:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	2200      	movs	r2, #0
 8010868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801086c:	79fa      	ldrb	r2, [r7, #7]
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	4613      	mov	r3, r2
 8010874:	697a      	ldr	r2, [r7, #20]
 8010876:	68b9      	ldr	r1, [r7, #8]
 8010878:	68f8      	ldr	r0, [r7, #12]
 801087a:	f000 f805 	bl	8010888 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801087e:	69bb      	ldr	r3, [r7, #24]
	}
 8010880:	4618      	mov	r0, r3
 8010882:	3720      	adds	r7, #32
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d103      	bne.n	80108a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	69ba      	ldr	r2, [r7, #24]
 80108a0:	601a      	str	r2, [r3, #0]
 80108a2:	e002      	b.n	80108aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80108a4:	69bb      	ldr	r3, [r7, #24]
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80108b6:	2101      	movs	r1, #1
 80108b8:	69b8      	ldr	r0, [r7, #24]
 80108ba:	f7ff febd 	bl	8010638 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80108be:	bf00      	nop
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
	...

080108c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b08e      	sub	sp, #56	; 0x38
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
 80108d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80108d6:	2300      	movs	r3, #0
 80108d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d10b      	bne.n	80108fc <xQueueGenericSend+0x34>
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	b672      	cpsid	i
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	b662      	cpsie	i
 80108f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80108fa:	e7fe      	b.n	80108fa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d103      	bne.n	801090a <xQueueGenericSend+0x42>
 8010902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010906:	2b00      	cmp	r3, #0
 8010908:	d101      	bne.n	801090e <xQueueGenericSend+0x46>
 801090a:	2301      	movs	r3, #1
 801090c:	e000      	b.n	8010910 <xQueueGenericSend+0x48>
 801090e:	2300      	movs	r3, #0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10b      	bne.n	801092c <xQueueGenericSend+0x64>
 8010914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010918:	b672      	cpsid	i
 801091a:	f383 8811 	msr	BASEPRI, r3
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	f3bf 8f4f 	dsb	sy
 8010926:	b662      	cpsie	i
 8010928:	627b      	str	r3, [r7, #36]	; 0x24
 801092a:	e7fe      	b.n	801092a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	2b02      	cmp	r3, #2
 8010930:	d103      	bne.n	801093a <xQueueGenericSend+0x72>
 8010932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010936:	2b01      	cmp	r3, #1
 8010938:	d101      	bne.n	801093e <xQueueGenericSend+0x76>
 801093a:	2301      	movs	r3, #1
 801093c:	e000      	b.n	8010940 <xQueueGenericSend+0x78>
 801093e:	2300      	movs	r3, #0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10b      	bne.n	801095c <xQueueGenericSend+0x94>
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	b672      	cpsid	i
 801094a:	f383 8811 	msr	BASEPRI, r3
 801094e:	f3bf 8f6f 	isb	sy
 8010952:	f3bf 8f4f 	dsb	sy
 8010956:	b662      	cpsie	i
 8010958:	623b      	str	r3, [r7, #32]
 801095a:	e7fe      	b.n	801095a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801095c:	f001 f9f2 	bl	8011d44 <xTaskGetSchedulerState>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d102      	bne.n	801096c <xQueueGenericSend+0xa4>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d101      	bne.n	8010970 <xQueueGenericSend+0xa8>
 801096c:	2301      	movs	r3, #1
 801096e:	e000      	b.n	8010972 <xQueueGenericSend+0xaa>
 8010970:	2300      	movs	r3, #0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d10b      	bne.n	801098e <xQueueGenericSend+0xc6>
 8010976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097a:	b672      	cpsid	i
 801097c:	f383 8811 	msr	BASEPRI, r3
 8010980:	f3bf 8f6f 	isb	sy
 8010984:	f3bf 8f4f 	dsb	sy
 8010988:	b662      	cpsie	i
 801098a:	61fb      	str	r3, [r7, #28]
 801098c:	e7fe      	b.n	801098c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801098e:	f001 fbeb 	bl	8012168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801099a:	429a      	cmp	r2, r3
 801099c:	d302      	bcc.n	80109a4 <xQueueGenericSend+0xdc>
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	2b02      	cmp	r3, #2
 80109a2:	d129      	bne.n	80109f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	68b9      	ldr	r1, [r7, #8]
 80109a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109aa:	f000 fa90 	bl	8010ece <prvCopyDataToQueue>
 80109ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d010      	beq.n	80109da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ba:	3324      	adds	r3, #36	; 0x24
 80109bc:	4618      	mov	r0, r3
 80109be:	f001 f801 	bl	80119c4 <xTaskRemoveFromEventList>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d013      	beq.n	80109f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80109c8:	4b3f      	ldr	r3, [pc, #252]	; (8010ac8 <xQueueGenericSend+0x200>)
 80109ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ce:	601a      	str	r2, [r3, #0]
 80109d0:	f3bf 8f4f 	dsb	sy
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	e00a      	b.n	80109f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80109da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d007      	beq.n	80109f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80109e0:	4b39      	ldr	r3, [pc, #228]	; (8010ac8 <xQueueGenericSend+0x200>)
 80109e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e6:	601a      	str	r2, [r3, #0]
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80109f0:	f001 fbec 	bl	80121cc <vPortExitCritical>
				return pdPASS;
 80109f4:	2301      	movs	r3, #1
 80109f6:	e063      	b.n	8010ac0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d103      	bne.n	8010a06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80109fe:	f001 fbe5 	bl	80121cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a02:	2300      	movs	r3, #0
 8010a04:	e05c      	b.n	8010ac0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d106      	bne.n	8010a1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a0c:	f107 0314 	add.w	r3, r7, #20
 8010a10:	4618      	mov	r0, r3
 8010a12:	f001 f83b 	bl	8011a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a16:	2301      	movs	r3, #1
 8010a18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a1a:	f001 fbd7 	bl	80121cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a1e:	f000 fda1 	bl	8011564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a22:	f001 fba1 	bl	8012168 <vPortEnterCritical>
 8010a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a2c:	b25b      	sxtb	r3, r3
 8010a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a32:	d103      	bne.n	8010a3c <xQueueGenericSend+0x174>
 8010a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a42:	b25b      	sxtb	r3, r3
 8010a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a48:	d103      	bne.n	8010a52 <xQueueGenericSend+0x18a>
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a52:	f001 fbbb 	bl	80121cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a56:	1d3a      	adds	r2, r7, #4
 8010a58:	f107 0314 	add.w	r3, r7, #20
 8010a5c:	4611      	mov	r1, r2
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f001 f82a 	bl	8011ab8 <xTaskCheckForTimeOut>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d124      	bne.n	8010ab4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a6c:	f000 fb27 	bl	80110be <prvIsQueueFull>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d018      	beq.n	8010aa8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a78:	3310      	adds	r3, #16
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f000 ff7a 	bl	8011978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a86:	f000 fab2 	bl	8010fee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010a8a:	f000 fd79 	bl	8011580 <xTaskResumeAll>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	f47f af7c 	bne.w	801098e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010a96:	4b0c      	ldr	r3, [pc, #48]	; (8010ac8 <xQueueGenericSend+0x200>)
 8010a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	e772      	b.n	801098e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aaa:	f000 faa0 	bl	8010fee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010aae:	f000 fd67 	bl	8011580 <xTaskResumeAll>
 8010ab2:	e76c      	b.n	801098e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ab6:	f000 fa9a 	bl	8010fee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010aba:	f000 fd61 	bl	8011580 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3738      	adds	r7, #56	; 0x38
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	e000ed04 	.word	0xe000ed04

08010acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b08e      	sub	sp, #56	; 0x38
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	60f8      	str	r0, [r7, #12]
 8010ad4:	60b9      	str	r1, [r7, #8]
 8010ad6:	607a      	str	r2, [r7, #4]
 8010ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d10b      	bne.n	8010afc <xQueueGenericSendFromISR+0x30>
 8010ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae8:	b672      	cpsid	i
 8010aea:	f383 8811 	msr	BASEPRI, r3
 8010aee:	f3bf 8f6f 	isb	sy
 8010af2:	f3bf 8f4f 	dsb	sy
 8010af6:	b662      	cpsie	i
 8010af8:	627b      	str	r3, [r7, #36]	; 0x24
 8010afa:	e7fe      	b.n	8010afa <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d103      	bne.n	8010b0a <xQueueGenericSendFromISR+0x3e>
 8010b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d101      	bne.n	8010b0e <xQueueGenericSendFromISR+0x42>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e000      	b.n	8010b10 <xQueueGenericSendFromISR+0x44>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d10b      	bne.n	8010b2c <xQueueGenericSendFromISR+0x60>
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	b672      	cpsid	i
 8010b1a:	f383 8811 	msr	BASEPRI, r3
 8010b1e:	f3bf 8f6f 	isb	sy
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	b662      	cpsie	i
 8010b28:	623b      	str	r3, [r7, #32]
 8010b2a:	e7fe      	b.n	8010b2a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d103      	bne.n	8010b3a <xQueueGenericSendFromISR+0x6e>
 8010b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d101      	bne.n	8010b3e <xQueueGenericSendFromISR+0x72>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e000      	b.n	8010b40 <xQueueGenericSendFromISR+0x74>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d10b      	bne.n	8010b5c <xQueueGenericSendFromISR+0x90>
 8010b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b48:	b672      	cpsid	i
 8010b4a:	f383 8811 	msr	BASEPRI, r3
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	b662      	cpsie	i
 8010b58:	61fb      	str	r3, [r7, #28]
 8010b5a:	e7fe      	b.n	8010b5a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b5c:	f001 fbe4 	bl	8012328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010b60:	f3ef 8211 	mrs	r2, BASEPRI
 8010b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b68:	b672      	cpsid	i
 8010b6a:	f383 8811 	msr	BASEPRI, r3
 8010b6e:	f3bf 8f6f 	isb	sy
 8010b72:	f3bf 8f4f 	dsb	sy
 8010b76:	b662      	cpsie	i
 8010b78:	61ba      	str	r2, [r7, #24]
 8010b7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010b7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d302      	bcc.n	8010b92 <xQueueGenericSendFromISR+0xc6>
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	2b02      	cmp	r3, #2
 8010b90:	d12c      	bne.n	8010bec <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b9c:	683a      	ldr	r2, [r7, #0]
 8010b9e:	68b9      	ldr	r1, [r7, #8]
 8010ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ba2:	f000 f994 	bl	8010ece <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ba6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bae:	d112      	bne.n	8010bd6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d016      	beq.n	8010be6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bba:	3324      	adds	r3, #36	; 0x24
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f000 ff01 	bl	80119c4 <xTaskRemoveFromEventList>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00e      	beq.n	8010be6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00b      	beq.n	8010be6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	e007      	b.n	8010be6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010bda:	3301      	adds	r3, #1
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	b25a      	sxtb	r2, r3
 8010be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010be6:	2301      	movs	r3, #1
 8010be8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010bea:	e001      	b.n	8010bf0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010bec:	2300      	movs	r3, #0
 8010bee:	637b      	str	r3, [r7, #52]	; 0x34
 8010bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3738      	adds	r7, #56	; 0x38
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b08c      	sub	sp, #48	; 0x30
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	60b9      	str	r1, [r7, #8]
 8010c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c10:	2300      	movs	r3, #0
 8010c12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d10b      	bne.n	8010c36 <xQueueReceive+0x32>
	__asm volatile
 8010c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c22:	b672      	cpsid	i
 8010c24:	f383 8811 	msr	BASEPRI, r3
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	b662      	cpsie	i
 8010c32:	623b      	str	r3, [r7, #32]
 8010c34:	e7fe      	b.n	8010c34 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d103      	bne.n	8010c44 <xQueueReceive+0x40>
 8010c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d101      	bne.n	8010c48 <xQueueReceive+0x44>
 8010c44:	2301      	movs	r3, #1
 8010c46:	e000      	b.n	8010c4a <xQueueReceive+0x46>
 8010c48:	2300      	movs	r3, #0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10b      	bne.n	8010c66 <xQueueReceive+0x62>
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	b672      	cpsid	i
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	b662      	cpsie	i
 8010c62:	61fb      	str	r3, [r7, #28]
 8010c64:	e7fe      	b.n	8010c64 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c66:	f001 f86d 	bl	8011d44 <xTaskGetSchedulerState>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d102      	bne.n	8010c76 <xQueueReceive+0x72>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <xQueueReceive+0x76>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e000      	b.n	8010c7c <xQueueReceive+0x78>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d10b      	bne.n	8010c98 <xQueueReceive+0x94>
 8010c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c84:	b672      	cpsid	i
 8010c86:	f383 8811 	msr	BASEPRI, r3
 8010c8a:	f3bf 8f6f 	isb	sy
 8010c8e:	f3bf 8f4f 	dsb	sy
 8010c92:	b662      	cpsie	i
 8010c94:	61bb      	str	r3, [r7, #24]
 8010c96:	e7fe      	b.n	8010c96 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010c98:	f001 fa66 	bl	8012168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d01f      	beq.n	8010ce8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ca8:	68b9      	ldr	r1, [r7, #8]
 8010caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cac:	f000 f979 	bl	8010fa2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb2:	1e5a      	subs	r2, r3, #1
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cba:	691b      	ldr	r3, [r3, #16]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d00f      	beq.n	8010ce0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc2:	3310      	adds	r3, #16
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f000 fe7d 	bl	80119c4 <xTaskRemoveFromEventList>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d007      	beq.n	8010ce0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010cd0:	4b3c      	ldr	r3, [pc, #240]	; (8010dc4 <xQueueReceive+0x1c0>)
 8010cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cd6:	601a      	str	r2, [r3, #0]
 8010cd8:	f3bf 8f4f 	dsb	sy
 8010cdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010ce0:	f001 fa74 	bl	80121cc <vPortExitCritical>
				return pdPASS;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	e069      	b.n	8010dbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d103      	bne.n	8010cf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010cee:	f001 fa6d 	bl	80121cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	e062      	b.n	8010dbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d106      	bne.n	8010d0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010cfc:	f107 0310 	add.w	r3, r7, #16
 8010d00:	4618      	mov	r0, r3
 8010d02:	f000 fec3 	bl	8011a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d06:	2301      	movs	r3, #1
 8010d08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d0a:	f001 fa5f 	bl	80121cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d0e:	f000 fc29 	bl	8011564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d12:	f001 fa29 	bl	8012168 <vPortEnterCritical>
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d1c:	b25b      	sxtb	r3, r3
 8010d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d22:	d103      	bne.n	8010d2c <xQueueReceive+0x128>
 8010d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d26:	2200      	movs	r2, #0
 8010d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d32:	b25b      	sxtb	r3, r3
 8010d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d38:	d103      	bne.n	8010d42 <xQueueReceive+0x13e>
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d42:	f001 fa43 	bl	80121cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d46:	1d3a      	adds	r2, r7, #4
 8010d48:	f107 0310 	add.w	r3, r7, #16
 8010d4c:	4611      	mov	r1, r2
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f000 feb2 	bl	8011ab8 <xTaskCheckForTimeOut>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d123      	bne.n	8010da2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d5c:	f000 f999 	bl	8011092 <prvIsQueueEmpty>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d017      	beq.n	8010d96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d68:	3324      	adds	r3, #36	; 0x24
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fe02 	bl	8011978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d76:	f000 f93a 	bl	8010fee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010d7a:	f000 fc01 	bl	8011580 <xTaskResumeAll>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d189      	bne.n	8010c98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010d84:	4b0f      	ldr	r3, [pc, #60]	; (8010dc4 <xQueueReceive+0x1c0>)
 8010d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d8a:	601a      	str	r2, [r3, #0]
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	f3bf 8f6f 	isb	sy
 8010d94:	e780      	b.n	8010c98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d98:	f000 f929 	bl	8010fee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d9c:	f000 fbf0 	bl	8011580 <xTaskResumeAll>
 8010da0:	e77a      	b.n	8010c98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010da4:	f000 f923 	bl	8010fee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010da8:	f000 fbea 	bl	8011580 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dae:	f000 f970 	bl	8011092 <prvIsQueueEmpty>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f43f af6f 	beq.w	8010c98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010dba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3730      	adds	r7, #48	; 0x30
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	e000ed04 	.word	0xe000ed04

08010dc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b08e      	sub	sp, #56	; 0x38
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d10b      	bne.n	8010df6 <xQueueReceiveFromISR+0x2e>
 8010dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de2:	b672      	cpsid	i
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	b662      	cpsie	i
 8010df2:	623b      	str	r3, [r7, #32]
 8010df4:	e7fe      	b.n	8010df4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d103      	bne.n	8010e04 <xQueueReceiveFromISR+0x3c>
 8010dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d101      	bne.n	8010e08 <xQueueReceiveFromISR+0x40>
 8010e04:	2301      	movs	r3, #1
 8010e06:	e000      	b.n	8010e0a <xQueueReceiveFromISR+0x42>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d10b      	bne.n	8010e26 <xQueueReceiveFromISR+0x5e>
 8010e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e12:	b672      	cpsid	i
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	b662      	cpsie	i
 8010e22:	61fb      	str	r3, [r7, #28]
 8010e24:	e7fe      	b.n	8010e24 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e26:	f001 fa7f 	bl	8012328 <vPortValidateInterruptPriority>
	__asm volatile
 8010e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8010e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e32:	b672      	cpsid	i
 8010e34:	f383 8811 	msr	BASEPRI, r3
 8010e38:	f3bf 8f6f 	isb	sy
 8010e3c:	f3bf 8f4f 	dsb	sy
 8010e40:	b662      	cpsie	i
 8010e42:	61ba      	str	r2, [r7, #24]
 8010e44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010e46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d02f      	beq.n	8010eb6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e60:	68b9      	ldr	r1, [r7, #8]
 8010e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e64:	f000 f89d 	bl	8010fa2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6a:	1e5a      	subs	r2, r3, #1
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010e70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e78:	d112      	bne.n	8010ea0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7c:	691b      	ldr	r3, [r3, #16]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d016      	beq.n	8010eb0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e84:	3310      	adds	r3, #16
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 fd9c 	bl	80119c4 <xTaskRemoveFromEventList>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00e      	beq.n	8010eb0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d00b      	beq.n	8010eb0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	601a      	str	r2, [r3, #0]
 8010e9e:	e007      	b.n	8010eb0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	b25a      	sxtb	r2, r3
 8010eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8010eb4:	e001      	b.n	8010eba <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8010eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3738      	adds	r7, #56	; 0x38
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}

08010ece <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b086      	sub	sp, #24
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	60f8      	str	r0, [r7, #12]
 8010ed6:	60b9      	str	r1, [r7, #8]
 8010ed8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010eda:	2300      	movs	r3, #0
 8010edc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d10d      	bne.n	8010f08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d14d      	bne.n	8010f90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	689b      	ldr	r3, [r3, #8]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f000 ff41 	bl	8011d80 <xTaskPriorityDisinherit>
 8010efe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2200      	movs	r2, #0
 8010f04:	609a      	str	r2, [r3, #8]
 8010f06:	e043      	b.n	8010f90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d119      	bne.n	8010f42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	6858      	ldr	r0, [r3, #4]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f16:	461a      	mov	r2, r3
 8010f18:	68b9      	ldr	r1, [r7, #8]
 8010f1a:	f001 ff5b 	bl	8012dd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	685a      	ldr	r2, [r3, #4]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f26:	441a      	add	r2, r3
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	685a      	ldr	r2, [r3, #4]
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	689b      	ldr	r3, [r3, #8]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d32b      	bcc.n	8010f90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	605a      	str	r2, [r3, #4]
 8010f40:	e026      	b.n	8010f90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	68d8      	ldr	r0, [r3, #12]
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	68b9      	ldr	r1, [r7, #8]
 8010f4e:	f001 ff41 	bl	8012dd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	68da      	ldr	r2, [r3, #12]
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5a:	425b      	negs	r3, r3
 8010f5c:	441a      	add	r2, r3
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	68da      	ldr	r2, [r3, #12]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d207      	bcs.n	8010f7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	689a      	ldr	r2, [r3, #8]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f76:	425b      	negs	r3, r3
 8010f78:	441a      	add	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	d105      	bne.n	8010f90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d002      	beq.n	8010f90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	1c5a      	adds	r2, r3, #1
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010f98:	697b      	ldr	r3, [r7, #20]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3718      	adds	r7, #24
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b082      	sub	sp, #8
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
 8010faa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d018      	beq.n	8010fe6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68da      	ldr	r2, [r3, #12]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fbc:	441a      	add	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	68da      	ldr	r2, [r3, #12]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d303      	bcc.n	8010fd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	68d9      	ldr	r1, [r3, #12]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fde:	461a      	mov	r2, r3
 8010fe0:	6838      	ldr	r0, [r7, #0]
 8010fe2:	f001 fef7 	bl	8012dd4 <memcpy>
	}
}
 8010fe6:	bf00      	nop
 8010fe8:	3708      	adds	r7, #8
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b084      	sub	sp, #16
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010ff6:	f001 f8b7 	bl	8012168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011000:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011002:	e011      	b.n	8011028 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011008:	2b00      	cmp	r3, #0
 801100a:	d012      	beq.n	8011032 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	3324      	adds	r3, #36	; 0x24
 8011010:	4618      	mov	r0, r3
 8011012:	f000 fcd7 	bl	80119c4 <xTaskRemoveFromEventList>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d001      	beq.n	8011020 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801101c:	f000 fdb0 	bl	8011b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011020:	7bfb      	ldrb	r3, [r7, #15]
 8011022:	3b01      	subs	r3, #1
 8011024:	b2db      	uxtb	r3, r3
 8011026:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801102c:	2b00      	cmp	r3, #0
 801102e:	dce9      	bgt.n	8011004 <prvUnlockQueue+0x16>
 8011030:	e000      	b.n	8011034 <prvUnlockQueue+0x46>
					break;
 8011032:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	22ff      	movs	r2, #255	; 0xff
 8011038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801103c:	f001 f8c6 	bl	80121cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011040:	f001 f892 	bl	8012168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801104a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801104c:	e011      	b.n	8011072 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	691b      	ldr	r3, [r3, #16]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d012      	beq.n	801107c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	3310      	adds	r3, #16
 801105a:	4618      	mov	r0, r3
 801105c:	f000 fcb2 	bl	80119c4 <xTaskRemoveFromEventList>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011066:	f000 fd8b 	bl	8011b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801106a:	7bbb      	ldrb	r3, [r7, #14]
 801106c:	3b01      	subs	r3, #1
 801106e:	b2db      	uxtb	r3, r3
 8011070:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011076:	2b00      	cmp	r3, #0
 8011078:	dce9      	bgt.n	801104e <prvUnlockQueue+0x60>
 801107a:	e000      	b.n	801107e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801107c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	22ff      	movs	r2, #255	; 0xff
 8011082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011086:	f001 f8a1 	bl	80121cc <vPortExitCritical>
}
 801108a:	bf00      	nop
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b084      	sub	sp, #16
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801109a:	f001 f865 	bl	8012168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d102      	bne.n	80110ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80110a6:	2301      	movs	r3, #1
 80110a8:	60fb      	str	r3, [r7, #12]
 80110aa:	e001      	b.n	80110b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80110ac:	2300      	movs	r3, #0
 80110ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80110b0:	f001 f88c 	bl	80121cc <vPortExitCritical>

	return xReturn;
 80110b4:	68fb      	ldr	r3, [r7, #12]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80110c6:	f001 f84f 	bl	8012168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d102      	bne.n	80110dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80110d6:	2301      	movs	r3, #1
 80110d8:	60fb      	str	r3, [r7, #12]
 80110da:	e001      	b.n	80110e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80110dc:	2300      	movs	r3, #0
 80110de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80110e0:	f001 f874 	bl	80121cc <vPortExitCritical>

	return xReturn;
 80110e4:	68fb      	ldr	r3, [r7, #12]
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b08e      	sub	sp, #56	; 0x38
 80110f2:	af04      	add	r7, sp, #16
 80110f4:	60f8      	str	r0, [r7, #12]
 80110f6:	60b9      	str	r1, [r7, #8]
 80110f8:	607a      	str	r2, [r7, #4]
 80110fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80110fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d10b      	bne.n	801111a <xTaskCreateStatic+0x2c>
	__asm volatile
 8011102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011106:	b672      	cpsid	i
 8011108:	f383 8811 	msr	BASEPRI, r3
 801110c:	f3bf 8f6f 	isb	sy
 8011110:	f3bf 8f4f 	dsb	sy
 8011114:	b662      	cpsie	i
 8011116:	623b      	str	r3, [r7, #32]
 8011118:	e7fe      	b.n	8011118 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10b      	bne.n	8011138 <xTaskCreateStatic+0x4a>
 8011120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011124:	b672      	cpsid	i
 8011126:	f383 8811 	msr	BASEPRI, r3
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	f3bf 8f4f 	dsb	sy
 8011132:	b662      	cpsie	i
 8011134:	61fb      	str	r3, [r7, #28]
 8011136:	e7fe      	b.n	8011136 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011138:	2358      	movs	r3, #88	; 0x58
 801113a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b58      	cmp	r3, #88	; 0x58
 8011140:	d00b      	beq.n	801115a <xTaskCreateStatic+0x6c>
 8011142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011146:	b672      	cpsid	i
 8011148:	f383 8811 	msr	BASEPRI, r3
 801114c:	f3bf 8f6f 	isb	sy
 8011150:	f3bf 8f4f 	dsb	sy
 8011154:	b662      	cpsie	i
 8011156:	61bb      	str	r3, [r7, #24]
 8011158:	e7fe      	b.n	8011158 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801115a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	2b00      	cmp	r3, #0
 8011160:	d01e      	beq.n	80111a0 <xTaskCreateStatic+0xb2>
 8011162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011164:	2b00      	cmp	r3, #0
 8011166:	d01b      	beq.n	80111a0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011170:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011174:	2202      	movs	r2, #2
 8011176:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801117a:	2300      	movs	r3, #0
 801117c:	9303      	str	r3, [sp, #12]
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	9302      	str	r3, [sp, #8]
 8011182:	f107 0314 	add.w	r3, r7, #20
 8011186:	9301      	str	r3, [sp, #4]
 8011188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	68b9      	ldr	r1, [r7, #8]
 8011192:	68f8      	ldr	r0, [r7, #12]
 8011194:	f000 f850 	bl	8011238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801119a:	f000 f8e1 	bl	8011360 <prvAddNewTaskToReadyList>
 801119e:	e001      	b.n	80111a4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80111a0:	2300      	movs	r3, #0
 80111a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80111a4:	697b      	ldr	r3, [r7, #20]
	}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3728      	adds	r7, #40	; 0x28
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b08c      	sub	sp, #48	; 0x30
 80111b2:	af04      	add	r7, sp, #16
 80111b4:	60f8      	str	r0, [r7, #12]
 80111b6:	60b9      	str	r1, [r7, #8]
 80111b8:	603b      	str	r3, [r7, #0]
 80111ba:	4613      	mov	r3, r2
 80111bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80111be:	88fb      	ldrh	r3, [r7, #6]
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	4618      	mov	r0, r3
 80111c4:	f001 f8f2 	bl	80123ac <pvPortMalloc>
 80111c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00e      	beq.n	80111ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80111d0:	2058      	movs	r0, #88	; 0x58
 80111d2:	f001 f8eb 	bl	80123ac <pvPortMalloc>
 80111d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d003      	beq.n	80111e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	697a      	ldr	r2, [r7, #20]
 80111e2:	631a      	str	r2, [r3, #48]	; 0x30
 80111e4:	e005      	b.n	80111f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80111e6:	6978      	ldr	r0, [r7, #20]
 80111e8:	f001 f9ac 	bl	8012544 <vPortFree>
 80111ec:	e001      	b.n	80111f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80111ee:	2300      	movs	r3, #0
 80111f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d017      	beq.n	8011228 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	2200      	movs	r2, #0
 80111fc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011200:	88fa      	ldrh	r2, [r7, #6]
 8011202:	2300      	movs	r3, #0
 8011204:	9303      	str	r3, [sp, #12]
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	9302      	str	r3, [sp, #8]
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	9301      	str	r3, [sp, #4]
 801120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011210:	9300      	str	r3, [sp, #0]
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	68b9      	ldr	r1, [r7, #8]
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f000 f80e 	bl	8011238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801121c:	69f8      	ldr	r0, [r7, #28]
 801121e:	f000 f89f 	bl	8011360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011222:	2301      	movs	r3, #1
 8011224:	61bb      	str	r3, [r7, #24]
 8011226:	e002      	b.n	801122e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011228:	f04f 33ff 	mov.w	r3, #4294967295
 801122c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801122e:	69bb      	ldr	r3, [r7, #24]
	}
 8011230:	4618      	mov	r0, r3
 8011232:	3720      	adds	r7, #32
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b088      	sub	sp, #32
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
 8011244:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011248:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	461a      	mov	r2, r3
 8011250:	21a5      	movs	r1, #165	; 0xa5
 8011252:	f001 fdca 	bl	8012dea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801125a:	6879      	ldr	r1, [r7, #4]
 801125c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011260:	440b      	add	r3, r1
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	4413      	add	r3, r2
 8011266:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	f023 0307 	bic.w	r3, r3, #7
 801126e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	f003 0307 	and.w	r3, r3, #7
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00b      	beq.n	8011292 <prvInitialiseNewTask+0x5a>
 801127a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127e:	b672      	cpsid	i
 8011280:	f383 8811 	msr	BASEPRI, r3
 8011284:	f3bf 8f6f 	isb	sy
 8011288:	f3bf 8f4f 	dsb	sy
 801128c:	b662      	cpsie	i
 801128e:	617b      	str	r3, [r7, #20]
 8011290:	e7fe      	b.n	8011290 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d01f      	beq.n	80112d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011298:	2300      	movs	r3, #0
 801129a:	61fb      	str	r3, [r7, #28]
 801129c:	e012      	b.n	80112c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	4413      	add	r3, r2
 80112a4:	7819      	ldrb	r1, [r3, #0]
 80112a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	4413      	add	r3, r2
 80112ac:	3334      	adds	r3, #52	; 0x34
 80112ae:	460a      	mov	r2, r1
 80112b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	4413      	add	r3, r2
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d006      	beq.n	80112cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	3301      	adds	r3, #1
 80112c2:	61fb      	str	r3, [r7, #28]
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	2b0f      	cmp	r3, #15
 80112c8:	d9e9      	bls.n	801129e <prvInitialiseNewTask+0x66>
 80112ca:	e000      	b.n	80112ce <prvInitialiseNewTask+0x96>
			{
				break;
 80112cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80112ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d0:	2200      	movs	r2, #0
 80112d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80112d6:	e003      	b.n	80112e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80112d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112da:	2200      	movs	r2, #0
 80112dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80112e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e2:	2b06      	cmp	r3, #6
 80112e4:	d901      	bls.n	80112ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80112e6:	2306      	movs	r3, #6
 80112e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80112ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80112f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112f4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80112f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f8:	2200      	movs	r2, #0
 80112fa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80112fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fe:	3304      	adds	r3, #4
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff f905 	bl	8010510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011308:	3318      	adds	r3, #24
 801130a:	4618      	mov	r0, r3
 801130c:	f7ff f900 	bl	8010510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011314:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011318:	f1c3 0207 	rsb	r2, r3, #7
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011324:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011328:	2200      	movs	r2, #0
 801132a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	2200      	movs	r2, #0
 8011330:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	2200      	movs	r2, #0
 8011336:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801133a:	683a      	ldr	r2, [r7, #0]
 801133c:	68f9      	ldr	r1, [r7, #12]
 801133e:	69b8      	ldr	r0, [r7, #24]
 8011340:	f000 fe0c 	bl	8011f5c <pxPortInitialiseStack>
 8011344:	4602      	mov	r2, r0
 8011346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011348:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011356:	bf00      	nop
 8011358:	3720      	adds	r7, #32
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011368:	f000 fefe 	bl	8012168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801136c:	4b2a      	ldr	r3, [pc, #168]	; (8011418 <prvAddNewTaskToReadyList+0xb8>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	3301      	adds	r3, #1
 8011372:	4a29      	ldr	r2, [pc, #164]	; (8011418 <prvAddNewTaskToReadyList+0xb8>)
 8011374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011376:	4b29      	ldr	r3, [pc, #164]	; (801141c <prvAddNewTaskToReadyList+0xbc>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d109      	bne.n	8011392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801137e:	4a27      	ldr	r2, [pc, #156]	; (801141c <prvAddNewTaskToReadyList+0xbc>)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011384:	4b24      	ldr	r3, [pc, #144]	; (8011418 <prvAddNewTaskToReadyList+0xb8>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b01      	cmp	r3, #1
 801138a:	d110      	bne.n	80113ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801138c:	f000 fc1e 	bl	8011bcc <prvInitialiseTaskLists>
 8011390:	e00d      	b.n	80113ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011392:	4b23      	ldr	r3, [pc, #140]	; (8011420 <prvAddNewTaskToReadyList+0xc0>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d109      	bne.n	80113ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801139a:	4b20      	ldr	r3, [pc, #128]	; (801141c <prvAddNewTaskToReadyList+0xbc>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d802      	bhi.n	80113ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80113a8:	4a1c      	ldr	r2, [pc, #112]	; (801141c <prvAddNewTaskToReadyList+0xbc>)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80113ae:	4b1d      	ldr	r3, [pc, #116]	; (8011424 <prvAddNewTaskToReadyList+0xc4>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	3301      	adds	r3, #1
 80113b4:	4a1b      	ldr	r2, [pc, #108]	; (8011424 <prvAddNewTaskToReadyList+0xc4>)
 80113b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113bc:	2201      	movs	r2, #1
 80113be:	409a      	lsls	r2, r3
 80113c0:	4b19      	ldr	r3, [pc, #100]	; (8011428 <prvAddNewTaskToReadyList+0xc8>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	4a18      	ldr	r2, [pc, #96]	; (8011428 <prvAddNewTaskToReadyList+0xc8>)
 80113c8:	6013      	str	r3, [r2, #0]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ce:	4613      	mov	r3, r2
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	4413      	add	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	4a15      	ldr	r2, [pc, #84]	; (801142c <prvAddNewTaskToReadyList+0xcc>)
 80113d8:	441a      	add	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	3304      	adds	r3, #4
 80113de:	4619      	mov	r1, r3
 80113e0:	4610      	mov	r0, r2
 80113e2:	f7ff f8a2 	bl	801052a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80113e6:	f000 fef1 	bl	80121cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80113ea:	4b0d      	ldr	r3, [pc, #52]	; (8011420 <prvAddNewTaskToReadyList+0xc0>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00e      	beq.n	8011410 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80113f2:	4b0a      	ldr	r3, [pc, #40]	; (801141c <prvAddNewTaskToReadyList+0xbc>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d207      	bcs.n	8011410 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011400:	4b0b      	ldr	r3, [pc, #44]	; (8011430 <prvAddNewTaskToReadyList+0xd0>)
 8011402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011406:	601a      	str	r2, [r3, #0]
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011410:	bf00      	nop
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	20000428 	.word	0x20000428
 801141c:	20000328 	.word	0x20000328
 8011420:	20000434 	.word	0x20000434
 8011424:	20000444 	.word	0x20000444
 8011428:	20000430 	.word	0x20000430
 801142c:	2000032c 	.word	0x2000032c
 8011430:	e000ed04 	.word	0xe000ed04

08011434 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801143c:	2300      	movs	r3, #0
 801143e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d018      	beq.n	8011478 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011446:	4b14      	ldr	r3, [pc, #80]	; (8011498 <vTaskDelay+0x64>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00b      	beq.n	8011466 <vTaskDelay+0x32>
 801144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011452:	b672      	cpsid	i
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	b662      	cpsie	i
 8011462:	60bb      	str	r3, [r7, #8]
 8011464:	e7fe      	b.n	8011464 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011466:	f000 f87d 	bl	8011564 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801146a:	2100      	movs	r1, #0
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 fd0f 	bl	8011e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011472:	f000 f885 	bl	8011580 <xTaskResumeAll>
 8011476:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d107      	bne.n	801148e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801147e:	4b07      	ldr	r3, [pc, #28]	; (801149c <vTaskDelay+0x68>)
 8011480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011484:	601a      	str	r2, [r3, #0]
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801148e:	bf00      	nop
 8011490:	3710      	adds	r7, #16
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	20000450 	.word	0x20000450
 801149c:	e000ed04 	.word	0xe000ed04

080114a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b08a      	sub	sp, #40	; 0x28
 80114a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80114a6:	2300      	movs	r3, #0
 80114a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80114aa:	2300      	movs	r3, #0
 80114ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80114ae:	463a      	mov	r2, r7
 80114b0:	1d39      	adds	r1, r7, #4
 80114b2:	f107 0308 	add.w	r3, r7, #8
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7ef fc3e 	bl	8000d38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80114bc:	6839      	ldr	r1, [r7, #0]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	68ba      	ldr	r2, [r7, #8]
 80114c2:	9202      	str	r2, [sp, #8]
 80114c4:	9301      	str	r3, [sp, #4]
 80114c6:	2300      	movs	r3, #0
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	2300      	movs	r3, #0
 80114cc:	460a      	mov	r2, r1
 80114ce:	491f      	ldr	r1, [pc, #124]	; (801154c <vTaskStartScheduler+0xac>)
 80114d0:	481f      	ldr	r0, [pc, #124]	; (8011550 <vTaskStartScheduler+0xb0>)
 80114d2:	f7ff fe0c 	bl	80110ee <xTaskCreateStatic>
 80114d6:	4602      	mov	r2, r0
 80114d8:	4b1e      	ldr	r3, [pc, #120]	; (8011554 <vTaskStartScheduler+0xb4>)
 80114da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80114dc:	4b1d      	ldr	r3, [pc, #116]	; (8011554 <vTaskStartScheduler+0xb4>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d002      	beq.n	80114ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80114e4:	2301      	movs	r3, #1
 80114e6:	617b      	str	r3, [r7, #20]
 80114e8:	e001      	b.n	80114ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80114ea:	2300      	movs	r3, #0
 80114ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d117      	bne.n	8011524 <vTaskStartScheduler+0x84>
 80114f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f8:	b672      	cpsid	i
 80114fa:	f383 8811 	msr	BASEPRI, r3
 80114fe:	f3bf 8f6f 	isb	sy
 8011502:	f3bf 8f4f 	dsb	sy
 8011506:	b662      	cpsie	i
 8011508:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801150a:	4b13      	ldr	r3, [pc, #76]	; (8011558 <vTaskStartScheduler+0xb8>)
 801150c:	f04f 32ff 	mov.w	r2, #4294967295
 8011510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011512:	4b12      	ldr	r3, [pc, #72]	; (801155c <vTaskStartScheduler+0xbc>)
 8011514:	2201      	movs	r2, #1
 8011516:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011518:	4b11      	ldr	r3, [pc, #68]	; (8011560 <vTaskStartScheduler+0xc0>)
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801151e:	f000 fda7 	bl	8012070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011522:	e00f      	b.n	8011544 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801152a:	d10b      	bne.n	8011544 <vTaskStartScheduler+0xa4>
 801152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011530:	b672      	cpsid	i
 8011532:	f383 8811 	msr	BASEPRI, r3
 8011536:	f3bf 8f6f 	isb	sy
 801153a:	f3bf 8f4f 	dsb	sy
 801153e:	b662      	cpsie	i
 8011540:	60fb      	str	r3, [r7, #12]
 8011542:	e7fe      	b.n	8011542 <vTaskStartScheduler+0xa2>
}
 8011544:	bf00      	nop
 8011546:	3718      	adds	r7, #24
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}
 801154c:	0801376c 	.word	0x0801376c
 8011550:	08011b99 	.word	0x08011b99
 8011554:	2000044c 	.word	0x2000044c
 8011558:	20000448 	.word	0x20000448
 801155c:	20000434 	.word	0x20000434
 8011560:	2000042c 	.word	0x2000042c

08011564 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011564:	b480      	push	{r7}
 8011566:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011568:	4b04      	ldr	r3, [pc, #16]	; (801157c <vTaskSuspendAll+0x18>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	3301      	adds	r3, #1
 801156e:	4a03      	ldr	r2, [pc, #12]	; (801157c <vTaskSuspendAll+0x18>)
 8011570:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011572:	bf00      	nop
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	20000450 	.word	0x20000450

08011580 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011586:	2300      	movs	r3, #0
 8011588:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801158a:	2300      	movs	r3, #0
 801158c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801158e:	4b42      	ldr	r3, [pc, #264]	; (8011698 <xTaskResumeAll+0x118>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d10b      	bne.n	80115ae <xTaskResumeAll+0x2e>
 8011596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159a:	b672      	cpsid	i
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	b662      	cpsie	i
 80115aa:	603b      	str	r3, [r7, #0]
 80115ac:	e7fe      	b.n	80115ac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80115ae:	f000 fddb 	bl	8012168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80115b2:	4b39      	ldr	r3, [pc, #228]	; (8011698 <xTaskResumeAll+0x118>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	3b01      	subs	r3, #1
 80115b8:	4a37      	ldr	r2, [pc, #220]	; (8011698 <xTaskResumeAll+0x118>)
 80115ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115bc:	4b36      	ldr	r3, [pc, #216]	; (8011698 <xTaskResumeAll+0x118>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d161      	bne.n	8011688 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80115c4:	4b35      	ldr	r3, [pc, #212]	; (801169c <xTaskResumeAll+0x11c>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d05d      	beq.n	8011688 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115cc:	e02e      	b.n	801162c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115ce:	4b34      	ldr	r3, [pc, #208]	; (80116a0 <xTaskResumeAll+0x120>)
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	3318      	adds	r3, #24
 80115da:	4618      	mov	r0, r3
 80115dc:	f7ff f802 	bl	80105e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	3304      	adds	r3, #4
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fe fffd 	bl	80105e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ee:	2201      	movs	r2, #1
 80115f0:	409a      	lsls	r2, r3
 80115f2:	4b2c      	ldr	r3, [pc, #176]	; (80116a4 <xTaskResumeAll+0x124>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	4313      	orrs	r3, r2
 80115f8:	4a2a      	ldr	r2, [pc, #168]	; (80116a4 <xTaskResumeAll+0x124>)
 80115fa:	6013      	str	r3, [r2, #0]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011600:	4613      	mov	r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	4413      	add	r3, r2
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	4a27      	ldr	r2, [pc, #156]	; (80116a8 <xTaskResumeAll+0x128>)
 801160a:	441a      	add	r2, r3
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	3304      	adds	r3, #4
 8011610:	4619      	mov	r1, r3
 8011612:	4610      	mov	r0, r2
 8011614:	f7fe ff89 	bl	801052a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801161c:	4b23      	ldr	r3, [pc, #140]	; (80116ac <xTaskResumeAll+0x12c>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011622:	429a      	cmp	r2, r3
 8011624:	d302      	bcc.n	801162c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011626:	4b22      	ldr	r3, [pc, #136]	; (80116b0 <xTaskResumeAll+0x130>)
 8011628:	2201      	movs	r2, #1
 801162a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801162c:	4b1c      	ldr	r3, [pc, #112]	; (80116a0 <xTaskResumeAll+0x120>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d1cc      	bne.n	80115ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d001      	beq.n	801163e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801163a:	f000 fb63 	bl	8011d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801163e:	4b1d      	ldr	r3, [pc, #116]	; (80116b4 <xTaskResumeAll+0x134>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d010      	beq.n	801166c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801164a:	f000 f859 	bl	8011700 <xTaskIncrementTick>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d002      	beq.n	801165a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011654:	4b16      	ldr	r3, [pc, #88]	; (80116b0 <xTaskResumeAll+0x130>)
 8011656:	2201      	movs	r2, #1
 8011658:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	3b01      	subs	r3, #1
 801165e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d1f1      	bne.n	801164a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011666:	4b13      	ldr	r3, [pc, #76]	; (80116b4 <xTaskResumeAll+0x134>)
 8011668:	2200      	movs	r2, #0
 801166a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801166c:	4b10      	ldr	r3, [pc, #64]	; (80116b0 <xTaskResumeAll+0x130>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d009      	beq.n	8011688 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011674:	2301      	movs	r3, #1
 8011676:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011678:	4b0f      	ldr	r3, [pc, #60]	; (80116b8 <xTaskResumeAll+0x138>)
 801167a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801167e:	601a      	str	r2, [r3, #0]
 8011680:	f3bf 8f4f 	dsb	sy
 8011684:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011688:	f000 fda0 	bl	80121cc <vPortExitCritical>

	return xAlreadyYielded;
 801168c:	68bb      	ldr	r3, [r7, #8]
}
 801168e:	4618      	mov	r0, r3
 8011690:	3710      	adds	r7, #16
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
 8011696:	bf00      	nop
 8011698:	20000450 	.word	0x20000450
 801169c:	20000428 	.word	0x20000428
 80116a0:	200003e8 	.word	0x200003e8
 80116a4:	20000430 	.word	0x20000430
 80116a8:	2000032c 	.word	0x2000032c
 80116ac:	20000328 	.word	0x20000328
 80116b0:	2000043c 	.word	0x2000043c
 80116b4:	20000438 	.word	0x20000438
 80116b8:	e000ed04 	.word	0xe000ed04

080116bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80116c2:	4b05      	ldr	r3, [pc, #20]	; (80116d8 <xTaskGetTickCount+0x1c>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80116c8:	687b      	ldr	r3, [r7, #4]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	370c      	adds	r7, #12
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop
 80116d8:	2000042c 	.word	0x2000042c

080116dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80116e2:	f000 fe21 	bl	8012328 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80116e6:	2300      	movs	r3, #0
 80116e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80116ea:	4b04      	ldr	r3, [pc, #16]	; (80116fc <xTaskGetTickCountFromISR+0x20>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80116f0:	683b      	ldr	r3, [r7, #0]
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	2000042c 	.word	0x2000042c

08011700 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b086      	sub	sp, #24
 8011704:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011706:	2300      	movs	r3, #0
 8011708:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801170a:	4b4f      	ldr	r3, [pc, #316]	; (8011848 <xTaskIncrementTick+0x148>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2b00      	cmp	r3, #0
 8011710:	f040 8089 	bne.w	8011826 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011714:	4b4d      	ldr	r3, [pc, #308]	; (801184c <xTaskIncrementTick+0x14c>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	3301      	adds	r3, #1
 801171a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801171c:	4a4b      	ldr	r2, [pc, #300]	; (801184c <xTaskIncrementTick+0x14c>)
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d121      	bne.n	801176c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011728:	4b49      	ldr	r3, [pc, #292]	; (8011850 <xTaskIncrementTick+0x150>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00b      	beq.n	801174a <xTaskIncrementTick+0x4a>
 8011732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011736:	b672      	cpsid	i
 8011738:	f383 8811 	msr	BASEPRI, r3
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	b662      	cpsie	i
 8011746:	603b      	str	r3, [r7, #0]
 8011748:	e7fe      	b.n	8011748 <xTaskIncrementTick+0x48>
 801174a:	4b41      	ldr	r3, [pc, #260]	; (8011850 <xTaskIncrementTick+0x150>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	60fb      	str	r3, [r7, #12]
 8011750:	4b40      	ldr	r3, [pc, #256]	; (8011854 <xTaskIncrementTick+0x154>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a3e      	ldr	r2, [pc, #248]	; (8011850 <xTaskIncrementTick+0x150>)
 8011756:	6013      	str	r3, [r2, #0]
 8011758:	4a3e      	ldr	r2, [pc, #248]	; (8011854 <xTaskIncrementTick+0x154>)
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	6013      	str	r3, [r2, #0]
 801175e:	4b3e      	ldr	r3, [pc, #248]	; (8011858 <xTaskIncrementTick+0x158>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	3301      	adds	r3, #1
 8011764:	4a3c      	ldr	r2, [pc, #240]	; (8011858 <xTaskIncrementTick+0x158>)
 8011766:	6013      	str	r3, [r2, #0]
 8011768:	f000 facc 	bl	8011d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801176c:	4b3b      	ldr	r3, [pc, #236]	; (801185c <xTaskIncrementTick+0x15c>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	693a      	ldr	r2, [r7, #16]
 8011772:	429a      	cmp	r2, r3
 8011774:	d348      	bcc.n	8011808 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011776:	4b36      	ldr	r3, [pc, #216]	; (8011850 <xTaskIncrementTick+0x150>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d104      	bne.n	801178a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011780:	4b36      	ldr	r3, [pc, #216]	; (801185c <xTaskIncrementTick+0x15c>)
 8011782:	f04f 32ff 	mov.w	r2, #4294967295
 8011786:	601a      	str	r2, [r3, #0]
					break;
 8011788:	e03e      	b.n	8011808 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801178a:	4b31      	ldr	r3, [pc, #196]	; (8011850 <xTaskIncrementTick+0x150>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801179a:	693a      	ldr	r2, [r7, #16]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d203      	bcs.n	80117aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80117a2:	4a2e      	ldr	r2, [pc, #184]	; (801185c <xTaskIncrementTick+0x15c>)
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80117a8:	e02e      	b.n	8011808 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	3304      	adds	r3, #4
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fe ff18 	bl	80105e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d004      	beq.n	80117c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	3318      	adds	r3, #24
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7fe ff0f 	bl	80105e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ca:	2201      	movs	r2, #1
 80117cc:	409a      	lsls	r2, r3
 80117ce:	4b24      	ldr	r3, [pc, #144]	; (8011860 <xTaskIncrementTick+0x160>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	4313      	orrs	r3, r2
 80117d4:	4a22      	ldr	r2, [pc, #136]	; (8011860 <xTaskIncrementTick+0x160>)
 80117d6:	6013      	str	r3, [r2, #0]
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117dc:	4613      	mov	r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	4413      	add	r3, r2
 80117e2:	009b      	lsls	r3, r3, #2
 80117e4:	4a1f      	ldr	r2, [pc, #124]	; (8011864 <xTaskIncrementTick+0x164>)
 80117e6:	441a      	add	r2, r3
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	3304      	adds	r3, #4
 80117ec:	4619      	mov	r1, r3
 80117ee:	4610      	mov	r0, r2
 80117f0:	f7fe fe9b 	bl	801052a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117f8:	4b1b      	ldr	r3, [pc, #108]	; (8011868 <xTaskIncrementTick+0x168>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117fe:	429a      	cmp	r2, r3
 8011800:	d3b9      	bcc.n	8011776 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011802:	2301      	movs	r3, #1
 8011804:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011806:	e7b6      	b.n	8011776 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011808:	4b17      	ldr	r3, [pc, #92]	; (8011868 <xTaskIncrementTick+0x168>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801180e:	4915      	ldr	r1, [pc, #84]	; (8011864 <xTaskIncrementTick+0x164>)
 8011810:	4613      	mov	r3, r2
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	4413      	add	r3, r2
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	440b      	add	r3, r1
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d907      	bls.n	8011830 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8011820:	2301      	movs	r3, #1
 8011822:	617b      	str	r3, [r7, #20]
 8011824:	e004      	b.n	8011830 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011826:	4b11      	ldr	r3, [pc, #68]	; (801186c <xTaskIncrementTick+0x16c>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	3301      	adds	r3, #1
 801182c:	4a0f      	ldr	r2, [pc, #60]	; (801186c <xTaskIncrementTick+0x16c>)
 801182e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011830:	4b0f      	ldr	r3, [pc, #60]	; (8011870 <xTaskIncrementTick+0x170>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d001      	beq.n	801183c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8011838:	2301      	movs	r3, #1
 801183a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801183c:	697b      	ldr	r3, [r7, #20]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3718      	adds	r7, #24
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	20000450 	.word	0x20000450
 801184c:	2000042c 	.word	0x2000042c
 8011850:	200003e0 	.word	0x200003e0
 8011854:	200003e4 	.word	0x200003e4
 8011858:	20000440 	.word	0x20000440
 801185c:	20000448 	.word	0x20000448
 8011860:	20000430 	.word	0x20000430
 8011864:	2000032c 	.word	0x2000032c
 8011868:	20000328 	.word	0x20000328
 801186c:	20000438 	.word	0x20000438
 8011870:	2000043c 	.word	0x2000043c

08011874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b088      	sub	sp, #32
 8011878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801187a:	4b3a      	ldr	r3, [pc, #232]	; (8011964 <vTaskSwitchContext+0xf0>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d003      	beq.n	801188a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011882:	4b39      	ldr	r3, [pc, #228]	; (8011968 <vTaskSwitchContext+0xf4>)
 8011884:	2201      	movs	r2, #1
 8011886:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011888:	e067      	b.n	801195a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 801188a:	4b37      	ldr	r3, [pc, #220]	; (8011968 <vTaskSwitchContext+0xf4>)
 801188c:	2200      	movs	r2, #0
 801188e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011890:	4b36      	ldr	r3, [pc, #216]	; (801196c <vTaskSwitchContext+0xf8>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011896:	61fb      	str	r3, [r7, #28]
 8011898:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801189c:	61bb      	str	r3, [r7, #24]
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	69ba      	ldr	r2, [r7, #24]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d111      	bne.n	80118cc <vTaskSwitchContext+0x58>
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	3304      	adds	r3, #4
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	69ba      	ldr	r2, [r7, #24]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d10b      	bne.n	80118cc <vTaskSwitchContext+0x58>
 80118b4:	69fb      	ldr	r3, [r7, #28]
 80118b6:	3308      	adds	r3, #8
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	69ba      	ldr	r2, [r7, #24]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d105      	bne.n	80118cc <vTaskSwitchContext+0x58>
 80118c0:	69fb      	ldr	r3, [r7, #28]
 80118c2:	330c      	adds	r3, #12
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	69ba      	ldr	r2, [r7, #24]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d008      	beq.n	80118de <vTaskSwitchContext+0x6a>
 80118cc:	4b27      	ldr	r3, [pc, #156]	; (801196c <vTaskSwitchContext+0xf8>)
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	4b26      	ldr	r3, [pc, #152]	; (801196c <vTaskSwitchContext+0xf8>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	3334      	adds	r3, #52	; 0x34
 80118d6:	4619      	mov	r1, r3
 80118d8:	4610      	mov	r0, r2
 80118da:	f7ef fa1a 	bl	8000d12 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118de:	4b24      	ldr	r3, [pc, #144]	; (8011970 <vTaskSwitchContext+0xfc>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	fab3 f383 	clz	r3, r3
 80118ea:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80118ec:	7afb      	ldrb	r3, [r7, #11]
 80118ee:	f1c3 031f 	rsb	r3, r3, #31
 80118f2:	617b      	str	r3, [r7, #20]
 80118f4:	491f      	ldr	r1, [pc, #124]	; (8011974 <vTaskSwitchContext+0x100>)
 80118f6:	697a      	ldr	r2, [r7, #20]
 80118f8:	4613      	mov	r3, r2
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	4413      	add	r3, r2
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	440b      	add	r3, r1
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d10b      	bne.n	8011920 <vTaskSwitchContext+0xac>
	__asm volatile
 8011908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190c:	b672      	cpsid	i
 801190e:	f383 8811 	msr	BASEPRI, r3
 8011912:	f3bf 8f6f 	isb	sy
 8011916:	f3bf 8f4f 	dsb	sy
 801191a:	b662      	cpsie	i
 801191c:	607b      	str	r3, [r7, #4]
 801191e:	e7fe      	b.n	801191e <vTaskSwitchContext+0xaa>
 8011920:	697a      	ldr	r2, [r7, #20]
 8011922:	4613      	mov	r3, r2
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	4413      	add	r3, r2
 8011928:	009b      	lsls	r3, r3, #2
 801192a:	4a12      	ldr	r2, [pc, #72]	; (8011974 <vTaskSwitchContext+0x100>)
 801192c:	4413      	add	r3, r2
 801192e:	613b      	str	r3, [r7, #16]
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	685a      	ldr	r2, [r3, #4]
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	605a      	str	r2, [r3, #4]
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	685a      	ldr	r2, [r3, #4]
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	3308      	adds	r3, #8
 8011942:	429a      	cmp	r2, r3
 8011944:	d104      	bne.n	8011950 <vTaskSwitchContext+0xdc>
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	685a      	ldr	r2, [r3, #4]
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	605a      	str	r2, [r3, #4]
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	4a05      	ldr	r2, [pc, #20]	; (801196c <vTaskSwitchContext+0xf8>)
 8011958:	6013      	str	r3, [r2, #0]
}
 801195a:	bf00      	nop
 801195c:	3720      	adds	r7, #32
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	20000450 	.word	0x20000450
 8011968:	2000043c 	.word	0x2000043c
 801196c:	20000328 	.word	0x20000328
 8011970:	20000430 	.word	0x20000430
 8011974:	2000032c 	.word	0x2000032c

08011978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d10b      	bne.n	80119a0 <vTaskPlaceOnEventList+0x28>
 8011988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198c:	b672      	cpsid	i
 801198e:	f383 8811 	msr	BASEPRI, r3
 8011992:	f3bf 8f6f 	isb	sy
 8011996:	f3bf 8f4f 	dsb	sy
 801199a:	b662      	cpsie	i
 801199c:	60fb      	str	r3, [r7, #12]
 801199e:	e7fe      	b.n	801199e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119a0:	4b07      	ldr	r3, [pc, #28]	; (80119c0 <vTaskPlaceOnEventList+0x48>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	3318      	adds	r3, #24
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f7fe fde2 	bl	8010572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80119ae:	2101      	movs	r1, #1
 80119b0:	6838      	ldr	r0, [r7, #0]
 80119b2:	f000 fa6d 	bl	8011e90 <prvAddCurrentTaskToDelayedList>
}
 80119b6:	bf00      	nop
 80119b8:	3710      	adds	r7, #16
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	20000328 	.word	0x20000328

080119c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b086      	sub	sp, #24
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d10b      	bne.n	80119f2 <xTaskRemoveFromEventList+0x2e>
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	b672      	cpsid	i
 80119e0:	f383 8811 	msr	BASEPRI, r3
 80119e4:	f3bf 8f6f 	isb	sy
 80119e8:	f3bf 8f4f 	dsb	sy
 80119ec:	b662      	cpsie	i
 80119ee:	60fb      	str	r3, [r7, #12]
 80119f0:	e7fe      	b.n	80119f0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	3318      	adds	r3, #24
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7fe fdf4 	bl	80105e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119fc:	4b1d      	ldr	r3, [pc, #116]	; (8011a74 <xTaskRemoveFromEventList+0xb0>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d11c      	bne.n	8011a3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	3304      	adds	r3, #4
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7fe fdeb 	bl	80105e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a12:	2201      	movs	r2, #1
 8011a14:	409a      	lsls	r2, r3
 8011a16:	4b18      	ldr	r3, [pc, #96]	; (8011a78 <xTaskRemoveFromEventList+0xb4>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	4a16      	ldr	r2, [pc, #88]	; (8011a78 <xTaskRemoveFromEventList+0xb4>)
 8011a1e:	6013      	str	r3, [r2, #0]
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a24:	4613      	mov	r3, r2
 8011a26:	009b      	lsls	r3, r3, #2
 8011a28:	4413      	add	r3, r2
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	4a13      	ldr	r2, [pc, #76]	; (8011a7c <xTaskRemoveFromEventList+0xb8>)
 8011a2e:	441a      	add	r2, r3
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	3304      	adds	r3, #4
 8011a34:	4619      	mov	r1, r3
 8011a36:	4610      	mov	r0, r2
 8011a38:	f7fe fd77 	bl	801052a <vListInsertEnd>
 8011a3c:	e005      	b.n	8011a4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	3318      	adds	r3, #24
 8011a42:	4619      	mov	r1, r3
 8011a44:	480e      	ldr	r0, [pc, #56]	; (8011a80 <xTaskRemoveFromEventList+0xbc>)
 8011a46:	f7fe fd70 	bl	801052a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a4e:	4b0d      	ldr	r3, [pc, #52]	; (8011a84 <xTaskRemoveFromEventList+0xc0>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d905      	bls.n	8011a64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a58:	2301      	movs	r3, #1
 8011a5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a5c:	4b0a      	ldr	r3, [pc, #40]	; (8011a88 <xTaskRemoveFromEventList+0xc4>)
 8011a5e:	2201      	movs	r2, #1
 8011a60:	601a      	str	r2, [r3, #0]
 8011a62:	e001      	b.n	8011a68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011a64:	2300      	movs	r3, #0
 8011a66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a68:	697b      	ldr	r3, [r7, #20]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3718      	adds	r7, #24
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	20000450 	.word	0x20000450
 8011a78:	20000430 	.word	0x20000430
 8011a7c:	2000032c 	.word	0x2000032c
 8011a80:	200003e8 	.word	0x200003e8
 8011a84:	20000328 	.word	0x20000328
 8011a88:	2000043c 	.word	0x2000043c

08011a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a94:	4b06      	ldr	r3, [pc, #24]	; (8011ab0 <vTaskInternalSetTimeOutState+0x24>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a9c:	4b05      	ldr	r3, [pc, #20]	; (8011ab4 <vTaskInternalSetTimeOutState+0x28>)
 8011a9e:	681a      	ldr	r2, [r3, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	605a      	str	r2, [r3, #4]
}
 8011aa4:	bf00      	nop
 8011aa6:	370c      	adds	r7, #12
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aae:	4770      	bx	lr
 8011ab0:	20000440 	.word	0x20000440
 8011ab4:	2000042c 	.word	0x2000042c

08011ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b088      	sub	sp, #32
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10b      	bne.n	8011ae0 <xTaskCheckForTimeOut+0x28>
 8011ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011acc:	b672      	cpsid	i
 8011ace:	f383 8811 	msr	BASEPRI, r3
 8011ad2:	f3bf 8f6f 	isb	sy
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	b662      	cpsie	i
 8011adc:	613b      	str	r3, [r7, #16]
 8011ade:	e7fe      	b.n	8011ade <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d10b      	bne.n	8011afe <xTaskCheckForTimeOut+0x46>
 8011ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aea:	b672      	cpsid	i
 8011aec:	f383 8811 	msr	BASEPRI, r3
 8011af0:	f3bf 8f6f 	isb	sy
 8011af4:	f3bf 8f4f 	dsb	sy
 8011af8:	b662      	cpsie	i
 8011afa:	60fb      	str	r3, [r7, #12]
 8011afc:	e7fe      	b.n	8011afc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011afe:	f000 fb33 	bl	8012168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011b02:	4b1d      	ldr	r3, [pc, #116]	; (8011b78 <xTaskCheckForTimeOut+0xc0>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	69ba      	ldr	r2, [r7, #24]
 8011b0e:	1ad3      	subs	r3, r2, r3
 8011b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b1a:	d102      	bne.n	8011b22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	61fb      	str	r3, [r7, #28]
 8011b20:	e023      	b.n	8011b6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	4b15      	ldr	r3, [pc, #84]	; (8011b7c <xTaskCheckForTimeOut+0xc4>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d007      	beq.n	8011b3e <xTaskCheckForTimeOut+0x86>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	69ba      	ldr	r2, [r7, #24]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d302      	bcc.n	8011b3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b38:	2301      	movs	r3, #1
 8011b3a:	61fb      	str	r3, [r7, #28]
 8011b3c:	e015      	b.n	8011b6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	697a      	ldr	r2, [r7, #20]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d20b      	bcs.n	8011b60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	1ad2      	subs	r2, r2, r3
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7ff ff99 	bl	8011a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	61fb      	str	r3, [r7, #28]
 8011b5e:	e004      	b.n	8011b6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	2200      	movs	r2, #0
 8011b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011b66:	2301      	movs	r3, #1
 8011b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011b6a:	f000 fb2f 	bl	80121cc <vPortExitCritical>

	return xReturn;
 8011b6e:	69fb      	ldr	r3, [r7, #28]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3720      	adds	r7, #32
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	2000042c 	.word	0x2000042c
 8011b7c:	20000440 	.word	0x20000440

08011b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011b80:	b480      	push	{r7}
 8011b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011b84:	4b03      	ldr	r3, [pc, #12]	; (8011b94 <vTaskMissedYield+0x14>)
 8011b86:	2201      	movs	r2, #1
 8011b88:	601a      	str	r2, [r3, #0]
}
 8011b8a:	bf00      	nop
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	2000043c 	.word	0x2000043c

08011b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011ba0:	f000 f854 	bl	8011c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011ba4:	4b07      	ldr	r3, [pc, #28]	; (8011bc4 <prvIdleTask+0x2c>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d907      	bls.n	8011bbc <prvIdleTask+0x24>
			{
				taskYIELD();
 8011bac:	4b06      	ldr	r3, [pc, #24]	; (8011bc8 <prvIdleTask+0x30>)
 8011bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bb2:	601a      	str	r2, [r3, #0]
 8011bb4:	f3bf 8f4f 	dsb	sy
 8011bb8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011bbc:	f7ef f8a2 	bl	8000d04 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011bc0:	e7ee      	b.n	8011ba0 <prvIdleTask+0x8>
 8011bc2:	bf00      	nop
 8011bc4:	2000032c 	.word	0x2000032c
 8011bc8:	e000ed04 	.word	0xe000ed04

08011bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	607b      	str	r3, [r7, #4]
 8011bd6:	e00c      	b.n	8011bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	4613      	mov	r3, r2
 8011bdc:	009b      	lsls	r3, r3, #2
 8011bde:	4413      	add	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4a12      	ldr	r2, [pc, #72]	; (8011c2c <prvInitialiseTaskLists+0x60>)
 8011be4:	4413      	add	r3, r2
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fe fc72 	bl	80104d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3301      	adds	r3, #1
 8011bf0:	607b      	str	r3, [r7, #4]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2b06      	cmp	r3, #6
 8011bf6:	d9ef      	bls.n	8011bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011bf8:	480d      	ldr	r0, [pc, #52]	; (8011c30 <prvInitialiseTaskLists+0x64>)
 8011bfa:	f7fe fc69 	bl	80104d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011bfe:	480d      	ldr	r0, [pc, #52]	; (8011c34 <prvInitialiseTaskLists+0x68>)
 8011c00:	f7fe fc66 	bl	80104d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011c04:	480c      	ldr	r0, [pc, #48]	; (8011c38 <prvInitialiseTaskLists+0x6c>)
 8011c06:	f7fe fc63 	bl	80104d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011c0a:	480c      	ldr	r0, [pc, #48]	; (8011c3c <prvInitialiseTaskLists+0x70>)
 8011c0c:	f7fe fc60 	bl	80104d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011c10:	480b      	ldr	r0, [pc, #44]	; (8011c40 <prvInitialiseTaskLists+0x74>)
 8011c12:	f7fe fc5d 	bl	80104d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011c16:	4b0b      	ldr	r3, [pc, #44]	; (8011c44 <prvInitialiseTaskLists+0x78>)
 8011c18:	4a05      	ldr	r2, [pc, #20]	; (8011c30 <prvInitialiseTaskLists+0x64>)
 8011c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011c1c:	4b0a      	ldr	r3, [pc, #40]	; (8011c48 <prvInitialiseTaskLists+0x7c>)
 8011c1e:	4a05      	ldr	r2, [pc, #20]	; (8011c34 <prvInitialiseTaskLists+0x68>)
 8011c20:	601a      	str	r2, [r3, #0]
}
 8011c22:	bf00      	nop
 8011c24:	3708      	adds	r7, #8
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	2000032c 	.word	0x2000032c
 8011c30:	200003b8 	.word	0x200003b8
 8011c34:	200003cc 	.word	0x200003cc
 8011c38:	200003e8 	.word	0x200003e8
 8011c3c:	200003fc 	.word	0x200003fc
 8011c40:	20000414 	.word	0x20000414
 8011c44:	200003e0 	.word	0x200003e0
 8011c48:	200003e4 	.word	0x200003e4

08011c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c52:	e019      	b.n	8011c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011c54:	f000 fa88 	bl	8012168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c58:	4b0f      	ldr	r3, [pc, #60]	; (8011c98 <prvCheckTasksWaitingTermination+0x4c>)
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fe fcbd 	bl	80105e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011c6a:	4b0c      	ldr	r3, [pc, #48]	; (8011c9c <prvCheckTasksWaitingTermination+0x50>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3b01      	subs	r3, #1
 8011c70:	4a0a      	ldr	r2, [pc, #40]	; (8011c9c <prvCheckTasksWaitingTermination+0x50>)
 8011c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011c74:	4b0a      	ldr	r3, [pc, #40]	; (8011ca0 <prvCheckTasksWaitingTermination+0x54>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	3b01      	subs	r3, #1
 8011c7a:	4a09      	ldr	r2, [pc, #36]	; (8011ca0 <prvCheckTasksWaitingTermination+0x54>)
 8011c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011c7e:	f000 faa5 	bl	80121cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 f80e 	bl	8011ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c88:	4b05      	ldr	r3, [pc, #20]	; (8011ca0 <prvCheckTasksWaitingTermination+0x54>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d1e1      	bne.n	8011c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011c90:	bf00      	nop
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	200003fc 	.word	0x200003fc
 8011c9c:	20000428 	.word	0x20000428
 8011ca0:	20000410 	.word	0x20000410

08011ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d108      	bne.n	8011cc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f000 fc42 	bl	8012544 <vPortFree>
				vPortFree( pxTCB );
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 fc3f 	bl	8012544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011cc6:	e019      	b.n	8011cfc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d103      	bne.n	8011cda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 fc36 	bl	8012544 <vPortFree>
	}
 8011cd8:	e010      	b.n	8011cfc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011ce0:	2b02      	cmp	r3, #2
 8011ce2:	d00b      	beq.n	8011cfc <prvDeleteTCB+0x58>
 8011ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce8:	b672      	cpsid	i
 8011cea:	f383 8811 	msr	BASEPRI, r3
 8011cee:	f3bf 8f6f 	isb	sy
 8011cf2:	f3bf 8f4f 	dsb	sy
 8011cf6:	b662      	cpsie	i
 8011cf8:	60fb      	str	r3, [r7, #12]
 8011cfa:	e7fe      	b.n	8011cfa <prvDeleteTCB+0x56>
	}
 8011cfc:	bf00      	nop
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d0a:	4b0c      	ldr	r3, [pc, #48]	; (8011d3c <prvResetNextTaskUnblockTime+0x38>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d104      	bne.n	8011d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d14:	4b0a      	ldr	r3, [pc, #40]	; (8011d40 <prvResetNextTaskUnblockTime+0x3c>)
 8011d16:	f04f 32ff 	mov.w	r2, #4294967295
 8011d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011d1c:	e008      	b.n	8011d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d1e:	4b07      	ldr	r3, [pc, #28]	; (8011d3c <prvResetNextTaskUnblockTime+0x38>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	4a04      	ldr	r2, [pc, #16]	; (8011d40 <prvResetNextTaskUnblockTime+0x3c>)
 8011d2e:	6013      	str	r3, [r2, #0]
}
 8011d30:	bf00      	nop
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr
 8011d3c:	200003e0 	.word	0x200003e0
 8011d40:	20000448 	.word	0x20000448

08011d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011d4a:	4b0b      	ldr	r3, [pc, #44]	; (8011d78 <xTaskGetSchedulerState+0x34>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d102      	bne.n	8011d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011d52:	2301      	movs	r3, #1
 8011d54:	607b      	str	r3, [r7, #4]
 8011d56:	e008      	b.n	8011d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d58:	4b08      	ldr	r3, [pc, #32]	; (8011d7c <xTaskGetSchedulerState+0x38>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d102      	bne.n	8011d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011d60:	2302      	movs	r3, #2
 8011d62:	607b      	str	r3, [r7, #4]
 8011d64:	e001      	b.n	8011d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011d66:	2300      	movs	r3, #0
 8011d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011d6a:	687b      	ldr	r3, [r7, #4]
	}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	370c      	adds	r7, #12
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr
 8011d78:	20000434 	.word	0x20000434
 8011d7c:	20000450 	.word	0x20000450

08011d80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d070      	beq.n	8011e78 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011d96:	4b3b      	ldr	r3, [pc, #236]	; (8011e84 <xTaskPriorityDisinherit+0x104>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	693a      	ldr	r2, [r7, #16]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d00b      	beq.n	8011db8 <xTaskPriorityDisinherit+0x38>
 8011da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da4:	b672      	cpsid	i
 8011da6:	f383 8811 	msr	BASEPRI, r3
 8011daa:	f3bf 8f6f 	isb	sy
 8011dae:	f3bf 8f4f 	dsb	sy
 8011db2:	b662      	cpsie	i
 8011db4:	60fb      	str	r3, [r7, #12]
 8011db6:	e7fe      	b.n	8011db6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10b      	bne.n	8011dd8 <xTaskPriorityDisinherit+0x58>
 8011dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc4:	b672      	cpsid	i
 8011dc6:	f383 8811 	msr	BASEPRI, r3
 8011dca:	f3bf 8f6f 	isb	sy
 8011dce:	f3bf 8f4f 	dsb	sy
 8011dd2:	b662      	cpsie	i
 8011dd4:	60bb      	str	r3, [r7, #8]
 8011dd6:	e7fe      	b.n	8011dd6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ddc:	1e5a      	subs	r2, r3, #1
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d044      	beq.n	8011e78 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d140      	bne.n	8011e78 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	3304      	adds	r3, #4
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fe fbf2 	bl	80105e4 <uxListRemove>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d115      	bne.n	8011e32 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e0a:	491f      	ldr	r1, [pc, #124]	; (8011e88 <xTaskPriorityDisinherit+0x108>)
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	4413      	add	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	440b      	add	r3, r1
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d10a      	bne.n	8011e32 <xTaskPriorityDisinherit+0xb2>
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e20:	2201      	movs	r2, #1
 8011e22:	fa02 f303 	lsl.w	r3, r2, r3
 8011e26:	43da      	mvns	r2, r3
 8011e28:	4b18      	ldr	r3, [pc, #96]	; (8011e8c <xTaskPriorityDisinherit+0x10c>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	4013      	ands	r3, r2
 8011e2e:	4a17      	ldr	r2, [pc, #92]	; (8011e8c <xTaskPriorityDisinherit+0x10c>)
 8011e30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e3e:	f1c3 0207 	rsb	r2, r3, #7
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	409a      	lsls	r2, r3
 8011e4e:	4b0f      	ldr	r3, [pc, #60]	; (8011e8c <xTaskPriorityDisinherit+0x10c>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	4a0d      	ldr	r2, [pc, #52]	; (8011e8c <xTaskPriorityDisinherit+0x10c>)
 8011e56:	6013      	str	r3, [r2, #0]
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	4413      	add	r3, r2
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	4a08      	ldr	r2, [pc, #32]	; (8011e88 <xTaskPriorityDisinherit+0x108>)
 8011e66:	441a      	add	r2, r3
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	3304      	adds	r3, #4
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	4610      	mov	r0, r2
 8011e70:	f7fe fb5b 	bl	801052a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011e74:	2301      	movs	r3, #1
 8011e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011e78:	697b      	ldr	r3, [r7, #20]
	}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3718      	adds	r7, #24
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	20000328 	.word	0x20000328
 8011e88:	2000032c 	.word	0x2000032c
 8011e8c:	20000430 	.word	0x20000430

08011e90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011e9a:	4b29      	ldr	r3, [pc, #164]	; (8011f40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ea0:	4b28      	ldr	r3, [pc, #160]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7fe fb9c 	bl	80105e4 <uxListRemove>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d10b      	bne.n	8011eca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011eb2:	4b24      	ldr	r3, [pc, #144]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb8:	2201      	movs	r2, #1
 8011eba:	fa02 f303 	lsl.w	r3, r2, r3
 8011ebe:	43da      	mvns	r2, r3
 8011ec0:	4b21      	ldr	r3, [pc, #132]	; (8011f48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4013      	ands	r3, r2
 8011ec6:	4a20      	ldr	r2, [pc, #128]	; (8011f48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011ec8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed0:	d10a      	bne.n	8011ee8 <prvAddCurrentTaskToDelayedList+0x58>
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d007      	beq.n	8011ee8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ed8:	4b1a      	ldr	r3, [pc, #104]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	3304      	adds	r3, #4
 8011ede:	4619      	mov	r1, r3
 8011ee0:	481a      	ldr	r0, [pc, #104]	; (8011f4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011ee2:	f7fe fb22 	bl	801052a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011ee6:	e026      	b.n	8011f36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011ee8:	68fa      	ldr	r2, [r7, #12]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4413      	add	r3, r2
 8011eee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011ef0:	4b14      	ldr	r3, [pc, #80]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011ef8:	68ba      	ldr	r2, [r7, #8]
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d209      	bcs.n	8011f14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f00:	4b13      	ldr	r3, [pc, #76]	; (8011f50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	4b0f      	ldr	r3, [pc, #60]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	3304      	adds	r3, #4
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	4610      	mov	r0, r2
 8011f0e:	f7fe fb30 	bl	8010572 <vListInsert>
}
 8011f12:	e010      	b.n	8011f36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f14:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011f16:	681a      	ldr	r2, [r3, #0]
 8011f18:	4b0a      	ldr	r3, [pc, #40]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	4619      	mov	r1, r3
 8011f20:	4610      	mov	r0, r2
 8011f22:	f7fe fb26 	bl	8010572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f26:	4b0c      	ldr	r3, [pc, #48]	; (8011f58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	68ba      	ldr	r2, [r7, #8]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d202      	bcs.n	8011f36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011f30:	4a09      	ldr	r2, [pc, #36]	; (8011f58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	6013      	str	r3, [r2, #0]
}
 8011f36:	bf00      	nop
 8011f38:	3710      	adds	r7, #16
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	2000042c 	.word	0x2000042c
 8011f44:	20000328 	.word	0x20000328
 8011f48:	20000430 	.word	0x20000430
 8011f4c:	20000414 	.word	0x20000414
 8011f50:	200003e4 	.word	0x200003e4
 8011f54:	200003e0 	.word	0x200003e0
 8011f58:	20000448 	.word	0x20000448

08011f5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b085      	sub	sp, #20
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	3b04      	subs	r3, #4
 8011f6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	3b04      	subs	r3, #4
 8011f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	f023 0201 	bic.w	r2, r3, #1
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	3b04      	subs	r3, #4
 8011f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f8c:	4a0c      	ldr	r2, [pc, #48]	; (8011fc0 <pxPortInitialiseStack+0x64>)
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	3b14      	subs	r3, #20
 8011f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f98:	687a      	ldr	r2, [r7, #4]
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	3b04      	subs	r3, #4
 8011fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f06f 0202 	mvn.w	r2, #2
 8011faa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	3b20      	subs	r3, #32
 8011fb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	08011fc5 	.word	0x08011fc5

08011fc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b085      	sub	sp, #20
 8011fc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011fce:	4b13      	ldr	r3, [pc, #76]	; (801201c <prvTaskExitError+0x58>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd6:	d00b      	beq.n	8011ff0 <prvTaskExitError+0x2c>
 8011fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fdc:	b672      	cpsid	i
 8011fde:	f383 8811 	msr	BASEPRI, r3
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	f3bf 8f4f 	dsb	sy
 8011fea:	b662      	cpsie	i
 8011fec:	60fb      	str	r3, [r7, #12]
 8011fee:	e7fe      	b.n	8011fee <prvTaskExitError+0x2a>
 8011ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff4:	b672      	cpsid	i
 8011ff6:	f383 8811 	msr	BASEPRI, r3
 8011ffa:	f3bf 8f6f 	isb	sy
 8011ffe:	f3bf 8f4f 	dsb	sy
 8012002:	b662      	cpsie	i
 8012004:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012006:	bf00      	nop
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d0fc      	beq.n	8012008 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801200e:	bf00      	nop
 8012010:	3714      	adds	r7, #20
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop
 801201c:	2000002c 	.word	0x2000002c

08012020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012020:	4b07      	ldr	r3, [pc, #28]	; (8012040 <pxCurrentTCBConst2>)
 8012022:	6819      	ldr	r1, [r3, #0]
 8012024:	6808      	ldr	r0, [r1, #0]
 8012026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801202a:	f380 8809 	msr	PSP, r0
 801202e:	f3bf 8f6f 	isb	sy
 8012032:	f04f 0000 	mov.w	r0, #0
 8012036:	f380 8811 	msr	BASEPRI, r0
 801203a:	4770      	bx	lr
 801203c:	f3af 8000 	nop.w

08012040 <pxCurrentTCBConst2>:
 8012040:	20000328 	.word	0x20000328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012044:	bf00      	nop
 8012046:	bf00      	nop

08012048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012048:	4808      	ldr	r0, [pc, #32]	; (801206c <prvPortStartFirstTask+0x24>)
 801204a:	6800      	ldr	r0, [r0, #0]
 801204c:	6800      	ldr	r0, [r0, #0]
 801204e:	f380 8808 	msr	MSP, r0
 8012052:	f04f 0000 	mov.w	r0, #0
 8012056:	f380 8814 	msr	CONTROL, r0
 801205a:	b662      	cpsie	i
 801205c:	b661      	cpsie	f
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	f3bf 8f6f 	isb	sy
 8012066:	df00      	svc	0
 8012068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801206a:	bf00      	nop
 801206c:	e000ed08 	.word	0xe000ed08

08012070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012076:	4b36      	ldr	r3, [pc, #216]	; (8012150 <xPortStartScheduler+0xe0>)
 8012078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	b2db      	uxtb	r3, r3
 8012080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	22ff      	movs	r2, #255	; 0xff
 8012086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	b2db      	uxtb	r3, r3
 801208e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012090:	78fb      	ldrb	r3, [r7, #3]
 8012092:	b2db      	uxtb	r3, r3
 8012094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012098:	b2da      	uxtb	r2, r3
 801209a:	4b2e      	ldr	r3, [pc, #184]	; (8012154 <xPortStartScheduler+0xe4>)
 801209c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801209e:	4b2e      	ldr	r3, [pc, #184]	; (8012158 <xPortStartScheduler+0xe8>)
 80120a0:	2207      	movs	r2, #7
 80120a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120a4:	e009      	b.n	80120ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80120a6:	4b2c      	ldr	r3, [pc, #176]	; (8012158 <xPortStartScheduler+0xe8>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	3b01      	subs	r3, #1
 80120ac:	4a2a      	ldr	r2, [pc, #168]	; (8012158 <xPortStartScheduler+0xe8>)
 80120ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80120b0:	78fb      	ldrb	r3, [r7, #3]
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120ba:	78fb      	ldrb	r3, [r7, #3]
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120c2:	2b80      	cmp	r3, #128	; 0x80
 80120c4:	d0ef      	beq.n	80120a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80120c6:	4b24      	ldr	r3, [pc, #144]	; (8012158 <xPortStartScheduler+0xe8>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f1c3 0307 	rsb	r3, r3, #7
 80120ce:	2b04      	cmp	r3, #4
 80120d0:	d00b      	beq.n	80120ea <xPortStartScheduler+0x7a>
 80120d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d6:	b672      	cpsid	i
 80120d8:	f383 8811 	msr	BASEPRI, r3
 80120dc:	f3bf 8f6f 	isb	sy
 80120e0:	f3bf 8f4f 	dsb	sy
 80120e4:	b662      	cpsie	i
 80120e6:	60bb      	str	r3, [r7, #8]
 80120e8:	e7fe      	b.n	80120e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120ea:	4b1b      	ldr	r3, [pc, #108]	; (8012158 <xPortStartScheduler+0xe8>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	021b      	lsls	r3, r3, #8
 80120f0:	4a19      	ldr	r2, [pc, #100]	; (8012158 <xPortStartScheduler+0xe8>)
 80120f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120f4:	4b18      	ldr	r3, [pc, #96]	; (8012158 <xPortStartScheduler+0xe8>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120fc:	4a16      	ldr	r2, [pc, #88]	; (8012158 <xPortStartScheduler+0xe8>)
 80120fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	b2da      	uxtb	r2, r3
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012108:	4b14      	ldr	r3, [pc, #80]	; (801215c <xPortStartScheduler+0xec>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a13      	ldr	r2, [pc, #76]	; (801215c <xPortStartScheduler+0xec>)
 801210e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012112:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012114:	4b11      	ldr	r3, [pc, #68]	; (801215c <xPortStartScheduler+0xec>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4a10      	ldr	r2, [pc, #64]	; (801215c <xPortStartScheduler+0xec>)
 801211a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801211e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012120:	f000 f8d4 	bl	80122cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012124:	4b0e      	ldr	r3, [pc, #56]	; (8012160 <xPortStartScheduler+0xf0>)
 8012126:	2200      	movs	r2, #0
 8012128:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801212a:	f000 f8f3 	bl	8012314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801212e:	4b0d      	ldr	r3, [pc, #52]	; (8012164 <xPortStartScheduler+0xf4>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4a0c      	ldr	r2, [pc, #48]	; (8012164 <xPortStartScheduler+0xf4>)
 8012134:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012138:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801213a:	f7ff ff85 	bl	8012048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801213e:	f7ff fb99 	bl	8011874 <vTaskSwitchContext>
	prvTaskExitError();
 8012142:	f7ff ff3f 	bl	8011fc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012146:	2300      	movs	r3, #0
}
 8012148:	4618      	mov	r0, r3
 801214a:	3710      	adds	r7, #16
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	e000e400 	.word	0xe000e400
 8012154:	20000454 	.word	0x20000454
 8012158:	20000458 	.word	0x20000458
 801215c:	e000ed20 	.word	0xe000ed20
 8012160:	2000002c 	.word	0x2000002c
 8012164:	e000ef34 	.word	0xe000ef34

08012168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012172:	b672      	cpsid	i
 8012174:	f383 8811 	msr	BASEPRI, r3
 8012178:	f3bf 8f6f 	isb	sy
 801217c:	f3bf 8f4f 	dsb	sy
 8012180:	b662      	cpsie	i
 8012182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012184:	4b0f      	ldr	r3, [pc, #60]	; (80121c4 <vPortEnterCritical+0x5c>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	3301      	adds	r3, #1
 801218a:	4a0e      	ldr	r2, [pc, #56]	; (80121c4 <vPortEnterCritical+0x5c>)
 801218c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801218e:	4b0d      	ldr	r3, [pc, #52]	; (80121c4 <vPortEnterCritical+0x5c>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b01      	cmp	r3, #1
 8012194:	d110      	bne.n	80121b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012196:	4b0c      	ldr	r3, [pc, #48]	; (80121c8 <vPortEnterCritical+0x60>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00b      	beq.n	80121b8 <vPortEnterCritical+0x50>
 80121a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a4:	b672      	cpsid	i
 80121a6:	f383 8811 	msr	BASEPRI, r3
 80121aa:	f3bf 8f6f 	isb	sy
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	b662      	cpsie	i
 80121b4:	603b      	str	r3, [r7, #0]
 80121b6:	e7fe      	b.n	80121b6 <vPortEnterCritical+0x4e>
	}
}
 80121b8:	bf00      	nop
 80121ba:	370c      	adds	r7, #12
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr
 80121c4:	2000002c 	.word	0x2000002c
 80121c8:	e000ed04 	.word	0xe000ed04

080121cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121d2:	4b12      	ldr	r3, [pc, #72]	; (801221c <vPortExitCritical+0x50>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d10b      	bne.n	80121f2 <vPortExitCritical+0x26>
 80121da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121de:	b672      	cpsid	i
 80121e0:	f383 8811 	msr	BASEPRI, r3
 80121e4:	f3bf 8f6f 	isb	sy
 80121e8:	f3bf 8f4f 	dsb	sy
 80121ec:	b662      	cpsie	i
 80121ee:	607b      	str	r3, [r7, #4]
 80121f0:	e7fe      	b.n	80121f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80121f2:	4b0a      	ldr	r3, [pc, #40]	; (801221c <vPortExitCritical+0x50>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	3b01      	subs	r3, #1
 80121f8:	4a08      	ldr	r2, [pc, #32]	; (801221c <vPortExitCritical+0x50>)
 80121fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121fc:	4b07      	ldr	r3, [pc, #28]	; (801221c <vPortExitCritical+0x50>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d104      	bne.n	801220e <vPortExitCritical+0x42>
 8012204:	2300      	movs	r3, #0
 8012206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801220e:	bf00      	nop
 8012210:	370c      	adds	r7, #12
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	2000002c 	.word	0x2000002c

08012220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012220:	f3ef 8009 	mrs	r0, PSP
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	4b15      	ldr	r3, [pc, #84]	; (8012280 <pxCurrentTCBConst>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	f01e 0f10 	tst.w	lr, #16
 8012230:	bf08      	it	eq
 8012232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223a:	6010      	str	r0, [r2, #0]
 801223c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012244:	b672      	cpsid	i
 8012246:	f380 8811 	msr	BASEPRI, r0
 801224a:	f3bf 8f4f 	dsb	sy
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	b662      	cpsie	i
 8012254:	f7ff fb0e 	bl	8011874 <vTaskSwitchContext>
 8012258:	f04f 0000 	mov.w	r0, #0
 801225c:	f380 8811 	msr	BASEPRI, r0
 8012260:	bc09      	pop	{r0, r3}
 8012262:	6819      	ldr	r1, [r3, #0]
 8012264:	6808      	ldr	r0, [r1, #0]
 8012266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226a:	f01e 0f10 	tst.w	lr, #16
 801226e:	bf08      	it	eq
 8012270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012274:	f380 8809 	msr	PSP, r0
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	4770      	bx	lr
 801227e:	bf00      	nop

08012280 <pxCurrentTCBConst>:
 8012280:	20000328 	.word	0x20000328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012284:	bf00      	nop
 8012286:	bf00      	nop

08012288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
	__asm volatile
 801228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012292:	b672      	cpsid	i
 8012294:	f383 8811 	msr	BASEPRI, r3
 8012298:	f3bf 8f6f 	isb	sy
 801229c:	f3bf 8f4f 	dsb	sy
 80122a0:	b662      	cpsie	i
 80122a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80122a4:	f7ff fa2c 	bl	8011700 <xTaskIncrementTick>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80122ae:	4b06      	ldr	r3, [pc, #24]	; (80122c8 <SysTick_Handler+0x40>)
 80122b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b4:	601a      	str	r2, [r3, #0]
 80122b6:	2300      	movs	r3, #0
 80122b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80122c0:	bf00      	nop
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	e000ed04 	.word	0xe000ed04

080122cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80122cc:	b480      	push	{r7}
 80122ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122d0:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <vPortSetupTimerInterrupt+0x34>)
 80122d2:	2200      	movs	r2, #0
 80122d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122d6:	4b0b      	ldr	r3, [pc, #44]	; (8012304 <vPortSetupTimerInterrupt+0x38>)
 80122d8:	2200      	movs	r2, #0
 80122da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122dc:	4b0a      	ldr	r3, [pc, #40]	; (8012308 <vPortSetupTimerInterrupt+0x3c>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4a0a      	ldr	r2, [pc, #40]	; (801230c <vPortSetupTimerInterrupt+0x40>)
 80122e2:	fba2 2303 	umull	r2, r3, r2, r3
 80122e6:	099b      	lsrs	r3, r3, #6
 80122e8:	4a09      	ldr	r2, [pc, #36]	; (8012310 <vPortSetupTimerInterrupt+0x44>)
 80122ea:	3b01      	subs	r3, #1
 80122ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122ee:	4b04      	ldr	r3, [pc, #16]	; (8012300 <vPortSetupTimerInterrupt+0x34>)
 80122f0:	2207      	movs	r2, #7
 80122f2:	601a      	str	r2, [r3, #0]
}
 80122f4:	bf00      	nop
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop
 8012300:	e000e010 	.word	0xe000e010
 8012304:	e000e018 	.word	0xe000e018
 8012308:	20000000 	.word	0x20000000
 801230c:	10624dd3 	.word	0x10624dd3
 8012310:	e000e014 	.word	0xe000e014

08012314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012324 <vPortEnableVFP+0x10>
 8012318:	6801      	ldr	r1, [r0, #0]
 801231a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801231e:	6001      	str	r1, [r0, #0]
 8012320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012322:	bf00      	nop
 8012324:	e000ed88 	.word	0xe000ed88

08012328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012328:	b480      	push	{r7}
 801232a:	b085      	sub	sp, #20
 801232c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801232e:	f3ef 8305 	mrs	r3, IPSR
 8012332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2b0f      	cmp	r3, #15
 8012338:	d915      	bls.n	8012366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801233a:	4a18      	ldr	r2, [pc, #96]	; (801239c <vPortValidateInterruptPriority+0x74>)
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4413      	add	r3, r2
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012344:	4b16      	ldr	r3, [pc, #88]	; (80123a0 <vPortValidateInterruptPriority+0x78>)
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	7afa      	ldrb	r2, [r7, #11]
 801234a:	429a      	cmp	r2, r3
 801234c:	d20b      	bcs.n	8012366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012352:	b672      	cpsid	i
 8012354:	f383 8811 	msr	BASEPRI, r3
 8012358:	f3bf 8f6f 	isb	sy
 801235c:	f3bf 8f4f 	dsb	sy
 8012360:	b662      	cpsie	i
 8012362:	607b      	str	r3, [r7, #4]
 8012364:	e7fe      	b.n	8012364 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012366:	4b0f      	ldr	r3, [pc, #60]	; (80123a4 <vPortValidateInterruptPriority+0x7c>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801236e:	4b0e      	ldr	r3, [pc, #56]	; (80123a8 <vPortValidateInterruptPriority+0x80>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	429a      	cmp	r2, r3
 8012374:	d90b      	bls.n	801238e <vPortValidateInterruptPriority+0x66>
 8012376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237a:	b672      	cpsid	i
 801237c:	f383 8811 	msr	BASEPRI, r3
 8012380:	f3bf 8f6f 	isb	sy
 8012384:	f3bf 8f4f 	dsb	sy
 8012388:	b662      	cpsie	i
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	e7fe      	b.n	801238c <vPortValidateInterruptPriority+0x64>
	}
 801238e:	bf00      	nop
 8012390:	3714      	adds	r7, #20
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop
 801239c:	e000e3f0 	.word	0xe000e3f0
 80123a0:	20000454 	.word	0x20000454
 80123a4:	e000ed0c 	.word	0xe000ed0c
 80123a8:	20000458 	.word	0x20000458

080123ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b08a      	sub	sp, #40	; 0x28
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80123b4:	2300      	movs	r3, #0
 80123b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80123b8:	f7ff f8d4 	bl	8011564 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123bc:	4b5c      	ldr	r3, [pc, #368]	; (8012530 <pvPortMalloc+0x184>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d101      	bne.n	80123c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123c4:	f000 f91a 	bl	80125fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123c8:	4b5a      	ldr	r3, [pc, #360]	; (8012534 <pvPortMalloc+0x188>)
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	4013      	ands	r3, r2
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f040 8090 	bne.w	80124f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d01e      	beq.n	801241a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80123dc:	2208      	movs	r2, #8
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4413      	add	r3, r2
 80123e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f003 0307 	and.w	r3, r3, #7
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d015      	beq.n	801241a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f023 0307 	bic.w	r3, r3, #7
 80123f4:	3308      	adds	r3, #8
 80123f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f003 0307 	and.w	r3, r3, #7
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d00b      	beq.n	801241a <pvPortMalloc+0x6e>
 8012402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012406:	b672      	cpsid	i
 8012408:	f383 8811 	msr	BASEPRI, r3
 801240c:	f3bf 8f6f 	isb	sy
 8012410:	f3bf 8f4f 	dsb	sy
 8012414:	b662      	cpsie	i
 8012416:	617b      	str	r3, [r7, #20]
 8012418:	e7fe      	b.n	8012418 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d06a      	beq.n	80124f6 <pvPortMalloc+0x14a>
 8012420:	4b45      	ldr	r3, [pc, #276]	; (8012538 <pvPortMalloc+0x18c>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	687a      	ldr	r2, [r7, #4]
 8012426:	429a      	cmp	r2, r3
 8012428:	d865      	bhi.n	80124f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801242a:	4b44      	ldr	r3, [pc, #272]	; (801253c <pvPortMalloc+0x190>)
 801242c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801242e:	4b43      	ldr	r3, [pc, #268]	; (801253c <pvPortMalloc+0x190>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012434:	e004      	b.n	8012440 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	429a      	cmp	r2, r3
 8012448:	d903      	bls.n	8012452 <pvPortMalloc+0xa6>
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1f1      	bne.n	8012436 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012452:	4b37      	ldr	r3, [pc, #220]	; (8012530 <pvPortMalloc+0x184>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012458:	429a      	cmp	r2, r3
 801245a:	d04c      	beq.n	80124f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801245c:	6a3b      	ldr	r3, [r7, #32]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2208      	movs	r2, #8
 8012462:	4413      	add	r3, r2
 8012464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	6a3b      	ldr	r3, [r7, #32]
 801246c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012470:	685a      	ldr	r2, [r3, #4]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	1ad2      	subs	r2, r2, r3
 8012476:	2308      	movs	r3, #8
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	429a      	cmp	r2, r3
 801247c:	d920      	bls.n	80124c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	4413      	add	r3, r2
 8012484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	f003 0307 	and.w	r3, r3, #7
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00b      	beq.n	80124a8 <pvPortMalloc+0xfc>
 8012490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012494:	b672      	cpsid	i
 8012496:	f383 8811 	msr	BASEPRI, r3
 801249a:	f3bf 8f6f 	isb	sy
 801249e:	f3bf 8f4f 	dsb	sy
 80124a2:	b662      	cpsie	i
 80124a4:	613b      	str	r3, [r7, #16]
 80124a6:	e7fe      	b.n	80124a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	1ad2      	subs	r2, r2, r3
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80124ba:	69b8      	ldr	r0, [r7, #24]
 80124bc:	f000 f900 	bl	80126c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80124c0:	4b1d      	ldr	r3, [pc, #116]	; (8012538 <pvPortMalloc+0x18c>)
 80124c2:	681a      	ldr	r2, [r3, #0]
 80124c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	1ad3      	subs	r3, r2, r3
 80124ca:	4a1b      	ldr	r2, [pc, #108]	; (8012538 <pvPortMalloc+0x18c>)
 80124cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80124ce:	4b1a      	ldr	r3, [pc, #104]	; (8012538 <pvPortMalloc+0x18c>)
 80124d0:	681a      	ldr	r2, [r3, #0]
 80124d2:	4b1b      	ldr	r3, [pc, #108]	; (8012540 <pvPortMalloc+0x194>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d203      	bcs.n	80124e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124da:	4b17      	ldr	r3, [pc, #92]	; (8012538 <pvPortMalloc+0x18c>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	4a18      	ldr	r2, [pc, #96]	; (8012540 <pvPortMalloc+0x194>)
 80124e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e4:	685a      	ldr	r2, [r3, #4]
 80124e6:	4b13      	ldr	r3, [pc, #76]	; (8012534 <pvPortMalloc+0x188>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	431a      	orrs	r2, r3
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	2200      	movs	r2, #0
 80124f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124f6:	f7ff f843 	bl	8011580 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d101      	bne.n	8012504 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012500:	f7ee fc12 	bl	8000d28 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	f003 0307 	and.w	r3, r3, #7
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00b      	beq.n	8012526 <pvPortMalloc+0x17a>
 801250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012512:	b672      	cpsid	i
 8012514:	f383 8811 	msr	BASEPRI, r3
 8012518:	f3bf 8f6f 	isb	sy
 801251c:	f3bf 8f4f 	dsb	sy
 8012520:	b662      	cpsie	i
 8012522:	60fb      	str	r3, [r7, #12]
 8012524:	e7fe      	b.n	8012524 <pvPortMalloc+0x178>
	return pvReturn;
 8012526:	69fb      	ldr	r3, [r7, #28]
}
 8012528:	4618      	mov	r0, r3
 801252a:	3728      	adds	r7, #40	; 0x28
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	20008464 	.word	0x20008464
 8012534:	20008470 	.word	0x20008470
 8012538:	20008468 	.word	0x20008468
 801253c:	2000845c 	.word	0x2000845c
 8012540:	2000846c 	.word	0x2000846c

08012544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d04a      	beq.n	80125ec <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012556:	2308      	movs	r3, #8
 8012558:	425b      	negs	r3, r3
 801255a:	697a      	ldr	r2, [r7, #20]
 801255c:	4413      	add	r3, r2
 801255e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	685a      	ldr	r2, [r3, #4]
 8012568:	4b22      	ldr	r3, [pc, #136]	; (80125f4 <vPortFree+0xb0>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	4013      	ands	r3, r2
 801256e:	2b00      	cmp	r3, #0
 8012570:	d10b      	bne.n	801258a <vPortFree+0x46>
 8012572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012576:	b672      	cpsid	i
 8012578:	f383 8811 	msr	BASEPRI, r3
 801257c:	f3bf 8f6f 	isb	sy
 8012580:	f3bf 8f4f 	dsb	sy
 8012584:	b662      	cpsie	i
 8012586:	60fb      	str	r3, [r7, #12]
 8012588:	e7fe      	b.n	8012588 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00b      	beq.n	80125aa <vPortFree+0x66>
 8012592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012596:	b672      	cpsid	i
 8012598:	f383 8811 	msr	BASEPRI, r3
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	f3bf 8f4f 	dsb	sy
 80125a4:	b662      	cpsie	i
 80125a6:	60bb      	str	r3, [r7, #8]
 80125a8:	e7fe      	b.n	80125a8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	685a      	ldr	r2, [r3, #4]
 80125ae:	4b11      	ldr	r3, [pc, #68]	; (80125f4 <vPortFree+0xb0>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	4013      	ands	r3, r2
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d019      	beq.n	80125ec <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d115      	bne.n	80125ec <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	685a      	ldr	r2, [r3, #4]
 80125c4:	4b0b      	ldr	r3, [pc, #44]	; (80125f4 <vPortFree+0xb0>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	43db      	mvns	r3, r3
 80125ca:	401a      	ands	r2, r3
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80125d0:	f7fe ffc8 	bl	8011564 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	4b07      	ldr	r3, [pc, #28]	; (80125f8 <vPortFree+0xb4>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4413      	add	r3, r2
 80125de:	4a06      	ldr	r2, [pc, #24]	; (80125f8 <vPortFree+0xb4>)
 80125e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125e2:	6938      	ldr	r0, [r7, #16]
 80125e4:	f000 f86c 	bl	80126c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80125e8:	f7fe ffca 	bl	8011580 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125ec:	bf00      	nop
 80125ee:	3718      	adds	r7, #24
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	20008470 	.word	0x20008470
 80125f8:	20008468 	.word	0x20008468

080125fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125fc:	b480      	push	{r7}
 80125fe:	b085      	sub	sp, #20
 8012600:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012606:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012608:	4b27      	ldr	r3, [pc, #156]	; (80126a8 <prvHeapInit+0xac>)
 801260a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	f003 0307 	and.w	r3, r3, #7
 8012612:	2b00      	cmp	r3, #0
 8012614:	d00c      	beq.n	8012630 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	3307      	adds	r3, #7
 801261a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f023 0307 	bic.w	r3, r3, #7
 8012622:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	1ad3      	subs	r3, r2, r3
 801262a:	4a1f      	ldr	r2, [pc, #124]	; (80126a8 <prvHeapInit+0xac>)
 801262c:	4413      	add	r3, r2
 801262e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012634:	4a1d      	ldr	r2, [pc, #116]	; (80126ac <prvHeapInit+0xb0>)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801263a:	4b1c      	ldr	r3, [pc, #112]	; (80126ac <prvHeapInit+0xb0>)
 801263c:	2200      	movs	r2, #0
 801263e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	68ba      	ldr	r2, [r7, #8]
 8012644:	4413      	add	r3, r2
 8012646:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012648:	2208      	movs	r2, #8
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	1a9b      	subs	r3, r3, r2
 801264e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	f023 0307 	bic.w	r3, r3, #7
 8012656:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	4a15      	ldr	r2, [pc, #84]	; (80126b0 <prvHeapInit+0xb4>)
 801265c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801265e:	4b14      	ldr	r3, [pc, #80]	; (80126b0 <prvHeapInit+0xb4>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2200      	movs	r2, #0
 8012664:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012666:	4b12      	ldr	r3, [pc, #72]	; (80126b0 <prvHeapInit+0xb4>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	2200      	movs	r2, #0
 801266c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	1ad2      	subs	r2, r2, r3
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801267c:	4b0c      	ldr	r3, [pc, #48]	; (80126b0 <prvHeapInit+0xb4>)
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	4a0a      	ldr	r2, [pc, #40]	; (80126b4 <prvHeapInit+0xb8>)
 801268a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	4a09      	ldr	r2, [pc, #36]	; (80126b8 <prvHeapInit+0xbc>)
 8012692:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012694:	4b09      	ldr	r3, [pc, #36]	; (80126bc <prvHeapInit+0xc0>)
 8012696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801269a:	601a      	str	r2, [r3, #0]
}
 801269c:	bf00      	nop
 801269e:	3714      	adds	r7, #20
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr
 80126a8:	2000045c 	.word	0x2000045c
 80126ac:	2000845c 	.word	0x2000845c
 80126b0:	20008464 	.word	0x20008464
 80126b4:	2000846c 	.word	0x2000846c
 80126b8:	20008468 	.word	0x20008468
 80126bc:	20008470 	.word	0x20008470

080126c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80126c0:	b480      	push	{r7}
 80126c2:	b085      	sub	sp, #20
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126c8:	4b28      	ldr	r3, [pc, #160]	; (801276c <prvInsertBlockIntoFreeList+0xac>)
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	e002      	b.n	80126d4 <prvInsertBlockIntoFreeList+0x14>
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	60fb      	str	r3, [r7, #12]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d8f7      	bhi.n	80126ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	68ba      	ldr	r2, [r7, #8]
 80126e8:	4413      	add	r3, r2
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d108      	bne.n	8012702 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	685a      	ldr	r2, [r3, #4]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	441a      	add	r2, r3
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	68ba      	ldr	r2, [r7, #8]
 801270c:	441a      	add	r2, r3
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	429a      	cmp	r2, r3
 8012714:	d118      	bne.n	8012748 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	4b15      	ldr	r3, [pc, #84]	; (8012770 <prvInsertBlockIntoFreeList+0xb0>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	429a      	cmp	r2, r3
 8012720:	d00d      	beq.n	801273e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	685a      	ldr	r2, [r3, #4]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	441a      	add	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	601a      	str	r2, [r3, #0]
 801273c:	e008      	b.n	8012750 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801273e:	4b0c      	ldr	r3, [pc, #48]	; (8012770 <prvInsertBlockIntoFreeList+0xb0>)
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	e003      	b.n	8012750 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012750:	68fa      	ldr	r2, [r7, #12]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	429a      	cmp	r2, r3
 8012756:	d002      	beq.n	801275e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	687a      	ldr	r2, [r7, #4]
 801275c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801275e:	bf00      	nop
 8012760:	3714      	adds	r7, #20
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	2000845c 	.word	0x2000845c
 8012770:	20008464 	.word	0x20008464

08012774 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012778:	2201      	movs	r2, #1
 801277a:	490e      	ldr	r1, [pc, #56]	; (80127b4 <MX_USB_HOST_Init+0x40>)
 801277c:	480e      	ldr	r0, [pc, #56]	; (80127b8 <MX_USB_HOST_Init+0x44>)
 801277e:	f7fb ff33 	bl	800e5e8 <USBH_Init>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d001      	beq.n	801278c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012788:	f7ef f880 	bl	800188c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801278c:	490b      	ldr	r1, [pc, #44]	; (80127bc <MX_USB_HOST_Init+0x48>)
 801278e:	480a      	ldr	r0, [pc, #40]	; (80127b8 <MX_USB_HOST_Init+0x44>)
 8012790:	f7fb ffe0 	bl	800e754 <USBH_RegisterClass>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801279a:	f7ef f877 	bl	800188c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801279e:	4806      	ldr	r0, [pc, #24]	; (80127b8 <MX_USB_HOST_Init+0x44>)
 80127a0:	f7fc f864 	bl	800e86c <USBH_Start>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d001      	beq.n	80127ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80127aa:	f7ef f86f 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80127ae:	bf00      	nop
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	bf00      	nop
 80127b4:	080127c1 	.word	0x080127c1
 80127b8:	20009114 	.word	0x20009114
 80127bc:	2000000c 	.word	0x2000000c

080127c0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	460b      	mov	r3, r1
 80127ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80127cc:	78fb      	ldrb	r3, [r7, #3]
 80127ce:	3b01      	subs	r3, #1
 80127d0:	2b04      	cmp	r3, #4
 80127d2:	d819      	bhi.n	8012808 <USBH_UserProcess+0x48>
 80127d4:	a201      	add	r2, pc, #4	; (adr r2, 80127dc <USBH_UserProcess+0x1c>)
 80127d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127da:	bf00      	nop
 80127dc:	08012809 	.word	0x08012809
 80127e0:	080127f9 	.word	0x080127f9
 80127e4:	08012809 	.word	0x08012809
 80127e8:	08012801 	.word	0x08012801
 80127ec:	080127f1 	.word	0x080127f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80127f0:	4b09      	ldr	r3, [pc, #36]	; (8012818 <USBH_UserProcess+0x58>)
 80127f2:	2203      	movs	r2, #3
 80127f4:	701a      	strb	r2, [r3, #0]
  break;
 80127f6:	e008      	b.n	801280a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80127f8:	4b07      	ldr	r3, [pc, #28]	; (8012818 <USBH_UserProcess+0x58>)
 80127fa:	2202      	movs	r2, #2
 80127fc:	701a      	strb	r2, [r3, #0]
  break;
 80127fe:	e004      	b.n	801280a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012800:	4b05      	ldr	r3, [pc, #20]	; (8012818 <USBH_UserProcess+0x58>)
 8012802:	2201      	movs	r2, #1
 8012804:	701a      	strb	r2, [r3, #0]
  break;
 8012806:	e000      	b.n	801280a <USBH_UserProcess+0x4a>

  default:
  break;
 8012808:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801280a:	bf00      	nop
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	20008474 	.word	0x20008474

0801281c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b08a      	sub	sp, #40	; 0x28
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012824:	f107 0314 	add.w	r3, r7, #20
 8012828:	2200      	movs	r2, #0
 801282a:	601a      	str	r2, [r3, #0]
 801282c:	605a      	str	r2, [r3, #4]
 801282e:	609a      	str	r2, [r3, #8]
 8012830:	60da      	str	r2, [r3, #12]
 8012832:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801283c:	d13c      	bne.n	80128b8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801283e:	4b20      	ldr	r3, [pc, #128]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 8012840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012842:	4a1f      	ldr	r2, [pc, #124]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 8012844:	f043 0301 	orr.w	r3, r3, #1
 8012848:	6313      	str	r3, [r2, #48]	; 0x30
 801284a:	4b1d      	ldr	r3, [pc, #116]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 801284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801284e:	f003 0301 	and.w	r3, r3, #1
 8012852:	613b      	str	r3, [r7, #16]
 8012854:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8012856:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801285c:	2302      	movs	r3, #2
 801285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012860:	2300      	movs	r3, #0
 8012862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012864:	2303      	movs	r3, #3
 8012866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012868:	230a      	movs	r3, #10
 801286a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801286c:	f107 0314 	add.w	r3, r7, #20
 8012870:	4619      	mov	r1, r3
 8012872:	4814      	ldr	r0, [pc, #80]	; (80128c4 <HAL_HCD_MspInit+0xa8>)
 8012874:	f7f1 ff18 	bl	80046a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012878:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 801287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287c:	4a10      	ldr	r2, [pc, #64]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 801287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012882:	6353      	str	r3, [r2, #52]	; 0x34
 8012884:	4b0e      	ldr	r3, [pc, #56]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 8012886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801288c:	60fb      	str	r3, [r7, #12]
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	4b0b      	ldr	r3, [pc, #44]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 8012892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012894:	4a0a      	ldr	r2, [pc, #40]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 8012896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801289a:	6453      	str	r3, [r2, #68]	; 0x44
 801289c:	4b08      	ldr	r3, [pc, #32]	; (80128c0 <HAL_HCD_MspInit+0xa4>)
 801289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128a4:	60bb      	str	r3, [r7, #8]
 80128a6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80128a8:	2200      	movs	r2, #0
 80128aa:	2100      	movs	r1, #0
 80128ac:	2043      	movs	r0, #67	; 0x43
 80128ae:	f7f0 fe59 	bl	8003564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80128b2:	2043      	movs	r0, #67	; 0x43
 80128b4:	f7f0 fe72 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80128b8:	bf00      	nop
 80128ba:	3728      	adds	r7, #40	; 0x28
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	40023800 	.word	0x40023800
 80128c4:	40020000 	.word	0x40020000

080128c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fc fc75 	bl	800f1c6 <USBH_LL_IncTimer>
}
 80128dc:	bf00      	nop
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fc fcb9 	bl	800f26a <USBH_LL_Connect>
}
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801290e:	4618      	mov	r0, r3
 8012910:	f7fc fcce 	bl	800f2b0 <USBH_LL_Disconnect>
}
 8012914:	bf00      	nop
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	460b      	mov	r3, r1
 8012926:	70fb      	strb	r3, [r7, #3]
 8012928:	4613      	mov	r3, r2
 801292a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012932:	4618      	mov	r0, r3
 8012934:	f7fc fd03 	bl	800f33e <USBH_LL_NotifyURBChange>
#endif
}
 8012938:	bf00      	nop
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801294e:	4618      	mov	r0, r3
 8012950:	f7fc fc63 	bl	800f21a <USBH_LL_PortEnabled>
}
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801296a:	4618      	mov	r0, r3
 801296c:	f7fc fc6f 	bl	800f24e <USBH_LL_PortDisabled>
}
 8012970:	bf00      	nop
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012986:	2b01      	cmp	r3, #1
 8012988:	d12a      	bne.n	80129e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801298a:	4a18      	ldr	r2, [pc, #96]	; (80129ec <USBH_LL_Init+0x74>)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	4a15      	ldr	r2, [pc, #84]	; (80129ec <USBH_LL_Init+0x74>)
 8012996:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801299a:	4b14      	ldr	r3, [pc, #80]	; (80129ec <USBH_LL_Init+0x74>)
 801299c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80129a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80129a2:	4b12      	ldr	r3, [pc, #72]	; (80129ec <USBH_LL_Init+0x74>)
 80129a4:	2208      	movs	r2, #8
 80129a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80129a8:	4b10      	ldr	r3, [pc, #64]	; (80129ec <USBH_LL_Init+0x74>)
 80129aa:	2201      	movs	r2, #1
 80129ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80129ae:	4b0f      	ldr	r3, [pc, #60]	; (80129ec <USBH_LL_Init+0x74>)
 80129b0:	2200      	movs	r2, #0
 80129b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80129b4:	4b0d      	ldr	r3, [pc, #52]	; (80129ec <USBH_LL_Init+0x74>)
 80129b6:	2202      	movs	r2, #2
 80129b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80129ba:	4b0c      	ldr	r3, [pc, #48]	; (80129ec <USBH_LL_Init+0x74>)
 80129bc:	2200      	movs	r2, #0
 80129be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80129c0:	480a      	ldr	r0, [pc, #40]	; (80129ec <USBH_LL_Init+0x74>)
 80129c2:	f7f2 f84c 	bl	8004a5e <HAL_HCD_Init>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d001      	beq.n	80129d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80129cc:	f7ee ff5e 	bl	800188c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80129d0:	4806      	ldr	r0, [pc, #24]	; (80129ec <USBH_LL_Init+0x74>)
 80129d2:	f7f2 fc4f 	bl	8005274 <HAL_HCD_GetCurrentFrame>
 80129d6:	4603      	mov	r3, r0
 80129d8:	4619      	mov	r1, r3
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f7fc fbe4 	bl	800f1a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80129e0:	2300      	movs	r3, #0
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	200094f8 	.word	0x200094f8

080129f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129f8:	2300      	movs	r3, #0
 80129fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80129fc:	2300      	movs	r3, #0
 80129fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7f2 fbbc 	bl	8005184 <HAL_HCD_Start>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a10:	7bfb      	ldrb	r3, [r7, #15]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f000 f95c 	bl	8012cd0 <USBH_Get_USB_Status>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b084      	sub	sp, #16
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a32:	2300      	movs	r3, #0
 8012a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f2 fbc4 	bl	80051ca <HAL_HCD_Stop>
 8012a42:	4603      	mov	r3, r0
 8012a44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f000 f941 	bl	8012cd0 <USBH_Get_USB_Status>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3710      	adds	r7, #16
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012a64:	2301      	movs	r3, #1
 8012a66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7f2 fc0e 	bl	8005290 <HAL_HCD_GetCurrentSpeed>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d007      	beq.n	8012a8a <USBH_LL_GetSpeed+0x2e>
 8012a7a:	2b01      	cmp	r3, #1
 8012a7c:	d302      	bcc.n	8012a84 <USBH_LL_GetSpeed+0x28>
 8012a7e:	2b02      	cmp	r3, #2
 8012a80:	d006      	beq.n	8012a90 <USBH_LL_GetSpeed+0x34>
 8012a82:	e008      	b.n	8012a96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012a84:	2300      	movs	r3, #0
 8012a86:	73fb      	strb	r3, [r7, #15]
    break;
 8012a88:	e008      	b.n	8012a9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8012a8e:	e005      	b.n	8012a9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012a90:	2302      	movs	r3, #2
 8012a92:	73fb      	strb	r3, [r7, #15]
    break;
 8012a94:	e002      	b.n	8012a9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8012a96:	2301      	movs	r3, #1
 8012a98:	73fb      	strb	r3, [r7, #15]
    break;
 8012a9a:	bf00      	nop
  }
  return  speed;
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3710      	adds	r7, #16
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b084      	sub	sp, #16
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7f2 fba1 	bl	8005204 <HAL_HCD_ResetPort>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ac6:	7bfb      	ldrb	r3, [r7, #15]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f000 f901 	bl	8012cd0 <USBH_Get_USB_Status>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3710      	adds	r7, #16
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012aee:	78fa      	ldrb	r2, [r7, #3]
 8012af0:	4611      	mov	r1, r2
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7f2 fba9 	bl	800524a <HAL_HCD_HC_GetXferCount>
 8012af8:	4603      	mov	r3, r0
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3708      	adds	r7, #8
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}

08012b02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012b02:	b590      	push	{r4, r7, lr}
 8012b04:	b089      	sub	sp, #36	; 0x24
 8012b06:	af04      	add	r7, sp, #16
 8012b08:	6078      	str	r0, [r7, #4]
 8012b0a:	4608      	mov	r0, r1
 8012b0c:	4611      	mov	r1, r2
 8012b0e:	461a      	mov	r2, r3
 8012b10:	4603      	mov	r3, r0
 8012b12:	70fb      	strb	r3, [r7, #3]
 8012b14:	460b      	mov	r3, r1
 8012b16:	70bb      	strb	r3, [r7, #2]
 8012b18:	4613      	mov	r3, r2
 8012b1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b20:	2300      	movs	r3, #0
 8012b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012b2a:	787c      	ldrb	r4, [r7, #1]
 8012b2c:	78ba      	ldrb	r2, [r7, #2]
 8012b2e:	78f9      	ldrb	r1, [r7, #3]
 8012b30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012b32:	9302      	str	r3, [sp, #8]
 8012b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012b38:	9301      	str	r3, [sp, #4]
 8012b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b3e:	9300      	str	r3, [sp, #0]
 8012b40:	4623      	mov	r3, r4
 8012b42:	f7f1 ffee 	bl	8004b22 <HAL_HCD_HC_Init>
 8012b46:	4603      	mov	r3, r0
 8012b48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012b4a:	7bfb      	ldrb	r3, [r7, #15]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f000 f8bf 	bl	8012cd0 <USBH_Get_USB_Status>
 8012b52:	4603      	mov	r3, r0
 8012b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3714      	adds	r7, #20
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd90      	pop	{r4, r7, pc}

08012b60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	460b      	mov	r3, r1
 8012b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012b70:	2300      	movs	r3, #0
 8012b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012b7a:	78fa      	ldrb	r2, [r7, #3]
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7f2 f867 	bl	8004c52 <HAL_HCD_HC_Halt>
 8012b84:	4603      	mov	r3, r0
 8012b86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012b88:	7bfb      	ldrb	r3, [r7, #15]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f000 f8a0 	bl	8012cd0 <USBH_Get_USB_Status>
 8012b90:	4603      	mov	r3, r0
 8012b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3710      	adds	r7, #16
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}

08012b9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012b9e:	b590      	push	{r4, r7, lr}
 8012ba0:	b089      	sub	sp, #36	; 0x24
 8012ba2:	af04      	add	r7, sp, #16
 8012ba4:	6078      	str	r0, [r7, #4]
 8012ba6:	4608      	mov	r0, r1
 8012ba8:	4611      	mov	r1, r2
 8012baa:	461a      	mov	r2, r3
 8012bac:	4603      	mov	r3, r0
 8012bae:	70fb      	strb	r3, [r7, #3]
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	70bb      	strb	r3, [r7, #2]
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012bc6:	787c      	ldrb	r4, [r7, #1]
 8012bc8:	78ba      	ldrb	r2, [r7, #2]
 8012bca:	78f9      	ldrb	r1, [r7, #3]
 8012bcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012bd0:	9303      	str	r3, [sp, #12]
 8012bd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012bd4:	9302      	str	r3, [sp, #8]
 8012bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd8:	9301      	str	r3, [sp, #4]
 8012bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012bde:	9300      	str	r3, [sp, #0]
 8012be0:	4623      	mov	r3, r4
 8012be2:	f7f2 f859 	bl	8004c98 <HAL_HCD_HC_SubmitRequest>
 8012be6:	4603      	mov	r3, r0
 8012be8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012bea:	7bfb      	ldrb	r3, [r7, #15]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f000 f86f 	bl	8012cd0 <USBH_Get_USB_Status>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3714      	adds	r7, #20
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd90      	pop	{r4, r7, pc}

08012c00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	460b      	mov	r3, r1
 8012c0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012c12:	78fa      	ldrb	r2, [r7, #3]
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7f2 fb02 	bl	8005220 <HAL_HCD_HC_GetURBState>
 8012c1c:	4603      	mov	r3, r0
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3708      	adds	r7, #8
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b082      	sub	sp, #8
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
 8012c2e:	460b      	mov	r3, r1
 8012c30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d103      	bne.n	8012c44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012c3c:	78fb      	ldrb	r3, [r7, #3]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f000 f872 	bl	8012d28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012c44:	20c8      	movs	r0, #200	; 0xc8
 8012c46:	f7f0 f92b 	bl	8002ea0 <HAL_Delay>
  return USBH_OK;
 8012c4a:	2300      	movs	r3, #0
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3708      	adds	r7, #8
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}

08012c54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b085      	sub	sp, #20
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	70fb      	strb	r3, [r7, #3]
 8012c60:	4613      	mov	r3, r2
 8012c62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012c6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012c6c:	78fa      	ldrb	r2, [r7, #3]
 8012c6e:	68f9      	ldr	r1, [r7, #12]
 8012c70:	4613      	mov	r3, r2
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	4413      	add	r3, r2
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	440b      	add	r3, r1
 8012c7a:	333b      	adds	r3, #59	; 0x3b
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d00a      	beq.n	8012c98 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012c82:	78fa      	ldrb	r2, [r7, #3]
 8012c84:	68f9      	ldr	r1, [r7, #12]
 8012c86:	4613      	mov	r3, r2
 8012c88:	009b      	lsls	r3, r3, #2
 8012c8a:	4413      	add	r3, r2
 8012c8c:	00db      	lsls	r3, r3, #3
 8012c8e:	440b      	add	r3, r1
 8012c90:	3350      	adds	r3, #80	; 0x50
 8012c92:	78ba      	ldrb	r2, [r7, #2]
 8012c94:	701a      	strb	r2, [r3, #0]
 8012c96:	e009      	b.n	8012cac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012c98:	78fa      	ldrb	r2, [r7, #3]
 8012c9a:	68f9      	ldr	r1, [r7, #12]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	009b      	lsls	r3, r3, #2
 8012ca0:	4413      	add	r3, r2
 8012ca2:	00db      	lsls	r3, r3, #3
 8012ca4:	440b      	add	r3, r1
 8012ca6:	3351      	adds	r3, #81	; 0x51
 8012ca8:	78ba      	ldrb	r2, [r7, #2]
 8012caa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012cac:	2300      	movs	r3, #0
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3714      	adds	r7, #20
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb8:	4770      	bx	lr

08012cba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b082      	sub	sp, #8
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f7f0 f8ec 	bl	8002ea0 <HAL_Delay>
}
 8012cc8:	bf00      	nop
 8012cca:	3708      	adds	r7, #8
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b085      	sub	sp, #20
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012cde:	79fb      	ldrb	r3, [r7, #7]
 8012ce0:	2b03      	cmp	r3, #3
 8012ce2:	d817      	bhi.n	8012d14 <USBH_Get_USB_Status+0x44>
 8012ce4:	a201      	add	r2, pc, #4	; (adr r2, 8012cec <USBH_Get_USB_Status+0x1c>)
 8012ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cea:	bf00      	nop
 8012cec:	08012cfd 	.word	0x08012cfd
 8012cf0:	08012d03 	.word	0x08012d03
 8012cf4:	08012d09 	.word	0x08012d09
 8012cf8:	08012d0f 	.word	0x08012d0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8012d00:	e00b      	b.n	8012d1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012d02:	2302      	movs	r3, #2
 8012d04:	73fb      	strb	r3, [r7, #15]
    break;
 8012d06:	e008      	b.n	8012d1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012d08:	2301      	movs	r3, #1
 8012d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8012d0c:	e005      	b.n	8012d1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012d0e:	2302      	movs	r3, #2
 8012d10:	73fb      	strb	r3, [r7, #15]
    break;
 8012d12:	e002      	b.n	8012d1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012d14:	2302      	movs	r3, #2
 8012d16:	73fb      	strb	r3, [r7, #15]
    break;
 8012d18:	bf00      	nop
  }
  return usb_status;
 8012d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3714      	adds	r7, #20
 8012d20:	46bd      	mov	sp, r7
 8012d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d26:	4770      	bx	lr

08012d28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	4603      	mov	r3, r0
 8012d30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012d32:	79fb      	ldrb	r3, [r7, #7]
 8012d34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012d36:	79fb      	ldrb	r3, [r7, #7]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d102      	bne.n	8012d42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	73fb      	strb	r3, [r7, #15]
 8012d40:	e001      	b.n	8012d46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8012d42:	2300      	movs	r3, #0
 8012d44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8012d46:	7bfb      	ldrb	r3, [r7, #15]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	2120      	movs	r1, #32
 8012d4c:	4803      	ldr	r0, [pc, #12]	; (8012d5c <MX_DriverVbusFS+0x34>)
 8012d4e:	f7f1 fe6d 	bl	8004a2c <HAL_GPIO_WritePin>
}
 8012d52:	bf00      	nop
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	40020c00 	.word	0x40020c00

08012d60 <__errno>:
 8012d60:	4b01      	ldr	r3, [pc, #4]	; (8012d68 <__errno+0x8>)
 8012d62:	6818      	ldr	r0, [r3, #0]
 8012d64:	4770      	bx	lr
 8012d66:	bf00      	nop
 8012d68:	20000030 	.word	0x20000030

08012d6c <__libc_init_array>:
 8012d6c:	b570      	push	{r4, r5, r6, lr}
 8012d6e:	4e0d      	ldr	r6, [pc, #52]	; (8012da4 <__libc_init_array+0x38>)
 8012d70:	4c0d      	ldr	r4, [pc, #52]	; (8012da8 <__libc_init_array+0x3c>)
 8012d72:	1ba4      	subs	r4, r4, r6
 8012d74:	10a4      	asrs	r4, r4, #2
 8012d76:	2500      	movs	r5, #0
 8012d78:	42a5      	cmp	r5, r4
 8012d7a:	d109      	bne.n	8012d90 <__libc_init_array+0x24>
 8012d7c:	4e0b      	ldr	r6, [pc, #44]	; (8012dac <__libc_init_array+0x40>)
 8012d7e:	4c0c      	ldr	r4, [pc, #48]	; (8012db0 <__libc_init_array+0x44>)
 8012d80:	f000 fca4 	bl	80136cc <_init>
 8012d84:	1ba4      	subs	r4, r4, r6
 8012d86:	10a4      	asrs	r4, r4, #2
 8012d88:	2500      	movs	r5, #0
 8012d8a:	42a5      	cmp	r5, r4
 8012d8c:	d105      	bne.n	8012d9a <__libc_init_array+0x2e>
 8012d8e:	bd70      	pop	{r4, r5, r6, pc}
 8012d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012d94:	4798      	blx	r3
 8012d96:	3501      	adds	r5, #1
 8012d98:	e7ee      	b.n	8012d78 <__libc_init_array+0xc>
 8012d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012d9e:	4798      	blx	r3
 8012da0:	3501      	adds	r5, #1
 8012da2:	e7f2      	b.n	8012d8a <__libc_init_array+0x1e>
 8012da4:	0801380c 	.word	0x0801380c
 8012da8:	0801380c 	.word	0x0801380c
 8012dac:	0801380c 	.word	0x0801380c
 8012db0:	08013810 	.word	0x08013810

08012db4 <malloc>:
 8012db4:	4b02      	ldr	r3, [pc, #8]	; (8012dc0 <malloc+0xc>)
 8012db6:	4601      	mov	r1, r0
 8012db8:	6818      	ldr	r0, [r3, #0]
 8012dba:	f000 b86d 	b.w	8012e98 <_malloc_r>
 8012dbe:	bf00      	nop
 8012dc0:	20000030 	.word	0x20000030

08012dc4 <free>:
 8012dc4:	4b02      	ldr	r3, [pc, #8]	; (8012dd0 <free+0xc>)
 8012dc6:	4601      	mov	r1, r0
 8012dc8:	6818      	ldr	r0, [r3, #0]
 8012dca:	f000 b817 	b.w	8012dfc <_free_r>
 8012dce:	bf00      	nop
 8012dd0:	20000030 	.word	0x20000030

08012dd4 <memcpy>:
 8012dd4:	b510      	push	{r4, lr}
 8012dd6:	1e43      	subs	r3, r0, #1
 8012dd8:	440a      	add	r2, r1
 8012dda:	4291      	cmp	r1, r2
 8012ddc:	d100      	bne.n	8012de0 <memcpy+0xc>
 8012dde:	bd10      	pop	{r4, pc}
 8012de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012de8:	e7f7      	b.n	8012dda <memcpy+0x6>

08012dea <memset>:
 8012dea:	4402      	add	r2, r0
 8012dec:	4603      	mov	r3, r0
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d100      	bne.n	8012df4 <memset+0xa>
 8012df2:	4770      	bx	lr
 8012df4:	f803 1b01 	strb.w	r1, [r3], #1
 8012df8:	e7f9      	b.n	8012dee <memset+0x4>
	...

08012dfc <_free_r>:
 8012dfc:	b538      	push	{r3, r4, r5, lr}
 8012dfe:	4605      	mov	r5, r0
 8012e00:	2900      	cmp	r1, #0
 8012e02:	d045      	beq.n	8012e90 <_free_r+0x94>
 8012e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e08:	1f0c      	subs	r4, r1, #4
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	bfb8      	it	lt
 8012e0e:	18e4      	addlt	r4, r4, r3
 8012e10:	f000 fbae 	bl	8013570 <__malloc_lock>
 8012e14:	4a1f      	ldr	r2, [pc, #124]	; (8012e94 <_free_r+0x98>)
 8012e16:	6813      	ldr	r3, [r2, #0]
 8012e18:	4610      	mov	r0, r2
 8012e1a:	b933      	cbnz	r3, 8012e2a <_free_r+0x2e>
 8012e1c:	6063      	str	r3, [r4, #4]
 8012e1e:	6014      	str	r4, [r2, #0]
 8012e20:	4628      	mov	r0, r5
 8012e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e26:	f000 bba4 	b.w	8013572 <__malloc_unlock>
 8012e2a:	42a3      	cmp	r3, r4
 8012e2c:	d90c      	bls.n	8012e48 <_free_r+0x4c>
 8012e2e:	6821      	ldr	r1, [r4, #0]
 8012e30:	1862      	adds	r2, r4, r1
 8012e32:	4293      	cmp	r3, r2
 8012e34:	bf04      	itt	eq
 8012e36:	681a      	ldreq	r2, [r3, #0]
 8012e38:	685b      	ldreq	r3, [r3, #4]
 8012e3a:	6063      	str	r3, [r4, #4]
 8012e3c:	bf04      	itt	eq
 8012e3e:	1852      	addeq	r2, r2, r1
 8012e40:	6022      	streq	r2, [r4, #0]
 8012e42:	6004      	str	r4, [r0, #0]
 8012e44:	e7ec      	b.n	8012e20 <_free_r+0x24>
 8012e46:	4613      	mov	r3, r2
 8012e48:	685a      	ldr	r2, [r3, #4]
 8012e4a:	b10a      	cbz	r2, 8012e50 <_free_r+0x54>
 8012e4c:	42a2      	cmp	r2, r4
 8012e4e:	d9fa      	bls.n	8012e46 <_free_r+0x4a>
 8012e50:	6819      	ldr	r1, [r3, #0]
 8012e52:	1858      	adds	r0, r3, r1
 8012e54:	42a0      	cmp	r0, r4
 8012e56:	d10b      	bne.n	8012e70 <_free_r+0x74>
 8012e58:	6820      	ldr	r0, [r4, #0]
 8012e5a:	4401      	add	r1, r0
 8012e5c:	1858      	adds	r0, r3, r1
 8012e5e:	4282      	cmp	r2, r0
 8012e60:	6019      	str	r1, [r3, #0]
 8012e62:	d1dd      	bne.n	8012e20 <_free_r+0x24>
 8012e64:	6810      	ldr	r0, [r2, #0]
 8012e66:	6852      	ldr	r2, [r2, #4]
 8012e68:	605a      	str	r2, [r3, #4]
 8012e6a:	4401      	add	r1, r0
 8012e6c:	6019      	str	r1, [r3, #0]
 8012e6e:	e7d7      	b.n	8012e20 <_free_r+0x24>
 8012e70:	d902      	bls.n	8012e78 <_free_r+0x7c>
 8012e72:	230c      	movs	r3, #12
 8012e74:	602b      	str	r3, [r5, #0]
 8012e76:	e7d3      	b.n	8012e20 <_free_r+0x24>
 8012e78:	6820      	ldr	r0, [r4, #0]
 8012e7a:	1821      	adds	r1, r4, r0
 8012e7c:	428a      	cmp	r2, r1
 8012e7e:	bf04      	itt	eq
 8012e80:	6811      	ldreq	r1, [r2, #0]
 8012e82:	6852      	ldreq	r2, [r2, #4]
 8012e84:	6062      	str	r2, [r4, #4]
 8012e86:	bf04      	itt	eq
 8012e88:	1809      	addeq	r1, r1, r0
 8012e8a:	6021      	streq	r1, [r4, #0]
 8012e8c:	605c      	str	r4, [r3, #4]
 8012e8e:	e7c7      	b.n	8012e20 <_free_r+0x24>
 8012e90:	bd38      	pop	{r3, r4, r5, pc}
 8012e92:	bf00      	nop
 8012e94:	20008478 	.word	0x20008478

08012e98 <_malloc_r>:
 8012e98:	b570      	push	{r4, r5, r6, lr}
 8012e9a:	1ccd      	adds	r5, r1, #3
 8012e9c:	f025 0503 	bic.w	r5, r5, #3
 8012ea0:	3508      	adds	r5, #8
 8012ea2:	2d0c      	cmp	r5, #12
 8012ea4:	bf38      	it	cc
 8012ea6:	250c      	movcc	r5, #12
 8012ea8:	2d00      	cmp	r5, #0
 8012eaa:	4606      	mov	r6, r0
 8012eac:	db01      	blt.n	8012eb2 <_malloc_r+0x1a>
 8012eae:	42a9      	cmp	r1, r5
 8012eb0:	d903      	bls.n	8012eba <_malloc_r+0x22>
 8012eb2:	230c      	movs	r3, #12
 8012eb4:	6033      	str	r3, [r6, #0]
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	bd70      	pop	{r4, r5, r6, pc}
 8012eba:	f000 fb59 	bl	8013570 <__malloc_lock>
 8012ebe:	4a21      	ldr	r2, [pc, #132]	; (8012f44 <_malloc_r+0xac>)
 8012ec0:	6814      	ldr	r4, [r2, #0]
 8012ec2:	4621      	mov	r1, r4
 8012ec4:	b991      	cbnz	r1, 8012eec <_malloc_r+0x54>
 8012ec6:	4c20      	ldr	r4, [pc, #128]	; (8012f48 <_malloc_r+0xb0>)
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	b91b      	cbnz	r3, 8012ed4 <_malloc_r+0x3c>
 8012ecc:	4630      	mov	r0, r6
 8012ece:	f000 f8a1 	bl	8013014 <_sbrk_r>
 8012ed2:	6020      	str	r0, [r4, #0]
 8012ed4:	4629      	mov	r1, r5
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	f000 f89c 	bl	8013014 <_sbrk_r>
 8012edc:	1c43      	adds	r3, r0, #1
 8012ede:	d124      	bne.n	8012f2a <_malloc_r+0x92>
 8012ee0:	230c      	movs	r3, #12
 8012ee2:	6033      	str	r3, [r6, #0]
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	f000 fb44 	bl	8013572 <__malloc_unlock>
 8012eea:	e7e4      	b.n	8012eb6 <_malloc_r+0x1e>
 8012eec:	680b      	ldr	r3, [r1, #0]
 8012eee:	1b5b      	subs	r3, r3, r5
 8012ef0:	d418      	bmi.n	8012f24 <_malloc_r+0x8c>
 8012ef2:	2b0b      	cmp	r3, #11
 8012ef4:	d90f      	bls.n	8012f16 <_malloc_r+0x7e>
 8012ef6:	600b      	str	r3, [r1, #0]
 8012ef8:	50cd      	str	r5, [r1, r3]
 8012efa:	18cc      	adds	r4, r1, r3
 8012efc:	4630      	mov	r0, r6
 8012efe:	f000 fb38 	bl	8013572 <__malloc_unlock>
 8012f02:	f104 000b 	add.w	r0, r4, #11
 8012f06:	1d23      	adds	r3, r4, #4
 8012f08:	f020 0007 	bic.w	r0, r0, #7
 8012f0c:	1ac3      	subs	r3, r0, r3
 8012f0e:	d0d3      	beq.n	8012eb8 <_malloc_r+0x20>
 8012f10:	425a      	negs	r2, r3
 8012f12:	50e2      	str	r2, [r4, r3]
 8012f14:	e7d0      	b.n	8012eb8 <_malloc_r+0x20>
 8012f16:	428c      	cmp	r4, r1
 8012f18:	684b      	ldr	r3, [r1, #4]
 8012f1a:	bf16      	itet	ne
 8012f1c:	6063      	strne	r3, [r4, #4]
 8012f1e:	6013      	streq	r3, [r2, #0]
 8012f20:	460c      	movne	r4, r1
 8012f22:	e7eb      	b.n	8012efc <_malloc_r+0x64>
 8012f24:	460c      	mov	r4, r1
 8012f26:	6849      	ldr	r1, [r1, #4]
 8012f28:	e7cc      	b.n	8012ec4 <_malloc_r+0x2c>
 8012f2a:	1cc4      	adds	r4, r0, #3
 8012f2c:	f024 0403 	bic.w	r4, r4, #3
 8012f30:	42a0      	cmp	r0, r4
 8012f32:	d005      	beq.n	8012f40 <_malloc_r+0xa8>
 8012f34:	1a21      	subs	r1, r4, r0
 8012f36:	4630      	mov	r0, r6
 8012f38:	f000 f86c 	bl	8013014 <_sbrk_r>
 8012f3c:	3001      	adds	r0, #1
 8012f3e:	d0cf      	beq.n	8012ee0 <_malloc_r+0x48>
 8012f40:	6025      	str	r5, [r4, #0]
 8012f42:	e7db      	b.n	8012efc <_malloc_r+0x64>
 8012f44:	20008478 	.word	0x20008478
 8012f48:	2000847c 	.word	0x2000847c

08012f4c <_puts_r>:
 8012f4c:	b570      	push	{r4, r5, r6, lr}
 8012f4e:	460e      	mov	r6, r1
 8012f50:	4605      	mov	r5, r0
 8012f52:	b118      	cbz	r0, 8012f5c <_puts_r+0x10>
 8012f54:	6983      	ldr	r3, [r0, #24]
 8012f56:	b90b      	cbnz	r3, 8012f5c <_puts_r+0x10>
 8012f58:	f000 fa1c 	bl	8013394 <__sinit>
 8012f5c:	69ab      	ldr	r3, [r5, #24]
 8012f5e:	68ac      	ldr	r4, [r5, #8]
 8012f60:	b913      	cbnz	r3, 8012f68 <_puts_r+0x1c>
 8012f62:	4628      	mov	r0, r5
 8012f64:	f000 fa16 	bl	8013394 <__sinit>
 8012f68:	4b23      	ldr	r3, [pc, #140]	; (8012ff8 <_puts_r+0xac>)
 8012f6a:	429c      	cmp	r4, r3
 8012f6c:	d117      	bne.n	8012f9e <_puts_r+0x52>
 8012f6e:	686c      	ldr	r4, [r5, #4]
 8012f70:	89a3      	ldrh	r3, [r4, #12]
 8012f72:	071b      	lsls	r3, r3, #28
 8012f74:	d51d      	bpl.n	8012fb2 <_puts_r+0x66>
 8012f76:	6923      	ldr	r3, [r4, #16]
 8012f78:	b1db      	cbz	r3, 8012fb2 <_puts_r+0x66>
 8012f7a:	3e01      	subs	r6, #1
 8012f7c:	68a3      	ldr	r3, [r4, #8]
 8012f7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012f82:	3b01      	subs	r3, #1
 8012f84:	60a3      	str	r3, [r4, #8]
 8012f86:	b9e9      	cbnz	r1, 8012fc4 <_puts_r+0x78>
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	da2e      	bge.n	8012fea <_puts_r+0x9e>
 8012f8c:	4622      	mov	r2, r4
 8012f8e:	210a      	movs	r1, #10
 8012f90:	4628      	mov	r0, r5
 8012f92:	f000 f84f 	bl	8013034 <__swbuf_r>
 8012f96:	3001      	adds	r0, #1
 8012f98:	d011      	beq.n	8012fbe <_puts_r+0x72>
 8012f9a:	200a      	movs	r0, #10
 8012f9c:	e011      	b.n	8012fc2 <_puts_r+0x76>
 8012f9e:	4b17      	ldr	r3, [pc, #92]	; (8012ffc <_puts_r+0xb0>)
 8012fa0:	429c      	cmp	r4, r3
 8012fa2:	d101      	bne.n	8012fa8 <_puts_r+0x5c>
 8012fa4:	68ac      	ldr	r4, [r5, #8]
 8012fa6:	e7e3      	b.n	8012f70 <_puts_r+0x24>
 8012fa8:	4b15      	ldr	r3, [pc, #84]	; (8013000 <_puts_r+0xb4>)
 8012faa:	429c      	cmp	r4, r3
 8012fac:	bf08      	it	eq
 8012fae:	68ec      	ldreq	r4, [r5, #12]
 8012fb0:	e7de      	b.n	8012f70 <_puts_r+0x24>
 8012fb2:	4621      	mov	r1, r4
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	f000 f88f 	bl	80130d8 <__swsetup_r>
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d0dd      	beq.n	8012f7a <_puts_r+0x2e>
 8012fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8012fc2:	bd70      	pop	{r4, r5, r6, pc}
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	da04      	bge.n	8012fd2 <_puts_r+0x86>
 8012fc8:	69a2      	ldr	r2, [r4, #24]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	dc06      	bgt.n	8012fdc <_puts_r+0x90>
 8012fce:	290a      	cmp	r1, #10
 8012fd0:	d004      	beq.n	8012fdc <_puts_r+0x90>
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	1c5a      	adds	r2, r3, #1
 8012fd6:	6022      	str	r2, [r4, #0]
 8012fd8:	7019      	strb	r1, [r3, #0]
 8012fda:	e7cf      	b.n	8012f7c <_puts_r+0x30>
 8012fdc:	4622      	mov	r2, r4
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f000 f828 	bl	8013034 <__swbuf_r>
 8012fe4:	3001      	adds	r0, #1
 8012fe6:	d1c9      	bne.n	8012f7c <_puts_r+0x30>
 8012fe8:	e7e9      	b.n	8012fbe <_puts_r+0x72>
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	200a      	movs	r0, #10
 8012fee:	1c5a      	adds	r2, r3, #1
 8012ff0:	6022      	str	r2, [r4, #0]
 8012ff2:	7018      	strb	r0, [r3, #0]
 8012ff4:	e7e5      	b.n	8012fc2 <_puts_r+0x76>
 8012ff6:	bf00      	nop
 8012ff8:	080137c4 	.word	0x080137c4
 8012ffc:	080137e4 	.word	0x080137e4
 8013000:	080137a4 	.word	0x080137a4

08013004 <puts>:
 8013004:	4b02      	ldr	r3, [pc, #8]	; (8013010 <puts+0xc>)
 8013006:	4601      	mov	r1, r0
 8013008:	6818      	ldr	r0, [r3, #0]
 801300a:	f7ff bf9f 	b.w	8012f4c <_puts_r>
 801300e:	bf00      	nop
 8013010:	20000030 	.word	0x20000030

08013014 <_sbrk_r>:
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	4c06      	ldr	r4, [pc, #24]	; (8013030 <_sbrk_r+0x1c>)
 8013018:	2300      	movs	r3, #0
 801301a:	4605      	mov	r5, r0
 801301c:	4608      	mov	r0, r1
 801301e:	6023      	str	r3, [r4, #0]
 8013020:	f7ef f998 	bl	8002354 <_sbrk>
 8013024:	1c43      	adds	r3, r0, #1
 8013026:	d102      	bne.n	801302e <_sbrk_r+0x1a>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	b103      	cbz	r3, 801302e <_sbrk_r+0x1a>
 801302c:	602b      	str	r3, [r5, #0]
 801302e:	bd38      	pop	{r3, r4, r5, pc}
 8013030:	200097bc 	.word	0x200097bc

08013034 <__swbuf_r>:
 8013034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013036:	460e      	mov	r6, r1
 8013038:	4614      	mov	r4, r2
 801303a:	4605      	mov	r5, r0
 801303c:	b118      	cbz	r0, 8013046 <__swbuf_r+0x12>
 801303e:	6983      	ldr	r3, [r0, #24]
 8013040:	b90b      	cbnz	r3, 8013046 <__swbuf_r+0x12>
 8013042:	f000 f9a7 	bl	8013394 <__sinit>
 8013046:	4b21      	ldr	r3, [pc, #132]	; (80130cc <__swbuf_r+0x98>)
 8013048:	429c      	cmp	r4, r3
 801304a:	d12a      	bne.n	80130a2 <__swbuf_r+0x6e>
 801304c:	686c      	ldr	r4, [r5, #4]
 801304e:	69a3      	ldr	r3, [r4, #24]
 8013050:	60a3      	str	r3, [r4, #8]
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	071a      	lsls	r2, r3, #28
 8013056:	d52e      	bpl.n	80130b6 <__swbuf_r+0x82>
 8013058:	6923      	ldr	r3, [r4, #16]
 801305a:	b363      	cbz	r3, 80130b6 <__swbuf_r+0x82>
 801305c:	6923      	ldr	r3, [r4, #16]
 801305e:	6820      	ldr	r0, [r4, #0]
 8013060:	1ac0      	subs	r0, r0, r3
 8013062:	6963      	ldr	r3, [r4, #20]
 8013064:	b2f6      	uxtb	r6, r6
 8013066:	4283      	cmp	r3, r0
 8013068:	4637      	mov	r7, r6
 801306a:	dc04      	bgt.n	8013076 <__swbuf_r+0x42>
 801306c:	4621      	mov	r1, r4
 801306e:	4628      	mov	r0, r5
 8013070:	f000 f926 	bl	80132c0 <_fflush_r>
 8013074:	bb28      	cbnz	r0, 80130c2 <__swbuf_r+0x8e>
 8013076:	68a3      	ldr	r3, [r4, #8]
 8013078:	3b01      	subs	r3, #1
 801307a:	60a3      	str	r3, [r4, #8]
 801307c:	6823      	ldr	r3, [r4, #0]
 801307e:	1c5a      	adds	r2, r3, #1
 8013080:	6022      	str	r2, [r4, #0]
 8013082:	701e      	strb	r6, [r3, #0]
 8013084:	6963      	ldr	r3, [r4, #20]
 8013086:	3001      	adds	r0, #1
 8013088:	4283      	cmp	r3, r0
 801308a:	d004      	beq.n	8013096 <__swbuf_r+0x62>
 801308c:	89a3      	ldrh	r3, [r4, #12]
 801308e:	07db      	lsls	r3, r3, #31
 8013090:	d519      	bpl.n	80130c6 <__swbuf_r+0x92>
 8013092:	2e0a      	cmp	r6, #10
 8013094:	d117      	bne.n	80130c6 <__swbuf_r+0x92>
 8013096:	4621      	mov	r1, r4
 8013098:	4628      	mov	r0, r5
 801309a:	f000 f911 	bl	80132c0 <_fflush_r>
 801309e:	b190      	cbz	r0, 80130c6 <__swbuf_r+0x92>
 80130a0:	e00f      	b.n	80130c2 <__swbuf_r+0x8e>
 80130a2:	4b0b      	ldr	r3, [pc, #44]	; (80130d0 <__swbuf_r+0x9c>)
 80130a4:	429c      	cmp	r4, r3
 80130a6:	d101      	bne.n	80130ac <__swbuf_r+0x78>
 80130a8:	68ac      	ldr	r4, [r5, #8]
 80130aa:	e7d0      	b.n	801304e <__swbuf_r+0x1a>
 80130ac:	4b09      	ldr	r3, [pc, #36]	; (80130d4 <__swbuf_r+0xa0>)
 80130ae:	429c      	cmp	r4, r3
 80130b0:	bf08      	it	eq
 80130b2:	68ec      	ldreq	r4, [r5, #12]
 80130b4:	e7cb      	b.n	801304e <__swbuf_r+0x1a>
 80130b6:	4621      	mov	r1, r4
 80130b8:	4628      	mov	r0, r5
 80130ba:	f000 f80d 	bl	80130d8 <__swsetup_r>
 80130be:	2800      	cmp	r0, #0
 80130c0:	d0cc      	beq.n	801305c <__swbuf_r+0x28>
 80130c2:	f04f 37ff 	mov.w	r7, #4294967295
 80130c6:	4638      	mov	r0, r7
 80130c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130ca:	bf00      	nop
 80130cc:	080137c4 	.word	0x080137c4
 80130d0:	080137e4 	.word	0x080137e4
 80130d4:	080137a4 	.word	0x080137a4

080130d8 <__swsetup_r>:
 80130d8:	4b32      	ldr	r3, [pc, #200]	; (80131a4 <__swsetup_r+0xcc>)
 80130da:	b570      	push	{r4, r5, r6, lr}
 80130dc:	681d      	ldr	r5, [r3, #0]
 80130de:	4606      	mov	r6, r0
 80130e0:	460c      	mov	r4, r1
 80130e2:	b125      	cbz	r5, 80130ee <__swsetup_r+0x16>
 80130e4:	69ab      	ldr	r3, [r5, #24]
 80130e6:	b913      	cbnz	r3, 80130ee <__swsetup_r+0x16>
 80130e8:	4628      	mov	r0, r5
 80130ea:	f000 f953 	bl	8013394 <__sinit>
 80130ee:	4b2e      	ldr	r3, [pc, #184]	; (80131a8 <__swsetup_r+0xd0>)
 80130f0:	429c      	cmp	r4, r3
 80130f2:	d10f      	bne.n	8013114 <__swsetup_r+0x3c>
 80130f4:	686c      	ldr	r4, [r5, #4]
 80130f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	0715      	lsls	r5, r2, #28
 80130fe:	d42c      	bmi.n	801315a <__swsetup_r+0x82>
 8013100:	06d0      	lsls	r0, r2, #27
 8013102:	d411      	bmi.n	8013128 <__swsetup_r+0x50>
 8013104:	2209      	movs	r2, #9
 8013106:	6032      	str	r2, [r6, #0]
 8013108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	f04f 30ff 	mov.w	r0, #4294967295
 8013112:	e03e      	b.n	8013192 <__swsetup_r+0xba>
 8013114:	4b25      	ldr	r3, [pc, #148]	; (80131ac <__swsetup_r+0xd4>)
 8013116:	429c      	cmp	r4, r3
 8013118:	d101      	bne.n	801311e <__swsetup_r+0x46>
 801311a:	68ac      	ldr	r4, [r5, #8]
 801311c:	e7eb      	b.n	80130f6 <__swsetup_r+0x1e>
 801311e:	4b24      	ldr	r3, [pc, #144]	; (80131b0 <__swsetup_r+0xd8>)
 8013120:	429c      	cmp	r4, r3
 8013122:	bf08      	it	eq
 8013124:	68ec      	ldreq	r4, [r5, #12]
 8013126:	e7e6      	b.n	80130f6 <__swsetup_r+0x1e>
 8013128:	0751      	lsls	r1, r2, #29
 801312a:	d512      	bpl.n	8013152 <__swsetup_r+0x7a>
 801312c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801312e:	b141      	cbz	r1, 8013142 <__swsetup_r+0x6a>
 8013130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013134:	4299      	cmp	r1, r3
 8013136:	d002      	beq.n	801313e <__swsetup_r+0x66>
 8013138:	4630      	mov	r0, r6
 801313a:	f7ff fe5f 	bl	8012dfc <_free_r>
 801313e:	2300      	movs	r3, #0
 8013140:	6363      	str	r3, [r4, #52]	; 0x34
 8013142:	89a3      	ldrh	r3, [r4, #12]
 8013144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013148:	81a3      	strh	r3, [r4, #12]
 801314a:	2300      	movs	r3, #0
 801314c:	6063      	str	r3, [r4, #4]
 801314e:	6923      	ldr	r3, [r4, #16]
 8013150:	6023      	str	r3, [r4, #0]
 8013152:	89a3      	ldrh	r3, [r4, #12]
 8013154:	f043 0308 	orr.w	r3, r3, #8
 8013158:	81a3      	strh	r3, [r4, #12]
 801315a:	6923      	ldr	r3, [r4, #16]
 801315c:	b94b      	cbnz	r3, 8013172 <__swsetup_r+0x9a>
 801315e:	89a3      	ldrh	r3, [r4, #12]
 8013160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013168:	d003      	beq.n	8013172 <__swsetup_r+0x9a>
 801316a:	4621      	mov	r1, r4
 801316c:	4630      	mov	r0, r6
 801316e:	f000 f9bf 	bl	80134f0 <__smakebuf_r>
 8013172:	89a2      	ldrh	r2, [r4, #12]
 8013174:	f012 0301 	ands.w	r3, r2, #1
 8013178:	d00c      	beq.n	8013194 <__swsetup_r+0xbc>
 801317a:	2300      	movs	r3, #0
 801317c:	60a3      	str	r3, [r4, #8]
 801317e:	6963      	ldr	r3, [r4, #20]
 8013180:	425b      	negs	r3, r3
 8013182:	61a3      	str	r3, [r4, #24]
 8013184:	6923      	ldr	r3, [r4, #16]
 8013186:	b953      	cbnz	r3, 801319e <__swsetup_r+0xc6>
 8013188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801318c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013190:	d1ba      	bne.n	8013108 <__swsetup_r+0x30>
 8013192:	bd70      	pop	{r4, r5, r6, pc}
 8013194:	0792      	lsls	r2, r2, #30
 8013196:	bf58      	it	pl
 8013198:	6963      	ldrpl	r3, [r4, #20]
 801319a:	60a3      	str	r3, [r4, #8]
 801319c:	e7f2      	b.n	8013184 <__swsetup_r+0xac>
 801319e:	2000      	movs	r0, #0
 80131a0:	e7f7      	b.n	8013192 <__swsetup_r+0xba>
 80131a2:	bf00      	nop
 80131a4:	20000030 	.word	0x20000030
 80131a8:	080137c4 	.word	0x080137c4
 80131ac:	080137e4 	.word	0x080137e4
 80131b0:	080137a4 	.word	0x080137a4

080131b4 <__sflush_r>:
 80131b4:	898a      	ldrh	r2, [r1, #12]
 80131b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ba:	4605      	mov	r5, r0
 80131bc:	0710      	lsls	r0, r2, #28
 80131be:	460c      	mov	r4, r1
 80131c0:	d458      	bmi.n	8013274 <__sflush_r+0xc0>
 80131c2:	684b      	ldr	r3, [r1, #4]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	dc05      	bgt.n	80131d4 <__sflush_r+0x20>
 80131c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	dc02      	bgt.n	80131d4 <__sflush_r+0x20>
 80131ce:	2000      	movs	r0, #0
 80131d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131d6:	2e00      	cmp	r6, #0
 80131d8:	d0f9      	beq.n	80131ce <__sflush_r+0x1a>
 80131da:	2300      	movs	r3, #0
 80131dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80131e0:	682f      	ldr	r7, [r5, #0]
 80131e2:	6a21      	ldr	r1, [r4, #32]
 80131e4:	602b      	str	r3, [r5, #0]
 80131e6:	d032      	beq.n	801324e <__sflush_r+0x9a>
 80131e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80131ea:	89a3      	ldrh	r3, [r4, #12]
 80131ec:	075a      	lsls	r2, r3, #29
 80131ee:	d505      	bpl.n	80131fc <__sflush_r+0x48>
 80131f0:	6863      	ldr	r3, [r4, #4]
 80131f2:	1ac0      	subs	r0, r0, r3
 80131f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80131f6:	b10b      	cbz	r3, 80131fc <__sflush_r+0x48>
 80131f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80131fa:	1ac0      	subs	r0, r0, r3
 80131fc:	2300      	movs	r3, #0
 80131fe:	4602      	mov	r2, r0
 8013200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013202:	6a21      	ldr	r1, [r4, #32]
 8013204:	4628      	mov	r0, r5
 8013206:	47b0      	blx	r6
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	89a3      	ldrh	r3, [r4, #12]
 801320c:	d106      	bne.n	801321c <__sflush_r+0x68>
 801320e:	6829      	ldr	r1, [r5, #0]
 8013210:	291d      	cmp	r1, #29
 8013212:	d848      	bhi.n	80132a6 <__sflush_r+0xf2>
 8013214:	4a29      	ldr	r2, [pc, #164]	; (80132bc <__sflush_r+0x108>)
 8013216:	40ca      	lsrs	r2, r1
 8013218:	07d6      	lsls	r6, r2, #31
 801321a:	d544      	bpl.n	80132a6 <__sflush_r+0xf2>
 801321c:	2200      	movs	r2, #0
 801321e:	6062      	str	r2, [r4, #4]
 8013220:	04d9      	lsls	r1, r3, #19
 8013222:	6922      	ldr	r2, [r4, #16]
 8013224:	6022      	str	r2, [r4, #0]
 8013226:	d504      	bpl.n	8013232 <__sflush_r+0x7e>
 8013228:	1c42      	adds	r2, r0, #1
 801322a:	d101      	bne.n	8013230 <__sflush_r+0x7c>
 801322c:	682b      	ldr	r3, [r5, #0]
 801322e:	b903      	cbnz	r3, 8013232 <__sflush_r+0x7e>
 8013230:	6560      	str	r0, [r4, #84]	; 0x54
 8013232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013234:	602f      	str	r7, [r5, #0]
 8013236:	2900      	cmp	r1, #0
 8013238:	d0c9      	beq.n	80131ce <__sflush_r+0x1a>
 801323a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801323e:	4299      	cmp	r1, r3
 8013240:	d002      	beq.n	8013248 <__sflush_r+0x94>
 8013242:	4628      	mov	r0, r5
 8013244:	f7ff fdda 	bl	8012dfc <_free_r>
 8013248:	2000      	movs	r0, #0
 801324a:	6360      	str	r0, [r4, #52]	; 0x34
 801324c:	e7c0      	b.n	80131d0 <__sflush_r+0x1c>
 801324e:	2301      	movs	r3, #1
 8013250:	4628      	mov	r0, r5
 8013252:	47b0      	blx	r6
 8013254:	1c41      	adds	r1, r0, #1
 8013256:	d1c8      	bne.n	80131ea <__sflush_r+0x36>
 8013258:	682b      	ldr	r3, [r5, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d0c5      	beq.n	80131ea <__sflush_r+0x36>
 801325e:	2b1d      	cmp	r3, #29
 8013260:	d001      	beq.n	8013266 <__sflush_r+0xb2>
 8013262:	2b16      	cmp	r3, #22
 8013264:	d101      	bne.n	801326a <__sflush_r+0xb6>
 8013266:	602f      	str	r7, [r5, #0]
 8013268:	e7b1      	b.n	80131ce <__sflush_r+0x1a>
 801326a:	89a3      	ldrh	r3, [r4, #12]
 801326c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013270:	81a3      	strh	r3, [r4, #12]
 8013272:	e7ad      	b.n	80131d0 <__sflush_r+0x1c>
 8013274:	690f      	ldr	r7, [r1, #16]
 8013276:	2f00      	cmp	r7, #0
 8013278:	d0a9      	beq.n	80131ce <__sflush_r+0x1a>
 801327a:	0793      	lsls	r3, r2, #30
 801327c:	680e      	ldr	r6, [r1, #0]
 801327e:	bf08      	it	eq
 8013280:	694b      	ldreq	r3, [r1, #20]
 8013282:	600f      	str	r7, [r1, #0]
 8013284:	bf18      	it	ne
 8013286:	2300      	movne	r3, #0
 8013288:	eba6 0807 	sub.w	r8, r6, r7
 801328c:	608b      	str	r3, [r1, #8]
 801328e:	f1b8 0f00 	cmp.w	r8, #0
 8013292:	dd9c      	ble.n	80131ce <__sflush_r+0x1a>
 8013294:	4643      	mov	r3, r8
 8013296:	463a      	mov	r2, r7
 8013298:	6a21      	ldr	r1, [r4, #32]
 801329a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801329c:	4628      	mov	r0, r5
 801329e:	47b0      	blx	r6
 80132a0:	2800      	cmp	r0, #0
 80132a2:	dc06      	bgt.n	80132b2 <__sflush_r+0xfe>
 80132a4:	89a3      	ldrh	r3, [r4, #12]
 80132a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132aa:	81a3      	strh	r3, [r4, #12]
 80132ac:	f04f 30ff 	mov.w	r0, #4294967295
 80132b0:	e78e      	b.n	80131d0 <__sflush_r+0x1c>
 80132b2:	4407      	add	r7, r0
 80132b4:	eba8 0800 	sub.w	r8, r8, r0
 80132b8:	e7e9      	b.n	801328e <__sflush_r+0xda>
 80132ba:	bf00      	nop
 80132bc:	20400001 	.word	0x20400001

080132c0 <_fflush_r>:
 80132c0:	b538      	push	{r3, r4, r5, lr}
 80132c2:	690b      	ldr	r3, [r1, #16]
 80132c4:	4605      	mov	r5, r0
 80132c6:	460c      	mov	r4, r1
 80132c8:	b1db      	cbz	r3, 8013302 <_fflush_r+0x42>
 80132ca:	b118      	cbz	r0, 80132d4 <_fflush_r+0x14>
 80132cc:	6983      	ldr	r3, [r0, #24]
 80132ce:	b90b      	cbnz	r3, 80132d4 <_fflush_r+0x14>
 80132d0:	f000 f860 	bl	8013394 <__sinit>
 80132d4:	4b0c      	ldr	r3, [pc, #48]	; (8013308 <_fflush_r+0x48>)
 80132d6:	429c      	cmp	r4, r3
 80132d8:	d109      	bne.n	80132ee <_fflush_r+0x2e>
 80132da:	686c      	ldr	r4, [r5, #4]
 80132dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132e0:	b17b      	cbz	r3, 8013302 <_fflush_r+0x42>
 80132e2:	4621      	mov	r1, r4
 80132e4:	4628      	mov	r0, r5
 80132e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132ea:	f7ff bf63 	b.w	80131b4 <__sflush_r>
 80132ee:	4b07      	ldr	r3, [pc, #28]	; (801330c <_fflush_r+0x4c>)
 80132f0:	429c      	cmp	r4, r3
 80132f2:	d101      	bne.n	80132f8 <_fflush_r+0x38>
 80132f4:	68ac      	ldr	r4, [r5, #8]
 80132f6:	e7f1      	b.n	80132dc <_fflush_r+0x1c>
 80132f8:	4b05      	ldr	r3, [pc, #20]	; (8013310 <_fflush_r+0x50>)
 80132fa:	429c      	cmp	r4, r3
 80132fc:	bf08      	it	eq
 80132fe:	68ec      	ldreq	r4, [r5, #12]
 8013300:	e7ec      	b.n	80132dc <_fflush_r+0x1c>
 8013302:	2000      	movs	r0, #0
 8013304:	bd38      	pop	{r3, r4, r5, pc}
 8013306:	bf00      	nop
 8013308:	080137c4 	.word	0x080137c4
 801330c:	080137e4 	.word	0x080137e4
 8013310:	080137a4 	.word	0x080137a4

08013314 <std>:
 8013314:	2300      	movs	r3, #0
 8013316:	b510      	push	{r4, lr}
 8013318:	4604      	mov	r4, r0
 801331a:	e9c0 3300 	strd	r3, r3, [r0]
 801331e:	6083      	str	r3, [r0, #8]
 8013320:	8181      	strh	r1, [r0, #12]
 8013322:	6643      	str	r3, [r0, #100]	; 0x64
 8013324:	81c2      	strh	r2, [r0, #14]
 8013326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801332a:	6183      	str	r3, [r0, #24]
 801332c:	4619      	mov	r1, r3
 801332e:	2208      	movs	r2, #8
 8013330:	305c      	adds	r0, #92	; 0x5c
 8013332:	f7ff fd5a 	bl	8012dea <memset>
 8013336:	4b05      	ldr	r3, [pc, #20]	; (801334c <std+0x38>)
 8013338:	6263      	str	r3, [r4, #36]	; 0x24
 801333a:	4b05      	ldr	r3, [pc, #20]	; (8013350 <std+0x3c>)
 801333c:	62a3      	str	r3, [r4, #40]	; 0x28
 801333e:	4b05      	ldr	r3, [pc, #20]	; (8013354 <std+0x40>)
 8013340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013342:	4b05      	ldr	r3, [pc, #20]	; (8013358 <std+0x44>)
 8013344:	6224      	str	r4, [r4, #32]
 8013346:	6323      	str	r3, [r4, #48]	; 0x30
 8013348:	bd10      	pop	{r4, pc}
 801334a:	bf00      	nop
 801334c:	08013575 	.word	0x08013575
 8013350:	08013597 	.word	0x08013597
 8013354:	080135cf 	.word	0x080135cf
 8013358:	080135f3 	.word	0x080135f3

0801335c <_cleanup_r>:
 801335c:	4901      	ldr	r1, [pc, #4]	; (8013364 <_cleanup_r+0x8>)
 801335e:	f000 b885 	b.w	801346c <_fwalk_reent>
 8013362:	bf00      	nop
 8013364:	080132c1 	.word	0x080132c1

08013368 <__sfmoreglue>:
 8013368:	b570      	push	{r4, r5, r6, lr}
 801336a:	1e4a      	subs	r2, r1, #1
 801336c:	2568      	movs	r5, #104	; 0x68
 801336e:	4355      	muls	r5, r2
 8013370:	460e      	mov	r6, r1
 8013372:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013376:	f7ff fd8f 	bl	8012e98 <_malloc_r>
 801337a:	4604      	mov	r4, r0
 801337c:	b140      	cbz	r0, 8013390 <__sfmoreglue+0x28>
 801337e:	2100      	movs	r1, #0
 8013380:	e9c0 1600 	strd	r1, r6, [r0]
 8013384:	300c      	adds	r0, #12
 8013386:	60a0      	str	r0, [r4, #8]
 8013388:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801338c:	f7ff fd2d 	bl	8012dea <memset>
 8013390:	4620      	mov	r0, r4
 8013392:	bd70      	pop	{r4, r5, r6, pc}

08013394 <__sinit>:
 8013394:	6983      	ldr	r3, [r0, #24]
 8013396:	b510      	push	{r4, lr}
 8013398:	4604      	mov	r4, r0
 801339a:	bb33      	cbnz	r3, 80133ea <__sinit+0x56>
 801339c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80133a0:	6503      	str	r3, [r0, #80]	; 0x50
 80133a2:	4b12      	ldr	r3, [pc, #72]	; (80133ec <__sinit+0x58>)
 80133a4:	4a12      	ldr	r2, [pc, #72]	; (80133f0 <__sinit+0x5c>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	6282      	str	r2, [r0, #40]	; 0x28
 80133aa:	4298      	cmp	r0, r3
 80133ac:	bf04      	itt	eq
 80133ae:	2301      	moveq	r3, #1
 80133b0:	6183      	streq	r3, [r0, #24]
 80133b2:	f000 f81f 	bl	80133f4 <__sfp>
 80133b6:	6060      	str	r0, [r4, #4]
 80133b8:	4620      	mov	r0, r4
 80133ba:	f000 f81b 	bl	80133f4 <__sfp>
 80133be:	60a0      	str	r0, [r4, #8]
 80133c0:	4620      	mov	r0, r4
 80133c2:	f000 f817 	bl	80133f4 <__sfp>
 80133c6:	2200      	movs	r2, #0
 80133c8:	60e0      	str	r0, [r4, #12]
 80133ca:	2104      	movs	r1, #4
 80133cc:	6860      	ldr	r0, [r4, #4]
 80133ce:	f7ff ffa1 	bl	8013314 <std>
 80133d2:	2201      	movs	r2, #1
 80133d4:	2109      	movs	r1, #9
 80133d6:	68a0      	ldr	r0, [r4, #8]
 80133d8:	f7ff ff9c 	bl	8013314 <std>
 80133dc:	2202      	movs	r2, #2
 80133de:	2112      	movs	r1, #18
 80133e0:	68e0      	ldr	r0, [r4, #12]
 80133e2:	f7ff ff97 	bl	8013314 <std>
 80133e6:	2301      	movs	r3, #1
 80133e8:	61a3      	str	r3, [r4, #24]
 80133ea:	bd10      	pop	{r4, pc}
 80133ec:	080137a0 	.word	0x080137a0
 80133f0:	0801335d 	.word	0x0801335d

080133f4 <__sfp>:
 80133f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133f6:	4b1b      	ldr	r3, [pc, #108]	; (8013464 <__sfp+0x70>)
 80133f8:	681e      	ldr	r6, [r3, #0]
 80133fa:	69b3      	ldr	r3, [r6, #24]
 80133fc:	4607      	mov	r7, r0
 80133fe:	b913      	cbnz	r3, 8013406 <__sfp+0x12>
 8013400:	4630      	mov	r0, r6
 8013402:	f7ff ffc7 	bl	8013394 <__sinit>
 8013406:	3648      	adds	r6, #72	; 0x48
 8013408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801340c:	3b01      	subs	r3, #1
 801340e:	d503      	bpl.n	8013418 <__sfp+0x24>
 8013410:	6833      	ldr	r3, [r6, #0]
 8013412:	b133      	cbz	r3, 8013422 <__sfp+0x2e>
 8013414:	6836      	ldr	r6, [r6, #0]
 8013416:	e7f7      	b.n	8013408 <__sfp+0x14>
 8013418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801341c:	b16d      	cbz	r5, 801343a <__sfp+0x46>
 801341e:	3468      	adds	r4, #104	; 0x68
 8013420:	e7f4      	b.n	801340c <__sfp+0x18>
 8013422:	2104      	movs	r1, #4
 8013424:	4638      	mov	r0, r7
 8013426:	f7ff ff9f 	bl	8013368 <__sfmoreglue>
 801342a:	6030      	str	r0, [r6, #0]
 801342c:	2800      	cmp	r0, #0
 801342e:	d1f1      	bne.n	8013414 <__sfp+0x20>
 8013430:	230c      	movs	r3, #12
 8013432:	603b      	str	r3, [r7, #0]
 8013434:	4604      	mov	r4, r0
 8013436:	4620      	mov	r0, r4
 8013438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801343a:	4b0b      	ldr	r3, [pc, #44]	; (8013468 <__sfp+0x74>)
 801343c:	6665      	str	r5, [r4, #100]	; 0x64
 801343e:	e9c4 5500 	strd	r5, r5, [r4]
 8013442:	60a5      	str	r5, [r4, #8]
 8013444:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013448:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801344c:	2208      	movs	r2, #8
 801344e:	4629      	mov	r1, r5
 8013450:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013454:	f7ff fcc9 	bl	8012dea <memset>
 8013458:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801345c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013460:	e7e9      	b.n	8013436 <__sfp+0x42>
 8013462:	bf00      	nop
 8013464:	080137a0 	.word	0x080137a0
 8013468:	ffff0001 	.word	0xffff0001

0801346c <_fwalk_reent>:
 801346c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013470:	4680      	mov	r8, r0
 8013472:	4689      	mov	r9, r1
 8013474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013478:	2600      	movs	r6, #0
 801347a:	b914      	cbnz	r4, 8013482 <_fwalk_reent+0x16>
 801347c:	4630      	mov	r0, r6
 801347e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013482:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013486:	3f01      	subs	r7, #1
 8013488:	d501      	bpl.n	801348e <_fwalk_reent+0x22>
 801348a:	6824      	ldr	r4, [r4, #0]
 801348c:	e7f5      	b.n	801347a <_fwalk_reent+0xe>
 801348e:	89ab      	ldrh	r3, [r5, #12]
 8013490:	2b01      	cmp	r3, #1
 8013492:	d907      	bls.n	80134a4 <_fwalk_reent+0x38>
 8013494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013498:	3301      	adds	r3, #1
 801349a:	d003      	beq.n	80134a4 <_fwalk_reent+0x38>
 801349c:	4629      	mov	r1, r5
 801349e:	4640      	mov	r0, r8
 80134a0:	47c8      	blx	r9
 80134a2:	4306      	orrs	r6, r0
 80134a4:	3568      	adds	r5, #104	; 0x68
 80134a6:	e7ee      	b.n	8013486 <_fwalk_reent+0x1a>

080134a8 <__swhatbuf_r>:
 80134a8:	b570      	push	{r4, r5, r6, lr}
 80134aa:	460e      	mov	r6, r1
 80134ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134b0:	2900      	cmp	r1, #0
 80134b2:	b096      	sub	sp, #88	; 0x58
 80134b4:	4614      	mov	r4, r2
 80134b6:	461d      	mov	r5, r3
 80134b8:	da07      	bge.n	80134ca <__swhatbuf_r+0x22>
 80134ba:	2300      	movs	r3, #0
 80134bc:	602b      	str	r3, [r5, #0]
 80134be:	89b3      	ldrh	r3, [r6, #12]
 80134c0:	061a      	lsls	r2, r3, #24
 80134c2:	d410      	bmi.n	80134e6 <__swhatbuf_r+0x3e>
 80134c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134c8:	e00e      	b.n	80134e8 <__swhatbuf_r+0x40>
 80134ca:	466a      	mov	r2, sp
 80134cc:	f000 f8b8 	bl	8013640 <_fstat_r>
 80134d0:	2800      	cmp	r0, #0
 80134d2:	dbf2      	blt.n	80134ba <__swhatbuf_r+0x12>
 80134d4:	9a01      	ldr	r2, [sp, #4]
 80134d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80134da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80134de:	425a      	negs	r2, r3
 80134e0:	415a      	adcs	r2, r3
 80134e2:	602a      	str	r2, [r5, #0]
 80134e4:	e7ee      	b.n	80134c4 <__swhatbuf_r+0x1c>
 80134e6:	2340      	movs	r3, #64	; 0x40
 80134e8:	2000      	movs	r0, #0
 80134ea:	6023      	str	r3, [r4, #0]
 80134ec:	b016      	add	sp, #88	; 0x58
 80134ee:	bd70      	pop	{r4, r5, r6, pc}

080134f0 <__smakebuf_r>:
 80134f0:	898b      	ldrh	r3, [r1, #12]
 80134f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134f4:	079d      	lsls	r5, r3, #30
 80134f6:	4606      	mov	r6, r0
 80134f8:	460c      	mov	r4, r1
 80134fa:	d507      	bpl.n	801350c <__smakebuf_r+0x1c>
 80134fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013500:	6023      	str	r3, [r4, #0]
 8013502:	6123      	str	r3, [r4, #16]
 8013504:	2301      	movs	r3, #1
 8013506:	6163      	str	r3, [r4, #20]
 8013508:	b002      	add	sp, #8
 801350a:	bd70      	pop	{r4, r5, r6, pc}
 801350c:	ab01      	add	r3, sp, #4
 801350e:	466a      	mov	r2, sp
 8013510:	f7ff ffca 	bl	80134a8 <__swhatbuf_r>
 8013514:	9900      	ldr	r1, [sp, #0]
 8013516:	4605      	mov	r5, r0
 8013518:	4630      	mov	r0, r6
 801351a:	f7ff fcbd 	bl	8012e98 <_malloc_r>
 801351e:	b948      	cbnz	r0, 8013534 <__smakebuf_r+0x44>
 8013520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013524:	059a      	lsls	r2, r3, #22
 8013526:	d4ef      	bmi.n	8013508 <__smakebuf_r+0x18>
 8013528:	f023 0303 	bic.w	r3, r3, #3
 801352c:	f043 0302 	orr.w	r3, r3, #2
 8013530:	81a3      	strh	r3, [r4, #12]
 8013532:	e7e3      	b.n	80134fc <__smakebuf_r+0xc>
 8013534:	4b0d      	ldr	r3, [pc, #52]	; (801356c <__smakebuf_r+0x7c>)
 8013536:	62b3      	str	r3, [r6, #40]	; 0x28
 8013538:	89a3      	ldrh	r3, [r4, #12]
 801353a:	6020      	str	r0, [r4, #0]
 801353c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013540:	81a3      	strh	r3, [r4, #12]
 8013542:	9b00      	ldr	r3, [sp, #0]
 8013544:	6163      	str	r3, [r4, #20]
 8013546:	9b01      	ldr	r3, [sp, #4]
 8013548:	6120      	str	r0, [r4, #16]
 801354a:	b15b      	cbz	r3, 8013564 <__smakebuf_r+0x74>
 801354c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013550:	4630      	mov	r0, r6
 8013552:	f000 f887 	bl	8013664 <_isatty_r>
 8013556:	b128      	cbz	r0, 8013564 <__smakebuf_r+0x74>
 8013558:	89a3      	ldrh	r3, [r4, #12]
 801355a:	f023 0303 	bic.w	r3, r3, #3
 801355e:	f043 0301 	orr.w	r3, r3, #1
 8013562:	81a3      	strh	r3, [r4, #12]
 8013564:	89a3      	ldrh	r3, [r4, #12]
 8013566:	431d      	orrs	r5, r3
 8013568:	81a5      	strh	r5, [r4, #12]
 801356a:	e7cd      	b.n	8013508 <__smakebuf_r+0x18>
 801356c:	0801335d 	.word	0x0801335d

08013570 <__malloc_lock>:
 8013570:	4770      	bx	lr

08013572 <__malloc_unlock>:
 8013572:	4770      	bx	lr

08013574 <__sread>:
 8013574:	b510      	push	{r4, lr}
 8013576:	460c      	mov	r4, r1
 8013578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801357c:	f000 f894 	bl	80136a8 <_read_r>
 8013580:	2800      	cmp	r0, #0
 8013582:	bfab      	itete	ge
 8013584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013586:	89a3      	ldrhlt	r3, [r4, #12]
 8013588:	181b      	addge	r3, r3, r0
 801358a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801358e:	bfac      	ite	ge
 8013590:	6563      	strge	r3, [r4, #84]	; 0x54
 8013592:	81a3      	strhlt	r3, [r4, #12]
 8013594:	bd10      	pop	{r4, pc}

08013596 <__swrite>:
 8013596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801359a:	461f      	mov	r7, r3
 801359c:	898b      	ldrh	r3, [r1, #12]
 801359e:	05db      	lsls	r3, r3, #23
 80135a0:	4605      	mov	r5, r0
 80135a2:	460c      	mov	r4, r1
 80135a4:	4616      	mov	r6, r2
 80135a6:	d505      	bpl.n	80135b4 <__swrite+0x1e>
 80135a8:	2302      	movs	r3, #2
 80135aa:	2200      	movs	r2, #0
 80135ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135b0:	f000 f868 	bl	8013684 <_lseek_r>
 80135b4:	89a3      	ldrh	r3, [r4, #12]
 80135b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135be:	81a3      	strh	r3, [r4, #12]
 80135c0:	4632      	mov	r2, r6
 80135c2:	463b      	mov	r3, r7
 80135c4:	4628      	mov	r0, r5
 80135c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135ca:	f000 b817 	b.w	80135fc <_write_r>

080135ce <__sseek>:
 80135ce:	b510      	push	{r4, lr}
 80135d0:	460c      	mov	r4, r1
 80135d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135d6:	f000 f855 	bl	8013684 <_lseek_r>
 80135da:	1c43      	adds	r3, r0, #1
 80135dc:	89a3      	ldrh	r3, [r4, #12]
 80135de:	bf15      	itete	ne
 80135e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80135e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80135ea:	81a3      	strheq	r3, [r4, #12]
 80135ec:	bf18      	it	ne
 80135ee:	81a3      	strhne	r3, [r4, #12]
 80135f0:	bd10      	pop	{r4, pc}

080135f2 <__sclose>:
 80135f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135f6:	f000 b813 	b.w	8013620 <_close_r>
	...

080135fc <_write_r>:
 80135fc:	b538      	push	{r3, r4, r5, lr}
 80135fe:	4c07      	ldr	r4, [pc, #28]	; (801361c <_write_r+0x20>)
 8013600:	4605      	mov	r5, r0
 8013602:	4608      	mov	r0, r1
 8013604:	4611      	mov	r1, r2
 8013606:	2200      	movs	r2, #0
 8013608:	6022      	str	r2, [r4, #0]
 801360a:	461a      	mov	r2, r3
 801360c:	f7ee fe51 	bl	80022b2 <_write>
 8013610:	1c43      	adds	r3, r0, #1
 8013612:	d102      	bne.n	801361a <_write_r+0x1e>
 8013614:	6823      	ldr	r3, [r4, #0]
 8013616:	b103      	cbz	r3, 801361a <_write_r+0x1e>
 8013618:	602b      	str	r3, [r5, #0]
 801361a:	bd38      	pop	{r3, r4, r5, pc}
 801361c:	200097bc 	.word	0x200097bc

08013620 <_close_r>:
 8013620:	b538      	push	{r3, r4, r5, lr}
 8013622:	4c06      	ldr	r4, [pc, #24]	; (801363c <_close_r+0x1c>)
 8013624:	2300      	movs	r3, #0
 8013626:	4605      	mov	r5, r0
 8013628:	4608      	mov	r0, r1
 801362a:	6023      	str	r3, [r4, #0]
 801362c:	f7ee fe5d 	bl	80022ea <_close>
 8013630:	1c43      	adds	r3, r0, #1
 8013632:	d102      	bne.n	801363a <_close_r+0x1a>
 8013634:	6823      	ldr	r3, [r4, #0]
 8013636:	b103      	cbz	r3, 801363a <_close_r+0x1a>
 8013638:	602b      	str	r3, [r5, #0]
 801363a:	bd38      	pop	{r3, r4, r5, pc}
 801363c:	200097bc 	.word	0x200097bc

08013640 <_fstat_r>:
 8013640:	b538      	push	{r3, r4, r5, lr}
 8013642:	4c07      	ldr	r4, [pc, #28]	; (8013660 <_fstat_r+0x20>)
 8013644:	2300      	movs	r3, #0
 8013646:	4605      	mov	r5, r0
 8013648:	4608      	mov	r0, r1
 801364a:	4611      	mov	r1, r2
 801364c:	6023      	str	r3, [r4, #0]
 801364e:	f7ee fe58 	bl	8002302 <_fstat>
 8013652:	1c43      	adds	r3, r0, #1
 8013654:	d102      	bne.n	801365c <_fstat_r+0x1c>
 8013656:	6823      	ldr	r3, [r4, #0]
 8013658:	b103      	cbz	r3, 801365c <_fstat_r+0x1c>
 801365a:	602b      	str	r3, [r5, #0]
 801365c:	bd38      	pop	{r3, r4, r5, pc}
 801365e:	bf00      	nop
 8013660:	200097bc 	.word	0x200097bc

08013664 <_isatty_r>:
 8013664:	b538      	push	{r3, r4, r5, lr}
 8013666:	4c06      	ldr	r4, [pc, #24]	; (8013680 <_isatty_r+0x1c>)
 8013668:	2300      	movs	r3, #0
 801366a:	4605      	mov	r5, r0
 801366c:	4608      	mov	r0, r1
 801366e:	6023      	str	r3, [r4, #0]
 8013670:	f7ee fe57 	bl	8002322 <_isatty>
 8013674:	1c43      	adds	r3, r0, #1
 8013676:	d102      	bne.n	801367e <_isatty_r+0x1a>
 8013678:	6823      	ldr	r3, [r4, #0]
 801367a:	b103      	cbz	r3, 801367e <_isatty_r+0x1a>
 801367c:	602b      	str	r3, [r5, #0]
 801367e:	bd38      	pop	{r3, r4, r5, pc}
 8013680:	200097bc 	.word	0x200097bc

08013684 <_lseek_r>:
 8013684:	b538      	push	{r3, r4, r5, lr}
 8013686:	4c07      	ldr	r4, [pc, #28]	; (80136a4 <_lseek_r+0x20>)
 8013688:	4605      	mov	r5, r0
 801368a:	4608      	mov	r0, r1
 801368c:	4611      	mov	r1, r2
 801368e:	2200      	movs	r2, #0
 8013690:	6022      	str	r2, [r4, #0]
 8013692:	461a      	mov	r2, r3
 8013694:	f7ee fe50 	bl	8002338 <_lseek>
 8013698:	1c43      	adds	r3, r0, #1
 801369a:	d102      	bne.n	80136a2 <_lseek_r+0x1e>
 801369c:	6823      	ldr	r3, [r4, #0]
 801369e:	b103      	cbz	r3, 80136a2 <_lseek_r+0x1e>
 80136a0:	602b      	str	r3, [r5, #0]
 80136a2:	bd38      	pop	{r3, r4, r5, pc}
 80136a4:	200097bc 	.word	0x200097bc

080136a8 <_read_r>:
 80136a8:	b538      	push	{r3, r4, r5, lr}
 80136aa:	4c07      	ldr	r4, [pc, #28]	; (80136c8 <_read_r+0x20>)
 80136ac:	4605      	mov	r5, r0
 80136ae:	4608      	mov	r0, r1
 80136b0:	4611      	mov	r1, r2
 80136b2:	2200      	movs	r2, #0
 80136b4:	6022      	str	r2, [r4, #0]
 80136b6:	461a      	mov	r2, r3
 80136b8:	f7ee fdde 	bl	8002278 <_read>
 80136bc:	1c43      	adds	r3, r0, #1
 80136be:	d102      	bne.n	80136c6 <_read_r+0x1e>
 80136c0:	6823      	ldr	r3, [r4, #0]
 80136c2:	b103      	cbz	r3, 80136c6 <_read_r+0x1e>
 80136c4:	602b      	str	r3, [r5, #0]
 80136c6:	bd38      	pop	{r3, r4, r5, pc}
 80136c8:	200097bc 	.word	0x200097bc

080136cc <_init>:
 80136cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ce:	bf00      	nop
 80136d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136d2:	bc08      	pop	{r3}
 80136d4:	469e      	mov	lr, r3
 80136d6:	4770      	bx	lr

080136d8 <_fini>:
 80136d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136da:	bf00      	nop
 80136dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136de:	bc08      	pop	{r3}
 80136e0:	469e      	mov	lr, r3
 80136e2:	4770      	bx	lr
