
UART_printf_cubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a158  0800a158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1e0  0800a1e0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1e8  0800a1e8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1ec  0800a1ec  0001a1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a1f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20000090  0800a280  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  0800a280  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022932  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049e8  00000000  00000000  000429f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f0  00000000  00000000  000473e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d8  00000000  00000000  00048dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000271cf  00000000  00000000  0004a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018ec1  00000000  00000000  00071777  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d553c  00000000  00000000  0008a638  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fb74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e4  00000000  00000000  0015fbf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a140 	.word	0x0800a140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a140 	.word	0x0800a140

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b70      	ldr	r3, [pc, #448]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a6f      	ldr	r2, [pc, #444]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b6d      	ldr	r3, [pc, #436]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b69      	ldr	r3, [pc, #420]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a68      	ldr	r2, [pc, #416]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b66      	ldr	r3, [pc, #408]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b62      	ldr	r3, [pc, #392]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a61      	ldr	r2, [pc, #388]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b5f      	ldr	r3, [pc, #380]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a5a      	ldr	r2, [pc, #360]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b58      	ldr	r3, [pc, #352]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b54      	ldr	r3, [pc, #336]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a53      	ldr	r2, [pc, #332]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b51      	ldr	r3, [pc, #324]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b4d      	ldr	r3, [pc, #308]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a4c      	ldr	r2, [pc, #304]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b4a      	ldr	r3, [pc, #296]	; (80006a4 <MX_GPIO_Init+0x1dc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	4847      	ldr	r0, [pc, #284]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 800058c:	f001 f95a 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4845      	ldr	r0, [pc, #276]	; (80006ac <MX_GPIO_Init+0x1e4>)
 8000596:	f001 f955 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	4844      	ldr	r0, [pc, #272]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 80005a0:	f001 f950 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005a4:	2308      	movs	r3, #8
 80005a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	483b      	ldr	r0, [pc, #236]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 80005bc:	f000 ffa8 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	4835      	ldr	r0, [pc, #212]	; (80006ac <MX_GPIO_Init+0x1e4>)
 80005d8:	f000 ff9a 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005dc:	2308      	movs	r3, #8
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005ec:	2305      	movs	r3, #5
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4619      	mov	r1, r3
 80005f6:	482d      	ldr	r0, [pc, #180]	; (80006ac <MX_GPIO_Init+0x1e4>)
 80005f8:	f000 ff8a 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <MX_GPIO_Init+0x1ec>)
 8000602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4619      	mov	r1, r3
 800060e:	482a      	ldr	r0, [pc, #168]	; (80006b8 <MX_GPIO_Init+0x1f0>)
 8000610:	f000 ff7e 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000614:	2304      	movs	r3, #4
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4619      	mov	r1, r3
 8000626:	4825      	ldr	r0, [pc, #148]	; (80006bc <MX_GPIO_Init+0x1f4>)
 8000628:	f000 ff72 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800062c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800063e:	2305      	movs	r3, #5
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	481c      	ldr	r0, [pc, #112]	; (80006bc <MX_GPIO_Init+0x1f4>)
 800064a:	f000 ff61 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800064e:	2310      	movs	r3, #16
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 8000666:	f000 ff53 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800066a:	2320      	movs	r3, #32
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <MX_GPIO_Init+0x1e8>)
 800067e:	f000 ff47 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000682:	2302      	movs	r3, #2
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_GPIO_Init+0x1f8>)
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_GPIO_Init+0x1e0>)
 8000696:	f000 ff3b 	bl	8001510 <HAL_GPIO_Init>

}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	; 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	10110000 	.word	0x10110000
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400
 80006c0:	10120000 	.word	0x10120000

080006c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_I2C1_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_I2C1_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C1_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C1_Init+0x50>)
 8000702:	f002 fdcd 	bl	80032a0 <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f9bc 	bl	8000a88 <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000c0 	.word	0x200000c0
 8000718:	40005400 	.word	0x40005400
 800071c:	000186a0 	.word	0x000186a0

08000720 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_I2C_MspInit+0x84>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d12c      	bne.n	800079c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800075e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000764:	2312      	movs	r3, #18
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000770:	2304      	movs	r3, #4
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <HAL_I2C_MspInit+0x8c>)
 800077c:	f000 fec8 	bl	8001510 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 800078a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_I2C_MspInit+0x88>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40005400 	.word	0x40005400
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020400 	.word	0x40020400

080007b0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_I2S3_Init+0x54>)
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <MX_I2S3_Init+0x58>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2S3_Init+0x54>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_I2S3_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_I2S3_Init+0x54>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_I2S3_Init+0x54>)
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <MX_I2S3_Init+0x5c>)
 80007da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_I2S3_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_I2S3_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2S3_Init+0x54>)
 80007f0:	f002 fe8e 	bl	8003510 <HAL_I2S_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007fa:	f000 f945 	bl	8000a88 <Error_Handler>
  }

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000114 	.word	0x20000114
 8000808:	40003c00 	.word	0x40003c00
 800080c:	00017700 	.word	0x00017700

08000810 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <HAL_I2S_MspInit+0xc0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d14a      	bne.n	80008c8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 800083c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_I2S_MspInit+0xc4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000886:	2310      	movs	r3, #16
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000896:	2306      	movs	r3, #6
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <HAL_I2S_MspInit+0xc8>)
 80008a2:	f000 fe35 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008a6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b8:	2306      	movs	r3, #6
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_I2S_MspInit+0xcc>)
 80008c4:	f000 fe24 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800

080008e0 <_write>:
static void MX_NVIC_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	230a      	movs	r3, #10
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <_write+0x24>)
 80008f6:	f004 ff8e 	bl	8005816 <HAL_UART_Transmit>
	return len;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000234 	.word	0x20000234

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090c:	f000 fc38 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000910:	f000 f81e 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f7ff fdd8 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000918:	f7ff fed4 	bl	80006c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800091c:	f7ff ff48 	bl	80007b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000920:	f000 f8ba 	bl	8000a98 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000924:	f008 fc5a 	bl	80091dc <MX_USB_HOST_Init>
  MX_TIM7_Init();
 8000928:	f000 fae6 	bl	8000ef8 <MX_TIM7_Init>
  MX_TIM4_Init();
 800092c:	f000 fa42 	bl	8000db4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000930:	f000 fb8a 	bl	8001048 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000934:	f000 f88c 	bl	8000a50 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		printf("Hello \n");
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <main+0x44>)
 800093a:	f009 f89d 	bl	8009a78 <puts>
		HAL_Delay(1000);
 800093e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000942:	f000 fc8f 	bl	8001264 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000946:	f008 fc6f 	bl	8009228 <MX_USB_HOST_Process>
		printf("Hello \n");
 800094a:	e7f5      	b.n	8000938 <main+0x30>
 800094c:	0800a158 	.word	0x0800a158

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b098      	sub	sp, #96	; 0x60
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f008 ff7e 	bl	8009860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <SystemClock_Config+0xf8>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <SystemClock_Config+0xf8>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <SystemClock_Config+0xf8>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <SystemClock_Config+0xfc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <SystemClock_Config+0xfc>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <SystemClock_Config+0xfc>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009d2:	23a8      	movs	r3, #168	; 0xa8
 80009d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009da:	2307      	movs	r3, #7
 80009dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fa34 	bl	8003e50 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009ee:	f000 f84b 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2105      	movs	r1, #5
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fc8d 	bl	8004330 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a1c:	f000 f834 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a20:	2301      	movs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a24:	23c0      	movs	r3, #192	; 0xc0
 8000a26:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fe6f 	bl	8004714 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a3c:	f000 f824 	bl	8000a88 <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3760      	adds	r7, #96	; 0x60
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f000 fd00 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5e:	2006      	movs	r0, #6
 8000a60:	f000 fd19 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2037      	movs	r0, #55	; 0x37
 8000a6a:	f000 fcf8 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a6e:	2037      	movs	r0, #55	; 0x37
 8000a70:	f000 fd11 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2026      	movs	r0, #38	; 0x26
 8000a7a:	f000 fcf0 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7e:	2026      	movs	r0, #38	; 0x26
 8000a80:	f000 fd09 	bl	8001496 <HAL_NVIC_EnableIRQ>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_SPI1_Init+0x64>)
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <MX_SPI1_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aea:	f003 ff51 	bl	8004990 <HAL_SPI_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af4:	f7ff ffc8 	bl	8000a88 <Error_Handler>
  }

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000015c 	.word	0x2000015c
 8000b00:	40013000 	.word	0x40013000

08000b04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_SPI_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5e:	23e0      	movs	r3, #224	; 0xe0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_SPI_MspInit+0x8c>)
 8000b7a:	f000 fcc9 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40013000 	.word	0x40013000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fc38 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 faf4 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 fe17 	bl	8001878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <USART2_IRQHandler+0x10>)
 8000c56:	f004 fe77 	bl	8005948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000234 	.word	0x20000234

08000c64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM7_IRQHandler+0x10>)
 8000c6a:	f003 ff55 	bl	8004b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001f4 	.word	0x200001f4

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <OTG_FS_IRQHandler+0x10>)
 8000c7e:	f001 f8ad 	bl	8001ddc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000650 	.word	0x20000650

08000c8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
	}

return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x50>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x16>
		heap_end = &end;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <_sbrk+0x50>)
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <_sbrk+0x54>)
 8000d44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <_sbrk+0x50>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <_sbrk+0x50>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	466a      	mov	r2, sp
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d907      	bls.n	8000d6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d5a:	f008 fd47 	bl	80097ec <__errno>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	230c      	movs	r3, #12
 8000d62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	e006      	b.n	8000d78 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <_sbrk+0x50>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <_sbrk+0x50>)
 8000d74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000ac 	.word	0x200000ac
 8000d84:	20000918 	.word	0x20000918

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <SystemInit+0x28>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <SystemInit+0x28>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SystemInit+0x28>)
 8000d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da2:	609a      	str	r2, [r3, #8]
#endif
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 0320 	add.w	r3, r7, #32
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000de4:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000de6:	4a43      	ldr	r2, [pc, #268]	; (8000ef4 <MX_TIM4_Init+0x140>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dea:	4b41      	ldr	r3, [pc, #260]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400-1;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000df8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000dfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e0a:	4839      	ldr	r0, [pc, #228]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e0c:	f003 fe24 	bl	8004a58 <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e16:	f7ff fe37 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4832      	ldr	r0, [pc, #200]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e28:	f004 f844 	bl	8004eb4 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e32:	f7ff fe29 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e36:	482e      	ldr	r0, [pc, #184]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e38:	f003 fe39 	bl	8004aae <HAL_TIM_PWM_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e42:	f7ff fe21 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	4619      	mov	r1, r3
 8000e54:	4826      	ldr	r0, [pc, #152]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e56:	f004 fc01 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e60:	f7ff fe12 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e64:	2360      	movs	r3, #96	; 0x60
 8000e66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8400-1;
 8000e68:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8000e6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e7e:	f003 ff53 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000e88:	f7ff fdfe 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.Pulse = 2100-1;
 8000e8c:	f640 0333 	movw	r3, #2099	; 0x833
 8000e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2204      	movs	r2, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000e9a:	f003 ff45 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000ea4:	f7ff fdf0 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.Pulse = 4200-1;
 8000ea8:	f241 0367 	movw	r3, #4199	; 0x1067
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000eb6:	f003 ff37 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8000ec0:	f7ff fde2 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.Pulse = 6300-1;
 8000ec4:	f641 039b 	movw	r3, #6299	; 0x189b
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	220c      	movs	r2, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000ed2:	f003 ff29 	bl	8004d28 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 8000edc:	f7ff fdd4 	bl	8000a88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM4_Init+0x13c>)
 8000ee2:	f000 f877 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3738      	adds	r7, #56	; 0x38
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001b4 	.word	0x200001b4
 8000ef4:	40000800 	.word	0x40000800

08000ef8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_TIM7_Init+0x64>)
 8000f08:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <MX_TIM7_Init+0x68>)
 8000f0a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_TIM7_Init+0x64>)
 8000f0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f12:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_TIM7_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8400-1;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_TIM7_Init+0x64>)
 8000f1c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f20:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_TIM7_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <MX_TIM7_Init+0x64>)
 8000f2a:	f003 fd95 	bl	8004a58 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f34:	f7ff fda8 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_TIM7_Init+0x64>)
 8000f46:	f004 fb89 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f50:	f7ff fd9a 	bl	8000a88 <Error_Handler>
  }

}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001f4 	.word	0x200001f4
 8000f60:	40001400 	.word	0x40001400

08000f64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <HAL_TIM_Base_MspInit+0x64>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10e      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_TIM_Base_MspInit+0x68>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <HAL_TIM_Base_MspInit+0x68>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_TIM_Base_MspInit+0x68>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000f92:	e012      	b.n	8000fba <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10d      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_Base_MspInit+0x68>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspInit+0x68>)
 8000fa8:	f043 0320 	orr.w	r3, r3, #32
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_TIM_Base_MspInit+0x68>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40000800 	.word	0x40000800
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40001400 	.word	0x40001400

08000fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_TIM_MspPostInit+0x68>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11e      	bne.n	8001034 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001012:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_TIM_MspPostInit+0x70>)
 8001030:	f000 fa6e 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40000800 	.word	0x40000800
 8001040:	40023800 	.word	0x40023800
 8001044:	40020c00 	.word	0x40020c00

08001048 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_USART2_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART2_UART_Init+0x4c>)
 8001080:	f004 fb7c 	bl	800577c <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f7ff fcfd 	bl	8000a88 <Error_Handler>
  }

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000234 	.word	0x20000234
 8001098:	40004400 	.word	0x40004400

0800109c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_UART_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12b      	bne.n	8001116 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f6:	230c      	movs	r3, #12
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0x8c>)
 8001112:	f000 f9fd 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001130:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001132:	e003      	b.n	800113c <LoopCopyDataInit>

08001134 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001136:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001138:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800113a:	3104      	adds	r1, #4

0800113c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001140:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001142:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001144:	d3f6      	bcc.n	8001134 <CopyDataInit>
  ldr  r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001148:	e002      	b.n	8001150 <LoopFillZerobss>

0800114a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800114a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800114c:	f842 3b04 	str.w	r3, [r2], #4

08001150 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001152:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001154:	d3f9      	bcc.n	800114a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001156:	f7ff fe17 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f008 fb4d 	bl	80097f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fbd3 	bl	8000908 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001164:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001168:	0800a1f0 	.word	0x0800a1f0
  ldr  r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001170:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001174:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001178:	20000918 	.word	0x20000918

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f94d 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fcee 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f965 	bl	80014b2 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 f92d 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	20000274 	.word	0x20000274

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000274 	.word	0x20000274

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_Delay+0x40>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000008 	.word	0x20000008

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff8e 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff29 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff3e 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff8e 	bl	800139c <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff31 	bl	800130c <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa2 	bl	8001404 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d004      	beq.n	80014e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e00c      	b.n	8001502 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2205      	movs	r2, #5
 80014ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e16b      	b.n	8001804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 815a 	bne.w	80017fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d00b      	beq.n	800156a <HAL_GPIO_Init+0x5a>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155e:	2b11      	cmp	r3, #17
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b12      	cmp	r3, #18
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0xfc>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b12      	cmp	r3, #18
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80b4 	beq.w	80017fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <HAL_GPIO_Init+0x308>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a5e      	ldr	r2, [pc, #376]	; (8001818 <HAL_GPIO_Init+0x308>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <HAL_GPIO_Init+0x308>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a5a      	ldr	r2, [pc, #360]	; (800181c <HAL_GPIO_Init+0x30c>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a51      	ldr	r2, [pc, #324]	; (8001820 <HAL_GPIO_Init+0x310>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d02b      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a50      	ldr	r2, [pc, #320]	; (8001824 <HAL_GPIO_Init+0x314>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d025      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <HAL_GPIO_Init+0x318>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01f      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4e      	ldr	r2, [pc, #312]	; (800182c <HAL_GPIO_Init+0x31c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d019      	beq.n	800172a <HAL_GPIO_Init+0x21a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <HAL_GPIO_Init+0x320>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x216>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <HAL_GPIO_Init+0x324>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x212>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4b      	ldr	r2, [pc, #300]	; (8001838 <HAL_GPIO_Init+0x328>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x20e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4a      	ldr	r2, [pc, #296]	; (800183c <HAL_GPIO_Init+0x32c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x20a>
 8001716:	2307      	movs	r3, #7
 8001718:	e00e      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800171a:	2308      	movs	r3, #8
 800171c:	e00c      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800171e:	2306      	movs	r3, #6
 8001720:	e00a      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001722:	2305      	movs	r3, #5
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001736:	2300      	movs	r3, #0
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	4934      	ldr	r1, [pc, #208]	; (800181c <HAL_GPIO_Init+0x30c>)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001756:	4b3a      	ldr	r3, [pc, #232]	; (8001840 <HAL_GPIO_Init+0x330>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800177a:	4a31      	ldr	r2, [pc, #196]	; (8001840 <HAL_GPIO_Init+0x330>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <HAL_GPIO_Init+0x330>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a4:	4a26      	ldr	r2, [pc, #152]	; (8001840 <HAL_GPIO_Init+0x330>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_GPIO_Init+0x330>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <HAL_GPIO_Init+0x330>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_GPIO_Init+0x330>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f8:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_GPIO_Init+0x330>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3301      	adds	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	f67f ae90 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800180c:	bf00      	nop
 800180e:	3724      	adds	r7, #36	; 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40023800 	.word	0x40023800
 800181c:	40013800 	.word	0x40013800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400
 8001828:	40020800 	.word	0x40020800
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40021000 	.word	0x40021000
 8001834:	40021400 	.word	0x40021400
 8001838:	40021800 	.word	0x40021800
 800183c:	40021c00 	.word	0x40021c00
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f806 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c0:	b08f      	sub	sp, #60	; 0x3c
 80018c2:	af0a      	add	r7, sp, #40	; 0x28
 80018c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e054      	b.n	800197a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f007 fcd4 	bl	8009298 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2203      	movs	r2, #3
 80018f4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f004 fe92 	bl	8006638 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	687e      	ldr	r6, [r7, #4]
 800191c:	466d      	mov	r5, sp
 800191e:	f106 0410 	add.w	r4, r6, #16
 8001922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800192e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001932:	1d33      	adds	r3, r6, #4
 8001934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001936:	6838      	ldr	r0, [r7, #0]
 8001938:	f004 fe0c 	bl	8006554 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fe89 	bl	800665a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	687e      	ldr	r6, [r7, #4]
 8001950:	466d      	mov	r5, sp
 8001952:	f106 0410 	add.w	r4, r6, #16
 8001956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001962:	e885 0003 	stmia.w	r5, {r0, r1}
 8001966:	1d33      	adds	r3, r6, #4
 8001968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f004 ff9c 	bl	80068a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001982 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001982:	b590      	push	{r4, r7, lr}
 8001984:	b089      	sub	sp, #36	; 0x24
 8001986:	af04      	add	r7, sp, #16
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	4608      	mov	r0, r1
 800198c:	4611      	mov	r1, r2
 800198e:	461a      	mov	r2, r3
 8001990:	4603      	mov	r3, r0
 8001992:	70fb      	strb	r3, [r7, #3]
 8001994:	460b      	mov	r3, r1
 8001996:	70bb      	strb	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_HCD_HC_Init+0x28>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e07f      	b.n	8001aaa <HAL_HCD_HC_Init+0x128>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	333d      	adds	r3, #61	; 0x3d
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	3338      	adds	r3, #56	; 0x38
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3340      	adds	r3, #64	; 0x40
 80019ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019ec:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3339      	adds	r3, #57	; 0x39
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	333f      	adds	r3, #63	; 0x3f
 8001a12:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	78bb      	ldrb	r3, [r7, #2]
 8001a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a20:	b2d8      	uxtb	r0, r3
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	333a      	adds	r3, #58	; 0x3a
 8001a30:	4602      	mov	r2, r0
 8001a32:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da0a      	bge.n	8001a52 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	333b      	adds	r3, #59	; 0x3b
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e009      	b.n	8001a66 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	333b      	adds	r3, #59	; 0x3b
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	333c      	adds	r3, #60	; 0x3c
 8001a76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a7a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	787c      	ldrb	r4, [r7, #1]
 8001a82:	78ba      	ldrb	r2, [r7, #2]
 8001a84:	78f9      	ldrb	r1, [r7, #3]
 8001a86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4623      	mov	r3, r4
 8001a98:	f005 f888 	bl	8006bac <USB_HC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_HCD_HC_Halt+0x1e>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e00f      	b.n	8001af0 <HAL_HCD_HC_Halt+0x3e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 fac2 	bl	800706a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	70fb      	strb	r3, [r7, #3]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70bb      	strb	r3, [r7, #2]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	333b      	adds	r3, #59	; 0x3b
 8001b22:	78ba      	ldrb	r2, [r7, #2]
 8001b24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	333f      	adds	r3, #63	; 0x3f
 8001b36:	787a      	ldrb	r2, [r7, #1]
 8001b38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b3a:	7c3b      	ldrb	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d114      	bne.n	8001b6a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3342      	adds	r3, #66	; 0x42
 8001b50:	2203      	movs	r2, #3
 8001b52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	333d      	adds	r3, #61	; 0x3d
 8001b64:	7f3a      	ldrb	r2, [r7, #28]
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e009      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3342      	adds	r3, #66	; 0x42
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b7e:	787b      	ldrb	r3, [r7, #1]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	f200 80d6 	bhi.w	8001d32 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001b86:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001d1d 	.word	0x08001d1d
 8001b94:	08001c09 	.word	0x08001c09
 8001b98:	08001c93 	.word	0x08001c93
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b9c:	7c3b      	ldrb	r3, [r7, #16]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	f040 80c9 	bne.w	8001d36 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001ba4:	78bb      	ldrb	r3, [r7, #2]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80c5 	bne.w	8001d36 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001bac:	8b3b      	ldrh	r3, [r7, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3351      	adds	r3, #81	; 0x51
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3351      	adds	r3, #81	; 0x51
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10a      	bne.n	8001bf2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	3342      	adds	r3, #66	; 0x42
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bf0:	e0a1      	b.n	8001d36 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	3342      	adds	r3, #66	; 0x42
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]
      break;
 8001c06:	e096      	b.n	8001d36 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c08:	78bb      	ldrb	r3, [r7, #2]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d120      	bne.n	8001c50 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3351      	adds	r3, #81	; 0x51
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	3342      	adds	r3, #66	; 0x42
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c38:	e07e      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	3342      	adds	r3, #66	; 0x42
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
      break;
 8001c4e:	e073      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3350      	adds	r3, #80	; 0x50
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10a      	bne.n	8001c7c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	3342      	adds	r3, #66	; 0x42
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
      break;
 8001c7a:	e05d      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	3342      	adds	r3, #66	; 0x42
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	701a      	strb	r2, [r3, #0]
      break;
 8001c90:	e052      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c92:	78bb      	ldrb	r3, [r7, #2]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d120      	bne.n	8001cda <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3351      	adds	r3, #81	; 0x51
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10a      	bne.n	8001cc4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3342      	adds	r3, #66	; 0x42
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cc2:	e039      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3342      	adds	r3, #66	; 0x42
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	701a      	strb	r2, [r3, #0]
      break;
 8001cd8:	e02e      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3350      	adds	r3, #80	; 0x50
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3342      	adds	r3, #66	; 0x42
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
      break;
 8001d04:	e018      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d06:	78fa      	ldrb	r2, [r7, #3]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3342      	adds	r3, #66	; 0x42
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
      break;
 8001d1a:	e00d      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3342      	adds	r3, #66	; 0x42
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
      break;
 8001d30:	e002      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001d36:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3344      	adds	r3, #68	; 0x44
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	8b39      	ldrh	r1, [r7, #24]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4403      	add	r3, r0
 8001d5c:	3348      	adds	r3, #72	; 0x48
 8001d5e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	440b      	add	r3, r1
 8001d6e:	335c      	adds	r3, #92	; 0x5c
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	334c      	adds	r3, #76	; 0x4c
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3339      	adds	r3, #57	; 0x39
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	335d      	adds	r3, #93	; 0x5d
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	3338      	adds	r3, #56	; 0x38
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	18d1      	adds	r1, r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f004 fff8 	bl	8006dc0 <USB_HC_StartXfer>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop

08001ddc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fd15 	bl	8006822 <USB_GetMode>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 80ef 	bne.w	8001fde <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 fcf9 	bl	80067fc <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80e5 	beq.w	8001fdc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 fcf0 	bl	80067fc <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e26:	d104      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fce0 	bl	80067fc <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e46:	d104      	bne.n	8001e52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 fcd0 	bl	80067fc <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e66:	d104      	bne.n	8001e72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fcc0 	bl	80067fc <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d103      	bne.n	8001e8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fcb2 	bl	80067fc <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea2:	d115      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d108      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f007 fa68 	bl	8009394 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 fda8 	bl	8006a20 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f004 fc91 	bl	80067fc <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d102      	bne.n	8001eec <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f001 f966 	bl	80031b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fc83 	bl	80067fc <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d106      	bne.n	8001f0e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f007 fa2b 	bl	800935c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 fc72 	bl	80067fc <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f22:	d138      	bne.n	8001f96 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f005 f88d 	bl	8007048 <USB_HC_ReadInterrupt>
 8001f2e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e025      	b.n	8001f82 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d018      	beq.n	8001f7c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f60:	d106      	bne.n	8001f70 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8cf 	bl	800210c <HCD_HC_IN_IRQHandler>
 8001f6e:	e005      	b.n	8001f7c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fcfd 	bl	8002976 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3d4      	bcc.n	8001f36 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fc2e 	bl	80067fc <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d101      	bne.n	8001fae <HAL_HCD_IRQHandler+0x1d2>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_HCD_IRQHandler+0x1d4>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d014      	beq.n	8001fde <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0210 	bic.w	r2, r2, #16
 8001fc2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f001 f84b 	bl	8003060 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	e000      	b.n	8001fde <HAL_HCD_IRQHandler+0x202>
      return;
 8001fdc:	bf00      	nop
    }
  }
}
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_HCD_Start+0x16>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e013      	b.n	8002022 <HAL_HCD_Start+0x3e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f004 fb05 	bl	8006616 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fd68 	bl	8006ae8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_HCD_Stop+0x16>
 800203c:	2302      	movs	r3, #2
 800203e:	e00d      	b.n	800205c <HAL_HCD_Stop+0x32>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f005 f947 	bl	80072e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fd0f 	bl	8006a94 <USB_ResetPort>
 8002076:	4603      	mov	r3, r0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	335c      	adds	r3, #92	; 0x5c
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	334c      	adds	r3, #76	; 0x4c
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fd51 	bl	8006b88 <USB_GetCurrentFrame>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f004 fd2c 	bl	8006b5a <USB_GetHostSpeed>
 8002102:	4603      	mov	r3, r0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d119      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2304      	movs	r3, #4
 800214c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	0151      	lsls	r1, r2, #5
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	440a      	add	r2, r1
 8002164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	60d3      	str	r3, [r2, #12]
 800216e:	e0ce      	b.n	800230e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002186:	d12c      	bne.n	80021e2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	335d      	adds	r3, #93	; 0x5d
 80021ac:	2207      	movs	r2, #7
 80021ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	0151      	lsls	r1, r2, #5
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	440a      	add	r2, r1
 80021c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 ff45 	bl	800706a <USB_HC_Halt>
 80021e0:	e095      	b.n	800230e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d109      	bne.n	800220c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	461a      	mov	r2, r3
 8002206:	2320      	movs	r3, #32
 8002208:	6093      	str	r3, [r2, #8]
 800220a:	e080      	b.n	800230e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b08      	cmp	r3, #8
 8002220:	d134      	bne.n	800228c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	0151      	lsls	r1, r2, #5
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	440a      	add	r2, r1
 8002238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	335d      	adds	r3, #93	; 0x5d
 8002252:	2205      	movs	r2, #5
 8002254:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	461a      	mov	r2, r3
 8002264:	2310      	movs	r3, #16
 8002266:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2308      	movs	r3, #8
 8002278:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fef0 	bl	800706a <USB_HC_Halt>
 800228a:	e040      	b.n	800230e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d134      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	0151      	lsls	r1, r2, #5
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	440a      	add	r2, r1
 80022ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fecb 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	461a      	mov	r2, r3
 80022e2:	2310      	movs	r3, #16
 80022e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	335d      	adds	r3, #93	; 0x5d
 80022f6:	2208      	movs	r2, #8
 80022f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002324:	d122      	bne.n	800236c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	0151      	lsls	r1, r2, #5
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	440a      	add	r2, r1
 800233c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f004 fe8a 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002368:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800236a:	e300      	b.n	800296e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	f040 80fd 	bne.w	800257e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01b      	beq.n	80023c4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	3348      	adds	r3, #72	; 0x48
 800239c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0159      	lsls	r1, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80023b0:	1ad1      	subs	r1, r2, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4403      	add	r3, r0
 80023c0:	334c      	adds	r3, #76	; 0x4c
 80023c2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	335d      	adds	r3, #93	; 0x5d
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	3358      	adds	r3, #88	; 0x58
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	2301      	movs	r3, #1
 80023fc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	333f      	adds	r3, #63	; 0x3f
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	333f      	adds	r3, #63	; 0x3f
 8002424:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002426:	2b02      	cmp	r3, #2
 8002428:	d121      	bne.n	800246e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	0151      	lsls	r1, r2, #5
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	440a      	add	r2, r1
 8002440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f004 fe08 	bl	800706a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	461a      	mov	r2, r3
 8002468:	2310      	movs	r3, #16
 800246a:	6093      	str	r3, [r2, #8]
 800246c:	e070      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	333f      	adds	r3, #63	; 0x3f
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d12a      	bne.n	80024da <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	440a      	add	r2, r1
 800249a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	335c      	adds	r3, #92	; 0x5c
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	b2d8      	uxtb	r0, r3
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4601      	mov	r1, r0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f006 ff6c 	bl	80093b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80024d8:	e03a      	b.n	8002550 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	333f      	adds	r3, #63	; 0x3f
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d12f      	bne.n	8002550 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	335c      	adds	r3, #92	; 0x5c
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	3350      	adds	r3, #80	; 0x50
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2d8      	uxtb	r0, r3
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3350      	adds	r3, #80	; 0x50
 800252c:	4602      	mov	r2, r0
 800252e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	b2d8      	uxtb	r0, r3
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	335c      	adds	r3, #92	; 0x5c
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	4601      	mov	r1, r0
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f006 ff30 	bl	80093b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	3350      	adds	r3, #80	; 0x50
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2d8      	uxtb	r0, r3
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	3350      	adds	r3, #80	; 0x50
 8002578:	4602      	mov	r2, r0
 800257a:	701a      	strb	r2, [r3, #0]
}
 800257c:	e1f7      	b.n	800296e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	f040 811a 	bne.w	80027ca <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	0151      	lsls	r1, r2, #5
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	440a      	add	r2, r1
 80025ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b0:	f023 0302 	bic.w	r3, r3, #2
 80025b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	335d      	adds	r3, #93	; 0x5d
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10a      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	335c      	adds	r3, #92	; 0x5c
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e0d9      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	335d      	adds	r3, #93	; 0x5d
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d10a      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	335c      	adds	r3, #92	; 0x5c
 8002608:	2205      	movs	r2, #5
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e0c3      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	335d      	adds	r3, #93	; 0x5d
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d00a      	beq.n	800263a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	335d      	adds	r3, #93	; 0x5d
 8002634:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002636:	2b08      	cmp	r3, #8
 8002638:	d156      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	3358      	adds	r3, #88	; 0x58
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4403      	add	r3, r0
 800265c:	3358      	adds	r3, #88	; 0x58
 800265e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	3358      	adds	r3, #88	; 0x58
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d914      	bls.n	80026a0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	3358      	adds	r3, #88	; 0x58
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	335c      	adds	r3, #92	; 0x5c
 800269a:	2204      	movs	r2, #4
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e009      	b.n	80026b4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	335c      	adds	r3, #92	; 0x5c
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e056      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	335d      	adds	r3, #93	; 0x5d
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d123      	bne.n	8002746 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	335c      	adds	r3, #92	; 0x5c
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002728:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002730:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e027      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	335d      	adds	r3, #93	; 0x5d
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b07      	cmp	r3, #7
 800275a:	d11c      	bne.n	8002796 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	3358      	adds	r3, #88	; 0x58
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c59      	adds	r1, r3, #1
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4403      	add	r3, r0
 800277e:	3358      	adds	r3, #88	; 0x58
 8002780:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	335c      	adds	r3, #92	; 0x5c
 8002792:	2204      	movs	r2, #4
 8002794:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	461a      	mov	r2, r3
 80027a4:	2302      	movs	r3, #2
 80027a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	b2d8      	uxtb	r0, r3
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	4601      	mov	r1, r0
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f006 fdf4 	bl	80093b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027c8:	e0d1      	b.n	800296e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d13e      	bne.n	800285e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	3358      	adds	r3, #88	; 0x58
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4403      	add	r3, r0
 8002822:	3358      	adds	r3, #88	; 0x58
 8002824:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	335d      	adds	r3, #93	; 0x5d
 8002836:	2206      	movs	r2, #6
 8002838:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f004 fc10 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	6093      	str	r3, [r2, #8]
}
 800285c:	e087      	b.n	800296e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b10      	cmp	r3, #16
 8002872:	d17c      	bne.n	800296e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	333f      	adds	r3, #63	; 0x3f
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d122      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	3358      	adds	r3, #88	; 0x58
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	0151      	lsls	r1, r2, #5
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	440a      	add	r2, r1
 80028b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 fbce 	bl	800706a <USB_HC_Halt>
 80028ce:	e045      	b.n	800295c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	333f      	adds	r3, #63	; 0x3f
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	333f      	adds	r3, #63	; 0x3f
 80028f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d12f      	bne.n	800295c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	3358      	adds	r3, #88	; 0x58
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d121      	bne.n	800295c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	335d      	adds	r3, #93	; 0x5d
 8002928:	2203      	movs	r2, #3
 800292a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	0151      	lsls	r1, r2, #5
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	440a      	add	r2, r1
 8002942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f004 fb87 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2310      	movs	r3, #16
 800296c:	6093      	str	r3, [r2, #8]
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d119      	bne.n	80029da <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	461a      	mov	r2, r3
 80029b4:	2304      	movs	r3, #4
 80029b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80029d8:	e33e      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d141      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	2320      	movs	r3, #32
 8002a00:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	333d      	adds	r3, #61	; 0x3d
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	f040 831f 	bne.w	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	333d      	adds	r3, #61	; 0x3d
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	335c      	adds	r3, #92	; 0x5c
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 fafc 	bl	800706a <USB_HC_Halt>
}
 8002a72:	e2f1      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d13f      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	335d      	adds	r3, #93	; 0x5d
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	333d      	adds	r3, #61	; 0x3d
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3358      	adds	r3, #88	; 0x58
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	0151      	lsls	r1, r2, #5
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	440a      	add	r2, r1
 8002adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f004 faba 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	2340      	movs	r3, #64	; 0x40
 8002b06:	6093      	str	r3, [r2, #8]
}
 8002b08:	e2a6      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b20:	d122      	bne.n	8002b68 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	0151      	lsls	r1, r2, #5
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	440a      	add	r2, r1
 8002b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fa8c 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b64:	6093      	str	r3, [r2, #8]
}
 8002b66:	e277      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d135      	bne.n	8002bea <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3358      	adds	r3, #88	; 0x58
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	0151      	lsls	r1, r2, #5
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	440a      	add	r2, r1
 8002ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 fa54 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	335d      	adds	r3, #93	; 0x5d
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
}
 8002be8:	e236      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d12b      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2308      	movs	r3, #8
 8002c10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	0151      	lsls	r1, r2, #5
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	440a      	add	r2, r1
 8002c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f004 fa14 	bl	800706a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	335d      	adds	r3, #93	; 0x5d
 8002c52:	2205      	movs	r2, #5
 8002c54:	701a      	strb	r2, [r3, #0]
}
 8002c56:	e1ff      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d155      	bne.n	8002d1a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3358      	adds	r3, #88	; 0x58
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	335d      	adds	r3, #93	; 0x5d
 8002c92:	2203      	movs	r2, #3
 8002c94:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333d      	adds	r3, #61	; 0x3d
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d114      	bne.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	333c      	adds	r3, #60	; 0x3c
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	333d      	adds	r3, #61	; 0x3d
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 f9b2 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2310      	movs	r3, #16
 8002d16:	6093      	str	r3, [r2, #8]
}
 8002d18:	e19e      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2c:	2b80      	cmp	r3, #128	; 0x80
 8002d2e:	d12b      	bne.n	8002d88 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	0151      	lsls	r1, r2, #5
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	440a      	add	r2, r1
 8002d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 f985 	bl	800706a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	335d      	adds	r3, #93	; 0x5d
 8002d70:	2206      	movs	r2, #6
 8002d72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	6093      	str	r3, [r2, #8]
}
 8002d86:	e167      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9e:	d135      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	0151      	lsls	r1, r2, #5
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	440a      	add	r2, r1
 8002db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 f94d 	bl	800706a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2310      	movs	r3, #16
 8002de0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	461a      	mov	r2, r3
 8002df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	335d      	adds	r3, #93	; 0x5d
 8002e06:	2208      	movs	r2, #8
 8002e08:	701a      	strb	r2, [r3, #0]
}
 8002e0a:	e125      	b.n	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	f040 811a 	bne.w	8003058 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	0151      	lsls	r1, r2, #5
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	440a      	add	r2, r1
 8002e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e3e:	f023 0302 	bic.w	r3, r3, #2
 8002e42:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	335d      	adds	r3, #93	; 0x5d
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d137      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	335c      	adds	r3, #92	; 0x5c
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	333f      	adds	r3, #63	; 0x3f
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d00b      	beq.n	8002e9c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	333f      	adds	r3, #63	; 0x3f
 8002e94:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	f040 80c5 	bne.w	8003026 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3351      	adds	r3, #81	; 0x51
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	f083 0301 	eor.w	r3, r3, #1
 8002eb2:	b2d8      	uxtb	r0, r3
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3351      	adds	r3, #81	; 0x51
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e0ad      	b.n	8003026 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	335d      	adds	r3, #93	; 0x5d
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d10a      	bne.n	8002ef6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	440b      	add	r3, r1
 8002eee:	335c      	adds	r3, #92	; 0x5c
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e097      	b.n	8003026 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	335d      	adds	r3, #93	; 0x5d
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d10a      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	335c      	adds	r3, #92	; 0x5c
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e081      	b.n	8003026 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	335d      	adds	r3, #93	; 0x5d
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d10a      	bne.n	8002f4e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	2205      	movs	r2, #5
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e06b      	b.n	8003026 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335d      	adds	r3, #93	; 0x5d
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d00a      	beq.n	8002f7a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	335d      	adds	r3, #93	; 0x5d
 8002f74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d155      	bne.n	8003026 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	3358      	adds	r3, #88	; 0x58
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3358      	adds	r3, #88	; 0x58
 8002f9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	3358      	adds	r3, #88	; 0x58
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d914      	bls.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3358      	adds	r3, #88	; 0x58
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	335c      	adds	r3, #92	; 0x5c
 8002fda:	2204      	movs	r2, #4
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e009      	b.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	335c      	adds	r3, #92	; 0x5c
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800300a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003012:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	461a      	mov	r2, r3
 8003034:	2302      	movs	r3, #2
 8003036:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	b2d8      	uxtb	r0, r3
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	335c      	adds	r3, #92	; 0x5c
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	4601      	mov	r1, r0
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f006 f9ac 	bl	80093b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	0c5b      	lsrs	r3, r3, #17
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003094:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d003      	beq.n	80030a4 <HCD_RXQLVL_IRQHandler+0x44>
 800309c:	2b05      	cmp	r3, #5
 800309e:	f000 8082 	beq.w	80031a6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030a2:	e083      	b.n	80031ac <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d07f      	beq.n	80031aa <HCD_RXQLVL_IRQHandler+0x14a>
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	3344      	adds	r3, #68	; 0x44
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d074      	beq.n	80031aa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	3344      	adds	r3, #68	; 0x44
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	b292      	uxth	r2, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f003 fb65 	bl	80067aa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3344      	adds	r3, #68	; 0x44
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	18d1      	adds	r1, r2, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4403      	add	r3, r0
 8003104:	3344      	adds	r3, #68	; 0x44
 8003106:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	334c      	adds	r3, #76	; 0x4c
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	18d1      	adds	r1, r2, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4403      	add	r3, r0
 800312c:	334c      	adds	r3, #76	; 0x4c
 800312e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HCD_RXQLVL_IRQHandler+0x154>)
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d031      	beq.n	80031aa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800315c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003164:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3350      	adds	r3, #80	; 0x50
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	f083 0301 	eor.w	r3, r3, #1
 800318e:	b2d8      	uxtb	r0, r3
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	3350      	adds	r3, #80	; 0x50
 80031a0:	4602      	mov	r2, r0
 80031a2:	701a      	strb	r2, [r3, #0]
      break;
 80031a4:	e001      	b.n	80031aa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80031aa:	bf00      	nop
  }
}
 80031ac:	bf00      	nop
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	1ff80000 	.word	0x1ff80000

080031b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d10b      	bne.n	8003208 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f006 f8bc 	bl	8009378 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b08      	cmp	r3, #8
 8003210:	d132      	bne.n	8003278 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d126      	bne.n	8003272 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d113      	bne.n	8003254 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003232:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003236:	d106      	bne.n	8003246 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f003 fbee 	bl	8006a20 <USB_InitFSLSPClkSel>
 8003244:	e011      	b.n	800326a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fbe7 	bl	8006a20 <USB_InitFSLSPClkSel>
 8003252:	e00a      	b.n	800326a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d106      	bne.n	800326a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003262:	461a      	mov	r2, r3
 8003264:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003268:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f006 f8ae 	bl	80093cc <HAL_HCD_PortEnabled_Callback>
 8003270:	e002      	b.n	8003278 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f006 f8b8 	bl	80093e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b20      	cmp	r3, #32
 8003280:	d103      	bne.n	800328a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f043 0320 	orr.w	r3, r3, #32
 8003288:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6013      	str	r3, [r2, #0]
}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e11f      	b.n	80034f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fa2a 	bl	8000720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003304:	f001 f9de 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a7b      	ldr	r2, [pc, #492]	; (80034fc <HAL_I2C_Init+0x25c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d807      	bhi.n	8003324 <HAL_I2C_Init+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_I2C_Init+0x260>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e006      	b.n	8003332 <HAL_I2C_Init+0x92>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a77      	ldr	r2, [pc, #476]	; (8003504 <HAL_I2C_Init+0x264>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0db      	b.n	80034f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_I2C_Init+0x268>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0c9b      	lsrs	r3, r3, #18
 8003344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a64      	ldr	r2, [pc, #400]	; (80034fc <HAL_I2C_Init+0x25c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d802      	bhi.n	8003374 <HAL_I2C_Init+0xd4>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	e009      	b.n	8003388 <HAL_I2C_Init+0xe8>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_I2C_Init+0x26c>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	3301      	adds	r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	430b      	orrs	r3, r1
 800338e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800339a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4956      	ldr	r1, [pc, #344]	; (80034fc <HAL_I2C_Init+0x25c>)
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d80d      	bhi.n	80033c4 <HAL_I2C_Init+0x124>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e59      	subs	r1, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	2b04      	cmp	r3, #4
 80033be:	bf38      	it	cc
 80033c0:	2304      	movcc	r3, #4
 80033c2:	e04f      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_I2C_Init+0x150>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_I2C_Init+0x176>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	0099      	lsls	r1, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	fbb0 f3f3 	udiv	r3, r0, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Init+0x17e>
 800341a:	2301      	movs	r3, #1
 800341c:	e022      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <HAL_I2C_Init+0x1a4>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e58      	subs	r0, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	fbb0 f3f3 	udiv	r3, r0, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003442:	e00f      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e58      	subs	r0, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	0099      	lsls	r1, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6809      	ldr	r1, [r1, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6911      	ldr	r1, [r2, #16]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000186a0 	.word	0x000186a0
 8003500:	001e847f 	.word	0x001e847f
 8003504:	003d08ff 	.word	0x003d08ff
 8003508:	431bde83 	.word	0x431bde83
 800350c:	10624dd3 	.word	0x10624dd3

08003510 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e128      	b.n	8003774 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a90      	ldr	r2, [pc, #576]	; (800377c <HAL_I2S_Init+0x26c>)
 800353a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fd f967 	bl	8000810 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003558:	f023 030f 	bic.w	r3, r3, #15
 800355c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2202      	movs	r2, #2
 8003564:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d060      	beq.n	8003630 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003576:	2310      	movs	r3, #16
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e001      	b.n	8003580 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b20      	cmp	r3, #32
 8003586:	d802      	bhi.n	800358e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800358e:	2001      	movs	r0, #1
 8003590:	f001 f9a2 	bl	80048d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003594:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359e:	d125      	bne.n	80035ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	3305      	adds	r3, #5
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e01f      	b.n	800360a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	461a      	mov	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	3305      	adds	r3, #5
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e00e      	b.n	800360a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	3305      	adds	r3, #5
 8003608:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <HAL_I2S_Init+0x270>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	08db      	lsrs	r3, r3, #3
 8003614:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e003      	b.n	8003638 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003630:	2302      	movs	r3, #2
 8003632:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d902      	bls.n	8003644 <HAL_I2S_Init+0x134>
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2bff      	cmp	r3, #255	; 0xff
 8003642:	d907      	bls.n	8003654 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f043 0210 	orr.w	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e08f      	b.n	8003774 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	ea42 0103 	orr.w	r1, r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	430a      	orrs	r2, r1
 8003666:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003672:	f023 030f 	bic.w	r3, r3, #15
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6851      	ldr	r1, [r2, #4]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6992      	ldr	r2, [r2, #24]
 800368a:	430a      	orrs	r2, r1
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003696:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d161      	bne.n	8003764 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a38      	ldr	r2, [pc, #224]	; (8003784 <HAL_I2S_Init+0x274>)
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a37      	ldr	r2, [pc, #220]	; (8003788 <HAL_I2S_Init+0x278>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_I2S_Init+0x1a4>
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_I2S_Init+0x27c>)
 80036b2:	e001      	b.n	80036b8 <HAL_I2S_Init+0x1a8>
 80036b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	4932      	ldr	r1, [pc, #200]	; (8003788 <HAL_I2S_Init+0x278>)
 80036c0:	428a      	cmp	r2, r1
 80036c2:	d101      	bne.n	80036c8 <HAL_I2S_Init+0x1b8>
 80036c4:	4a31      	ldr	r2, [pc, #196]	; (800378c <HAL_I2S_Init+0x27c>)
 80036c6:	e001      	b.n	80036cc <HAL_I2S_Init+0x1bc>
 80036c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036d0:	f023 030f 	bic.w	r3, r3, #15
 80036d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2b      	ldr	r2, [pc, #172]	; (8003788 <HAL_I2S_Init+0x278>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_I2S_Init+0x1d4>
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_I2S_Init+0x27c>)
 80036e2:	e001      	b.n	80036e8 <HAL_I2S_Init+0x1d8>
 80036e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e8:	2202      	movs	r2, #2
 80036ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a25      	ldr	r2, [pc, #148]	; (8003788 <HAL_I2S_Init+0x278>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_I2S_Init+0x1ea>
 80036f6:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_I2S_Init+0x27c>)
 80036f8:	e001      	b.n	80036fe <HAL_I2S_Init+0x1ee>
 80036fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370a:	d003      	beq.n	8003714 <HAL_I2S_Init+0x204>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	e001      	b.n	8003720 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	b299      	uxth	r1, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003736:	4303      	orrs	r3, r0
 8003738:	b29b      	uxth	r3, r3
 800373a:	430b      	orrs	r3, r1
 800373c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800373e:	4313      	orrs	r3, r2
 8003740:	b29a      	uxth	r2, r3
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	4313      	orrs	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800374c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a0d      	ldr	r2, [pc, #52]	; (8003788 <HAL_I2S_Init+0x278>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_I2S_Init+0x24c>
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_I2S_Init+0x27c>)
 800375a:	e001      	b.n	8003760 <HAL_I2S_Init+0x250>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	897a      	ldrh	r2, [r7, #10]
 8003762:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08003887 	.word	0x08003887
 8003780:	cccccccd 	.word	0xcccccccd
 8003784:	0800399d 	.word	0x0800399d
 8003788:	40003800 	.word	0x40003800
 800378c:	40003400 	.word	0x40003400

08003790 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10e      	bne.n	8003820 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003810:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ffb8 	bl	8003790 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	b292      	uxth	r2, r2
 800383c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10e      	bne.n	800387e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800386e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff93 	bl	80037a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d13a      	bne.n	8003918 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d109      	bne.n	80038c0 <I2S_IRQHandler+0x3a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d102      	bne.n	80038c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ffb4 	bl	8003828 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d126      	bne.n	8003918 <I2S_IRQHandler+0x92>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d11f      	bne.n	8003918 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ff50 	bl	80037b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b03      	cmp	r3, #3
 8003922:	d136      	bne.n	8003992 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d109      	bne.n	8003942 <I2S_IRQHandler+0xbc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d102      	bne.n	8003942 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff45 	bl	80037cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d122      	bne.n	8003992 <I2S_IRQHandler+0x10c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d11b      	bne.n	8003992 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003968:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ff13 	bl	80037b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4aa2      	ldr	r2, [pc, #648]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039b6:	4ba2      	ldr	r3, [pc, #648]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039b8:	e001      	b.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a9b      	ldr	r2, [pc, #620]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039d4:	4b9a      	ldr	r3, [pc, #616]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d6:	e001      	b.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d004      	beq.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 8099 	bne.w	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d107      	bne.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f925 	bl	8003c58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9c8 	bl	8003db8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d13a      	bne.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d035      	beq.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a7e      	ldr	r2, [pc, #504]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a46:	4b7e      	ldr	r3, [pc, #504]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a48:	e001      	b.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4979      	ldr	r1, [pc, #484]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a56:	428b      	cmp	r3, r1
 8003a58:	d101      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a5a:	4b79      	ldr	r3, [pc, #484]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a5c:	e001      	b.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fe88 	bl	80037b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	f040 80be 	bne.w	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80b8 	beq.w	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ace:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a59      	ldr	r2, [pc, #356]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ada:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003adc:	e001      	b.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4954      	ldr	r1, [pc, #336]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aea:	428b      	cmp	r3, r1
 8003aec:	d101      	bne.n	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003aee:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003af0:	e001      	b.n	8003af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fe4a 	bl	80037b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b24:	e084      	b.n	8003c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d107      	bne.n	8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8be 	bl	8003cbc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8fd 	bl	8003d54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d12f      	bne.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02a      	beq.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2e      	ldr	r2, [pc, #184]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b88:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b8a:	e001      	b.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4929      	ldr	r1, [pc, #164]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b9e:	e001      	b.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f043 0202 	orr.w	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fdfa 	bl	80037b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d131      	bne.n	8003c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02c      	beq.n	8003c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003be2:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003be4:	e001      	b.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4912      	ldr	r1, [pc, #72]	; (8003c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bf2:	428b      	cmp	r3, r1
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bf8:	e001      	b.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c12:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	f043 0204 	orr.w	r2, r3, #4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff fdc5 	bl	80037b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c2e:	e000      	b.n	8003c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c30:	bf00      	nop
}
 8003c32:	bf00      	nop
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40003800 	.word	0x40003800
 8003c40:	40003400 	.word	0x40003400

08003c44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c99      	adds	r1, r3, #2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6251      	str	r1, [r2, #36]	; 0x24
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ffc9 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	1c99      	adds	r1, r3, #2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6251      	str	r1, [r2, #36]	; 0x24
 8003cce:	8819      	ldrh	r1, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <I2SEx_TxISR_I2SExt+0x22>
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003cdc:	e001      	b.n	8003ce2 <I2SEx_TxISR_I2SExt+0x26>
 8003cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d121      	bne.n	8003d42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <I2SEx_TxISR_I2SExt+0x50>
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003d0a:	e001      	b.n	8003d10 <I2SEx_TxISR_I2SExt+0x54>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	490d      	ldr	r1, [pc, #52]	; (8003d4c <I2SEx_TxISR_I2SExt+0x90>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_TxISR_I2SExt+0x64>
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <I2SEx_TxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_TxISR_I2SExt+0x68>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff81 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40003400 	.word	0x40003400

08003d54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68d8      	ldr	r0, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	1c99      	adds	r1, r3, #2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d6c:	b282      	uxth	r2, r0
 8003d6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d113      	bne.n	8003db0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ff4a 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a20      	ldr	r2, [pc, #128]	; (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <I2SEx_RxISR_I2SExt+0x16>
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003dcc:	e001      	b.n	8003dd2 <I2SEx_RxISR_I2SExt+0x1a>
 8003dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd2:	68d8      	ldr	r0, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	1c99      	adds	r1, r3, #2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dde:	b282      	uxth	r2, r0
 8003de0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d121      	bne.n	8003e3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <I2SEx_RxISR_I2SExt+0x50>
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003e06:	e001      	b.n	8003e0c <I2SEx_RxISR_I2SExt+0x54>
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	490d      	ldr	r1, [pc, #52]	; (8003e48 <I2SEx_RxISR_I2SExt+0x90>)
 8003e14:	428b      	cmp	r3, r1
 8003e16:	d101      	bne.n	8003e1c <I2SEx_RxISR_I2SExt+0x64>
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <I2SEx_RxISR_I2SExt+0x94>)
 8003e1a:	e001      	b.n	8003e20 <I2SEx_RxISR_I2SExt+0x68>
 8003e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff03 	bl	8003c44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40003800 	.word	0x40003800
 8003e4c:	40003400 	.word	0x40003400

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e25b      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6e:	4ba3      	ldr	r3, [pc, #652]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b99      	ldr	r3, [pc, #612]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e236      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b91      	ldr	r3, [pc, #580]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a90      	ldr	r2, [pc, #576]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b8b      	ldr	r3, [pc, #556]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a8a      	ldr	r2, [pc, #552]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a87      	ldr	r2, [pc, #540]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b84      	ldr	r3, [pc, #528]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a83      	ldr	r2, [pc, #524]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b81      	ldr	r3, [pc, #516]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a80      	ldr	r2, [pc, #512]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd f9a0 	bl	800124c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd f99c 	bl	800124c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1fb      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd f98c 	bl	800124c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd f988 	bl	800124c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1e7      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b6c      	ldr	r3, [pc, #432]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f66:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b5f      	ldr	r3, [pc, #380]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b5c      	ldr	r3, [pc, #368]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1bb      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b56      	ldr	r3, [pc, #344]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4952      	ldr	r1, [pc, #328]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <HAL_RCC_OscConfig+0x2b0>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd f941 	bl	800124c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd f93d 	bl	800124c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e19c      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b46      	ldr	r3, [pc, #280]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b43      	ldr	r3, [pc, #268]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4940      	ldr	r1, [pc, #256]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b3f      	ldr	r3, [pc, #252]	; (8004100 <HAL_RCC_OscConfig+0x2b0>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd f920 	bl	800124c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd f91c 	bl	800124c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e17b      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b36      	ldr	r3, [pc, #216]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d030      	beq.n	800409c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_RCC_OscConfig+0x2b4>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd f900 	bl	800124c <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd f8fc 	bl	800124c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e15b      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
 800406e:	e015      	b.n	800409c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCC_OscConfig+0x2b4>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fd f8e9 	bl	800124c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd f8e5 	bl	800124c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e144      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 8004092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80a0 	beq.w	80041ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4a0e      	ldr	r2, [pc, #56]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ca:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x2b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d121      	bne.n	800412a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_RCC_OscConfig+0x2b8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a07      	ldr	r2, [pc, #28]	; (8004108 <HAL_RCC_OscConfig+0x2b8>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f2:	f7fd f8ab 	bl	800124c <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	e011      	b.n	800411e <HAL_RCC_OscConfig+0x2ce>
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	42470000 	.word	0x42470000
 8004104:	42470e80 	.word	0x42470e80
 8004108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fd f89e 	bl	800124c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e0fd      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b81      	ldr	r3, [pc, #516]	; (8004324 <HAL_RCC_OscConfig+0x4d4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x2f0>
 8004132:	4b7d      	ldr	r3, [pc, #500]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	4a7c      	ldr	r2, [pc, #496]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6713      	str	r3, [r2, #112]	; 0x70
 800413e:	e01c      	b.n	800417a <HAL_RCC_OscConfig+0x32a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b05      	cmp	r3, #5
 8004146:	d10c      	bne.n	8004162 <HAL_RCC_OscConfig+0x312>
 8004148:	4b77      	ldr	r3, [pc, #476]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a76      	ldr	r2, [pc, #472]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 800414e:	f043 0304 	orr.w	r3, r3, #4
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	4b74      	ldr	r3, [pc, #464]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4a73      	ldr	r2, [pc, #460]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6713      	str	r3, [r2, #112]	; 0x70
 8004160:	e00b      	b.n	800417a <HAL_RCC_OscConfig+0x32a>
 8004162:	4b71      	ldr	r3, [pc, #452]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a70      	ldr	r2, [pc, #448]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
 800416e:	4b6e      	ldr	r3, [pc, #440]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a6d      	ldr	r2, [pc, #436]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d015      	beq.n	80041ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fd f863 	bl	800124c <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fd f85f 	bl	800124c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0bc      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ee      	beq.n	800418a <HAL_RCC_OscConfig+0x33a>
 80041ac:	e014      	b.n	80041d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fd f84d 	bl	800124c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fd f849 	bl	800124c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0a6      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ee      	bne.n	80041b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041de:	4b52      	ldr	r3, [pc, #328]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a51      	ldr	r2, [pc, #324]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 80041e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8092 	beq.w	8004318 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041f4:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d05c      	beq.n	80042ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d141      	bne.n	800428c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004208:	4b48      	ldr	r3, [pc, #288]	; (800432c <HAL_RCC_OscConfig+0x4dc>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fd f81d 	bl	800124c <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004216:	f7fd f819 	bl	800124c <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e078      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004228:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	019b      	lsls	r3, r3, #6
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	3b01      	subs	r3, #1
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	4933      	ldr	r1, [pc, #204]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425e:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_RCC_OscConfig+0x4dc>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fc fff2 	bl	800124c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426c:	f7fc ffee 	bl	800124c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e04d      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x41c>
 800428a:	e045      	b.n	8004318 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428c:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_RCC_OscConfig+0x4dc>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fc ffdb 	bl	800124c <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429a:	f7fc ffd7 	bl	800124c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e036      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ac:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f0      	bne.n	800429a <HAL_RCC_OscConfig+0x44a>
 80042b8:	e02e      	b.n	8004318 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e029      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <HAL_RCC_OscConfig+0x4d8>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d115      	bne.n	8004314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10d      	bne.n	8004314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d106      	bne.n	8004314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40007000 	.word	0x40007000
 8004328:	40023800 	.word	0x40023800
 800432c:	42470060 	.word	0x42470060

08004330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0cc      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b68      	ldr	r3, [pc, #416]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d90c      	bls.n	800436c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b65      	ldr	r3, [pc, #404]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b63      	ldr	r3, [pc, #396]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0b8      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004384:	4b59      	ldr	r3, [pc, #356]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a58      	ldr	r2, [pc, #352]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800438e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800439c:	4b53      	ldr	r3, [pc, #332]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a52      	ldr	r2, [pc, #328]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a8:	4b50      	ldr	r3, [pc, #320]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	494d      	ldr	r1, [pc, #308]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d044      	beq.n	8004450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d107      	bne.n	80043de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b47      	ldr	r3, [pc, #284]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d119      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e07f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d003      	beq.n	80043ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ee:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e067      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 0203 	bic.w	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4934      	ldr	r1, [pc, #208]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004420:	f7fc ff14 	bl	800124c <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	e00a      	b.n	800443e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004428:	f7fc ff10 	bl	800124c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e04f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 020c 	and.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	429a      	cmp	r2, r3
 800444e:	d1eb      	bne.n	8004428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d20c      	bcs.n	8004478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e032      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004484:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4916      	ldr	r1, [pc, #88]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	490e      	ldr	r1, [pc, #56]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044b6:	f000 f821 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80044ba:	4601      	mov	r1, r0
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	5cd3      	ldrb	r3, [r2, r3]
 80044ca:	fa21 f303 	lsr.w	r3, r1, r3
 80044ce:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fe74 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023c00 	.word	0x40023c00
 80044ec:	40023800 	.word	0x40023800
 80044f0:	0800a164 	.word	0x0800a164
 80044f4:	20000000 	.word	0x20000000
 80044f8:	20000004 	.word	0x20000004

080044fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	2300      	movs	r3, #0
 800450c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b04      	cmp	r3, #4
 800451c:	d007      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x32>
 800451e:	2b08      	cmp	r3, #8
 8004520:	d008      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x38>
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80b4 	bne.w	8004690 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800452a:	60bb      	str	r3, [r7, #8]
       break;
 800452c:	e0b3      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800452e:	4b5e      	ldr	r3, [pc, #376]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004530:	60bb      	str	r3, [r7, #8]
      break;
 8004532:	e0b0      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4b5a      	ldr	r3, [pc, #360]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800453e:	4b58      	ldr	r3, [pc, #352]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d04a      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b55      	ldr	r3, [pc, #340]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	f04f 0400 	mov.w	r4, #0
 8004554:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	ea03 0501 	and.w	r5, r3, r1
 8004560:	ea04 0602 	and.w	r6, r4, r2
 8004564:	4629      	mov	r1, r5
 8004566:	4632      	mov	r2, r6
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	f04f 0400 	mov.w	r4, #0
 8004570:	0154      	lsls	r4, r2, #5
 8004572:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004576:	014b      	lsls	r3, r1, #5
 8004578:	4619      	mov	r1, r3
 800457a:	4622      	mov	r2, r4
 800457c:	1b49      	subs	r1, r1, r5
 800457e:	eb62 0206 	sbc.w	r2, r2, r6
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	0194      	lsls	r4, r2, #6
 800458c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004590:	018b      	lsls	r3, r1, #6
 8004592:	1a5b      	subs	r3, r3, r1
 8004594:	eb64 0402 	sbc.w	r4, r4, r2
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	00e2      	lsls	r2, r4, #3
 80045a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045a6:	00d9      	lsls	r1, r3, #3
 80045a8:	460b      	mov	r3, r1
 80045aa:	4614      	mov	r4, r2
 80045ac:	195b      	adds	r3, r3, r5
 80045ae:	eb44 0406 	adc.w	r4, r4, r6
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	0262      	lsls	r2, r4, #9
 80045bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045c0:	0259      	lsls	r1, r3, #9
 80045c2:	460b      	mov	r3, r1
 80045c4:	4614      	mov	r4, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	4621      	mov	r1, r4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	461a      	mov	r2, r3
 80045d2:	4623      	mov	r3, r4
 80045d4:	f7fb fdf8 	bl	80001c8 <__aeabi_uldivmod>
 80045d8:	4603      	mov	r3, r0
 80045da:	460c      	mov	r4, r1
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e049      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e0:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	f04f 0400 	mov.w	r4, #0
 80045ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	ea03 0501 	and.w	r5, r3, r1
 80045f6:	ea04 0602 	and.w	r6, r4, r2
 80045fa:	4629      	mov	r1, r5
 80045fc:	4632      	mov	r2, r6
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	f04f 0400 	mov.w	r4, #0
 8004606:	0154      	lsls	r4, r2, #5
 8004608:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800460c:	014b      	lsls	r3, r1, #5
 800460e:	4619      	mov	r1, r3
 8004610:	4622      	mov	r2, r4
 8004612:	1b49      	subs	r1, r1, r5
 8004614:	eb62 0206 	sbc.w	r2, r2, r6
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	f04f 0400 	mov.w	r4, #0
 8004620:	0194      	lsls	r4, r2, #6
 8004622:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004626:	018b      	lsls	r3, r1, #6
 8004628:	1a5b      	subs	r3, r3, r1
 800462a:	eb64 0402 	sbc.w	r4, r4, r2
 800462e:	f04f 0100 	mov.w	r1, #0
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	00e2      	lsls	r2, r4, #3
 8004638:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800463c:	00d9      	lsls	r1, r3, #3
 800463e:	460b      	mov	r3, r1
 8004640:	4614      	mov	r4, r2
 8004642:	195b      	adds	r3, r3, r5
 8004644:	eb44 0406 	adc.w	r4, r4, r6
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	02a2      	lsls	r2, r4, #10
 8004652:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004656:	0299      	lsls	r1, r3, #10
 8004658:	460b      	mov	r3, r1
 800465a:	4614      	mov	r4, r2
 800465c:	4618      	mov	r0, r3
 800465e:	4621      	mov	r1, r4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f04f 0400 	mov.w	r4, #0
 8004666:	461a      	mov	r2, r3
 8004668:	4623      	mov	r3, r4
 800466a:	f7fb fdad 	bl	80001c8 <__aeabi_uldivmod>
 800466e:	4603      	mov	r3, r0
 8004670:	460c      	mov	r4, r1
 8004672:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	3301      	adds	r3, #1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	60bb      	str	r3, [r7, #8]
      break;
 800468e:	e002      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004692:	60bb      	str	r3, [r7, #8]
      break;
 8004694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004696:	68bb      	ldr	r3, [r7, #8]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	007a1200 	.word	0x007a1200

080046ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000000 	.word	0x20000000

080046c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046c8:	f7ff fff0 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046cc:	4601      	mov	r1, r0
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0a9b      	lsrs	r3, r3, #10
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4a03      	ldr	r2, [pc, #12]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046da:	5cd3      	ldrb	r3, [r2, r3]
 80046dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40023800 	.word	0x40023800
 80046e8:	0800a174 	.word	0x0800a174

080046ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046f0:	f7ff ffdc 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046f4:	4601      	mov	r1, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	0b5b      	lsrs	r3, r3, #13
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4a03      	ldr	r2, [pc, #12]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	0800a174 	.word	0x0800a174

08004714 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004738:	2b00      	cmp	r3, #0
 800473a:	d035      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800473c:	4b62      	ldr	r3, [pc, #392]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004742:	f7fc fd83 	bl	800124c <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004748:	e008      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800474a:	f7fc fd7f 	bl	800124c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0b0      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800475c:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	019a      	lsls	r2, r3, #6
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	071b      	lsls	r3, r3, #28
 8004774:	4955      	ldr	r1, [pc, #340]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800477c:	4b52      	ldr	r3, [pc, #328]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004782:	f7fc fd63 	bl	800124c <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800478a:	f7fc fd5f 	bl	800124c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e090      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800479c:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8083 	beq.w	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	4b44      	ldr	r3, [pc, #272]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	4a43      	ldr	r2, [pc, #268]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6413      	str	r3, [r2, #64]	; 0x40
 80047c6:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047d2:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3e      	ldr	r2, [pc, #248]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047de:	f7fc fd35 	bl	800124c <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fc fd31 	bl	800124c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e062      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047f8:	4b35      	ldr	r3, [pc, #212]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004804:	4b31      	ldr	r3, [pc, #196]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02f      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	429a      	cmp	r2, r3
 8004820:	d028      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004822:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004832:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004838:	4a24      	ldr	r2, [pc, #144]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800483e:	4b23      	ldr	r3, [pc, #140]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b01      	cmp	r3, #1
 8004848:	d114      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800484a:	f7fc fcff 	bl	800124c <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	e00a      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fc fcfb 	bl	800124c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e02a      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	4b18      	ldr	r3, [pc, #96]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ee      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004880:	d10d      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	490d      	ldr	r1, [pc, #52]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]
 800489c:	e005      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048a8:	6093      	str	r3, [r2, #8]
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b6:	4905      	ldr	r1, [pc, #20]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	42470068 	.word	0x42470068
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42470e40 	.word	0x42470e40

080048d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d13d      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d004      	beq.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004906:	2b01      	cmp	r3, #1
 8004908:	d12f      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800490a:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800490c:	617b      	str	r3, [r7, #20]
          break;
 800490e:	e02f      	b.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800491c:	d108      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800491e:	4b18      	ldr	r3, [pc, #96]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004926:	4a18      	ldr	r2, [pc, #96]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e007      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	4a14      	ldr	r2, [pc, #80]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800493a:	fbb2 f3f3 	udiv	r3, r2, r3
 800493e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495a:	0f1b      	lsrs	r3, r3, #28
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	fbb2 f3f3 	udiv	r3, r2, r3
 8004966:	617b      	str	r3, [r7, #20]
          break;
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
          break;
 800496e:	bf00      	nop
        }
      }
      break;
 8004970:	bf00      	nop
    }
  }
  return frequency;
 8004972:	697b      	ldr	r3, [r7, #20]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40023800 	.word	0x40023800
 8004984:	00bb8000 	.word	0x00bb8000
 8004988:	007a1200 	.word	0x007a1200
 800498c:	00f42400 	.word	0x00f42400

08004990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e056      	b.n	8004a50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fc f8a1 	bl	8000b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	ea42 0103 	orr.w	r1, r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	0c1b      	lsrs	r3, r3, #16
 8004a20:	f003 0104 	and.w	r1, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e01d      	b.n	8004aa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fa70 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f000 faf6 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e01d      	b.n	8004afc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f815 	bl	8004b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f000 facb 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0202 	mvn.w	r2, #2
 8004b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa75 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa67 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa78 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0204 	mvn.w	r2, #4
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa4b 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa3d 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa4e 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0208 	mvn.w	r2, #8
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa21 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa13 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fa24 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0210 	mvn.w	r2, #16
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2208      	movs	r2, #8
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9f7 	bl	800504a <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f9e9 	bl	8005036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f9fa 	bl	800505e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10e      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d107      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0201 	mvn.w	r2, #1
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f9c3 	bl	8005022 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb4:	2b80      	cmp	r3, #128	; 0x80
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fd50 	bl	8005768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f9bf 	bl	8005072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0220 	mvn.w	r2, #32
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fd1a 	bl	8005754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e0b4      	b.n	8004eac <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	f200 809f 	bhi.w	8004e98 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004e99 	.word	0x08004e99
 8004d68:	08004e99 	.word	0x08004e99
 8004d6c:	08004e99 	.word	0x08004e99
 8004d70:	08004dd5 	.word	0x08004dd5
 8004d74:	08004e99 	.word	0x08004e99
 8004d78:	08004e99 	.word	0x08004e99
 8004d7c:	08004e99 	.word	0x08004e99
 8004d80:	08004e17 	.word	0x08004e17
 8004d84:	08004e99 	.word	0x08004e99
 8004d88:	08004e99 	.word	0x08004e99
 8004d8c:	08004e99 	.word	0x08004e99
 8004d90:	08004e57 	.word	0x08004e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fa14 	bl	80051c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	619a      	str	r2, [r3, #24]
      break;
 8004dd2:	e062      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa64 	bl	80052a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      break;
 8004e14:	e041      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fab9 	bl	8005394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0208 	orr.w	r2, r2, #8
 8004e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0204 	bic.w	r2, r2, #4
 8004e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69d9      	ldr	r1, [r3, #28]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
      break;
 8004e54:	e021      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fb0d 	bl	800547c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	61da      	str	r2, [r3, #28]
      break;
 8004e96:	e000      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004e98:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_ConfigClockSource+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e0a6      	b.n	800501a <HAL_TIM_ConfigClockSource+0x166>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d067      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0x120>
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d80b      	bhi.n	8004f20 <HAL_TIM_ConfigClockSource+0x6c>
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d073      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0x140>
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d802      	bhi.n	8004f16 <HAL_TIM_ConfigClockSource+0x62>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d06f      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f14:	e078      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d06c      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0x140>
 8004f1a:	2b30      	cmp	r3, #48	; 0x30
 8004f1c:	d06a      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f1e:	e073      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f20:	2b70      	cmp	r3, #112	; 0x70
 8004f22:	d00d      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x8c>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d804      	bhi.n	8004f32 <HAL_TIM_ConfigClockSource+0x7e>
 8004f28:	2b50      	cmp	r3, #80	; 0x50
 8004f2a:	d033      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0xe0>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d041      	beq.n	8004fb4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f30:	e06a      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d066      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x152>
 8004f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3c:	d017      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f3e:	e063      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6899      	ldr	r1, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f000 fb64 	bl	800561c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	609a      	str	r2, [r3, #8]
      break;
 8004f6c:	e04c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6899      	ldr	r1, [r3, #8]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f000 fb4d 	bl	800561c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f90:	609a      	str	r2, [r3, #8]
      break;
 8004f92:	e039      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f000 fac1 	bl	8005528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2150      	movs	r1, #80	; 0x50
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fb1a 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 8004fb2:	e029      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f000 fae0 	bl	8005586 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2160      	movs	r1, #96	; 0x60
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fb0a 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 8004fd2:	e019      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	f000 faa1 	bl	8005528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2140      	movs	r1, #64	; 0x40
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fafa 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 8004ff2:	e009      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f000 faf1 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 8005004:	e000      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a40      	ldr	r2, [pc, #256]	; (800519c <TIM_Base_SetConfig+0x114>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d00f      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3d      	ldr	r2, [pc, #244]	; (80051a0 <TIM_Base_SetConfig+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <TIM_Base_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <TIM_Base_SetConfig+0x120>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3a      	ldr	r2, [pc, #232]	; (80051ac <TIM_Base_SetConfig+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d108      	bne.n	80050da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	; (800519c <TIM_Base_SetConfig+0x114>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d027      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <TIM_Base_SetConfig+0x118>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d023      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <TIM_Base_SetConfig+0x11c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01f      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <TIM_Base_SetConfig+0x120>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a29      	ldr	r2, [pc, #164]	; (80051ac <TIM_Base_SetConfig+0x124>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d017      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <TIM_Base_SetConfig+0x128>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <TIM_Base_SetConfig+0x12c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <TIM_Base_SetConfig+0x130>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a25      	ldr	r2, [pc, #148]	; (80051bc <TIM_Base_SetConfig+0x134>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <TIM_Base_SetConfig+0x138>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a23      	ldr	r2, [pc, #140]	; (80051c4 <TIM_Base_SetConfig+0x13c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <TIM_Base_SetConfig+0x114>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0xf8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <TIM_Base_SetConfig+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d103      	bne.n	8005188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	615a      	str	r2, [r3, #20]
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40010000 	.word	0x40010000
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800
 80051a8:	40000c00 	.word	0x40000c00
 80051ac:	40010400 	.word	0x40010400
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800
 80051bc:	40001800 	.word	0x40001800
 80051c0:	40001c00 	.word	0x40001c00
 80051c4:	40002000 	.word	0x40002000

080051c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0302 	bic.w	r3, r3, #2
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <TIM_OC1_SetConfig+0xd8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC1_SetConfig+0x64>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <TIM_OC1_SetConfig+0xdc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10c      	bne.n	8005246 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0308 	bic.w	r3, r3, #8
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0304 	bic.w	r3, r3, #4
 8005244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <TIM_OC1_SetConfig+0xd8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC1_SetConfig+0x8e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <TIM_OC1_SetConfig+0xdc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40010400 	.word	0x40010400

080052a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0210 	bic.w	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a22      	ldr	r2, [pc, #136]	; (800538c <TIM_OC2_SetConfig+0xe4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC2_SetConfig+0x68>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a21      	ldr	r2, [pc, #132]	; (8005390 <TIM_OC2_SetConfig+0xe8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10d      	bne.n	800532c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	; (800538c <TIM_OC2_SetConfig+0xe4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC2_SetConfig+0x94>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <TIM_OC2_SetConfig+0xe8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d113      	bne.n	8005364 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800534a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40010400 	.word	0x40010400

08005394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a21      	ldr	r2, [pc, #132]	; (8005474 <TIM_OC3_SetConfig+0xe0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_OC3_SetConfig+0x66>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a20      	ldr	r2, [pc, #128]	; (8005478 <TIM_OC3_SetConfig+0xe4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10d      	bne.n	8005416 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <TIM_OC3_SetConfig+0xe0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC3_SetConfig+0x92>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <TIM_OC3_SetConfig+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d113      	bne.n	800544e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800542c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40010000 	.word	0x40010000
 8005478:	40010400 	.word	0x40010400

0800547c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	031b      	lsls	r3, r3, #12
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <TIM_OC4_SetConfig+0xa4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC4_SetConfig+0x68>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a11      	ldr	r2, [pc, #68]	; (8005524 <TIM_OC4_SetConfig+0xa8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d109      	bne.n	80054f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400

08005528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 030a 	bic.w	r3, r3, #10
 8005564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f023 0210 	bic.w	r2, r3, #16
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	f043 0307 	orr.w	r3, r3, #7
 8005608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	431a      	orrs	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e05a      	b.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a21      	ldr	r2, [pc, #132]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d022      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d01d      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1d      	ldr	r2, [pc, #116]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d018      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a17      	ldr	r2, [pc, #92]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10c      	bne.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4313      	orrs	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40010000 	.word	0x40010000
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40010400 	.word	0x40010400
 800574c:	40014000 	.word	0x40014000
 8005750:	40001800 	.word	0x40001800

08005754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e03f      	b.n	800580e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fc7a 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb4b 	bl	8005e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b088      	sub	sp, #32
 800581a:	af02      	add	r7, sp, #8
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b20      	cmp	r3, #32
 8005834:	f040 8083 	bne.w	800593e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_UART_Transmit+0x2e>
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e07b      	b.n	8005940 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_UART_Transmit+0x40>
 8005852:	2302      	movs	r3, #2
 8005854:	e074      	b.n	8005940 <HAL_UART_Transmit+0x12a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2221      	movs	r2, #33	; 0x21
 8005868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800586c:	f7fb fcee 	bl	800124c <HAL_GetTick>
 8005870:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005886:	e042      	b.n	800590e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589e:	d122      	bne.n	80058e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f96a 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e042      	b.n	8005940 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	3302      	adds	r3, #2
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	e017      	b.n	800590e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	3301      	adds	r3, #1
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	e013      	b.n	800590e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f947 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e01f      	b.n	8005940 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	60ba      	str	r2, [r7, #8]
 8005906:	781a      	ldrb	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1b7      	bne.n	8005888 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2200      	movs	r2, #0
 8005920:	2140      	movs	r1, #64	; 0x40
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f92e 	bl	8005b84 <UART_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e006      	b.n	8005940 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	e000      	b.n	8005940 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800593e:	2302      	movs	r3, #2
  }
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_UART_IRQHandler+0x52>
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9e0 	bl	8005d58 <UART_Receive_IT>
      return;
 8005998:	e0d1      	b.n	8005b3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80b0 	beq.w	8005b02 <HAL_UART_IRQHandler+0x1ba>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_UART_IRQHandler+0x70>
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80a5 	beq.w	8005b02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_UART_IRQHandler+0x90>
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_UART_IRQHandler+0xb0>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f0:	f043 0202 	orr.w	r2, r3, #2
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_UART_IRQHandler+0xd0>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	f043 0204 	orr.w	r2, r3, #4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00f      	beq.n	8005a42 <HAL_UART_IRQHandler+0xfa>
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <HAL_UART_IRQHandler+0xee>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	f043 0208 	orr.w	r2, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d078      	beq.n	8005b3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_UART_IRQHandler+0x11c>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f97a 	bl	8005d58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <HAL_UART_IRQHandler+0x144>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d031      	beq.n	8005af0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8c3 	bl	8005c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d123      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d013      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <HAL_UART_IRQHandler+0x1fc>)
 8005abe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fb fd00 	bl	80014ca <HAL_DMA_Abort_IT>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d016      	beq.n	8005afe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ada:	4610      	mov	r0, r2
 8005adc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ade:	e00e      	b.n	8005afe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f845 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae6:	e00a      	b.n	8005afe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f841 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aee:	e006      	b.n	8005afe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f83d 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005afc:	e01e      	b.n	8005b3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afe:	bf00      	nop
    return;
 8005b00:	e01c      	b.n	8005b3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_UART_IRQHandler+0x1d6>
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8b0 	bl	8005c7c <UART_Transmit_IT>
    return;
 8005b1c:	e00f      	b.n	8005b3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_UART_IRQHandler+0x1f6>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8f8 	bl	8005d28 <UART_EndTransmit_IT>
    return;
 8005b38:	bf00      	nop
 8005b3a:	e000      	b.n	8005b3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005b3c:	bf00      	nop
  }
}
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	08005c55 	.word	0x08005c55

08005b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b94:	e02c      	b.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d028      	beq.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba4:	f7fb fb52 	bl	800124c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d21d      	bcs.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e00f      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d0c3      	beq.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff ff7e 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b21      	cmp	r3, #33	; 0x21
 8005c8e:	d144      	bne.n	8005d1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c98:	d11a      	bne.n	8005cd0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	1c9a      	adds	r2, r3, #2
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]
 8005cc2:	e00e      	b.n	8005ce2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	621a      	str	r2, [r3, #32]
 8005cce:	e008      	b.n	8005ce2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	1c59      	adds	r1, r3, #1
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6211      	str	r1, [r2, #32]
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10f      	bne.n	8005d16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fefd 	bl	8005b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b22      	cmp	r3, #34	; 0x22
 8005d6a:	d171      	bne.n	8005e50 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d74:	d123      	bne.n	8005dbe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10e      	bne.n	8005da2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	1c9a      	adds	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005da0:	e029      	b.n	8005df6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
 8005dbc:	e01b      	b.n	8005df6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6858      	ldr	r0, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	1c59      	adds	r1, r3, #1
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6291      	str	r1, [r2, #40]	; 0x28
 8005dd6:	b2c2      	uxtb	r2, r0
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e00c      	b.n	8005df6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	1c58      	adds	r0, r3, #1
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	6288      	str	r0, [r1, #40]	; 0x28
 8005dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4619      	mov	r1, r3
 8005e04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d120      	bne.n	8005e4c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0220 	bic.w	r2, r2, #32
 8005e18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff fe8a 	bl	8005b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e002      	b.n	8005e52 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e000      	b.n	8005e52 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005e50:	2302      	movs	r3, #2
  }
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e9e:	f023 030c 	bic.w	r3, r3, #12
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eca:	f040 818b 	bne.w	80061e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4ac1      	ldr	r2, [pc, #772]	; (80061d8 <UART_SetConfig+0x37c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d005      	beq.n	8005ee4 <UART_SetConfig+0x88>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4abf      	ldr	r2, [pc, #764]	; (80061dc <UART_SetConfig+0x380>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f040 80bd 	bne.w	800605e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ee4:	f7fe fc02 	bl	80046ec <HAL_RCC_GetPCLK2Freq>
 8005ee8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	461d      	mov	r5, r3
 8005eee:	f04f 0600 	mov.w	r6, #0
 8005ef2:	46a8      	mov	r8, r5
 8005ef4:	46b1      	mov	r9, r6
 8005ef6:	eb18 0308 	adds.w	r3, r8, r8
 8005efa:	eb49 0409 	adc.w	r4, r9, r9
 8005efe:	4698      	mov	r8, r3
 8005f00:	46a1      	mov	r9, r4
 8005f02:	eb18 0805 	adds.w	r8, r8, r5
 8005f06:	eb49 0906 	adc.w	r9, r9, r6
 8005f0a:	f04f 0100 	mov.w	r1, #0
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f1e:	4688      	mov	r8, r1
 8005f20:	4691      	mov	r9, r2
 8005f22:	eb18 0005 	adds.w	r0, r8, r5
 8005f26:	eb49 0106 	adc.w	r1, r9, r6
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	461d      	mov	r5, r3
 8005f30:	f04f 0600 	mov.w	r6, #0
 8005f34:	196b      	adds	r3, r5, r5
 8005f36:	eb46 0406 	adc.w	r4, r6, r6
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	f7fa f943 	bl	80001c8 <__aeabi_uldivmod>
 8005f42:	4603      	mov	r3, r0
 8005f44:	460c      	mov	r4, r1
 8005f46:	461a      	mov	r2, r3
 8005f48:	4ba5      	ldr	r3, [pc, #660]	; (80061e0 <UART_SetConfig+0x384>)
 8005f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	461d      	mov	r5, r3
 8005f58:	f04f 0600 	mov.w	r6, #0
 8005f5c:	46a9      	mov	r9, r5
 8005f5e:	46b2      	mov	sl, r6
 8005f60:	eb19 0309 	adds.w	r3, r9, r9
 8005f64:	eb4a 040a 	adc.w	r4, sl, sl
 8005f68:	4699      	mov	r9, r3
 8005f6a:	46a2      	mov	sl, r4
 8005f6c:	eb19 0905 	adds.w	r9, r9, r5
 8005f70:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f74:	f04f 0100 	mov.w	r1, #0
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f88:	4689      	mov	r9, r1
 8005f8a:	4692      	mov	sl, r2
 8005f8c:	eb19 0005 	adds.w	r0, r9, r5
 8005f90:	eb4a 0106 	adc.w	r1, sl, r6
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	461d      	mov	r5, r3
 8005f9a:	f04f 0600 	mov.w	r6, #0
 8005f9e:	196b      	adds	r3, r5, r5
 8005fa0:	eb46 0406 	adc.w	r4, r6, r6
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	f7fa f90e 	bl	80001c8 <__aeabi_uldivmod>
 8005fac:	4603      	mov	r3, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b8b      	ldr	r3, [pc, #556]	; (80061e0 <UART_SetConfig+0x384>)
 8005fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	2164      	movs	r1, #100	; 0x64
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	3332      	adds	r3, #50	; 0x32
 8005fc6:	4a86      	ldr	r2, [pc, #536]	; (80061e0 <UART_SetConfig+0x384>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fd4:	4498      	add	r8, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	461d      	mov	r5, r3
 8005fda:	f04f 0600 	mov.w	r6, #0
 8005fde:	46a9      	mov	r9, r5
 8005fe0:	46b2      	mov	sl, r6
 8005fe2:	eb19 0309 	adds.w	r3, r9, r9
 8005fe6:	eb4a 040a 	adc.w	r4, sl, sl
 8005fea:	4699      	mov	r9, r3
 8005fec:	46a2      	mov	sl, r4
 8005fee:	eb19 0905 	adds.w	r9, r9, r5
 8005ff2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006002:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006006:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800600a:	4689      	mov	r9, r1
 800600c:	4692      	mov	sl, r2
 800600e:	eb19 0005 	adds.w	r0, r9, r5
 8006012:	eb4a 0106 	adc.w	r1, sl, r6
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	461d      	mov	r5, r3
 800601c:	f04f 0600 	mov.w	r6, #0
 8006020:	196b      	adds	r3, r5, r5
 8006022:	eb46 0406 	adc.w	r4, r6, r6
 8006026:	461a      	mov	r2, r3
 8006028:	4623      	mov	r3, r4
 800602a:	f7fa f8cd 	bl	80001c8 <__aeabi_uldivmod>
 800602e:	4603      	mov	r3, r0
 8006030:	460c      	mov	r4, r1
 8006032:	461a      	mov	r2, r3
 8006034:	4b6a      	ldr	r3, [pc, #424]	; (80061e0 <UART_SetConfig+0x384>)
 8006036:	fba3 1302 	umull	r1, r3, r3, r2
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	2164      	movs	r1, #100	; 0x64
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	3332      	adds	r3, #50	; 0x32
 8006048:	4a65      	ldr	r2, [pc, #404]	; (80061e0 <UART_SetConfig+0x384>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	f003 0207 	and.w	r2, r3, #7
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4442      	add	r2, r8
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	e26f      	b.n	800653e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800605e:	f7fe fb31 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8006062:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	461d      	mov	r5, r3
 8006068:	f04f 0600 	mov.w	r6, #0
 800606c:	46a8      	mov	r8, r5
 800606e:	46b1      	mov	r9, r6
 8006070:	eb18 0308 	adds.w	r3, r8, r8
 8006074:	eb49 0409 	adc.w	r4, r9, r9
 8006078:	4698      	mov	r8, r3
 800607a:	46a1      	mov	r9, r4
 800607c:	eb18 0805 	adds.w	r8, r8, r5
 8006080:	eb49 0906 	adc.w	r9, r9, r6
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006090:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006094:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006098:	4688      	mov	r8, r1
 800609a:	4691      	mov	r9, r2
 800609c:	eb18 0005 	adds.w	r0, r8, r5
 80060a0:	eb49 0106 	adc.w	r1, r9, r6
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	461d      	mov	r5, r3
 80060aa:	f04f 0600 	mov.w	r6, #0
 80060ae:	196b      	adds	r3, r5, r5
 80060b0:	eb46 0406 	adc.w	r4, r6, r6
 80060b4:	461a      	mov	r2, r3
 80060b6:	4623      	mov	r3, r4
 80060b8:	f7fa f886 	bl	80001c8 <__aeabi_uldivmod>
 80060bc:	4603      	mov	r3, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	461a      	mov	r2, r3
 80060c2:	4b47      	ldr	r3, [pc, #284]	; (80061e0 <UART_SetConfig+0x384>)
 80060c4:	fba3 2302 	umull	r2, r3, r3, r2
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	461d      	mov	r5, r3
 80060d2:	f04f 0600 	mov.w	r6, #0
 80060d6:	46a9      	mov	r9, r5
 80060d8:	46b2      	mov	sl, r6
 80060da:	eb19 0309 	adds.w	r3, r9, r9
 80060de:	eb4a 040a 	adc.w	r4, sl, sl
 80060e2:	4699      	mov	r9, r3
 80060e4:	46a2      	mov	sl, r4
 80060e6:	eb19 0905 	adds.w	r9, r9, r5
 80060ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80060ee:	f04f 0100 	mov.w	r1, #0
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006102:	4689      	mov	r9, r1
 8006104:	4692      	mov	sl, r2
 8006106:	eb19 0005 	adds.w	r0, r9, r5
 800610a:	eb4a 0106 	adc.w	r1, sl, r6
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	461d      	mov	r5, r3
 8006114:	f04f 0600 	mov.w	r6, #0
 8006118:	196b      	adds	r3, r5, r5
 800611a:	eb46 0406 	adc.w	r4, r6, r6
 800611e:	461a      	mov	r2, r3
 8006120:	4623      	mov	r3, r4
 8006122:	f7fa f851 	bl	80001c8 <__aeabi_uldivmod>
 8006126:	4603      	mov	r3, r0
 8006128:	460c      	mov	r4, r1
 800612a:	461a      	mov	r2, r3
 800612c:	4b2c      	ldr	r3, [pc, #176]	; (80061e0 <UART_SetConfig+0x384>)
 800612e:	fba3 1302 	umull	r1, r3, r3, r2
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	2164      	movs	r1, #100	; 0x64
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	3332      	adds	r3, #50	; 0x32
 8006140:	4a27      	ldr	r2, [pc, #156]	; (80061e0 <UART_SetConfig+0x384>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800614e:	4498      	add	r8, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	461d      	mov	r5, r3
 8006154:	f04f 0600 	mov.w	r6, #0
 8006158:	46a9      	mov	r9, r5
 800615a:	46b2      	mov	sl, r6
 800615c:	eb19 0309 	adds.w	r3, r9, r9
 8006160:	eb4a 040a 	adc.w	r4, sl, sl
 8006164:	4699      	mov	r9, r3
 8006166:	46a2      	mov	sl, r4
 8006168:	eb19 0905 	adds.w	r9, r9, r5
 800616c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006170:	f04f 0100 	mov.w	r1, #0
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800617c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006180:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006184:	4689      	mov	r9, r1
 8006186:	4692      	mov	sl, r2
 8006188:	eb19 0005 	adds.w	r0, r9, r5
 800618c:	eb4a 0106 	adc.w	r1, sl, r6
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	461d      	mov	r5, r3
 8006196:	f04f 0600 	mov.w	r6, #0
 800619a:	196b      	adds	r3, r5, r5
 800619c:	eb46 0406 	adc.w	r4, r6, r6
 80061a0:	461a      	mov	r2, r3
 80061a2:	4623      	mov	r3, r4
 80061a4:	f7fa f810 	bl	80001c8 <__aeabi_uldivmod>
 80061a8:	4603      	mov	r3, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <UART_SetConfig+0x384>)
 80061b0:	fba3 1302 	umull	r1, r3, r3, r2
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	2164      	movs	r1, #100	; 0x64
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	3332      	adds	r3, #50	; 0x32
 80061c2:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <UART_SetConfig+0x384>)
 80061c4:	fba2 2303 	umull	r2, r3, r2, r3
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	f003 0207 	and.w	r2, r3, #7
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4442      	add	r2, r8
 80061d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061d6:	e1b2      	b.n	800653e <UART_SetConfig+0x6e2>
 80061d8:	40011000 	.word	0x40011000
 80061dc:	40011400 	.word	0x40011400
 80061e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4ad7      	ldr	r2, [pc, #860]	; (8006548 <UART_SetConfig+0x6ec>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d005      	beq.n	80061fa <UART_SetConfig+0x39e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4ad6      	ldr	r2, [pc, #856]	; (800654c <UART_SetConfig+0x6f0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	f040 80d1 	bne.w	800639c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061fa:	f7fe fa77 	bl	80046ec <HAL_RCC_GetPCLK2Freq>
 80061fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	469a      	mov	sl, r3
 8006204:	f04f 0b00 	mov.w	fp, #0
 8006208:	46d0      	mov	r8, sl
 800620a:	46d9      	mov	r9, fp
 800620c:	eb18 0308 	adds.w	r3, r8, r8
 8006210:	eb49 0409 	adc.w	r4, r9, r9
 8006214:	4698      	mov	r8, r3
 8006216:	46a1      	mov	r9, r4
 8006218:	eb18 080a 	adds.w	r8, r8, sl
 800621c:	eb49 090b 	adc.w	r9, r9, fp
 8006220:	f04f 0100 	mov.w	r1, #0
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800622c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006230:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006234:	4688      	mov	r8, r1
 8006236:	4691      	mov	r9, r2
 8006238:	eb1a 0508 	adds.w	r5, sl, r8
 800623c:	eb4b 0609 	adc.w	r6, fp, r9
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4619      	mov	r1, r3
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	f04f 0400 	mov.w	r4, #0
 8006252:	0094      	lsls	r4, r2, #2
 8006254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006258:	008b      	lsls	r3, r1, #2
 800625a:	461a      	mov	r2, r3
 800625c:	4623      	mov	r3, r4
 800625e:	4628      	mov	r0, r5
 8006260:	4631      	mov	r1, r6
 8006262:	f7f9 ffb1 	bl	80001c8 <__aeabi_uldivmod>
 8006266:	4603      	mov	r3, r0
 8006268:	460c      	mov	r4, r1
 800626a:	461a      	mov	r2, r3
 800626c:	4bb8      	ldr	r3, [pc, #736]	; (8006550 <UART_SetConfig+0x6f4>)
 800626e:	fba3 2302 	umull	r2, r3, r3, r2
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	469b      	mov	fp, r3
 800627c:	f04f 0c00 	mov.w	ip, #0
 8006280:	46d9      	mov	r9, fp
 8006282:	46e2      	mov	sl, ip
 8006284:	eb19 0309 	adds.w	r3, r9, r9
 8006288:	eb4a 040a 	adc.w	r4, sl, sl
 800628c:	4699      	mov	r9, r3
 800628e:	46a2      	mov	sl, r4
 8006290:	eb19 090b 	adds.w	r9, r9, fp
 8006294:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006298:	f04f 0100 	mov.w	r1, #0
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ac:	4689      	mov	r9, r1
 80062ae:	4692      	mov	sl, r2
 80062b0:	eb1b 0509 	adds.w	r5, fp, r9
 80062b4:	eb4c 060a 	adc.w	r6, ip, sl
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	4619      	mov	r1, r3
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	f04f 0400 	mov.w	r4, #0
 80062ca:	0094      	lsls	r4, r2, #2
 80062cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	461a      	mov	r2, r3
 80062d4:	4623      	mov	r3, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	4631      	mov	r1, r6
 80062da:	f7f9 ff75 	bl	80001c8 <__aeabi_uldivmod>
 80062de:	4603      	mov	r3, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	461a      	mov	r2, r3
 80062e4:	4b9a      	ldr	r3, [pc, #616]	; (8006550 <UART_SetConfig+0x6f4>)
 80062e6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	2164      	movs	r1, #100	; 0x64
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	3332      	adds	r3, #50	; 0x32
 80062f8:	4a95      	ldr	r2, [pc, #596]	; (8006550 <UART_SetConfig+0x6f4>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006304:	4498      	add	r8, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	469b      	mov	fp, r3
 800630a:	f04f 0c00 	mov.w	ip, #0
 800630e:	46d9      	mov	r9, fp
 8006310:	46e2      	mov	sl, ip
 8006312:	eb19 0309 	adds.w	r3, r9, r9
 8006316:	eb4a 040a 	adc.w	r4, sl, sl
 800631a:	4699      	mov	r9, r3
 800631c:	46a2      	mov	sl, r4
 800631e:	eb19 090b 	adds.w	r9, r9, fp
 8006322:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006326:	f04f 0100 	mov.w	r1, #0
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006332:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006336:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800633a:	4689      	mov	r9, r1
 800633c:	4692      	mov	sl, r2
 800633e:	eb1b 0509 	adds.w	r5, fp, r9
 8006342:	eb4c 060a 	adc.w	r6, ip, sl
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4619      	mov	r1, r3
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	f04f 0400 	mov.w	r4, #0
 8006358:	0094      	lsls	r4, r2, #2
 800635a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800635e:	008b      	lsls	r3, r1, #2
 8006360:	461a      	mov	r2, r3
 8006362:	4623      	mov	r3, r4
 8006364:	4628      	mov	r0, r5
 8006366:	4631      	mov	r1, r6
 8006368:	f7f9 ff2e 	bl	80001c8 <__aeabi_uldivmod>
 800636c:	4603      	mov	r3, r0
 800636e:	460c      	mov	r4, r1
 8006370:	461a      	mov	r2, r3
 8006372:	4b77      	ldr	r3, [pc, #476]	; (8006550 <UART_SetConfig+0x6f4>)
 8006374:	fba3 1302 	umull	r1, r3, r3, r2
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	2164      	movs	r1, #100	; 0x64
 800637c:	fb01 f303 	mul.w	r3, r1, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	3332      	adds	r3, #50	; 0x32
 8006386:	4a72      	ldr	r2, [pc, #456]	; (8006550 <UART_SetConfig+0x6f4>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4442      	add	r2, r8
 8006398:	609a      	str	r2, [r3, #8]
 800639a:	e0d0      	b.n	800653e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800639c:	f7fe f992 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 80063a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	469a      	mov	sl, r3
 80063a6:	f04f 0b00 	mov.w	fp, #0
 80063aa:	46d0      	mov	r8, sl
 80063ac:	46d9      	mov	r9, fp
 80063ae:	eb18 0308 	adds.w	r3, r8, r8
 80063b2:	eb49 0409 	adc.w	r4, r9, r9
 80063b6:	4698      	mov	r8, r3
 80063b8:	46a1      	mov	r9, r4
 80063ba:	eb18 080a 	adds.w	r8, r8, sl
 80063be:	eb49 090b 	adc.w	r9, r9, fp
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063d6:	4688      	mov	r8, r1
 80063d8:	4691      	mov	r9, r2
 80063da:	eb1a 0508 	adds.w	r5, sl, r8
 80063de:	eb4b 0609 	adc.w	r6, fp, r9
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4619      	mov	r1, r3
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	f04f 0400 	mov.w	r4, #0
 80063f4:	0094      	lsls	r4, r2, #2
 80063f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063fa:	008b      	lsls	r3, r1, #2
 80063fc:	461a      	mov	r2, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	4628      	mov	r0, r5
 8006402:	4631      	mov	r1, r6
 8006404:	f7f9 fee0 	bl	80001c8 <__aeabi_uldivmod>
 8006408:	4603      	mov	r3, r0
 800640a:	460c      	mov	r4, r1
 800640c:	461a      	mov	r2, r3
 800640e:	4b50      	ldr	r3, [pc, #320]	; (8006550 <UART_SetConfig+0x6f4>)
 8006410:	fba3 2302 	umull	r2, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	469b      	mov	fp, r3
 800641e:	f04f 0c00 	mov.w	ip, #0
 8006422:	46d9      	mov	r9, fp
 8006424:	46e2      	mov	sl, ip
 8006426:	eb19 0309 	adds.w	r3, r9, r9
 800642a:	eb4a 040a 	adc.w	r4, sl, sl
 800642e:	4699      	mov	r9, r3
 8006430:	46a2      	mov	sl, r4
 8006432:	eb19 090b 	adds.w	r9, r9, fp
 8006436:	eb4a 0a0c 	adc.w	sl, sl, ip
 800643a:	f04f 0100 	mov.w	r1, #0
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006446:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800644a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800644e:	4689      	mov	r9, r1
 8006450:	4692      	mov	sl, r2
 8006452:	eb1b 0509 	adds.w	r5, fp, r9
 8006456:	eb4c 060a 	adc.w	r6, ip, sl
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4619      	mov	r1, r3
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	f04f 0400 	mov.w	r4, #0
 800646c:	0094      	lsls	r4, r2, #2
 800646e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006472:	008b      	lsls	r3, r1, #2
 8006474:	461a      	mov	r2, r3
 8006476:	4623      	mov	r3, r4
 8006478:	4628      	mov	r0, r5
 800647a:	4631      	mov	r1, r6
 800647c:	f7f9 fea4 	bl	80001c8 <__aeabi_uldivmod>
 8006480:	4603      	mov	r3, r0
 8006482:	460c      	mov	r4, r1
 8006484:	461a      	mov	r2, r3
 8006486:	4b32      	ldr	r3, [pc, #200]	; (8006550 <UART_SetConfig+0x6f4>)
 8006488:	fba3 1302 	umull	r1, r3, r3, r2
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	2164      	movs	r1, #100	; 0x64
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	3332      	adds	r3, #50	; 0x32
 800649a:	4a2d      	ldr	r2, [pc, #180]	; (8006550 <UART_SetConfig+0x6f4>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064a6:	4498      	add	r8, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	469b      	mov	fp, r3
 80064ac:	f04f 0c00 	mov.w	ip, #0
 80064b0:	46d9      	mov	r9, fp
 80064b2:	46e2      	mov	sl, ip
 80064b4:	eb19 0309 	adds.w	r3, r9, r9
 80064b8:	eb4a 040a 	adc.w	r4, sl, sl
 80064bc:	4699      	mov	r9, r3
 80064be:	46a2      	mov	sl, r4
 80064c0:	eb19 090b 	adds.w	r9, r9, fp
 80064c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064c8:	f04f 0100 	mov.w	r1, #0
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064dc:	4689      	mov	r9, r1
 80064de:	4692      	mov	sl, r2
 80064e0:	eb1b 0509 	adds.w	r5, fp, r9
 80064e4:	eb4c 060a 	adc.w	r6, ip, sl
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4619      	mov	r1, r3
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	f04f 0400 	mov.w	r4, #0
 80064fa:	0094      	lsls	r4, r2, #2
 80064fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006500:	008b      	lsls	r3, r1, #2
 8006502:	461a      	mov	r2, r3
 8006504:	4623      	mov	r3, r4
 8006506:	4628      	mov	r0, r5
 8006508:	4631      	mov	r1, r6
 800650a:	f7f9 fe5d 	bl	80001c8 <__aeabi_uldivmod>
 800650e:	4603      	mov	r3, r0
 8006510:	460c      	mov	r4, r1
 8006512:	461a      	mov	r2, r3
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <UART_SetConfig+0x6f4>)
 8006516:	fba3 1302 	umull	r1, r3, r3, r2
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2164      	movs	r1, #100	; 0x64
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	3332      	adds	r3, #50	; 0x32
 8006528:	4a09      	ldr	r2, [pc, #36]	; (8006550 <UART_SetConfig+0x6f4>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4442      	add	r2, r8
 800653a:	609a      	str	r2, [r3, #8]
}
 800653c:	e7ff      	b.n	800653e <UART_SetConfig+0x6e2>
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006548:	40011000 	.word	0x40011000
 800654c:	40011400 	.word	0x40011400
 8006550:	51eb851f 	.word	0x51eb851f

08006554 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006554:	b084      	sub	sp, #16
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	f107 001c 	add.w	r0, r7, #28
 8006562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	2b01      	cmp	r3, #1
 800656a:	d122      	bne.n	80065b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d105      	bne.n	80065a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f94a 	bl	8006840 <USB_CoreReset>
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]
 80065b0:	e01a      	b.n	80065e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f93e 	bl	8006840 <USB_CoreReset>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
 80065da:	e005      	b.n	80065e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d10b      	bne.n	8006606 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f043 0206 	orr.w	r2, r3, #6
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006606:	7bfb      	ldrb	r3, [r7, #15]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006612:	b004      	add	sp, #16
 8006614:	4770      	bx	lr

08006616 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f043 0201 	orr.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f023 0201 	bic.w	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]
 8006684:	e00b      	b.n	800669e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
 8006698:	e001      	b.n	800669e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e003      	b.n	80066a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800669e:	2032      	movs	r0, #50	; 0x32
 80066a0:	f7fa fde0 	bl	8001264 <HAL_Delay>

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	f043 0220 	orr.w	r2, r3, #32
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <USB_FlushTxFifo+0x48>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d901      	bls.n	80066dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e006      	b.n	80066ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d0f0      	beq.n	80066ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	00030d40 	.word	0x00030d40

080066fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2210      	movs	r2, #16
 800670c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a09      	ldr	r2, [pc, #36]	; (800673c <USB_FlushRxFifo+0x40>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d901      	bls.n	8006720 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e006      	b.n	800672e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b10      	cmp	r3, #16
 800672a:	d0f0      	beq.n	800670e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	00030d40 	.word	0x00030d40

08006740 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006740:	b480      	push	{r7}
 8006742:	b089      	sub	sp, #36	; 0x24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	4611      	mov	r1, r2
 800674c:	461a      	mov	r2, r3
 800674e:	460b      	mov	r3, r1
 8006750:	71fb      	strb	r3, [r7, #7]
 8006752:	4613      	mov	r3, r2
 8006754:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800675e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11a      	bne.n	800679c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006766:	88bb      	ldrh	r3, [r7, #4]
 8006768:	3303      	adds	r3, #3
 800676a:	089b      	lsrs	r3, r3, #2
 800676c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800676e:	2300      	movs	r3, #0
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	e00f      	b.n	8006794 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	031a      	lsls	r2, r3, #12
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	4413      	add	r3, r2
 800677c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006780:	461a      	mov	r2, r3
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3304      	adds	r3, #4
 800678c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	3301      	adds	r3, #1
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d3eb      	bcc.n	8006774 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3724      	adds	r7, #36	; 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b089      	sub	sp, #36	; 0x24
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	3303      	adds	r3, #3
 80067c4:	089b      	lsrs	r3, r3, #2
 80067c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e00b      	b.n	80067e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	601a      	str	r2, [r3, #0]
    pDest++;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3304      	adds	r3, #4
 80067de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	3301      	adds	r3, #1
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d3ef      	bcc.n	80067ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80067ee:	69fb      	ldr	r3, [r7, #28]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3724      	adds	r7, #36	; 0x24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4013      	ands	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0301 	and.w	r3, r3, #1
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <USB_CoreReset+0x64>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d901      	bls.n	800685e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e01b      	b.n	8006896 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	daf2      	bge.n	800684c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f043 0201 	orr.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <USB_CoreReset+0x64>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e006      	b.n	8006896 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d0f0      	beq.n	8006876 <USB_CoreReset+0x36>

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	00030d40 	.word	0x00030d40

080068a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068a8:	b084      	sub	sp, #16
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	f107 001c 	add.w	r0, r7, #28
 80068b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068c4:	461a      	mov	r2, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d018      	beq.n	800692c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10a      	bne.n	8006916 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800690e:	f043 0304 	orr.w	r3, r3, #4
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e014      	b.n	8006940 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006924:	f023 0304 	bic.w	r3, r3, #4
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e009      	b.n	8006940 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800693a:	f023 0304 	bic.w	r3, r3, #4
 800693e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006940:	2110      	movs	r1, #16
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff feb4 	bl	80066b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fed7 	bl	80066fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e015      	b.n	8006980 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	461a      	mov	r2, r3
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
 8006966:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	429a      	cmp	r2, r3
 8006986:	d3e5      	bcc.n	8006954 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006988:	2101      	movs	r1, #1
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f8ac 	bl	8006ae8 <USB_DriveVbus>

  HAL_Delay(200U);
 8006990:	20c8      	movs	r0, #200	; 0xc8
 8006992:	f7fa fc67 	bl	8001264 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <USB_HostInit+0x164>)
 80069bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <USB_HostInit+0x168>)
 80069c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069c6:	e009      	b.n	80069dc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a10      	ldr	r2, [pc, #64]	; (8006a14 <USB_HostInit+0x16c>)
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a10      	ldr	r2, [pc, #64]	; (8006a18 <USB_HostInit+0x170>)
 80069d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d105      	bne.n	80069ee <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f043 0210 	orr.w	r2, r3, #16
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <USB_HostInit+0x174>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a06:	b004      	add	sp, #16
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	01000200 	.word	0x01000200
 8006a10:	00e00300 	.word	0x00e00300
 8006a14:	00600080 	.word	0x00600080
 8006a18:	004000e0 	.word	0x004000e0
 8006a1c:	a3200008 	.word	0xa3200008

08006a20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d107      	bne.n	8006a72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a6e:	6053      	str	r3, [r2, #4]
 8006a70:	e009      	b.n	8006a86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d106      	bne.n	8006a86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ab4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ac4:	2064      	movs	r0, #100	; 0x64
 8006ac6:	f7fa fbcd 	bl	8001264 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ad8:	200a      	movs	r0, #10
 8006ada:	f7fa fbc3 	bl	8001264 <HAL_Delay>

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <USB_DriveVbus+0x44>
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d106      	bne.n	8006b2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b36:	d109      	bne.n	8006b4c <USB_DriveVbus+0x64>
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	0c5b      	lsrs	r3, r3, #17
 8006b78:	f003 0303 	and.w	r3, r3, #3
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	b29b      	uxth	r3, r3
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	70fb      	strb	r3, [r7, #3]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70bb      	strb	r3, [r7, #2]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006be0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006be2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d87e      	bhi.n	8006ce8 <USB_HC_Init+0x13c>
 8006bea:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <USB_HC_Init+0x44>)
 8006bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf0:	08006c01 	.word	0x08006c01
 8006bf4:	08006cab 	.word	0x08006cab
 8006bf8:	08006c01 	.word	0x08006c01
 8006bfc:	08006c6d 	.word	0x08006c6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	da10      	bge.n	8006c3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006c3c:	e057      	b.n	8006cee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d051      	beq.n	8006cee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c68:	60d3      	str	r3, [r2, #12]
      break;
 8006c6a:	e040      	b.n	8006cee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da34      	bge.n	8006cf2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ca8:	e023      	b.n	8006cf2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f240 2325 	movw	r3, #549	; 0x225
 8006cbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	da17      	bge.n	8006cf6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ce4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ce6:	e006      	b.n	8006cf6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
      break;
 8006cec:	e004      	b.n	8006cf8 <USB_HC_Init+0x14c>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <USB_HC_Init+0x14c>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <USB_HC_Init+0x14c>
      break;
 8006cf6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	2101      	movs	r1, #1
 8006d08:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d12:	4313      	orrs	r3, r2
 8006d14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da03      	bge.n	8006d32 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	e001      	b.n	8006d36 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006d36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d103      	bne.n	8006d46 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e001      	b.n	8006d4a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d4a:	787b      	ldrb	r3, [r7, #1]
 8006d4c:	059b      	lsls	r3, r3, #22
 8006d4e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d52:	78bb      	ldrb	r3, [r7, #2]
 8006d54:	02db      	lsls	r3, r3, #11
 8006d56:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d5a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d60:	049b      	lsls	r3, r3, #18
 8006d62:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d66:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d6e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	0159      	lsls	r1, r3, #5
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	440b      	add	r3, r1
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d80:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d86:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006d88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d10f      	bne.n	8006db0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dae:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop

08006dc0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08c      	sub	sp, #48	; 0x30
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ddc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d028      	beq.n	8006e3c <USB_HC_StartXfer+0x7c>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	791b      	ldrb	r3, [r3, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d124      	bne.n	8006e3c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <USB_HC_StartXfer+0x50>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	795b      	ldrb	r3, [r3, #5]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	4619      	mov	r1, r3
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fa2e 	bl	8007268 <USB_DoPing>
      return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e112      	b.n	8007036 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d112      	bne.n	8006e3c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	69fa      	ldr	r2, [r7, #28]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e30:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e34:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d018      	beq.n	8006e76 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	8912      	ldrh	r2, [r2, #8]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	8912      	ldrh	r2, [r2, #8]
 8006e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e58:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e5c:	8b7b      	ldrh	r3, [r7, #26]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d90b      	bls.n	8006e7a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006e62:	8b7b      	ldrh	r3, [r7, #26]
 8006e64:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	8912      	ldrh	r2, [r2, #8]
 8006e6c:	fb02 f203 	mul.w	r2, r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	611a      	str	r2, [r3, #16]
 8006e74:	e001      	b.n	8006e7a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006e76:	2301      	movs	r3, #1
 8006e78:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	78db      	ldrb	r3, [r3, #3]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d006      	beq.n	8006e90 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	8912      	ldrh	r2, [r2, #8]
 8006e88:	fb02 f203 	mul.w	r2, r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e9a:	04d9      	lsls	r1, r3, #19
 8006e9c:	4b68      	ldr	r3, [pc, #416]	; (8007040 <USB_HC_StartXfer+0x280>)
 8006e9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ea0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	7a9b      	ldrb	r3, [r3, #10]
 8006ea6:	075b      	lsls	r3, r3, #29
 8006ea8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eac:	69f9      	ldr	r1, [r7, #28]
 8006eae:	0148      	lsls	r0, r1, #5
 8006eb0:	6a39      	ldr	r1, [r7, #32]
 8006eb2:	4401      	add	r1, r0
 8006eb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006eb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	68d9      	ldr	r1, [r3, #12]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed2:	460a      	mov	r2, r1
 8006ed4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	7e7b      	ldrb	r3, [r7, #25]
 8006f1e:	075b      	lsls	r3, r3, #29
 8006f20:	69f9      	ldr	r1, [r7, #28]
 8006f22:	0148      	lsls	r0, r1, #5
 8006f24:	6a39      	ldr	r1, [r7, #32]
 8006f26:	4401      	add	r1, r0
 8006f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a41      	ldr	r2, [pc, #260]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f40:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f42:	4b40      	ldr	r3, [pc, #256]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f4a:	4a3e      	ldr	r2, [pc, #248]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f4c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	78db      	ldrb	r3, [r3, #3]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f56:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5e:	4a39      	ldr	r2, [pc, #228]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e005      	b.n	8006f70 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f64:	4b37      	ldr	r3, [pc, #220]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f6c:	4a35      	ldr	r2, [pc, #212]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f6e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f70:	4b34      	ldr	r3, [pc, #208]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f78:	4a32      	ldr	r2, [pc, #200]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f7a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4b2e      	ldr	r3, [pc, #184]	; (8007044 <USB_HC_StartXfer+0x284>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d14e      	bne.n	8007034 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	78db      	ldrb	r3, [r3, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d14a      	bne.n	8007034 <USB_HC_StartXfer+0x274>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d046      	beq.n	8007034 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	79db      	ldrb	r3, [r3, #7]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d830      	bhi.n	8007010 <USB_HC_StartXfer+0x250>
 8006fae:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <USB_HC_StartXfer+0x1f4>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	08006fc5 	.word	0x08006fc5
 8006fb8:	08006fe9 	.word	0x08006fe9
 8006fbc:	08006fc5 	.word	0x08006fc5
 8006fc0:	08006fe9 	.word	0x08006fe9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	3303      	adds	r3, #3
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fce:	8afa      	ldrh	r2, [r7, #22]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d91c      	bls.n	8007014 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f043 0220 	orr.w	r2, r3, #32
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	619a      	str	r2, [r3, #24]
          }
          break;
 8006fe6:	e015      	b.n	8007014 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	3303      	adds	r3, #3
 8006fee:	089b      	lsrs	r3, r3, #2
 8006ff0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ff2:	8afa      	ldrh	r2, [r7, #22]
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d90a      	bls.n	8007018 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	619a      	str	r2, [r3, #24]
          }
          break;
 800700e:	e003      	b.n	8007018 <USB_HC_StartXfer+0x258>

        default:
          break;
 8007010:	bf00      	nop
 8007012:	e002      	b.n	800701a <USB_HC_StartXfer+0x25a>
          break;
 8007014:	bf00      	nop
 8007016:	e000      	b.n	800701a <USB_HC_StartXfer+0x25a>
          break;
 8007018:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	68d9      	ldr	r1, [r3, #12]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	785a      	ldrb	r2, [r3, #1]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	b298      	uxth	r0, r3
 8007028:	2300      	movs	r3, #0
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	4603      	mov	r3, r0
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f7ff fb86 	bl	8006740 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3728      	adds	r7, #40	; 0x28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	1ff80000 	.word	0x1ff80000
 8007044:	200000b0 	.word	0x200000b0

08007048 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	b29b      	uxth	r3, r3
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800706a:	b480      	push	{r7}
 800706c:	b087      	sub	sp, #28
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	460b      	mov	r3, r1
 8007074:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	0c9b      	lsrs	r3, r3, #18
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <USB_HC_Halt+0x3a>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d16c      	bne.n	800717e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070c2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d143      	bne.n	8007158 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	440a      	add	r2, r1
 8007106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800710a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800710e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	440a      	add	r2, r1
 8007126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800712a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800712e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800713c:	d81d      	bhi.n	800717a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4413      	add	r3, r2
 8007146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007154:	d0ec      	beq.n	8007130 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007156:	e080      	b.n	800725a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4413      	add	r3, r2
 8007160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	440a      	add	r2, r1
 800716e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007176:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007178:	e06f      	b.n	800725a <USB_HC_Halt+0x1f0>
          break;
 800717a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800717c:	e06d      	b.n	800725a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	440a      	add	r2, r1
 8007194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800719c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d143      	bne.n	8007236 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	440a      	add	r2, r1
 8007204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007208:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800720c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	3301      	adds	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800721a:	d81d      	bhi.n	8007258 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	4413      	add	r3, r2
 8007224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800722e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007232:	d0ec      	beq.n	800720e <USB_HC_Halt+0x1a4>
 8007234:	e011      	b.n	800725a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	440a      	add	r2, r1
 800724c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	e000      	b.n	800725a <USB_HC_Halt+0x1f0>
          break;
 8007258:	bf00      	nop
    }
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800727c:	2301      	movs	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	04da      	lsls	r2, r3, #19
 8007284:	4b15      	ldr	r3, [pc, #84]	; (80072dc <USB_DoPing+0x74>)
 8007286:	4013      	ands	r3, r2
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	440a      	add	r2, r1
 8007290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007298:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c6:	461a      	mov	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	1ff80000 	.word	0x1ff80000

080072e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff f9a1 	bl	8006638 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80072f6:	2110      	movs	r1, #16
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff f9d9 	bl	80066b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff f9fc 	bl	80066fc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	e01f      	b.n	800734a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007320:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007328:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007330:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	461a      	mov	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	3301      	adds	r3, #1
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b0f      	cmp	r3, #15
 800734e:	d9dc      	bls.n	800730a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	e034      	b.n	80073c0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800736c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007374:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800737c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738a:	461a      	mov	r2, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3301      	adds	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739c:	d80c      	bhi.n	80073b8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b4:	d0ec      	beq.n	8007390 <USB_StopHost+0xb0>
 80073b6:	e000      	b.n	80073ba <USB_StopHost+0xda>
        break;
 80073b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3301      	adds	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d9c7      	bls.n	8007356 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073cc:	461a      	mov	r2, r3
 80073ce:	f04f 33ff 	mov.w	r3, #4294967295
 80073d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f04f 32ff 	mov.w	r2, #4294967295
 80073da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff f91a 	bl	8006616 <USB_EnableGlobalInt>

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073ec:	b590      	push	{r4, r7, lr}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af04      	add	r7, sp, #16
 80073f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073f4:	2301      	movs	r3, #1
 80073f6:	2202      	movs	r2, #2
 80073f8:	2102      	movs	r1, #2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fc68 	bl	8007cd0 <USBH_FindInterface>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2bff      	cmp	r3, #255	; 0xff
 8007408:	d002      	beq.n	8007410 <USBH_CDC_InterfaceInit+0x24>
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d901      	bls.n	8007414 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007410:	2302      	movs	r3, #2
 8007412:	e13d      	b.n	8007690 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fc3d 	bl	8007c98 <USBH_SelectInterface>
 800741e:	4603      	mov	r3, r0
 8007420:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007428:	2302      	movs	r3, #2
 800742a:	e131      	b.n	8007690 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007432:	2050      	movs	r0, #80	; 0x50
 8007434:	f002 fa04 	bl	8009840 <malloc>
 8007438:	4603      	mov	r3, r0
 800743a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800744c:	2302      	movs	r3, #2
 800744e:	e11f      	b.n	8007690 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007450:	2250      	movs	r2, #80	; 0x50
 8007452:	2100      	movs	r1, #0
 8007454:	68b8      	ldr	r0, [r7, #8]
 8007456:	f002 fa03 	bl	8009860 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	211a      	movs	r1, #26
 8007460:	fb01 f303 	mul.w	r3, r1, r3
 8007464:	4413      	add	r3, r2
 8007466:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b25b      	sxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	da15      	bge.n	800749e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	211a      	movs	r1, #26
 8007478:	fb01 f303 	mul.w	r3, r1, r3
 800747c:	4413      	add	r3, r2
 800747e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	211a      	movs	r1, #26
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	4413      	add	r3, r2
 8007494:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007498:	881a      	ldrh	r2, [r3, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 fe36 	bl	8009116 <USBH_AllocPipe>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	7819      	ldrb	r1, [r3, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	7858      	ldrb	r0, [r3, #1]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	8952      	ldrh	r2, [r2, #10]
 80074ca:	9202      	str	r2, [sp, #8]
 80074cc:	2203      	movs	r2, #3
 80074ce:	9201      	str	r2, [sp, #4]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4623      	mov	r3, r4
 80074d4:	4602      	mov	r2, r0
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fdee 	bl	80090b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2200      	movs	r2, #0
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f002 f8fb 	bl	80096e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074ea:	2300      	movs	r3, #0
 80074ec:	2200      	movs	r2, #0
 80074ee:	210a      	movs	r1, #10
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fbed 	bl	8007cd0 <USBH_FindInterface>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2bff      	cmp	r3, #255	; 0xff
 80074fe:	d002      	beq.n	8007506 <USBH_CDC_InterfaceInit+0x11a>
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d901      	bls.n	800750a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007506:	2302      	movs	r3, #2
 8007508:	e0c2      	b.n	8007690 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	211a      	movs	r1, #26
 8007510:	fb01 f303 	mul.w	r3, r1, r3
 8007514:	4413      	add	r3, r2
 8007516:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	b25b      	sxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	da16      	bge.n	8007550 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	211a      	movs	r1, #26
 8007528:	fb01 f303 	mul.w	r3, r1, r3
 800752c:	4413      	add	r3, r2
 800752e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	211a      	movs	r1, #26
 800753e:	fb01 f303 	mul.w	r3, r1, r3
 8007542:	4413      	add	r3, r2
 8007544:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007548:	881a      	ldrh	r2, [r3, #0]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	835a      	strh	r2, [r3, #26]
 800754e:	e015      	b.n	800757c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	211a      	movs	r1, #26
 8007556:	fb01 f303 	mul.w	r3, r1, r3
 800755a:	4413      	add	r3, r2
 800755c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	211a      	movs	r1, #26
 800756c:	fb01 f303 	mul.w	r3, r1, r3
 8007570:	4413      	add	r3, r2
 8007572:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007576:	881a      	ldrh	r2, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	211a      	movs	r1, #26
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	4413      	add	r3, r2
 8007588:	f203 3356 	addw	r3, r3, #854	; 0x356
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b25b      	sxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	da16      	bge.n	80075c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	211a      	movs	r1, #26
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	4413      	add	r3, r2
 80075a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	211a      	movs	r1, #26
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075ba:	881a      	ldrh	r2, [r3, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	835a      	strh	r2, [r3, #26]
 80075c0:	e015      	b.n	80075ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	211a      	movs	r1, #26
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	211a      	movs	r1, #26
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075e8:	881a      	ldrh	r2, [r3, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	7b9b      	ldrb	r3, [r3, #14]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fd8e 	bl	8009116 <USBH_AllocPipe>
 80075fa:	4603      	mov	r3, r0
 80075fc:	461a      	mov	r2, r3
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	7bdb      	ldrb	r3, [r3, #15]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fd84 	bl	8009116 <USBH_AllocPipe>
 800760e:	4603      	mov	r3, r0
 8007610:	461a      	mov	r2, r3
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	7b59      	ldrb	r1, [r3, #13]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	7b98      	ldrb	r0, [r3, #14]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	8b12      	ldrh	r2, [r2, #24]
 800762e:	9202      	str	r2, [sp, #8]
 8007630:	2202      	movs	r2, #2
 8007632:	9201      	str	r2, [sp, #4]
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4623      	mov	r3, r4
 8007638:	4602      	mov	r2, r0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fd3c 	bl	80090b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	7b19      	ldrb	r1, [r3, #12]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	7bd8      	ldrb	r0, [r3, #15]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	8b52      	ldrh	r2, [r2, #26]
 8007658:	9202      	str	r2, [sp, #8]
 800765a:	2202      	movs	r2, #2
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4623      	mov	r3, r4
 8007662:	4602      	mov	r2, r0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fd27 	bl	80090b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	7b5b      	ldrb	r3, [r3, #13]
 8007676:	2200      	movs	r2, #0
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f002 f830 	bl	80096e0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	7b1b      	ldrb	r3, [r3, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f002 f829 	bl	80096e0 <USBH_LL_SetToggle>

  return USBH_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	bd90      	pop	{r4, r7, pc}

08007698 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 fd1c 	bl	80090f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fd47 	bl	8009158 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	7b1b      	ldrb	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	7b1b      	ldrb	r3, [r3, #12]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fd09 	bl	80090f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	7b1b      	ldrb	r3, [r3, #12]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fd34 	bl	8009158 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	7b5b      	ldrb	r3, [r3, #13]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00e      	beq.n	800771c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	7b5b      	ldrb	r3, [r3, #13]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fcf6 	bl	80090f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	7b5b      	ldrb	r3, [r3, #13]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fd21 	bl	8009158 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	4618      	mov	r0, r3
 8007732:	f002 f88d 	bl	8009850 <free>
    phost->pActiveClass->pData = 0U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800773c:	2200      	movs	r2, #0
 800773e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3340      	adds	r3, #64	; 0x40
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f8b1 	bl	80078ca <GetLineCoding>
 8007768:	4603      	mov	r3, r0
 800776a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007778:	2102      	movs	r1, #2
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800777e:	7afb      	ldrb	r3, [r7, #11]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d877      	bhi.n	800789c <USBH_CDC_Process+0x114>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <USBH_CDC_Process+0x2c>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077c9 	.word	0x080077c9
 80077b8:	080077cf 	.word	0x080077cf
 80077bc:	080077ff 	.word	0x080077ff
 80077c0:	08007873 	.word	0x08007873
 80077c4:	08007881 	.word	0x08007881
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
      break;
 80077cc:	e06d      	b.n	80078aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f897 	bl	8007908 <SetLineCoding>
 80077da:	4603      	mov	r3, r0
 80077dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077ec:	e058      	b.n	80078a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d055      	beq.n	80078a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2204      	movs	r2, #4
 80077f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077fc:	e050      	b.n	80078a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3340      	adds	r3, #64	; 0x40
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f860 	bl	80078ca <GetLineCoding>
 800780a:	4603      	mov	r3, r0
 800780c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d126      	bne.n	8007862 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007826:	791b      	ldrb	r3, [r3, #4]
 8007828:	429a      	cmp	r2, r3
 800782a:	d13b      	bne.n	80078a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007838:	429a      	cmp	r2, r3
 800783a:	d133      	bne.n	80078a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007848:	429a      	cmp	r2, r3
 800784a:	d12b      	bne.n	80078a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007854:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007856:	429a      	cmp	r2, r3
 8007858:	d124      	bne.n	80078a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f95a 	bl	8007b14 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007860:	e020      	b.n	80078a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d01d      	beq.n	80078a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2204      	movs	r2, #4
 800786c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007870:	e018      	b.n	80078a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f867 	bl	8007946 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f8dc 	bl	8007a36 <CDC_ProcessReception>
      break;
 800787e:	e014      	b.n	80078aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007880:	2100      	movs	r1, #0
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 ffe5 	bl	8008852 <USBH_ClrFeature>
 8007888:	4603      	mov	r3, r0
 800788a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800789a:	e005      	b.n	80078a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800789c:	bf00      	nop
 800789e:	e004      	b.n	80078aa <USBH_CDC_Process+0x122>
      break;
 80078a0:	bf00      	nop
 80078a2:	e002      	b.n	80078aa <USBH_CDC_Process+0x122>
      break;
 80078a4:	bf00      	nop
 80078a6:	e000      	b.n	80078aa <USBH_CDC_Process+0x122>
      break;
 80078a8:	bf00      	nop

  }

  return status;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	22a1      	movs	r2, #161	; 0xa1
 80078d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2221      	movs	r2, #33	; 0x21
 80078de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2207      	movs	r2, #7
 80078f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2207      	movs	r2, #7
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f98a 	bl	8008c12 <USBH_CtlReq>
 80078fe:	4603      	mov	r3, r0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2221      	movs	r2, #33	; 0x21
 8007916:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2207      	movs	r2, #7
 800792e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2207      	movs	r2, #7
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 f96b 	bl	8008c12 <USBH_CtlReq>
 800793c:	4603      	mov	r3, r0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af02      	add	r7, sp, #8
 800794c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007958:	2300      	movs	r3, #0
 800795a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007962:	2b01      	cmp	r3, #1
 8007964:	d002      	beq.n	800796c <CDC_ProcessTransmission+0x26>
 8007966:	2b02      	cmp	r3, #2
 8007968:	d025      	beq.n	80079b6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800796a:	e060      	b.n	8007a2e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	8b12      	ldrh	r2, [r2, #24]
 8007974:	4293      	cmp	r3, r2
 8007976:	d90c      	bls.n	8007992 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	69d9      	ldr	r1, [r3, #28]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8b1a      	ldrh	r2, [r3, #24]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	7b58      	ldrb	r0, [r3, #13]
 8007984:	2301      	movs	r3, #1
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4603      	mov	r3, r0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fb51 	bl	8009032 <USBH_BulkSendData>
 8007990:	e00c      	b.n	80079ac <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	7b58      	ldrb	r0, [r3, #13]
 80079a0:	2301      	movs	r3, #1
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	4603      	mov	r3, r0
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fb43 	bl	8009032 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079b4:	e03b      	b.n	8007a2e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	7b5b      	ldrb	r3, [r3, #13]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 fe65 	bl	800968c <USBH_LL_GetURBState>
 80079c2:	4603      	mov	r3, r0
 80079c4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d128      	bne.n	8007a1e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	8b12      	ldrh	r2, [r2, #24]
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d90e      	bls.n	80079f6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	8b12      	ldrh	r2, [r2, #24]
 80079e0:	1a9a      	subs	r2, r3, r2
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	8b12      	ldrh	r2, [r2, #24]
 80079ee:	441a      	add	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	61da      	str	r2, [r3, #28]
 80079f4:	e002      	b.n	80079fc <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a0c:	e00e      	b.n	8007a2c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f868 	bl	8007aec <USBH_CDC_TransmitCallback>
      break;
 8007a1c:	e006      	b.n	8007a2c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d103      	bne.n	8007a2c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a2c:	bf00      	nop
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b086      	sub	sp, #24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d002      	beq.n	8007a5c <CDC_ProcessReception+0x26>
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d00e      	beq.n	8007a78 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a5a:	e043      	b.n	8007ae4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	6a19      	ldr	r1, [r3, #32]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	8b5a      	ldrh	r2, [r3, #26]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	7b1b      	ldrb	r3, [r3, #12]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fb07 	bl	800907c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2204      	movs	r2, #4
 8007a72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a76:	e035      	b.n	8007ae4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	7b1b      	ldrb	r3, [r3, #12]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fe04 	bl	800968c <USBH_LL_GetURBState>
 8007a84:	4603      	mov	r3, r0
 8007a86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a88:	7cfb      	ldrb	r3, [r7, #19]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d129      	bne.n	8007ae2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	7b1b      	ldrb	r3, [r3, #12]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 fd67 	bl	8009568 <USBH_LL_GetLastXferSize>
 8007a9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d016      	beq.n	8007ad4 <CDC_ProcessReception+0x9e>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	8b5b      	ldrh	r3, [r3, #26]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d910      	bls.n	8007ad4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1ad2      	subs	r2, r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2203      	movs	r2, #3
 8007ace:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ad2:	e006      	b.n	8007ae2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f80f 	bl	8007b00 <USBH_CDC_ReceiveCallback>
      break;
 8007ae2:	bf00      	nop
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e029      	b.n	8007b94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	79fa      	ldrb	r2, [r7, #7]
 8007b44:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f81f 	bl	8007b9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f001 fc39 	bl	8009404 <USBH_LL_Init>

  return USBH_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e009      	b.n	8007bc2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	33e0      	adds	r3, #224	; 0xe0
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	2200      	movs	r2, #0
 8007bba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b0e      	cmp	r3, #14
 8007bc6:	d9f2      	bls.n	8007bae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e009      	b.n	8007be2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be8:	d3f1      	bcc.n	8007bce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2240      	movs	r2, #64	; 0x40
 8007c0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d016      	beq.n	8007c86 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10e      	bne.n	8007c80 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c68:	1c59      	adds	r1, r3, #1
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	33de      	adds	r3, #222	; 0xde
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
 8007c7e:	e004      	b.n	8007c8a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c80:	2302      	movs	r3, #2
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e001      	b.n	8007c8a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c86:	2302      	movs	r3, #2
 8007c88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d204      	bcs.n	8007cbe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007cbc:	e001      	b.n	8007cc2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	4608      	mov	r0, r1
 8007cda:	4611      	mov	r1, r2
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	70fb      	strb	r3, [r7, #3]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70bb      	strb	r3, [r7, #2]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cf8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cfa:	e025      	b.n	8007d48 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	221a      	movs	r2, #26
 8007d00:	fb02 f303 	mul.w	r3, r2, r3
 8007d04:	3308      	adds	r3, #8
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	3302      	adds	r3, #2
 8007d0c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	795b      	ldrb	r3, [r3, #5]
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d002      	beq.n	8007d1e <USBH_FindInterface+0x4e>
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	2bff      	cmp	r3, #255	; 0xff
 8007d1c:	d111      	bne.n	8007d42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d22:	78ba      	ldrb	r2, [r7, #2]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d002      	beq.n	8007d2e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d28:	78bb      	ldrb	r3, [r7, #2]
 8007d2a:	2bff      	cmp	r3, #255	; 0xff
 8007d2c:	d109      	bne.n	8007d42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d32:	787a      	ldrb	r2, [r7, #1]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d002      	beq.n	8007d3e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d38:	787b      	ldrb	r3, [r7, #1]
 8007d3a:	2bff      	cmp	r3, #255	; 0xff
 8007d3c:	d101      	bne.n	8007d42 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	e006      	b.n	8007d50 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	3301      	adds	r3, #1
 8007d46:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d9d6      	bls.n	8007cfc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d4e:	23ff      	movs	r3, #255	; 0xff
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fb89 	bl	800947c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 fca0 	bl	80096b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af04      	add	r7, sp, #16
 8007d82:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d84:	2302      	movs	r3, #2
 8007d86:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d102      	bne.n	8007d9e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b0b      	cmp	r3, #11
 8007da6:	f200 81b3 	bhi.w	8008110 <USBH_Process+0x394>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <USBH_Process+0x34>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007de1 	.word	0x08007de1
 8007db4:	08007e13 	.word	0x08007e13
 8007db8:	08007e7b 	.word	0x08007e7b
 8007dbc:	080080ab 	.word	0x080080ab
 8007dc0:	08008111 	.word	0x08008111
 8007dc4:	08007f1f 	.word	0x08007f1f
 8007dc8:	08008051 	.word	0x08008051
 8007dcc:	08007f55 	.word	0x08007f55
 8007dd0:	08007f75 	.word	0x08007f75
 8007dd4:	08007f95 	.word	0x08007f95
 8007dd8:	08007fc3 	.word	0x08007fc3
 8007ddc:	08008093 	.word	0x08008093
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 8193 	beq.w	8008114 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007df4:	20c8      	movs	r0, #200	; 0xc8
 8007df6:	f001 fca6 	bl	8009746 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fb99 	bl	8009532 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e10:	e180      	b.n	8008114 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d107      	bne.n	8007e2c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e2a:	e182      	b.n	8008132 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e36:	d914      	bls.n	8007e62 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e3e:	3301      	adds	r3, #1
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d903      	bls.n	8007e5a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	220d      	movs	r2, #13
 8007e56:	701a      	strb	r2, [r3, #0]
      break;
 8007e58:	e16b      	b.n	8008132 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
      break;
 8007e60:	e167      	b.n	8008132 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e68:	f103 020a 	add.w	r2, r3, #10
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e72:	200a      	movs	r0, #10
 8007e74:	f001 fc67 	bl	8009746 <USBH_Delay>
      break;
 8007e78:	e15b      	b.n	8008132 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e8a:	2104      	movs	r1, #4
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e90:	2064      	movs	r0, #100	; 0x64
 8007e92:	f001 fc58 	bl	8009746 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 fb26 	bl	80094e8 <USBH_LL_GetSpeed>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2205      	movs	r2, #5
 8007eaa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 f931 	bl	8009116 <USBH_AllocPipe>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ebc:	2180      	movs	r1, #128	; 0x80
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 f929 	bl	8009116 <USBH_AllocPipe>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7919      	ldrb	r1, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	9202      	str	r2, [sp, #8]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	9201      	str	r2, [sp, #4]
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	4603      	mov	r3, r0
 8007eec:	2280      	movs	r2, #128	; 0x80
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 f8e2 	bl	80090b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	7959      	ldrb	r1, [r3, #5]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f08:	b292      	uxth	r2, r2
 8007f0a:	9202      	str	r2, [sp, #8]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	9201      	str	r2, [sp, #4]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	4603      	mov	r3, r0
 8007f14:	2200      	movs	r2, #0
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 f8ce 	bl	80090b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f1c:	e109      	b.n	8008132 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f90c 	bl	800813c <USBH_HandleEnum>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 80f3 	bne.w	8008118 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d103      	bne.n	8007f4c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2208      	movs	r2, #8
 8007f48:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f4a:	e0e5      	b.n	8008118 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2207      	movs	r2, #7
 8007f50:	701a      	strb	r2, [r3, #0]
      break;
 8007f52:	e0e1      	b.n	8008118 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80de 	beq.w	800811c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f66:	2101      	movs	r1, #1
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2208      	movs	r2, #8
 8007f70:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f72:	e0d3      	b.n	800811c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fc20 	bl	80087c4 <USBH_SetCfg>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 80ca 	bne.w	8008120 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2209      	movs	r2, #9
 8007f90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f92:	e0c5      	b.n	8008120 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fc30 	bl	800880a <USBH_SetFeature>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 80b9 	bne.w	8008124 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fb8:	e0b4      	b.n	8008124 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	701a      	strb	r2, [r3, #0]
      break;
 8007fc0:	e0b0      	b.n	8008124 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80ad 	beq.w	8008128 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
 8007fda:	e016      	b.n	800800a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fdc:	7bfa      	ldrb	r2, [r7, #15]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	32de      	adds	r2, #222	; 0xde
 8007fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe6:	791a      	ldrb	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d108      	bne.n	8008004 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ff2:	7bfa      	ldrb	r2, [r7, #15]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	32de      	adds	r2, #222	; 0xde
 8007ff8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008002:	e005      	b.n	8008010 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	3301      	adds	r3, #1
 8008008:	73fb      	strb	r3, [r7, #15]
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0e5      	beq.n	8007fdc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d016      	beq.n	8008048 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2206      	movs	r2, #6
 8008030:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008038:	2103      	movs	r1, #3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800803e:	e073      	b.n	8008128 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	220d      	movs	r2, #13
 8008044:	701a      	strb	r2, [r3, #0]
      break;
 8008046:	e06f      	b.n	8008128 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	220d      	movs	r2, #13
 800804c:	701a      	strb	r2, [r3, #0]
      break;
 800804e:	e06b      	b.n	8008128 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d017      	beq.n	800808a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	4798      	blx	r3
 8008066:	4603      	mov	r3, r0
 8008068:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d103      	bne.n	800807a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	220b      	movs	r2, #11
 8008076:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008078:	e058      	b.n	800812c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d154      	bne.n	800812c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	220d      	movs	r2, #13
 8008086:	701a      	strb	r2, [r3, #0]
      break;
 8008088:	e050      	b.n	800812c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	220d      	movs	r2, #13
 800808e:	701a      	strb	r2, [r3, #0]
      break;
 8008090:	e04c      	b.n	800812c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d049      	beq.n	8008130 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
      }
      break;
 80080a8:	e042      	b.n	8008130 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fd72 	bl	8007b9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080e6:	2105      	movs	r1, #5
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d107      	bne.n	8008108 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fe2b 	bl	8007d5c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008106:	e014      	b.n	8008132 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f9b7 	bl	800947c <USBH_LL_Start>
      break;
 800810e:	e010      	b.n	8008132 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008110:	bf00      	nop
 8008112:	e00e      	b.n	8008132 <USBH_Process+0x3b6>
      break;
 8008114:	bf00      	nop
 8008116:	e00c      	b.n	8008132 <USBH_Process+0x3b6>
      break;
 8008118:	bf00      	nop
 800811a:	e00a      	b.n	8008132 <USBH_Process+0x3b6>
    break;
 800811c:	bf00      	nop
 800811e:	e008      	b.n	8008132 <USBH_Process+0x3b6>
      break;
 8008120:	bf00      	nop
 8008122:	e006      	b.n	8008132 <USBH_Process+0x3b6>
      break;
 8008124:	bf00      	nop
 8008126:	e004      	b.n	8008132 <USBH_Process+0x3b6>
      break;
 8008128:	bf00      	nop
 800812a:	e002      	b.n	8008132 <USBH_Process+0x3b6>
      break;
 800812c:	bf00      	nop
 800812e:	e000      	b.n	8008132 <USBH_Process+0x3b6>
      break;
 8008130:	bf00      	nop
  }
  return USBH_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af04      	add	r7, sp, #16
 8008142:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008144:	2301      	movs	r3, #1
 8008146:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008148:	2301      	movs	r3, #1
 800814a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b07      	cmp	r3, #7
 8008152:	f200 81c1 	bhi.w	80084d8 <USBH_HandleEnum+0x39c>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <USBH_HandleEnum+0x20>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	0800817d 	.word	0x0800817d
 8008160:	0800823b 	.word	0x0800823b
 8008164:	080082a5 	.word	0x080082a5
 8008168:	08008333 	.word	0x08008333
 800816c:	0800839d 	.word	0x0800839d
 8008170:	0800840d 	.word	0x0800840d
 8008174:	08008453 	.word	0x08008453
 8008178:	08008499 	.word	0x08008499
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800817c:	2108      	movs	r1, #8
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa50 	bl	8008624 <USBH_Get_DevDesc>
 8008184:	4603      	mov	r3, r0
 8008186:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d130      	bne.n	80081f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7919      	ldrb	r1, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081b2:	b292      	uxth	r2, r2
 80081b4:	9202      	str	r2, [sp, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	9201      	str	r2, [sp, #4]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	4603      	mov	r3, r0
 80081be:	2280      	movs	r2, #128	; 0x80
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 ff79 	bl	80090b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	7959      	ldrb	r1, [r3, #5]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081da:	b292      	uxth	r2, r2
 80081dc:	9202      	str	r2, [sp, #8]
 80081de:	2200      	movs	r2, #0
 80081e0:	9201      	str	r2, [sp, #4]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	4603      	mov	r3, r0
 80081e6:	2200      	movs	r2, #0
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 ff65 	bl	80090b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081ee:	e175      	b.n	80084dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	f040 8172 	bne.w	80084dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081fe:	3301      	adds	r3, #1
 8008200:	b2da      	uxtb	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800820e:	2b03      	cmp	r3, #3
 8008210:	d903      	bls.n	800821a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220d      	movs	r2, #13
 8008216:	701a      	strb	r2, [r3, #0]
      break;
 8008218:	e160      	b.n	80084dc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	795b      	ldrb	r3, [r3, #5]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 ff99 	bl	8009158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	791b      	ldrb	r3, [r3, #4]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 ff93 	bl	8009158 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
      break;
 8008238:	e150      	b.n	80084dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800823a:	2112      	movs	r1, #18
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f9f1 	bl	8008624 <USBH_Get_DevDesc>
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d103      	bne.n	8008254 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008252:	e145      	b.n	80084e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b03      	cmp	r3, #3
 8008258:	f040 8142 	bne.w	80084e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008262:	3301      	adds	r3, #1
 8008264:	b2da      	uxtb	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008272:	2b03      	cmp	r3, #3
 8008274:	d903      	bls.n	800827e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	220d      	movs	r2, #13
 800827a:	701a      	strb	r2, [r3, #0]
      break;
 800827c:	e130      	b.n	80084e0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	795b      	ldrb	r3, [r3, #5]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 ff67 	bl	8009158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 ff61 	bl	8009158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
      break;
 80082a2:	e11d      	b.n	80084e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082a4:	2101      	movs	r1, #1
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa68 	bl	800877c <USBH_SetAddress>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d132      	bne.n	800831c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082b6:	2002      	movs	r0, #2
 80082b8:	f001 fa45 	bl	8009746 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2203      	movs	r2, #3
 80082c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7919      	ldrb	r1, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082de:	b292      	uxth	r2, r2
 80082e0:	9202      	str	r2, [sp, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	9201      	str	r2, [sp, #4]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	4603      	mov	r3, r0
 80082ea:	2280      	movs	r2, #128	; 0x80
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fee3 	bl	80090b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	7959      	ldrb	r1, [r3, #5]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008306:	b292      	uxth	r2, r2
 8008308:	9202      	str	r2, [sp, #8]
 800830a:	2200      	movs	r2, #0
 800830c:	9201      	str	r2, [sp, #4]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4603      	mov	r3, r0
 8008312:	2200      	movs	r2, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fecf 	bl	80090b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800831a:	e0e3      	b.n	80084e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b03      	cmp	r3, #3
 8008320:	f040 80e0 	bne.w	80084e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	220d      	movs	r2, #13
 8008328:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	705a      	strb	r2, [r3, #1]
      break;
 8008330:	e0d8      	b.n	80084e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008332:	2109      	movs	r1, #9
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f99d 	bl	8008674 <USBH_Get_CfgDesc>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d103      	bne.n	800834c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2204      	movs	r2, #4
 8008348:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800834a:	e0cd      	b.n	80084e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b03      	cmp	r3, #3
 8008350:	f040 80ca 	bne.w	80084e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800835a:	3301      	adds	r3, #1
 800835c:	b2da      	uxtb	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800836a:	2b03      	cmp	r3, #3
 800836c:	d903      	bls.n	8008376 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	220d      	movs	r2, #13
 8008372:	701a      	strb	r2, [r3, #0]
      break;
 8008374:	e0b8      	b.n	80084e8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	795b      	ldrb	r3, [r3, #5]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 feeb 	bl	8009158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	791b      	ldrb	r3, [r3, #4]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fee5 	bl	8009158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
      break;
 800839a:	e0a5      	b.n	80084e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f965 	bl	8008674 <USBH_Get_CfgDesc>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2205      	movs	r2, #5
 80083b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083ba:	e097      	b.n	80084ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	f040 8094 	bne.w	80084ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ca:	3301      	adds	r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d903      	bls.n	80083e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	220d      	movs	r2, #13
 80083e2:	701a      	strb	r2, [r3, #0]
      break;
 80083e4:	e082      	b.n	80084ec <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	795b      	ldrb	r3, [r3, #5]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 feb3 	bl	8009158 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fead 	bl	8009158 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]
      break;
 800840a:	e06f      	b.n	80084ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008412:	2b00      	cmp	r3, #0
 8008414:	d019      	beq.n	800844a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008422:	23ff      	movs	r3, #255	; 0xff
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f949 	bl	80086bc <USBH_Get_StringDesc>
 800842a:	4603      	mov	r3, r0
 800842c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2206      	movs	r2, #6
 8008438:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800843a:	e059      	b.n	80084f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	2b03      	cmp	r3, #3
 8008440:	d156      	bne.n	80084f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2206      	movs	r2, #6
 8008446:	705a      	strb	r2, [r3, #1]
      break;
 8008448:	e052      	b.n	80084f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2206      	movs	r2, #6
 800844e:	705a      	strb	r2, [r3, #1]
      break;
 8008450:	e04e      	b.n	80084f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008458:	2b00      	cmp	r3, #0
 800845a:	d019      	beq.n	8008490 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008468:	23ff      	movs	r3, #255	; 0xff
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f926 	bl	80086bc <USBH_Get_StringDesc>
 8008470:	4603      	mov	r3, r0
 8008472:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d103      	bne.n	8008482 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2207      	movs	r2, #7
 800847e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008480:	e038      	b.n	80084f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b03      	cmp	r3, #3
 8008486:	d135      	bne.n	80084f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2207      	movs	r2, #7
 800848c:	705a      	strb	r2, [r3, #1]
      break;
 800848e:	e031      	b.n	80084f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2207      	movs	r2, #7
 8008494:	705a      	strb	r2, [r3, #1]
      break;
 8008496:	e02d      	b.n	80084f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d017      	beq.n	80084d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084ae:	23ff      	movs	r3, #255	; 0xff
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f903 	bl	80086bc <USBH_Get_StringDesc>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d102      	bne.n	80084c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084c4:	e018      	b.n	80084f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d115      	bne.n	80084f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
      break;
 80084d0:	e012      	b.n	80084f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
      break;
 80084d6:	e00f      	b.n	80084f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80084d8:	bf00      	nop
 80084da:	e00e      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084dc:	bf00      	nop
 80084de:	e00c      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084e0:	bf00      	nop
 80084e2:	e00a      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084e4:	bf00      	nop
 80084e6:	e008      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084e8:	bf00      	nop
 80084ea:	e006      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084ec:	bf00      	nop
 80084ee:	e004      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084f0:	bf00      	nop
 80084f2:	e002      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <USBH_HandleEnum+0x3be>
      break;
 80084f8:	bf00      	nop
  }
  return Status;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f804 	bl	8008546 <USBH_HandleSof>
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b0b      	cmp	r3, #11
 8008556:	d10a      	bne.n	800856e <USBH_HandleSof+0x28>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
  }
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008586:	bf00      	nop
}
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80085a2:	bf00      	nop
}
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 ff58 	bl	80094b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	791b      	ldrb	r3, [r3, #4]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fda5 	bl	8009158 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fd9f 	bl	8009158 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af02      	add	r7, sp, #8
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	b29b      	uxth	r3, r3
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	4613      	mov	r3, r2
 800863e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008642:	2100      	movs	r1, #0
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f864 	bl	8008712 <USBH_GetDescriptor>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f203 3026 	addw	r0, r3, #806	; 0x326
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	b292      	uxth	r2, r2
 8008664:	4619      	mov	r1, r3
 8008666:	f000 f918 	bl	800889a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af02      	add	r7, sp, #8
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	331c      	adds	r3, #28
 8008684:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008686:	887b      	ldrh	r3, [r7, #2]
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f83d 	bl	8008712 <USBH_GetDescriptor>
 8008698:	4603      	mov	r3, r0
 800869a:	72fb      	strb	r3, [r7, #11]
 800869c:	7afb      	ldrb	r3, [r7, #11]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d107      	bne.n	80086b2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80086a8:	887a      	ldrh	r2, [r7, #2]
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 f964 	bl	800897a <USBH_ParseCfgDesc>
  }

  return status;
 80086b2:	7afb      	ldrb	r3, [r7, #11]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	607a      	str	r2, [r7, #4]
 80086c6:	461a      	mov	r2, r3
 80086c8:	460b      	mov	r3, r1
 80086ca:	72fb      	strb	r3, [r7, #11]
 80086cc:	4613      	mov	r3, r2
 80086ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086d8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80086e0:	893b      	ldrh	r3, [r7, #8]
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	460b      	mov	r3, r1
 80086e6:	2100      	movs	r1, #0
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f812 	bl	8008712 <USBH_GetDescriptor>
 80086ee:	4603      	mov	r3, r0
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d107      	bne.n	8008708 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086fe:	893a      	ldrh	r2, [r7, #8]
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fa37 	bl	8008b76 <USBH_ParseStringDesc>
  }

  return status;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	72fb      	strb	r3, [r7, #11]
 8008720:	4613      	mov	r3, r2
 8008722:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	789b      	ldrb	r3, [r3, #2]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d11c      	bne.n	8008766 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008732:	b2da      	uxtb	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2206      	movs	r2, #6
 800873c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	893a      	ldrh	r2, [r7, #8]
 8008742:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008744:	893b      	ldrh	r3, [r7, #8]
 8008746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800874a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800874e:	d104      	bne.n	800875a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f240 4209 	movw	r2, #1033	; 0x409
 8008756:	829a      	strh	r2, [r3, #20]
 8008758:	e002      	b.n	8008760 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8b3a      	ldrh	r2, [r7, #24]
 8008764:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008766:	8b3b      	ldrh	r3, [r7, #24]
 8008768:	461a      	mov	r2, r3
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 fa50 	bl	8008c12 <USBH_CtlReq>
 8008772:	4603      	mov	r3, r0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	789b      	ldrb	r3, [r3, #2]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d10f      	bne.n	80087b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2205      	movs	r2, #5
 800879a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087b0:	2200      	movs	r2, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa2c 	bl	8008c12 <USBH_CtlReq>
 80087ba:	4603      	mov	r3, r0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	789b      	ldrb	r3, [r3, #2]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d10e      	bne.n	80087f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2209      	movs	r2, #9
 80087e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	887a      	ldrh	r2, [r7, #2]
 80087e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa09 	bl	8008c12 <USBH_CtlReq>
 8008800:	4603      	mov	r3, r0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	789b      	ldrb	r3, [r3, #2]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10f      	bne.n	800883e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2203      	movs	r2, #3
 8008828:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f9e5 	bl	8008c12 <USBH_CtlReq>
 8008848:	4603      	mov	r3, r0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	789b      	ldrb	r3, [r3, #2]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d10f      	bne.n	8008886 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f9c1 	bl	8008c12 <USBH_CtlReq>
 8008890:	4603      	mov	r3, r0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4613      	mov	r3, r2
 80088a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	785a      	ldrb	r2, [r3, #1]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	3302      	adds	r3, #2
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3303      	adds	r3, #3
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	791a      	ldrb	r2, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	795a      	ldrb	r2, [r3, #5]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	799a      	ldrb	r2, [r3, #6]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	79da      	ldrb	r2, [r3, #7]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d939      	bls.n	800896e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3308      	adds	r3, #8
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b29a      	uxth	r2, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3309      	adds	r3, #9
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	b29b      	uxth	r3, r3
 800890e:	4313      	orrs	r3, r2
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	330a      	adds	r3, #10
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b29a      	uxth	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	330b      	adds	r3, #11
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	b29b      	uxth	r3, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	330c      	adds	r3, #12
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	b29a      	uxth	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	330d      	adds	r3, #13
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	b29b      	uxth	r3, r3
 8008946:	4313      	orrs	r3, r2
 8008948:	b29a      	uxth	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	7b9a      	ldrb	r2, [r3, #14]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	7bda      	ldrb	r2, [r3, #15]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	7c1a      	ldrb	r2, [r3, #16]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	7c5a      	ldrb	r2, [r3, #17]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	745a      	strb	r2, [r3, #17]
  }
}
 800896e:	bf00      	nop
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b08a      	sub	sp, #40	; 0x28
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	4613      	mov	r3, r2
 8008986:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	785a      	ldrb	r2, [r3, #1]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	3302      	adds	r3, #2
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	3303      	adds	r3, #3
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	b29b      	uxth	r3, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	791a      	ldrb	r2, [r3, #4]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	795a      	ldrb	r2, [r3, #5]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	799a      	ldrb	r2, [r3, #6]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	79da      	ldrb	r2, [r3, #7]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	7a1a      	ldrb	r2, [r3, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80089f0:	88fb      	ldrh	r3, [r7, #6]
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d95f      	bls.n	8008ab6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80089f6:	2309      	movs	r3, #9
 80089f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089fe:	e051      	b.n	8008aa4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a00:	f107 0316 	add.w	r3, r7, #22
 8008a04:	4619      	mov	r1, r3
 8008a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a08:	f000 f8e8 	bl	8008bdc <USBH_GetNextDesc>
 8008a0c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d146      	bne.n	8008aa4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a1a:	221a      	movs	r2, #26
 8008a1c:	fb02 f303 	mul.w	r3, r2, r3
 8008a20:	3308      	adds	r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	3302      	adds	r3, #2
 8008a28:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a2c:	69f8      	ldr	r0, [r7, #28]
 8008a2e:	f000 f846 	bl	8008abe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a3c:	e022      	b.n	8008a84 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a3e:	f107 0316 	add.w	r3, r7, #22
 8008a42:	4619      	mov	r1, r3
 8008a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a46:	f000 f8c9 	bl	8008bdc <USBH_GetNextDesc>
 8008a4a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	785b      	ldrb	r3, [r3, #1]
 8008a50:	2b05      	cmp	r3, #5
 8008a52:	d117      	bne.n	8008a84 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a58:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	00d2      	lsls	r2, r2, #3
 8008a60:	211a      	movs	r1, #26
 8008a62:	fb01 f303 	mul.w	r3, r1, r3
 8008a66:	4413      	add	r3, r2
 8008a68:	3308      	adds	r3, #8
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	3304      	adds	r3, #4
 8008a70:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a74:	69b8      	ldr	r0, [r7, #24]
 8008a76:	f000 f851 	bl	8008b1c <USBH_ParseEPDesc>
            ep_ix++;
 8008a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a7e:	3301      	adds	r3, #1
 8008a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	791b      	ldrb	r3, [r3, #4]
 8008a88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d204      	bcs.n	8008a9a <USBH_ParseCfgDesc+0x120>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	885a      	ldrh	r2, [r3, #2]
 8008a94:	8afb      	ldrh	r3, [r7, #22]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d8d1      	bhi.n	8008a3e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d804      	bhi.n	8008ab6 <USBH_ParseCfgDesc+0x13c>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	885a      	ldrh	r2, [r3, #2]
 8008ab0:	8afb      	ldrh	r3, [r7, #22]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d8a4      	bhi.n	8008a00 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	3728      	adds	r7, #40	; 0x28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781a      	ldrb	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	785a      	ldrb	r2, [r3, #1]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	789a      	ldrb	r2, [r3, #2]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	78da      	ldrb	r2, [r3, #3]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	791a      	ldrb	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	795a      	ldrb	r2, [r3, #5]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	799a      	ldrb	r2, [r3, #6]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	79da      	ldrb	r2, [r3, #7]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	7a1a      	ldrb	r2, [r3, #8]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	721a      	strb	r2, [r3, #8]
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	785a      	ldrb	r2, [r3, #1]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	789a      	ldrb	r2, [r3, #2]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	78da      	ldrb	r2, [r3, #3]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	3305      	adds	r3, #5
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	799a      	ldrb	r2, [r3, #6]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	719a      	strb	r2, [r3, #6]
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b087      	sub	sp, #28
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	4613      	mov	r3, r2
 8008b82:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d120      	bne.n	8008bd0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	1e9a      	subs	r2, r3, #2
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bf28      	it	cs
 8008b9a:	4613      	movcs	r3, r2
 8008b9c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	82fb      	strh	r3, [r7, #22]
 8008ba8:	e00b      	b.n	8008bc2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008baa:	8afb      	ldrh	r3, [r7, #22]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	781a      	ldrb	r2, [r3, #0]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008bbc:	8afb      	ldrh	r3, [r7, #22]
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	82fb      	strh	r3, [r7, #22]
 8008bc2:	8afa      	ldrh	r2, [r7, #22]
 8008bc4:	8abb      	ldrh	r3, [r7, #20]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d3ef      	bcc.n	8008baa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	701a      	strb	r2, [r3, #0]
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	371c      	adds	r7, #28
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	881a      	ldrh	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c04:	68fb      	ldr	r3, [r7, #12]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	789b      	ldrb	r3, [r3, #2]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d002      	beq.n	8008c32 <USBH_CtlReq+0x20>
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d00f      	beq.n	8008c50 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c30:	e027      	b.n	8008c82 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	88fa      	ldrh	r2, [r7, #6]
 8008c3c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2202      	movs	r2, #2
 8008c48:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4e:	e018      	b.n	8008c82 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 f81b 	bl	8008c8c <USBH_HandleControl>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <USBH_CtlReq+0x54>
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d106      	bne.n	8008c74 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	761a      	strb	r2, [r3, #24]
      break;
 8008c72:	e005      	b.n	8008c80 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d102      	bne.n	8008c80 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	709a      	strb	r2, [r3, #2]
      break;
 8008c80:	bf00      	nop
  }
  return status;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c94:	2301      	movs	r3, #1
 8008c96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7e1b      	ldrb	r3, [r3, #24]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	2b0a      	cmp	r3, #10
 8008ca4:	f200 8158 	bhi.w	8008f58 <USBH_HandleControl+0x2cc>
 8008ca8:	a201      	add	r2, pc, #4	; (adr r2, 8008cb0 <USBH_HandleControl+0x24>)
 8008caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cae:	bf00      	nop
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	08008cf7 	.word	0x08008cf7
 8008cb8:	08008d61 	.word	0x08008d61
 8008cbc:	08008d87 	.word	0x08008d87
 8008cc0:	08008dbf 	.word	0x08008dbf
 8008cc4:	08008deb 	.word	0x08008deb
 8008cc8:	08008e3d 	.word	0x08008e3d
 8008ccc:	08008e5f 	.word	0x08008e5f
 8008cd0:	08008e9b 	.word	0x08008e9b
 8008cd4:	08008ec3 	.word	0x08008ec3
 8008cd8:	08008f01 	.word	0x08008f01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f103 0110 	add.w	r1, r3, #16
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	795b      	ldrb	r3, [r3, #5]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f945 	bl	8008f78 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	761a      	strb	r2, [r3, #24]
      break;
 8008cf4:	e13b      	b.n	8008f6e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	795b      	ldrb	r3, [r3, #5]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fcc5 	bl	800968c <USBH_LL_GetURBState>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d11e      	bne.n	8008d4a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	7c1b      	ldrb	r3, [r3, #16]
 8008d10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	8adb      	ldrh	r3, [r3, #22]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d1e:	7b7b      	ldrb	r3, [r7, #13]
 8008d20:	2b80      	cmp	r3, #128	; 0x80
 8008d22:	d103      	bne.n	8008d2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2203      	movs	r2, #3
 8008d28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d2a:	e117      	b.n	8008f5c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2205      	movs	r2, #5
 8008d30:	761a      	strb	r2, [r3, #24]
      break;
 8008d32:	e113      	b.n	8008f5c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008d34:	7b7b      	ldrb	r3, [r7, #13]
 8008d36:	2b80      	cmp	r3, #128	; 0x80
 8008d38:	d103      	bne.n	8008d42 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2209      	movs	r2, #9
 8008d3e:	761a      	strb	r2, [r3, #24]
      break;
 8008d40:	e10c      	b.n	8008f5c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2207      	movs	r2, #7
 8008d46:	761a      	strb	r2, [r3, #24]
      break;
 8008d48:	e108      	b.n	8008f5c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d003      	beq.n	8008d58 <USBH_HandleControl+0xcc>
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	f040 8102 	bne.w	8008f5c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	220b      	movs	r2, #11
 8008d5c:	761a      	strb	r2, [r3, #24]
      break;
 8008d5e:	e0fd      	b.n	8008f5c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6899      	ldr	r1, [r3, #8]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	899a      	ldrh	r2, [r3, #12]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	791b      	ldrb	r3, [r3, #4]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f93c 	bl	8008ff6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2204      	movs	r2, #4
 8008d82:	761a      	strb	r2, [r3, #24]
      break;
 8008d84:	e0f3      	b.n	8008f6e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	791b      	ldrb	r3, [r3, #4]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fc7d 	bl	800968c <USBH_LL_GetURBState>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d102      	bne.n	8008da2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2209      	movs	r2, #9
 8008da0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b05      	cmp	r3, #5
 8008da6:	d102      	bne.n	8008dae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008da8:	2303      	movs	r3, #3
 8008daa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008dac:	e0d8      	b.n	8008f60 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	f040 80d5 	bne.w	8008f60 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	220b      	movs	r2, #11
 8008dba:	761a      	strb	r2, [r3, #24]
      break;
 8008dbc:	e0d0      	b.n	8008f60 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6899      	ldr	r1, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	899a      	ldrh	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	7958      	ldrb	r0, [r3, #5]
 8008dca:	2301      	movs	r3, #1
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f8eb 	bl	8008fac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2206      	movs	r2, #6
 8008de6:	761a      	strb	r2, [r3, #24]
      break;
 8008de8:	e0c1      	b.n	8008f6e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	795b      	ldrb	r3, [r3, #5]
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fc4b 	bl	800968c <USBH_LL_GetURBState>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d103      	bne.n	8008e08 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2207      	movs	r2, #7
 8008e04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e06:	e0ad      	b.n	8008f64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d105      	bne.n	8008e1a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	220c      	movs	r2, #12
 8008e12:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e14:	2303      	movs	r3, #3
 8008e16:	73fb      	strb	r3, [r7, #15]
      break;
 8008e18:	e0a4      	b.n	8008f64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d103      	bne.n	8008e28 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2205      	movs	r2, #5
 8008e24:	761a      	strb	r2, [r3, #24]
      break;
 8008e26:	e09d      	b.n	8008f64 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	f040 809a 	bne.w	8008f64 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	220b      	movs	r2, #11
 8008e34:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e36:	2302      	movs	r3, #2
 8008e38:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3a:	e093      	b.n	8008f64 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	791b      	ldrb	r3, [r3, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	2100      	movs	r1, #0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f8d6 	bl	8008ff6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2208      	movs	r2, #8
 8008e5a:	761a      	strb	r2, [r3, #24]

      break;
 8008e5c:	e087      	b.n	8008f6e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	791b      	ldrb	r3, [r3, #4]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc11 	bl	800968c <USBH_LL_GetURBState>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d105      	bne.n	8008e80 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	220d      	movs	r2, #13
 8008e78:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e7e:	e073      	b.n	8008f68 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d103      	bne.n	8008e8e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	220b      	movs	r2, #11
 8008e8a:	761a      	strb	r2, [r3, #24]
      break;
 8008e8c:	e06c      	b.n	8008f68 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b05      	cmp	r3, #5
 8008e92:	d169      	bne.n	8008f68 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008e94:	2303      	movs	r3, #3
 8008e96:	73fb      	strb	r3, [r7, #15]
      break;
 8008e98:	e066      	b.n	8008f68 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	795a      	ldrb	r2, [r3, #5]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f87f 	bl	8008fac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	220a      	movs	r2, #10
 8008ebe:	761a      	strb	r2, [r3, #24]
      break;
 8008ec0:	e055      	b.n	8008f6e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	795b      	ldrb	r3, [r3, #5]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fbdf 	bl	800968c <USBH_LL_GetURBState>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d105      	bne.n	8008ee4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	220d      	movs	r2, #13
 8008ee0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ee2:	e043      	b.n	8008f6c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d103      	bne.n	8008ef2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2209      	movs	r2, #9
 8008eee:	761a      	strb	r2, [r3, #24]
      break;
 8008ef0:	e03c      	b.n	8008f6c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d139      	bne.n	8008f6c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	220b      	movs	r2, #11
 8008efc:	761a      	strb	r2, [r3, #24]
      break;
 8008efe:	e035      	b.n	8008f6c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7e5b      	ldrb	r3, [r3, #25]
 8008f04:	3301      	adds	r3, #1
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	765a      	strb	r2, [r3, #25]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	7e5b      	ldrb	r3, [r3, #25]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d806      	bhi.n	8008f22 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f20:	e025      	b.n	8008f6e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f28:	2106      	movs	r1, #6
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	795b      	ldrb	r3, [r3, #5]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f90c 	bl	8009158 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	791b      	ldrb	r3, [r3, #4]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f906 	bl	8009158 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f52:	2302      	movs	r3, #2
 8008f54:	73fb      	strb	r3, [r7, #15]
      break;
 8008f56:	e00a      	b.n	8008f6e <USBH_HandleControl+0x2e2>

    default:
      break;
 8008f58:	bf00      	nop
 8008f5a:	e008      	b.n	8008f6e <USBH_HandleControl+0x2e2>
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e006      	b.n	8008f6e <USBH_HandleControl+0x2e2>
      break;
 8008f60:	bf00      	nop
 8008f62:	e004      	b.n	8008f6e <USBH_HandleControl+0x2e2>
      break;
 8008f64:	bf00      	nop
 8008f66:	e002      	b.n	8008f6e <USBH_HandleControl+0x2e2>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e000      	b.n	8008f6e <USBH_HandleControl+0x2e2>
      break;
 8008f6c:	bf00      	nop
  }

  return status;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af04      	add	r7, sp, #16
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f86:	79f9      	ldrb	r1, [r7, #7]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	9302      	str	r3, [sp, #8]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	2300      	movs	r3, #0
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fb44 	bl	800962a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af04      	add	r7, sp, #16
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	461a      	mov	r2, r3
 8008fba:	460b      	mov	r3, r1
 8008fbc:	80fb      	strh	r3, [r7, #6]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fd0:	7979      	ldrb	r1, [r7, #5]
 8008fd2:	7e3b      	ldrb	r3, [r7, #24]
 8008fd4:	9303      	str	r3, [sp, #12]
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	9302      	str	r3, [sp, #8]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	2301      	movs	r3, #1
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 fb1f 	bl	800962a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b088      	sub	sp, #32
 8008ffa:	af04      	add	r7, sp, #16
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	4611      	mov	r1, r2
 8009002:	461a      	mov	r2, r3
 8009004:	460b      	mov	r3, r1
 8009006:	80fb      	strh	r3, [r7, #6]
 8009008:	4613      	mov	r3, r2
 800900a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800900c:	7979      	ldrb	r1, [r7, #5]
 800900e:	2300      	movs	r3, #0
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	2301      	movs	r3, #1
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	2201      	movs	r2, #1
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fb01 	bl	800962a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009028:	2300      	movs	r3, #0

}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b088      	sub	sp, #32
 8009036:	af04      	add	r7, sp, #16
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	4611      	mov	r1, r2
 800903e:	461a      	mov	r2, r3
 8009040:	460b      	mov	r3, r1
 8009042:	80fb      	strh	r3, [r7, #6]
 8009044:	4613      	mov	r3, r2
 8009046:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009056:	7979      	ldrb	r1, [r7, #5]
 8009058:	7e3b      	ldrb	r3, [r7, #24]
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	9302      	str	r3, [sp, #8]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	2301      	movs	r3, #1
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	2302      	movs	r3, #2
 800906a:	2200      	movs	r2, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 fadc 	bl	800962a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af04      	add	r7, sp, #16
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4611      	mov	r1, r2
 8009088:	461a      	mov	r2, r3
 800908a:	460b      	mov	r3, r1
 800908c:	80fb      	strh	r3, [r7, #6]
 800908e:	4613      	mov	r3, r2
 8009090:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009092:	7979      	ldrb	r1, [r7, #5]
 8009094:	2300      	movs	r3, #0
 8009096:	9303      	str	r3, [sp, #12]
 8009098:	88fb      	ldrh	r3, [r7, #6]
 800909a:	9302      	str	r3, [sp, #8]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	2301      	movs	r3, #1
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2302      	movs	r3, #2
 80090a6:	2201      	movs	r2, #1
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 fabe 	bl	800962a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af04      	add	r7, sp, #16
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	4608      	mov	r0, r1
 80090c2:	4611      	mov	r1, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	4603      	mov	r3, r0
 80090c8:	70fb      	strb	r3, [r7, #3]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70bb      	strb	r3, [r7, #2]
 80090ce:	4613      	mov	r3, r2
 80090d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090d2:	7878      	ldrb	r0, [r7, #1]
 80090d4:	78ba      	ldrb	r2, [r7, #2]
 80090d6:	78f9      	ldrb	r1, [r7, #3]
 80090d8:	8b3b      	ldrh	r3, [r7, #24]
 80090da:	9302      	str	r3, [sp, #8]
 80090dc:	7d3b      	ldrb	r3, [r7, #20]
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	7c3b      	ldrb	r3, [r7, #16]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	4603      	mov	r3, r0
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fa51 	bl	800958e <USBH_LL_OpenPipe>

  return USBH_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa70 	bl	80095ec <USBH_LL_ClosePipe>

  return USBH_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f836 	bl	8009194 <USBH_GetFreePipe>
 8009128:	4603      	mov	r3, r0
 800912a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800912c:	89fb      	ldrh	r3, [r7, #14]
 800912e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009132:	4293      	cmp	r3, r2
 8009134:	d00a      	beq.n	800914c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	89fb      	ldrh	r3, [r7, #14]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	33e0      	adds	r3, #224	; 0xe0
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	440b      	add	r3, r1
 800914a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800914c:	89fb      	ldrh	r3, [r7, #14]
 800914e:	b2db      	uxtb	r3, r3
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	2b0a      	cmp	r3, #10
 8009168:	d80d      	bhi.n	8009186 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	33e0      	adds	r3, #224	; 0xe0
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	33e0      	adds	r3, #224	; 0xe0
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
 80091a4:	e00f      	b.n	80091c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	33e0      	adds	r3, #224	; 0xe0
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d102      	bne.n	80091c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	e007      	b.n	80091d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	3301      	adds	r3, #1
 80091c4:	73fb      	strb	r3, [r7, #15]
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	2b0a      	cmp	r3, #10
 80091ca:	d9ec      	bls.n	80091a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80091e0:	2201      	movs	r2, #1
 80091e2:	490e      	ldr	r1, [pc, #56]	; (800921c <MX_USB_HOST_Init+0x40>)
 80091e4:	480e      	ldr	r0, [pc, #56]	; (8009220 <MX_USB_HOST_Init+0x44>)
 80091e6:	f7fe fc9f 	bl	8007b28 <USBH_Init>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80091f0:	f7f7 fc4a 	bl	8000a88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80091f4:	490b      	ldr	r1, [pc, #44]	; (8009224 <MX_USB_HOST_Init+0x48>)
 80091f6:	480a      	ldr	r0, [pc, #40]	; (8009220 <MX_USB_HOST_Init+0x44>)
 80091f8:	f7fe fd24 	bl	8007c44 <USBH_RegisterClass>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009202:	f7f7 fc41 	bl	8000a88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009206:	4806      	ldr	r0, [pc, #24]	; (8009220 <MX_USB_HOST_Init+0x44>)
 8009208:	f7fe fda8 	bl	8007d5c <USBH_Start>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009212:	f7f7 fc39 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009216:	bf00      	nop
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	0800923d 	.word	0x0800923d
 8009220:	20000278 	.word	0x20000278
 8009224:	2000000c 	.word	0x2000000c

08009228 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800922c:	4802      	ldr	r0, [pc, #8]	; (8009238 <MX_USB_HOST_Process+0x10>)
 800922e:	f7fe fda5 	bl	8007d7c <USBH_Process>
}
 8009232:	bf00      	nop
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000278 	.word	0x20000278

0800923c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	3b01      	subs	r3, #1
 800924c:	2b04      	cmp	r3, #4
 800924e:	d819      	bhi.n	8009284 <USBH_UserProcess+0x48>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <USBH_UserProcess+0x1c>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	08009285 	.word	0x08009285
 800925c:	08009275 	.word	0x08009275
 8009260:	08009285 	.word	0x08009285
 8009264:	0800927d 	.word	0x0800927d
 8009268:	0800926d 	.word	0x0800926d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800926c:	4b09      	ldr	r3, [pc, #36]	; (8009294 <USBH_UserProcess+0x58>)
 800926e:	2203      	movs	r2, #3
 8009270:	701a      	strb	r2, [r3, #0]
  break;
 8009272:	e008      	b.n	8009286 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009274:	4b07      	ldr	r3, [pc, #28]	; (8009294 <USBH_UserProcess+0x58>)
 8009276:	2202      	movs	r2, #2
 8009278:	701a      	strb	r2, [r3, #0]
  break;
 800927a:	e004      	b.n	8009286 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <USBH_UserProcess+0x58>)
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
  break;
 8009282:	e000      	b.n	8009286 <USBH_UserProcess+0x4a>

  default:
  break;
 8009284:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	200000b4 	.word	0x200000b4

08009298 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092a0:	f107 0314 	add.w	r3, r7, #20
 80092a4:	2200      	movs	r2, #0
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	605a      	str	r2, [r3, #4]
 80092aa:	609a      	str	r2, [r3, #8]
 80092ac:	60da      	str	r2, [r3, #12]
 80092ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092b8:	d147      	bne.n	800934a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092ba:	2300      	movs	r3, #0
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	4b25      	ldr	r3, [pc, #148]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	4a24      	ldr	r2, [pc, #144]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 80092c4:	f043 0301 	orr.w	r3, r3, #1
 80092c8:	6313      	str	r3, [r2, #48]	; 0x30
 80092ca:	4b22      	ldr	r3, [pc, #136]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	613b      	str	r3, [r7, #16]
 80092d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092dc:	2300      	movs	r3, #0
 80092de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092e4:	f107 0314 	add.w	r3, r7, #20
 80092e8:	4619      	mov	r1, r3
 80092ea:	481b      	ldr	r0, [pc, #108]	; (8009358 <HAL_HCD_MspInit+0xc0>)
 80092ec:	f7f8 f910 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80092f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092f6:	2302      	movs	r3, #2
 80092f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092fe:	2300      	movs	r3, #0
 8009300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009302:	230a      	movs	r3, #10
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009306:	f107 0314 	add.w	r3, r7, #20
 800930a:	4619      	mov	r1, r3
 800930c:	4812      	ldr	r0, [pc, #72]	; (8009358 <HAL_HCD_MspInit+0xc0>)
 800930e:	f7f8 f8ff 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009312:	4b10      	ldr	r3, [pc, #64]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 8009314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009316:	4a0f      	ldr	r2, [pc, #60]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 8009318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931c:	6353      	str	r3, [r2, #52]	; 0x34
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 8009324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009326:	4a0b      	ldr	r2, [pc, #44]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 8009328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800932c:	6453      	str	r3, [r2, #68]	; 0x44
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <HAL_HCD_MspInit+0xbc>)
 8009330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800933a:	2200      	movs	r2, #0
 800933c:	2100      	movs	r1, #0
 800933e:	2043      	movs	r0, #67	; 0x43
 8009340:	f7f8 f88d 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009344:	2043      	movs	r0, #67	; 0x43
 8009346:	f7f8 f8a6 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800934a:	bf00      	nop
 800934c:	3728      	adds	r7, #40	; 0x28
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	40023800 	.word	0x40023800
 8009358:	40020000 	.word	0x40020000

0800935c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff f8d9 	bl	8008522 <USBH_LL_IncTimer>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff f911 	bl	80085ae <USBH_LL_Connect>
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff f91a 	bl	80085dc <USBH_LL_Disconnect>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
 80093bc:	4613      	mov	r3, r2
 80093be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff f8cb 	bl	8008576 <USBH_LL_PortEnabled>
} 
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff f8cb 	bl	8008592 <USBH_LL_PortDisabled>
} 
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009412:	2b01      	cmp	r3, #1
 8009414:	d12a      	bne.n	800946c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009416:	4a18      	ldr	r2, [pc, #96]	; (8009478 <USBH_LL_Init+0x74>)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a15      	ldr	r2, [pc, #84]	; (8009478 <USBH_LL_Init+0x74>)
 8009422:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <USBH_LL_Init+0x74>)
 8009428:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800942c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800942e:	4b12      	ldr	r3, [pc, #72]	; (8009478 <USBH_LL_Init+0x74>)
 8009430:	2208      	movs	r2, #8
 8009432:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009434:	4b10      	ldr	r3, [pc, #64]	; (8009478 <USBH_LL_Init+0x74>)
 8009436:	2201      	movs	r2, #1
 8009438:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800943a:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <USBH_LL_Init+0x74>)
 800943c:	2200      	movs	r2, #0
 800943e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009440:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <USBH_LL_Init+0x74>)
 8009442:	2202      	movs	r2, #2
 8009444:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009446:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <USBH_LL_Init+0x74>)
 8009448:	2200      	movs	r2, #0
 800944a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800944c:	480a      	ldr	r0, [pc, #40]	; (8009478 <USBH_LL_Init+0x74>)
 800944e:	f7f8 fa36 	bl	80018be <HAL_HCD_Init>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009458:	f7f7 fb16 	bl	8000a88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800945c:	4806      	ldr	r0, [pc, #24]	; (8009478 <USBH_LL_Init+0x74>)
 800945e:	f7f8 fe39 	bl	80020d4 <HAL_HCD_GetCurrentFrame>
 8009462:	4603      	mov	r3, r0
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff f84c 	bl	8008504 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000650 	.word	0x20000650

0800947c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009492:	4618      	mov	r0, r3
 8009494:	f7f8 fda6 	bl	8001fe4 <HAL_HCD_Start>
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 f95c 	bl	800975c <USBH_Get_USB_Status>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f8 fdae 	bl	800202a <HAL_HCD_Stop>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f941 	bl	800975c <USBH_Get_USB_Status>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80094de:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f8 fdf8 	bl	80020f0 <HAL_HCD_GetCurrentSpeed>
 8009500:	4603      	mov	r3, r0
 8009502:	2b01      	cmp	r3, #1
 8009504:	d007      	beq.n	8009516 <USBH_LL_GetSpeed+0x2e>
 8009506:	2b01      	cmp	r3, #1
 8009508:	d302      	bcc.n	8009510 <USBH_LL_GetSpeed+0x28>
 800950a:	2b02      	cmp	r3, #2
 800950c:	d006      	beq.n	800951c <USBH_LL_GetSpeed+0x34>
 800950e:	e008      	b.n	8009522 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
    break;
 8009514:	e008      	b.n	8009528 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009516:	2301      	movs	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
    break;
 800951a:	e005      	b.n	8009528 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800951c:	2302      	movs	r3, #2
 800951e:	73fb      	strb	r3, [r7, #15]
    break;
 8009520:	e002      	b.n	8009528 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
    break;
 8009526:	bf00      	nop
  }
  return  speed;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009548:	4618      	mov	r0, r3
 800954a:	f7f8 fd8b 	bl	8002064 <HAL_HCD_ResetPort>
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 f901 	bl	800975c <USBH_Get_USB_Status>
 800955a:	4603      	mov	r3, r0
 800955c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800955e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800957a:	78fa      	ldrb	r2, [r7, #3]
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f7f8 fd93 	bl	80020aa <HAL_HCD_HC_GetXferCount>
 8009584:	4603      	mov	r3, r0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800958e:	b590      	push	{r4, r7, lr}
 8009590:	b089      	sub	sp, #36	; 0x24
 8009592:	af04      	add	r7, sp, #16
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	461a      	mov	r2, r3
 800959c:	4603      	mov	r3, r0
 800959e:	70fb      	strb	r3, [r7, #3]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70bb      	strb	r3, [r7, #2]
 80095a4:	4613      	mov	r3, r2
 80095a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095b6:	787c      	ldrb	r4, [r7, #1]
 80095b8:	78ba      	ldrb	r2, [r7, #2]
 80095ba:	78f9      	ldrb	r1, [r7, #3]
 80095bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	4623      	mov	r3, r4
 80095ce:	f7f8 f9d8 	bl	8001982 <HAL_HCD_HC_Init>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f8bf 	bl	800975c <USBH_Get_USB_Status>
 80095de:	4603      	mov	r3, r0
 80095e0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd90      	pop	{r4, r7, pc}

080095ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f7f8 fa51 	bl	8001ab2 <HAL_HCD_HC_Halt>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f8a0 	bl	800975c <USBH_Get_USB_Status>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009620:	7bbb      	ldrb	r3, [r7, #14]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800962a:	b590      	push	{r4, r7, lr}
 800962c:	b089      	sub	sp, #36	; 0x24
 800962e:	af04      	add	r7, sp, #16
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	4608      	mov	r0, r1
 8009634:	4611      	mov	r1, r2
 8009636:	461a      	mov	r2, r3
 8009638:	4603      	mov	r3, r0
 800963a:	70fb      	strb	r3, [r7, #3]
 800963c:	460b      	mov	r3, r1
 800963e:	70bb      	strb	r3, [r7, #2]
 8009640:	4613      	mov	r3, r2
 8009642:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009652:	787c      	ldrb	r4, [r7, #1]
 8009654:	78ba      	ldrb	r2, [r7, #2]
 8009656:	78f9      	ldrb	r1, [r7, #3]
 8009658:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4623      	mov	r3, r4
 800966e:	f7f8 fa43 	bl	8001af8 <HAL_HCD_HC_SubmitRequest>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f86f 	bl	800975c <USBH_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	bd90      	pop	{r4, r7, pc}

0800968c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f8 fcec 	bl	8002080 <HAL_HCD_HC_GetURBState>
 80096a8:	4603      	mov	r3, r0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d103      	bne.n	80096d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f872 	bl	80097b4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80096d0:	20c8      	movs	r0, #200	; 0xc8
 80096d2:	f7f7 fdc7 	bl	8001264 <HAL_Delay>
  return USBH_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
 80096ec:	4613      	mov	r3, r2
 80096ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	440b      	add	r3, r1
 8009706:	333b      	adds	r3, #59	; 0x3b
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800970e:	78fa      	ldrb	r2, [r7, #3]
 8009710:	68f9      	ldr	r1, [r7, #12]
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	440b      	add	r3, r1
 800971c:	3350      	adds	r3, #80	; 0x50
 800971e:	78ba      	ldrb	r2, [r7, #2]
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	e009      	b.n	8009738 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	68f9      	ldr	r1, [r7, #12]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	440b      	add	r3, r1
 8009732:	3351      	adds	r3, #81	; 0x51
 8009734:	78ba      	ldrb	r2, [r7, #2]
 8009736:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7f7 fd88 	bl	8001264 <HAL_Delay>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d817      	bhi.n	80097a0 <USBH_Get_USB_Status+0x44>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <USBH_Get_USB_Status+0x1c>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	08009789 	.word	0x08009789
 800977c:	0800978f 	.word	0x0800978f
 8009780:	08009795 	.word	0x08009795
 8009784:	0800979b 	.word	0x0800979b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
    break;
 800978c:	e00b      	b.n	80097a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800978e:	2302      	movs	r3, #2
 8009790:	73fb      	strb	r3, [r7, #15]
    break;
 8009792:	e008      	b.n	80097a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009794:	2301      	movs	r3, #1
 8009796:	73fb      	strb	r3, [r7, #15]
    break;
 8009798:	e005      	b.n	80097a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800979a:	2302      	movs	r3, #2
 800979c:	73fb      	strb	r3, [r7, #15]
    break;
 800979e:	e002      	b.n	80097a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80097a0:	2302      	movs	r3, #2
 80097a2:	73fb      	strb	r3, [r7, #15]
    break;
 80097a4:	bf00      	nop
  }
  return usb_status;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80097c8:	2301      	movs	r3, #1
 80097ca:	73fb      	strb	r3, [r7, #15]
 80097cc:	e001      	b.n	80097d2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	461a      	mov	r2, r3
 80097d6:	2101      	movs	r1, #1
 80097d8:	4803      	ldr	r0, [pc, #12]	; (80097e8 <MX_DriverVbusFS+0x34>)
 80097da:	f7f8 f833 	bl	8001844 <HAL_GPIO_WritePin>
}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	40020800 	.word	0x40020800

080097ec <__errno>:
 80097ec:	4b01      	ldr	r3, [pc, #4]	; (80097f4 <__errno+0x8>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	2000002c 	.word	0x2000002c

080097f8 <__libc_init_array>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4e0d      	ldr	r6, [pc, #52]	; (8009830 <__libc_init_array+0x38>)
 80097fc:	4c0d      	ldr	r4, [pc, #52]	; (8009834 <__libc_init_array+0x3c>)
 80097fe:	1ba4      	subs	r4, r4, r6
 8009800:	10a4      	asrs	r4, r4, #2
 8009802:	2500      	movs	r5, #0
 8009804:	42a5      	cmp	r5, r4
 8009806:	d109      	bne.n	800981c <__libc_init_array+0x24>
 8009808:	4e0b      	ldr	r6, [pc, #44]	; (8009838 <__libc_init_array+0x40>)
 800980a:	4c0c      	ldr	r4, [pc, #48]	; (800983c <__libc_init_array+0x44>)
 800980c:	f000 fc98 	bl	800a140 <_init>
 8009810:	1ba4      	subs	r4, r4, r6
 8009812:	10a4      	asrs	r4, r4, #2
 8009814:	2500      	movs	r5, #0
 8009816:	42a5      	cmp	r5, r4
 8009818:	d105      	bne.n	8009826 <__libc_init_array+0x2e>
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009820:	4798      	blx	r3
 8009822:	3501      	adds	r5, #1
 8009824:	e7ee      	b.n	8009804 <__libc_init_array+0xc>
 8009826:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800982a:	4798      	blx	r3
 800982c:	3501      	adds	r5, #1
 800982e:	e7f2      	b.n	8009816 <__libc_init_array+0x1e>
 8009830:	0800a1e8 	.word	0x0800a1e8
 8009834:	0800a1e8 	.word	0x0800a1e8
 8009838:	0800a1e8 	.word	0x0800a1e8
 800983c:	0800a1ec 	.word	0x0800a1ec

08009840 <malloc>:
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <malloc+0xc>)
 8009842:	4601      	mov	r1, r0
 8009844:	6818      	ldr	r0, [r3, #0]
 8009846:	f000 b861 	b.w	800990c <_malloc_r>
 800984a:	bf00      	nop
 800984c:	2000002c 	.word	0x2000002c

08009850 <free>:
 8009850:	4b02      	ldr	r3, [pc, #8]	; (800985c <free+0xc>)
 8009852:	4601      	mov	r1, r0
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	f000 b80b 	b.w	8009870 <_free_r>
 800985a:	bf00      	nop
 800985c:	2000002c 	.word	0x2000002c

08009860 <memset>:
 8009860:	4402      	add	r2, r0
 8009862:	4603      	mov	r3, r0
 8009864:	4293      	cmp	r3, r2
 8009866:	d100      	bne.n	800986a <memset+0xa>
 8009868:	4770      	bx	lr
 800986a:	f803 1b01 	strb.w	r1, [r3], #1
 800986e:	e7f9      	b.n	8009864 <memset+0x4>

08009870 <_free_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4605      	mov	r5, r0
 8009874:	2900      	cmp	r1, #0
 8009876:	d045      	beq.n	8009904 <_free_r+0x94>
 8009878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800987c:	1f0c      	subs	r4, r1, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	bfb8      	it	lt
 8009882:	18e4      	addlt	r4, r4, r3
 8009884:	f000 fbae 	bl	8009fe4 <__malloc_lock>
 8009888:	4a1f      	ldr	r2, [pc, #124]	; (8009908 <_free_r+0x98>)
 800988a:	6813      	ldr	r3, [r2, #0]
 800988c:	4610      	mov	r0, r2
 800988e:	b933      	cbnz	r3, 800989e <_free_r+0x2e>
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6014      	str	r4, [r2, #0]
 8009894:	4628      	mov	r0, r5
 8009896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989a:	f000 bba4 	b.w	8009fe6 <__malloc_unlock>
 800989e:	42a3      	cmp	r3, r4
 80098a0:	d90c      	bls.n	80098bc <_free_r+0x4c>
 80098a2:	6821      	ldr	r1, [r4, #0]
 80098a4:	1862      	adds	r2, r4, r1
 80098a6:	4293      	cmp	r3, r2
 80098a8:	bf04      	itt	eq
 80098aa:	681a      	ldreq	r2, [r3, #0]
 80098ac:	685b      	ldreq	r3, [r3, #4]
 80098ae:	6063      	str	r3, [r4, #4]
 80098b0:	bf04      	itt	eq
 80098b2:	1852      	addeq	r2, r2, r1
 80098b4:	6022      	streq	r2, [r4, #0]
 80098b6:	6004      	str	r4, [r0, #0]
 80098b8:	e7ec      	b.n	8009894 <_free_r+0x24>
 80098ba:	4613      	mov	r3, r2
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	b10a      	cbz	r2, 80098c4 <_free_r+0x54>
 80098c0:	42a2      	cmp	r2, r4
 80098c2:	d9fa      	bls.n	80098ba <_free_r+0x4a>
 80098c4:	6819      	ldr	r1, [r3, #0]
 80098c6:	1858      	adds	r0, r3, r1
 80098c8:	42a0      	cmp	r0, r4
 80098ca:	d10b      	bne.n	80098e4 <_free_r+0x74>
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	4401      	add	r1, r0
 80098d0:	1858      	adds	r0, r3, r1
 80098d2:	4282      	cmp	r2, r0
 80098d4:	6019      	str	r1, [r3, #0]
 80098d6:	d1dd      	bne.n	8009894 <_free_r+0x24>
 80098d8:	6810      	ldr	r0, [r2, #0]
 80098da:	6852      	ldr	r2, [r2, #4]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	4401      	add	r1, r0
 80098e0:	6019      	str	r1, [r3, #0]
 80098e2:	e7d7      	b.n	8009894 <_free_r+0x24>
 80098e4:	d902      	bls.n	80098ec <_free_r+0x7c>
 80098e6:	230c      	movs	r3, #12
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	e7d3      	b.n	8009894 <_free_r+0x24>
 80098ec:	6820      	ldr	r0, [r4, #0]
 80098ee:	1821      	adds	r1, r4, r0
 80098f0:	428a      	cmp	r2, r1
 80098f2:	bf04      	itt	eq
 80098f4:	6811      	ldreq	r1, [r2, #0]
 80098f6:	6852      	ldreq	r2, [r2, #4]
 80098f8:	6062      	str	r2, [r4, #4]
 80098fa:	bf04      	itt	eq
 80098fc:	1809      	addeq	r1, r1, r0
 80098fe:	6021      	streq	r1, [r4, #0]
 8009900:	605c      	str	r4, [r3, #4]
 8009902:	e7c7      	b.n	8009894 <_free_r+0x24>
 8009904:	bd38      	pop	{r3, r4, r5, pc}
 8009906:	bf00      	nop
 8009908:	200000b8 	.word	0x200000b8

0800990c <_malloc_r>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	1ccd      	adds	r5, r1, #3
 8009910:	f025 0503 	bic.w	r5, r5, #3
 8009914:	3508      	adds	r5, #8
 8009916:	2d0c      	cmp	r5, #12
 8009918:	bf38      	it	cc
 800991a:	250c      	movcc	r5, #12
 800991c:	2d00      	cmp	r5, #0
 800991e:	4606      	mov	r6, r0
 8009920:	db01      	blt.n	8009926 <_malloc_r+0x1a>
 8009922:	42a9      	cmp	r1, r5
 8009924:	d903      	bls.n	800992e <_malloc_r+0x22>
 8009926:	230c      	movs	r3, #12
 8009928:	6033      	str	r3, [r6, #0]
 800992a:	2000      	movs	r0, #0
 800992c:	bd70      	pop	{r4, r5, r6, pc}
 800992e:	f000 fb59 	bl	8009fe4 <__malloc_lock>
 8009932:	4a21      	ldr	r2, [pc, #132]	; (80099b8 <_malloc_r+0xac>)
 8009934:	6814      	ldr	r4, [r2, #0]
 8009936:	4621      	mov	r1, r4
 8009938:	b991      	cbnz	r1, 8009960 <_malloc_r+0x54>
 800993a:	4c20      	ldr	r4, [pc, #128]	; (80099bc <_malloc_r+0xb0>)
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	b91b      	cbnz	r3, 8009948 <_malloc_r+0x3c>
 8009940:	4630      	mov	r0, r6
 8009942:	f000 f8a1 	bl	8009a88 <_sbrk_r>
 8009946:	6020      	str	r0, [r4, #0]
 8009948:	4629      	mov	r1, r5
 800994a:	4630      	mov	r0, r6
 800994c:	f000 f89c 	bl	8009a88 <_sbrk_r>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d124      	bne.n	800999e <_malloc_r+0x92>
 8009954:	230c      	movs	r3, #12
 8009956:	6033      	str	r3, [r6, #0]
 8009958:	4630      	mov	r0, r6
 800995a:	f000 fb44 	bl	8009fe6 <__malloc_unlock>
 800995e:	e7e4      	b.n	800992a <_malloc_r+0x1e>
 8009960:	680b      	ldr	r3, [r1, #0]
 8009962:	1b5b      	subs	r3, r3, r5
 8009964:	d418      	bmi.n	8009998 <_malloc_r+0x8c>
 8009966:	2b0b      	cmp	r3, #11
 8009968:	d90f      	bls.n	800998a <_malloc_r+0x7e>
 800996a:	600b      	str	r3, [r1, #0]
 800996c:	50cd      	str	r5, [r1, r3]
 800996e:	18cc      	adds	r4, r1, r3
 8009970:	4630      	mov	r0, r6
 8009972:	f000 fb38 	bl	8009fe6 <__malloc_unlock>
 8009976:	f104 000b 	add.w	r0, r4, #11
 800997a:	1d23      	adds	r3, r4, #4
 800997c:	f020 0007 	bic.w	r0, r0, #7
 8009980:	1ac3      	subs	r3, r0, r3
 8009982:	d0d3      	beq.n	800992c <_malloc_r+0x20>
 8009984:	425a      	negs	r2, r3
 8009986:	50e2      	str	r2, [r4, r3]
 8009988:	e7d0      	b.n	800992c <_malloc_r+0x20>
 800998a:	428c      	cmp	r4, r1
 800998c:	684b      	ldr	r3, [r1, #4]
 800998e:	bf16      	itet	ne
 8009990:	6063      	strne	r3, [r4, #4]
 8009992:	6013      	streq	r3, [r2, #0]
 8009994:	460c      	movne	r4, r1
 8009996:	e7eb      	b.n	8009970 <_malloc_r+0x64>
 8009998:	460c      	mov	r4, r1
 800999a:	6849      	ldr	r1, [r1, #4]
 800999c:	e7cc      	b.n	8009938 <_malloc_r+0x2c>
 800999e:	1cc4      	adds	r4, r0, #3
 80099a0:	f024 0403 	bic.w	r4, r4, #3
 80099a4:	42a0      	cmp	r0, r4
 80099a6:	d005      	beq.n	80099b4 <_malloc_r+0xa8>
 80099a8:	1a21      	subs	r1, r4, r0
 80099aa:	4630      	mov	r0, r6
 80099ac:	f000 f86c 	bl	8009a88 <_sbrk_r>
 80099b0:	3001      	adds	r0, #1
 80099b2:	d0cf      	beq.n	8009954 <_malloc_r+0x48>
 80099b4:	6025      	str	r5, [r4, #0]
 80099b6:	e7db      	b.n	8009970 <_malloc_r+0x64>
 80099b8:	200000b8 	.word	0x200000b8
 80099bc:	200000bc 	.word	0x200000bc

080099c0 <_puts_r>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	460e      	mov	r6, r1
 80099c4:	4605      	mov	r5, r0
 80099c6:	b118      	cbz	r0, 80099d0 <_puts_r+0x10>
 80099c8:	6983      	ldr	r3, [r0, #24]
 80099ca:	b90b      	cbnz	r3, 80099d0 <_puts_r+0x10>
 80099cc:	f000 fa1c 	bl	8009e08 <__sinit>
 80099d0:	69ab      	ldr	r3, [r5, #24]
 80099d2:	68ac      	ldr	r4, [r5, #8]
 80099d4:	b913      	cbnz	r3, 80099dc <_puts_r+0x1c>
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 fa16 	bl	8009e08 <__sinit>
 80099dc:	4b23      	ldr	r3, [pc, #140]	; (8009a6c <_puts_r+0xac>)
 80099de:	429c      	cmp	r4, r3
 80099e0:	d117      	bne.n	8009a12 <_puts_r+0x52>
 80099e2:	686c      	ldr	r4, [r5, #4]
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	071b      	lsls	r3, r3, #28
 80099e8:	d51d      	bpl.n	8009a26 <_puts_r+0x66>
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	b1db      	cbz	r3, 8009a26 <_puts_r+0x66>
 80099ee:	3e01      	subs	r6, #1
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099f6:	3b01      	subs	r3, #1
 80099f8:	60a3      	str	r3, [r4, #8]
 80099fa:	b9e9      	cbnz	r1, 8009a38 <_puts_r+0x78>
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da2e      	bge.n	8009a5e <_puts_r+0x9e>
 8009a00:	4622      	mov	r2, r4
 8009a02:	210a      	movs	r1, #10
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 f84f 	bl	8009aa8 <__swbuf_r>
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	d011      	beq.n	8009a32 <_puts_r+0x72>
 8009a0e:	200a      	movs	r0, #10
 8009a10:	e011      	b.n	8009a36 <_puts_r+0x76>
 8009a12:	4b17      	ldr	r3, [pc, #92]	; (8009a70 <_puts_r+0xb0>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d101      	bne.n	8009a1c <_puts_r+0x5c>
 8009a18:	68ac      	ldr	r4, [r5, #8]
 8009a1a:	e7e3      	b.n	80099e4 <_puts_r+0x24>
 8009a1c:	4b15      	ldr	r3, [pc, #84]	; (8009a74 <_puts_r+0xb4>)
 8009a1e:	429c      	cmp	r4, r3
 8009a20:	bf08      	it	eq
 8009a22:	68ec      	ldreq	r4, [r5, #12]
 8009a24:	e7de      	b.n	80099e4 <_puts_r+0x24>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 f88f 	bl	8009b4c <__swsetup_r>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d0dd      	beq.n	80099ee <_puts_r+0x2e>
 8009a32:	f04f 30ff 	mov.w	r0, #4294967295
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	da04      	bge.n	8009a46 <_puts_r+0x86>
 8009a3c:	69a2      	ldr	r2, [r4, #24]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	dc06      	bgt.n	8009a50 <_puts_r+0x90>
 8009a42:	290a      	cmp	r1, #10
 8009a44:	d004      	beq.n	8009a50 <_puts_r+0x90>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	6022      	str	r2, [r4, #0]
 8009a4c:	7019      	strb	r1, [r3, #0]
 8009a4e:	e7cf      	b.n	80099f0 <_puts_r+0x30>
 8009a50:	4622      	mov	r2, r4
 8009a52:	4628      	mov	r0, r5
 8009a54:	f000 f828 	bl	8009aa8 <__swbuf_r>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d1c9      	bne.n	80099f0 <_puts_r+0x30>
 8009a5c:	e7e9      	b.n	8009a32 <_puts_r+0x72>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	200a      	movs	r0, #10
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	6022      	str	r2, [r4, #0]
 8009a66:	7018      	strb	r0, [r3, #0]
 8009a68:	e7e5      	b.n	8009a36 <_puts_r+0x76>
 8009a6a:	bf00      	nop
 8009a6c:	0800a1a0 	.word	0x0800a1a0
 8009a70:	0800a1c0 	.word	0x0800a1c0
 8009a74:	0800a180 	.word	0x0800a180

08009a78 <puts>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <puts+0xc>)
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	f7ff bf9f 	b.w	80099c0 <_puts_r>
 8009a82:	bf00      	nop
 8009a84:	2000002c 	.word	0x2000002c

08009a88 <_sbrk_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4c06      	ldr	r4, [pc, #24]	; (8009aa4 <_sbrk_r+0x1c>)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4605      	mov	r5, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	f7f7 f94c 	bl	8000d30 <_sbrk>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_sbrk_r+0x1a>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_sbrk_r+0x1a>
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	20000914 	.word	0x20000914

08009aa8 <__swbuf_r>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	460e      	mov	r6, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	4605      	mov	r5, r0
 8009ab0:	b118      	cbz	r0, 8009aba <__swbuf_r+0x12>
 8009ab2:	6983      	ldr	r3, [r0, #24]
 8009ab4:	b90b      	cbnz	r3, 8009aba <__swbuf_r+0x12>
 8009ab6:	f000 f9a7 	bl	8009e08 <__sinit>
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <__swbuf_r+0x98>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	d12a      	bne.n	8009b16 <__swbuf_r+0x6e>
 8009ac0:	686c      	ldr	r4, [r5, #4]
 8009ac2:	69a3      	ldr	r3, [r4, #24]
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	071a      	lsls	r2, r3, #28
 8009aca:	d52e      	bpl.n	8009b2a <__swbuf_r+0x82>
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	b363      	cbz	r3, 8009b2a <__swbuf_r+0x82>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	6820      	ldr	r0, [r4, #0]
 8009ad4:	1ac0      	subs	r0, r0, r3
 8009ad6:	6963      	ldr	r3, [r4, #20]
 8009ad8:	b2f6      	uxtb	r6, r6
 8009ada:	4283      	cmp	r3, r0
 8009adc:	4637      	mov	r7, r6
 8009ade:	dc04      	bgt.n	8009aea <__swbuf_r+0x42>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f926 	bl	8009d34 <_fflush_r>
 8009ae8:	bb28      	cbnz	r0, 8009b36 <__swbuf_r+0x8e>
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	60a3      	str	r3, [r4, #8]
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	6022      	str	r2, [r4, #0]
 8009af6:	701e      	strb	r6, [r3, #0]
 8009af8:	6963      	ldr	r3, [r4, #20]
 8009afa:	3001      	adds	r0, #1
 8009afc:	4283      	cmp	r3, r0
 8009afe:	d004      	beq.n	8009b0a <__swbuf_r+0x62>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	07db      	lsls	r3, r3, #31
 8009b04:	d519      	bpl.n	8009b3a <__swbuf_r+0x92>
 8009b06:	2e0a      	cmp	r6, #10
 8009b08:	d117      	bne.n	8009b3a <__swbuf_r+0x92>
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f000 f911 	bl	8009d34 <_fflush_r>
 8009b12:	b190      	cbz	r0, 8009b3a <__swbuf_r+0x92>
 8009b14:	e00f      	b.n	8009b36 <__swbuf_r+0x8e>
 8009b16:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <__swbuf_r+0x9c>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	d101      	bne.n	8009b20 <__swbuf_r+0x78>
 8009b1c:	68ac      	ldr	r4, [r5, #8]
 8009b1e:	e7d0      	b.n	8009ac2 <__swbuf_r+0x1a>
 8009b20:	4b09      	ldr	r3, [pc, #36]	; (8009b48 <__swbuf_r+0xa0>)
 8009b22:	429c      	cmp	r4, r3
 8009b24:	bf08      	it	eq
 8009b26:	68ec      	ldreq	r4, [r5, #12]
 8009b28:	e7cb      	b.n	8009ac2 <__swbuf_r+0x1a>
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f000 f80d 	bl	8009b4c <__swsetup_r>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0cc      	beq.n	8009ad0 <__swbuf_r+0x28>
 8009b36:	f04f 37ff 	mov.w	r7, #4294967295
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	0800a1a0 	.word	0x0800a1a0
 8009b44:	0800a1c0 	.word	0x0800a1c0
 8009b48:	0800a180 	.word	0x0800a180

08009b4c <__swsetup_r>:
 8009b4c:	4b32      	ldr	r3, [pc, #200]	; (8009c18 <__swsetup_r+0xcc>)
 8009b4e:	b570      	push	{r4, r5, r6, lr}
 8009b50:	681d      	ldr	r5, [r3, #0]
 8009b52:	4606      	mov	r6, r0
 8009b54:	460c      	mov	r4, r1
 8009b56:	b125      	cbz	r5, 8009b62 <__swsetup_r+0x16>
 8009b58:	69ab      	ldr	r3, [r5, #24]
 8009b5a:	b913      	cbnz	r3, 8009b62 <__swsetup_r+0x16>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f000 f953 	bl	8009e08 <__sinit>
 8009b62:	4b2e      	ldr	r3, [pc, #184]	; (8009c1c <__swsetup_r+0xd0>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	d10f      	bne.n	8009b88 <__swsetup_r+0x3c>
 8009b68:	686c      	ldr	r4, [r5, #4]
 8009b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	0715      	lsls	r5, r2, #28
 8009b72:	d42c      	bmi.n	8009bce <__swsetup_r+0x82>
 8009b74:	06d0      	lsls	r0, r2, #27
 8009b76:	d411      	bmi.n	8009b9c <__swsetup_r+0x50>
 8009b78:	2209      	movs	r2, #9
 8009b7a:	6032      	str	r2, [r6, #0]
 8009b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b80:	81a3      	strh	r3, [r4, #12]
 8009b82:	f04f 30ff 	mov.w	r0, #4294967295
 8009b86:	e03e      	b.n	8009c06 <__swsetup_r+0xba>
 8009b88:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <__swsetup_r+0xd4>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d101      	bne.n	8009b92 <__swsetup_r+0x46>
 8009b8e:	68ac      	ldr	r4, [r5, #8]
 8009b90:	e7eb      	b.n	8009b6a <__swsetup_r+0x1e>
 8009b92:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <__swsetup_r+0xd8>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	bf08      	it	eq
 8009b98:	68ec      	ldreq	r4, [r5, #12]
 8009b9a:	e7e6      	b.n	8009b6a <__swsetup_r+0x1e>
 8009b9c:	0751      	lsls	r1, r2, #29
 8009b9e:	d512      	bpl.n	8009bc6 <__swsetup_r+0x7a>
 8009ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ba2:	b141      	cbz	r1, 8009bb6 <__swsetup_r+0x6a>
 8009ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba8:	4299      	cmp	r1, r3
 8009baa:	d002      	beq.n	8009bb2 <__swsetup_r+0x66>
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff fe5f 	bl	8009870 <_free_r>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	f043 0308 	orr.w	r3, r3, #8
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	b94b      	cbnz	r3, 8009be6 <__swsetup_r+0x9a>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bdc:	d003      	beq.n	8009be6 <__swsetup_r+0x9a>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 f9bf 	bl	8009f64 <__smakebuf_r>
 8009be6:	89a2      	ldrh	r2, [r4, #12]
 8009be8:	f012 0301 	ands.w	r3, r2, #1
 8009bec:	d00c      	beq.n	8009c08 <__swsetup_r+0xbc>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60a3      	str	r3, [r4, #8]
 8009bf2:	6963      	ldr	r3, [r4, #20]
 8009bf4:	425b      	negs	r3, r3
 8009bf6:	61a3      	str	r3, [r4, #24]
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	b953      	cbnz	r3, 8009c12 <__swsetup_r+0xc6>
 8009bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009c04:	d1ba      	bne.n	8009b7c <__swsetup_r+0x30>
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
 8009c08:	0792      	lsls	r2, r2, #30
 8009c0a:	bf58      	it	pl
 8009c0c:	6963      	ldrpl	r3, [r4, #20]
 8009c0e:	60a3      	str	r3, [r4, #8]
 8009c10:	e7f2      	b.n	8009bf8 <__swsetup_r+0xac>
 8009c12:	2000      	movs	r0, #0
 8009c14:	e7f7      	b.n	8009c06 <__swsetup_r+0xba>
 8009c16:	bf00      	nop
 8009c18:	2000002c 	.word	0x2000002c
 8009c1c:	0800a1a0 	.word	0x0800a1a0
 8009c20:	0800a1c0 	.word	0x0800a1c0
 8009c24:	0800a180 	.word	0x0800a180

08009c28 <__sflush_r>:
 8009c28:	898a      	ldrh	r2, [r1, #12]
 8009c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	4605      	mov	r5, r0
 8009c30:	0710      	lsls	r0, r2, #28
 8009c32:	460c      	mov	r4, r1
 8009c34:	d458      	bmi.n	8009ce8 <__sflush_r+0xc0>
 8009c36:	684b      	ldr	r3, [r1, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dc05      	bgt.n	8009c48 <__sflush_r+0x20>
 8009c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dc02      	bgt.n	8009c48 <__sflush_r+0x20>
 8009c42:	2000      	movs	r0, #0
 8009c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c4a:	2e00      	cmp	r6, #0
 8009c4c:	d0f9      	beq.n	8009c42 <__sflush_r+0x1a>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c54:	682f      	ldr	r7, [r5, #0]
 8009c56:	6a21      	ldr	r1, [r4, #32]
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	d032      	beq.n	8009cc2 <__sflush_r+0x9a>
 8009c5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	075a      	lsls	r2, r3, #29
 8009c62:	d505      	bpl.n	8009c70 <__sflush_r+0x48>
 8009c64:	6863      	ldr	r3, [r4, #4]
 8009c66:	1ac0      	subs	r0, r0, r3
 8009c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c6a:	b10b      	cbz	r3, 8009c70 <__sflush_r+0x48>
 8009c6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c6e:	1ac0      	subs	r0, r0, r3
 8009c70:	2300      	movs	r3, #0
 8009c72:	4602      	mov	r2, r0
 8009c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c76:	6a21      	ldr	r1, [r4, #32]
 8009c78:	4628      	mov	r0, r5
 8009c7a:	47b0      	blx	r6
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	d106      	bne.n	8009c90 <__sflush_r+0x68>
 8009c82:	6829      	ldr	r1, [r5, #0]
 8009c84:	291d      	cmp	r1, #29
 8009c86:	d848      	bhi.n	8009d1a <__sflush_r+0xf2>
 8009c88:	4a29      	ldr	r2, [pc, #164]	; (8009d30 <__sflush_r+0x108>)
 8009c8a:	40ca      	lsrs	r2, r1
 8009c8c:	07d6      	lsls	r6, r2, #31
 8009c8e:	d544      	bpl.n	8009d1a <__sflush_r+0xf2>
 8009c90:	2200      	movs	r2, #0
 8009c92:	6062      	str	r2, [r4, #4]
 8009c94:	04d9      	lsls	r1, r3, #19
 8009c96:	6922      	ldr	r2, [r4, #16]
 8009c98:	6022      	str	r2, [r4, #0]
 8009c9a:	d504      	bpl.n	8009ca6 <__sflush_r+0x7e>
 8009c9c:	1c42      	adds	r2, r0, #1
 8009c9e:	d101      	bne.n	8009ca4 <__sflush_r+0x7c>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b903      	cbnz	r3, 8009ca6 <__sflush_r+0x7e>
 8009ca4:	6560      	str	r0, [r4, #84]	; 0x54
 8009ca6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ca8:	602f      	str	r7, [r5, #0]
 8009caa:	2900      	cmp	r1, #0
 8009cac:	d0c9      	beq.n	8009c42 <__sflush_r+0x1a>
 8009cae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb2:	4299      	cmp	r1, r3
 8009cb4:	d002      	beq.n	8009cbc <__sflush_r+0x94>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7ff fdda 	bl	8009870 <_free_r>
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	6360      	str	r0, [r4, #52]	; 0x34
 8009cc0:	e7c0      	b.n	8009c44 <__sflush_r+0x1c>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b0      	blx	r6
 8009cc8:	1c41      	adds	r1, r0, #1
 8009cca:	d1c8      	bne.n	8009c5e <__sflush_r+0x36>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0c5      	beq.n	8009c5e <__sflush_r+0x36>
 8009cd2:	2b1d      	cmp	r3, #29
 8009cd4:	d001      	beq.n	8009cda <__sflush_r+0xb2>
 8009cd6:	2b16      	cmp	r3, #22
 8009cd8:	d101      	bne.n	8009cde <__sflush_r+0xb6>
 8009cda:	602f      	str	r7, [r5, #0]
 8009cdc:	e7b1      	b.n	8009c42 <__sflush_r+0x1a>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	e7ad      	b.n	8009c44 <__sflush_r+0x1c>
 8009ce8:	690f      	ldr	r7, [r1, #16]
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	d0a9      	beq.n	8009c42 <__sflush_r+0x1a>
 8009cee:	0793      	lsls	r3, r2, #30
 8009cf0:	680e      	ldr	r6, [r1, #0]
 8009cf2:	bf08      	it	eq
 8009cf4:	694b      	ldreq	r3, [r1, #20]
 8009cf6:	600f      	str	r7, [r1, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	2300      	movne	r3, #0
 8009cfc:	eba6 0807 	sub.w	r8, r6, r7
 8009d00:	608b      	str	r3, [r1, #8]
 8009d02:	f1b8 0f00 	cmp.w	r8, #0
 8009d06:	dd9c      	ble.n	8009c42 <__sflush_r+0x1a>
 8009d08:	4643      	mov	r3, r8
 8009d0a:	463a      	mov	r2, r7
 8009d0c:	6a21      	ldr	r1, [r4, #32]
 8009d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b0      	blx	r6
 8009d14:	2800      	cmp	r0, #0
 8009d16:	dc06      	bgt.n	8009d26 <__sflush_r+0xfe>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	e78e      	b.n	8009c44 <__sflush_r+0x1c>
 8009d26:	4407      	add	r7, r0
 8009d28:	eba8 0800 	sub.w	r8, r8, r0
 8009d2c:	e7e9      	b.n	8009d02 <__sflush_r+0xda>
 8009d2e:	bf00      	nop
 8009d30:	20400001 	.word	0x20400001

08009d34 <_fflush_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	690b      	ldr	r3, [r1, #16]
 8009d38:	4605      	mov	r5, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	b1db      	cbz	r3, 8009d76 <_fflush_r+0x42>
 8009d3e:	b118      	cbz	r0, 8009d48 <_fflush_r+0x14>
 8009d40:	6983      	ldr	r3, [r0, #24]
 8009d42:	b90b      	cbnz	r3, 8009d48 <_fflush_r+0x14>
 8009d44:	f000 f860 	bl	8009e08 <__sinit>
 8009d48:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <_fflush_r+0x48>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d109      	bne.n	8009d62 <_fflush_r+0x2e>
 8009d4e:	686c      	ldr	r4, [r5, #4]
 8009d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d54:	b17b      	cbz	r3, 8009d76 <_fflush_r+0x42>
 8009d56:	4621      	mov	r1, r4
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d5e:	f7ff bf63 	b.w	8009c28 <__sflush_r>
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <_fflush_r+0x4c>)
 8009d64:	429c      	cmp	r4, r3
 8009d66:	d101      	bne.n	8009d6c <_fflush_r+0x38>
 8009d68:	68ac      	ldr	r4, [r5, #8]
 8009d6a:	e7f1      	b.n	8009d50 <_fflush_r+0x1c>
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <_fflush_r+0x50>)
 8009d6e:	429c      	cmp	r4, r3
 8009d70:	bf08      	it	eq
 8009d72:	68ec      	ldreq	r4, [r5, #12]
 8009d74:	e7ec      	b.n	8009d50 <_fflush_r+0x1c>
 8009d76:	2000      	movs	r0, #0
 8009d78:	bd38      	pop	{r3, r4, r5, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800a1a0 	.word	0x0800a1a0
 8009d80:	0800a1c0 	.word	0x0800a1c0
 8009d84:	0800a180 	.word	0x0800a180

08009d88 <std>:
 8009d88:	2300      	movs	r3, #0
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d92:	6083      	str	r3, [r0, #8]
 8009d94:	8181      	strh	r1, [r0, #12]
 8009d96:	6643      	str	r3, [r0, #100]	; 0x64
 8009d98:	81c2      	strh	r2, [r0, #14]
 8009d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d9e:	6183      	str	r3, [r0, #24]
 8009da0:	4619      	mov	r1, r3
 8009da2:	2208      	movs	r2, #8
 8009da4:	305c      	adds	r0, #92	; 0x5c
 8009da6:	f7ff fd5b 	bl	8009860 <memset>
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <std+0x38>)
 8009dac:	6263      	str	r3, [r4, #36]	; 0x24
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <std+0x3c>)
 8009db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <std+0x40>)
 8009db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <std+0x44>)
 8009db8:	6224      	str	r4, [r4, #32]
 8009dba:	6323      	str	r3, [r4, #48]	; 0x30
 8009dbc:	bd10      	pop	{r4, pc}
 8009dbe:	bf00      	nop
 8009dc0:	08009fe9 	.word	0x08009fe9
 8009dc4:	0800a00b 	.word	0x0800a00b
 8009dc8:	0800a043 	.word	0x0800a043
 8009dcc:	0800a067 	.word	0x0800a067

08009dd0 <_cleanup_r>:
 8009dd0:	4901      	ldr	r1, [pc, #4]	; (8009dd8 <_cleanup_r+0x8>)
 8009dd2:	f000 b885 	b.w	8009ee0 <_fwalk_reent>
 8009dd6:	bf00      	nop
 8009dd8:	08009d35 	.word	0x08009d35

08009ddc <__sfmoreglue>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	1e4a      	subs	r2, r1, #1
 8009de0:	2568      	movs	r5, #104	; 0x68
 8009de2:	4355      	muls	r5, r2
 8009de4:	460e      	mov	r6, r1
 8009de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dea:	f7ff fd8f 	bl	800990c <_malloc_r>
 8009dee:	4604      	mov	r4, r0
 8009df0:	b140      	cbz	r0, 8009e04 <__sfmoreglue+0x28>
 8009df2:	2100      	movs	r1, #0
 8009df4:	e9c0 1600 	strd	r1, r6, [r0]
 8009df8:	300c      	adds	r0, #12
 8009dfa:	60a0      	str	r0, [r4, #8]
 8009dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e00:	f7ff fd2e 	bl	8009860 <memset>
 8009e04:	4620      	mov	r0, r4
 8009e06:	bd70      	pop	{r4, r5, r6, pc}

08009e08 <__sinit>:
 8009e08:	6983      	ldr	r3, [r0, #24]
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	bb33      	cbnz	r3, 8009e5e <__sinit+0x56>
 8009e10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009e14:	6503      	str	r3, [r0, #80]	; 0x50
 8009e16:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <__sinit+0x58>)
 8009e18:	4a12      	ldr	r2, [pc, #72]	; (8009e64 <__sinit+0x5c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6282      	str	r2, [r0, #40]	; 0x28
 8009e1e:	4298      	cmp	r0, r3
 8009e20:	bf04      	itt	eq
 8009e22:	2301      	moveq	r3, #1
 8009e24:	6183      	streq	r3, [r0, #24]
 8009e26:	f000 f81f 	bl	8009e68 <__sfp>
 8009e2a:	6060      	str	r0, [r4, #4]
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 f81b 	bl	8009e68 <__sfp>
 8009e32:	60a0      	str	r0, [r4, #8]
 8009e34:	4620      	mov	r0, r4
 8009e36:	f000 f817 	bl	8009e68 <__sfp>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	60e0      	str	r0, [r4, #12]
 8009e3e:	2104      	movs	r1, #4
 8009e40:	6860      	ldr	r0, [r4, #4]
 8009e42:	f7ff ffa1 	bl	8009d88 <std>
 8009e46:	2201      	movs	r2, #1
 8009e48:	2109      	movs	r1, #9
 8009e4a:	68a0      	ldr	r0, [r4, #8]
 8009e4c:	f7ff ff9c 	bl	8009d88 <std>
 8009e50:	2202      	movs	r2, #2
 8009e52:	2112      	movs	r1, #18
 8009e54:	68e0      	ldr	r0, [r4, #12]
 8009e56:	f7ff ff97 	bl	8009d88 <std>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	61a3      	str	r3, [r4, #24]
 8009e5e:	bd10      	pop	{r4, pc}
 8009e60:	0800a17c 	.word	0x0800a17c
 8009e64:	08009dd1 	.word	0x08009dd1

08009e68 <__sfp>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	4b1b      	ldr	r3, [pc, #108]	; (8009ed8 <__sfp+0x70>)
 8009e6c:	681e      	ldr	r6, [r3, #0]
 8009e6e:	69b3      	ldr	r3, [r6, #24]
 8009e70:	4607      	mov	r7, r0
 8009e72:	b913      	cbnz	r3, 8009e7a <__sfp+0x12>
 8009e74:	4630      	mov	r0, r6
 8009e76:	f7ff ffc7 	bl	8009e08 <__sinit>
 8009e7a:	3648      	adds	r6, #72	; 0x48
 8009e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	d503      	bpl.n	8009e8c <__sfp+0x24>
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	b133      	cbz	r3, 8009e96 <__sfp+0x2e>
 8009e88:	6836      	ldr	r6, [r6, #0]
 8009e8a:	e7f7      	b.n	8009e7c <__sfp+0x14>
 8009e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e90:	b16d      	cbz	r5, 8009eae <__sfp+0x46>
 8009e92:	3468      	adds	r4, #104	; 0x68
 8009e94:	e7f4      	b.n	8009e80 <__sfp+0x18>
 8009e96:	2104      	movs	r1, #4
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f7ff ff9f 	bl	8009ddc <__sfmoreglue>
 8009e9e:	6030      	str	r0, [r6, #0]
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1f1      	bne.n	8009e88 <__sfp+0x20>
 8009ea4:	230c      	movs	r3, #12
 8009ea6:	603b      	str	r3, [r7, #0]
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	4620      	mov	r0, r4
 8009eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eae:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <__sfp+0x74>)
 8009eb0:	6665      	str	r5, [r4, #100]	; 0x64
 8009eb2:	e9c4 5500 	strd	r5, r5, [r4]
 8009eb6:	60a5      	str	r5, [r4, #8]
 8009eb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009ebc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ec8:	f7ff fcca 	bl	8009860 <memset>
 8009ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ed4:	e7e9      	b.n	8009eaa <__sfp+0x42>
 8009ed6:	bf00      	nop
 8009ed8:	0800a17c 	.word	0x0800a17c
 8009edc:	ffff0001 	.word	0xffff0001

08009ee0 <_fwalk_reent>:
 8009ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	4689      	mov	r9, r1
 8009ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009eec:	2600      	movs	r6, #0
 8009eee:	b914      	cbnz	r4, 8009ef6 <_fwalk_reent+0x16>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009efa:	3f01      	subs	r7, #1
 8009efc:	d501      	bpl.n	8009f02 <_fwalk_reent+0x22>
 8009efe:	6824      	ldr	r4, [r4, #0]
 8009f00:	e7f5      	b.n	8009eee <_fwalk_reent+0xe>
 8009f02:	89ab      	ldrh	r3, [r5, #12]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d907      	bls.n	8009f18 <_fwalk_reent+0x38>
 8009f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	d003      	beq.n	8009f18 <_fwalk_reent+0x38>
 8009f10:	4629      	mov	r1, r5
 8009f12:	4640      	mov	r0, r8
 8009f14:	47c8      	blx	r9
 8009f16:	4306      	orrs	r6, r0
 8009f18:	3568      	adds	r5, #104	; 0x68
 8009f1a:	e7ee      	b.n	8009efa <_fwalk_reent+0x1a>

08009f1c <__swhatbuf_r>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	460e      	mov	r6, r1
 8009f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f24:	2900      	cmp	r1, #0
 8009f26:	b096      	sub	sp, #88	; 0x58
 8009f28:	4614      	mov	r4, r2
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	da07      	bge.n	8009f3e <__swhatbuf_r+0x22>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	602b      	str	r3, [r5, #0]
 8009f32:	89b3      	ldrh	r3, [r6, #12]
 8009f34:	061a      	lsls	r2, r3, #24
 8009f36:	d410      	bmi.n	8009f5a <__swhatbuf_r+0x3e>
 8009f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f3c:	e00e      	b.n	8009f5c <__swhatbuf_r+0x40>
 8009f3e:	466a      	mov	r2, sp
 8009f40:	f000 f8b8 	bl	800a0b4 <_fstat_r>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	dbf2      	blt.n	8009f2e <__swhatbuf_r+0x12>
 8009f48:	9a01      	ldr	r2, [sp, #4]
 8009f4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f52:	425a      	negs	r2, r3
 8009f54:	415a      	adcs	r2, r3
 8009f56:	602a      	str	r2, [r5, #0]
 8009f58:	e7ee      	b.n	8009f38 <__swhatbuf_r+0x1c>
 8009f5a:	2340      	movs	r3, #64	; 0x40
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	6023      	str	r3, [r4, #0]
 8009f60:	b016      	add	sp, #88	; 0x58
 8009f62:	bd70      	pop	{r4, r5, r6, pc}

08009f64 <__smakebuf_r>:
 8009f64:	898b      	ldrh	r3, [r1, #12]
 8009f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f68:	079d      	lsls	r5, r3, #30
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	d507      	bpl.n	8009f80 <__smakebuf_r+0x1c>
 8009f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	6123      	str	r3, [r4, #16]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	6163      	str	r3, [r4, #20]
 8009f7c:	b002      	add	sp, #8
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	ab01      	add	r3, sp, #4
 8009f82:	466a      	mov	r2, sp
 8009f84:	f7ff ffca 	bl	8009f1c <__swhatbuf_r>
 8009f88:	9900      	ldr	r1, [sp, #0]
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7ff fcbd 	bl	800990c <_malloc_r>
 8009f92:	b948      	cbnz	r0, 8009fa8 <__smakebuf_r+0x44>
 8009f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f98:	059a      	lsls	r2, r3, #22
 8009f9a:	d4ef      	bmi.n	8009f7c <__smakebuf_r+0x18>
 8009f9c:	f023 0303 	bic.w	r3, r3, #3
 8009fa0:	f043 0302 	orr.w	r3, r3, #2
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	e7e3      	b.n	8009f70 <__smakebuf_r+0xc>
 8009fa8:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <__smakebuf_r+0x7c>)
 8009faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	6020      	str	r0, [r4, #0]
 8009fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	9b00      	ldr	r3, [sp, #0]
 8009fb8:	6163      	str	r3, [r4, #20]
 8009fba:	9b01      	ldr	r3, [sp, #4]
 8009fbc:	6120      	str	r0, [r4, #16]
 8009fbe:	b15b      	cbz	r3, 8009fd8 <__smakebuf_r+0x74>
 8009fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f000 f887 	bl	800a0d8 <_isatty_r>
 8009fca:	b128      	cbz	r0, 8009fd8 <__smakebuf_r+0x74>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f023 0303 	bic.w	r3, r3, #3
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	431d      	orrs	r5, r3
 8009fdc:	81a5      	strh	r5, [r4, #12]
 8009fde:	e7cd      	b.n	8009f7c <__smakebuf_r+0x18>
 8009fe0:	08009dd1 	.word	0x08009dd1

08009fe4 <__malloc_lock>:
 8009fe4:	4770      	bx	lr

08009fe6 <__malloc_unlock>:
 8009fe6:	4770      	bx	lr

08009fe8 <__sread>:
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	460c      	mov	r4, r1
 8009fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff0:	f000 f894 	bl	800a11c <_read_r>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	bfab      	itete	ge
 8009ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8009ffc:	181b      	addge	r3, r3, r0
 8009ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a002:	bfac      	ite	ge
 800a004:	6563      	strge	r3, [r4, #84]	; 0x54
 800a006:	81a3      	strhlt	r3, [r4, #12]
 800a008:	bd10      	pop	{r4, pc}

0800a00a <__swrite>:
 800a00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00e:	461f      	mov	r7, r3
 800a010:	898b      	ldrh	r3, [r1, #12]
 800a012:	05db      	lsls	r3, r3, #23
 800a014:	4605      	mov	r5, r0
 800a016:	460c      	mov	r4, r1
 800a018:	4616      	mov	r6, r2
 800a01a:	d505      	bpl.n	800a028 <__swrite+0x1e>
 800a01c:	2302      	movs	r3, #2
 800a01e:	2200      	movs	r2, #0
 800a020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a024:	f000 f868 	bl	800a0f8 <_lseek_r>
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a032:	81a3      	strh	r3, [r4, #12]
 800a034:	4632      	mov	r2, r6
 800a036:	463b      	mov	r3, r7
 800a038:	4628      	mov	r0, r5
 800a03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a03e:	f000 b817 	b.w	800a070 <_write_r>

0800a042 <__sseek>:
 800a042:	b510      	push	{r4, lr}
 800a044:	460c      	mov	r4, r1
 800a046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04a:	f000 f855 	bl	800a0f8 <_lseek_r>
 800a04e:	1c43      	adds	r3, r0, #1
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	bf15      	itete	ne
 800a054:	6560      	strne	r0, [r4, #84]	; 0x54
 800a056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a05e:	81a3      	strheq	r3, [r4, #12]
 800a060:	bf18      	it	ne
 800a062:	81a3      	strhne	r3, [r4, #12]
 800a064:	bd10      	pop	{r4, pc}

0800a066 <__sclose>:
 800a066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06a:	f000 b813 	b.w	800a094 <_close_r>
	...

0800a070 <_write_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4c07      	ldr	r4, [pc, #28]	; (800a090 <_write_r+0x20>)
 800a074:	4605      	mov	r5, r0
 800a076:	4608      	mov	r0, r1
 800a078:	4611      	mov	r1, r2
 800a07a:	2200      	movs	r2, #0
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	f7f6 fc2e 	bl	80008e0 <_write>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_write_r+0x1e>
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_write_r+0x1e>
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	20000914 	.word	0x20000914

0800a094 <_close_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4c06      	ldr	r4, [pc, #24]	; (800a0b0 <_close_r+0x1c>)
 800a098:	2300      	movs	r3, #0
 800a09a:	4605      	mov	r5, r0
 800a09c:	4608      	mov	r0, r1
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	f7f6 fe11 	bl	8000cc6 <_close>
 800a0a4:	1c43      	adds	r3, r0, #1
 800a0a6:	d102      	bne.n	800a0ae <_close_r+0x1a>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	b103      	cbz	r3, 800a0ae <_close_r+0x1a>
 800a0ac:	602b      	str	r3, [r5, #0]
 800a0ae:	bd38      	pop	{r3, r4, r5, pc}
 800a0b0:	20000914 	.word	0x20000914

0800a0b4 <_fstat_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4c07      	ldr	r4, [pc, #28]	; (800a0d4 <_fstat_r+0x20>)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	4611      	mov	r1, r2
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	f7f6 fe0c 	bl	8000cde <_fstat>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	d102      	bne.n	800a0d0 <_fstat_r+0x1c>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	b103      	cbz	r3, 800a0d0 <_fstat_r+0x1c>
 800a0ce:	602b      	str	r3, [r5, #0]
 800a0d0:	bd38      	pop	{r3, r4, r5, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20000914 	.word	0x20000914

0800a0d8 <_isatty_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4c06      	ldr	r4, [pc, #24]	; (800a0f4 <_isatty_r+0x1c>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4605      	mov	r5, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	6023      	str	r3, [r4, #0]
 800a0e4:	f7f6 fe0b 	bl	8000cfe <_isatty>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_isatty_r+0x1a>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_isatty_r+0x1a>
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	20000914 	.word	0x20000914

0800a0f8 <_lseek_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4c07      	ldr	r4, [pc, #28]	; (800a118 <_lseek_r+0x20>)
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	4608      	mov	r0, r1
 800a100:	4611      	mov	r1, r2
 800a102:	2200      	movs	r2, #0
 800a104:	6022      	str	r2, [r4, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	f7f6 fe04 	bl	8000d14 <_lseek>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_lseek_r+0x1e>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	b103      	cbz	r3, 800a116 <_lseek_r+0x1e>
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	20000914 	.word	0x20000914

0800a11c <_read_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4c07      	ldr	r4, [pc, #28]	; (800a13c <_read_r+0x20>)
 800a120:	4605      	mov	r5, r0
 800a122:	4608      	mov	r0, r1
 800a124:	4611      	mov	r1, r2
 800a126:	2200      	movs	r2, #0
 800a128:	6022      	str	r2, [r4, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	f7f6 fdae 	bl	8000c8c <_read>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_read_r+0x1e>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	b103      	cbz	r3, 800a13a <_read_r+0x1e>
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	20000914 	.word	0x20000914

0800a140 <_init>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr

0800a14c <_fini>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	bf00      	nop
 800a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a152:	bc08      	pop	{r3}
 800a154:	469e      	mov	lr, r3
 800a156:	4770      	bx	lr
