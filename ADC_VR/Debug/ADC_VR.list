
ADC_VR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800a5c0  0800a5c0  0001a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a68c  0800a68c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a68c  0800a68c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a694  0800a694  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a698  0800a698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000090  0800a72c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800a72c  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fd4  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004da6  00000000  00000000  00044094  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b08  00000000  00000000  00048e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018d0  00000000  00000000  0004a948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027fb2  00000000  00000000  0004c218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a8c0  00000000  00000000  000741ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da048  00000000  00000000  0008ea8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168ad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077a8  00000000  00000000  00168b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5a8 	.word	0x0800a5a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a5a8 	.word	0x0800a5a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 fe6d 	bl	80012b0 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fb4a 	bl	8000c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005e0:	2310      	movs	r3, #16
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80005e8:	2304      	movs	r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 fff9 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fb3a 	bl	8000c74 <Error_Handler>
  }

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000c4 	.word	0x200000c4
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <HAL_ADC_MspInit+0x3c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d10d      	bne.n	8000642 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_ADC_MspInit+0x40>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <HAL_ADC_MspInit+0x40>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000634:	6453      	str	r3, [r2, #68]	; 0x44
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <HAL_ADC_MspInit+0x40>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40012000 	.word	0x40012000
 8000654:	40023800 	.word	0x40023800

08000658 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4b71      	ldr	r3, [pc, #452]	; (8000838 <MX_GPIO_Init+0x1e0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a70      	ldr	r2, [pc, #448]	; (8000838 <MX_GPIO_Init+0x1e0>)
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b6e      	ldr	r3, [pc, #440]	; (8000838 <MX_GPIO_Init+0x1e0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0310 	and.w	r3, r3, #16
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	4b6a      	ldr	r3, [pc, #424]	; (8000838 <MX_GPIO_Init+0x1e0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a69      	ldr	r2, [pc, #420]	; (8000838 <MX_GPIO_Init+0x1e0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b67      	ldr	r3, [pc, #412]	; (8000838 <MX_GPIO_Init+0x1e0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a62      	ldr	r2, [pc, #392]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a5b      	ldr	r2, [pc, #364]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b55      	ldr	r3, [pc, #340]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a54      	ldr	r2, [pc, #336]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b52      	ldr	r3, [pc, #328]	; (8000838 <MX_GPIO_Init+0x1e0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <MX_GPIO_Init+0x1e0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a4d      	ldr	r2, [pc, #308]	; (8000838 <MX_GPIO_Init+0x1e0>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <MX_GPIO_Init+0x1e0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2108      	movs	r1, #8
 800071a:	4848      	ldr	r0, [pc, #288]	; (800083c <MX_GPIO_Init+0x1e4>)
 800071c:	f001 fc50 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2101      	movs	r1, #1
 8000724:	4846      	ldr	r0, [pc, #280]	; (8000840 <MX_GPIO_Init+0x1e8>)
 8000726:	f001 fc4b 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800072a:	2200      	movs	r2, #0
 800072c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000730:	4844      	ldr	r0, [pc, #272]	; (8000844 <MX_GPIO_Init+0x1ec>)
 8000732:	f001 fc45 	bl	8001fc0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000736:	2308      	movs	r3, #8
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	483b      	ldr	r0, [pc, #236]	; (800083c <MX_GPIO_Init+0x1e4>)
 800074e:	f001 fa9d 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000752:	2301      	movs	r3, #1
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4835      	ldr	r0, [pc, #212]	; (8000840 <MX_GPIO_Init+0x1e8>)
 800076a:	f001 fa8f 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800076e:	2308      	movs	r3, #8
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800077e:	2305      	movs	r3, #5
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	482d      	ldr	r0, [pc, #180]	; (8000840 <MX_GPIO_Init+0x1e8>)
 800078a:	f001 fa7f 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800078e:	2301      	movs	r3, #1
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0x1f0>)
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	482a      	ldr	r0, [pc, #168]	; (800084c <MX_GPIO_Init+0x1f4>)
 80007a2:	f001 fa73 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007a6:	2304      	movs	r3, #4
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4825      	ldr	r0, [pc, #148]	; (8000850 <MX_GPIO_Init+0x1f8>)
 80007ba:	f001 fa67 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d0:	2305      	movs	r3, #5
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	481d      	ldr	r0, [pc, #116]	; (8000850 <MX_GPIO_Init+0x1f8>)
 80007dc:	f001 fa56 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80007e0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007e4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0x1ec>)
 80007fa:	f001 fa47 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007fe:	2320      	movs	r3, #32
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_GPIO_Init+0x1ec>)
 8000812:	f001 fa3b 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000816:	2302      	movs	r3, #2
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_GPIO_Init+0x1fc>)
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0x1e4>)
 800082a:	f001 fa2f 	bl	8001c8c <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020800 	.word	0x40020800
 8000844:	40020c00 	.word	0x40020c00
 8000848:	10110000 	.word	0x10110000
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400
 8000854:	10120000 	.word	0x10120000

08000858 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f003 f8c1 	bl	8003a1c <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f9e8 	bl	8000c74 <Error_Handler>
  }

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000010c 	.word	0x2000010c
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_I2C_MspInit+0x84>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12c      	bne.n	8000930 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_I2C_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_I2C_MspInit+0x88>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_I2C_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f8:	2312      	movs	r3, #18
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <HAL_I2C_MspInit+0x8c>)
 8000910:	f001 f9bc 	bl	8001c8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_I2C_MspInit+0x88>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_I2C_MspInit+0x88>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_I2C_MspInit+0x88>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40005400 	.word	0x40005400
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400

08000944 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_I2S3_Init+0x54>)
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <MX_I2S3_Init+0x58>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2S3_Init+0x54>)
 8000950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000954:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_I2S3_Init+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_I2S3_Init+0x54>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_I2S3_Init+0x54>)
 8000964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000968:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_I2S3_Init+0x54>)
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <MX_I2S3_Init+0x5c>)
 800096e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_I2S3_Init+0x54>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_I2S3_Init+0x54>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_I2S3_Init+0x54>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_I2S3_Init+0x54>)
 8000984:	f003 f982 	bl	8003c8c <HAL_I2S_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800098e:	f000 f971 	bl	8000c74 <Error_Handler>
  }

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000160 	.word	0x20000160
 800099c:	40003c00 	.word	0x40003c00
 80009a0:	00017700 	.word	0x00017700

080009a4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <HAL_I2S_MspInit+0xc0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d14a      	bne.n	8000a5c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 80009d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_I2S_MspInit+0xc4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a1a:	2310      	movs	r3, #16
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <HAL_I2S_MspInit+0xc8>)
 8000a36:	f001 f929 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a3a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <HAL_I2S_MspInit+0xcc>)
 8000a58:	f001 f918 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40003c00 	.word	0x40003c00
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800

08000a74 <_write>:
static void MX_NVIC_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	230a      	movs	r3, #10
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <_write+0x24>)
 8000a8a:	f004 fe7c 	bl	8005786 <HAL_UART_Transmit>
	return len;
 8000a8e:	687b      	ldr	r3, [r7, #4]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000240 	.word	0x20000240

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fb71 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f833 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f7ff fdd5 	bl	8000658 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aae:	f7ff fed3 	bl	8000858 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ab2:	f7ff ff47 	bl	8000944 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ab6:	f000 f8e5 	bl	8000c84 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000aba:	f008 fb47 	bl	800914c <MX_USB_HOST_Init>
  MX_TIM7_Init();
 8000abe:	f000 fa6f 	bl	8000fa0 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 fac5 	bl	8001050 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ac6:	f7ff fd53 	bl	8000570 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000aca:	f000 f8a1 	bl	8000c10 <MX_NVIC_Init>
//  HAL_ADC_Start_DMA(&hadc1, &ADC1ConvertedValue, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(HAL_ADC_Start(&hadc1) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <main+0x6c>)
 8000ad0:	f000 fc32 	bl	8001338 <HAL_ADC_Start>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <main+0x42>
  {
	  Error_Handler();
 8000ada:	f000 f8cb 	bl	8000c74 <Error_Handler>
  }

  uint16_t adc1;
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000ade:	2164      	movs	r1, #100	; 0x64
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <main+0x6c>)
 8000ae2:	f000 fcef 	bl	80014c4 <HAL_ADC_PollForConversion>
	  adc1 = HAL_ADC_GetValue(&hadc1);
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <main+0x6c>)
 8000ae8:	f000 fd70 	bl	80015cc <HAL_ADC_GetValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	80fb      	strh	r3, [r7, #6]
	  printf("ADC1_temperature: %d \n", adc1);
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <main+0x70>)
 8000af6:	f008 ff1b 	bl	8009930 <iprintf>
//	  }
//
//	  printf("%d \n", ADC1ConvertedVoltage);
//	  HAL_Delay(1000);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000afa:	f008 fb4d 	bl	8009198 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 8000afe:	2064      	movs	r0, #100	; 0x64
 8000b00:	f000 fbb4 	bl	800126c <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000b04:	e7eb      	b.n	8000ade <main+0x42>
 8000b06:	bf00      	nop
 8000b08:	200000c4 	.word	0x200000c4
 8000b0c:	0800a5c0 	.word	0x0800a5c0

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b098      	sub	sp, #96	; 0x60
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b1a:	2230      	movs	r2, #48	; 0x30
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f008 fe56 	bl	80097d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <SystemClock_Config+0xf8>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <SystemClock_Config+0xf8>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <SystemClock_Config+0xf8>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <SystemClock_Config+0xfc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <SystemClock_Config+0xfc>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <SystemClock_Config+0xfc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b92:	23a8      	movs	r3, #168	; 0xa8
 8000b94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fd12 	bl	80045cc <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bae:	f000 f861 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	2105      	movs	r1, #5
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 ff6b 	bl	8004aac <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bdc:	f000 f84a 	bl	8000c74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000be0:	2301      	movs	r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be4:	23c0      	movs	r3, #192	; 0xc0
 8000be6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 f94d 	bl	8004e90 <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000bfc:	f000 f83a 	bl	8000c74 <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3760      	adds	r7, #96	; 0x60
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f000 ffde 	bl	8001bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c1e:	2006      	movs	r0, #6
 8000c20:	f000 fff7 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2037      	movs	r0, #55	; 0x37
 8000c2a:	f000 ffd6 	bl	8001bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c2e:	2037      	movs	r0, #55	; 0x37
 8000c30:	f000 ffef 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2026      	movs	r0, #38	; 0x26
 8000c3a:	f000 ffce 	bl	8001bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c3e:	2026      	movs	r0, #38	; 0x26
 8000c40:	f000 ffe7 	bl	8001c12 <HAL_NVIC_EnableIRQ>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d102      	bne.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		ADCflag = 1;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40001400 	.word	0x40001400
 8000c70:	200000ac 	.word	0x200000ac

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <MX_SPI1_Init+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd0:	220a      	movs	r2, #10
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd6:	f004 fa19 	bl	800510c <HAL_SPI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce0:	f7ff ffc8 	bl	8000c74 <Error_Handler>
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001a8 	.word	0x200001a8
 8000cec:	40013000 	.word	0x40013000

08000cf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12b      	bne.n	8000d6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d4a:	23e0      	movs	r3, #224	; 0xe0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_SPI_MspInit+0x8c>)
 8000d66:	f000 ff91 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dbe:	2007      	movs	r0, #7
 8000dc0:	f000 ff00 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 fa02 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f001 f8df 	bl	8001ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART2_IRQHandler+0x10>)
 8000e42:	f004 fd39 	bl	80058b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000240 	.word	0x20000240

08000e50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TIM7_IRQHandler+0x10>)
 8000e56:	f004 f9e8 	bl	800522a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000200 	.word	0x20000200

08000e64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <OTG_FS_IRQHandler+0x10>)
 8000e6a:	f001 fb75 	bl	8002558 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000065c 	.word	0x2000065c

08000e78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e8a:	f3af 8000 	nop.w
 8000e8e:	4601      	mov	r1, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_read+0x12>
	}

return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eda:	605a      	str	r2, [r3, #4]
	return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_isatty>:

int _isatty(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x50>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x16>
		heap_end = &end;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <_sbrk+0x50>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <_sbrk+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_sbrk+0x50>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <_sbrk+0x50>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	466a      	mov	r2, sp
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d907      	bls.n	8000f56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f46:	f008 fc09 	bl	800975c <__errno>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	e006      	b.n	8000f64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_sbrk+0x50>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <_sbrk+0x50>)
 8000f60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000b0 	.word	0x200000b0
 8000f70:	20000928 	.word	0x20000928

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x28>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x28>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SystemInit+0x28>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fb0:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_TIM7_Init+0x68>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000-1;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8400-1;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fc4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fc8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fd2:	f004 f8ff 	bl	80051d4 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fdc:	f7ff fe4a 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fee:	f004 faed 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f7ff fe3c 	bl	8000c74 <Error_Handler>
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000200 	.word	0x20000200
 8001008:	40001400 	.word	0x40001400

0800100c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_Base_MspInit+0x3c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10d      	bne.n	800103a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_TIM_Base_MspInit+0x40>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x40>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_TIM_Base_MspInit+0x40>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40001400 	.word	0x40001400
 800104c:	40023800 	.word	0x40023800

08001050 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART2_UART_Init+0x4c>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_USART2_UART_Init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_USART2_UART_Init+0x4c>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART2_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART2_UART_Init+0x4c>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART2_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART2_UART_Init+0x4c>)
 8001088:	f004 fb30 	bl	80056ec <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001092:	f7ff fdef 	bl	8000c74 <Error_Handler>
  }

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000240 	.word	0x20000240
 80010a0:	40004400 	.word	0x40004400

080010a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_UART_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12b      	bne.n	800111e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_UART_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_UART_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_UART_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_UART_MspInit+0x8c>)
 800111a:	f000 fdb7 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004400 	.word	0x40004400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001138:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800113a:	e003      	b.n	8001144 <LoopCopyDataInit>

0800113c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800113e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001140:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001142:	3104      	adds	r1, #4

08001144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001148:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800114a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800114c:	d3f6      	bcc.n	800113c <CopyDataInit>
  ldr  r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001150:	e002      	b.n	8001158 <LoopFillZerobss>

08001152 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001152:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001154:	f842 3b04 	str.w	r3, [r2], #4

08001158 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800115a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800115c:	d3f9      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800115e:	f7ff ff09 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f008 fb01 	bl	8009768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fc99 	bl	8000a9c <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001170:	0800a69c 	.word	0x0800a69c
  ldr  r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001178:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800117c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001180:	20000924 	.word	0x20000924

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 fd07 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f808 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fde0 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fd1f 	bl	8001c2e <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 fce7 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	20000008 	.word	0x20000008
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	20000280 	.word	0x20000280

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000280 	.word	0x20000280

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_Delay+0x40>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000008 	.word	0x20000008

080012b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e033      	b.n	800132e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f9a0 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d118      	bne.n	8001320 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f6:	f023 0302 	bic.w	r3, r3, #2
 80012fa:	f043 0202 	orr.w	r2, r3, #2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fa92 	bl	800182c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
 800131e:	e001      	b.n	8001324 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_ADC_Start+0x1a>
 800134e:	2302      	movs	r3, #2
 8001350:	e0a5      	b.n	800149e <HAL_ADC_Start+0x166>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b01      	cmp	r3, #1
 8001366:	d018      	beq.n	800139a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001378:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_ADC_Start+0x174>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_ADC_Start+0x178>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0c9a      	lsrs	r2, r3, #18
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800138c:	e002      	b.n	8001394 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3b01      	subs	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d179      	bne.n	800149c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e6:	d106      	bne.n	80013f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f023 0206 	bic.w	r2, r3, #6
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	645a      	str	r2, [r3, #68]	; 0x44
 80013f4:	e002      	b.n	80013fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_ADC_Start+0x17c>)
 8001406:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001410:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b00      	cmp	r3, #0
 800141c:	d12a      	bne.n	8001474 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <HAL_ADC_Start+0x180>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d015      	beq.n	8001454 <HAL_ADC_Start+0x11c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a23      	ldr	r2, [pc, #140]	; (80014bc <HAL_ADC_Start+0x184>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d105      	bne.n	800143e <HAL_ADC_Start+0x106>
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_ADC_Start+0x17c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <HAL_ADC_Start+0x188>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d129      	bne.n	800149c <HAL_ADC_Start+0x164>
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_ADC_Start+0x17c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d823      	bhi.n	800149c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d11c      	bne.n	800149c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	e013      	b.n	800149c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_ADC_Start+0x180>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10e      	bne.n	800149c <HAL_ADC_Start+0x164>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800149a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000000 	.word	0x20000000
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	40012300 	.word	0x40012300
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40012100 	.word	0x40012100
 80014c0:	40012200 	.word	0x40012200

080014c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e0:	d113      	bne.n	800150a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f0:	d10b      	bne.n	800150a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f043 0220 	orr.w	r2, r3, #32
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e05c      	b.n	80015c4 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800150a:	f7ff fea3 	bl	8001254 <HAL_GetTick>
 800150e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001510:	e01a      	b.n	8001548 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d016      	beq.n	8001548 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <HAL_ADC_PollForConversion+0x6c>
 8001520:	f7ff fe98 	bl	8001254 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d20b      	bcs.n	8001548 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f043 0204 	orr.w	r2, r3, #4
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e03d      	b.n	80015c4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d1dd      	bne.n	8001512 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f06f 0212 	mvn.w	r2, #18
 800155e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d123      	bne.n	80015c2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11f      	bne.n	80015c2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800159a:	2b00      	cmp	r3, #0
 800159c:	d111      	bne.n	80015c2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1c>
 8001600:	2302      	movs	r3, #2
 8001602:	e105      	b.n	8001810 <HAL_ADC_ConfigChannel+0x228>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b09      	cmp	r3, #9
 8001612:	d925      	bls.n	8001660 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68d9      	ldr	r1, [r3, #12]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	3b1e      	subs	r3, #30
 800162a:	2207      	movs	r2, #7
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43da      	mvns	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	400a      	ands	r2, r1
 8001638:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68d9      	ldr	r1, [r3, #12]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	4603      	mov	r3, r0
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4403      	add	r3, r0
 8001652:	3b1e      	subs	r3, #30
 8001654:	409a      	lsls	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	e022      	b.n	80016a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6919      	ldr	r1, [r3, #16]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	2207      	movs	r2, #7
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	400a      	ands	r2, r1
 8001682:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6919      	ldr	r1, [r3, #16]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	4603      	mov	r3, r0
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4403      	add	r3, r0
 800169c:	409a      	lsls	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d824      	bhi.n	80016f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b05      	subs	r3, #5
 80016c0:	221f      	movs	r2, #31
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b05      	subs	r3, #5
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
 80016f6:	e04c      	b.n	8001792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d824      	bhi.n	800174a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b23      	subs	r3, #35	; 0x23
 8001712:	221f      	movs	r2, #31
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43da      	mvns	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	400a      	ands	r2, r1
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b23      	subs	r3, #35	; 0x23
 800173c:	fa00 f203 	lsl.w	r2, r0, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
 8001748:	e023      	b.n	8001792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b41      	subs	r3, #65	; 0x41
 800175c:	221f      	movs	r2, #31
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	400a      	ands	r2, r1
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b41      	subs	r3, #65	; 0x41
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_ADC_ConfigChannel+0x234>)
 8001794:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <HAL_ADC_ConfigChannel+0x238>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1cc>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b12      	cmp	r3, #18
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_ADC_ConfigChannel+0x238>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d123      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x21e>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d003      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x1e6>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b11      	cmp	r3, #17
 80017cc:	d11b      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d111      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_ADC_ConfigChannel+0x23c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_ADC_ConfigChannel+0x240>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40012300 	.word	0x40012300
 8001820:	40012000 	.word	0x40012000
 8001824:	20000000 	.word	0x20000000
 8001828:	431bde83 	.word	0x431bde83

0800182c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001834:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <ADC_Init+0x1f0>)
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	021a      	lsls	r2, r3, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <ADC_Init+0x1f4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d022      	beq.n	800190a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e00f      	b.n	800192a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001928:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0202 	bic.w	r2, r2, #2
 8001938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
 8001944:	005a      	lsls	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01b      	beq.n	8001990 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001966:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001976:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	035a      	lsls	r2, r3, #13
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	051a      	lsls	r2, r3, #20
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e2:	025a      	lsls	r2, r3, #9
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6899      	ldr	r1, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	029a      	lsls	r2, r3, #10
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	0f000001 	.word	0x0f000001

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <__NVIC_EnableIRQ+0x38>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff29 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff3e 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff8e 	bl	8001b18 <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5d 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff31 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e00c      	b.n	8001c7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2205      	movs	r2, #5
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e16b      	b.n	8001f80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 815a 	bne.w	8001f7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cda:	2b11      	cmp	r3, #17
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d130      	bne.n	8001d48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0xfc>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80b4 	beq.w	8001f7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <HAL_GPIO_Init+0x308>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <HAL_GPIO_Init+0x308>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <HAL_GPIO_Init+0x308>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a5a      	ldr	r2, [pc, #360]	; (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_GPIO_Init+0x310>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02b      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_GPIO_Init+0x314>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d025      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x318>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x31c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4d      	ldr	r2, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x320>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x324>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4b      	ldr	r2, [pc, #300]	; (8001fb4 <HAL_GPIO_Init+0x328>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_GPIO_Init+0x32c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x20a>
 8001e92:	2307      	movs	r3, #7
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4934      	ldr	r1, [pc, #208]	; (8001f98 <HAL_GPIO_Init+0x30c>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef6:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae90 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	; 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40021c00 	.word	0x40021c00
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f806 	bl	8002024 <HAL_GPIO_EXTI_Callback>
  }
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800203a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203c:	b08f      	sub	sp, #60	; 0x3c
 800203e:	af0a      	add	r7, sp, #40	; 0x28
 8002040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e054      	b.n	80020f6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f007 f8ce 	bl	8009208 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fa8c 	bl	80065a8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	687e      	ldr	r6, [r7, #4]
 8002098:	466d      	mov	r5, sp
 800209a:	f106 0410 	add.w	r4, r6, #16
 800209e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ae:	1d33      	adds	r3, r6, #4
 80020b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f004 fa06 	bl	80064c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 fa83 	bl	80065ca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	687e      	ldr	r6, [r7, #4]
 80020cc:	466d      	mov	r5, sp
 80020ce:	f106 0410 	add.w	r4, r6, #16
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020de:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e2:	1d33      	adds	r3, r6, #4
 80020e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f004 fb96 	bl	8006818 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020fe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b089      	sub	sp, #36	; 0x24
 8002102:	af04      	add	r7, sp, #16
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	4608      	mov	r0, r1
 8002108:	4611      	mov	r1, r2
 800210a:	461a      	mov	r2, r3
 800210c:	4603      	mov	r3, r0
 800210e:	70fb      	strb	r3, [r7, #3]
 8002110:	460b      	mov	r3, r1
 8002112:	70bb      	strb	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_HCD_HC_Init+0x28>
 8002122:	2302      	movs	r3, #2
 8002124:	e07f      	b.n	8002226 <HAL_HCD_HC_Init+0x128>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	333d      	adds	r3, #61	; 0x3d
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	787a      	ldrb	r2, [r7, #1]
 8002154:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	3340      	adds	r3, #64	; 0x40
 8002166:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002168:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3339      	adds	r3, #57	; 0x39
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	333f      	adds	r3, #63	; 0x3f
 800218e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002192:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	78bb      	ldrb	r3, [r7, #2]
 8002198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800219c:	b2d8      	uxtb	r0, r3
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	333a      	adds	r3, #58	; 0x3a
 80021ac:	4602      	mov	r2, r0
 80021ae:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da0a      	bge.n	80021ce <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	333b      	adds	r3, #59	; 0x3b
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e009      	b.n	80021e2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	333b      	adds	r3, #59	; 0x3b
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	333c      	adds	r3, #60	; 0x3c
 80021f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021f6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	787c      	ldrb	r4, [r7, #1]
 80021fe:	78ba      	ldrb	r2, [r7, #2]
 8002200:	78f9      	ldrb	r1, [r7, #3]
 8002202:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	4623      	mov	r3, r4
 8002214:	f004 fc82 	bl	8006b1c <USB_HC_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}

0800222e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_HCD_HC_Halt+0x1e>
 8002248:	2302      	movs	r3, #2
 800224a:	e00f      	b.n	800226c <HAL_HCD_HC_Halt+0x3e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f004 febc 	bl	8006fda <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	70fb      	strb	r3, [r7, #3]
 8002286:	460b      	mov	r3, r1
 8002288:	70bb      	strb	r3, [r7, #2]
 800228a:	4613      	mov	r3, r2
 800228c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	333b      	adds	r3, #59	; 0x3b
 800229e:	78ba      	ldrb	r2, [r7, #2]
 80022a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	333f      	adds	r3, #63	; 0x3f
 80022b2:	787a      	ldrb	r2, [r7, #1]
 80022b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022b6:	7c3b      	ldrb	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d114      	bne.n	80022e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	3342      	adds	r3, #66	; 0x42
 80022cc:	2203      	movs	r2, #3
 80022ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	333d      	adds	r3, #61	; 0x3d
 80022e0:	7f3a      	ldrb	r2, [r7, #28]
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e009      	b.n	80022fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	3342      	adds	r3, #66	; 0x42
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022fa:	787b      	ldrb	r3, [r7, #1]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	f200 80d6 	bhi.w	80024ae <HAL_HCD_HC_SubmitRequest+0x23a>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002319 	.word	0x08002319
 800230c:	08002499 	.word	0x08002499
 8002310:	08002385 	.word	0x08002385
 8002314:	0800240f 	.word	0x0800240f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002318:	7c3b      	ldrb	r3, [r7, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 80c9 	bne.w	80024b2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002320:	78bb      	ldrb	r3, [r7, #2]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80c5 	bne.w	80024b2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002328:	8b3b      	ldrh	r3, [r7, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	3351      	adds	r3, #81	; 0x51
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3351      	adds	r3, #81	; 0x51
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	3342      	adds	r3, #66	; 0x42
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800236c:	e0a1      	b.n	80024b2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	3342      	adds	r3, #66	; 0x42
 800237e:	2202      	movs	r2, #2
 8002380:	701a      	strb	r2, [r3, #0]
      break;
 8002382:	e096      	b.n	80024b2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002384:	78bb      	ldrb	r3, [r7, #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d120      	bne.n	80023cc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	3351      	adds	r3, #81	; 0x51
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	3342      	adds	r3, #66	; 0x42
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023b4:	e07e      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	3342      	adds	r3, #66	; 0x42
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
      break;
 80023ca:	e073      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	3350      	adds	r3, #80	; 0x50
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	3342      	adds	r3, #66	; 0x42
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
      break;
 80023f6:	e05d      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3342      	adds	r3, #66	; 0x42
 8002408:	2202      	movs	r2, #2
 800240a:	701a      	strb	r2, [r3, #0]
      break;
 800240c:	e052      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800240e:	78bb      	ldrb	r3, [r7, #2]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d120      	bne.n	8002456 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	3351      	adds	r3, #81	; 0x51
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	3342      	adds	r3, #66	; 0x42
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800243e:	e039      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	3342      	adds	r3, #66	; 0x42
 8002450:	2202      	movs	r2, #2
 8002452:	701a      	strb	r2, [r3, #0]
      break;
 8002454:	e02e      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	3350      	adds	r3, #80	; 0x50
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	3342      	adds	r3, #66	; 0x42
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
      break;
 8002480:	e018      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	3342      	adds	r3, #66	; 0x42
 8002492:	2202      	movs	r2, #2
 8002494:	701a      	strb	r2, [r3, #0]
      break;
 8002496:	e00d      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	3342      	adds	r3, #66	; 0x42
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
      break;
 80024ac:	e002      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80024b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3344      	adds	r3, #68	; 0x44
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	8b39      	ldrh	r1, [r7, #24]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4403      	add	r3, r0
 80024d8:	3348      	adds	r3, #72	; 0x48
 80024da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	335c      	adds	r3, #92	; 0x5c
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	334c      	adds	r3, #76	; 0x4c
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	3339      	adds	r3, #57	; 0x39
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	335d      	adds	r3, #93	; 0x5d
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	3338      	adds	r3, #56	; 0x38
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	18d1      	adds	r1, r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	f004 fbf2 	bl	8006d30 <USB_HC_StartXfer>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop

08002558 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f004 f90f 	bl	8006792 <USB_GetMode>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	f040 80ef 	bne.w	800275a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f004 f8f3 	bl	800676c <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80e5 	beq.w	8002758 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f004 f8ea 	bl	800676c <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025a2:	d104      	bne.n	80025ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 f8da 	bl	800676c <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c2:	d104      	bne.n	80025ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 f8ca 	bl	800676c <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e2:	d104      	bne.n	80025ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 f8ba 	bl	800676c <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d103      	bne.n	800260a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2202      	movs	r2, #2
 8002608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f004 f8ac 	bl	800676c <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800261a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261e:	d115      	bne.n	800264c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002628:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f006 fe62 	bl	8009304 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f004 f9a2 	bl	8006990 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f004 f88b 	bl	800676c <USB_ReadInterrupts>
 8002656:	4603      	mov	r3, r0
 8002658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d102      	bne.n	8002668 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f001 f966 	bl	8003934 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f004 f87d 	bl	800676c <USB_ReadInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b08      	cmp	r3, #8
 800267a:	d106      	bne.n	800268a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f006 fe25 	bl	80092cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2208      	movs	r2, #8
 8002688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f004 f86c 	bl	800676c <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269e:	d138      	bne.n	8002712 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 fc87 	bl	8006fb8 <USB_HC_ReadInterrupt>
 80026aa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e025      	b.n	80026fe <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d018      	beq.n	80026f8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	d106      	bne.n	80026ec <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4619      	mov	r1, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8cf 	bl	8002888 <HCD_HC_IN_IRQHandler>
 80026ea:	e005      	b.n	80026f8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fcfd 	bl	80030f2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	d3d4      	bcc.n	80026b2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f004 f828 	bl	800676c <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b10      	cmp	r3, #16
 8002724:	d101      	bne.n	800272a <HAL_HCD_IRQHandler+0x1d2>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_HCD_IRQHandler+0x1d4>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d014      	beq.n	800275a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0210 	bic.w	r2, r2, #16
 800273e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f001 f84b 	bl	80037dc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0210 	orr.w	r2, r2, #16
 8002754:	619a      	str	r2, [r3, #24]
 8002756:	e000      	b.n	800275a <HAL_HCD_IRQHandler+0x202>
      return;
 8002758:	bf00      	nop
    }
  }
}
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_HCD_Start+0x16>
 8002772:	2302      	movs	r3, #2
 8002774:	e013      	b.n	800279e <HAL_HCD_Start+0x3e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 feff 	bl	8006586 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f962 	bl	8006a58 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_HCD_Stop+0x16>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e00d      	b.n	80027d8 <HAL_HCD_Stop+0x32>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 fd41 	bl	8007250 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 f909 	bl	8006a04 <USB_ResetPort>
 80027f2:	4603      	mov	r3, r0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	781b      	ldrb	r3, [r3, #0]
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	460b      	mov	r3, r1
 8002830:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	334c      	adds	r3, #76	; 0x4c
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f004 f94b 	bl	8006af8 <USB_GetCurrentFrame>
 8002862:	4603      	mov	r3, r0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f004 f926 	bl	8006aca <USB_GetHostSpeed>
 800287e:	4603      	mov	r3, r0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d119      	bne.n	80028ec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	461a      	mov	r2, r3
 80028c6:	2304      	movs	r3, #4
 80028c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	0151      	lsls	r1, r2, #5
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	440a      	add	r2, r1
 80028e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	60d3      	str	r3, [r2, #12]
 80028ea:	e0ce      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d12c      	bne.n	800295e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002916:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	335d      	adds	r3, #93	; 0x5d
 8002928:	2207      	movs	r2, #7
 800292a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	0151      	lsls	r1, r2, #5
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	440a      	add	r2, r1
 8002942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f004 fb3f 	bl	8006fda <USB_HC_Halt>
 800295c:	e095      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b20      	cmp	r3, #32
 8002972:	d109      	bne.n	8002988 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2320      	movs	r3, #32
 8002984:	6093      	str	r3, [r2, #8]
 8002986:	e080      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d134      	bne.n	8002a08 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	0151      	lsls	r1, r2, #5
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	440a      	add	r2, r1
 80029b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	335d      	adds	r3, #93	; 0x5d
 80029ce:	2205      	movs	r2, #5
 80029d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	461a      	mov	r2, r3
 80029e0:	2310      	movs	r3, #16
 80029e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	461a      	mov	r2, r3
 80029f2:	2308      	movs	r3, #8
 80029f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 faea 	bl	8006fda <USB_HC_Halt>
 8002a06:	e040      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d134      	bne.n	8002a8a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fac5 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2310      	movs	r3, #16
 8002a60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	335d      	adds	r3, #93	; 0x5d
 8002a72:	2208      	movs	r2, #8
 8002a74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	461a      	mov	r2, r3
 8002a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a88:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa0:	d122      	bne.n	8002ae8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	0151      	lsls	r1, r2, #5
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	440a      	add	r2, r1
 8002ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 fa84 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ae6:	e300      	b.n	80030ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	f040 80fd 	bne.w	8002cfa <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	3348      	adds	r3, #72	; 0x48
 8002b18:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0159      	lsls	r1, r3, #5
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b2c:	1ad1      	subs	r1, r2, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4403      	add	r3, r0
 8002b3c:	334c      	adds	r3, #76	; 0x4c
 8002b3e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	335d      	adds	r3, #93	; 0x5d
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	3358      	adds	r3, #88	; 0x58
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2301      	movs	r3, #1
 8002b78:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	333f      	adds	r3, #63	; 0x3f
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	333f      	adds	r3, #63	; 0x3f
 8002ba0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d121      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	0151      	lsls	r1, r2, #5
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	440a      	add	r2, r1
 8002bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 fa02 	bl	8006fda <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	2310      	movs	r3, #16
 8002be6:	6093      	str	r3, [r2, #8]
 8002be8:	e070      	b.n	8002ccc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	333f      	adds	r3, #63	; 0x3f
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d12a      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	0151      	lsls	r1, r2, #5
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	440a      	add	r2, r1
 8002c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c1e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b2d8      	uxtb	r0, r3
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4601      	mov	r1, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f006 fb66 	bl	8009320 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c54:	e03a      	b.n	8002ccc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	333f      	adds	r3, #63	; 0x3f
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d12f      	bne.n	8002ccc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	335c      	adds	r3, #92	; 0x5c
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3350      	adds	r3, #80	; 0x50
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	f083 0301 	eor.w	r3, r3, #1
 8002c96:	b2d8      	uxtb	r0, r3
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3350      	adds	r3, #80	; 0x50
 8002ca8:	4602      	mov	r2, r0
 8002caa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	b2d8      	uxtb	r0, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f006 fb2a 	bl	8009320 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3350      	adds	r3, #80	; 0x50
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2d8      	uxtb	r0, r3
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3350      	adds	r3, #80	; 0x50
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	701a      	strb	r2, [r3, #0]
}
 8002cf8:	e1f7      	b.n	80030ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	f040 811a 	bne.w	8002f46 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	0151      	lsls	r1, r2, #5
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	440a      	add	r2, r1
 8002d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d2c:	f023 0302 	bic.w	r3, r3, #2
 8002d30:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	335d      	adds	r3, #93	; 0x5d
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10a      	bne.n	8002d5e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e0d9      	b.n	8002f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	335d      	adds	r3, #93	; 0x5d
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d10a      	bne.n	8002d8a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	335c      	adds	r3, #92	; 0x5c
 8002d84:	2205      	movs	r2, #5
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e0c3      	b.n	8002f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	335d      	adds	r3, #93	; 0x5d
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d00a      	beq.n	8002db6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	335d      	adds	r3, #93	; 0x5d
 8002db0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d156      	bne.n	8002e64 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3358      	adds	r3, #88	; 0x58
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1c59      	adds	r1, r3, #1
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4403      	add	r3, r0
 8002dd8:	3358      	adds	r3, #88	; 0x58
 8002dda:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3358      	adds	r3, #88	; 0x58
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d914      	bls.n	8002e1c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	3358      	adds	r3, #88	; 0x58
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	335c      	adds	r3, #92	; 0x5c
 8002e16:	2204      	movs	r2, #4
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e009      	b.n	8002e30 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	335c      	adds	r3, #92	; 0x5c
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e056      	b.n	8002f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	335d      	adds	r3, #93	; 0x5d
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d123      	bne.n	8002ec2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	335c      	adds	r3, #92	; 0x5c
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ea4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eac:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e027      	b.n	8002f12 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	335d      	adds	r3, #93	; 0x5d
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b07      	cmp	r3, #7
 8002ed6:	d11c      	bne.n	8002f12 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3358      	adds	r3, #88	; 0x58
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	1c59      	adds	r1, r3, #1
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4403      	add	r3, r0
 8002efa:	3358      	adds	r3, #88	; 0x58
 8002efc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	335c      	adds	r3, #92	; 0x5c
 8002f0e:	2204      	movs	r2, #4
 8002f10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2302      	movs	r3, #2
 8002f22:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	b2d8      	uxtb	r0, r3
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4601      	mov	r1, r0
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f006 f9ee 	bl	8009320 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f44:	e0d1      	b.n	80030ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d13e      	bne.n	8002fda <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	0151      	lsls	r1, r2, #5
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	440a      	add	r2, r1
 8002f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	3358      	adds	r3, #88	; 0x58
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4403      	add	r3, r0
 8002f9e:	3358      	adds	r3, #88	; 0x58
 8002fa0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	335d      	adds	r3, #93	; 0x5d
 8002fb2:	2206      	movs	r2, #6
 8002fb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 f80a 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	6093      	str	r3, [r2, #8]
}
 8002fd8:	e087      	b.n	80030ea <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d17c      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	333f      	adds	r3, #63	; 0x3f
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d122      	bne.n	800304c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	3358      	adds	r3, #88	; 0x58
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	0151      	lsls	r1, r2, #5
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	440a      	add	r2, r1
 8003030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f003 ffc8 	bl	8006fda <USB_HC_Halt>
 800304a:	e045      	b.n	80030d8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	333f      	adds	r3, #63	; 0x3f
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	333f      	adds	r3, #63	; 0x3f
 8003072:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003074:	2b02      	cmp	r3, #2
 8003076:	d12f      	bne.n	80030d8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	3358      	adds	r3, #88	; 0x58
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d121      	bne.n	80030d8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	335d      	adds	r3, #93	; 0x5d
 80030a4:	2203      	movs	r2, #3
 80030a6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 ff81 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	2310      	movs	r3, #16
 80030e8:	6093      	str	r3, [r2, #8]
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d119      	bne.n	8003156 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	461a      	mov	r2, r3
 8003130:	2304      	movs	r3, #4
 8003132:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	440a      	add	r2, r1
 800314a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003154:	e33e      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b20      	cmp	r3, #32
 800316a:	d141      	bne.n	80031f0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2320      	movs	r3, #32
 800317c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	333d      	adds	r3, #61	; 0x3d
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 831f 	bne.w	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	333d      	adds	r3, #61	; 0x3d
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	335c      	adds	r3, #92	; 0x5c
 80031ba:	2202      	movs	r2, #2
 80031bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	0151      	lsls	r1, r2, #5
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	440a      	add	r2, r1
 80031d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 fef6 	bl	8006fda <USB_HC_Halt>
}
 80031ee:	e2f1      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d13f      	bne.n	8003286 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	440b      	add	r3, r1
 8003214:	335d      	adds	r3, #93	; 0x5d
 8003216:	2204      	movs	r2, #4
 8003218:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	333d      	adds	r3, #61	; 0x3d
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	440b      	add	r3, r1
 800323c:	3358      	adds	r3, #88	; 0x58
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4413      	add	r3, r2
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	0151      	lsls	r1, r2, #5
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	440a      	add	r2, r1
 8003258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325c:	f043 0302 	orr.w	r3, r3, #2
 8003260:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f003 feb4 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	2340      	movs	r3, #64	; 0x40
 8003282:	6093      	str	r3, [r2, #8]
}
 8003284:	e2a6      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329c:	d122      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	0151      	lsls	r1, r2, #5
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	440a      	add	r2, r1
 80032b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fe86 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	461a      	mov	r2, r3
 80032dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032e0:	6093      	str	r3, [r2, #8]
}
 80032e2:	e277      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d135      	bne.n	8003366 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	3358      	adds	r3, #88	; 0x58
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	440a      	add	r2, r1
 8003324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fe4e 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	461a      	mov	r2, r3
 800334c:	2301      	movs	r3, #1
 800334e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	335d      	adds	r3, #93	; 0x5d
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
}
 8003364:	e236      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d12b      	bne.n	80033d4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	461a      	mov	r2, r3
 800338a:	2308      	movs	r3, #8
 800338c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	0151      	lsls	r1, r2, #5
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	440a      	add	r2, r1
 80033a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 fe0e 	bl	8006fda <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	335d      	adds	r3, #93	; 0x5d
 80033ce:	2205      	movs	r2, #5
 80033d0:	701a      	strb	r2, [r3, #0]
}
 80033d2:	e1ff      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d155      	bne.n	8003496 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	3358      	adds	r3, #88	; 0x58
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	335d      	adds	r3, #93	; 0x5d
 800340e:	2203      	movs	r2, #3
 8003410:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	333d      	adds	r3, #61	; 0x3d
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d114      	bne.n	8003452 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	333c      	adds	r3, #60	; 0x3c
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	440b      	add	r3, r1
 800344c:	333d      	adds	r3, #61	; 0x3d
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	0151      	lsls	r1, r2, #5
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	440a      	add	r2, r1
 8003468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f003 fdac 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	2310      	movs	r3, #16
 8003492:	6093      	str	r3, [r2, #8]
}
 8003494:	e19e      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d12b      	bne.n	8003504 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	0151      	lsls	r1, r2, #5
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	440a      	add	r2, r1
 80034c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fd7f 	bl	8006fda <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	335d      	adds	r3, #93	; 0x5d
 80034ec:	2206      	movs	r2, #6
 80034ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	461a      	mov	r2, r3
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	6093      	str	r3, [r2, #8]
}
 8003502:	e167      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351a:	d135      	bne.n	8003588 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	440a      	add	r2, r1
 8003532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fd47 	bl	8006fda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	2310      	movs	r3, #16
 800355c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003570:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	335d      	adds	r3, #93	; 0x5d
 8003582:	2208      	movs	r2, #8
 8003584:	701a      	strb	r2, [r3, #0]
}
 8003586:	e125      	b.n	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 811a 	bne.w	80037d4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	0151      	lsls	r1, r2, #5
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	440a      	add	r2, r1
 80035b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ba:	f023 0302 	bic.w	r3, r3, #2
 80035be:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	335d      	adds	r3, #93	; 0x5d
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d137      	bne.n	8003646 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	440b      	add	r3, r1
 80035e4:	335c      	adds	r3, #92	; 0x5c
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	333f      	adds	r3, #63	; 0x3f
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d00b      	beq.n	8003618 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	333f      	adds	r3, #63	; 0x3f
 8003610:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003612:	2b03      	cmp	r3, #3
 8003614:	f040 80c5 	bne.w	80037a2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	440b      	add	r3, r1
 8003626:	3351      	adds	r3, #81	; 0x51
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	f083 0301 	eor.w	r3, r3, #1
 800362e:	b2d8      	uxtb	r0, r3
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	3351      	adds	r3, #81	; 0x51
 8003640:	4602      	mov	r2, r0
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e0ad      	b.n	80037a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	335d      	adds	r3, #93	; 0x5d
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d10a      	bne.n	8003672 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	335c      	adds	r3, #92	; 0x5c
 800366c:	2202      	movs	r2, #2
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e097      	b.n	80037a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	335d      	adds	r3, #93	; 0x5d
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d10a      	bne.n	800369e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	440b      	add	r3, r1
 8003696:	335c      	adds	r3, #92	; 0x5c
 8003698:	2202      	movs	r2, #2
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e081      	b.n	80037a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	335d      	adds	r3, #93	; 0x5d
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10a      	bne.n	80036ca <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	335c      	adds	r3, #92	; 0x5c
 80036c4:	2205      	movs	r2, #5
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e06b      	b.n	80037a2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	335d      	adds	r3, #93	; 0x5d
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d00a      	beq.n	80036f6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	440b      	add	r3, r1
 80036ee:	335d      	adds	r3, #93	; 0x5d
 80036f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d155      	bne.n	80037a2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	440b      	add	r3, r1
 8003704:	3358      	adds	r3, #88	; 0x58
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1c59      	adds	r1, r3, #1
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4403      	add	r3, r0
 8003718:	3358      	adds	r3, #88	; 0x58
 800371a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	3358      	adds	r3, #88	; 0x58
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d914      	bls.n	800375c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	440b      	add	r3, r1
 8003740:	3358      	adds	r3, #88	; 0x58
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	440b      	add	r3, r1
 8003754:	335c      	adds	r3, #92	; 0x5c
 8003756:	2204      	movs	r2, #4
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e009      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	440b      	add	r3, r1
 800376a:	335c      	adds	r3, #92	; 0x5c
 800376c:	2202      	movs	r2, #2
 800376e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003786:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800378e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	461a      	mov	r2, r3
 80037b0:	2302      	movs	r3, #2
 80037b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	b2d8      	uxtb	r0, r3
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	335c      	adds	r3, #92	; 0x5c
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	4601      	mov	r1, r0
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f005 fda6 	bl	8009320 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	0c5b      	lsrs	r3, r3, #17
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003810:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d003      	beq.n	8003820 <HCD_RXQLVL_IRQHandler+0x44>
 8003818:	2b05      	cmp	r3, #5
 800381a:	f000 8082 	beq.w	8003922 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800381e:	e083      	b.n	8003928 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d07f      	beq.n	8003926 <HCD_RXQLVL_IRQHandler+0x14a>
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	3344      	adds	r3, #68	; 0x44
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d074      	beq.n	8003926 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	3344      	adds	r3, #68	; 0x44
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	b292      	uxth	r2, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f002 ff5f 	bl	800671a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	440b      	add	r3, r1
 800386a:	3344      	adds	r3, #68	; 0x44
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	18d1      	adds	r1, r2, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4403      	add	r3, r0
 8003880:	3344      	adds	r3, #68	; 0x44
 8003882:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	440b      	add	r3, r1
 8003892:	334c      	adds	r3, #76	; 0x4c
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	18d1      	adds	r1, r2, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4403      	add	r3, r0
 80038a8:	334c      	adds	r3, #76	; 0x4c
 80038aa:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HCD_RXQLVL_IRQHandler+0x154>)
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d031      	beq.n	8003926 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3350      	adds	r3, #80	; 0x50
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2d8      	uxtb	r0, r3
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	3350      	adds	r3, #80	; 0x50
 800391c:	4602      	mov	r2, r0
 800391e:	701a      	strb	r2, [r3, #0]
      break;
 8003920:	e001      	b.n	8003926 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003926:	bf00      	nop
  }
}
 8003928:	bf00      	nop
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	1ff80000 	.word	0x1ff80000

08003934 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003960:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d10b      	bne.n	8003984 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f005 fcb6 	bl	80092e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f043 0302 	orr.w	r3, r3, #2
 8003982:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b08      	cmp	r3, #8
 800398c:	d132      	bne.n	80039f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f043 0308 	orr.w	r3, r3, #8
 8003994:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d126      	bne.n	80039ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d113      	bne.n	80039d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b2:	d106      	bne.n	80039c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 ffe8 	bl	8006990 <USB_InitFSLSPClkSel>
 80039c0:	e011      	b.n	80039e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 ffe1 	bl	8006990 <USB_InitFSLSPClkSel>
 80039ce:	e00a      	b.n	80039e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039de:	461a      	mov	r2, r3
 80039e0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f005 fca8 	bl	800933c <HAL_HCD_PortEnabled_Callback>
 80039ec:	e002      	b.n	80039f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f005 fcb2 	bl	8009358 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d103      	bne.n	8003a06 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f043 0320 	orr.w	r3, r3, #32
 8003a04:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6013      	str	r3, [r2, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e11f      	b.n	8003c6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fc ff36 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a80:	f001 f9de 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a7b      	ldr	r2, [pc, #492]	; (8003c78 <HAL_I2C_Init+0x25c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d807      	bhi.n	8003aa0 <HAL_I2C_Init+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a7a      	ldr	r2, [pc, #488]	; (8003c7c <HAL_I2C_Init+0x260>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e006      	b.n	8003aae <HAL_I2C_Init+0x92>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a77      	ldr	r2, [pc, #476]	; (8003c80 <HAL_I2C_Init+0x264>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0db      	b.n	8003c6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a72      	ldr	r2, [pc, #456]	; (8003c84 <HAL_I2C_Init+0x268>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a64      	ldr	r2, [pc, #400]	; (8003c78 <HAL_I2C_Init+0x25c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d802      	bhi.n	8003af0 <HAL_I2C_Init+0xd4>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	e009      	b.n	8003b04 <HAL_I2C_Init+0xe8>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a63      	ldr	r2, [pc, #396]	; (8003c88 <HAL_I2C_Init+0x26c>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	3301      	adds	r3, #1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4956      	ldr	r1, [pc, #344]	; (8003c78 <HAL_I2C_Init+0x25c>)
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d80d      	bhi.n	8003b40 <HAL_I2C_Init+0x124>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e59      	subs	r1, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	bf38      	it	cc
 8003b3c:	2304      	movcc	r3, #4
 8003b3e:	e04f      	b.n	8003be0 <HAL_I2C_Init+0x1c4>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <HAL_I2C_Init+0x150>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	440b      	add	r3, r1
 8003b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e012      	b.n	8003b92 <HAL_I2C_Init+0x176>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e58      	subs	r0, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Init+0x17e>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e022      	b.n	8003be0 <HAL_I2C_Init+0x1c4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_I2C_Init+0x1a4>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1e58      	subs	r0, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	440b      	add	r3, r1
 8003bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	e00f      	b.n	8003be0 <HAL_I2C_Init+0x1c4>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	0099      	lsls	r1, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6809      	ldr	r1, [r1, #0]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6911      	ldr	r1, [r2, #16]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68d2      	ldr	r2, [r2, #12]
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	000186a0 	.word	0x000186a0
 8003c7c:	001e847f 	.word	0x001e847f
 8003c80:	003d08ff 	.word	0x003d08ff
 8003c84:	431bde83 	.word	0x431bde83
 8003c88:	10624dd3 	.word	0x10624dd3

08003c8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e128      	b.n	8003ef0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a90      	ldr	r2, [pc, #576]	; (8003ef8 <HAL_I2S_Init+0x26c>)
 8003cb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fc fe73 	bl	80009a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003cd4:	f023 030f 	bic.w	r3, r3, #15
 8003cd8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d060      	beq.n	8003dac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003cf2:	2310      	movs	r3, #16
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e001      	b.n	8003cfc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d802      	bhi.n	8003d0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f001 f9a2 	bl	8005054 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d10:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1a:	d125      	bne.n	8003d68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	3305      	adds	r3, #5
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e01f      	b.n	8003d86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	3305      	adds	r3, #5
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e00e      	b.n	8003d86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	461a      	mov	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	3305      	adds	r3, #5
 8003d84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4a5c      	ldr	r2, [pc, #368]	; (8003efc <HAL_I2S_Init+0x270>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	08db      	lsrs	r3, r3, #3
 8003d90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e003      	b.n	8003db4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003dac:	2302      	movs	r3, #2
 8003dae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d902      	bls.n	8003dc0 <HAL_I2S_Init+0x134>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2bff      	cmp	r3, #255	; 0xff
 8003dbe:	d907      	bls.n	8003dd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	f043 0210 	orr.w	r2, r3, #16
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e08f      	b.n	8003ef0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	ea42 0103 	orr.w	r1, r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003dee:	f023 030f 	bic.w	r3, r3, #15
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6851      	ldr	r1, [r2, #4]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6892      	ldr	r2, [r2, #8]
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68d2      	ldr	r2, [r2, #12]
 8003e00:	4311      	orrs	r1, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6992      	ldr	r2, [r2, #24]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d161      	bne.n	8003ee0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a38      	ldr	r2, [pc, #224]	; (8003f00 <HAL_I2S_Init+0x274>)
 8003e20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a37      	ldr	r2, [pc, #220]	; (8003f04 <HAL_I2S_Init+0x278>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2S_Init+0x1a4>
 8003e2c:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <HAL_I2S_Init+0x27c>)
 8003e2e:	e001      	b.n	8003e34 <HAL_I2S_Init+0x1a8>
 8003e30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	4932      	ldr	r1, [pc, #200]	; (8003f04 <HAL_I2S_Init+0x278>)
 8003e3c:	428a      	cmp	r2, r1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2S_Init+0x1b8>
 8003e40:	4a31      	ldr	r2, [pc, #196]	; (8003f08 <HAL_I2S_Init+0x27c>)
 8003e42:	e001      	b.n	8003e48 <HAL_I2S_Init+0x1bc>
 8003e44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003e48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e4c:	f023 030f 	bic.w	r3, r3, #15
 8003e50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_I2S_Init+0x278>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2S_Init+0x1d4>
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <HAL_I2S_Init+0x27c>)
 8003e5e:	e001      	b.n	8003e64 <HAL_I2S_Init+0x1d8>
 8003e60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e64:	2202      	movs	r2, #2
 8003e66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <HAL_I2S_Init+0x278>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2S_Init+0x1ea>
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_I2S_Init+0x27c>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2S_Init+0x1ee>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e86:	d003      	beq.n	8003e90 <HAL_I2S_Init+0x204>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e001      	b.n	8003e9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	b299      	uxth	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003eb2:	4303      	orrs	r3, r0
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	897b      	ldrh	r3, [r7, #10]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ec8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <HAL_I2S_Init+0x278>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2S_Init+0x24c>
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <HAL_I2S_Init+0x27c>)
 8003ed6:	e001      	b.n	8003edc <HAL_I2S_Init+0x250>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003edc:	897a      	ldrh	r2, [r7, #10]
 8003ede:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	08004003 	.word	0x08004003
 8003efc:	cccccccd 	.word	0xcccccccd
 8003f00:	08004119 	.word	0x08004119
 8003f04:	40003800 	.word	0x40003800
 8003f08:	40003400 	.word	0x40003400

08003f0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	881a      	ldrh	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10e      	bne.n	8003f9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff ffb8 	bl	8003f0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10e      	bne.n	8003ffa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff93 	bl	8003f20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b04      	cmp	r3, #4
 800401c:	d13a      	bne.n	8004094 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d109      	bne.n	800403c <I2S_IRQHandler+0x3a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d102      	bne.n	800403c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff ffb4 	bl	8003fa4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d126      	bne.n	8004094 <I2S_IRQHandler+0x92>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d11f      	bne.n	8004094 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004062:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ff50 	bl	8003f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b03      	cmp	r3, #3
 800409e:	d136      	bne.n	800410e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d109      	bne.n	80040be <I2S_IRQHandler+0xbc>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d102      	bne.n	80040be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff45 	bl	8003f48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d122      	bne.n	800410e <I2S_IRQHandler+0x10c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d11b      	bne.n	800410e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004100:	f043 0204 	orr.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff13 	bl	8003f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4aa2      	ldr	r2, [pc, #648]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004132:	4ba2      	ldr	r3, [pc, #648]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004134:	e001      	b.n	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a9b      	ldr	r2, [pc, #620]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d101      	bne.n	8004154 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004150:	4b9a      	ldr	r3, [pc, #616]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004152:	e001      	b.n	8004158 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d004      	beq.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 8099 	bne.w	80042a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d107      	bne.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f925 	bl	80043d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9c8 	bl	8004534 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d13a      	bne.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d035      	beq.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7e      	ldr	r2, [pc, #504]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041c2:	4b7e      	ldr	r3, [pc, #504]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c4:	e001      	b.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4979      	ldr	r1, [pc, #484]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041d2:	428b      	cmp	r3, r1
 80041d4:	d101      	bne.n	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041d6:	4b79      	ldr	r3, [pc, #484]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041d8:	e001      	b.n	80041de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f043 0202 	orr.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe88 	bl	8003f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	f040 80be 	bne.w	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80b8 	beq.w	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800424a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a59      	ldr	r2, [pc, #356]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004256:	4b59      	ldr	r3, [pc, #356]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004258:	e001      	b.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4954      	ldr	r1, [pc, #336]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004266:	428b      	cmp	r3, r1
 8004268:	d101      	bne.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800426a:	4b54      	ldr	r3, [pc, #336]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800426c:	e001      	b.n	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800426e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004276:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f043 0204 	orr.w	r2, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fe4a 	bl	8003f34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042a0:	e084      	b.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d107      	bne.n	80042bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f8be 	bl	8004438 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8fd 	bl	80044d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d12f      	bne.n	8004340 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02a      	beq.n	8004340 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2e      	ldr	r2, [pc, #184]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004304:	4b2d      	ldr	r3, [pc, #180]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004306:	e001      	b.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4929      	ldr	r1, [pc, #164]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004314:	428b      	cmp	r3, r1
 8004316:	d101      	bne.n	800431c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004318:	4b28      	ldr	r3, [pc, #160]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800431a:	e001      	b.n	8004320 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800431c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004324:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f043 0202 	orr.w	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fdfa 	bl	8003f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b08      	cmp	r3, #8
 8004348:	d131      	bne.n	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02c      	beq.n	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004360:	e001      	b.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4912      	ldr	r1, [pc, #72]	; (80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800436e:	428b      	cmp	r3, r1
 8004370:	d101      	bne.n	8004376 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004374:	e001      	b.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800437a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800437e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800438e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fdc5 	bl	8003f34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043aa:	e000      	b.n	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ac:	bf00      	nop
}
 80043ae:	bf00      	nop
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40003800 	.word	0x40003800
 80043bc:	40003400 	.word	0x40003400

080043c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c99      	adds	r1, r3, #2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6251      	str	r1, [r2, #36]	; 0x24
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d113      	bne.n	800442e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004414:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ffc9 	bl	80043c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	1c99      	adds	r1, r3, #2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6251      	str	r1, [r2, #36]	; 0x24
 800444a:	8819      	ldrh	r1, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <I2SEx_TxISR_I2SExt+0x22>
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <I2SEx_TxISR_I2SExt+0x94>)
 8004458:	e001      	b.n	800445e <I2SEx_TxISR_I2SExt+0x26>
 800445a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800445e:	460a      	mov	r2, r1
 8004460:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d121      	bne.n	80044be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d101      	bne.n	8004488 <I2SEx_TxISR_I2SExt+0x50>
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <I2SEx_TxISR_I2SExt+0x94>)
 8004486:	e001      	b.n	800448c <I2SEx_TxISR_I2SExt+0x54>
 8004488:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	490d      	ldr	r1, [pc, #52]	; (80044c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004494:	428b      	cmp	r3, r1
 8004496:	d101      	bne.n	800449c <I2SEx_TxISR_I2SExt+0x64>
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <I2SEx_TxISR_I2SExt+0x94>)
 800449a:	e001      	b.n	80044a0 <I2SEx_TxISR_I2SExt+0x68>
 800449c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ff81 	bl	80043c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40003800 	.word	0x40003800
 80044cc:	40003400 	.word	0x40003400

080044d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68d8      	ldr	r0, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	1c99      	adds	r1, r3, #2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044e8:	b282      	uxth	r2, r0
 80044ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d113      	bne.n	800452c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004512:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff4a 	bl	80043c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <I2SEx_RxISR_I2SExt+0x16>
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004548:	e001      	b.n	800454e <I2SEx_RxISR_I2SExt+0x1a>
 800454a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800454e:	68d8      	ldr	r0, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	1c99      	adds	r1, r3, #2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	62d1      	str	r1, [r2, #44]	; 0x2c
 800455a:	b282      	uxth	r2, r0
 800455c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d121      	bne.n	80045ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <I2SEx_RxISR_I2SExt+0x90>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <I2SEx_RxISR_I2SExt+0x50>
 8004580:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004582:	e001      	b.n	8004588 <I2SEx_RxISR_I2SExt+0x54>
 8004584:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	490d      	ldr	r1, [pc, #52]	; (80045c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004590:	428b      	cmp	r3, r1
 8004592:	d101      	bne.n	8004598 <I2SEx_RxISR_I2SExt+0x64>
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004596:	e001      	b.n	800459c <I2SEx_RxISR_I2SExt+0x68>
 8004598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff03 	bl	80043c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40003800 	.word	0x40003800
 80045c8:	40003400 	.word	0x40003400

080045cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e25b      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d075      	beq.n	80046d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ea:	4ba3      	ldr	r3, [pc, #652]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d00c      	beq.n	8004610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045f6:	4ba0      	ldr	r3, [pc, #640]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d112      	bne.n	8004628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004602:	4b9d      	ldr	r3, [pc, #628]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460e:	d10b      	bne.n	8004628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004610:	4b99      	ldr	r3, [pc, #612]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05b      	beq.n	80046d4 <HAL_RCC_OscConfig+0x108>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d157      	bne.n	80046d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e236      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d106      	bne.n	8004640 <HAL_RCC_OscConfig+0x74>
 8004632:	4b91      	ldr	r3, [pc, #580]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a90      	ldr	r2, [pc, #576]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e01d      	b.n	800467c <HAL_RCC_OscConfig+0xb0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x98>
 800464a:	4b8b      	ldr	r3, [pc, #556]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a8a      	ldr	r2, [pc, #552]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b88      	ldr	r3, [pc, #544]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a87      	ldr	r2, [pc, #540]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0xb0>
 8004664:	4b84      	ldr	r3, [pc, #528]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a83      	ldr	r2, [pc, #524]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800466a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b81      	ldr	r3, [pc, #516]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a80      	ldr	r2, [pc, #512]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fc fde6 	bl	8001254 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800468c:	f7fc fde2 	bl	8001254 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1fb      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	4b76      	ldr	r3, [pc, #472]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0xc0>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fc fdd2 	bl	8001254 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b4:	f7fc fdce 	bl	8001254 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e1e7      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	4b6c      	ldr	r3, [pc, #432]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0xe8>
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d063      	beq.n	80047aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d11c      	bne.n	8004734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046fa:	4b5f      	ldr	r3, [pc, #380]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d116      	bne.n	8004734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	4b5c      	ldr	r3, [pc, #368]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_RCC_OscConfig+0x152>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e1bb      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471e:	4b56      	ldr	r3, [pc, #344]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4952      	ldr	r1, [pc, #328]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	e03a      	b.n	80047aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	4b4f      	ldr	r3, [pc, #316]	; (800487c <HAL_RCC_OscConfig+0x2b0>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fc fd87 	bl	8001254 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800474a:	f7fc fd83 	bl	8001254 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e19c      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b43      	ldr	r3, [pc, #268]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4940      	ldr	r1, [pc, #256]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
 800477c:	e015      	b.n	80047aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_RCC_OscConfig+0x2b0>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fc fd66 	bl	8001254 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800478c:	f7fc fd62 	bl	8001254 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e17b      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	4b36      	ldr	r3, [pc, #216]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d030      	beq.n	8004818 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047be:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCC_OscConfig+0x2b4>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fc fd46 	bl	8001254 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fc fd42 	bl	8001254 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e15b      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	4b26      	ldr	r3, [pc, #152]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x200>
 80047ea:	e015      	b.n	8004818 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_RCC_OscConfig+0x2b4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f2:	f7fc fd2f 	bl	8001254 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047fa:	f7fc fd2b 	bl	8001254 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e144      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a0 	beq.w	8004966 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x2b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d121      	bne.n	80048a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCC_OscConfig+0x2b8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a07      	ldr	r2, [pc, #28]	; (8004884 <HAL_RCC_OscConfig+0x2b8>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800486e:	f7fc fcf1 	bl	8001254 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	e011      	b.n	800489a <HAL_RCC_OscConfig+0x2ce>
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	42470000 	.word	0x42470000
 8004880:	42470e80 	.word	0x42470e80
 8004884:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fc fce4 	bl	8001254 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0fd      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_OscConfig+0x4d4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d106      	bne.n	80048bc <HAL_RCC_OscConfig+0x2f0>
 80048ae:	4b7d      	ldr	r3, [pc, #500]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	4a7c      	ldr	r2, [pc, #496]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ba:	e01c      	b.n	80048f6 <HAL_RCC_OscConfig+0x32a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d10c      	bne.n	80048de <HAL_RCC_OscConfig+0x312>
 80048c4:	4b77      	ldr	r3, [pc, #476]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a76      	ldr	r2, [pc, #472]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
 80048d0:	4b74      	ldr	r3, [pc, #464]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4a73      	ldr	r2, [pc, #460]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6713      	str	r3, [r2, #112]	; 0x70
 80048dc:	e00b      	b.n	80048f6 <HAL_RCC_OscConfig+0x32a>
 80048de:	4b71      	ldr	r3, [pc, #452]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a70      	ldr	r2, [pc, #448]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	4b6e      	ldr	r3, [pc, #440]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a6d      	ldr	r2, [pc, #436]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d015      	beq.n	800492a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fc fca9 	bl	8001254 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fc fca5 	bl	8001254 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0bc      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491c:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ee      	beq.n	8004906 <HAL_RCC_OscConfig+0x33a>
 8004928:	e014      	b.n	8004954 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fc fc93 	bl	8001254 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fc fc8f 	bl	8001254 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0a6      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004948:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ee      	bne.n	8004932 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495a:	4b52      	ldr	r3, [pc, #328]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	4a51      	ldr	r2, [pc, #324]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 8004960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8092 	beq.w	8004a94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004970:	4b4c      	ldr	r3, [pc, #304]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d05c      	beq.n	8004a36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d141      	bne.n	8004a08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b48      	ldr	r3, [pc, #288]	; (8004aa8 <HAL_RCC_OscConfig+0x4dc>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fc fc63 	bl	8001254 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004992:	f7fc fc5f 	bl	8001254 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e078      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a4:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	019b      	lsls	r3, r3, #6
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	4933      	ldr	r1, [pc, #204]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_RCC_OscConfig+0x4dc>)
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fc fc38 	bl	8001254 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fc fc34 	bl	8001254 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04d      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x41c>
 8004a06:	e045      	b.n	8004a94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCC_OscConfig+0x4dc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fc fc21 	bl	8001254 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fc fc1d 	bl	8001254 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e036      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a28:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x44a>
 8004a34:	e02e      	b.n	8004a94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e029      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a42:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <HAL_RCC_OscConfig+0x4d8>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d11c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d115      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	42470060 	.word	0x42470060

08004aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0cc      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b68      	ldr	r3, [pc, #416]	; (8004c64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d90c      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b65      	ldr	r3, [pc, #404]	; (8004c64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b63      	ldr	r3, [pc, #396]	; (8004c64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0b8      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b00:	4b59      	ldr	r3, [pc, #356]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a58      	ldr	r2, [pc, #352]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b18:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a52      	ldr	r2, [pc, #328]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b24:	4b50      	ldr	r3, [pc, #320]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	494d      	ldr	r1, [pc, #308]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d044      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d107      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	4b47      	ldr	r3, [pc, #284]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d119      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07f      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6a:	4b3f      	ldr	r3, [pc, #252]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e06f      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7a:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e067      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8a:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f023 0203 	bic.w	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4934      	ldr	r1, [pc, #208]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b9c:	f7fc fb5a 	bl	8001254 <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	f7fc fb56 	bl	8001254 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e04f      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 020c 	and.w	r2, r3, #12
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d1eb      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b25      	ldr	r3, [pc, #148]	; (8004c64 <HAL_RCC_ClockConfig+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d20c      	bcs.n	8004bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be2:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e032      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4916      	ldr	r1, [pc, #88]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c1e:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	490e      	ldr	r1, [pc, #56]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c32:	f000 f821 	bl	8004c78 <HAL_RCC_GetSysClockFreq>
 8004c36:	4601      	mov	r1, r0
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004c44:	5cd3      	ldrb	r3, [r2, r3]
 8004c46:	fa21 f303 	lsr.w	r3, r1, r3
 8004c4a:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c4e:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fc faba 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40023c00 	.word	0x40023c00
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	0800a5dc 	.word	0x0800a5dc
 8004c70:	20000000 	.word	0x20000000
 8004c74:	20000004 	.word	0x20000004

08004c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	2300      	movs	r3, #0
 8004c88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c8e:	4b63      	ldr	r3, [pc, #396]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d007      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0x32>
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d008      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x38>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 80b4 	bne.w	8004e0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca4:	4b5e      	ldr	r3, [pc, #376]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ca6:	60bb      	str	r3, [r7, #8]
       break;
 8004ca8:	e0b3      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004caa:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004cac:	60bb      	str	r3, [r7, #8]
      break;
 8004cae:	e0b0      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb0:	4b5a      	ldr	r3, [pc, #360]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cba:	4b58      	ldr	r3, [pc, #352]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d04a      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc6:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	f04f 0400 	mov.w	r4, #0
 8004cd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	ea03 0501 	and.w	r5, r3, r1
 8004cdc:	ea04 0602 	and.w	r6, r4, r2
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4632      	mov	r2, r6
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	f04f 0400 	mov.w	r4, #0
 8004cec:	0154      	lsls	r4, r2, #5
 8004cee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cf2:	014b      	lsls	r3, r1, #5
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	1b49      	subs	r1, r1, r5
 8004cfa:	eb62 0206 	sbc.w	r2, r2, r6
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	0194      	lsls	r4, r2, #6
 8004d08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d0c:	018b      	lsls	r3, r1, #6
 8004d0e:	1a5b      	subs	r3, r3, r1
 8004d10:	eb64 0402 	sbc.w	r4, r4, r2
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	00e2      	lsls	r2, r4, #3
 8004d1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d22:	00d9      	lsls	r1, r3, #3
 8004d24:	460b      	mov	r3, r1
 8004d26:	4614      	mov	r4, r2
 8004d28:	195b      	adds	r3, r3, r5
 8004d2a:	eb44 0406 	adc.w	r4, r4, r6
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	0262      	lsls	r2, r4, #9
 8004d38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d3c:	0259      	lsls	r1, r3, #9
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4614      	mov	r4, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	4621      	mov	r1, r4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f04f 0400 	mov.w	r4, #0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4623      	mov	r3, r4
 8004d50:	f7fb fa8e 	bl	8000270 <__aeabi_uldivmod>
 8004d54:	4603      	mov	r3, r0
 8004d56:	460c      	mov	r4, r1
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e049      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	f04f 0400 	mov.w	r4, #0
 8004d66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	ea03 0501 	and.w	r5, r3, r1
 8004d72:	ea04 0602 	and.w	r6, r4, r2
 8004d76:	4629      	mov	r1, r5
 8004d78:	4632      	mov	r2, r6
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	0154      	lsls	r4, r2, #5
 8004d84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d88:	014b      	lsls	r3, r1, #5
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	1b49      	subs	r1, r1, r5
 8004d90:	eb62 0206 	sbc.w	r2, r2, r6
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	f04f 0400 	mov.w	r4, #0
 8004d9c:	0194      	lsls	r4, r2, #6
 8004d9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	1a5b      	subs	r3, r3, r1
 8004da6:	eb64 0402 	sbc.w	r4, r4, r2
 8004daa:	f04f 0100 	mov.w	r1, #0
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004db8:	00d9      	lsls	r1, r3, #3
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4614      	mov	r4, r2
 8004dbe:	195b      	adds	r3, r3, r5
 8004dc0:	eb44 0406 	adc.w	r4, r4, r6
 8004dc4:	f04f 0100 	mov.w	r1, #0
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	02a2      	lsls	r2, r4, #10
 8004dce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004dd2:	0299      	lsls	r1, r3, #10
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4614      	mov	r4, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	4621      	mov	r1, r4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f04f 0400 	mov.w	r4, #0
 8004de2:	461a      	mov	r2, r3
 8004de4:	4623      	mov	r3, r4
 8004de6:	f7fb fa43 	bl	8000270 <__aeabi_uldivmod>
 8004dea:	4603      	mov	r3, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	60bb      	str	r3, [r7, #8]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e0e:	60bb      	str	r3, [r7, #8]
      break;
 8004e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e12:	68bb      	ldr	r3, [r7, #8]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	007a1200 	.word	0x007a1200

08004e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000000 	.word	0x20000000

08004e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e44:	f7ff fff0 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e48:	4601      	mov	r1, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4a03      	ldr	r2, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e56:	5cd3      	ldrb	r3, [r2, r3]
 8004e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800a5ec 	.word	0x0800a5ec

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e6c:	f7ff ffdc 	bl	8004e28 <HAL_RCC_GetHCLKFreq>
 8004e70:	4601      	mov	r1, r0
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0b5b      	lsrs	r3, r3, #13
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4a03      	ldr	r2, [pc, #12]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e7e:	5cd3      	ldrb	r3, [r2, r3]
 8004e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	0800a5ec 	.word	0x0800a5ec

08004e90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d035      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eb8:	4b62      	ldr	r3, [pc, #392]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ebe:	f7fc f9c9 	bl	8001254 <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ec6:	f7fc f9c5 	bl	8001254 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0b0      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ed8:	4b5b      	ldr	r3, [pc, #364]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	019a      	lsls	r2, r3, #6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	071b      	lsls	r3, r3, #28
 8004ef0:	4955      	ldr	r1, [pc, #340]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ef8:	4b52      	ldr	r3, [pc, #328]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004efe:	f7fc f9a9 	bl	8001254 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f06:	f7fc f9a5 	bl	8001254 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e090      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f18:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8083 	beq.w	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	4b44      	ldr	r3, [pc, #272]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	4a43      	ldr	r2, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f40:	6413      	str	r3, [r2, #64]	; 0x40
 8004f42:	4b41      	ldr	r3, [pc, #260]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3e      	ldr	r2, [pc, #248]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5a:	f7fc f97b 	bl	8001254 <HAL_GetTick>
 8004f5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fc f977 	bl	8001254 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e062      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f74:	4b35      	ldr	r3, [pc, #212]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f80:	4b31      	ldr	r3, [pc, #196]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02f      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d028      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f9e:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fa8:	4b29      	ldr	r3, [pc, #164]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fae:	4b28      	ldr	r3, [pc, #160]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fb4:	4a24      	ldr	r2, [pc, #144]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d114      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fc f945 	bl	8001254 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fcc:	e00a      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fce:	f7fc f941 	bl	8001254 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e02a      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	4b18      	ldr	r3, [pc, #96]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ee      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffc:	d10d      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	490d      	ldr	r1, [pc, #52]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]
 8005018:	e005      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005020:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005024:	6093      	str	r3, [r2, #8]
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005028:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005032:	4905      	ldr	r1, [pc, #20]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005034:	4313      	orrs	r3, r2
 8005036:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	42470068 	.word	0x42470068
 8005048:	40023800 	.word	0x40023800
 800504c:	40007000 	.word	0x40007000
 8005050:	42470e40 	.word	0x42470e40

08005054 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d13d      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005072:	4b22      	ldr	r3, [pc, #136]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800507a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005082:	2b01      	cmp	r3, #1
 8005084:	d12f      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005086:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005088:	617b      	str	r3, [r7, #20]
          break;
 800508a:	e02f      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005098:	d108      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a2:	4a18      	ldr	r2, [pc, #96]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	e007      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	4a14      	ldr	r2, [pc, #80]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c2:	099b      	lsrs	r3, r3, #6
 80050c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d6:	0f1b      	lsrs	r3, r3, #28
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	617b      	str	r3, [r7, #20]
          break;
 80050e4:	e002      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
          break;
 80050ea:	bf00      	nop
        }
      }
      break;
 80050ec:	bf00      	nop
    }
  }
  return frequency;
 80050ee:	697b      	ldr	r3, [r7, #20]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40023800 	.word	0x40023800
 8005100:	00bb8000 	.word	0x00bb8000
 8005104:	007a1200 	.word	0x007a1200
 8005108:	00f42400 	.word	0x00f42400

0800510c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e056      	b.n	80051cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fb fdd9 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005154:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	ea42 0103 	orr.w	r1, r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	0c1b      	lsrs	r3, r3, #16
 800519c:	f003 0104 	and.w	r1, r3, #4
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01d      	b.n	8005222 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fb ff06 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 f93a 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d122      	bne.n	8005286 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d11b      	bne.n	8005286 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0202 	mvn.w	r2, #2
 8005256:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8ee 	bl	800544e <HAL_TIM_IC_CaptureCallback>
 8005272:	e005      	b.n	8005280 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8e0 	bl	800543a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f8f1 	bl	8005462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d122      	bne.n	80052da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d11b      	bne.n	80052da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0204 	mvn.w	r2, #4
 80052aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8c4 	bl	800544e <HAL_TIM_IC_CaptureCallback>
 80052c6:	e005      	b.n	80052d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f8b6 	bl	800543a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8c7 	bl	8005462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d122      	bne.n	800532e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d11b      	bne.n	800532e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0208 	mvn.w	r2, #8
 80052fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2204      	movs	r2, #4
 8005304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f89a 	bl	800544e <HAL_TIM_IC_CaptureCallback>
 800531a:	e005      	b.n	8005328 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f88c 	bl	800543a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f89d 	bl	8005462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d122      	bne.n	8005382 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d11b      	bne.n	8005382 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f06f 0210 	mvn.w	r2, #16
 8005352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2208      	movs	r2, #8
 8005358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f870 	bl	800544e <HAL_TIM_IC_CaptureCallback>
 800536e:	e005      	b.n	800537c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f862 	bl	800543a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f873 	bl	8005462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d10e      	bne.n	80053ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0201 	mvn.w	r2, #1
 80053a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fb fc4d 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b8:	2b80      	cmp	r3, #128	; 0x80
 80053ba:	d10e      	bne.n	80053da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c6:	2b80      	cmp	r3, #128	; 0x80
 80053c8:	d107      	bne.n	80053da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f97f 	bl	80056d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d10e      	bne.n	8005406 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b40      	cmp	r3, #64	; 0x40
 80053f4:	d107      	bne.n	8005406 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f838 	bl	8005476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b20      	cmp	r3, #32
 8005412:	d10e      	bne.n	8005432 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b20      	cmp	r3, #32
 8005420:	d107      	bne.n	8005432 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f06f 0220 	mvn.w	r2, #32
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f949 	bl	80056c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a40      	ldr	r2, [pc, #256]	; (80055a0 <TIM_Base_SetConfig+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d013      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d00f      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a3d      	ldr	r2, [pc, #244]	; (80055a4 <TIM_Base_SetConfig+0x118>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3c      	ldr	r2, [pc, #240]	; (80055a8 <TIM_Base_SetConfig+0x11c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3b      	ldr	r2, [pc, #236]	; (80055ac <TIM_Base_SetConfig+0x120>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <TIM_Base_SetConfig+0x124>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d108      	bne.n	80054de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2f      	ldr	r2, [pc, #188]	; (80055a0 <TIM_Base_SetConfig+0x114>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d02b      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ec:	d027      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2c      	ldr	r2, [pc, #176]	; (80055a4 <TIM_Base_SetConfig+0x118>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d023      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <TIM_Base_SetConfig+0x11c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01f      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <TIM_Base_SetConfig+0x120>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01b      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a29      	ldr	r2, [pc, #164]	; (80055b0 <TIM_Base_SetConfig+0x124>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d017      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a28      	ldr	r2, [pc, #160]	; (80055b4 <TIM_Base_SetConfig+0x128>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a27      	ldr	r2, [pc, #156]	; (80055b8 <TIM_Base_SetConfig+0x12c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a26      	ldr	r2, [pc, #152]	; (80055bc <TIM_Base_SetConfig+0x130>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a25      	ldr	r2, [pc, #148]	; (80055c0 <TIM_Base_SetConfig+0x134>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a24      	ldr	r2, [pc, #144]	; (80055c4 <TIM_Base_SetConfig+0x138>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <TIM_Base_SetConfig+0x13c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <TIM_Base_SetConfig+0x114>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0xf8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a0c      	ldr	r2, [pc, #48]	; (80055b0 <TIM_Base_SetConfig+0x124>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d103      	bne.n	800558c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	615a      	str	r2, [r3, #20]
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40000400 	.word	0x40000400
 80055a8:	40000800 	.word	0x40000800
 80055ac:	40000c00 	.word	0x40000c00
 80055b0:	40010400 	.word	0x40010400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800
 80055c0:	40001800 	.word	0x40001800
 80055c4:	40001c00 	.word	0x40001c00
 80055c8:	40002000 	.word	0x40002000

080055cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e05a      	b.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a21      	ldr	r2, [pc, #132]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d022      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d01d      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d018      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a17      	ldr	r2, [pc, #92]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d10c      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4313      	orrs	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40000400 	.word	0x40000400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40000c00 	.word	0x40000c00
 80056b8:	40010400 	.word	0x40010400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40001800 	.word	0x40001800

080056c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e03f      	b.n	800577e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb fcc6 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800572e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fb4b 	bl	8005dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b088      	sub	sp, #32
 800578a:	af02      	add	r7, sp, #8
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	f040 8083 	bne.w	80058ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_UART_Transmit+0x2e>
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e07b      	b.n	80058b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Transmit+0x40>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e074      	b.n	80058b0 <HAL_UART_Transmit+0x12a>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2221      	movs	r2, #33	; 0x21
 80057d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057dc:	f7fb fd3a 	bl	8001254 <HAL_GetTick>
 80057e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80057f6:	e042      	b.n	800587e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	d122      	bne.n	8005856 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2200      	movs	r2, #0
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f96a 	bl	8005af4 <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e042      	b.n	80058b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3302      	adds	r3, #2
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	e017      	b.n	800587e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3301      	adds	r3, #1
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	e013      	b.n	800587e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f947 	bl	8005af4 <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e01f      	b.n	80058b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	60ba      	str	r2, [r7, #8]
 8005876:	781a      	ldrb	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1b7      	bne.n	80057f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f92e 	bl	8005af4 <UART_WaitOnFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e006      	b.n	80058b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_UART_IRQHandler+0x52>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9e0 	bl	8005cc8 <UART_Receive_IT>
      return;
 8005908:	e0d1      	b.n	8005aae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80b0 	beq.w	8005a72 <HAL_UART_IRQHandler+0x1ba>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <HAL_UART_IRQHandler+0x70>
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80a5 	beq.w	8005a72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_UART_IRQHandler+0x90>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_UART_IRQHandler+0xb0>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005960:	f043 0202 	orr.w	r2, r3, #2
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_UART_IRQHandler+0xd0>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	f043 0204 	orr.w	r2, r3, #4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00f      	beq.n	80059b2 <HAL_UART_IRQHandler+0xfa>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_UART_IRQHandler+0xee>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	f043 0208 	orr.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d078      	beq.n	8005aac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_UART_IRQHandler+0x11c>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f97a 	bl	8005cc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <HAL_UART_IRQHandler+0x144>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d031      	beq.n	8005a60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8c3 	bl	8005b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d123      	bne.n	8005a58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d013      	beq.n	8005a50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <HAL_UART_IRQHandler+0x1fc>)
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fc f906 	bl	8001c46 <HAL_DMA_Abort_IT>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d016      	beq.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	e00e      	b.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f845 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a56:	e00a      	b.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f841 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5e:	e006      	b.n	8005a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f83d 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a6c:	e01e      	b.n	8005aac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6e:	bf00      	nop
    return;
 8005a70:	e01c      	b.n	8005aac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1d6>
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8b0 	bl	8005bec <UART_Transmit_IT>
    return;
 8005a8c:	e00f      	b.n	8005aae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_UART_IRQHandler+0x1f6>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8f8 	bl	8005c98 <UART_EndTransmit_IT>
    return;
 8005aa8:	bf00      	nop
 8005aaa:	e000      	b.n	8005aae <HAL_UART_IRQHandler+0x1f6>
    return;
 8005aac:	bf00      	nop
  }
}
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08005bc5 	.word	0x08005bc5

08005ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b04:	e02c      	b.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d028      	beq.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b14:	f7fb fb9e 	bl	8001254 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d21d      	bcs.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e00f      	b.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d0c3      	beq.n	8005b06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b9e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695a      	ldr	r2, [r3, #20]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff ff7e 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b21      	cmp	r3, #33	; 0x21
 8005bfe:	d144      	bne.n	8005c8a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d11a      	bne.n	8005c40 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c1e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]
 8005c32:	e00e      	b.n	8005c52 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]
 8005c3e:	e008      	b.n	8005c52 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	1c59      	adds	r1, r3, #1
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6211      	str	r1, [r2, #32]
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10f      	bne.n	8005c86 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fefd 	bl	8005ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b22      	cmp	r3, #34	; 0x22
 8005cda:	d171      	bne.n	8005dc0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce4:	d123      	bne.n	8005d2e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10e      	bne.n	8005d12 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d10:	e029      	b.n	8005d66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d2c:	e01b      	b.n	8005d66 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6858      	ldr	r0, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	1c59      	adds	r1, r3, #1
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6291      	str	r1, [r2, #40]	; 0x28
 8005d46:	b2c2      	uxtb	r2, r0
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	e00c      	b.n	8005d66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	1c58      	adds	r0, r3, #1
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	6288      	str	r0, [r1, #40]	; 0x28
 8005d5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4619      	mov	r1, r3
 8005d74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d120      	bne.n	8005dbc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0220 	bic.w	r2, r2, #32
 8005d88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff fe8a 	bl	8005acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e002      	b.n	8005dc2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e000      	b.n	8005dc2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005dc0:	2302      	movs	r3, #2
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e0e:	f023 030c 	bic.w	r3, r3, #12
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	f040 818b 	bne.w	8006154 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4ac1      	ldr	r2, [pc, #772]	; (8006148 <UART_SetConfig+0x37c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d005      	beq.n	8005e54 <UART_SetConfig+0x88>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4abf      	ldr	r2, [pc, #764]	; (800614c <UART_SetConfig+0x380>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	f040 80bd 	bne.w	8005fce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e54:	f7ff f808 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8005e58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	461d      	mov	r5, r3
 8005e5e:	f04f 0600 	mov.w	r6, #0
 8005e62:	46a8      	mov	r8, r5
 8005e64:	46b1      	mov	r9, r6
 8005e66:	eb18 0308 	adds.w	r3, r8, r8
 8005e6a:	eb49 0409 	adc.w	r4, r9, r9
 8005e6e:	4698      	mov	r8, r3
 8005e70:	46a1      	mov	r9, r4
 8005e72:	eb18 0805 	adds.w	r8, r8, r5
 8005e76:	eb49 0906 	adc.w	r9, r9, r6
 8005e7a:	f04f 0100 	mov.w	r1, #0
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e8e:	4688      	mov	r8, r1
 8005e90:	4691      	mov	r9, r2
 8005e92:	eb18 0005 	adds.w	r0, r8, r5
 8005e96:	eb49 0106 	adc.w	r1, r9, r6
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	f04f 0600 	mov.w	r6, #0
 8005ea4:	196b      	adds	r3, r5, r5
 8005ea6:	eb46 0406 	adc.w	r4, r6, r6
 8005eaa:	461a      	mov	r2, r3
 8005eac:	4623      	mov	r3, r4
 8005eae:	f7fa f9df 	bl	8000270 <__aeabi_uldivmod>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4ba5      	ldr	r3, [pc, #660]	; (8006150 <UART_SetConfig+0x384>)
 8005eba:	fba3 2302 	umull	r2, r3, r3, r2
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	f04f 0600 	mov.w	r6, #0
 8005ecc:	46a9      	mov	r9, r5
 8005ece:	46b2      	mov	sl, r6
 8005ed0:	eb19 0309 	adds.w	r3, r9, r9
 8005ed4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed8:	4699      	mov	r9, r3
 8005eda:	46a2      	mov	sl, r4
 8005edc:	eb19 0905 	adds.w	r9, r9, r5
 8005ee0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef8:	4689      	mov	r9, r1
 8005efa:	4692      	mov	sl, r2
 8005efc:	eb19 0005 	adds.w	r0, r9, r5
 8005f00:	eb4a 0106 	adc.w	r1, sl, r6
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	461d      	mov	r5, r3
 8005f0a:	f04f 0600 	mov.w	r6, #0
 8005f0e:	196b      	adds	r3, r5, r5
 8005f10:	eb46 0406 	adc.w	r4, r6, r6
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	f7fa f9aa 	bl	8000270 <__aeabi_uldivmod>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	461a      	mov	r2, r3
 8005f22:	4b8b      	ldr	r3, [pc, #556]	; (8006150 <UART_SetConfig+0x384>)
 8005f24:	fba3 1302 	umull	r1, r3, r3, r2
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	2164      	movs	r1, #100	; 0x64
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	3332      	adds	r3, #50	; 0x32
 8005f36:	4a86      	ldr	r2, [pc, #536]	; (8006150 <UART_SetConfig+0x384>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f44:	4498      	add	r8, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	461d      	mov	r5, r3
 8005f4a:	f04f 0600 	mov.w	r6, #0
 8005f4e:	46a9      	mov	r9, r5
 8005f50:	46b2      	mov	sl, r6
 8005f52:	eb19 0309 	adds.w	r3, r9, r9
 8005f56:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5a:	4699      	mov	r9, r3
 8005f5c:	46a2      	mov	sl, r4
 8005f5e:	eb19 0905 	adds.w	r9, r9, r5
 8005f62:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7a:	4689      	mov	r9, r1
 8005f7c:	4692      	mov	sl, r2
 8005f7e:	eb19 0005 	adds.w	r0, r9, r5
 8005f82:	eb4a 0106 	adc.w	r1, sl, r6
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	f04f 0600 	mov.w	r6, #0
 8005f90:	196b      	adds	r3, r5, r5
 8005f92:	eb46 0406 	adc.w	r4, r6, r6
 8005f96:	461a      	mov	r2, r3
 8005f98:	4623      	mov	r3, r4
 8005f9a:	f7fa f969 	bl	8000270 <__aeabi_uldivmod>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <UART_SetConfig+0x384>)
 8005fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2164      	movs	r1, #100	; 0x64
 8005fae:	fb01 f303 	mul.w	r3, r1, r3
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	3332      	adds	r3, #50	; 0x32
 8005fb8:	4a65      	ldr	r2, [pc, #404]	; (8006150 <UART_SetConfig+0x384>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f003 0207 	and.w	r2, r3, #7
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4442      	add	r2, r8
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e26f      	b.n	80064ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fce:	f7fe ff37 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8005fd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	461d      	mov	r5, r3
 8005fd8:	f04f 0600 	mov.w	r6, #0
 8005fdc:	46a8      	mov	r8, r5
 8005fde:	46b1      	mov	r9, r6
 8005fe0:	eb18 0308 	adds.w	r3, r8, r8
 8005fe4:	eb49 0409 	adc.w	r4, r9, r9
 8005fe8:	4698      	mov	r8, r3
 8005fea:	46a1      	mov	r9, r4
 8005fec:	eb18 0805 	adds.w	r8, r8, r5
 8005ff0:	eb49 0906 	adc.w	r9, r9, r6
 8005ff4:	f04f 0100 	mov.w	r1, #0
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006000:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006004:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006008:	4688      	mov	r8, r1
 800600a:	4691      	mov	r9, r2
 800600c:	eb18 0005 	adds.w	r0, r8, r5
 8006010:	eb49 0106 	adc.w	r1, r9, r6
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	461d      	mov	r5, r3
 800601a:	f04f 0600 	mov.w	r6, #0
 800601e:	196b      	adds	r3, r5, r5
 8006020:	eb46 0406 	adc.w	r4, r6, r6
 8006024:	461a      	mov	r2, r3
 8006026:	4623      	mov	r3, r4
 8006028:	f7fa f922 	bl	8000270 <__aeabi_uldivmod>
 800602c:	4603      	mov	r3, r0
 800602e:	460c      	mov	r4, r1
 8006030:	461a      	mov	r2, r3
 8006032:	4b47      	ldr	r3, [pc, #284]	; (8006150 <UART_SetConfig+0x384>)
 8006034:	fba3 2302 	umull	r2, r3, r3, r2
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	461d      	mov	r5, r3
 8006042:	f04f 0600 	mov.w	r6, #0
 8006046:	46a9      	mov	r9, r5
 8006048:	46b2      	mov	sl, r6
 800604a:	eb19 0309 	adds.w	r3, r9, r9
 800604e:	eb4a 040a 	adc.w	r4, sl, sl
 8006052:	4699      	mov	r9, r3
 8006054:	46a2      	mov	sl, r4
 8006056:	eb19 0905 	adds.w	r9, r9, r5
 800605a:	eb4a 0a06 	adc.w	sl, sl, r6
 800605e:	f04f 0100 	mov.w	r1, #0
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800606a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800606e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006072:	4689      	mov	r9, r1
 8006074:	4692      	mov	sl, r2
 8006076:	eb19 0005 	adds.w	r0, r9, r5
 800607a:	eb4a 0106 	adc.w	r1, sl, r6
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	461d      	mov	r5, r3
 8006084:	f04f 0600 	mov.w	r6, #0
 8006088:	196b      	adds	r3, r5, r5
 800608a:	eb46 0406 	adc.w	r4, r6, r6
 800608e:	461a      	mov	r2, r3
 8006090:	4623      	mov	r3, r4
 8006092:	f7fa f8ed 	bl	8000270 <__aeabi_uldivmod>
 8006096:	4603      	mov	r3, r0
 8006098:	460c      	mov	r4, r1
 800609a:	461a      	mov	r2, r3
 800609c:	4b2c      	ldr	r3, [pc, #176]	; (8006150 <UART_SetConfig+0x384>)
 800609e:	fba3 1302 	umull	r1, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2164      	movs	r1, #100	; 0x64
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	3332      	adds	r3, #50	; 0x32
 80060b0:	4a27      	ldr	r2, [pc, #156]	; (8006150 <UART_SetConfig+0x384>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060be:	4498      	add	r8, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	461d      	mov	r5, r3
 80060c4:	f04f 0600 	mov.w	r6, #0
 80060c8:	46a9      	mov	r9, r5
 80060ca:	46b2      	mov	sl, r6
 80060cc:	eb19 0309 	adds.w	r3, r9, r9
 80060d0:	eb4a 040a 	adc.w	r4, sl, sl
 80060d4:	4699      	mov	r9, r3
 80060d6:	46a2      	mov	sl, r4
 80060d8:	eb19 0905 	adds.w	r9, r9, r5
 80060dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80060e0:	f04f 0100 	mov.w	r1, #0
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060f4:	4689      	mov	r9, r1
 80060f6:	4692      	mov	sl, r2
 80060f8:	eb19 0005 	adds.w	r0, r9, r5
 80060fc:	eb4a 0106 	adc.w	r1, sl, r6
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	461d      	mov	r5, r3
 8006106:	f04f 0600 	mov.w	r6, #0
 800610a:	196b      	adds	r3, r5, r5
 800610c:	eb46 0406 	adc.w	r4, r6, r6
 8006110:	461a      	mov	r2, r3
 8006112:	4623      	mov	r3, r4
 8006114:	f7fa f8ac 	bl	8000270 <__aeabi_uldivmod>
 8006118:	4603      	mov	r3, r0
 800611a:	460c      	mov	r4, r1
 800611c:	461a      	mov	r2, r3
 800611e:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <UART_SetConfig+0x384>)
 8006120:	fba3 1302 	umull	r1, r3, r3, r2
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	2164      	movs	r1, #100	; 0x64
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	3332      	adds	r3, #50	; 0x32
 8006132:	4a07      	ldr	r2, [pc, #28]	; (8006150 <UART_SetConfig+0x384>)
 8006134:	fba2 2303 	umull	r2, r3, r2, r3
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	f003 0207 	and.w	r2, r3, #7
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4442      	add	r2, r8
 8006144:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006146:	e1b2      	b.n	80064ae <UART_SetConfig+0x6e2>
 8006148:	40011000 	.word	0x40011000
 800614c:	40011400 	.word	0x40011400
 8006150:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4ad7      	ldr	r2, [pc, #860]	; (80064b8 <UART_SetConfig+0x6ec>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d005      	beq.n	800616a <UART_SetConfig+0x39e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4ad6      	ldr	r2, [pc, #856]	; (80064bc <UART_SetConfig+0x6f0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	f040 80d1 	bne.w	800630c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800616a:	f7fe fe7d 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 800616e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	469a      	mov	sl, r3
 8006174:	f04f 0b00 	mov.w	fp, #0
 8006178:	46d0      	mov	r8, sl
 800617a:	46d9      	mov	r9, fp
 800617c:	eb18 0308 	adds.w	r3, r8, r8
 8006180:	eb49 0409 	adc.w	r4, r9, r9
 8006184:	4698      	mov	r8, r3
 8006186:	46a1      	mov	r9, r4
 8006188:	eb18 080a 	adds.w	r8, r8, sl
 800618c:	eb49 090b 	adc.w	r9, r9, fp
 8006190:	f04f 0100 	mov.w	r1, #0
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800619c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061a4:	4688      	mov	r8, r1
 80061a6:	4691      	mov	r9, r2
 80061a8:	eb1a 0508 	adds.w	r5, sl, r8
 80061ac:	eb4b 0609 	adc.w	r6, fp, r9
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	f04f 0400 	mov.w	r4, #0
 80061c2:	0094      	lsls	r4, r2, #2
 80061c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061c8:	008b      	lsls	r3, r1, #2
 80061ca:	461a      	mov	r2, r3
 80061cc:	4623      	mov	r3, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	4631      	mov	r1, r6
 80061d2:	f7fa f84d 	bl	8000270 <__aeabi_uldivmod>
 80061d6:	4603      	mov	r3, r0
 80061d8:	460c      	mov	r4, r1
 80061da:	461a      	mov	r2, r3
 80061dc:	4bb8      	ldr	r3, [pc, #736]	; (80064c0 <UART_SetConfig+0x6f4>)
 80061de:	fba3 2302 	umull	r2, r3, r3, r2
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	469b      	mov	fp, r3
 80061ec:	f04f 0c00 	mov.w	ip, #0
 80061f0:	46d9      	mov	r9, fp
 80061f2:	46e2      	mov	sl, ip
 80061f4:	eb19 0309 	adds.w	r3, r9, r9
 80061f8:	eb4a 040a 	adc.w	r4, sl, sl
 80061fc:	4699      	mov	r9, r3
 80061fe:	46a2      	mov	sl, r4
 8006200:	eb19 090b 	adds.w	r9, r9, fp
 8006204:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006208:	f04f 0100 	mov.w	r1, #0
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006214:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006218:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800621c:	4689      	mov	r9, r1
 800621e:	4692      	mov	sl, r2
 8006220:	eb1b 0509 	adds.w	r5, fp, r9
 8006224:	eb4c 060a 	adc.w	r6, ip, sl
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	4619      	mov	r1, r3
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	f04f 0400 	mov.w	r4, #0
 800623a:	0094      	lsls	r4, r2, #2
 800623c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006240:	008b      	lsls	r3, r1, #2
 8006242:	461a      	mov	r2, r3
 8006244:	4623      	mov	r3, r4
 8006246:	4628      	mov	r0, r5
 8006248:	4631      	mov	r1, r6
 800624a:	f7fa f811 	bl	8000270 <__aeabi_uldivmod>
 800624e:	4603      	mov	r3, r0
 8006250:	460c      	mov	r4, r1
 8006252:	461a      	mov	r2, r3
 8006254:	4b9a      	ldr	r3, [pc, #616]	; (80064c0 <UART_SetConfig+0x6f4>)
 8006256:	fba3 1302 	umull	r1, r3, r3, r2
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2164      	movs	r1, #100	; 0x64
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	3332      	adds	r3, #50	; 0x32
 8006268:	4a95      	ldr	r2, [pc, #596]	; (80064c0 <UART_SetConfig+0x6f4>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006274:	4498      	add	r8, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	469b      	mov	fp, r3
 800627a:	f04f 0c00 	mov.w	ip, #0
 800627e:	46d9      	mov	r9, fp
 8006280:	46e2      	mov	sl, ip
 8006282:	eb19 0309 	adds.w	r3, r9, r9
 8006286:	eb4a 040a 	adc.w	r4, sl, sl
 800628a:	4699      	mov	r9, r3
 800628c:	46a2      	mov	sl, r4
 800628e:	eb19 090b 	adds.w	r9, r9, fp
 8006292:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006296:	f04f 0100 	mov.w	r1, #0
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062aa:	4689      	mov	r9, r1
 80062ac:	4692      	mov	sl, r2
 80062ae:	eb1b 0509 	adds.w	r5, fp, r9
 80062b2:	eb4c 060a 	adc.w	r6, ip, sl
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4619      	mov	r1, r3
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	f04f 0400 	mov.w	r4, #0
 80062c8:	0094      	lsls	r4, r2, #2
 80062ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062ce:	008b      	lsls	r3, r1, #2
 80062d0:	461a      	mov	r2, r3
 80062d2:	4623      	mov	r3, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	4631      	mov	r1, r6
 80062d8:	f7f9 ffca 	bl	8000270 <__aeabi_uldivmod>
 80062dc:	4603      	mov	r3, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b77      	ldr	r3, [pc, #476]	; (80064c0 <UART_SetConfig+0x6f4>)
 80062e4:	fba3 1302 	umull	r1, r3, r3, r2
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	2164      	movs	r1, #100	; 0x64
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	3332      	adds	r3, #50	; 0x32
 80062f6:	4a72      	ldr	r2, [pc, #456]	; (80064c0 <UART_SetConfig+0x6f4>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	f003 020f 	and.w	r2, r3, #15
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4442      	add	r2, r8
 8006308:	609a      	str	r2, [r3, #8]
 800630a:	e0d0      	b.n	80064ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800630c:	f7fe fd98 	bl	8004e40 <HAL_RCC_GetPCLK1Freq>
 8006310:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	469a      	mov	sl, r3
 8006316:	f04f 0b00 	mov.w	fp, #0
 800631a:	46d0      	mov	r8, sl
 800631c:	46d9      	mov	r9, fp
 800631e:	eb18 0308 	adds.w	r3, r8, r8
 8006322:	eb49 0409 	adc.w	r4, r9, r9
 8006326:	4698      	mov	r8, r3
 8006328:	46a1      	mov	r9, r4
 800632a:	eb18 080a 	adds.w	r8, r8, sl
 800632e:	eb49 090b 	adc.w	r9, r9, fp
 8006332:	f04f 0100 	mov.w	r1, #0
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800633e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006342:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006346:	4688      	mov	r8, r1
 8006348:	4691      	mov	r9, r2
 800634a:	eb1a 0508 	adds.w	r5, sl, r8
 800634e:	eb4b 0609 	adc.w	r6, fp, r9
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	4619      	mov	r1, r3
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	f04f 0400 	mov.w	r4, #0
 8006364:	0094      	lsls	r4, r2, #2
 8006366:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800636a:	008b      	lsls	r3, r1, #2
 800636c:	461a      	mov	r2, r3
 800636e:	4623      	mov	r3, r4
 8006370:	4628      	mov	r0, r5
 8006372:	4631      	mov	r1, r6
 8006374:	f7f9 ff7c 	bl	8000270 <__aeabi_uldivmod>
 8006378:	4603      	mov	r3, r0
 800637a:	460c      	mov	r4, r1
 800637c:	461a      	mov	r2, r3
 800637e:	4b50      	ldr	r3, [pc, #320]	; (80064c0 <UART_SetConfig+0x6f4>)
 8006380:	fba3 2302 	umull	r2, r3, r3, r2
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	469b      	mov	fp, r3
 800638e:	f04f 0c00 	mov.w	ip, #0
 8006392:	46d9      	mov	r9, fp
 8006394:	46e2      	mov	sl, ip
 8006396:	eb19 0309 	adds.w	r3, r9, r9
 800639a:	eb4a 040a 	adc.w	r4, sl, sl
 800639e:	4699      	mov	r9, r3
 80063a0:	46a2      	mov	sl, r4
 80063a2:	eb19 090b 	adds.w	r9, r9, fp
 80063a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063be:	4689      	mov	r9, r1
 80063c0:	4692      	mov	sl, r2
 80063c2:	eb1b 0509 	adds.w	r5, fp, r9
 80063c6:	eb4c 060a 	adc.w	r6, ip, sl
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4619      	mov	r1, r3
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	f04f 0400 	mov.w	r4, #0
 80063dc:	0094      	lsls	r4, r2, #2
 80063de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	461a      	mov	r2, r3
 80063e6:	4623      	mov	r3, r4
 80063e8:	4628      	mov	r0, r5
 80063ea:	4631      	mov	r1, r6
 80063ec:	f7f9 ff40 	bl	8000270 <__aeabi_uldivmod>
 80063f0:	4603      	mov	r3, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <UART_SetConfig+0x6f4>)
 80063f8:	fba3 1302 	umull	r1, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	2164      	movs	r1, #100	; 0x64
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	3332      	adds	r3, #50	; 0x32
 800640a:	4a2d      	ldr	r2, [pc, #180]	; (80064c0 <UART_SetConfig+0x6f4>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006416:	4498      	add	r8, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	469b      	mov	fp, r3
 800641c:	f04f 0c00 	mov.w	ip, #0
 8006420:	46d9      	mov	r9, fp
 8006422:	46e2      	mov	sl, ip
 8006424:	eb19 0309 	adds.w	r3, r9, r9
 8006428:	eb4a 040a 	adc.w	r4, sl, sl
 800642c:	4699      	mov	r9, r3
 800642e:	46a2      	mov	sl, r4
 8006430:	eb19 090b 	adds.w	r9, r9, fp
 8006434:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006438:	f04f 0100 	mov.w	r1, #0
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006444:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006448:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800644c:	4689      	mov	r9, r1
 800644e:	4692      	mov	sl, r2
 8006450:	eb1b 0509 	adds.w	r5, fp, r9
 8006454:	eb4c 060a 	adc.w	r6, ip, sl
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4619      	mov	r1, r3
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	f04f 0400 	mov.w	r4, #0
 800646a:	0094      	lsls	r4, r2, #2
 800646c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006470:	008b      	lsls	r3, r1, #2
 8006472:	461a      	mov	r2, r3
 8006474:	4623      	mov	r3, r4
 8006476:	4628      	mov	r0, r5
 8006478:	4631      	mov	r1, r6
 800647a:	f7f9 fef9 	bl	8000270 <__aeabi_uldivmod>
 800647e:	4603      	mov	r3, r0
 8006480:	460c      	mov	r4, r1
 8006482:	461a      	mov	r2, r3
 8006484:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <UART_SetConfig+0x6f4>)
 8006486:	fba3 1302 	umull	r1, r3, r3, r2
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	2164      	movs	r1, #100	; 0x64
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	3332      	adds	r3, #50	; 0x32
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <UART_SetConfig+0x6f4>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	f003 020f 	and.w	r2, r3, #15
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4442      	add	r2, r8
 80064aa:	609a      	str	r2, [r3, #8]
}
 80064ac:	e7ff      	b.n	80064ae <UART_SetConfig+0x6e2>
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b8:	40011000 	.word	0x40011000
 80064bc:	40011400 	.word	0x40011400
 80064c0:	51eb851f 	.word	0x51eb851f

080064c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064c4:	b084      	sub	sp, #16
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	f107 001c 	add.w	r0, r7, #28
 80064d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d122      	bne.n	8006522 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d105      	bne.n	8006516 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f94a 	bl	80067b0 <USB_CoreReset>
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
 8006520:	e01a      	b.n	8006558 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f93e 	bl	80067b0 <USB_CoreReset>
 8006534:	4603      	mov	r3, r0
 8006536:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	639a      	str	r2, [r3, #56]	; 0x38
 800654a:	e005      	b.n	8006558 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	2b01      	cmp	r3, #1
 800655c:	d10b      	bne.n	8006576 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f043 0206 	orr.w	r2, r3, #6
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006582:	b004      	add	sp, #16
 8006584:	4770      	bx	lr

08006586 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f023 0201 	bic.w	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d106      	bne.n	80065f6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e00b      	b.n	800660e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	e001      	b.n	800660e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e003      	b.n	8006616 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800660e:	2032      	movs	r0, #50	; 0x32
 8006610:	f7fa fe2c 	bl	800126c <HAL_Delay>

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	019b      	lsls	r3, r3, #6
 8006632:	f043 0220 	orr.w	r2, r3, #32
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <USB_FlushTxFifo+0x48>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d901      	bls.n	800664c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e006      	b.n	800665a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b20      	cmp	r3, #32
 8006656:	d0f0      	beq.n	800663a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	00030d40 	.word	0x00030d40

0800666c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2210      	movs	r2, #16
 800667c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a09      	ldr	r2, [pc, #36]	; (80066ac <USB_FlushRxFifo+0x40>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e006      	b.n	800669e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b10      	cmp	r3, #16
 800669a:	d0f0      	beq.n	800667e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	00030d40 	.word	0x00030d40

080066b0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b089      	sub	sp, #36	; 0x24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4611      	mov	r1, r2
 80066bc:	461a      	mov	r2, r3
 80066be:	460b      	mov	r3, r1
 80066c0:	71fb      	strb	r3, [r7, #7]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80066ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11a      	bne.n	800670c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066d6:	88bb      	ldrh	r3, [r7, #4]
 80066d8:	3303      	adds	r3, #3
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066de:	2300      	movs	r3, #0
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e00f      	b.n	8006704 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	031a      	lsls	r2, r3, #12
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f0:	461a      	mov	r2, r3
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3304      	adds	r3, #4
 80066fc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	3301      	adds	r3, #1
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d3eb      	bcc.n	80066e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3724      	adds	r7, #36	; 0x24
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800671a:	b480      	push	{r7}
 800671c:	b089      	sub	sp, #36	; 0x24
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	3303      	adds	r3, #3
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	e00b      	b.n	8006756 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	601a      	str	r2, [r3, #0]
    pDest++;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3304      	adds	r3, #4
 800674e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	3301      	adds	r3, #1
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	d3ef      	bcc.n	800673e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800675e:	69fb      	ldr	r3, [r7, #28]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3724      	adds	r7, #36	; 0x24
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4013      	ands	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006784:	68fb      	ldr	r3, [r7, #12]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0301 	and.w	r3, r3, #1
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <USB_CoreReset+0x64>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e01b      	b.n	8006806 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	daf2      	bge.n	80067bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f043 0201 	orr.w	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a09      	ldr	r2, [pc, #36]	; (8006814 <USB_CoreReset+0x64>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e006      	b.n	8006806 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b01      	cmp	r3, #1
 8006802:	d0f0      	beq.n	80067e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	00030d40 	.word	0x00030d40

08006818 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006818:	b084      	sub	sp, #16
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	f107 001c 	add.w	r0, r7, #28
 8006826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d018      	beq.n	800689c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	2b01      	cmp	r3, #1
 800686e:	d10a      	bne.n	8006886 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800687e:	f043 0304 	orr.w	r3, r3, #4
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e014      	b.n	80068b0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006894:	f023 0304 	bic.w	r3, r3, #4
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e009      	b.n	80068b0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068aa:	f023 0304 	bic.w	r3, r3, #4
 80068ae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80068b0:	2110      	movs	r1, #16
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff feb4 	bl	8006620 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fed7 	bl	800666c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e015      	b.n	80068f0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d0:	461a      	mov	r2, r3
 80068d2:	f04f 33ff 	mov.w	r3, #4294967295
 80068d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d3e5      	bcc.n	80068c4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80068f8:	2101      	movs	r1, #1
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8ac 	bl	8006a58 <USB_DriveVbus>

  HAL_Delay(200U);
 8006900:	20c8      	movs	r0, #200	; 0xc8
 8006902:	f7fa fcb3 	bl	800126c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006926:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a14      	ldr	r2, [pc, #80]	; (800697c <USB_HostInit+0x164>)
 800692c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a13      	ldr	r2, [pc, #76]	; (8006980 <USB_HostInit+0x168>)
 8006932:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006936:	e009      	b.n	800694c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a10      	ldr	r2, [pc, #64]	; (8006984 <USB_HostInit+0x16c>)
 8006942:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a10      	ldr	r2, [pc, #64]	; (8006988 <USB_HostInit+0x170>)
 8006948:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f043 0210 	orr.w	r2, r3, #16
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	4b0a      	ldr	r3, [pc, #40]	; (800698c <USB_HostInit+0x174>)
 8006964:	4313      	orrs	r3, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006976:	b004      	add	sp, #16
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	01000200 	.word	0x01000200
 8006980:	00e00300 	.word	0x00e00300
 8006984:	00600080 	.word	0x00600080
 8006988:	004000e0 	.word	0x004000e0
 800698c:	a3200008 	.word	0xa3200008

08006990 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069ae:	f023 0303 	bic.w	r3, r3, #3
 80069b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d107      	bne.n	80069e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d8:	461a      	mov	r2, r3
 80069da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069de:	6053      	str	r3, [r2, #4]
 80069e0:	e009      	b.n	80069f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d106      	bne.n	80069f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ee:	461a      	mov	r2, r3
 80069f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80069f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a32:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a34:	2064      	movs	r0, #100	; 0x64
 8006a36:	f7fa fc19 	bl	800126c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a46:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a48:	200a      	movs	r0, #10
 8006a4a:	f7fa fc0f 	bl	800126c <HAL_Delay>

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d109      	bne.n	8006a9c <USB_DriveVbus+0x44>
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d106      	bne.n	8006a9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa6:	d109      	bne.n	8006abc <USB_DriveVbus+0x64>
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	0c5b      	lsrs	r3, r3, #17
 8006ae8:	f003 0303 	and.w	r3, r3, #3
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	b29b      	uxth	r3, r3
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	4608      	mov	r0, r1
 8006b26:	4611      	mov	r1, r2
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	70fb      	strb	r3, [r7, #3]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70bb      	strb	r3, [r7, #2]
 8006b32:	4613      	mov	r3, r2
 8006b34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d87e      	bhi.n	8006c58 <USB_HC_Init+0x13c>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <USB_HC_Init+0x44>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006c1b 	.word	0x08006c1b
 8006b68:	08006b71 	.word	0x08006b71
 8006b6c:	08006bdd 	.word	0x08006bdd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006b82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006b84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	da10      	bge.n	8006bae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	78fa      	ldrb	r2, [r7, #3]
 8006b9c:	0151      	lsls	r1, r2, #5
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	440a      	add	r2, r1
 8006ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006baa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006bac:	e057      	b.n	8006c5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d051      	beq.n	8006c5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	78fa      	ldrb	r2, [r7, #3]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bd8:	60d3      	str	r3, [r2, #12]
      break;
 8006bda:	e040      	b.n	8006c5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be8:	461a      	mov	r2, r3
 8006bea:	f240 639d 	movw	r3, #1693	; 0x69d
 8006bee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006bf0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	da34      	bge.n	8006c62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c18:	e023      	b.n	8006c62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	461a      	mov	r2, r3
 8006c28:	f240 2325 	movw	r3, #549	; 0x225
 8006c2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da17      	bge.n	8006c66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	78fa      	ldrb	r2, [r7, #3]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c56:	e006      	b.n	8006c66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	e004      	b.n	8006c68 <USB_HC_Init+0x14c>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <USB_HC_Init+0x14c>
      break;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <USB_HC_Init+0x14c>
      break;
 8006c66:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	2101      	movs	r1, #1
 8006c78:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c82:	4313      	orrs	r3, r2
 8006c84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006c92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da03      	bge.n	8006ca2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	e001      	b.n	8006ca6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006ca6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d103      	bne.n	8006cb6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e001      	b.n	8006cba <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cba:	787b      	ldrb	r3, [r7, #1]
 8006cbc:	059b      	lsls	r3, r3, #22
 8006cbe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cc2:	78bb      	ldrb	r3, [r7, #2]
 8006cc4:	02db      	lsls	r3, r3, #11
 8006cc6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ccc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006cd0:	049b      	lsls	r3, r3, #18
 8006cd2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cd6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cde:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	0159      	lsls	r1, r3, #5
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	440b      	add	r3, r1
 8006cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cf6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006cf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d10f      	bne.n	8006d20 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d1e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop

08006d30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	; 0x30
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d028      	beq.n	8006dac <USB_HC_StartXfer+0x7c>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	791b      	ldrb	r3, [r3, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d124      	bne.n	8006dac <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10b      	bne.n	8006d80 <USB_HC_StartXfer+0x50>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	795b      	ldrb	r3, [r3, #5]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d107      	bne.n	8006d80 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 fa2e 	bl	80071d8 <USB_DoPing>
      return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e112      	b.n	8006fa6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d112      	bne.n	8006dac <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	6a3a      	ldr	r2, [r7, #32]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006da4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d018      	beq.n	8006de6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	8912      	ldrh	r2, [r2, #8]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	8912      	ldrh	r2, [r2, #8]
 8006dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006dca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006dcc:	8b7b      	ldrh	r3, [r7, #26]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d90b      	bls.n	8006dea <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006dd2:	8b7b      	ldrh	r3, [r7, #26]
 8006dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	8912      	ldrh	r2, [r2, #8]
 8006ddc:	fb02 f203 	mul.w	r2, r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	611a      	str	r2, [r3, #16]
 8006de4:	e001      	b.n	8006dea <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006de6:	2301      	movs	r3, #1
 8006de8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	78db      	ldrb	r3, [r3, #3]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d006      	beq.n	8006e00 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	8912      	ldrh	r2, [r2, #8]
 8006df8:	fb02 f203 	mul.w	r2, r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e0a:	04d9      	lsls	r1, r3, #19
 8006e0c:	4b68      	ldr	r3, [pc, #416]	; (8006fb0 <USB_HC_StartXfer+0x280>)
 8006e0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	7a9b      	ldrb	r3, [r3, #10]
 8006e16:	075b      	lsls	r3, r3, #29
 8006e18:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e1c:	69f9      	ldr	r1, [r7, #28]
 8006e1e:	0148      	lsls	r0, r1, #5
 8006e20:	6a39      	ldr	r1, [r7, #32]
 8006e22:	4401      	add	r1, r0
 8006e24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	68d9      	ldr	r1, [r3, #12]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	460a      	mov	r2, r1
 8006e44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bf0c      	ite	eq
 8006e56:	2301      	moveq	r3, #1
 8006e58:	2300      	movne	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	7e7b      	ldrb	r3, [r7, #25]
 8006e8e:	075b      	lsls	r3, r3, #29
 8006e90:	69f9      	ldr	r1, [r7, #28]
 8006e92:	0148      	lsls	r0, r1, #5
 8006e94:	6a39      	ldr	r1, [r7, #32]
 8006e96:	4401      	add	r1, r0
 8006e98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a41      	ldr	r2, [pc, #260]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006eb0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006eb2:	4b40      	ldr	r3, [pc, #256]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eba:	4a3e      	ldr	r2, [pc, #248]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006ebc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	78db      	ldrb	r3, [r3, #3]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d006      	beq.n	8006ed4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006ec6:	4b3b      	ldr	r3, [pc, #236]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ece:	4a39      	ldr	r2, [pc, #228]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e005      	b.n	8006ee0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006ed4:	4b37      	ldr	r3, [pc, #220]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006edc:	4a35      	ldr	r2, [pc, #212]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006ede:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ee0:	4b34      	ldr	r3, [pc, #208]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee8:	4a32      	ldr	r2, [pc, #200]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006eea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4b2e      	ldr	r3, [pc, #184]	; (8006fb4 <USB_HC_StartXfer+0x284>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d14e      	bne.n	8006fa4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	78db      	ldrb	r3, [r3, #3]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d14a      	bne.n	8006fa4 <USB_HC_StartXfer+0x274>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d046      	beq.n	8006fa4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	79db      	ldrb	r3, [r3, #7]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d830      	bhi.n	8006f80 <USB_HC_StartXfer+0x250>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <USB_HC_StartXfer+0x1f4>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f59 	.word	0x08006f59
 8006f2c:	08006f35 	.word	0x08006f35
 8006f30:	08006f59 	.word	0x08006f59
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	3303      	adds	r3, #3
 8006f3a:	089b      	lsrs	r3, r3, #2
 8006f3c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f3e:	8afa      	ldrh	r2, [r7, #22]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d91c      	bls.n	8006f84 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	619a      	str	r2, [r3, #24]
          }
          break;
 8006f56:	e015      	b.n	8006f84 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	3303      	adds	r3, #3
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006f62:	8afa      	ldrh	r2, [r7, #22]
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d90a      	bls.n	8006f88 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	619a      	str	r2, [r3, #24]
          }
          break;
 8006f7e:	e003      	b.n	8006f88 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006f80:	bf00      	nop
 8006f82:	e002      	b.n	8006f8a <USB_HC_StartXfer+0x25a>
          break;
 8006f84:	bf00      	nop
 8006f86:	e000      	b.n	8006f8a <USB_HC_StartXfer+0x25a>
          break;
 8006f88:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	68d9      	ldr	r1, [r3, #12]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	785a      	ldrb	r2, [r3, #1]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	b298      	uxth	r0, r3
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff fb86 	bl	80066b0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3728      	adds	r7, #40	; 0x28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	1ff80000 	.word	0x1ff80000
 8006fb4:	200000b4 	.word	0x200000b4

08006fb8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	b29b      	uxth	r3, r3
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	0c9b      	lsrs	r3, r3, #18
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <USB_HC_Halt+0x3a>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d16c      	bne.n	80070ee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	440a      	add	r2, r1
 800702a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800702e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007032:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d143      	bne.n	80070c8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	440a      	add	r2, r1
 8007056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800705a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800705e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	440a      	add	r2, r1
 8007076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800707a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800707e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	440a      	add	r2, r1
 8007096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800709a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800709e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	3301      	adds	r3, #1
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ac:	d81d      	bhi.n	80070ea <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c4:	d0ec      	beq.n	80070a0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070c6:	e080      	b.n	80071ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070e6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070e8:	e06f      	b.n	80071ca <USB_HC_Halt+0x1f0>
          break;
 80070ea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070ec:	e06d      	b.n	80071ca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	440a      	add	r2, r1
 8007104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800710c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d143      	bne.n	80071a6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4413      	add	r3, r2
 8007126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	440a      	add	r2, r1
 8007134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800713c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4413      	add	r3, r2
 8007146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	440a      	add	r2, r1
 8007154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800715c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	4413      	add	r3, r2
 8007166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	440a      	add	r2, r1
 8007174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007178:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800717c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	3301      	adds	r3, #1
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718a:	d81d      	bhi.n	80071c8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4413      	add	r3, r2
 8007194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800719e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071a2:	d0ec      	beq.n	800717e <USB_HC_Halt+0x1a4>
 80071a4:	e011      	b.n	80071ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	e000      	b.n	80071ca <USB_HC_Halt+0x1f0>
          break;
 80071c8:	bf00      	nop
    }
  }

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80071ec:	2301      	movs	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	04da      	lsls	r2, r3, #19
 80071f4:	4b15      	ldr	r3, [pc, #84]	; (800724c <USB_DoPing+0x74>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007208:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007220:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007228:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007236:	461a      	mov	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	1ff80000 	.word	0x1ff80000

08007250 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff f9a1 	bl	80065a8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007266:	2110      	movs	r1, #16
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff f9d9 	bl	8006620 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff f9fc 	bl	800666c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	e01f      	b.n	80072ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007290:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007298:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ae:	461a      	mov	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3301      	adds	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b0f      	cmp	r3, #15
 80072be:	d9dc      	bls.n	800727a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	e034      	b.n	8007330 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fa:	461a      	mov	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	3301      	adds	r3, #1
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800730c:	d80c      	bhi.n	8007328 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007324:	d0ec      	beq.n	8007300 <USB_StopHost+0xb0>
 8007326:	e000      	b.n	800732a <USB_StopHost+0xda>
        break;
 8007328:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3301      	adds	r3, #1
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	d9c7      	bls.n	80072c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800733c:	461a      	mov	r2, r3
 800733e:	f04f 33ff 	mov.w	r3, #4294967295
 8007342:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f04f 32ff 	mov.w	r2, #4294967295
 800734a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff f91a 	bl	8006586 <USB_EnableGlobalInt>

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800735c:	b590      	push	{r4, r7, lr}
 800735e:	b089      	sub	sp, #36	; 0x24
 8007360:	af04      	add	r7, sp, #16
 8007362:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007364:	2301      	movs	r3, #1
 8007366:	2202      	movs	r2, #2
 8007368:	2102      	movs	r1, #2
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fc68 	bl	8007c40 <USBH_FindInterface>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d002      	beq.n	8007380 <USBH_CDC_InterfaceInit+0x24>
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d901      	bls.n	8007384 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007380:	2302      	movs	r3, #2
 8007382:	e13d      	b.n	8007600 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc3d 	bl	8007c08 <USBH_SelectInterface>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007398:	2302      	movs	r3, #2
 800739a:	e131      	b.n	8007600 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80073a2:	2050      	movs	r0, #80	; 0x50
 80073a4:	f002 fa04 	bl	80097b0 <malloc>
 80073a8:	4603      	mov	r3, r0
 80073aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80073bc:	2302      	movs	r3, #2
 80073be:	e11f      	b.n	8007600 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80073c0:	2250      	movs	r2, #80	; 0x50
 80073c2:	2100      	movs	r1, #0
 80073c4:	68b8      	ldr	r0, [r7, #8]
 80073c6:	f002 fa03 	bl	80097d0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	211a      	movs	r1, #26
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	4413      	add	r3, r2
 80073d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b25b      	sxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da15      	bge.n	800740e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	211a      	movs	r1, #26
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	4413      	add	r3, r2
 80073ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	211a      	movs	r1, #26
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	4413      	add	r3, r2
 8007404:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007408:	881a      	ldrh	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fe36 	bl	8009086 <USBH_AllocPipe>
 800741a:	4603      	mov	r3, r0
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	7819      	ldrb	r1, [r3, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	7858      	ldrb	r0, [r3, #1]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	8952      	ldrh	r2, [r2, #10]
 800743a:	9202      	str	r2, [sp, #8]
 800743c:	2203      	movs	r2, #3
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4623      	mov	r3, r4
 8007444:	4602      	mov	r2, r0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 fdee 	bl	8009028 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2200      	movs	r2, #0
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f002 f8fb 	bl	8009650 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800745a:	2300      	movs	r3, #0
 800745c:	2200      	movs	r2, #0
 800745e:	210a      	movs	r1, #10
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fbed 	bl	8007c40 <USBH_FindInterface>
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2bff      	cmp	r3, #255	; 0xff
 800746e:	d002      	beq.n	8007476 <USBH_CDC_InterfaceInit+0x11a>
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d901      	bls.n	800747a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007476:	2302      	movs	r3, #2
 8007478:	e0c2      	b.n	8007600 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	211a      	movs	r1, #26
 8007480:	fb01 f303 	mul.w	r3, r1, r3
 8007484:	4413      	add	r3, r2
 8007486:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b25b      	sxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	da16      	bge.n	80074c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	211a      	movs	r1, #26
 8007498:	fb01 f303 	mul.w	r3, r1, r3
 800749c:	4413      	add	r3, r2
 800749e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	211a      	movs	r1, #26
 80074ae:	fb01 f303 	mul.w	r3, r1, r3
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074b8:	881a      	ldrh	r2, [r3, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	835a      	strh	r2, [r3, #26]
 80074be:	e015      	b.n	80074ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	211a      	movs	r1, #26
 80074c6:	fb01 f303 	mul.w	r3, r1, r3
 80074ca:	4413      	add	r3, r2
 80074cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	211a      	movs	r1, #26
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074e6:	881a      	ldrh	r2, [r3, #0]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	211a      	movs	r1, #26
 80074f2:	fb01 f303 	mul.w	r3, r1, r3
 80074f6:	4413      	add	r3, r2
 80074f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b25b      	sxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	da16      	bge.n	8007532 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	211a      	movs	r1, #26
 800750a:	fb01 f303 	mul.w	r3, r1, r3
 800750e:	4413      	add	r3, r2
 8007510:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	211a      	movs	r1, #26
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800752a:	881a      	ldrh	r2, [r3, #0]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	835a      	strh	r2, [r3, #26]
 8007530:	e015      	b.n	800755e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	211a      	movs	r1, #26
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	4413      	add	r3, r2
 800753e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	211a      	movs	r1, #26
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007558:	881a      	ldrh	r2, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	7b9b      	ldrb	r3, [r3, #14]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 fd8e 	bl	8009086 <USBH_AllocPipe>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	7bdb      	ldrb	r3, [r3, #15]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fd84 	bl	8009086 <USBH_AllocPipe>
 800757e:	4603      	mov	r3, r0
 8007580:	461a      	mov	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	7b59      	ldrb	r1, [r3, #13]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	7b98      	ldrb	r0, [r3, #14]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	8b12      	ldrh	r2, [r2, #24]
 800759e:	9202      	str	r2, [sp, #8]
 80075a0:	2202      	movs	r2, #2
 80075a2:	9201      	str	r2, [sp, #4]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	4623      	mov	r3, r4
 80075a8:	4602      	mov	r2, r0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 fd3c 	bl	8009028 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	7b19      	ldrb	r1, [r3, #12]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	7bd8      	ldrb	r0, [r3, #15]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	8b52      	ldrh	r2, [r2, #26]
 80075c8:	9202      	str	r2, [sp, #8]
 80075ca:	2202      	movs	r2, #2
 80075cc:	9201      	str	r2, [sp, #4]
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	4623      	mov	r3, r4
 80075d2:	4602      	mov	r2, r0
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 fd27 	bl	8009028 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	7b5b      	ldrb	r3, [r3, #13]
 80075e6:	2200      	movs	r2, #0
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f002 f830 	bl	8009650 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	7b1b      	ldrb	r3, [r3, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 f829 	bl	8009650 <USBH_LL_SetToggle>

  return USBH_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	bd90      	pop	{r4, r7, pc}

08007608 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00e      	beq.n	8007640 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 fd1c 	bl	8009066 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fd47 	bl	80090c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	7b1b      	ldrb	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00e      	beq.n	8007666 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	7b1b      	ldrb	r3, [r3, #12]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fd09 	bl	8009066 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	7b1b      	ldrb	r3, [r3, #12]
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 fd34 	bl	80090c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	7b5b      	ldrb	r3, [r3, #13]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00e      	beq.n	800768c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	7b5b      	ldrb	r3, [r3, #13]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 fcf6 	bl	8009066 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	7b5b      	ldrb	r3, [r3, #13]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 fd21 	bl	80090c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f002 f88d 	bl	80097c0 <free>
    phost->pActiveClass->pData = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ac:	2200      	movs	r2, #0
 80076ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3340      	adds	r3, #64	; 0x40
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f8b1 	bl	800783a <GetLineCoding>
 80076d8:	4603      	mov	r3, r0
 80076da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d105      	bne.n	80076ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076e8:	2102      	movs	r1, #2
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80076ee:	7afb      	ldrb	r3, [r7, #11]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007718:	2b04      	cmp	r3, #4
 800771a:	d877      	bhi.n	800780c <USBH_CDC_Process+0x114>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <USBH_CDC_Process+0x2c>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007739 	.word	0x08007739
 8007728:	0800773f 	.word	0x0800773f
 800772c:	0800776f 	.word	0x0800776f
 8007730:	080077e3 	.word	0x080077e3
 8007734:	080077f1 	.word	0x080077f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	e06d      	b.n	800781a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f897 	bl	8007878 <SetLineCoding>
 800774a:	4603      	mov	r3, r0
 800774c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800775c:	e058      	b.n	8007810 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d055      	beq.n	8007810 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2204      	movs	r2, #4
 8007768:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800776c:	e050      	b.n	8007810 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3340      	adds	r3, #64	; 0x40
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f860 	bl	800783a <GetLineCoding>
 800777a:	4603      	mov	r3, r0
 800777c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d126      	bne.n	80077d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d13b      	bne.n	8007814 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d133      	bne.n	8007814 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d12b      	bne.n	8007814 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d124      	bne.n	8007814 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f95a 	bl	8007a84 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077d0:	e020      	b.n	8007814 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d01d      	beq.n	8007814 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2204      	movs	r2, #4
 80077dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077e0:	e018      	b.n	8007814 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f867 	bl	80078b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8dc 	bl	80079a6 <CDC_ProcessReception>
      break;
 80077ee:	e014      	b.n	800781a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077f0:	2100      	movs	r1, #0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 ffe5 	bl	80087c2 <USBH_ClrFeature>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800780a:	e005      	b.n	8007818 <USBH_CDC_Process+0x120>

    default:
      break;
 800780c:	bf00      	nop
 800780e:	e004      	b.n	800781a <USBH_CDC_Process+0x122>
      break;
 8007810:	bf00      	nop
 8007812:	e002      	b.n	800781a <USBH_CDC_Process+0x122>
      break;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <USBH_CDC_Process+0x122>
      break;
 8007818:	bf00      	nop

  }

  return status;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	22a1      	movs	r2, #161	; 0xa1
 8007848:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2221      	movs	r2, #33	; 0x21
 800784e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2207      	movs	r2, #7
 8007860:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2207      	movs	r2, #7
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f98a 	bl	8008b82 <USBH_CtlReq>
 800786e:	4603      	mov	r3, r0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2221      	movs	r2, #33	; 0x21
 8007886:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2207      	movs	r2, #7
 800789e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2207      	movs	r2, #7
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 f96b 	bl	8008b82 <USBH_CtlReq>
 80078ac:	4603      	mov	r3, r0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af02      	add	r7, sp, #8
 80078bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d002      	beq.n	80078dc <CDC_ProcessTransmission+0x26>
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d025      	beq.n	8007926 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80078da:	e060      	b.n	800799e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	8b12      	ldrh	r2, [r2, #24]
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d90c      	bls.n	8007902 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	69d9      	ldr	r1, [r3, #28]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8b1a      	ldrh	r2, [r3, #24]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	7b58      	ldrb	r0, [r3, #13]
 80078f4:	2301      	movs	r3, #1
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	4603      	mov	r3, r0
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fb51 	bl	8008fa2 <USBH_BulkSendData>
 8007900:	e00c      	b.n	800791c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	7b58      	ldrb	r0, [r3, #13]
 8007910:	2301      	movs	r3, #1
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4603      	mov	r3, r0
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 fb43 	bl	8008fa2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007924:	e03b      	b.n	800799e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	7b5b      	ldrb	r3, [r3, #13]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 fe65 	bl	80095fc <USBH_LL_GetURBState>
 8007932:	4603      	mov	r3, r0
 8007934:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d128      	bne.n	800798e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	8b12      	ldrh	r2, [r2, #24]
 8007944:	4293      	cmp	r3, r2
 8007946:	d90e      	bls.n	8007966 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	8b12      	ldrh	r2, [r2, #24]
 8007950:	1a9a      	subs	r2, r3, r2
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	8b12      	ldrh	r2, [r2, #24]
 800795e:	441a      	add	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	61da      	str	r2, [r3, #28]
 8007964:	e002      	b.n	800796c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	2b00      	cmp	r3, #0
 8007972:	d004      	beq.n	800797e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800797c:	e00e      	b.n	800799c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f868 	bl	8007a5c <USBH_CDC_TransmitCallback>
      break;
 800798c:	e006      	b.n	800799c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800798e:	7afb      	ldrb	r3, [r7, #11]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d103      	bne.n	800799c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800799c:	bf00      	nop
  }
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079b8:	2300      	movs	r3, #0
 80079ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d002      	beq.n	80079cc <CDC_ProcessReception+0x26>
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d00e      	beq.n	80079e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80079ca:	e043      	b.n	8007a54 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	6a19      	ldr	r1, [r3, #32]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	8b5a      	ldrh	r2, [r3, #26]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	7b1b      	ldrb	r3, [r3, #12]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fb07 	bl	8008fec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2204      	movs	r2, #4
 80079e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80079e6:	e035      	b.n	8007a54 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	7b1b      	ldrb	r3, [r3, #12]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fe04 	bl	80095fc <USBH_LL_GetURBState>
 80079f4:	4603      	mov	r3, r0
 80079f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80079f8:	7cfb      	ldrb	r3, [r7, #19]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d129      	bne.n	8007a52 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	7b1b      	ldrb	r3, [r3, #12]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fd67 	bl	80094d8 <USBH_LL_GetLastXferSize>
 8007a0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d016      	beq.n	8007a44 <CDC_ProcessReception+0x9e>
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	8b5b      	ldrh	r3, [r3, #26]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d910      	bls.n	8007a44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	1ad2      	subs	r2, r2, r3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6a1a      	ldr	r2, [r3, #32]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	441a      	add	r2, r3
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a42:	e006      	b.n	8007a52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f80f 	bl	8007a70 <USBH_CDC_ReceiveCallback>
      break;
 8007a52:	bf00      	nop
  }
}
 8007a54:	bf00      	nop
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007aac:	2302      	movs	r3, #2
 8007aae:	e029      	b.n	8007b04 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	79fa      	ldrb	r2, [r7, #7]
 8007ab4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f81f 	bl	8007b0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f001 fc39 	bl	8009374 <USBH_LL_Init>

  return USBH_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e009      	b.n	8007b32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	33e0      	adds	r3, #224	; 0xe0
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2b0e      	cmp	r3, #14
 8007b36:	d9f2      	bls.n	8007b1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	e009      	b.n	8007b52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b58:	d3f1      	bcc.n	8007b3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2240      	movs	r2, #64	; 0x40
 8007b7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d016      	beq.n	8007bf6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10e      	bne.n	8007bf0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007bd8:	1c59      	adds	r1, r3, #1
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	33de      	adds	r3, #222	; 0xde
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	e004      	b.n	8007bfa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	73fb      	strb	r3, [r7, #15]
 8007bf4:	e001      	b.n	8007bfa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c1e:	78fa      	ldrb	r2, [r7, #3]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d204      	bcs.n	8007c2e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	78fa      	ldrb	r2, [r7, #3]
 8007c28:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007c2c:	e001      	b.n	8007c32 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c2e:	2302      	movs	r3, #2
 8007c30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	70fb      	strb	r3, [r7, #3]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70bb      	strb	r3, [r7, #2]
 8007c56:	4613      	mov	r3, r2
 8007c58:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c68:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c6a:	e025      	b.n	8007cb8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	221a      	movs	r2, #26
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	3308      	adds	r3, #8
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	795b      	ldrb	r3, [r3, #5]
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d002      	beq.n	8007c8e <USBH_FindInterface+0x4e>
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	2bff      	cmp	r3, #255	; 0xff
 8007c8c:	d111      	bne.n	8007cb2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c92:	78ba      	ldrb	r2, [r7, #2]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d002      	beq.n	8007c9e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c98:	78bb      	ldrb	r3, [r7, #2]
 8007c9a:	2bff      	cmp	r3, #255	; 0xff
 8007c9c:	d109      	bne.n	8007cb2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ca2:	787a      	ldrb	r2, [r7, #1]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d002      	beq.n	8007cae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ca8:	787b      	ldrb	r3, [r7, #1]
 8007caa:	2bff      	cmp	r3, #255	; 0xff
 8007cac:	d101      	bne.n	8007cb2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	e006      	b.n	8007cc0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d9d6      	bls.n	8007c6c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007cbe:	23ff      	movs	r3, #255	; 0xff
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fb89 	bl	80093ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007cda:	2101      	movs	r1, #1
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fca0 	bl	8009622 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af04      	add	r7, sp, #16
 8007cf2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d102      	bne.n	8007d0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b0b      	cmp	r3, #11
 8007d16:	f200 81b3 	bhi.w	8008080 <USBH_Process+0x394>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBH_Process+0x34>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d51 	.word	0x08007d51
 8007d24:	08007d83 	.word	0x08007d83
 8007d28:	08007deb 	.word	0x08007deb
 8007d2c:	0800801b 	.word	0x0800801b
 8007d30:	08008081 	.word	0x08008081
 8007d34:	08007e8f 	.word	0x08007e8f
 8007d38:	08007fc1 	.word	0x08007fc1
 8007d3c:	08007ec5 	.word	0x08007ec5
 8007d40:	08007ee5 	.word	0x08007ee5
 8007d44:	08007f05 	.word	0x08007f05
 8007d48:	08007f33 	.word	0x08007f33
 8007d4c:	08008003 	.word	0x08008003
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 8193 	beq.w	8008084 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d64:	20c8      	movs	r0, #200	; 0xc8
 8007d66:	f001 fca6 	bl	80096b6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fb99 	bl	80094a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d80:	e180      	b.n	8008084 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d9a:	e182      	b.n	80080a2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007da6:	d914      	bls.n	8007dd2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007dae:	3301      	adds	r3, #1
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d903      	bls.n	8007dca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	220d      	movs	r2, #13
 8007dc6:	701a      	strb	r2, [r3, #0]
      break;
 8007dc8:	e16b      	b.n	80080a2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	701a      	strb	r2, [r3, #0]
      break;
 8007dd0:	e167      	b.n	80080a2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007dd8:	f103 020a 	add.w	r2, r3, #10
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007de2:	200a      	movs	r0, #10
 8007de4:	f001 fc67 	bl	80096b6 <USBH_Delay>
      break;
 8007de8:	e15b      	b.n	80080a2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dfa:	2104      	movs	r1, #4
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e00:	2064      	movs	r0, #100	; 0x64
 8007e02:	f001 fc58 	bl	80096b6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fb26 	bl	8009458 <USBH_LL_GetSpeed>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	461a      	mov	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2205      	movs	r2, #5
 8007e1a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 f931 	bl	8009086 <USBH_AllocPipe>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e2c:	2180      	movs	r1, #128	; 0x80
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 f929 	bl	8009086 <USBH_AllocPipe>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7919      	ldrb	r1, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e50:	b292      	uxth	r2, r2
 8007e52:	9202      	str	r2, [sp, #8]
 8007e54:	2200      	movs	r2, #0
 8007e56:	9201      	str	r2, [sp, #4]
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2280      	movs	r2, #128	; 0x80
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 f8e2 	bl	8009028 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	7959      	ldrb	r1, [r3, #5]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e78:	b292      	uxth	r2, r2
 8007e7a:	9202      	str	r2, [sp, #8]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	9201      	str	r2, [sp, #4]
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4603      	mov	r3, r0
 8007e84:	2200      	movs	r2, #0
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 f8ce 	bl	8009028 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e8c:	e109      	b.n	80080a2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f90c 	bl	80080ac <USBH_HandleEnum>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 80f3 	bne.w	8008088 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d103      	bne.n	8007ebc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2208      	movs	r2, #8
 8007eb8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007eba:	e0e5      	b.n	8008088 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2207      	movs	r2, #7
 8007ec0:	701a      	strb	r2, [r3, #0]
      break;
 8007ec2:	e0e1      	b.n	8008088 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80de 	beq.w	800808c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2208      	movs	r2, #8
 8007ee0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007ee2:	e0d3      	b.n	800808c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fc20 	bl	8008734 <USBH_SetCfg>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f040 80ca 	bne.w	8008090 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2209      	movs	r2, #9
 8007f00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f02:	e0c5      	b.n	8008090 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007f12:	2101      	movs	r1, #1
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fc30 	bl	800877a <USBH_SetFeature>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 80b9 	bne.w	8008094 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	220a      	movs	r2, #10
 8007f26:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f28:	e0b4      	b.n	8008094 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	701a      	strb	r2, [r3, #0]
      break;
 8007f30:	e0b0      	b.n	8008094 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80ad 	beq.w	8008098 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
 8007f4a:	e016      	b.n	8007f7a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f4c:	7bfa      	ldrb	r2, [r7, #15]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32de      	adds	r2, #222	; 0xde
 8007f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f56:	791a      	ldrb	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d108      	bne.n	8007f74 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f62:	7bfa      	ldrb	r2, [r7, #15]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	32de      	adds	r2, #222	; 0xde
 8007f68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007f72:	e005      	b.n	8007f80 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	3301      	adds	r3, #1
 8007f78:	73fb      	strb	r3, [r7, #15]
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0e5      	beq.n	8007f4c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d016      	beq.n	8007fb8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2206      	movs	r2, #6
 8007fa0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fa8:	2103      	movs	r1, #3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fae:	e073      	b.n	8008098 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	220d      	movs	r2, #13
 8007fb4:	701a      	strb	r2, [r3, #0]
      break;
 8007fb6:	e06f      	b.n	8008098 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	220d      	movs	r2, #13
 8007fbc:	701a      	strb	r2, [r3, #0]
      break;
 8007fbe:	e06b      	b.n	8008098 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d017      	beq.n	8007ffa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	220b      	movs	r2, #11
 8007fe6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fe8:	e058      	b.n	800809c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d154      	bne.n	800809c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	220d      	movs	r2, #13
 8007ff6:	701a      	strb	r2, [r3, #0]
      break;
 8007ff8:	e050      	b.n	800809c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	220d      	movs	r2, #13
 8007ffe:	701a      	strb	r2, [r3, #0]
      break;
 8008000:	e04c      	b.n	800809c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d049      	beq.n	80080a0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
      }
      break;
 8008018:	e042      	b.n	80080a0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fd72 	bl	8007b0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008056:	2105      	movs	r1, #5
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	d107      	bne.n	8008078 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fe2b 	bl	8007ccc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008076:	e014      	b.n	80080a2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 f9b7 	bl	80093ec <USBH_LL_Start>
      break;
 800807e:	e010      	b.n	80080a2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008080:	bf00      	nop
 8008082:	e00e      	b.n	80080a2 <USBH_Process+0x3b6>
      break;
 8008084:	bf00      	nop
 8008086:	e00c      	b.n	80080a2 <USBH_Process+0x3b6>
      break;
 8008088:	bf00      	nop
 800808a:	e00a      	b.n	80080a2 <USBH_Process+0x3b6>
    break;
 800808c:	bf00      	nop
 800808e:	e008      	b.n	80080a2 <USBH_Process+0x3b6>
      break;
 8008090:	bf00      	nop
 8008092:	e006      	b.n	80080a2 <USBH_Process+0x3b6>
      break;
 8008094:	bf00      	nop
 8008096:	e004      	b.n	80080a2 <USBH_Process+0x3b6>
      break;
 8008098:	bf00      	nop
 800809a:	e002      	b.n	80080a2 <USBH_Process+0x3b6>
      break;
 800809c:	bf00      	nop
 800809e:	e000      	b.n	80080a2 <USBH_Process+0x3b6>
      break;
 80080a0:	bf00      	nop
  }
  return USBH_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af04      	add	r7, sp, #16
 80080b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080b8:	2301      	movs	r3, #1
 80080ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b07      	cmp	r3, #7
 80080c2:	f200 81c1 	bhi.w	8008448 <USBH_HandleEnum+0x39c>
 80080c6:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <USBH_HandleEnum+0x20>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080ed 	.word	0x080080ed
 80080d0:	080081ab 	.word	0x080081ab
 80080d4:	08008215 	.word	0x08008215
 80080d8:	080082a3 	.word	0x080082a3
 80080dc:	0800830d 	.word	0x0800830d
 80080e0:	0800837d 	.word	0x0800837d
 80080e4:	080083c3 	.word	0x080083c3
 80080e8:	08008409 	.word	0x08008409
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80080ec:	2108      	movs	r1, #8
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa50 	bl	8008594 <USBH_Get_DevDesc>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d130      	bne.n	8008160 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7919      	ldrb	r1, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008122:	b292      	uxth	r2, r2
 8008124:	9202      	str	r2, [sp, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	9201      	str	r2, [sp, #4]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4603      	mov	r3, r0
 800812e:	2280      	movs	r2, #128	; 0x80
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 ff79 	bl	8009028 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	7959      	ldrb	r1, [r3, #5]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800814a:	b292      	uxth	r2, r2
 800814c:	9202      	str	r2, [sp, #8]
 800814e:	2200      	movs	r2, #0
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4603      	mov	r3, r0
 8008156:	2200      	movs	r2, #0
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 ff65 	bl	8009028 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800815e:	e175      	b.n	800844c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b03      	cmp	r3, #3
 8008164:	f040 8172 	bne.w	800844c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800816e:	3301      	adds	r3, #1
 8008170:	b2da      	uxtb	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800817e:	2b03      	cmp	r3, #3
 8008180:	d903      	bls.n	800818a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	220d      	movs	r2, #13
 8008186:	701a      	strb	r2, [r3, #0]
      break;
 8008188:	e160      	b.n	800844c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	795b      	ldrb	r3, [r3, #5]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 ff99 	bl	80090c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	791b      	ldrb	r3, [r3, #4]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 ff93 	bl	80090c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
      break;
 80081a8:	e150      	b.n	800844c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081aa:	2112      	movs	r1, #18
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f9f1 	bl	8008594 <USBH_Get_DevDesc>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d103      	bne.n	80081c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081c2:	e145      	b.n	8008450 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	f040 8142 	bne.w	8008450 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d903      	bls.n	80081ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	220d      	movs	r2, #13
 80081ea:	701a      	strb	r2, [r3, #0]
      break;
 80081ec:	e130      	b.n	8008450 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	795b      	ldrb	r3, [r3, #5]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 ff67 	bl	80090c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	791b      	ldrb	r3, [r3, #4]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 ff61 	bl	80090c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
      break;
 8008212:	e11d      	b.n	8008450 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008214:	2101      	movs	r1, #1
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa68 	bl	80086ec <USBH_SetAddress>
 800821c:	4603      	mov	r3, r0
 800821e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d132      	bne.n	800828c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008226:	2002      	movs	r0, #2
 8008228:	f001 fa45 	bl	80096b6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2203      	movs	r2, #3
 8008238:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7919      	ldrb	r1, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800824e:	b292      	uxth	r2, r2
 8008250:	9202      	str	r2, [sp, #8]
 8008252:	2200      	movs	r2, #0
 8008254:	9201      	str	r2, [sp, #4]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4603      	mov	r3, r0
 800825a:	2280      	movs	r2, #128	; 0x80
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fee3 	bl	8009028 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7959      	ldrb	r1, [r3, #5]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008276:	b292      	uxth	r2, r2
 8008278:	9202      	str	r2, [sp, #8]
 800827a:	2200      	movs	r2, #0
 800827c:	9201      	str	r2, [sp, #4]
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	4603      	mov	r3, r0
 8008282:	2200      	movs	r2, #0
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fecf 	bl	8009028 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800828a:	e0e3      	b.n	8008454 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b03      	cmp	r3, #3
 8008290:	f040 80e0 	bne.w	8008454 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	220d      	movs	r2, #13
 8008298:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	705a      	strb	r2, [r3, #1]
      break;
 80082a0:	e0d8      	b.n	8008454 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082a2:	2109      	movs	r1, #9
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f99d 	bl	80085e4 <USBH_Get_CfgDesc>
 80082aa:	4603      	mov	r3, r0
 80082ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2204      	movs	r2, #4
 80082b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082ba:	e0cd      	b.n	8008458 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b03      	cmp	r3, #3
 80082c0:	f040 80ca 	bne.w	8008458 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082ca:	3301      	adds	r3, #1
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d903      	bls.n	80082e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	220d      	movs	r2, #13
 80082e2:	701a      	strb	r2, [r3, #0]
      break;
 80082e4:	e0b8      	b.n	8008458 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	795b      	ldrb	r3, [r3, #5]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 feeb 	bl	80090c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	791b      	ldrb	r3, [r3, #4]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fee5 	bl	80090c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	701a      	strb	r2, [r3, #0]
      break;
 800830a:	e0a5      	b.n	8008458 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f965 	bl	80085e4 <USBH_Get_CfgDesc>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2205      	movs	r2, #5
 8008328:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800832a:	e097      	b.n	800845c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b03      	cmp	r3, #3
 8008330:	f040 8094 	bne.w	800845c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800833a:	3301      	adds	r3, #1
 800833c:	b2da      	uxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800834a:	2b03      	cmp	r3, #3
 800834c:	d903      	bls.n	8008356 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	220d      	movs	r2, #13
 8008352:	701a      	strb	r2, [r3, #0]
      break;
 8008354:	e082      	b.n	800845c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	795b      	ldrb	r3, [r3, #5]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 feb3 	bl	80090c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	791b      	ldrb	r3, [r3, #4]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fead 	bl	80090c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	701a      	strb	r2, [r3, #0]
      break;
 800837a:	e06f      	b.n	800845c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008382:	2b00      	cmp	r3, #0
 8008384:	d019      	beq.n	80083ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008392:	23ff      	movs	r3, #255	; 0xff
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f949 	bl	800862c <USBH_Get_StringDesc>
 800839a:	4603      	mov	r3, r0
 800839c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2206      	movs	r2, #6
 80083a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80083aa:	e059      	b.n	8008460 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d156      	bne.n	8008460 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2206      	movs	r2, #6
 80083b6:	705a      	strb	r2, [r3, #1]
      break;
 80083b8:	e052      	b.n	8008460 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2206      	movs	r2, #6
 80083be:	705a      	strb	r2, [r3, #1]
      break;
 80083c0:	e04e      	b.n	8008460 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d019      	beq.n	8008400 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083d8:	23ff      	movs	r3, #255	; 0xff
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f926 	bl	800862c <USBH_Get_StringDesc>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2207      	movs	r2, #7
 80083ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80083f0:	e038      	b.n	8008464 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d135      	bne.n	8008464 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2207      	movs	r2, #7
 80083fc:	705a      	strb	r2, [r3, #1]
      break;
 80083fe:	e031      	b.n	8008464 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2207      	movs	r2, #7
 8008404:	705a      	strb	r2, [r3, #1]
      break;
 8008406:	e02d      	b.n	8008464 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800840e:	2b00      	cmp	r3, #0
 8008410:	d017      	beq.n	8008442 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800841e:	23ff      	movs	r3, #255	; 0xff
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f903 	bl	800862c <USBH_Get_StringDesc>
 8008426:	4603      	mov	r3, r0
 8008428:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008434:	e018      	b.n	8008468 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d115      	bne.n	8008468 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	e012      	b.n	8008468 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
      break;
 8008446:	e00f      	b.n	8008468 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008448:	bf00      	nop
 800844a:	e00e      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 800844c:	bf00      	nop
 800844e:	e00c      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 8008450:	bf00      	nop
 8008452:	e00a      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 8008454:	bf00      	nop
 8008456:	e008      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 8008458:	bf00      	nop
 800845a:	e006      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 800845c:	bf00      	nop
 800845e:	e004      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 8008460:	bf00      	nop
 8008462:	e002      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 8008464:	bf00      	nop
 8008466:	e000      	b.n	800846a <USBH_HandleEnum+0x3be>
      break;
 8008468:	bf00      	nop
  }
  return Status;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f804 	bl	80084b6 <USBH_HandleSof>
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b0b      	cmp	r3, #11
 80084c6:	d10a      	bne.n	80084de <USBH_HandleSof+0x28>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d005      	beq.n	80084de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	4798      	blx	r3
  }
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80084f6:	bf00      	nop
}
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008512:	bf00      	nop
}
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 ff58 	bl	8009422 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	791b      	ldrb	r3, [r3, #4]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fda5 	bl	80090c8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	795b      	ldrb	r3, [r3, #5]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fd9f 	bl	80090c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	4613      	mov	r3, r2
 80085ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085b2:	2100      	movs	r1, #0
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f864 	bl	8008682 <USBH_GetDescriptor>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73fb      	strb	r3, [r7, #15]
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	b292      	uxth	r2, r2
 80085d4:	4619      	mov	r1, r3
 80085d6:	f000 f918 	bl	800880a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	331c      	adds	r3, #28
 80085f4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80085f6:	887b      	ldrh	r3, [r7, #2]
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008600:	2100      	movs	r1, #0
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f83d 	bl	8008682 <USBH_GetDescriptor>
 8008608:	4603      	mov	r3, r0
 800860a:	72fb      	strb	r3, [r7, #11]
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d107      	bne.n	8008622 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008618:	887a      	ldrh	r2, [r7, #2]
 800861a:	68f9      	ldr	r1, [r7, #12]
 800861c:	4618      	mov	r0, r3
 800861e:	f000 f964 	bl	80088ea <USBH_ParseCfgDesc>
  }

  return status;
 8008622:	7afb      	ldrb	r3, [r7, #11]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af02      	add	r7, sp, #8
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	607a      	str	r2, [r7, #4]
 8008636:	461a      	mov	r2, r3
 8008638:	460b      	mov	r3, r1
 800863a:	72fb      	strb	r3, [r7, #11]
 800863c:	4613      	mov	r3, r2
 800863e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	b29b      	uxth	r3, r3
 8008644:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008648:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008650:	893b      	ldrh	r3, [r7, #8]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	460b      	mov	r3, r1
 8008656:	2100      	movs	r1, #0
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f812 	bl	8008682 <USBH_GetDescriptor>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d107      	bne.n	8008678 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800866e:	893a      	ldrh	r2, [r7, #8]
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fa37 	bl	8008ae6 <USBH_ParseStringDesc>
  }

  return status;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	607b      	str	r3, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	72fb      	strb	r3, [r7, #11]
 8008690:	4613      	mov	r3, r2
 8008692:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	789b      	ldrb	r3, [r3, #2]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d11c      	bne.n	80086d6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800869c:	7afb      	ldrb	r3, [r7, #11]
 800869e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2206      	movs	r2, #6
 80086ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	893a      	ldrh	r2, [r7, #8]
 80086b2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086b4:	893b      	ldrh	r3, [r7, #8]
 80086b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80086ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086be:	d104      	bne.n	80086ca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f240 4209 	movw	r2, #1033	; 0x409
 80086c6:	829a      	strh	r2, [r3, #20]
 80086c8:	e002      	b.n	80086d0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8b3a      	ldrh	r2, [r7, #24]
 80086d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80086d6:	8b3b      	ldrh	r3, [r7, #24]
 80086d8:	461a      	mov	r2, r3
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 fa50 	bl	8008b82 <USBH_CtlReq>
 80086e2:	4603      	mov	r3, r0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	789b      	ldrb	r3, [r3, #2]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d10f      	bne.n	8008720 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2205      	movs	r2, #5
 800870a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008720:	2200      	movs	r2, #0
 8008722:	2100      	movs	r1, #0
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fa2c 	bl	8008b82 <USBH_CtlReq>
 800872a:	4603      	mov	r3, r0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	789b      	ldrb	r3, [r3, #2]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d10e      	bne.n	8008766 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2209      	movs	r2, #9
 8008752:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	887a      	ldrh	r2, [r7, #2]
 8008758:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008766:	2200      	movs	r2, #0
 8008768:	2100      	movs	r1, #0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa09 	bl	8008b82 <USBH_CtlReq>
 8008770:	4603      	mov	r3, r0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	789b      	ldrb	r3, [r3, #2]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d10f      	bne.n	80087ae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2203      	movs	r2, #3
 8008798:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	b29a      	uxth	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087ae:	2200      	movs	r2, #0
 80087b0:	2100      	movs	r1, #0
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f9e5 	bl	8008b82 <USBH_CtlReq>
 80087b8:	4603      	mov	r3, r0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	789b      	ldrb	r3, [r3, #2]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d10f      	bne.n	80087f6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80087e8:	78fb      	ldrb	r3, [r7, #3]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f9c1 	bl	8008b82 <USBH_CtlReq>
 8008800:	4603      	mov	r3, r0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800880a:	b480      	push	{r7}
 800880c:	b085      	sub	sp, #20
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	4613      	mov	r3, r2
 8008816:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	781a      	ldrb	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	785a      	ldrb	r2, [r3, #1]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	3302      	adds	r3, #2
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b29a      	uxth	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	3303      	adds	r3, #3
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	b29b      	uxth	r3, r3
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	b29b      	uxth	r3, r3
 800883c:	4313      	orrs	r3, r2
 800883e:	b29a      	uxth	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	791a      	ldrb	r2, [r3, #4]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	795a      	ldrb	r2, [r3, #5]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	799a      	ldrb	r2, [r3, #6]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	79da      	ldrb	r2, [r3, #7]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008864:	88fb      	ldrh	r3, [r7, #6]
 8008866:	2b08      	cmp	r3, #8
 8008868:	d939      	bls.n	80088de <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	3308      	adds	r3, #8
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	b29a      	uxth	r2, r3
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	3309      	adds	r3, #9
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	b29b      	uxth	r3, r3
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	4313      	orrs	r3, r2
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	330a      	adds	r3, #10
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	b29a      	uxth	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	330b      	adds	r3, #11
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	b29b      	uxth	r3, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	330c      	adds	r3, #12
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	330d      	adds	r3, #13
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	021b      	lsls	r3, r3, #8
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	4313      	orrs	r3, r2
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	7b9a      	ldrb	r2, [r3, #14]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	7bda      	ldrb	r2, [r3, #15]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	7c1a      	ldrb	r2, [r3, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	7c5a      	ldrb	r2, [r3, #17]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	745a      	strb	r2, [r3, #17]
  }
}
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b08a      	sub	sp, #40	; 0x28
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	4613      	mov	r3, r2
 80088f6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	781a      	ldrb	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	785a      	ldrb	r2, [r3, #1]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	3302      	adds	r3, #2
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b29a      	uxth	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3303      	adds	r3, #3
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	b29b      	uxth	r3, r3
 8008930:	4313      	orrs	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	791a      	ldrb	r2, [r3, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	795a      	ldrb	r2, [r3, #5]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	799a      	ldrb	r2, [r3, #6]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	79da      	ldrb	r2, [r3, #7]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	7a1a      	ldrb	r2, [r3, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	2b09      	cmp	r3, #9
 8008964:	d95f      	bls.n	8008a26 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008966:	2309      	movs	r3, #9
 8008968:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800896a:	2300      	movs	r3, #0
 800896c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800896e:	e051      	b.n	8008a14 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008970:	f107 0316 	add.w	r3, r7, #22
 8008974:	4619      	mov	r1, r3
 8008976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008978:	f000 f8e8 	bl	8008b4c <USBH_GetNextDesc>
 800897c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	785b      	ldrb	r3, [r3, #1]
 8008982:	2b04      	cmp	r3, #4
 8008984:	d146      	bne.n	8008a14 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800898a:	221a      	movs	r2, #26
 800898c:	fb02 f303 	mul.w	r3, r2, r3
 8008990:	3308      	adds	r3, #8
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	3302      	adds	r3, #2
 8008998:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800899a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800899c:	69f8      	ldr	r0, [r7, #28]
 800899e:	f000 f846 	bl	8008a2e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089ac:	e022      	b.n	80089f4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089ae:	f107 0316 	add.w	r3, r7, #22
 80089b2:	4619      	mov	r1, r3
 80089b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089b6:	f000 f8c9 	bl	8008b4c <USBH_GetNextDesc>
 80089ba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b05      	cmp	r3, #5
 80089c2:	d117      	bne.n	80089f4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80089c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80089cc:	3201      	adds	r2, #1
 80089ce:	00d2      	lsls	r2, r2, #3
 80089d0:	211a      	movs	r1, #26
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	3308      	adds	r3, #8
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4413      	add	r3, r2
 80089de:	3304      	adds	r3, #4
 80089e0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80089e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e4:	69b8      	ldr	r0, [r7, #24]
 80089e6:	f000 f851 	bl	8008a8c <USBH_ParseEPDesc>
            ep_ix++;
 80089ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80089ee:	3301      	adds	r3, #1
 80089f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	791b      	ldrb	r3, [r3, #4]
 80089f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d204      	bcs.n	8008a0a <USBH_ParseCfgDesc+0x120>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	885a      	ldrh	r2, [r3, #2]
 8008a04:	8afb      	ldrh	r3, [r7, #22]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d8d1      	bhi.n	80089ae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a0e:	3301      	adds	r3, #1
 8008a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d804      	bhi.n	8008a26 <USBH_ParseCfgDesc+0x13c>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	885a      	ldrh	r2, [r3, #2]
 8008a20:	8afb      	ldrh	r3, [r7, #22]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d8a4      	bhi.n	8008970 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008a26:	bf00      	nop
 8008a28:	3728      	adds	r7, #40	; 0x28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	785a      	ldrb	r2, [r3, #1]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	789a      	ldrb	r2, [r3, #2]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	78da      	ldrb	r2, [r3, #3]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	791a      	ldrb	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	795a      	ldrb	r2, [r3, #5]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	799a      	ldrb	r2, [r3, #6]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	79da      	ldrb	r2, [r3, #7]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	7a1a      	ldrb	r2, [r3, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	721a      	strb	r2, [r3, #8]
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781a      	ldrb	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	785a      	ldrb	r2, [r3, #1]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	789a      	ldrb	r2, [r3, #2]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	78da      	ldrb	r2, [r3, #3]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	3305      	adds	r3, #5
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	4313      	orrs	r3, r2
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	799a      	ldrb	r2, [r3, #6]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	719a      	strb	r2, [r3, #6]
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b087      	sub	sp, #28
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	4613      	mov	r3, r2
 8008af2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3301      	adds	r3, #1
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d120      	bne.n	8008b40 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	1e9a      	subs	r2, r3, #2
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	4293      	cmp	r3, r2
 8008b08:	bf28      	it	cs
 8008b0a:	4613      	movcs	r3, r2
 8008b0c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3302      	adds	r3, #2
 8008b12:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b14:	2300      	movs	r3, #0
 8008b16:	82fb      	strh	r3, [r7, #22]
 8008b18:	e00b      	b.n	8008b32 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b1a:	8afb      	ldrh	r3, [r7, #22]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	781a      	ldrb	r2, [r3, #0]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b2c:	8afb      	ldrh	r3, [r7, #22]
 8008b2e:	3302      	adds	r3, #2
 8008b30:	82fb      	strh	r3, [r7, #22]
 8008b32:	8afa      	ldrh	r2, [r7, #22]
 8008b34:	8abb      	ldrh	r3, [r7, #20]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d3ef      	bcc.n	8008b1a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	701a      	strb	r2, [r3, #0]
  }
}
 8008b40:	bf00      	nop
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	881a      	ldrh	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b74:	68fb      	ldr	r3, [r7, #12]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b086      	sub	sp, #24
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008b90:	2301      	movs	r3, #1
 8008b92:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	789b      	ldrb	r3, [r3, #2]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d002      	beq.n	8008ba2 <USBH_CtlReq+0x20>
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d00f      	beq.n	8008bc0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008ba0:	e027      	b.n	8008bf2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	88fa      	ldrh	r2, [r7, #6]
 8008bac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008bbe:	e018      	b.n	8008bf2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 f81b 	bl	8008bfc <USBH_HandleControl>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <USBH_CtlReq+0x54>
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d106      	bne.n	8008be4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	761a      	strb	r2, [r3, #24]
      break;
 8008be2:	e005      	b.n	8008bf0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d102      	bne.n	8008bf0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	709a      	strb	r2, [r3, #2]
      break;
 8008bf0:	bf00      	nop
  }
  return status;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af02      	add	r7, sp, #8
 8008c02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7e1b      	ldrb	r3, [r3, #24]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	2b0a      	cmp	r3, #10
 8008c14:	f200 8158 	bhi.w	8008ec8 <USBH_HandleControl+0x2cc>
 8008c18:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <USBH_HandleControl+0x24>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	08008c67 	.word	0x08008c67
 8008c28:	08008cd1 	.word	0x08008cd1
 8008c2c:	08008cf7 	.word	0x08008cf7
 8008c30:	08008d2f 	.word	0x08008d2f
 8008c34:	08008d5b 	.word	0x08008d5b
 8008c38:	08008dad 	.word	0x08008dad
 8008c3c:	08008dcf 	.word	0x08008dcf
 8008c40:	08008e0b 	.word	0x08008e0b
 8008c44:	08008e33 	.word	0x08008e33
 8008c48:	08008e71 	.word	0x08008e71
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f103 0110 	add.w	r1, r3, #16
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	795b      	ldrb	r3, [r3, #5]
 8008c56:	461a      	mov	r2, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f945 	bl	8008ee8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	761a      	strb	r2, [r3, #24]
      break;
 8008c64:	e13b      	b.n	8008ede <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	795b      	ldrb	r3, [r3, #5]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fcc5 	bl	80095fc <USBH_LL_GetURBState>
 8008c72:	4603      	mov	r3, r0
 8008c74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d11e      	bne.n	8008cba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7c1b      	ldrb	r3, [r3, #16]
 8008c80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	8adb      	ldrh	r3, [r3, #22]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008c8e:	7b7b      	ldrb	r3, [r7, #13]
 8008c90:	2b80      	cmp	r3, #128	; 0x80
 8008c92:	d103      	bne.n	8008c9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2203      	movs	r2, #3
 8008c98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008c9a:	e117      	b.n	8008ecc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	761a      	strb	r2, [r3, #24]
      break;
 8008ca2:	e113      	b.n	8008ecc <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008ca4:	7b7b      	ldrb	r3, [r7, #13]
 8008ca6:	2b80      	cmp	r3, #128	; 0x80
 8008ca8:	d103      	bne.n	8008cb2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2209      	movs	r2, #9
 8008cae:	761a      	strb	r2, [r3, #24]
      break;
 8008cb0:	e10c      	b.n	8008ecc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2207      	movs	r2, #7
 8008cb6:	761a      	strb	r2, [r3, #24]
      break;
 8008cb8:	e108      	b.n	8008ecc <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d003      	beq.n	8008cc8 <USBH_HandleControl+0xcc>
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	f040 8102 	bne.w	8008ecc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	220b      	movs	r2, #11
 8008ccc:	761a      	strb	r2, [r3, #24]
      break;
 8008cce:	e0fd      	b.n	8008ecc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6899      	ldr	r1, [r3, #8]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	899a      	ldrh	r2, [r3, #12]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	791b      	ldrb	r3, [r3, #4]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f93c 	bl	8008f66 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	761a      	strb	r2, [r3, #24]
      break;
 8008cf4:	e0f3      	b.n	8008ede <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	791b      	ldrb	r3, [r3, #4]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fc7d 	bl	80095fc <USBH_LL_GetURBState>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d102      	bne.n	8008d12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2209      	movs	r2, #9
 8008d10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b05      	cmp	r3, #5
 8008d16:	d102      	bne.n	8008d1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d1c:	e0d8      	b.n	8008ed0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	f040 80d5 	bne.w	8008ed0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	220b      	movs	r2, #11
 8008d2a:	761a      	strb	r2, [r3, #24]
      break;
 8008d2c:	e0d0      	b.n	8008ed0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6899      	ldr	r1, [r3, #8]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	899a      	ldrh	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7958      	ldrb	r0, [r3, #5]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f8eb 	bl	8008f1c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2206      	movs	r2, #6
 8008d56:	761a      	strb	r2, [r3, #24]
      break;
 8008d58:	e0c1      	b.n	8008ede <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	795b      	ldrb	r3, [r3, #5]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fc4b 	bl	80095fc <USBH_LL_GetURBState>
 8008d66:	4603      	mov	r3, r0
 8008d68:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d103      	bne.n	8008d78 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2207      	movs	r2, #7
 8008d74:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d76:	e0ad      	b.n	8008ed4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b05      	cmp	r3, #5
 8008d7c:	d105      	bne.n	8008d8a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	220c      	movs	r2, #12
 8008d82:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008d84:	2303      	movs	r3, #3
 8008d86:	73fb      	strb	r3, [r7, #15]
      break;
 8008d88:	e0a4      	b.n	8008ed4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d103      	bne.n	8008d98 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2205      	movs	r2, #5
 8008d94:	761a      	strb	r2, [r3, #24]
      break;
 8008d96:	e09d      	b.n	8008ed4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	f040 809a 	bne.w	8008ed4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	220b      	movs	r2, #11
 8008da4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008da6:	2302      	movs	r3, #2
 8008da8:	73fb      	strb	r3, [r7, #15]
      break;
 8008daa:	e093      	b.n	8008ed4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	791b      	ldrb	r3, [r3, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	2100      	movs	r1, #0
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f8d6 	bl	8008f66 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2208      	movs	r2, #8
 8008dca:	761a      	strb	r2, [r3, #24]

      break;
 8008dcc:	e087      	b.n	8008ede <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fc11 	bl	80095fc <USBH_LL_GetURBState>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d105      	bne.n	8008df0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	220d      	movs	r2, #13
 8008de8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008dee:	e073      	b.n	8008ed8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d103      	bne.n	8008dfe <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	220b      	movs	r2, #11
 8008dfa:	761a      	strb	r2, [r3, #24]
      break;
 8008dfc:	e06c      	b.n	8008ed8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b05      	cmp	r3, #5
 8008e02:	d169      	bne.n	8008ed8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008e04:	2303      	movs	r3, #3
 8008e06:	73fb      	strb	r3, [r7, #15]
      break;
 8008e08:	e066      	b.n	8008ed8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	795a      	ldrb	r2, [r3, #5]
 8008e0e:	2301      	movs	r3, #1
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	4613      	mov	r3, r2
 8008e14:	2200      	movs	r2, #0
 8008e16:	2100      	movs	r1, #0
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f87f 	bl	8008f1c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	220a      	movs	r2, #10
 8008e2e:	761a      	strb	r2, [r3, #24]
      break;
 8008e30:	e055      	b.n	8008ede <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	795b      	ldrb	r3, [r3, #5]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fbdf 	bl	80095fc <USBH_LL_GetURBState>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d105      	bne.n	8008e54 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	220d      	movs	r2, #13
 8008e50:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e52:	e043      	b.n	8008edc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d103      	bne.n	8008e62 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2209      	movs	r2, #9
 8008e5e:	761a      	strb	r2, [r3, #24]
      break;
 8008e60:	e03c      	b.n	8008edc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d139      	bne.n	8008edc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	220b      	movs	r2, #11
 8008e6c:	761a      	strb	r2, [r3, #24]
      break;
 8008e6e:	e035      	b.n	8008edc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	7e5b      	ldrb	r3, [r3, #25]
 8008e74:	3301      	adds	r3, #1
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	765a      	strb	r2, [r3, #25]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7e5b      	ldrb	r3, [r3, #25]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d806      	bhi.n	8008e92 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008e90:	e025      	b.n	8008ede <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e98:	2106      	movs	r1, #6
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	795b      	ldrb	r3, [r3, #5]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f90c 	bl	80090c8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	791b      	ldrb	r3, [r3, #4]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f906 	bl	80090c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec6:	e00a      	b.n	8008ede <USBH_HandleControl+0x2e2>

    default:
      break;
 8008ec8:	bf00      	nop
 8008eca:	e008      	b.n	8008ede <USBH_HandleControl+0x2e2>
      break;
 8008ecc:	bf00      	nop
 8008ece:	e006      	b.n	8008ede <USBH_HandleControl+0x2e2>
      break;
 8008ed0:	bf00      	nop
 8008ed2:	e004      	b.n	8008ede <USBH_HandleControl+0x2e2>
      break;
 8008ed4:	bf00      	nop
 8008ed6:	e002      	b.n	8008ede <USBH_HandleControl+0x2e2>
      break;
 8008ed8:	bf00      	nop
 8008eda:	e000      	b.n	8008ede <USBH_HandleControl+0x2e2>
      break;
 8008edc:	bf00      	nop
  }

  return status;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ef6:	79f9      	ldrb	r1, [r7, #7]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9303      	str	r3, [sp, #12]
 8008efc:	2308      	movs	r3, #8
 8008efe:	9302      	str	r3, [sp, #8]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	2300      	movs	r3, #0
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fb44 	bl	800959a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af04      	add	r7, sp, #16
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4611      	mov	r1, r2
 8008f28:	461a      	mov	r2, r3
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	80fb      	strh	r3, [r7, #6]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f40:	7979      	ldrb	r1, [r7, #5]
 8008f42:	7e3b      	ldrb	r3, [r7, #24]
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	9302      	str	r3, [sp, #8]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	2300      	movs	r3, #0
 8008f54:	2200      	movs	r2, #0
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fb1f 	bl	800959a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b088      	sub	sp, #32
 8008f6a:	af04      	add	r7, sp, #16
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	4611      	mov	r1, r2
 8008f72:	461a      	mov	r2, r3
 8008f74:	460b      	mov	r3, r1
 8008f76:	80fb      	strh	r3, [r7, #6]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f7c:	7979      	ldrb	r1, [r7, #5]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9303      	str	r3, [sp, #12]
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2201      	movs	r2, #1
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 fb01 	bl	800959a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008f98:	2300      	movs	r3, #0

}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b088      	sub	sp, #32
 8008fa6:	af04      	add	r7, sp, #16
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	4611      	mov	r1, r2
 8008fae:	461a      	mov	r2, r3
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	80fb      	strh	r3, [r7, #6]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fc6:	7979      	ldrb	r1, [r7, #5]
 8008fc8:	7e3b      	ldrb	r3, [r7, #24]
 8008fca:	9303      	str	r3, [sp, #12]
 8008fcc:	88fb      	ldrh	r3, [r7, #6]
 8008fce:	9302      	str	r3, [sp, #8]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	2302      	movs	r3, #2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fadc 	bl	800959a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af04      	add	r7, sp, #16
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	80fb      	strh	r3, [r7, #6]
 8008ffe:	4613      	mov	r3, r2
 8009000:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009002:	7979      	ldrb	r1, [r7, #5]
 8009004:	2300      	movs	r3, #0
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	88fb      	ldrh	r3, [r7, #6]
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	2301      	movs	r3, #1
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	2302      	movs	r3, #2
 8009016:	2201      	movs	r2, #1
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fabe 	bl	800959a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af04      	add	r7, sp, #16
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	461a      	mov	r2, r3
 8009036:	4603      	mov	r3, r0
 8009038:	70fb      	strb	r3, [r7, #3]
 800903a:	460b      	mov	r3, r1
 800903c:	70bb      	strb	r3, [r7, #2]
 800903e:	4613      	mov	r3, r2
 8009040:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009042:	7878      	ldrb	r0, [r7, #1]
 8009044:	78ba      	ldrb	r2, [r7, #2]
 8009046:	78f9      	ldrb	r1, [r7, #3]
 8009048:	8b3b      	ldrh	r3, [r7, #24]
 800904a:	9302      	str	r3, [sp, #8]
 800904c:	7d3b      	ldrb	r3, [r7, #20]
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	7c3b      	ldrb	r3, [r7, #16]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	4603      	mov	r3, r0
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa51 	bl	80094fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa70 	bl	800955c <USBH_LL_ClosePipe>

  return USBH_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f836 	bl	8009104 <USBH_GetFreePipe>
 8009098:	4603      	mov	r3, r0
 800909a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800909c:	89fb      	ldrh	r3, [r7, #14]
 800909e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00a      	beq.n	80090bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	89fb      	ldrh	r3, [r7, #14]
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	33e0      	adds	r3, #224	; 0xe0
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	440b      	add	r3, r1
 80090ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80090bc:	89fb      	ldrh	r3, [r7, #14]
 80090be:	b2db      	uxtb	r3, r3
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	2b0a      	cmp	r3, #10
 80090d8:	d80d      	bhi.n	80090f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	33e0      	adds	r3, #224	; 0xe0
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	33e0      	adds	r3, #224	; 0xe0
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
 8009114:	e00f      	b.n	8009136 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	33e0      	adds	r3, #224	; 0xe0
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	b29b      	uxth	r3, r3
 800912e:	e007      	b.n	8009140 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	3301      	adds	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	2b0a      	cmp	r3, #10
 800913a:	d9ec      	bls.n	8009116 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800913c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009150:	2201      	movs	r2, #1
 8009152:	490e      	ldr	r1, [pc, #56]	; (800918c <MX_USB_HOST_Init+0x40>)
 8009154:	480e      	ldr	r0, [pc, #56]	; (8009190 <MX_USB_HOST_Init+0x44>)
 8009156:	f7fe fc9f 	bl	8007a98 <USBH_Init>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009160:	f7f7 fd88 	bl	8000c74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009164:	490b      	ldr	r1, [pc, #44]	; (8009194 <MX_USB_HOST_Init+0x48>)
 8009166:	480a      	ldr	r0, [pc, #40]	; (8009190 <MX_USB_HOST_Init+0x44>)
 8009168:	f7fe fd24 	bl	8007bb4 <USBH_RegisterClass>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009172:	f7f7 fd7f 	bl	8000c74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009176:	4806      	ldr	r0, [pc, #24]	; (8009190 <MX_USB_HOST_Init+0x44>)
 8009178:	f7fe fda8 	bl	8007ccc <USBH_Start>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009182:	f7f7 fd77 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009186:	bf00      	nop
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	080091ad 	.word	0x080091ad
 8009190:	20000284 	.word	0x20000284
 8009194:	2000000c 	.word	0x2000000c

08009198 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800919c:	4802      	ldr	r0, [pc, #8]	; (80091a8 <MX_USB_HOST_Process+0x10>)
 800919e:	f7fe fda5 	bl	8007cec <USBH_Process>
}
 80091a2:	bf00      	nop
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000284 	.word	0x20000284

080091ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b04      	cmp	r3, #4
 80091be:	d819      	bhi.n	80091f4 <USBH_UserProcess+0x48>
 80091c0:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <USBH_UserProcess+0x1c>)
 80091c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c6:	bf00      	nop
 80091c8:	080091f5 	.word	0x080091f5
 80091cc:	080091e5 	.word	0x080091e5
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080091ed 	.word	0x080091ed
 80091d8:	080091dd 	.word	0x080091dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <USBH_UserProcess+0x58>)
 80091de:	2203      	movs	r2, #3
 80091e0:	701a      	strb	r2, [r3, #0]
  break;
 80091e2:	e008      	b.n	80091f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80091e4:	4b07      	ldr	r3, [pc, #28]	; (8009204 <USBH_UserProcess+0x58>)
 80091e6:	2202      	movs	r2, #2
 80091e8:	701a      	strb	r2, [r3, #0]
  break;
 80091ea:	e004      	b.n	80091f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <USBH_UserProcess+0x58>)
 80091ee:	2201      	movs	r2, #1
 80091f0:	701a      	strb	r2, [r3, #0]
  break;
 80091f2:	e000      	b.n	80091f6 <USBH_UserProcess+0x4a>

  default:
  break;
 80091f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	200000b8 	.word	0x200000b8

08009208 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	; 0x28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009210:	f107 0314 	add.w	r3, r7, #20
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009228:	d147      	bne.n	80092ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800922a:	2300      	movs	r3, #0
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	4b25      	ldr	r3, [pc, #148]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	4a24      	ldr	r2, [pc, #144]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	6313      	str	r3, [r2, #48]	; 0x30
 800923a:	4b22      	ldr	r3, [pc, #136]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800924a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800924c:	2300      	movs	r3, #0
 800924e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	4619      	mov	r1, r3
 800925a:	481b      	ldr	r0, [pc, #108]	; (80092c8 <HAL_HCD_MspInit+0xc0>)
 800925c:	f7f8 fd16 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009260:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009266:	2302      	movs	r3, #2
 8009268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926a:	2300      	movs	r3, #0
 800926c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800926e:	2300      	movs	r3, #0
 8009270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009272:	230a      	movs	r3, #10
 8009274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009276:	f107 0314 	add.w	r3, r7, #20
 800927a:	4619      	mov	r1, r3
 800927c:	4812      	ldr	r0, [pc, #72]	; (80092c8 <HAL_HCD_MspInit+0xc0>)
 800927e:	f7f8 fd05 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009282:	4b10      	ldr	r3, [pc, #64]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	4a0f      	ldr	r2, [pc, #60]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	6353      	str	r3, [r2, #52]	; 0x34
 800928e:	2300      	movs	r3, #0
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	4b0c      	ldr	r3, [pc, #48]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 8009294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009296:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 8009298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800929c:	6453      	str	r3, [r2, #68]	; 0x44
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <HAL_HCD_MspInit+0xbc>)
 80092a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	2043      	movs	r0, #67	; 0x43
 80092b0:	f7f8 fc93 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092b4:	2043      	movs	r0, #67	; 0x43
 80092b6:	f7f8 fcac 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092ba:	bf00      	nop
 80092bc:	3728      	adds	r7, #40	; 0x28
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40023800 	.word	0x40023800
 80092c8:	40020000 	.word	0x40020000

080092cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff f8d9 	bl	8008492 <USBH_LL_IncTimer>
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff f911 	bl	800851e <USBH_LL_Connect>
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff f91a 	bl	800854c <USBH_LL_Disconnect>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
 800932c:	4613      	mov	r3, r2
 800932e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff f8cb 	bl	80084e6 <USBH_LL_PortEnabled>
} 
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff f8cb 	bl	8008502 <USBH_LL_PortDisabled>
} 
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009382:	2b01      	cmp	r3, #1
 8009384:	d12a      	bne.n	80093dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <USBH_LL_Init+0x74>)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a15      	ldr	r2, [pc, #84]	; (80093e8 <USBH_LL_Init+0x74>)
 8009392:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009396:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <USBH_LL_Init+0x74>)
 8009398:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800939c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800939e:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <USBH_LL_Init+0x74>)
 80093a0:	2208      	movs	r2, #8
 80093a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80093a4:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <USBH_LL_Init+0x74>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093aa:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <USBH_LL_Init+0x74>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80093b0:	4b0d      	ldr	r3, [pc, #52]	; (80093e8 <USBH_LL_Init+0x74>)
 80093b2:	2202      	movs	r2, #2
 80093b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <USBH_LL_Init+0x74>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80093bc:	480a      	ldr	r0, [pc, #40]	; (80093e8 <USBH_LL_Init+0x74>)
 80093be:	f7f8 fe3c 	bl	800203a <HAL_HCD_Init>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80093c8:	f7f7 fc54 	bl	8000c74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80093cc:	4806      	ldr	r0, [pc, #24]	; (80093e8 <USBH_LL_Init+0x74>)
 80093ce:	f7f9 fa3f 	bl	8002850 <HAL_HCD_GetCurrentFrame>
 80093d2:	4603      	mov	r3, r0
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff f84c 	bl	8008474 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	2000065c 	.word	0x2000065c

080093ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009402:	4618      	mov	r0, r3
 8009404:	f7f9 f9ac 	bl	8002760 <HAL_HCD_Start>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f95c 	bl	80096cc <USBH_Get_USB_Status>
 8009414:	4603      	mov	r3, r0
 8009416:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009418:	7bbb      	ldrb	r3, [r7, #14]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009438:	4618      	mov	r0, r3
 800943a:	f7f9 f9b4 	bl	80027a6 <HAL_HCD_Stop>
 800943e:	4603      	mov	r3, r0
 8009440:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f941 	bl	80096cc <USBH_Get_USB_Status>
 800944a:	4603      	mov	r3, r0
 800944c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800944e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009460:	2301      	movs	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800946a:	4618      	mov	r0, r3
 800946c:	f7f9 f9fe 	bl	800286c <HAL_HCD_GetCurrentSpeed>
 8009470:	4603      	mov	r3, r0
 8009472:	2b01      	cmp	r3, #1
 8009474:	d007      	beq.n	8009486 <USBH_LL_GetSpeed+0x2e>
 8009476:	2b01      	cmp	r3, #1
 8009478:	d302      	bcc.n	8009480 <USBH_LL_GetSpeed+0x28>
 800947a:	2b02      	cmp	r3, #2
 800947c:	d006      	beq.n	800948c <USBH_LL_GetSpeed+0x34>
 800947e:	e008      	b.n	8009492 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
    break;
 8009484:	e008      	b.n	8009498 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009486:	2301      	movs	r3, #1
 8009488:	73fb      	strb	r3, [r7, #15]
    break;
 800948a:	e005      	b.n	8009498 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800948c:	2302      	movs	r3, #2
 800948e:	73fb      	strb	r3, [r7, #15]
    break;
 8009490:	e002      	b.n	8009498 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009492:	2301      	movs	r3, #1
 8009494:	73fb      	strb	r3, [r7, #15]
    break;
 8009496:	bf00      	nop
  }
  return  speed;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7f9 f991 	bl	80027e0 <HAL_HCD_ResetPort>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f901 	bl	80096cc <USBH_Get_USB_Status>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094ea:	78fa      	ldrb	r2, [r7, #3]
 80094ec:	4611      	mov	r1, r2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f9 f999 	bl	8002826 <HAL_HCD_HC_GetXferCount>
 80094f4:	4603      	mov	r3, r0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094fe:	b590      	push	{r4, r7, lr}
 8009500:	b089      	sub	sp, #36	; 0x24
 8009502:	af04      	add	r7, sp, #16
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	461a      	mov	r2, r3
 800950c:	4603      	mov	r3, r0
 800950e:	70fb      	strb	r3, [r7, #3]
 8009510:	460b      	mov	r3, r1
 8009512:	70bb      	strb	r3, [r7, #2]
 8009514:	4613      	mov	r3, r2
 8009516:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009526:	787c      	ldrb	r4, [r7, #1]
 8009528:	78ba      	ldrb	r2, [r7, #2]
 800952a:	78f9      	ldrb	r1, [r7, #3]
 800952c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	4623      	mov	r3, r4
 800953e:	f7f8 fdde 	bl	80020fe <HAL_HCD_HC_Init>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f8bf 	bl	80096cc <USBH_Get_USB_Status>
 800954e:	4603      	mov	r3, r0
 8009550:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009552:	7bbb      	ldrb	r3, [r7, #14]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	bd90      	pop	{r4, r7, pc}

0800955c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7f8 fe57 	bl	800222e <HAL_HCD_HC_Halt>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f8a0 	bl	80096cc <USBH_Get_USB_Status>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009590:	7bbb      	ldrb	r3, [r7, #14]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800959a:	b590      	push	{r4, r7, lr}
 800959c:	b089      	sub	sp, #36	; 0x24
 800959e:	af04      	add	r7, sp, #16
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	461a      	mov	r2, r3
 80095a8:	4603      	mov	r3, r0
 80095aa:	70fb      	strb	r3, [r7, #3]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70bb      	strb	r3, [r7, #2]
 80095b0:	4613      	mov	r3, r2
 80095b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095c2:	787c      	ldrb	r4, [r7, #1]
 80095c4:	78ba      	ldrb	r2, [r7, #2]
 80095c6:	78f9      	ldrb	r1, [r7, #3]
 80095c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095d0:	9302      	str	r3, [sp, #8]
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4623      	mov	r3, r4
 80095de:	f7f8 fe49 	bl	8002274 <HAL_HCD_HC_SubmitRequest>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f86f 	bl	80096cc <USBH_Get_USB_Status>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd90      	pop	{r4, r7, pc}

080095fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f7f9 f8f2 	bl	80027fc <HAL_HCD_HC_GetURBState>
 8009618:	4603      	mov	r3, r0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009634:	2b01      	cmp	r3, #1
 8009636:	d103      	bne.n	8009640 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009638:	78fb      	ldrb	r3, [r7, #3]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f872 	bl	8009724 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009640:	20c8      	movs	r0, #200	; 0xc8
 8009642:	f7f7 fe13 	bl	800126c <HAL_Delay>
  return USBH_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
 800965c:	4613      	mov	r3, r2
 800965e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009666:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	440b      	add	r3, r1
 8009676:	333b      	adds	r3, #59	; 0x3b
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	68f9      	ldr	r1, [r7, #12]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	440b      	add	r3, r1
 800968c:	3350      	adds	r3, #80	; 0x50
 800968e:	78ba      	ldrb	r2, [r7, #2]
 8009690:	701a      	strb	r2, [r3, #0]
 8009692:	e009      	b.n	80096a8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009694:	78fa      	ldrb	r2, [r7, #3]
 8009696:	68f9      	ldr	r1, [r7, #12]
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	440b      	add	r3, r1
 80096a2:	3351      	adds	r3, #81	; 0x51
 80096a4:	78ba      	ldrb	r2, [r7, #2]
 80096a6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7f7 fdd4 	bl	800126c <HAL_Delay>
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d817      	bhi.n	8009710 <USBH_Get_USB_Status+0x44>
 80096e0:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <USBH_Get_USB_Status+0x1c>)
 80096e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e6:	bf00      	nop
 80096e8:	080096f9 	.word	0x080096f9
 80096ec:	080096ff 	.word	0x080096ff
 80096f0:	08009705 	.word	0x08009705
 80096f4:	0800970b 	.word	0x0800970b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73fb      	strb	r3, [r7, #15]
    break;
 80096fc:	e00b      	b.n	8009716 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80096fe:	2302      	movs	r3, #2
 8009700:	73fb      	strb	r3, [r7, #15]
    break;
 8009702:	e008      	b.n	8009716 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009704:	2301      	movs	r3, #1
 8009706:	73fb      	strb	r3, [r7, #15]
    break;
 8009708:	e005      	b.n	8009716 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800970a:	2302      	movs	r3, #2
 800970c:	73fb      	strb	r3, [r7, #15]
    break;
 800970e:	e002      	b.n	8009716 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009710:	2302      	movs	r3, #2
 8009712:	73fb      	strb	r3, [r7, #15]
    break;
 8009714:	bf00      	nop
  }
  return usb_status;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009738:	2301      	movs	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
 800973c:	e001      	b.n	8009742 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	461a      	mov	r2, r3
 8009746:	2101      	movs	r1, #1
 8009748:	4803      	ldr	r0, [pc, #12]	; (8009758 <MX_DriverVbusFS+0x34>)
 800974a:	f7f8 fc39 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40020800 	.word	0x40020800

0800975c <__errno>:
 800975c:	4b01      	ldr	r3, [pc, #4]	; (8009764 <__errno+0x8>)
 800975e:	6818      	ldr	r0, [r3, #0]
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	2000002c 	.word	0x2000002c

08009768 <__libc_init_array>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4e0d      	ldr	r6, [pc, #52]	; (80097a0 <__libc_init_array+0x38>)
 800976c:	4c0d      	ldr	r4, [pc, #52]	; (80097a4 <__libc_init_array+0x3c>)
 800976e:	1ba4      	subs	r4, r4, r6
 8009770:	10a4      	asrs	r4, r4, #2
 8009772:	2500      	movs	r5, #0
 8009774:	42a5      	cmp	r5, r4
 8009776:	d109      	bne.n	800978c <__libc_init_array+0x24>
 8009778:	4e0b      	ldr	r6, [pc, #44]	; (80097a8 <__libc_init_array+0x40>)
 800977a:	4c0c      	ldr	r4, [pc, #48]	; (80097ac <__libc_init_array+0x44>)
 800977c:	f000 ff14 	bl	800a5a8 <_init>
 8009780:	1ba4      	subs	r4, r4, r6
 8009782:	10a4      	asrs	r4, r4, #2
 8009784:	2500      	movs	r5, #0
 8009786:	42a5      	cmp	r5, r4
 8009788:	d105      	bne.n	8009796 <__libc_init_array+0x2e>
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009790:	4798      	blx	r3
 8009792:	3501      	adds	r5, #1
 8009794:	e7ee      	b.n	8009774 <__libc_init_array+0xc>
 8009796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800979a:	4798      	blx	r3
 800979c:	3501      	adds	r5, #1
 800979e:	e7f2      	b.n	8009786 <__libc_init_array+0x1e>
 80097a0:	0800a694 	.word	0x0800a694
 80097a4:	0800a694 	.word	0x0800a694
 80097a8:	0800a694 	.word	0x0800a694
 80097ac:	0800a698 	.word	0x0800a698

080097b0 <malloc>:
 80097b0:	4b02      	ldr	r3, [pc, #8]	; (80097bc <malloc+0xc>)
 80097b2:	4601      	mov	r1, r0
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	f000 b861 	b.w	800987c <_malloc_r>
 80097ba:	bf00      	nop
 80097bc:	2000002c 	.word	0x2000002c

080097c0 <free>:
 80097c0:	4b02      	ldr	r3, [pc, #8]	; (80097cc <free+0xc>)
 80097c2:	4601      	mov	r1, r0
 80097c4:	6818      	ldr	r0, [r3, #0]
 80097c6:	f000 b80b 	b.w	80097e0 <_free_r>
 80097ca:	bf00      	nop
 80097cc:	2000002c 	.word	0x2000002c

080097d0 <memset>:
 80097d0:	4402      	add	r2, r0
 80097d2:	4603      	mov	r3, r0
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d100      	bne.n	80097da <memset+0xa>
 80097d8:	4770      	bx	lr
 80097da:	f803 1b01 	strb.w	r1, [r3], #1
 80097de:	e7f9      	b.n	80097d4 <memset+0x4>

080097e0 <_free_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4605      	mov	r5, r0
 80097e4:	2900      	cmp	r1, #0
 80097e6:	d045      	beq.n	8009874 <_free_r+0x94>
 80097e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ec:	1f0c      	subs	r4, r1, #4
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfb8      	it	lt
 80097f2:	18e4      	addlt	r4, r4, r3
 80097f4:	f000 f98e 	bl	8009b14 <__malloc_lock>
 80097f8:	4a1f      	ldr	r2, [pc, #124]	; (8009878 <_free_r+0x98>)
 80097fa:	6813      	ldr	r3, [r2, #0]
 80097fc:	4610      	mov	r0, r2
 80097fe:	b933      	cbnz	r3, 800980e <_free_r+0x2e>
 8009800:	6063      	str	r3, [r4, #4]
 8009802:	6014      	str	r4, [r2, #0]
 8009804:	4628      	mov	r0, r5
 8009806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800980a:	f000 b984 	b.w	8009b16 <__malloc_unlock>
 800980e:	42a3      	cmp	r3, r4
 8009810:	d90c      	bls.n	800982c <_free_r+0x4c>
 8009812:	6821      	ldr	r1, [r4, #0]
 8009814:	1862      	adds	r2, r4, r1
 8009816:	4293      	cmp	r3, r2
 8009818:	bf04      	itt	eq
 800981a:	681a      	ldreq	r2, [r3, #0]
 800981c:	685b      	ldreq	r3, [r3, #4]
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	bf04      	itt	eq
 8009822:	1852      	addeq	r2, r2, r1
 8009824:	6022      	streq	r2, [r4, #0]
 8009826:	6004      	str	r4, [r0, #0]
 8009828:	e7ec      	b.n	8009804 <_free_r+0x24>
 800982a:	4613      	mov	r3, r2
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	b10a      	cbz	r2, 8009834 <_free_r+0x54>
 8009830:	42a2      	cmp	r2, r4
 8009832:	d9fa      	bls.n	800982a <_free_r+0x4a>
 8009834:	6819      	ldr	r1, [r3, #0]
 8009836:	1858      	adds	r0, r3, r1
 8009838:	42a0      	cmp	r0, r4
 800983a:	d10b      	bne.n	8009854 <_free_r+0x74>
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	4401      	add	r1, r0
 8009840:	1858      	adds	r0, r3, r1
 8009842:	4282      	cmp	r2, r0
 8009844:	6019      	str	r1, [r3, #0]
 8009846:	d1dd      	bne.n	8009804 <_free_r+0x24>
 8009848:	6810      	ldr	r0, [r2, #0]
 800984a:	6852      	ldr	r2, [r2, #4]
 800984c:	605a      	str	r2, [r3, #4]
 800984e:	4401      	add	r1, r0
 8009850:	6019      	str	r1, [r3, #0]
 8009852:	e7d7      	b.n	8009804 <_free_r+0x24>
 8009854:	d902      	bls.n	800985c <_free_r+0x7c>
 8009856:	230c      	movs	r3, #12
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	e7d3      	b.n	8009804 <_free_r+0x24>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	1821      	adds	r1, r4, r0
 8009860:	428a      	cmp	r2, r1
 8009862:	bf04      	itt	eq
 8009864:	6811      	ldreq	r1, [r2, #0]
 8009866:	6852      	ldreq	r2, [r2, #4]
 8009868:	6062      	str	r2, [r4, #4]
 800986a:	bf04      	itt	eq
 800986c:	1809      	addeq	r1, r1, r0
 800986e:	6021      	streq	r1, [r4, #0]
 8009870:	605c      	str	r4, [r3, #4]
 8009872:	e7c7      	b.n	8009804 <_free_r+0x24>
 8009874:	bd38      	pop	{r3, r4, r5, pc}
 8009876:	bf00      	nop
 8009878:	200000bc 	.word	0x200000bc

0800987c <_malloc_r>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	1ccd      	adds	r5, r1, #3
 8009880:	f025 0503 	bic.w	r5, r5, #3
 8009884:	3508      	adds	r5, #8
 8009886:	2d0c      	cmp	r5, #12
 8009888:	bf38      	it	cc
 800988a:	250c      	movcc	r5, #12
 800988c:	2d00      	cmp	r5, #0
 800988e:	4606      	mov	r6, r0
 8009890:	db01      	blt.n	8009896 <_malloc_r+0x1a>
 8009892:	42a9      	cmp	r1, r5
 8009894:	d903      	bls.n	800989e <_malloc_r+0x22>
 8009896:	230c      	movs	r3, #12
 8009898:	6033      	str	r3, [r6, #0]
 800989a:	2000      	movs	r0, #0
 800989c:	bd70      	pop	{r4, r5, r6, pc}
 800989e:	f000 f939 	bl	8009b14 <__malloc_lock>
 80098a2:	4a21      	ldr	r2, [pc, #132]	; (8009928 <_malloc_r+0xac>)
 80098a4:	6814      	ldr	r4, [r2, #0]
 80098a6:	4621      	mov	r1, r4
 80098a8:	b991      	cbnz	r1, 80098d0 <_malloc_r+0x54>
 80098aa:	4c20      	ldr	r4, [pc, #128]	; (800992c <_malloc_r+0xb0>)
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	b91b      	cbnz	r3, 80098b8 <_malloc_r+0x3c>
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 f855 	bl	8009960 <_sbrk_r>
 80098b6:	6020      	str	r0, [r4, #0]
 80098b8:	4629      	mov	r1, r5
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 f850 	bl	8009960 <_sbrk_r>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d124      	bne.n	800990e <_malloc_r+0x92>
 80098c4:	230c      	movs	r3, #12
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 f924 	bl	8009b16 <__malloc_unlock>
 80098ce:	e7e4      	b.n	800989a <_malloc_r+0x1e>
 80098d0:	680b      	ldr	r3, [r1, #0]
 80098d2:	1b5b      	subs	r3, r3, r5
 80098d4:	d418      	bmi.n	8009908 <_malloc_r+0x8c>
 80098d6:	2b0b      	cmp	r3, #11
 80098d8:	d90f      	bls.n	80098fa <_malloc_r+0x7e>
 80098da:	600b      	str	r3, [r1, #0]
 80098dc:	50cd      	str	r5, [r1, r3]
 80098de:	18cc      	adds	r4, r1, r3
 80098e0:	4630      	mov	r0, r6
 80098e2:	f000 f918 	bl	8009b16 <__malloc_unlock>
 80098e6:	f104 000b 	add.w	r0, r4, #11
 80098ea:	1d23      	adds	r3, r4, #4
 80098ec:	f020 0007 	bic.w	r0, r0, #7
 80098f0:	1ac3      	subs	r3, r0, r3
 80098f2:	d0d3      	beq.n	800989c <_malloc_r+0x20>
 80098f4:	425a      	negs	r2, r3
 80098f6:	50e2      	str	r2, [r4, r3]
 80098f8:	e7d0      	b.n	800989c <_malloc_r+0x20>
 80098fa:	428c      	cmp	r4, r1
 80098fc:	684b      	ldr	r3, [r1, #4]
 80098fe:	bf16      	itet	ne
 8009900:	6063      	strne	r3, [r4, #4]
 8009902:	6013      	streq	r3, [r2, #0]
 8009904:	460c      	movne	r4, r1
 8009906:	e7eb      	b.n	80098e0 <_malloc_r+0x64>
 8009908:	460c      	mov	r4, r1
 800990a:	6849      	ldr	r1, [r1, #4]
 800990c:	e7cc      	b.n	80098a8 <_malloc_r+0x2c>
 800990e:	1cc4      	adds	r4, r0, #3
 8009910:	f024 0403 	bic.w	r4, r4, #3
 8009914:	42a0      	cmp	r0, r4
 8009916:	d005      	beq.n	8009924 <_malloc_r+0xa8>
 8009918:	1a21      	subs	r1, r4, r0
 800991a:	4630      	mov	r0, r6
 800991c:	f000 f820 	bl	8009960 <_sbrk_r>
 8009920:	3001      	adds	r0, #1
 8009922:	d0cf      	beq.n	80098c4 <_malloc_r+0x48>
 8009924:	6025      	str	r5, [r4, #0]
 8009926:	e7db      	b.n	80098e0 <_malloc_r+0x64>
 8009928:	200000bc 	.word	0x200000bc
 800992c:	200000c0 	.word	0x200000c0

08009930 <iprintf>:
 8009930:	b40f      	push	{r0, r1, r2, r3}
 8009932:	4b0a      	ldr	r3, [pc, #40]	; (800995c <iprintf+0x2c>)
 8009934:	b513      	push	{r0, r1, r4, lr}
 8009936:	681c      	ldr	r4, [r3, #0]
 8009938:	b124      	cbz	r4, 8009944 <iprintf+0x14>
 800993a:	69a3      	ldr	r3, [r4, #24]
 800993c:	b913      	cbnz	r3, 8009944 <iprintf+0x14>
 800993e:	4620      	mov	r0, r4
 8009940:	f000 f85e 	bl	8009a00 <__sinit>
 8009944:	ab05      	add	r3, sp, #20
 8009946:	9a04      	ldr	r2, [sp, #16]
 8009948:	68a1      	ldr	r1, [r4, #8]
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	4620      	mov	r0, r4
 800994e:	f000 f90d 	bl	8009b6c <_vfiprintf_r>
 8009952:	b002      	add	sp, #8
 8009954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009958:	b004      	add	sp, #16
 800995a:	4770      	bx	lr
 800995c:	2000002c 	.word	0x2000002c

08009960 <_sbrk_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4c06      	ldr	r4, [pc, #24]	; (800997c <_sbrk_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4605      	mov	r5, r0
 8009968:	4608      	mov	r0, r1
 800996a:	6023      	str	r3, [r4, #0]
 800996c:	f7f7 fad6 	bl	8000f1c <_sbrk>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_sbrk_r+0x1a>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	b103      	cbz	r3, 800997a <_sbrk_r+0x1a>
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000920 	.word	0x20000920

08009980 <std>:
 8009980:	2300      	movs	r3, #0
 8009982:	b510      	push	{r4, lr}
 8009984:	4604      	mov	r4, r0
 8009986:	e9c0 3300 	strd	r3, r3, [r0]
 800998a:	6083      	str	r3, [r0, #8]
 800998c:	8181      	strh	r1, [r0, #12]
 800998e:	6643      	str	r3, [r0, #100]	; 0x64
 8009990:	81c2      	strh	r2, [r0, #14]
 8009992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009996:	6183      	str	r3, [r0, #24]
 8009998:	4619      	mov	r1, r3
 800999a:	2208      	movs	r2, #8
 800999c:	305c      	adds	r0, #92	; 0x5c
 800999e:	f7ff ff17 	bl	80097d0 <memset>
 80099a2:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <std+0x38>)
 80099a4:	6263      	str	r3, [r4, #36]	; 0x24
 80099a6:	4b05      	ldr	r3, [pc, #20]	; (80099bc <std+0x3c>)
 80099a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80099aa:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <std+0x40>)
 80099ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099ae:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <std+0x44>)
 80099b0:	6224      	str	r4, [r4, #32]
 80099b2:	6323      	str	r3, [r4, #48]	; 0x30
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	bf00      	nop
 80099b8:	0800a0a9 	.word	0x0800a0a9
 80099bc:	0800a0cb 	.word	0x0800a0cb
 80099c0:	0800a103 	.word	0x0800a103
 80099c4:	0800a127 	.word	0x0800a127

080099c8 <_cleanup_r>:
 80099c8:	4901      	ldr	r1, [pc, #4]	; (80099d0 <_cleanup_r+0x8>)
 80099ca:	f000 b885 	b.w	8009ad8 <_fwalk_reent>
 80099ce:	bf00      	nop
 80099d0:	0800a401 	.word	0x0800a401

080099d4 <__sfmoreglue>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	1e4a      	subs	r2, r1, #1
 80099d8:	2568      	movs	r5, #104	; 0x68
 80099da:	4355      	muls	r5, r2
 80099dc:	460e      	mov	r6, r1
 80099de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099e2:	f7ff ff4b 	bl	800987c <_malloc_r>
 80099e6:	4604      	mov	r4, r0
 80099e8:	b140      	cbz	r0, 80099fc <__sfmoreglue+0x28>
 80099ea:	2100      	movs	r1, #0
 80099ec:	e9c0 1600 	strd	r1, r6, [r0]
 80099f0:	300c      	adds	r0, #12
 80099f2:	60a0      	str	r0, [r4, #8]
 80099f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099f8:	f7ff feea 	bl	80097d0 <memset>
 80099fc:	4620      	mov	r0, r4
 80099fe:	bd70      	pop	{r4, r5, r6, pc}

08009a00 <__sinit>:
 8009a00:	6983      	ldr	r3, [r0, #24]
 8009a02:	b510      	push	{r4, lr}
 8009a04:	4604      	mov	r4, r0
 8009a06:	bb33      	cbnz	r3, 8009a56 <__sinit+0x56>
 8009a08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009a0c:	6503      	str	r3, [r0, #80]	; 0x50
 8009a0e:	4b12      	ldr	r3, [pc, #72]	; (8009a58 <__sinit+0x58>)
 8009a10:	4a12      	ldr	r2, [pc, #72]	; (8009a5c <__sinit+0x5c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6282      	str	r2, [r0, #40]	; 0x28
 8009a16:	4298      	cmp	r0, r3
 8009a18:	bf04      	itt	eq
 8009a1a:	2301      	moveq	r3, #1
 8009a1c:	6183      	streq	r3, [r0, #24]
 8009a1e:	f000 f81f 	bl	8009a60 <__sfp>
 8009a22:	6060      	str	r0, [r4, #4]
 8009a24:	4620      	mov	r0, r4
 8009a26:	f000 f81b 	bl	8009a60 <__sfp>
 8009a2a:	60a0      	str	r0, [r4, #8]
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f000 f817 	bl	8009a60 <__sfp>
 8009a32:	2200      	movs	r2, #0
 8009a34:	60e0      	str	r0, [r4, #12]
 8009a36:	2104      	movs	r1, #4
 8009a38:	6860      	ldr	r0, [r4, #4]
 8009a3a:	f7ff ffa1 	bl	8009980 <std>
 8009a3e:	2201      	movs	r2, #1
 8009a40:	2109      	movs	r1, #9
 8009a42:	68a0      	ldr	r0, [r4, #8]
 8009a44:	f7ff ff9c 	bl	8009980 <std>
 8009a48:	2202      	movs	r2, #2
 8009a4a:	2112      	movs	r1, #18
 8009a4c:	68e0      	ldr	r0, [r4, #12]
 8009a4e:	f7ff ff97 	bl	8009980 <std>
 8009a52:	2301      	movs	r3, #1
 8009a54:	61a3      	str	r3, [r4, #24]
 8009a56:	bd10      	pop	{r4, pc}
 8009a58:	0800a5f4 	.word	0x0800a5f4
 8009a5c:	080099c9 	.word	0x080099c9

08009a60 <__sfp>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	4b1b      	ldr	r3, [pc, #108]	; (8009ad0 <__sfp+0x70>)
 8009a64:	681e      	ldr	r6, [r3, #0]
 8009a66:	69b3      	ldr	r3, [r6, #24]
 8009a68:	4607      	mov	r7, r0
 8009a6a:	b913      	cbnz	r3, 8009a72 <__sfp+0x12>
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff ffc7 	bl	8009a00 <__sinit>
 8009a72:	3648      	adds	r6, #72	; 0x48
 8009a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	d503      	bpl.n	8009a84 <__sfp+0x24>
 8009a7c:	6833      	ldr	r3, [r6, #0]
 8009a7e:	b133      	cbz	r3, 8009a8e <__sfp+0x2e>
 8009a80:	6836      	ldr	r6, [r6, #0]
 8009a82:	e7f7      	b.n	8009a74 <__sfp+0x14>
 8009a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a88:	b16d      	cbz	r5, 8009aa6 <__sfp+0x46>
 8009a8a:	3468      	adds	r4, #104	; 0x68
 8009a8c:	e7f4      	b.n	8009a78 <__sfp+0x18>
 8009a8e:	2104      	movs	r1, #4
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7ff ff9f 	bl	80099d4 <__sfmoreglue>
 8009a96:	6030      	str	r0, [r6, #0]
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d1f1      	bne.n	8009a80 <__sfp+0x20>
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	603b      	str	r3, [r7, #0]
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <__sfp+0x74>)
 8009aa8:	6665      	str	r5, [r4, #100]	; 0x64
 8009aaa:	e9c4 5500 	strd	r5, r5, [r4]
 8009aae:	60a5      	str	r5, [r4, #8]
 8009ab0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009ab4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	4629      	mov	r1, r5
 8009abc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ac0:	f7ff fe86 	bl	80097d0 <memset>
 8009ac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009acc:	e7e9      	b.n	8009aa2 <__sfp+0x42>
 8009ace:	bf00      	nop
 8009ad0:	0800a5f4 	.word	0x0800a5f4
 8009ad4:	ffff0001 	.word	0xffff0001

08009ad8 <_fwalk_reent>:
 8009ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009adc:	4680      	mov	r8, r0
 8009ade:	4689      	mov	r9, r1
 8009ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ae4:	2600      	movs	r6, #0
 8009ae6:	b914      	cbnz	r4, 8009aee <_fwalk_reent+0x16>
 8009ae8:	4630      	mov	r0, r6
 8009aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009af2:	3f01      	subs	r7, #1
 8009af4:	d501      	bpl.n	8009afa <_fwalk_reent+0x22>
 8009af6:	6824      	ldr	r4, [r4, #0]
 8009af8:	e7f5      	b.n	8009ae6 <_fwalk_reent+0xe>
 8009afa:	89ab      	ldrh	r3, [r5, #12]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d907      	bls.n	8009b10 <_fwalk_reent+0x38>
 8009b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b04:	3301      	adds	r3, #1
 8009b06:	d003      	beq.n	8009b10 <_fwalk_reent+0x38>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	47c8      	blx	r9
 8009b0e:	4306      	orrs	r6, r0
 8009b10:	3568      	adds	r5, #104	; 0x68
 8009b12:	e7ee      	b.n	8009af2 <_fwalk_reent+0x1a>

08009b14 <__malloc_lock>:
 8009b14:	4770      	bx	lr

08009b16 <__malloc_unlock>:
 8009b16:	4770      	bx	lr

08009b18 <__sfputc_r>:
 8009b18:	6893      	ldr	r3, [r2, #8]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	b410      	push	{r4}
 8009b20:	6093      	str	r3, [r2, #8]
 8009b22:	da08      	bge.n	8009b36 <__sfputc_r+0x1e>
 8009b24:	6994      	ldr	r4, [r2, #24]
 8009b26:	42a3      	cmp	r3, r4
 8009b28:	db01      	blt.n	8009b2e <__sfputc_r+0x16>
 8009b2a:	290a      	cmp	r1, #10
 8009b2c:	d103      	bne.n	8009b36 <__sfputc_r+0x1e>
 8009b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b32:	f000 bafd 	b.w	800a130 <__swbuf_r>
 8009b36:	6813      	ldr	r3, [r2, #0]
 8009b38:	1c58      	adds	r0, r3, #1
 8009b3a:	6010      	str	r0, [r2, #0]
 8009b3c:	7019      	strb	r1, [r3, #0]
 8009b3e:	4608      	mov	r0, r1
 8009b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <__sfputs_r>:
 8009b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b48:	4606      	mov	r6, r0
 8009b4a:	460f      	mov	r7, r1
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	18d5      	adds	r5, r2, r3
 8009b50:	42ac      	cmp	r4, r5
 8009b52:	d101      	bne.n	8009b58 <__sfputs_r+0x12>
 8009b54:	2000      	movs	r0, #0
 8009b56:	e007      	b.n	8009b68 <__sfputs_r+0x22>
 8009b58:	463a      	mov	r2, r7
 8009b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff ffda 	bl	8009b18 <__sfputc_r>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d1f3      	bne.n	8009b50 <__sfputs_r+0xa>
 8009b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b6c <_vfiprintf_r>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	460c      	mov	r4, r1
 8009b72:	b09d      	sub	sp, #116	; 0x74
 8009b74:	4617      	mov	r7, r2
 8009b76:	461d      	mov	r5, r3
 8009b78:	4606      	mov	r6, r0
 8009b7a:	b118      	cbz	r0, 8009b84 <_vfiprintf_r+0x18>
 8009b7c:	6983      	ldr	r3, [r0, #24]
 8009b7e:	b90b      	cbnz	r3, 8009b84 <_vfiprintf_r+0x18>
 8009b80:	f7ff ff3e 	bl	8009a00 <__sinit>
 8009b84:	4b7c      	ldr	r3, [pc, #496]	; (8009d78 <_vfiprintf_r+0x20c>)
 8009b86:	429c      	cmp	r4, r3
 8009b88:	d158      	bne.n	8009c3c <_vfiprintf_r+0xd0>
 8009b8a:	6874      	ldr	r4, [r6, #4]
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	0718      	lsls	r0, r3, #28
 8009b90:	d55e      	bpl.n	8009c50 <_vfiprintf_r+0xe4>
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d05b      	beq.n	8009c50 <_vfiprintf_r+0xe4>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ba2:	2330      	movs	r3, #48	; 0x30
 8009ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba8:	9503      	str	r5, [sp, #12]
 8009baa:	f04f 0b01 	mov.w	fp, #1
 8009bae:	46b8      	mov	r8, r7
 8009bb0:	4645      	mov	r5, r8
 8009bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bb6:	b10b      	cbz	r3, 8009bbc <_vfiprintf_r+0x50>
 8009bb8:	2b25      	cmp	r3, #37	; 0x25
 8009bba:	d154      	bne.n	8009c66 <_vfiprintf_r+0xfa>
 8009bbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8009bc0:	d00b      	beq.n	8009bda <_vfiprintf_r+0x6e>
 8009bc2:	4653      	mov	r3, sl
 8009bc4:	463a      	mov	r2, r7
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff ffbc 	bl	8009b46 <__sfputs_r>
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f000 80c2 	beq.w	8009d58 <_vfiprintf_r+0x1ec>
 8009bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd6:	4453      	add	r3, sl
 8009bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bda:	f898 3000 	ldrb.w	r3, [r8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 80ba 	beq.w	8009d58 <_vfiprintf_r+0x1ec>
 8009be4:	2300      	movs	r3, #0
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	9307      	str	r3, [sp, #28]
 8009bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8009bf8:	46a8      	mov	r8, r5
 8009bfa:	2205      	movs	r2, #5
 8009bfc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009c00:	485e      	ldr	r0, [pc, #376]	; (8009d7c <_vfiprintf_r+0x210>)
 8009c02:	f7f6 fae5 	bl	80001d0 <memchr>
 8009c06:	9b04      	ldr	r3, [sp, #16]
 8009c08:	bb78      	cbnz	r0, 8009c6a <_vfiprintf_r+0xfe>
 8009c0a:	06d9      	lsls	r1, r3, #27
 8009c0c:	bf44      	itt	mi
 8009c0e:	2220      	movmi	r2, #32
 8009c10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c14:	071a      	lsls	r2, r3, #28
 8009c16:	bf44      	itt	mi
 8009c18:	222b      	movmi	r2, #43	; 0x2b
 8009c1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c1e:	782a      	ldrb	r2, [r5, #0]
 8009c20:	2a2a      	cmp	r2, #42	; 0x2a
 8009c22:	d02a      	beq.n	8009c7a <_vfiprintf_r+0x10e>
 8009c24:	9a07      	ldr	r2, [sp, #28]
 8009c26:	46a8      	mov	r8, r5
 8009c28:	2000      	movs	r0, #0
 8009c2a:	250a      	movs	r5, #10
 8009c2c:	4641      	mov	r1, r8
 8009c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c32:	3b30      	subs	r3, #48	; 0x30
 8009c34:	2b09      	cmp	r3, #9
 8009c36:	d969      	bls.n	8009d0c <_vfiprintf_r+0x1a0>
 8009c38:	b360      	cbz	r0, 8009c94 <_vfiprintf_r+0x128>
 8009c3a:	e024      	b.n	8009c86 <_vfiprintf_r+0x11a>
 8009c3c:	4b50      	ldr	r3, [pc, #320]	; (8009d80 <_vfiprintf_r+0x214>)
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d101      	bne.n	8009c46 <_vfiprintf_r+0xda>
 8009c42:	68b4      	ldr	r4, [r6, #8]
 8009c44:	e7a2      	b.n	8009b8c <_vfiprintf_r+0x20>
 8009c46:	4b4f      	ldr	r3, [pc, #316]	; (8009d84 <_vfiprintf_r+0x218>)
 8009c48:	429c      	cmp	r4, r3
 8009c4a:	bf08      	it	eq
 8009c4c:	68f4      	ldreq	r4, [r6, #12]
 8009c4e:	e79d      	b.n	8009b8c <_vfiprintf_r+0x20>
 8009c50:	4621      	mov	r1, r4
 8009c52:	4630      	mov	r0, r6
 8009c54:	f000 fad0 	bl	800a1f8 <__swsetup_r>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d09d      	beq.n	8009b98 <_vfiprintf_r+0x2c>
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	b01d      	add	sp, #116	; 0x74
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c66:	46a8      	mov	r8, r5
 8009c68:	e7a2      	b.n	8009bb0 <_vfiprintf_r+0x44>
 8009c6a:	4a44      	ldr	r2, [pc, #272]	; (8009d7c <_vfiprintf_r+0x210>)
 8009c6c:	1a80      	subs	r0, r0, r2
 8009c6e:	fa0b f000 	lsl.w	r0, fp, r0
 8009c72:	4318      	orrs	r0, r3
 8009c74:	9004      	str	r0, [sp, #16]
 8009c76:	4645      	mov	r5, r8
 8009c78:	e7be      	b.n	8009bf8 <_vfiprintf_r+0x8c>
 8009c7a:	9a03      	ldr	r2, [sp, #12]
 8009c7c:	1d11      	adds	r1, r2, #4
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	9103      	str	r1, [sp, #12]
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	db01      	blt.n	8009c8a <_vfiprintf_r+0x11e>
 8009c86:	9207      	str	r2, [sp, #28]
 8009c88:	e004      	b.n	8009c94 <_vfiprintf_r+0x128>
 8009c8a:	4252      	negs	r2, r2
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	9207      	str	r2, [sp, #28]
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	f898 3000 	ldrb.w	r3, [r8]
 8009c98:	2b2e      	cmp	r3, #46	; 0x2e
 8009c9a:	d10e      	bne.n	8009cba <_vfiprintf_r+0x14e>
 8009c9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca2:	d138      	bne.n	8009d16 <_vfiprintf_r+0x1aa>
 8009ca4:	9b03      	ldr	r3, [sp, #12]
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	9203      	str	r2, [sp, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfb8      	it	lt
 8009cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cb4:	f108 0802 	add.w	r8, r8, #2
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	4d33      	ldr	r5, [pc, #204]	; (8009d88 <_vfiprintf_r+0x21c>)
 8009cbc:	f898 1000 	ldrb.w	r1, [r8]
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f7f6 fa84 	bl	80001d0 <memchr>
 8009cc8:	b140      	cbz	r0, 8009cdc <_vfiprintf_r+0x170>
 8009cca:	2340      	movs	r3, #64	; 0x40
 8009ccc:	1b40      	subs	r0, r0, r5
 8009cce:	fa03 f000 	lsl.w	r0, r3, r0
 8009cd2:	9b04      	ldr	r3, [sp, #16]
 8009cd4:	4303      	orrs	r3, r0
 8009cd6:	f108 0801 	add.w	r8, r8, #1
 8009cda:	9304      	str	r3, [sp, #16]
 8009cdc:	f898 1000 	ldrb.w	r1, [r8]
 8009ce0:	482a      	ldr	r0, [pc, #168]	; (8009d8c <_vfiprintf_r+0x220>)
 8009ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ce6:	2206      	movs	r2, #6
 8009ce8:	f108 0701 	add.w	r7, r8, #1
 8009cec:	f7f6 fa70 	bl	80001d0 <memchr>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d037      	beq.n	8009d64 <_vfiprintf_r+0x1f8>
 8009cf4:	4b26      	ldr	r3, [pc, #152]	; (8009d90 <_vfiprintf_r+0x224>)
 8009cf6:	bb1b      	cbnz	r3, 8009d40 <_vfiprintf_r+0x1d4>
 8009cf8:	9b03      	ldr	r3, [sp, #12]
 8009cfa:	3307      	adds	r3, #7
 8009cfc:	f023 0307 	bic.w	r3, r3, #7
 8009d00:	3308      	adds	r3, #8
 8009d02:	9303      	str	r3, [sp, #12]
 8009d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d06:	444b      	add	r3, r9
 8009d08:	9309      	str	r3, [sp, #36]	; 0x24
 8009d0a:	e750      	b.n	8009bae <_vfiprintf_r+0x42>
 8009d0c:	fb05 3202 	mla	r2, r5, r2, r3
 8009d10:	2001      	movs	r0, #1
 8009d12:	4688      	mov	r8, r1
 8009d14:	e78a      	b.n	8009c2c <_vfiprintf_r+0xc0>
 8009d16:	2300      	movs	r3, #0
 8009d18:	f108 0801 	add.w	r8, r8, #1
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	250a      	movs	r5, #10
 8009d22:	4640      	mov	r0, r8
 8009d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d28:	3a30      	subs	r2, #48	; 0x30
 8009d2a:	2a09      	cmp	r2, #9
 8009d2c:	d903      	bls.n	8009d36 <_vfiprintf_r+0x1ca>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0c3      	beq.n	8009cba <_vfiprintf_r+0x14e>
 8009d32:	9105      	str	r1, [sp, #20]
 8009d34:	e7c1      	b.n	8009cba <_vfiprintf_r+0x14e>
 8009d36:	fb05 2101 	mla	r1, r5, r1, r2
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	e7f0      	b.n	8009d22 <_vfiprintf_r+0x1b6>
 8009d40:	ab03      	add	r3, sp, #12
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	4622      	mov	r2, r4
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <_vfiprintf_r+0x228>)
 8009d48:	a904      	add	r1, sp, #16
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f3af 8000 	nop.w
 8009d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d54:	4681      	mov	r9, r0
 8009d56:	d1d5      	bne.n	8009d04 <_vfiprintf_r+0x198>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	065b      	lsls	r3, r3, #25
 8009d5c:	f53f af7e 	bmi.w	8009c5c <_vfiprintf_r+0xf0>
 8009d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d62:	e77d      	b.n	8009c60 <_vfiprintf_r+0xf4>
 8009d64:	ab03      	add	r3, sp, #12
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	4622      	mov	r2, r4
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <_vfiprintf_r+0x228>)
 8009d6c:	a904      	add	r1, sp, #16
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f000 f888 	bl	8009e84 <_printf_i>
 8009d74:	e7ec      	b.n	8009d50 <_vfiprintf_r+0x1e4>
 8009d76:	bf00      	nop
 8009d78:	0800a618 	.word	0x0800a618
 8009d7c:	0800a658 	.word	0x0800a658
 8009d80:	0800a638 	.word	0x0800a638
 8009d84:	0800a5f8 	.word	0x0800a5f8
 8009d88:	0800a65e 	.word	0x0800a65e
 8009d8c:	0800a662 	.word	0x0800a662
 8009d90:	00000000 	.word	0x00000000
 8009d94:	08009b47 	.word	0x08009b47

08009d98 <_printf_common>:
 8009d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	4691      	mov	r9, r2
 8009d9e:	461f      	mov	r7, r3
 8009da0:	688a      	ldr	r2, [r1, #8]
 8009da2:	690b      	ldr	r3, [r1, #16]
 8009da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	bfb8      	it	lt
 8009dac:	4613      	movlt	r3, r2
 8009dae:	f8c9 3000 	str.w	r3, [r9]
 8009db2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009db6:	4606      	mov	r6, r0
 8009db8:	460c      	mov	r4, r1
 8009dba:	b112      	cbz	r2, 8009dc2 <_printf_common+0x2a>
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	f8c9 3000 	str.w	r3, [r9]
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	0699      	lsls	r1, r3, #26
 8009dc6:	bf42      	ittt	mi
 8009dc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009dcc:	3302      	addmi	r3, #2
 8009dce:	f8c9 3000 	strmi.w	r3, [r9]
 8009dd2:	6825      	ldr	r5, [r4, #0]
 8009dd4:	f015 0506 	ands.w	r5, r5, #6
 8009dd8:	d107      	bne.n	8009dea <_printf_common+0x52>
 8009dda:	f104 0a19 	add.w	sl, r4, #25
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	f8d9 2000 	ldr.w	r2, [r9]
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	42ab      	cmp	r3, r5
 8009de8:	dc28      	bgt.n	8009e3c <_printf_common+0xa4>
 8009dea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009dee:	6822      	ldr	r2, [r4, #0]
 8009df0:	3300      	adds	r3, #0
 8009df2:	bf18      	it	ne
 8009df4:	2301      	movne	r3, #1
 8009df6:	0692      	lsls	r2, r2, #26
 8009df8:	d42d      	bmi.n	8009e56 <_printf_common+0xbe>
 8009dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4630      	mov	r0, r6
 8009e02:	47c0      	blx	r8
 8009e04:	3001      	adds	r0, #1
 8009e06:	d020      	beq.n	8009e4a <_printf_common+0xb2>
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	68e5      	ldr	r5, [r4, #12]
 8009e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e10:	f003 0306 	and.w	r3, r3, #6
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	bf08      	it	eq
 8009e18:	1aad      	subeq	r5, r5, r2
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	6922      	ldr	r2, [r4, #16]
 8009e1e:	bf0c      	ite	eq
 8009e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e24:	2500      	movne	r5, #0
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bfc4      	itt	gt
 8009e2a:	1a9b      	subgt	r3, r3, r2
 8009e2c:	18ed      	addgt	r5, r5, r3
 8009e2e:	f04f 0900 	mov.w	r9, #0
 8009e32:	341a      	adds	r4, #26
 8009e34:	454d      	cmp	r5, r9
 8009e36:	d11a      	bne.n	8009e6e <_printf_common+0xd6>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e008      	b.n	8009e4e <_printf_common+0xb6>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	4652      	mov	r2, sl
 8009e40:	4639      	mov	r1, r7
 8009e42:	4630      	mov	r0, r6
 8009e44:	47c0      	blx	r8
 8009e46:	3001      	adds	r0, #1
 8009e48:	d103      	bne.n	8009e52 <_printf_common+0xba>
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e52:	3501      	adds	r5, #1
 8009e54:	e7c3      	b.n	8009dde <_printf_common+0x46>
 8009e56:	18e1      	adds	r1, r4, r3
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	2030      	movs	r0, #48	; 0x30
 8009e5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e60:	4422      	add	r2, r4
 8009e62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e6a:	3302      	adds	r3, #2
 8009e6c:	e7c5      	b.n	8009dfa <_printf_common+0x62>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4622      	mov	r2, r4
 8009e72:	4639      	mov	r1, r7
 8009e74:	4630      	mov	r0, r6
 8009e76:	47c0      	blx	r8
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d0e6      	beq.n	8009e4a <_printf_common+0xb2>
 8009e7c:	f109 0901 	add.w	r9, r9, #1
 8009e80:	e7d8      	b.n	8009e34 <_printf_common+0x9c>
	...

08009e84 <_printf_i>:
 8009e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	7e09      	ldrb	r1, [r1, #24]
 8009e90:	b085      	sub	sp, #20
 8009e92:	296e      	cmp	r1, #110	; 0x6e
 8009e94:	4617      	mov	r7, r2
 8009e96:	4606      	mov	r6, r0
 8009e98:	4698      	mov	r8, r3
 8009e9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e9c:	f000 80b3 	beq.w	800a006 <_printf_i+0x182>
 8009ea0:	d822      	bhi.n	8009ee8 <_printf_i+0x64>
 8009ea2:	2963      	cmp	r1, #99	; 0x63
 8009ea4:	d036      	beq.n	8009f14 <_printf_i+0x90>
 8009ea6:	d80a      	bhi.n	8009ebe <_printf_i+0x3a>
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	f000 80b9 	beq.w	800a020 <_printf_i+0x19c>
 8009eae:	2958      	cmp	r1, #88	; 0x58
 8009eb0:	f000 8083 	beq.w	8009fba <_printf_i+0x136>
 8009eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009ebc:	e032      	b.n	8009f24 <_printf_i+0xa0>
 8009ebe:	2964      	cmp	r1, #100	; 0x64
 8009ec0:	d001      	beq.n	8009ec6 <_printf_i+0x42>
 8009ec2:	2969      	cmp	r1, #105	; 0x69
 8009ec4:	d1f6      	bne.n	8009eb4 <_printf_i+0x30>
 8009ec6:	6820      	ldr	r0, [r4, #0]
 8009ec8:	6813      	ldr	r3, [r2, #0]
 8009eca:	0605      	lsls	r5, r0, #24
 8009ecc:	f103 0104 	add.w	r1, r3, #4
 8009ed0:	d52a      	bpl.n	8009f28 <_printf_i+0xa4>
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6011      	str	r1, [r2, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da03      	bge.n	8009ee2 <_printf_i+0x5e>
 8009eda:	222d      	movs	r2, #45	; 0x2d
 8009edc:	425b      	negs	r3, r3
 8009ede:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ee2:	486f      	ldr	r0, [pc, #444]	; (800a0a0 <_printf_i+0x21c>)
 8009ee4:	220a      	movs	r2, #10
 8009ee6:	e039      	b.n	8009f5c <_printf_i+0xd8>
 8009ee8:	2973      	cmp	r1, #115	; 0x73
 8009eea:	f000 809d 	beq.w	800a028 <_printf_i+0x1a4>
 8009eee:	d808      	bhi.n	8009f02 <_printf_i+0x7e>
 8009ef0:	296f      	cmp	r1, #111	; 0x6f
 8009ef2:	d020      	beq.n	8009f36 <_printf_i+0xb2>
 8009ef4:	2970      	cmp	r1, #112	; 0x70
 8009ef6:	d1dd      	bne.n	8009eb4 <_printf_i+0x30>
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	f043 0320 	orr.w	r3, r3, #32
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	e003      	b.n	8009f0a <_printf_i+0x86>
 8009f02:	2975      	cmp	r1, #117	; 0x75
 8009f04:	d017      	beq.n	8009f36 <_printf_i+0xb2>
 8009f06:	2978      	cmp	r1, #120	; 0x78
 8009f08:	d1d4      	bne.n	8009eb4 <_printf_i+0x30>
 8009f0a:	2378      	movs	r3, #120	; 0x78
 8009f0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f10:	4864      	ldr	r0, [pc, #400]	; (800a0a4 <_printf_i+0x220>)
 8009f12:	e055      	b.n	8009fc0 <_printf_i+0x13c>
 8009f14:	6813      	ldr	r3, [r2, #0]
 8009f16:	1d19      	adds	r1, r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6011      	str	r1, [r2, #0]
 8009f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f24:	2301      	movs	r3, #1
 8009f26:	e08c      	b.n	800a042 <_printf_i+0x1be>
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6011      	str	r1, [r2, #0]
 8009f2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f30:	bf18      	it	ne
 8009f32:	b21b      	sxthne	r3, r3
 8009f34:	e7cf      	b.n	8009ed6 <_printf_i+0x52>
 8009f36:	6813      	ldr	r3, [r2, #0]
 8009f38:	6825      	ldr	r5, [r4, #0]
 8009f3a:	1d18      	adds	r0, r3, #4
 8009f3c:	6010      	str	r0, [r2, #0]
 8009f3e:	0628      	lsls	r0, r5, #24
 8009f40:	d501      	bpl.n	8009f46 <_printf_i+0xc2>
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	e002      	b.n	8009f4c <_printf_i+0xc8>
 8009f46:	0668      	lsls	r0, r5, #25
 8009f48:	d5fb      	bpl.n	8009f42 <_printf_i+0xbe>
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	4854      	ldr	r0, [pc, #336]	; (800a0a0 <_printf_i+0x21c>)
 8009f4e:	296f      	cmp	r1, #111	; 0x6f
 8009f50:	bf14      	ite	ne
 8009f52:	220a      	movne	r2, #10
 8009f54:	2208      	moveq	r2, #8
 8009f56:	2100      	movs	r1, #0
 8009f58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f5c:	6865      	ldr	r5, [r4, #4]
 8009f5e:	60a5      	str	r5, [r4, #8]
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	f2c0 8095 	blt.w	800a090 <_printf_i+0x20c>
 8009f66:	6821      	ldr	r1, [r4, #0]
 8009f68:	f021 0104 	bic.w	r1, r1, #4
 8009f6c:	6021      	str	r1, [r4, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d13d      	bne.n	8009fee <_printf_i+0x16a>
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	f040 808e 	bne.w	800a094 <_printf_i+0x210>
 8009f78:	4665      	mov	r5, ip
 8009f7a:	2a08      	cmp	r2, #8
 8009f7c:	d10b      	bne.n	8009f96 <_printf_i+0x112>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	07db      	lsls	r3, r3, #31
 8009f82:	d508      	bpl.n	8009f96 <_printf_i+0x112>
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	6862      	ldr	r2, [r4, #4]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	bfde      	ittt	le
 8009f8c:	2330      	movle	r3, #48	; 0x30
 8009f8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f96:	ebac 0305 	sub.w	r3, ip, r5
 8009f9a:	6123      	str	r3, [r4, #16]
 8009f9c:	f8cd 8000 	str.w	r8, [sp]
 8009fa0:	463b      	mov	r3, r7
 8009fa2:	aa03      	add	r2, sp, #12
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7ff fef6 	bl	8009d98 <_printf_common>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d14d      	bne.n	800a04c <_printf_i+0x1c8>
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb4:	b005      	add	sp, #20
 8009fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fba:	4839      	ldr	r0, [pc, #228]	; (800a0a0 <_printf_i+0x21c>)
 8009fbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009fc0:	6813      	ldr	r3, [r2, #0]
 8009fc2:	6821      	ldr	r1, [r4, #0]
 8009fc4:	1d1d      	adds	r5, r3, #4
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6015      	str	r5, [r2, #0]
 8009fca:	060a      	lsls	r2, r1, #24
 8009fcc:	d50b      	bpl.n	8009fe6 <_printf_i+0x162>
 8009fce:	07ca      	lsls	r2, r1, #31
 8009fd0:	bf44      	itt	mi
 8009fd2:	f041 0120 	orrmi.w	r1, r1, #32
 8009fd6:	6021      	strmi	r1, [r4, #0]
 8009fd8:	b91b      	cbnz	r3, 8009fe2 <_printf_i+0x15e>
 8009fda:	6822      	ldr	r2, [r4, #0]
 8009fdc:	f022 0220 	bic.w	r2, r2, #32
 8009fe0:	6022      	str	r2, [r4, #0]
 8009fe2:	2210      	movs	r2, #16
 8009fe4:	e7b7      	b.n	8009f56 <_printf_i+0xd2>
 8009fe6:	064d      	lsls	r5, r1, #25
 8009fe8:	bf48      	it	mi
 8009fea:	b29b      	uxthmi	r3, r3
 8009fec:	e7ef      	b.n	8009fce <_printf_i+0x14a>
 8009fee:	4665      	mov	r5, ip
 8009ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ff4:	fb02 3311 	mls	r3, r2, r1, r3
 8009ff8:	5cc3      	ldrb	r3, [r0, r3]
 8009ffa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009ffe:	460b      	mov	r3, r1
 800a000:	2900      	cmp	r1, #0
 800a002:	d1f5      	bne.n	8009ff0 <_printf_i+0x16c>
 800a004:	e7b9      	b.n	8009f7a <_printf_i+0xf6>
 800a006:	6813      	ldr	r3, [r2, #0]
 800a008:	6825      	ldr	r5, [r4, #0]
 800a00a:	6961      	ldr	r1, [r4, #20]
 800a00c:	1d18      	adds	r0, r3, #4
 800a00e:	6010      	str	r0, [r2, #0]
 800a010:	0628      	lsls	r0, r5, #24
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	d501      	bpl.n	800a01a <_printf_i+0x196>
 800a016:	6019      	str	r1, [r3, #0]
 800a018:	e002      	b.n	800a020 <_printf_i+0x19c>
 800a01a:	066a      	lsls	r2, r5, #25
 800a01c:	d5fb      	bpl.n	800a016 <_printf_i+0x192>
 800a01e:	8019      	strh	r1, [r3, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	6123      	str	r3, [r4, #16]
 800a024:	4665      	mov	r5, ip
 800a026:	e7b9      	b.n	8009f9c <_printf_i+0x118>
 800a028:	6813      	ldr	r3, [r2, #0]
 800a02a:	1d19      	adds	r1, r3, #4
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	681d      	ldr	r5, [r3, #0]
 800a030:	6862      	ldr	r2, [r4, #4]
 800a032:	2100      	movs	r1, #0
 800a034:	4628      	mov	r0, r5
 800a036:	f7f6 f8cb 	bl	80001d0 <memchr>
 800a03a:	b108      	cbz	r0, 800a040 <_printf_i+0x1bc>
 800a03c:	1b40      	subs	r0, r0, r5
 800a03e:	6060      	str	r0, [r4, #4]
 800a040:	6863      	ldr	r3, [r4, #4]
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	2300      	movs	r3, #0
 800a046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a04a:	e7a7      	b.n	8009f9c <_printf_i+0x118>
 800a04c:	6923      	ldr	r3, [r4, #16]
 800a04e:	462a      	mov	r2, r5
 800a050:	4639      	mov	r1, r7
 800a052:	4630      	mov	r0, r6
 800a054:	47c0      	blx	r8
 800a056:	3001      	adds	r0, #1
 800a058:	d0aa      	beq.n	8009fb0 <_printf_i+0x12c>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	079b      	lsls	r3, r3, #30
 800a05e:	d413      	bmi.n	800a088 <_printf_i+0x204>
 800a060:	68e0      	ldr	r0, [r4, #12]
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	4298      	cmp	r0, r3
 800a066:	bfb8      	it	lt
 800a068:	4618      	movlt	r0, r3
 800a06a:	e7a3      	b.n	8009fb4 <_printf_i+0x130>
 800a06c:	2301      	movs	r3, #1
 800a06e:	464a      	mov	r2, r9
 800a070:	4639      	mov	r1, r7
 800a072:	4630      	mov	r0, r6
 800a074:	47c0      	blx	r8
 800a076:	3001      	adds	r0, #1
 800a078:	d09a      	beq.n	8009fb0 <_printf_i+0x12c>
 800a07a:	3501      	adds	r5, #1
 800a07c:	68e3      	ldr	r3, [r4, #12]
 800a07e:	9a03      	ldr	r2, [sp, #12]
 800a080:	1a9b      	subs	r3, r3, r2
 800a082:	42ab      	cmp	r3, r5
 800a084:	dcf2      	bgt.n	800a06c <_printf_i+0x1e8>
 800a086:	e7eb      	b.n	800a060 <_printf_i+0x1dc>
 800a088:	2500      	movs	r5, #0
 800a08a:	f104 0919 	add.w	r9, r4, #25
 800a08e:	e7f5      	b.n	800a07c <_printf_i+0x1f8>
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1ac      	bne.n	8009fee <_printf_i+0x16a>
 800a094:	7803      	ldrb	r3, [r0, #0]
 800a096:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a09a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a09e:	e76c      	b.n	8009f7a <_printf_i+0xf6>
 800a0a0:	0800a669 	.word	0x0800a669
 800a0a4:	0800a67a 	.word	0x0800a67a

0800a0a8 <__sread>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b0:	f000 fa46 	bl	800a540 <_read_r>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	bfab      	itete	ge
 800a0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a0bc:	181b      	addge	r3, r3, r0
 800a0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0c2:	bfac      	ite	ge
 800a0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0c6:	81a3      	strhlt	r3, [r4, #12]
 800a0c8:	bd10      	pop	{r4, pc}

0800a0ca <__swrite>:
 800a0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ce:	461f      	mov	r7, r3
 800a0d0:	898b      	ldrh	r3, [r1, #12]
 800a0d2:	05db      	lsls	r3, r3, #23
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	4616      	mov	r6, r2
 800a0da:	d505      	bpl.n	800a0e8 <__swrite+0x1e>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e4:	f000 f9b6 	bl	800a454 <_lseek_r>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fe:	f000 b869 	b.w	800a1d4 <_write_r>

0800a102 <__sseek>:
 800a102:	b510      	push	{r4, lr}
 800a104:	460c      	mov	r4, r1
 800a106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a10a:	f000 f9a3 	bl	800a454 <_lseek_r>
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	bf15      	itete	ne
 800a114:	6560      	strne	r0, [r4, #84]	; 0x54
 800a116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a11e:	81a3      	strheq	r3, [r4, #12]
 800a120:	bf18      	it	ne
 800a122:	81a3      	strhne	r3, [r4, #12]
 800a124:	bd10      	pop	{r4, pc}

0800a126 <__sclose>:
 800a126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12a:	f000 b8d3 	b.w	800a2d4 <_close_r>
	...

0800a130 <__swbuf_r>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	460e      	mov	r6, r1
 800a134:	4614      	mov	r4, r2
 800a136:	4605      	mov	r5, r0
 800a138:	b118      	cbz	r0, 800a142 <__swbuf_r+0x12>
 800a13a:	6983      	ldr	r3, [r0, #24]
 800a13c:	b90b      	cbnz	r3, 800a142 <__swbuf_r+0x12>
 800a13e:	f7ff fc5f 	bl	8009a00 <__sinit>
 800a142:	4b21      	ldr	r3, [pc, #132]	; (800a1c8 <__swbuf_r+0x98>)
 800a144:	429c      	cmp	r4, r3
 800a146:	d12a      	bne.n	800a19e <__swbuf_r+0x6e>
 800a148:	686c      	ldr	r4, [r5, #4]
 800a14a:	69a3      	ldr	r3, [r4, #24]
 800a14c:	60a3      	str	r3, [r4, #8]
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	071a      	lsls	r2, r3, #28
 800a152:	d52e      	bpl.n	800a1b2 <__swbuf_r+0x82>
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	b363      	cbz	r3, 800a1b2 <__swbuf_r+0x82>
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	6820      	ldr	r0, [r4, #0]
 800a15c:	1ac0      	subs	r0, r0, r3
 800a15e:	6963      	ldr	r3, [r4, #20]
 800a160:	b2f6      	uxtb	r6, r6
 800a162:	4283      	cmp	r3, r0
 800a164:	4637      	mov	r7, r6
 800a166:	dc04      	bgt.n	800a172 <__swbuf_r+0x42>
 800a168:	4621      	mov	r1, r4
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 f948 	bl	800a400 <_fflush_r>
 800a170:	bb28      	cbnz	r0, 800a1be <__swbuf_r+0x8e>
 800a172:	68a3      	ldr	r3, [r4, #8]
 800a174:	3b01      	subs	r3, #1
 800a176:	60a3      	str	r3, [r4, #8]
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	6022      	str	r2, [r4, #0]
 800a17e:	701e      	strb	r6, [r3, #0]
 800a180:	6963      	ldr	r3, [r4, #20]
 800a182:	3001      	adds	r0, #1
 800a184:	4283      	cmp	r3, r0
 800a186:	d004      	beq.n	800a192 <__swbuf_r+0x62>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	07db      	lsls	r3, r3, #31
 800a18c:	d519      	bpl.n	800a1c2 <__swbuf_r+0x92>
 800a18e:	2e0a      	cmp	r6, #10
 800a190:	d117      	bne.n	800a1c2 <__swbuf_r+0x92>
 800a192:	4621      	mov	r1, r4
 800a194:	4628      	mov	r0, r5
 800a196:	f000 f933 	bl	800a400 <_fflush_r>
 800a19a:	b190      	cbz	r0, 800a1c2 <__swbuf_r+0x92>
 800a19c:	e00f      	b.n	800a1be <__swbuf_r+0x8e>
 800a19e:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <__swbuf_r+0x9c>)
 800a1a0:	429c      	cmp	r4, r3
 800a1a2:	d101      	bne.n	800a1a8 <__swbuf_r+0x78>
 800a1a4:	68ac      	ldr	r4, [r5, #8]
 800a1a6:	e7d0      	b.n	800a14a <__swbuf_r+0x1a>
 800a1a8:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <__swbuf_r+0xa0>)
 800a1aa:	429c      	cmp	r4, r3
 800a1ac:	bf08      	it	eq
 800a1ae:	68ec      	ldreq	r4, [r5, #12]
 800a1b0:	e7cb      	b.n	800a14a <__swbuf_r+0x1a>
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 f81f 	bl	800a1f8 <__swsetup_r>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d0cc      	beq.n	800a158 <__swbuf_r+0x28>
 800a1be:	f04f 37ff 	mov.w	r7, #4294967295
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	0800a618 	.word	0x0800a618
 800a1cc:	0800a638 	.word	0x0800a638
 800a1d0:	0800a5f8 	.word	0x0800a5f8

0800a1d4 <_write_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4c07      	ldr	r4, [pc, #28]	; (800a1f4 <_write_r+0x20>)
 800a1d8:	4605      	mov	r5, r0
 800a1da:	4608      	mov	r0, r1
 800a1dc:	4611      	mov	r1, r2
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6022      	str	r2, [r4, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f7f6 fc46 	bl	8000a74 <_write>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_write_r+0x1e>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_write_r+0x1e>
 800a1f0:	602b      	str	r3, [r5, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	20000920 	.word	0x20000920

0800a1f8 <__swsetup_r>:
 800a1f8:	4b32      	ldr	r3, [pc, #200]	; (800a2c4 <__swsetup_r+0xcc>)
 800a1fa:	b570      	push	{r4, r5, r6, lr}
 800a1fc:	681d      	ldr	r5, [r3, #0]
 800a1fe:	4606      	mov	r6, r0
 800a200:	460c      	mov	r4, r1
 800a202:	b125      	cbz	r5, 800a20e <__swsetup_r+0x16>
 800a204:	69ab      	ldr	r3, [r5, #24]
 800a206:	b913      	cbnz	r3, 800a20e <__swsetup_r+0x16>
 800a208:	4628      	mov	r0, r5
 800a20a:	f7ff fbf9 	bl	8009a00 <__sinit>
 800a20e:	4b2e      	ldr	r3, [pc, #184]	; (800a2c8 <__swsetup_r+0xd0>)
 800a210:	429c      	cmp	r4, r3
 800a212:	d10f      	bne.n	800a234 <__swsetup_r+0x3c>
 800a214:	686c      	ldr	r4, [r5, #4]
 800a216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	0715      	lsls	r5, r2, #28
 800a21e:	d42c      	bmi.n	800a27a <__swsetup_r+0x82>
 800a220:	06d0      	lsls	r0, r2, #27
 800a222:	d411      	bmi.n	800a248 <__swsetup_r+0x50>
 800a224:	2209      	movs	r2, #9
 800a226:	6032      	str	r2, [r6, #0]
 800a228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	f04f 30ff 	mov.w	r0, #4294967295
 800a232:	e03e      	b.n	800a2b2 <__swsetup_r+0xba>
 800a234:	4b25      	ldr	r3, [pc, #148]	; (800a2cc <__swsetup_r+0xd4>)
 800a236:	429c      	cmp	r4, r3
 800a238:	d101      	bne.n	800a23e <__swsetup_r+0x46>
 800a23a:	68ac      	ldr	r4, [r5, #8]
 800a23c:	e7eb      	b.n	800a216 <__swsetup_r+0x1e>
 800a23e:	4b24      	ldr	r3, [pc, #144]	; (800a2d0 <__swsetup_r+0xd8>)
 800a240:	429c      	cmp	r4, r3
 800a242:	bf08      	it	eq
 800a244:	68ec      	ldreq	r4, [r5, #12]
 800a246:	e7e6      	b.n	800a216 <__swsetup_r+0x1e>
 800a248:	0751      	lsls	r1, r2, #29
 800a24a:	d512      	bpl.n	800a272 <__swsetup_r+0x7a>
 800a24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a24e:	b141      	cbz	r1, 800a262 <__swsetup_r+0x6a>
 800a250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a254:	4299      	cmp	r1, r3
 800a256:	d002      	beq.n	800a25e <__swsetup_r+0x66>
 800a258:	4630      	mov	r0, r6
 800a25a:	f7ff fac1 	bl	80097e0 <_free_r>
 800a25e:	2300      	movs	r3, #0
 800a260:	6363      	str	r3, [r4, #52]	; 0x34
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	2300      	movs	r3, #0
 800a26c:	6063      	str	r3, [r4, #4]
 800a26e:	6923      	ldr	r3, [r4, #16]
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	f043 0308 	orr.w	r3, r3, #8
 800a278:	81a3      	strh	r3, [r4, #12]
 800a27a:	6923      	ldr	r3, [r4, #16]
 800a27c:	b94b      	cbnz	r3, 800a292 <__swsetup_r+0x9a>
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a288:	d003      	beq.n	800a292 <__swsetup_r+0x9a>
 800a28a:	4621      	mov	r1, r4
 800a28c:	4630      	mov	r0, r6
 800a28e:	f000 f917 	bl	800a4c0 <__smakebuf_r>
 800a292:	89a2      	ldrh	r2, [r4, #12]
 800a294:	f012 0301 	ands.w	r3, r2, #1
 800a298:	d00c      	beq.n	800a2b4 <__swsetup_r+0xbc>
 800a29a:	2300      	movs	r3, #0
 800a29c:	60a3      	str	r3, [r4, #8]
 800a29e:	6963      	ldr	r3, [r4, #20]
 800a2a0:	425b      	negs	r3, r3
 800a2a2:	61a3      	str	r3, [r4, #24]
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	b953      	cbnz	r3, 800a2be <__swsetup_r+0xc6>
 800a2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a2b0:	d1ba      	bne.n	800a228 <__swsetup_r+0x30>
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	0792      	lsls	r2, r2, #30
 800a2b6:	bf58      	it	pl
 800a2b8:	6963      	ldrpl	r3, [r4, #20]
 800a2ba:	60a3      	str	r3, [r4, #8]
 800a2bc:	e7f2      	b.n	800a2a4 <__swsetup_r+0xac>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7f7      	b.n	800a2b2 <__swsetup_r+0xba>
 800a2c2:	bf00      	nop
 800a2c4:	2000002c 	.word	0x2000002c
 800a2c8:	0800a618 	.word	0x0800a618
 800a2cc:	0800a638 	.word	0x0800a638
 800a2d0:	0800a5f8 	.word	0x0800a5f8

0800a2d4 <_close_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4c06      	ldr	r4, [pc, #24]	; (800a2f0 <_close_r+0x1c>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4605      	mov	r5, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	f7f6 fde7 	bl	8000eb2 <_close>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_close_r+0x1a>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_close_r+0x1a>
 800a2ec:	602b      	str	r3, [r5, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20000920 	.word	0x20000920

0800a2f4 <__sflush_r>:
 800a2f4:	898a      	ldrh	r2, [r1, #12]
 800a2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	0710      	lsls	r0, r2, #28
 800a2fe:	460c      	mov	r4, r1
 800a300:	d458      	bmi.n	800a3b4 <__sflush_r+0xc0>
 800a302:	684b      	ldr	r3, [r1, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	dc05      	bgt.n	800a314 <__sflush_r+0x20>
 800a308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dc02      	bgt.n	800a314 <__sflush_r+0x20>
 800a30e:	2000      	movs	r0, #0
 800a310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a316:	2e00      	cmp	r6, #0
 800a318:	d0f9      	beq.n	800a30e <__sflush_r+0x1a>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a320:	682f      	ldr	r7, [r5, #0]
 800a322:	6a21      	ldr	r1, [r4, #32]
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	d032      	beq.n	800a38e <__sflush_r+0x9a>
 800a328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	075a      	lsls	r2, r3, #29
 800a32e:	d505      	bpl.n	800a33c <__sflush_r+0x48>
 800a330:	6863      	ldr	r3, [r4, #4]
 800a332:	1ac0      	subs	r0, r0, r3
 800a334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a336:	b10b      	cbz	r3, 800a33c <__sflush_r+0x48>
 800a338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a33a:	1ac0      	subs	r0, r0, r3
 800a33c:	2300      	movs	r3, #0
 800a33e:	4602      	mov	r2, r0
 800a340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a342:	6a21      	ldr	r1, [r4, #32]
 800a344:	4628      	mov	r0, r5
 800a346:	47b0      	blx	r6
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	d106      	bne.n	800a35c <__sflush_r+0x68>
 800a34e:	6829      	ldr	r1, [r5, #0]
 800a350:	291d      	cmp	r1, #29
 800a352:	d848      	bhi.n	800a3e6 <__sflush_r+0xf2>
 800a354:	4a29      	ldr	r2, [pc, #164]	; (800a3fc <__sflush_r+0x108>)
 800a356:	40ca      	lsrs	r2, r1
 800a358:	07d6      	lsls	r6, r2, #31
 800a35a:	d544      	bpl.n	800a3e6 <__sflush_r+0xf2>
 800a35c:	2200      	movs	r2, #0
 800a35e:	6062      	str	r2, [r4, #4]
 800a360:	04d9      	lsls	r1, r3, #19
 800a362:	6922      	ldr	r2, [r4, #16]
 800a364:	6022      	str	r2, [r4, #0]
 800a366:	d504      	bpl.n	800a372 <__sflush_r+0x7e>
 800a368:	1c42      	adds	r2, r0, #1
 800a36a:	d101      	bne.n	800a370 <__sflush_r+0x7c>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b903      	cbnz	r3, 800a372 <__sflush_r+0x7e>
 800a370:	6560      	str	r0, [r4, #84]	; 0x54
 800a372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a374:	602f      	str	r7, [r5, #0]
 800a376:	2900      	cmp	r1, #0
 800a378:	d0c9      	beq.n	800a30e <__sflush_r+0x1a>
 800a37a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a37e:	4299      	cmp	r1, r3
 800a380:	d002      	beq.n	800a388 <__sflush_r+0x94>
 800a382:	4628      	mov	r0, r5
 800a384:	f7ff fa2c 	bl	80097e0 <_free_r>
 800a388:	2000      	movs	r0, #0
 800a38a:	6360      	str	r0, [r4, #52]	; 0x34
 800a38c:	e7c0      	b.n	800a310 <__sflush_r+0x1c>
 800a38e:	2301      	movs	r3, #1
 800a390:	4628      	mov	r0, r5
 800a392:	47b0      	blx	r6
 800a394:	1c41      	adds	r1, r0, #1
 800a396:	d1c8      	bne.n	800a32a <__sflush_r+0x36>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0c5      	beq.n	800a32a <__sflush_r+0x36>
 800a39e:	2b1d      	cmp	r3, #29
 800a3a0:	d001      	beq.n	800a3a6 <__sflush_r+0xb2>
 800a3a2:	2b16      	cmp	r3, #22
 800a3a4:	d101      	bne.n	800a3aa <__sflush_r+0xb6>
 800a3a6:	602f      	str	r7, [r5, #0]
 800a3a8:	e7b1      	b.n	800a30e <__sflush_r+0x1a>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	e7ad      	b.n	800a310 <__sflush_r+0x1c>
 800a3b4:	690f      	ldr	r7, [r1, #16]
 800a3b6:	2f00      	cmp	r7, #0
 800a3b8:	d0a9      	beq.n	800a30e <__sflush_r+0x1a>
 800a3ba:	0793      	lsls	r3, r2, #30
 800a3bc:	680e      	ldr	r6, [r1, #0]
 800a3be:	bf08      	it	eq
 800a3c0:	694b      	ldreq	r3, [r1, #20]
 800a3c2:	600f      	str	r7, [r1, #0]
 800a3c4:	bf18      	it	ne
 800a3c6:	2300      	movne	r3, #0
 800a3c8:	eba6 0807 	sub.w	r8, r6, r7
 800a3cc:	608b      	str	r3, [r1, #8]
 800a3ce:	f1b8 0f00 	cmp.w	r8, #0
 800a3d2:	dd9c      	ble.n	800a30e <__sflush_r+0x1a>
 800a3d4:	4643      	mov	r3, r8
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	6a21      	ldr	r1, [r4, #32]
 800a3da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3dc:	4628      	mov	r0, r5
 800a3de:	47b0      	blx	r6
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	dc06      	bgt.n	800a3f2 <__sflush_r+0xfe>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	e78e      	b.n	800a310 <__sflush_r+0x1c>
 800a3f2:	4407      	add	r7, r0
 800a3f4:	eba8 0800 	sub.w	r8, r8, r0
 800a3f8:	e7e9      	b.n	800a3ce <__sflush_r+0xda>
 800a3fa:	bf00      	nop
 800a3fc:	20400001 	.word	0x20400001

0800a400 <_fflush_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	690b      	ldr	r3, [r1, #16]
 800a404:	4605      	mov	r5, r0
 800a406:	460c      	mov	r4, r1
 800a408:	b1db      	cbz	r3, 800a442 <_fflush_r+0x42>
 800a40a:	b118      	cbz	r0, 800a414 <_fflush_r+0x14>
 800a40c:	6983      	ldr	r3, [r0, #24]
 800a40e:	b90b      	cbnz	r3, 800a414 <_fflush_r+0x14>
 800a410:	f7ff faf6 	bl	8009a00 <__sinit>
 800a414:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <_fflush_r+0x48>)
 800a416:	429c      	cmp	r4, r3
 800a418:	d109      	bne.n	800a42e <_fflush_r+0x2e>
 800a41a:	686c      	ldr	r4, [r5, #4]
 800a41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a420:	b17b      	cbz	r3, 800a442 <_fflush_r+0x42>
 800a422:	4621      	mov	r1, r4
 800a424:	4628      	mov	r0, r5
 800a426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a42a:	f7ff bf63 	b.w	800a2f4 <__sflush_r>
 800a42e:	4b07      	ldr	r3, [pc, #28]	; (800a44c <_fflush_r+0x4c>)
 800a430:	429c      	cmp	r4, r3
 800a432:	d101      	bne.n	800a438 <_fflush_r+0x38>
 800a434:	68ac      	ldr	r4, [r5, #8]
 800a436:	e7f1      	b.n	800a41c <_fflush_r+0x1c>
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <_fflush_r+0x50>)
 800a43a:	429c      	cmp	r4, r3
 800a43c:	bf08      	it	eq
 800a43e:	68ec      	ldreq	r4, [r5, #12]
 800a440:	e7ec      	b.n	800a41c <_fflush_r+0x1c>
 800a442:	2000      	movs	r0, #0
 800a444:	bd38      	pop	{r3, r4, r5, pc}
 800a446:	bf00      	nop
 800a448:	0800a618 	.word	0x0800a618
 800a44c:	0800a638 	.word	0x0800a638
 800a450:	0800a5f8 	.word	0x0800a5f8

0800a454 <_lseek_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4c07      	ldr	r4, [pc, #28]	; (800a474 <_lseek_r+0x20>)
 800a458:	4605      	mov	r5, r0
 800a45a:	4608      	mov	r0, r1
 800a45c:	4611      	mov	r1, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	6022      	str	r2, [r4, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	f7f6 fd4c 	bl	8000f00 <_lseek>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_lseek_r+0x1e>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_lseek_r+0x1e>
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20000920 	.word	0x20000920

0800a478 <__swhatbuf_r>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	460e      	mov	r6, r1
 800a47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a480:	2900      	cmp	r1, #0
 800a482:	b096      	sub	sp, #88	; 0x58
 800a484:	4614      	mov	r4, r2
 800a486:	461d      	mov	r5, r3
 800a488:	da07      	bge.n	800a49a <__swhatbuf_r+0x22>
 800a48a:	2300      	movs	r3, #0
 800a48c:	602b      	str	r3, [r5, #0]
 800a48e:	89b3      	ldrh	r3, [r6, #12]
 800a490:	061a      	lsls	r2, r3, #24
 800a492:	d410      	bmi.n	800a4b6 <__swhatbuf_r+0x3e>
 800a494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a498:	e00e      	b.n	800a4b8 <__swhatbuf_r+0x40>
 800a49a:	466a      	mov	r2, sp
 800a49c:	f000 f862 	bl	800a564 <_fstat_r>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	dbf2      	blt.n	800a48a <__swhatbuf_r+0x12>
 800a4a4:	9a01      	ldr	r2, [sp, #4]
 800a4a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4ae:	425a      	negs	r2, r3
 800a4b0:	415a      	adcs	r2, r3
 800a4b2:	602a      	str	r2, [r5, #0]
 800a4b4:	e7ee      	b.n	800a494 <__swhatbuf_r+0x1c>
 800a4b6:	2340      	movs	r3, #64	; 0x40
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	b016      	add	sp, #88	; 0x58
 800a4be:	bd70      	pop	{r4, r5, r6, pc}

0800a4c0 <__smakebuf_r>:
 800a4c0:	898b      	ldrh	r3, [r1, #12]
 800a4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4c4:	079d      	lsls	r5, r3, #30
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	d507      	bpl.n	800a4dc <__smakebuf_r+0x1c>
 800a4cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	6123      	str	r3, [r4, #16]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	6163      	str	r3, [r4, #20]
 800a4d8:	b002      	add	sp, #8
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	ab01      	add	r3, sp, #4
 800a4de:	466a      	mov	r2, sp
 800a4e0:	f7ff ffca 	bl	800a478 <__swhatbuf_r>
 800a4e4:	9900      	ldr	r1, [sp, #0]
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff f9c7 	bl	800987c <_malloc_r>
 800a4ee:	b948      	cbnz	r0, 800a504 <__smakebuf_r+0x44>
 800a4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f4:	059a      	lsls	r2, r3, #22
 800a4f6:	d4ef      	bmi.n	800a4d8 <__smakebuf_r+0x18>
 800a4f8:	f023 0303 	bic.w	r3, r3, #3
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	81a3      	strh	r3, [r4, #12]
 800a502:	e7e3      	b.n	800a4cc <__smakebuf_r+0xc>
 800a504:	4b0d      	ldr	r3, [pc, #52]	; (800a53c <__smakebuf_r+0x7c>)
 800a506:	62b3      	str	r3, [r6, #40]	; 0x28
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	6020      	str	r0, [r4, #0]
 800a50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	9b00      	ldr	r3, [sp, #0]
 800a514:	6163      	str	r3, [r4, #20]
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	6120      	str	r0, [r4, #16]
 800a51a:	b15b      	cbz	r3, 800a534 <__smakebuf_r+0x74>
 800a51c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a520:	4630      	mov	r0, r6
 800a522:	f000 f831 	bl	800a588 <_isatty_r>
 800a526:	b128      	cbz	r0, 800a534 <__smakebuf_r+0x74>
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	f043 0301 	orr.w	r3, r3, #1
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	431d      	orrs	r5, r3
 800a538:	81a5      	strh	r5, [r4, #12]
 800a53a:	e7cd      	b.n	800a4d8 <__smakebuf_r+0x18>
 800a53c:	080099c9 	.word	0x080099c9

0800a540 <_read_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4c07      	ldr	r4, [pc, #28]	; (800a560 <_read_r+0x20>)
 800a544:	4605      	mov	r5, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	6022      	str	r2, [r4, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f6 fc92 	bl	8000e78 <_read>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_read_r+0x1e>
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_read_r+0x1e>
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20000920 	.word	0x20000920

0800a564 <_fstat_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4c07      	ldr	r4, [pc, #28]	; (800a584 <_fstat_r+0x20>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4605      	mov	r5, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	4611      	mov	r1, r2
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	f7f6 fcaa 	bl	8000eca <_fstat>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d102      	bne.n	800a580 <_fstat_r+0x1c>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	b103      	cbz	r3, 800a580 <_fstat_r+0x1c>
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	bd38      	pop	{r3, r4, r5, pc}
 800a582:	bf00      	nop
 800a584:	20000920 	.word	0x20000920

0800a588 <_isatty_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4c06      	ldr	r4, [pc, #24]	; (800a5a4 <_isatty_r+0x1c>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4605      	mov	r5, r0
 800a590:	4608      	mov	r0, r1
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	f7f6 fca9 	bl	8000eea <_isatty>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_isatty_r+0x1a>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_isatty_r+0x1a>
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20000920 	.word	0x20000920

0800a5a8 <_init>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr

0800a5b4 <_fini>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	bf00      	nop
 800a5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ba:	bc08      	pop	{r3}
 800a5bc:	469e      	mov	lr, r3
 800a5be:	4770      	bx	lr
