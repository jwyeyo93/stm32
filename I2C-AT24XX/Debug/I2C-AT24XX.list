
I2C-AT24XX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004088  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f8  080043f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080043f8  080043f8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f8  080043f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000068  08004468  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004468  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f87d  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002210  00000000  00000000  0002f90e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  00031b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  00032320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000121ba  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c39  00000000  00000000  00044be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006407b  00000000  00000000  0004e81b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002660  00000000  00000000  000b2914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08004254 	.word	0x08004254

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08004254 	.word	0x08004254

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <MX_GPIO_Init+0x40>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <MX_GPIO_Init+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <MX_GPIO_Init+0x40>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <MX_GPIO_Init+0x40>)
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <MX_GPIO_Init+0x40>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0308 	and.w	r3, r3, #8
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]

}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000

08000268 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_I2C1_Init+0x48>)
 800026e:	4a11      	ldr	r2, [pc, #68]	; (80002b4 <MX_I2C1_Init+0x4c>)
 8000270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000272:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_I2C1_Init+0x48>)
 8000274:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <MX_I2C1_Init+0x50>)
 8000276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <MX_I2C1_Init+0x48>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_I2C1_Init+0x48>)
 8000280:	2200      	movs	r2, #0
 8000282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <MX_I2C1_Init+0x48>)
 8000286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800028a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_I2C1_Init+0x48>)
 800028e:	2200      	movs	r2, #0
 8000290:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000292:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <MX_I2C1_Init+0x48>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <MX_I2C1_Init+0x48>)
 800029a:	2200      	movs	r2, #0
 800029c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <MX_I2C1_Init+0x48>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 80002a4:	4802      	ldr	r0, [pc, #8]	; (80002b0 <MX_I2C1_Init+0x48>)
 80002a6:	f000 fd55 	bl	8000d54 <HAL_I2C_Init>

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000094 	.word	0x20000094
 80002b4:	40005400 	.word	0x40005400
 80002b8:	000186a0 	.word	0x000186a0

080002bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0f      	ldr	r2, [pc, #60]	; (8000308 <HAL_I2C_MspInit+0x4c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d117      	bne.n	80002fe <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002ce:	23c0      	movs	r3, #192	; 0xc0
 80002d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002d2:	2312      	movs	r3, #18
 80002d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d6:	2303      	movs	r3, #3
 80002d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	4619      	mov	r1, r3
 80002e0:	480a      	ldr	r0, [pc, #40]	; (800030c <HAL_I2C_MspInit+0x50>)
 80002e2:	f000 fbc9 	bl	8000a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <HAL_I2C_MspInit+0x54>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <HAL_I2C_MspInit+0x54>)
 80002ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002f0:	61d3      	str	r3, [r2, #28]
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <HAL_I2C_MspInit+0x54>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002fe:	bf00      	nop
 8000300:	3720      	adds	r7, #32
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40005400 	.word	0x40005400
 800030c:	40010c00 	.word	0x40010c00
 8000310:	40021000 	.word	0x40021000

08000314 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f000 fa41 	bl	80007a0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f869 	bl	80003f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f7ff ff7f 	bl	8000224 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000326:	f7ff ff9f 	bl	8000268 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800032a:	f000 f9b5 	bl	8000698 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  printf("\r\n***************I2C Example*******************************\r\n");
 800032e:	4827      	ldr	r0, [pc, #156]	; (80003cc <main+0xb8>)
 8000330:	f003 f8b2 	bl	8003498 <puts>
  for(i=0; i<256; i++)
 8000334:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <main+0xbc>)
 8000336:	2200      	movs	r2, #0
 8000338:	801a      	strh	r2, [r3, #0]
 800033a:	e00d      	b.n	8000358 <main+0x44>
  	WriteBuffer[i]=i;	 /* WriteBuffer init */
 800033c:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <main+0xbc>)
 800033e:	8819      	ldrh	r1, [r3, #0]
 8000340:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <main+0xbc>)
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	b2c9      	uxtb	r1, r1
 8000348:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <main+0xc0>)
 800034a:	5499      	strb	r1, [r3, r2]
  for(i=0; i<256; i++)
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <main+0xbc>)
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b29a      	uxth	r2, r3
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <main+0xbc>)
 8000356:	801a      	strh	r2, [r3, #0]
 8000358:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <main+0xbc>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	2bff      	cmp	r3, #255	; 0xff
 800035e:	d9ed      	bls.n	800033c <main+0x28>
  /* write date to EEPROM */
  if(HAL_I2C_Mem_Write(&hi2c1, ADDR_24LCxx_Write, 0, I2C_MEMADD_SIZE_8BIT,WriteBuffer,BufferSize, 0x10) == HAL_OK)
 8000360:	2310      	movs	r3, #16
 8000362:	9302      	str	r3, [sp, #8]
 8000364:	23ff      	movs	r3, #255	; 0xff
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <main+0xc0>)
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2301      	movs	r3, #1
 800036e:	2200      	movs	r2, #0
 8000370:	21a0      	movs	r1, #160	; 0xa0
 8000372:	4819      	ldr	r0, [pc, #100]	; (80003d8 <main+0xc4>)
 8000374:	f000 fd74 	bl	8000e60 <HAL_I2C_Mem_Write>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d103      	bne.n	8000386 <main+0x72>
  	printf("\r\n EEPROM 24C02 Write Test OK \r\n");
 800037e:	4817      	ldr	r0, [pc, #92]	; (80003dc <main+0xc8>)
 8000380:	f003 f88a 	bl	8003498 <puts>
 8000384:	e002      	b.n	800038c <main+0x78>
  else
  	printf("\r\n EEPROM 24C02 Write Test False \r\n");
 8000386:	4816      	ldr	r0, [pc, #88]	; (80003e0 <main+0xcc>)
 8000388:	f003 f886 	bl	8003498 <puts>

  /* read date from EEPROM */
  HAL_I2C_Mem_Read(&hi2c1, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_8BIT,ReadBuffer,BufferSize, 0x10);
 800038c:	2310      	movs	r3, #16
 800038e:	9302      	str	r3, [sp, #8]
 8000390:	23ff      	movs	r3, #255	; 0xff
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <main+0xd0>)
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2301      	movs	r3, #1
 800039a:	2200      	movs	r2, #0
 800039c:	21a1      	movs	r1, #161	; 0xa1
 800039e:	480e      	ldr	r0, [pc, #56]	; (80003d8 <main+0xc4>)
 80003a0:	f000 fe2c 	bl	8000ffc <HAL_I2C_Mem_Read>

  if(memcmp(WriteBuffer,ReadBuffer,BufferSize) == 0 ) /* check date */
 80003a4:	22ff      	movs	r2, #255	; 0xff
 80003a6:	490f      	ldr	r1, [pc, #60]	; (80003e4 <main+0xd0>)
 80003a8:	480a      	ldr	r0, [pc, #40]	; (80003d4 <main+0xc0>)
 80003aa:	f002 ffe9 	bl	8003380 <memcmp>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d103      	bne.n	80003bc <main+0xa8>
  	printf("\r\n EEPROM 24C02 Read Test OK\r\n");
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <main+0xd4>)
 80003b6:	f003 f86f 	bl	8003498 <puts>
 80003ba:	e002      	b.n	80003c2 <main+0xae>
  else
  	printf("\r\n EEPROM 24C02 Read Test False\r\n");
 80003bc:	480b      	ldr	r0, [pc, #44]	; (80003ec <main+0xd8>)
 80003be:	f003 f86b 	bl	8003498 <puts>

  printf("%d \r\n", sizeof(ReadBuffer[BufferSize]));
 80003c2:	2101      	movs	r1, #1
 80003c4:	480a      	ldr	r0, [pc, #40]	; (80003f0 <main+0xdc>)
 80003c6:	f002 fff3 	bl	80033b0 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <main+0xb6>
 80003cc:	0800426c 	.word	0x0800426c
 80003d0:	200002d0 	.word	0x200002d0
 80003d4:	200000d0 	.word	0x200000d0
 80003d8:	20000094 	.word	0x20000094
 80003dc:	080042ac 	.word	0x080042ac
 80003e0:	080042cc 	.word	0x080042cc
 80003e4:	200001d0 	.word	0x200001d0
 80003e8:	080042f0 	.word	0x080042f0
 80003ec:	08004310 	.word	0x08004310
 80003f0:	08004334 	.word	0x08004334

080003f4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b090      	sub	sp, #64	; 0x40
 80003f8:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fe:	2301      	movs	r3, #1
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000402:	2310      	movs	r3, #16
 8000404:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000406:	2300      	movs	r3, #0
 8000408:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fae6 	bl	80019e0 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000418:	2300      	movs	r3, #0
 800041a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f002 f9c5 	bl	80027bc <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000432:	f002 fcc3 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8000436:	4602      	mov	r2, r0
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <SystemClock_Config+0x6c>)
 800043a:	fba3 2302 	umull	r2, r3, r3, r2
 800043e:	099b      	lsrs	r3, r3, #6
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fae4 	bl	8000a0e <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000446:	2004      	movs	r0, #4
 8000448:	f000 faee 	bl	8000a28 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	2100      	movs	r1, #0
 8000450:	f04f 30ff 	mov.w	r0, #4294967295
 8000454:	f000 fabf 	bl	80009d6 <HAL_NVIC_SetPriority>
}
 8000458:	bf00      	nop
 800045a:	3740      	adds	r7, #64	; 0x40
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	10624dd3 	.word	0x10624dd3

08000464 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800046c:	1d39      	adds	r1, r7, #4
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	2201      	movs	r2, #1
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <__io_putchar+0x20>)
 8000476:	f002 fd56 	bl	8002f26 <HAL_UART_Transmit>

  return ch;
 800047a:	687b      	ldr	r3, [r7, #4]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200002d4 	.word	0x200002d4

08000488 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048e:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <HAL_MspInit+0x68>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <HAL_MspInit+0x68>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_MspInit+0x68>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a6:	2003      	movs	r0, #3
 80004a8:	f000 fa8a 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	f06f 000b 	mvn.w	r0, #11
 80004b4:	f000 fa8f 	bl	80009d6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	f06f 000a 	mvn.w	r0, #10
 80004c0:	f000 fa89 	bl	80009d6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2100      	movs	r1, #0
 80004c8:	f06f 0009 	mvn.w	r0, #9
 80004cc:	f000 fa83 	bl	80009d6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2100      	movs	r1, #0
 80004d4:	f06f 0003 	mvn.w	r0, #3
 80004d8:	f000 fa7d 	bl	80009d6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	f04f 30ff 	mov.w	r0, #4294967295
 80004e4:	f000 fa77 	bl	80009d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f8:	f000 f984 	bl	8000804 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80004fc:	f000 fab0 	bl	8000a60 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e00a      	b.n	800052c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000516:	f3af 8000 	nop.w
 800051a:	4601      	mov	r1, r0
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf0      	blt.n	8000516 <_read+0x12>
	}

return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e009      	b.n	8000564 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	60ba      	str	r2, [r7, #8]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff83 	bl	8000464 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf1      	blt.n	8000550 <_write+0x12>
	}
	return len;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_close>:

int _close(int file)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
	return -1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800059c:	605a      	str	r2, [r3, #4]
	return 0;
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <_isatty>:

int _isatty(int file)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	return 1;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005be:	b480      	push	{r7}
 80005c0:	b085      	sub	sp, #20
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
	return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
	...

080005d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <_sbrk+0x50>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <_sbrk+0x16>
		heap_end = &end;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <_sbrk+0x50>)
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <_sbrk+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <_sbrk+0x50>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <_sbrk+0x50>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	466a      	mov	r2, sp
 80005fe:	4293      	cmp	r3, r2
 8000600:	d907      	bls.n	8000612 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000602:	f002 fe93 	bl	800332c <__errno>
 8000606:	4602      	mov	r2, r0
 8000608:	230c      	movs	r3, #12
 800060a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	e006      	b.n	8000620 <_sbrk+0x48>
	}

	heap_end += incr;
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <_sbrk+0x50>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4a03      	ldr	r2, [pc, #12]	; (8000628 <_sbrk+0x50>)
 800061c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000084 	.word	0x20000084
 800062c:	20000318 	.word	0x20000318

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <SystemInit+0x5c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <SystemInit+0x5c>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <SystemInit+0x5c>)
 8000642:	685a      	ldr	r2, [r3, #4]
 8000644:	4911      	ldr	r1, [pc, #68]	; (800068c <SystemInit+0x5c>)
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <SystemInit+0x60>)
 8000648:	4013      	ands	r3, r2
 800064a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <SystemInit+0x5c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <SystemInit+0x5c>)
 8000652:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <SystemInit+0x5c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0a      	ldr	r2, [pc, #40]	; (800068c <SystemInit+0x5c>)
 8000662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000666:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <SystemInit+0x5c>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <SystemInit+0x5c>)
 800066e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000672:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <SystemInit+0x5c>)
 8000676:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800067a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SystemInit+0x64>)
 800067e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000682:	609a      	str	r2, [r3, #8]
#endif 
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000
 8000690:	f8ff0000 	.word	0xf8ff0000
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <MX_USART1_UART_Init+0x44>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <MX_USART1_UART_Init+0x40>)
 80006d0:	f002 fbe0 	bl	8002e94 <HAL_UART_Init>

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200002d4 	.word	0x200002d4
 80006dc:	40013800 	.word	0x40013800

080006e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a16      	ldr	r2, [pc, #88]	; (8000748 <HAL_UART_MspInit+0x68>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d125      	bne.n	800073e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_UART_MspInit+0x6c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <HAL_UART_MspInit+0x6c>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_UART_MspInit+0x6c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800070a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <HAL_UART_MspInit+0x70>)
 8000720:	f000 f9aa 	bl	8000a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <HAL_UART_MspInit+0x70>)
 800073a:	f000 f99d 	bl	8000a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40013800 	.word	0x40013800
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000754:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000756:	e003      	b.n	8000760 <LoopCopyDataInit>

08000758 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800075a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800075c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800075e:	3104      	adds	r1, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000764:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000766:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000768:	d3f6      	bcc.n	8000758 <CopyDataInit>
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800076c:	e002      	b.n	8000774 <LoopFillZerobss>

0800076e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000770:	f842 3b04 	str.w	r3, [r2], #4

08000774 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000776:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000778:	d3f9      	bcc.n	800076e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800077a:	f7ff ff59 	bl	8000630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077e:	f002 fddb 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fdc7 	bl	8000314 <main>
  bx lr
 8000786:	4770      	bx	lr
  ldr r3, =_sidata
 8000788:	08004400 	.word	0x08004400
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000790:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000794:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000798:	20000318 	.word	0x20000318

0800079c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_2_IRQHandler>
	...

080007a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x28>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f905 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fe64 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80007d4:	f002 faf2 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_InitTick+0x34>)
 80007dc:	fba3 2302 	umull	r2, r3, r3, r2
 80007e0:	099b      	lsrs	r3, r3, #6
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f913 	bl	8000a0e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 f8f1 	bl	80009d6 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	10624dd3 	.word	0x10624dd3

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick++;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_IncTick+0x18>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a03      	ldr	r2, [pc, #12]	; (800081c <HAL_IncTick+0x18>)
 8000810:	6013      	str	r3, [r2, #0]
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000088 	.word	0x20000088

08000820 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000088 	.word	0x20000088

08000834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000840:	f7ff ffee 	bl	8000820 <HAL_GetTick>
 8000844:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000846:	bf00      	nop
 8000848:	f7ff ffea 	bl	8000820 <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	1ad2      	subs	r2, r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	d3f7      	bcc.n	8000848 <HAL_Delay+0x14>
  {
  }
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	da0b      	bge.n	80008f0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <NVIC_SetPriority+0x4c>)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	3b04      	subs	r3, #4
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ee:	e009      	b.n	8000904 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4907      	ldr	r1, [pc, #28]	; (8000914 <NVIC_SetPriority+0x50>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	e000e100 	.word	0xe000e100

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff90 	bl	80008c4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff49 	bl	8000860 <NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff5e 	bl	80008a8 <NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffb0 	bl	800097c <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d106      	bne.n	8000a44 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a42:	e005      	b.n	8000a50 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a4a:	f023 0304 	bic.w	r3, r3, #4
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a64:	f000 f802 	bl	8000a6c <HAL_SYSTICK_Callback>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9a:	e133      	b.n	8000d04 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8122 	bne.w	8000cfe <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d034      	beq.n	8000b2c <HAL_GPIO_Init+0xb4>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d80d      	bhi.n	8000ae2 <HAL_GPIO_Init+0x6a>
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d02b      	beq.n	8000b22 <HAL_GPIO_Init+0xaa>
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d804      	bhi.n	8000ad8 <HAL_GPIO_Init+0x60>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d031      	beq.n	8000b36 <HAL_GPIO_Init+0xbe>
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d01c      	beq.n	8000b10 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000ad6:	e048      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d043      	beq.n	8000b64 <HAL_GPIO_Init+0xec>
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d01b      	beq.n	8000b18 <HAL_GPIO_Init+0xa0>
          break;
 8000ae0:	e043      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ae2:	4a8d      	ldr	r2, [pc, #564]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d026      	beq.n	8000b36 <HAL_GPIO_Init+0xbe>
 8000ae8:	4a8b      	ldr	r2, [pc, #556]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d806      	bhi.n	8000afc <HAL_GPIO_Init+0x84>
 8000aee:	4a8b      	ldr	r2, [pc, #556]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d020      	beq.n	8000b36 <HAL_GPIO_Init+0xbe>
 8000af4:	4a8a      	ldr	r2, [pc, #552]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d01d      	beq.n	8000b36 <HAL_GPIO_Init+0xbe>
          break;
 8000afa:	e036      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000afc:	4a89      	ldr	r2, [pc, #548]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d019      	beq.n	8000b36 <HAL_GPIO_Init+0xbe>
 8000b02:	4a89      	ldr	r2, [pc, #548]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d016      	beq.n	8000b36 <HAL_GPIO_Init+0xbe>
 8000b08:	4a88      	ldr	r2, [pc, #544]	; (8000d2c <HAL_GPIO_Init+0x2b4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d013      	beq.n	8000b36 <HAL_GPIO_Init+0xbe>
          break;
 8000b0e:	e02c      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e028      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e023      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	3308      	adds	r3, #8
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e01e      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	330c      	adds	r3, #12
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e019      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	623b      	str	r3, [r7, #32]
          break; 
 8000b42:	e012      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d105      	bne.n	8000b58 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	611a      	str	r2, [r3, #16]
          break; 
 8000b56:	e008      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	615a      	str	r2, [r3, #20]
          break; 
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
          break;
 8000b68:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2bff      	cmp	r3, #255	; 0xff
 8000b6e:	d801      	bhi.n	8000b74 <HAL_GPIO_Init+0xfc>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	e001      	b.n	8000b78 <HAL_GPIO_Init+0x100>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3304      	adds	r3, #4
 8000b78:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d802      	bhi.n	8000b86 <HAL_GPIO_Init+0x10e>
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_Init+0x114>
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	210f      	movs	r1, #15
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	6a39      	ldr	r1, [r7, #32]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 80a2 	beq.w	8000cfe <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a5c      	ldr	r2, [pc, #368]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b5a      	ldr	r3, [pc, #360]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8000bd2:	4a58      	ldr	r2, [pc, #352]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	220f      	movs	r2, #15
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4f      	ldr	r2, [pc, #316]	; (8000d38 <HAL_GPIO_Init+0x2c0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d01f      	beq.n	8000c3e <HAL_GPIO_Init+0x1c6>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <HAL_GPIO_Init+0x2c4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d019      	beq.n	8000c3a <HAL_GPIO_Init+0x1c2>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4d      	ldr	r2, [pc, #308]	; (8000d40 <HAL_GPIO_Init+0x2c8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d013      	beq.n	8000c36 <HAL_GPIO_Init+0x1be>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a4c      	ldr	r2, [pc, #304]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00d      	beq.n	8000c32 <HAL_GPIO_Init+0x1ba>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a4b      	ldr	r2, [pc, #300]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d007      	beq.n	8000c2e <HAL_GPIO_Init+0x1b6>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4a      	ldr	r2, [pc, #296]	; (8000d4c <HAL_GPIO_Init+0x2d4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d101      	bne.n	8000c2a <HAL_GPIO_Init+0x1b2>
 8000c26:	2305      	movs	r3, #5
 8000c28:	e00a      	b.n	8000c40 <HAL_GPIO_Init+0x1c8>
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	e008      	b.n	8000c40 <HAL_GPIO_Init+0x1c8>
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x1c8>
 8000c32:	2303      	movs	r3, #3
 8000c34:	e004      	b.n	8000c40 <HAL_GPIO_Init+0x1c8>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_Init+0x1c8>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <HAL_GPIO_Init+0x1c8>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c42:	f002 0203 	and.w	r2, r2, #3
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	4093      	lsls	r3, r2
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000c50:	4938      	ldr	r1, [pc, #224]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d006      	beq.n	8000c78 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4938      	ldr	r1, [pc, #224]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
 8000c76:	e006      	b.n	8000c86 <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	4933      	ldr	r1, [pc, #204]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	492e      	ldr	r1, [pc, #184]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	604b      	str	r3, [r1, #4]
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4929      	ldr	r1, [pc, #164]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	4924      	ldr	r1, [pc, #144]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	608b      	str	r3, [r1, #8]
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	491f      	ldr	r1, [pc, #124]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	491a      	ldr	r1, [pc, #104]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60cb      	str	r3, [r1, #12]
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4915      	ldr	r1, [pc, #84]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	f67f aec8 	bls.w	8000a9c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	372c      	adds	r7, #44	; 0x2c
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	10210000 	.word	0x10210000
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	10120000 	.word	0x10120000
 8000d24:	10310000 	.word	0x10310000
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10220000 	.word	0x10220000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40011400 	.word	0x40011400
 8000d48:	40011800 	.word	0x40011800
 8000d4c:	40011c00 	.word	0x40011c00
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e06e      	b.n	8000e4c <HAL_I2C_Init+0xf8>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d106      	bne.n	8000d88 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fa9a 	bl	80002bc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2224      	movs	r2, #36	; 0x24
 8000d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000da0:	f002 f834 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8000da4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <HAL_I2C_Init+0x100>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	0c9b      	lsrs	r3, r3, #18
 8000db0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_I2C_Init+0x104>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d802      	bhi.n	8000dca <HAL_I2C_Init+0x76>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	e009      	b.n	8000dde <HAL_I2C_Init+0x8a>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
 8000dd4:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <HAL_I2C_Init+0x108>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	099b      	lsrs	r3, r3, #6
 8000ddc:	3301      	adds	r3, #1
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681c      	ldr	r4, [r3, #0]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fc00 	bl	80015f0 <I2C_Configure_Speed>
 8000df0:	4603      	mov	r3, r0
 8000df2:	61e3      	str	r3, [r4, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69d9      	ldr	r1, [r3, #28]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a1a      	ldr	r2, [r3, #32]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6919      	ldr	r1, [r3, #16]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6959      	ldr	r1, [r3, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699a      	ldr	r2, [r3, #24]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0201 	orr.w	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	000186a0 	.word	0x000186a0
 8000e5c:	10624dd3 	.word	0x10624dd3

08000e60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	817b      	strh	r3, [r7, #10]
 8000e72:	460b      	mov	r3, r1
 8000e74:	813b      	strh	r3, [r7, #8]
 8000e76:	4613      	mov	r3, r2
 8000e78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	f040 80b3 	bne.w	8000fee <HAL_I2C_Mem_Write+0x18e>
  {
    if((pData == NULL) || (Size == 0))
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <HAL_I2C_Mem_Write+0x34>
 8000e8e:	8bbb      	ldrh	r3, [r7, #28]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_I2C_Mem_Write+0x38>
    {
      return  HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e0ab      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
    }

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 8000e98:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4956      	ldr	r1, [pc, #344]	; (8000ff8 <HAL_I2C_Mem_Write+0x198>)
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f000 fbf3 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_I2C_Mem_Write+0x50>
    {
      return HAL_BUSY;
 8000eac:	2302      	movs	r3, #2
 8000eae:	e09f      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <HAL_I2C_Mem_Write+0x5e>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e098      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2221      	movs	r2, #33	; 0x21
 8000eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8000eec:	88f8      	ldrh	r0, [r7, #6]
 8000eee:	893a      	ldrh	r2, [r7, #8]
 8000ef0:	8979      	ldrh	r1, [r7, #10]
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 fa15 	bl	8001328 <I2C_RequestMemoryWrite>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d044      	beq.n	8000f8e <HAL_I2C_Mem_Write+0x12e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d105      	bne.n	8000f18 <HAL_I2C_Mem_Write+0xb8>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e06b      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e065      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
    }

    while(Size > 0)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8000f24:	6a39      	ldr	r1, [r7, #32]
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 fca8 	bl	800187c <I2C_WaitOnTXEFlagUntilTimeout>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00f      	beq.n	8000f52 <HAL_I2C_Mem_Write+0xf2>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d109      	bne.n	8000f4e <HAL_I2C_Mem_Write+0xee>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f48:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e050      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
        }
        else
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e04e      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	61ba      	str	r2, [r7, #24]
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	611a      	str	r2, [r3, #16]
      Size--;
 8000f60:	8bbb      	ldrh	r3, [r7, #28]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	83bb      	strh	r3, [r7, #28]

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d10c      	bne.n	8000f8e <HAL_I2C_Mem_Write+0x12e>
 8000f74:	8bbb      	ldrh	r3, [r7, #28]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <HAL_I2C_Mem_Write+0x12e>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	61ba      	str	r2, [r7, #24]
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	611a      	str	r2, [r3, #16]
        Size--;
 8000f88:	8bbb      	ldrh	r3, [r7, #28]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	83bb      	strh	r3, [r7, #28]
    while(Size > 0)
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1c7      	bne.n	8000f24 <HAL_I2C_Mem_Write+0xc4>
      }
    }

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8000f94:	6a39      	ldr	r1, [r7, #32]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 fc70 	bl	800187c <I2C_WaitOnTXEFlagUntilTimeout>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00f      	beq.n	8000fc2 <HAL_I2C_Mem_Write+0x162>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d109      	bne.n	8000fbe <HAL_I2C_Mem_Write+0x15e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fb8:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e018      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
      }
      else
      {
        return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e016      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_I2C_Mem_Write+0x190>
  }
  else
  {
    return HAL_BUSY;
 8000fee:	2302      	movs	r3, #2
  }
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	00100002 	.word	0x00100002

08000ffc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	4608      	mov	r0, r1
 8001006:	4611      	mov	r1, r2
 8001008:	461a      	mov	r2, r3
 800100a:	4603      	mov	r3, r0
 800100c:	817b      	strh	r3, [r7, #10]
 800100e:	460b      	mov	r3, r1
 8001010:	813b      	strh	r3, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b20      	cmp	r3, #32
 8001020:	f040 817c 	bne.w	800131c <HAL_I2C_Mem_Read+0x320>
  {
    if((pData == NULL) || (Size == 0))
 8001024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <HAL_I2C_Mem_Read+0x34>
 800102a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_I2C_Mem_Read+0x38>
    {
      return  HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e174      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
    }

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG) != HAL_OK)
 8001034:	f242 7310 	movw	r3, #10000	; 0x2710
 8001038:	2201      	movs	r2, #1
 800103a:	4997      	ldr	r1, [pc, #604]	; (8001298 <HAL_I2C_Mem_Read+0x29c>)
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fb25 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_Mem_Read+0x50>
    {
      return HAL_BUSY;
 8001048:	2302      	movs	r3, #2
 800104a:	e168      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_I2C_Mem_Read+0x5e>
 8001056:	2302      	movs	r3, #2
 8001058:	e161      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2222      	movs	r2, #34	; 0x22
 8001076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_MEM;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8001088:	88f8      	ldrh	r0, [r7, #6]
 800108a:	893a      	ldrh	r2, [r7, #8]
 800108c:	8979      	ldrh	r1, [r7, #10]
 800108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	4603      	mov	r3, r0
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f9d3 	bl	8001440 <I2C_RequestMemoryRead>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00f      	beq.n	80010c0 <HAL_I2C_Mem_Read+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d105      	bne.n	80010b4 <HAL_I2C_Mem_Read+0xb8>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e134      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e12e      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
      }
    }

    if(Size == 1)
 80010c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d11b      	bne.n	80010fe <HAL_I2C_Mem_Read+0x102>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010fa:	b662      	cpsie	i
 80010fc:	e0fc      	b.n	80012f8 <HAL_I2C_Mem_Read+0x2fc>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(Size == 2)
 80010fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001100:	2b02      	cmp	r3, #2
 8001102:	d11b      	bne.n	800113c <HAL_I2C_Mem_Read+0x140>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001112:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001136:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001138:	b662      	cpsie	i
 800113a:	e0dd      	b.n	80012f8 <HAL_I2C_Mem_Read+0x2fc>
       __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800114a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
    }

    while(Size > 0)
 800115e:	e0cb      	b.n	80012f8 <HAL_I2C_Mem_Read+0x2fc>
    {
      if(Size <= 3)
 8001160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001162:	2b03      	cmp	r3, #3
 8001164:	f200 809c 	bhi.w	80012a0 <HAL_I2C_Mem_Read+0x2a4>
      {
        /* One byte */
        if(Size== 1)
 8001168:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d11a      	bne.n	80011a4 <HAL_I2C_Mem_Read+0x1a8>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
 800116e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f000 fbbf 	bl	80018f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <HAL_I2C_Mem_Read+0x190>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	2b20      	cmp	r3, #32
 8001182:	d101      	bne.n	8001188 <HAL_I2C_Mem_Read+0x18c>
            {
              return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e0ca      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
            }
            else
            {
              return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0c8      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
            }
          }

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6919      	ldr	r1, [r3, #16]
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	62ba      	str	r2, [r7, #40]	; 0x28
 8001198:	b2ca      	uxtb	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
          Size--;
 800119c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800119e:	3b01      	subs	r3, #1
 80011a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80011a2:	e0a9      	b.n	80012f8 <HAL_I2C_Mem_Read+0x2fc>
        }
        /* Two bytes */
        else if(Size == 2)
 80011a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d12b      	bne.n	8001202 <HAL_I2C_Mem_Read+0x206>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 80011aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ac:	2200      	movs	r2, #0
 80011ae:	493b      	ldr	r1, [pc, #236]	; (800129c <HAL_I2C_Mem_Read+0x2a0>)
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 fa6b 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_I2C_Mem_Read+0x1c4>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0ae      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011d0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6919      	ldr	r1, [r3, #16]
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80011de:	b2ca      	uxtb	r2, r1
 80011e0:	701a      	strb	r2, [r3, #0]
          Size--;
 80011e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011e4:	3b01      	subs	r3, #1
 80011e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  __ASM volatile ("cpsie i" : : : "memory");
 80011e8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6919      	ldr	r1, [r3, #16]
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80011f6:	b2ca      	uxtb	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
          Size--;
 80011fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011fc:	3b01      	subs	r3, #1
 80011fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001200:	e07a      	b.n	80012f8 <HAL_I2C_Mem_Read+0x2fc>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	2200      	movs	r2, #0
 8001206:	4925      	ldr	r1, [pc, #148]	; (800129c <HAL_I2C_Mem_Read+0x2a0>)
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 fa3f 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_I2C_Mem_Read+0x21c>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e082      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001226:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6919      	ldr	r1, [r3, #16]
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	62ba      	str	r2, [r7, #40]	; 0x28
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
          Size--;
 800123a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800123c:	3b01      	subs	r3, #1
 800123e:	85bb      	strh	r3, [r7, #44]	; 0x2c

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout) != HAL_OK)
 8001240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001242:	2200      	movs	r2, #0
 8001244:	4915      	ldr	r1, [pc, #84]	; (800129c <HAL_I2C_Mem_Read+0x2a0>)
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 fa20 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_I2C_Mem_Read+0x25a>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e063      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001264:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6919      	ldr	r1, [r3, #16]
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	62ba      	str	r2, [r7, #40]	; 0x28
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
          Size--;
 8001276:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001278:	3b01      	subs	r3, #1
 800127a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  __ASM volatile ("cpsie i" : : : "memory");
 800127c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6919      	ldr	r1, [r3, #16]
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	62ba      	str	r2, [r7, #40]	; 0x28
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
          Size--;
 800128e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001290:	3b01      	subs	r3, #1
 8001292:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001294:	e030      	b.n	80012f8 <HAL_I2C_Mem_Read+0x2fc>
 8001296:	bf00      	nop
 8001298:	00100002 	.word	0x00100002
 800129c:	00010004 	.word	0x00010004
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)      
 80012a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 fb26 	bl	80018f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_I2C_Mem_Read+0x2c2>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	d101      	bne.n	80012ba <HAL_I2C_Mem_Read+0x2be>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e031      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
          }
          else
          {
            return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e02f      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
          }
        }

        /* Read data from DR */
        (*pData++) = hi2c->Instance->DR;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6919      	ldr	r1, [r3, #16]
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80012ca:	b2ca      	uxtb	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
        Size--;
 80012ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012d0:	3b01      	subs	r3, #1
 80012d2:	85bb      	strh	r3, [r7, #44]	; 0x2c

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d10a      	bne.n	80012f8 <HAL_I2C_Mem_Read+0x2fc>
        {
          /* Read data from DR */
          (*pData++) = hi2c->Instance->DR;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6919      	ldr	r1, [r3, #16]
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	62ba      	str	r2, [r7, #40]	; 0x28
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
          Size--;
 80012f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012f4:	3b01      	subs	r3, #1
 80012f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while(Size > 0)
 80012f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f af30 	bne.w	8001160 <HAL_I2C_Mem_Read+0x164>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2220      	movs	r2, #32
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	e000      	b.n	800131e <HAL_I2C_Mem_Read+0x322>
  }
  else
  {
    return HAL_BUSY;
 800131c:	2302      	movs	r3, #2
  }
}
 800131e:	4618      	mov	r0, r3
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop

08001328 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	817b      	strh	r3, [r7, #10]
 800133a:	460b      	mov	r3, r1
 800133c:	813b      	strh	r3, [r7, #8]
 800133e:	4613      	mov	r3, r2
 8001340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	2200      	movs	r2, #0
 8001356:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f996 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e064      	b.n	8001434 <I2C_RequestMemoryWrite+0x10c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800136a:	897b      	ldrh	r3, [r7, #10]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001378:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 800137a:	6a3a      	ldr	r2, [r7, #32]
 800137c:	492f      	ldr	r1, [pc, #188]	; (800143c <I2C_RequestMemoryWrite+0x114>)
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fa0d 	bl	800179e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <I2C_RequestMemoryWrite+0x72>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	2b04      	cmp	r3, #4
 8001390:	d101      	bne.n	8001396 <I2C_RequestMemoryWrite+0x6e>
    {
      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e04e      	b.n	8001434 <I2C_RequestMemoryWrite+0x10c>
    }
    else
    {
      return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e04c      	b.n	8001434 <I2C_RequestMemoryWrite+0x10c>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80013ac:	6a39      	ldr	r1, [r7, #32]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 fa64 	bl	800187c <I2C_WaitOnTXEFlagUntilTimeout>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00f      	beq.n	80013da <I2C_RequestMemoryWrite+0xb2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d109      	bne.n	80013d6 <I2C_RequestMemoryWrite+0xae>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e02e      	b.n	8001434 <I2C_RequestMemoryWrite+0x10c>
    }
    else
    {
      return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e02c      	b.n	8001434 <I2C_RequestMemoryWrite+0x10c>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <I2C_RequestMemoryWrite+0xc4>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013e0:	893b      	ldrh	r3, [r7, #8]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	e022      	b.n	8001432 <I2C_RequestMemoryWrite+0x10a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80013ec:	893b      	ldrh	r3, [r7, #8]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80013fa:	6a39      	ldr	r1, [r7, #32]
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 fa3d 	bl	800187c <I2C_WaitOnTXEFlagUntilTimeout>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00f      	beq.n	8001428 <I2C_RequestMemoryWrite+0x100>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	2b04      	cmp	r3, #4
 800140e:	d109      	bne.n	8001424 <I2C_RequestMemoryWrite+0xfc>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800141e:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e007      	b.n	8001434 <I2C_RequestMemoryWrite+0x10c>
      }
      else
      {
        return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e005      	b.n	8001434 <I2C_RequestMemoryWrite+0x10c>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001428:	893b      	ldrh	r3, [r7, #8]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	00010002 	.word	0x00010002

08001440 <I2C_RequestMemoryRead>:
  * @param  MemAddSize Size of internal memory address
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	817b      	strh	r3, [r7, #10]
 8001452:	460b      	mov	r3, r1
 8001454:	813b      	strh	r3, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001468:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001478:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	2200      	movs	r2, #0
 800147e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f902 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <I2C_RequestMemoryRead+0x52>
  {
    return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e0a7      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001492:	897b      	ldrh	r3, [r7, #10]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 80014a2:	6a3a      	ldr	r2, [r7, #32]
 80014a4:	4951      	ldr	r1, [pc, #324]	; (80015ec <I2C_RequestMemoryRead+0x1ac>)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f979 	bl	800179e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <I2C_RequestMemoryRead+0x82>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d101      	bne.n	80014be <I2C_RequestMemoryRead+0x7e>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e091      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
    else
    {
      return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e08f      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80014d4:	6a39      	ldr	r1, [r7, #32]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f9d0 	bl	800187c <I2C_WaitOnTXEFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00f      	beq.n	8001502 <I2C_RequestMemoryRead+0xc2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d109      	bne.n	80014fe <I2C_RequestMemoryRead+0xbe>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e071      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
    else
    {
      return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e06f      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <I2C_RequestMemoryRead+0xd4>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	e022      	b.n	800155a <I2C_RequestMemoryRead+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8001522:	6a39      	ldr	r1, [r7, #32]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f9a9 	bl	800187c <I2C_WaitOnTXEFlagUntilTimeout>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00f      	beq.n	8001550 <I2C_RequestMemoryRead+0x110>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001534:	2b04      	cmp	r3, #4
 8001536:	d109      	bne.n	800154c <I2C_RequestMemoryRead+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001546:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e04a      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
      }
      else
      {
        return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e048      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001550:	893b      	ldrh	r3, [r7, #8]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800155a:	6a39      	ldr	r1, [r7, #32]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 f98d 	bl	800187c <I2C_WaitOnTXEFlagUntilTimeout>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00f      	beq.n	8001588 <I2C_RequestMemoryRead+0x148>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156c:	2b04      	cmp	r3, #4
 800156e:	d109      	bne.n	8001584 <I2C_RequestMemoryRead+0x144>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800157e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e02e      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
    else
    {
      return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e02c      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001596:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	2200      	movs	r2, #0
 800159c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f873 	bl	800168c <I2C_WaitOnFlagUntilTimeout>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <I2C_RequestMemoryRead+0x170>
  {
    return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e018      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <I2C_RequestMemoryRead+0x1ac>)
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f8ea 	bl	800179e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <I2C_RequestMemoryRead+0x1a0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d101      	bne.n	80015dc <I2C_RequestMemoryRead+0x19c>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e002      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
    else
    {
      return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e000      	b.n	80015e2 <I2C_RequestMemoryRead+0x1a2>
    }
  }

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	00010002 	.word	0x00010002

080015f0 <I2C_Configure_Speed>:
  *                the configuration information for the specified I2C.
  * @param  I2CClkSrcFreq: PCLK frequency from RCC.
  * @retval CCR Speed: Speed to set in I2C CCR Register
  */
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a21      	ldr	r2, [pc, #132]	; (8001688 <I2C_Configure_Speed+0x98>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d80f      	bhi.n	8001628 <I2C_Configure_Speed+0x38>
  {
    /* Calculate Value to be set in CCR register */
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	fbb2 f3f3 	udiv	r3, r2, r3
 8001614:	60fb      	str	r3, [r7, #12]
    
    /* The minimum allowed value set in CCR register is 0x04 for Standard Mode */
    if( (tmp1 & I2C_CCR_CCR) < 4 )
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161c:	2b03      	cmp	r3, #3
 800161e:	d801      	bhi.n	8001624 <I2C_Configure_Speed+0x34>
    {
      return 4;
 8001620:	2304      	movs	r3, #4
 8001622:	e02b      	b.n	800167c <I2C_Configure_Speed+0x8c>
    }
    else
    {
      return tmp1;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	e029      	b.n	800167c <I2C_Configure_Speed+0x8c>
    }
  }
  else
  {
    /* Clock Fast Mode */
    tmp1 = I2C_CCR_FS;
 8001628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162c:	60fb      	str	r3, [r7, #12]
    
    /* Duty Cylce tLow/tHigh = 2 */
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10b      	bne.n	800164e <I2C_Configure_Speed+0x5e>
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e00e      	b.n	800166c <I2C_Configure_Speed+0x7c>
    }
    else /* Duty Cylce tLow/tHigh = 16/9 */
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166a:	60fb      	str	r3, [r7, #12]
    }

    /* The minimum allowed value set in CCR register is 0x01 for Fast Mode */
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <I2C_Configure_Speed+0x8a>
    {
      return 1;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <I2C_Configure_Speed+0x8c>
    }
    else
    {
      return tmp1;
 800167a:	68fb      	ldr	r3, [r7, #12]
    }
  }
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	000186a0 	.word	0x000186a0

0800168c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	4613      	mov	r3, r2
 800169a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff f8be 	bl	8000820 <HAL_GetTick>
 80016a4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d153      	bne.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xc8>
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016ac:	e018      	b.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0x54>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d014      	beq.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0x54>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x40>
 80016bc:	f7ff f8b0 	bl	8000820 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d209      	bcs.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0x54>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e05a      	b.n	8001796 <I2C_WaitOnFlagUntilTimeout+0x10a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10c      	bne.n	8001704 <I2C_WaitOnFlagUntilTimeout+0x78>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	43da      	mvns	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4013      	ands	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf14      	ite	ne
 80016fc:	2301      	movne	r3, #1
 80016fe:	2300      	moveq	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e00b      	b.n	800171c <I2C_WaitOnFlagUntilTimeout+0x90>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4013      	ands	r3, r2
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1c6      	bne.n	80016ae <I2C_WaitOnFlagUntilTimeout+0x22>
 8001720:	e038      	b.n	8001794 <I2C_WaitOnFlagUntilTimeout+0x108>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d014      	beq.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xc8>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <I2C_WaitOnFlagUntilTimeout+0xb4>
 8001730:	f7ff f876 	bl	8000820 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d209      	bcs.n	8001754 <I2C_WaitOnFlagUntilTimeout+0xc8>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2220      	movs	r2, #32
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e020      	b.n	8001796 <I2C_WaitOnFlagUntilTimeout+0x10a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d10c      	bne.n	8001778 <I2C_WaitOnFlagUntilTimeout+0xec>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	43da      	mvns	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	4013      	ands	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e00b      	b.n	8001790 <I2C_WaitOnFlagUntilTimeout+0x104>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4013      	ands	r3, r2
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1c6      	bne.n	8001722 <I2C_WaitOnFlagUntilTimeout+0x96>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Flag: specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ae:	f7ff f837 	bl	8000820 <HAL_GetTick>
 80017b2:	6178      	str	r0, [r7, #20]

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b4:	e03d      	b.n	8001832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c4:	d11c      	bne.n	8001800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e4:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2204      	movs	r2, #4
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e039      	b.n	8001874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd6>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001806:	d014      	beq.n	8001832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x80>
 800180e:	f7ff f807 	bl	8000820 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d209      	bcs.n	8001832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e020      	b.n	8001874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd6>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10c      	bne.n	8001856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb8>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4013      	ands	r3, r2
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	e00b      	b.n	800186e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	43da      	mvns	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4013      	ands	r3, r2
 8001862:	b29b      	uxth	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1a1      	bne.n	80017b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <I2C_WaitOnTXEFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = HAL_GetTick();
 8001886:	f7fe ffcb 	bl	8000820 <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800188c:	e026      	b.n	80018dc <I2C_WaitOnTXEFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f87e 	bl	8001990 <I2C_IsAcknowledgeFailed>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e026      	b.n	80018ec <I2C_WaitOnTXEFlagUntilTimeout+0x70>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d01a      	beq.n	80018dc <I2C_WaitOnTXEFlagUntilTimeout+0x60>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <I2C_WaitOnTXEFlagUntilTimeout+0x40>
 80018ac:	f7fe ffb8 	bl	8000820 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d20f      	bcs.n	80018dc <I2C_WaitOnTXEFlagUntilTimeout+0x60>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	f043 0220 	orr.w	r2, r3, #32
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e007      	b.n	80018ec <I2C_WaitOnTXEFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	2b80      	cmp	r3, #128	; 0x80
 80018e8:	d1d1      	bne.n	800188e <I2C_WaitOnTXEFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;      
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0x00;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8001902:	f7fe ff8d 	bl	8000820 <HAL_GetTick>
 8001906:	60f8      	str	r0, [r7, #12]
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001908:	e036      	b.n	8001978 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b10      	cmp	r3, #16
 8001916:	d114      	bne.n	8001942 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0210 	bic.w	r2, r2, #16
 8001926:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e022      	b.n	8001988 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
 8001948:	f7fe ff6a 	bl	8000820 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d20f      	bcs.n	8001978 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	639a      	str	r2, [r3, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e007      	b.n	8001988 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	2b40      	cmp	r3, #64	; 0x40
 8001984:	d1c1      	bne.n	800190a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d114      	bne.n	80019d2 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b6:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0f0      	sub	sp, #448	; 0x1c0
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 819e 	beq.w	8001d3c <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a00:	4bb9      	ldr	r3, [pc, #740]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d00c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a0c:	4bb6      	ldr	r3, [pc, #728]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d14f      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xd8>
 8001a18:	4bb3      	ldr	r3, [pc, #716]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d148      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xd8>
 8001a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001a3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <HAL_RCC_OscConfig+0x78>
 8001a52:	4ba5      	ldr	r3, [pc, #660]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x90>
 8001a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001a6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a74:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8001a78:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001a7c:	fa92 f2a2 	rbit	r2, r2
 8001a80:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 8001a84:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001a88:	fab2 f282 	clz	r2, r2
 8001a8c:	b252      	sxtb	r2, r2
 8001a8e:	f042 0220 	orr.w	r2, r2, #32
 8001a92:	b252      	sxtb	r2, r2
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	f002 021f 	and.w	r2, r2, #31
 8001a9a:	40d3      	lsrs	r3, r2
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 814a 	beq.w	8001d3a <HAL_RCC_OscConfig+0x35a>
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 8144 	bne.w	8001d3a <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 be7b 	b.w	80027ae <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001ab8:	4b8b      	ldr	r3, [pc, #556]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a8a      	ldr	r2, [pc, #552]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a87      	ldr	r2, [pc, #540]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7fe fea6 	bl	8000820 <HAL_GetTick>
 8001ad4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ada:	f7fe fea1 	bl	8000820 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d902      	bls.n	8001af0 <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	f000 be5f 	b.w	80027ae <HAL_RCC_OscConfig+0xdce>
 8001af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8001b04:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0x142>
 8001b1c:	4b72      	ldr	r3, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x15a>
 8001b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b26:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001b36:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b3e:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8001b42:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001b46:	fa92 f2a2 	rbit	r2, r2
 8001b4a:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 8001b4e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b252      	sxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b252      	sxtb	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	40d3      	lsrs	r3, r2
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1b5      	bne.n	8001ada <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1a8>
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e030      	b.n	8001bea <HAL_RCC_OscConfig+0x20a>
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x1cc>
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01e      	b.n	8001bea <HAL_RCC_OscConfig+0x20a>
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x1f2>
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a47      	ldr	r2, [pc, #284]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x20a>
 8001bd2:	4b45      	ldr	r3, [pc, #276]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a44      	ldr	r2, [pc, #272]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a41      	ldr	r2, [pc, #260]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d04f      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe fe14 	bl	8000820 <HAL_GetTick>
 8001bf8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfe:	f7fe fe0f 	bl	8000820 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d902      	bls.n	8001c14 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f000 bdcd 	b.w	80027ae <HAL_RCC_OscConfig+0xdce>
 8001c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 8001c28:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_OscConfig+0x266>
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	e00b      	b.n	8001c5e <HAL_RCC_OscConfig+0x27e>
 8001c46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c62:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c66:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c6a:	fa92 f2a2 	rbit	r2, r2
 8001c6e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8001c72:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c76:	fab2 f282 	clz	r2, r2
 8001c7a:	b252      	sxtb	r2, r2
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	b252      	sxtb	r2, r2
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f002 021f 	and.w	r2, r2, #31
 8001c88:	40d3      	lsrs	r3, r2
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0b5      	beq.n	8001bfe <HAL_RCC_OscConfig+0x21e>
 8001c92:	e053      	b.n	8001d3c <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe fdc4 	bl	8000820 <HAL_GetTick>
 8001c98:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9e:	f7fe fdbf 	bl	8000820 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d902      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f000 bd7d 	b.w	80027ae <HAL_RCC_OscConfig+0xdce>
 8001cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8001cc8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x30c>
 8001ce0:	4b01      	ldr	r3, [pc, #4]	; (8001ce8 <HAL_RCC_OscConfig+0x308>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	e00e      	b.n	8001d04 <HAL_RCC_OscConfig+0x324>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001d00:	4bce      	ldr	r3, [pc, #824]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d08:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8001d0c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 8001d18:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b252      	sxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b252      	sxtb	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	40d3      	lsrs	r3, r2
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1b2      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2be>
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8151 	beq.w	8001fee <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d4c:	4bbb      	ldr	r3, [pc, #748]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d58:	4bb8      	ldr	r3, [pc, #736]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d163      	bne.n	8001e2c <HAL_RCC_OscConfig+0x44c>
 8001d64:	4bb5      	ldr	r3, [pc, #724]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d15d      	bne.n	8001e2c <HAL_RCC_OscConfig+0x44c>
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8001d82:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
 8001d9a:	4ba8      	ldr	r3, [pc, #672]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x3d6>
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001db2:	4ba2      	ldr	r3, [pc, #648]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2202      	movs	r2, #2
 8001db8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dbc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dc0:	fa92 f2a2 	rbit	r2, r2
 8001dc4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8001dc8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dcc:	fab2 f282 	clz	r2, r2
 8001dd0:	b252      	sxtb	r2, r2
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	b252      	sxtb	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	40d3      	lsrs	r3, r2
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_RCC_OscConfig+0x418>
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f000 bcdb 	b.w	80027ae <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b90      	ldr	r3, [pc, #576]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6959      	ldr	r1, [r3, #20]
 8001e06:	23f8      	movs	r3, #248	; 0xf8
 8001e08:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8001e18:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	4985      	ldr	r1, [pc, #532]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e0e0      	b.n	8001fee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d07a      	beq.n	8001f2c <HAL_RCC_OscConfig+0x54c>
 8001e36:	2301      	movs	r3, #1
 8001e38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8001e48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001e56:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fcde 	bl	8000820 <HAL_GetTick>
 8001e64:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe fcd9 	bl	8000820 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d902      	bls.n	8001e80 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	f000 bc97 	b.w	80027ae <HAL_RCC_OscConfig+0xdce>
 8001e80:	2302      	movs	r3, #2
 8001e82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8001e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4d0>
 8001eaa:	4b64      	ldr	r3, [pc, #400]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4e6>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ec2:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001ecc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 8001ed8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b252      	sxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b252      	sxtb	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	40d3      	lsrs	r3, r2
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0b8      	beq.n	8001e6a <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6959      	ldr	r1, [r3, #20]
 8001f06:	23f8      	movs	r3, #248	; 0xf8
 8001f08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 8001f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	4945      	ldr	r1, [pc, #276]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
 8001f2a:	e060      	b.n	8001fee <HAL_RCC_OscConfig+0x60e>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8001f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001f4c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001f50:	461a      	mov	r2, r3
 8001f52:	2300      	movs	r3, #0
 8001f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe fc63 	bl	8000820 <HAL_GetTick>
 8001f5a:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f60:	f7fe fc5e 	bl	8000820 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d902      	bls.n	8001f76 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	f000 bc1c 	b.w	80027ae <HAL_RCC_OscConfig+0xdce>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 8001f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5c6>
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x5dc>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001fb8:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_OscConfig+0x65c>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001fc2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001fc6:	fa92 f2a2 	rbit	r2, r2
 8001fca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 8001fce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b252      	sxtb	r2, r2
 8001fd8:	f042 0220 	orr.w	r2, r2, #32
 8001fdc:	b252      	sxtb	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f002 021f 	and.w	r2, r2, #31
 8001fe4:	40d3      	lsrs	r3, r2
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1b8      	bne.n	8001f60 <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b7 	beq.w	800216c <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d059      	beq.n	80020bc <HAL_RCC_OscConfig+0x6dc>
 8002008:	2301      	movs	r3, #1
 800200a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 800201a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x660>)
 8002028:	4413      	add	r3, r2
 800202a:	461a      	mov	r2, r3
 800202c:	2301      	movs	r3, #1
 800202e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fbf6 	bl	8000820 <HAL_GetTick>
 8002034:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002038:	e00e      	b.n	8002058 <HAL_RCC_OscConfig+0x678>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fbec 	bl	8000820 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e3aa      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207c:	4bb0      	ldr	r3, [pc, #704]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 800207e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8002092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b25b      	sxtb	r3, r3
 800209c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0c7      	beq.n	8002044 <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7fe fbbd 	bl	8000834 <HAL_Delay>
 80020ba:	e057      	b.n	800216c <HAL_RCC_OscConfig+0x78c>
 80020bc:	2301      	movs	r3, #1
 80020be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 80020ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	461a      	mov	r2, r3
 80020da:	4b9a      	ldr	r3, [pc, #616]	; (8002344 <HAL_RCC_OscConfig+0x964>)
 80020dc:	4413      	add	r3, r2
 80020de:	461a      	mov	r2, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fb9c 	bl	8000820 <HAL_GetTick>
 80020e8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e009      	b.n	8002102 <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ee:	f7fe fb97 	bl	8000820 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e355      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 8002102:	2302      	movs	r3, #2
 8002104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002114:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002118:	2202      	movs	r2, #2
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800212a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 800212e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002130:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002134:	2102      	movs	r1, #2
 8002136:	6019      	str	r1, [r3, #0]
 8002138:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f1a3 	rbit	r1, r3
 8002142:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002146:	6019      	str	r1, [r3, #0]
  return(result);
 8002148:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b25b      	sxtb	r3, r3
 8002154:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002158:	b25b      	sxtb	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1c0      	bne.n	80020ee <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8188 	beq.w	800248c <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b70      	ldr	r3, [pc, #448]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	4a6f      	ldr	r2, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	61d3      	str	r3, [r2, #28]
 8002188:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x968>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a69      	ldr	r2, [pc, #420]	; (8002348 <HAL_RCC_OscConfig+0x968>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fb3a 	bl	8000820 <HAL_GetTick>
 80021ac:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021b0:	e009      	b.n	80021c6 <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7fe fb35 	bl	8000820 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e2f3      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80021c6:	4b60      	ldr	r3, [pc, #384]	; (8002348 <HAL_RCC_OscConfig+0x968>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0ef      	beq.n	80021b2 <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a5a      	ldr	r2, [pc, #360]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b58      	ldr	r3, [pc, #352]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a57      	ldr	r2, [pc, #348]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ea:	f7fe fb19 	bl	8000820 <HAL_GetTick>
 80021ee:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe fb14 	bl	8000820 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e2d0      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 800220c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002228:	2202      	movs	r2, #2
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800223a:	601a      	str	r2, [r3, #0]
  return(result);
 800223c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002240:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d102      	bne.n	800225c <HAL_RCC_OscConfig+0x87c>
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	e001      	b.n	8002260 <HAL_RCC_OscConfig+0x880>
 800225c:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002264:	2102      	movs	r1, #2
 8002266:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	fa92 f1a2 	rbit	r1, r2
 8002272:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002276:	6011      	str	r1, [r2, #0]
  return(result);
 8002278:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b252      	sxtb	r2, r2
 8002284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002288:	b252      	sxtb	r2, r2
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	40d3      	lsrs	r3, r2
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ac      	bne.n	80021f4 <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x8d2>
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	e02f      	b.n	8002312 <HAL_RCC_OscConfig+0x932>
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x8f6>
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e01d      	b.n	8002312 <HAL_RCC_OscConfig+0x932>
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x91a>
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a16      	ldr	r2, [pc, #88]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a13      	ldr	r2, [pc, #76]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x932>
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_RCC_OscConfig+0x960>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d05f      	beq.n	80023dc <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7fe fa80 	bl	8000820 <HAL_GetTick>
 8002320:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e012      	b.n	800234c <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fa7b 	bl	8000820 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d908      	bls.n	800234c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e237      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	42420480 	.word	0x42420480
 8002348:	40007000 	.word	0x40007000
 800234c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002368:	2202      	movs	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa93 f2a3 	rbit	r2, r3
 8002376:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800237a:	601a      	str	r2, [r3, #0]
  return(result);
 800237c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002380:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0x9bc>
 8002396:	4bb2      	ldr	r3, [pc, #712]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	e001      	b.n	80023a0 <HAL_RCC_OscConfig+0x9c0>
 800239c:	4bb0      	ldr	r3, [pc, #704]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023a4:	2102      	movs	r1, #2
 80023a6:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	fa92 f1a2 	rbit	r1, r2
 80023b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023b6:	6011      	str	r1, [r2, #0]
  return(result);
 80023b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	fab2 f282 	clz	r2, r2
 80023c2:	b252      	sxtb	r2, r2
 80023c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c8:	b252      	sxtb	r2, r2
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f002 021f 	and.w	r2, r2, #31
 80023d0:	40d3      	lsrs	r3, r2
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0a5      	beq.n	8002326 <HAL_RCC_OscConfig+0x946>
 80023da:	e057      	b.n	800248c <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7fe fa20 	bl	8000820 <HAL_GetTick>
 80023e0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe fa1b 	bl	8000820 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1d7      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 80023fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002402:	2202      	movs	r2, #2
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800241a:	2202      	movs	r2, #2
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800242c:	601a      	str	r2, [r3, #0]
  return(result);
 800242e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002432:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d102      	bne.n	800244e <HAL_RCC_OscConfig+0xa6e>
 8002448:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	e001      	b.n	8002452 <HAL_RCC_OscConfig+0xa72>
 800244e:	4b84      	ldr	r3, [pc, #528]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002456:	2102      	movs	r1, #2
 8002458:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002468:	6011      	str	r1, [r2, #0]
  return(result);
 800246a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b252      	sxtb	r2, r2
 8002476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247a:	b252      	sxtb	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f002 021f 	and.w	r2, r2, #31
 8002482:	40d3      	lsrs	r3, r2
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ac      	bne.n	80023e6 <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 818a 	beq.w	80027ac <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b71      	ldr	r3, [pc, #452]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	f000 8181 	beq.w	80027a8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	f040 8107 	bne.w	80026c0 <HAL_RCC_OscConfig+0xce0>
 80024b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024ca:	601a      	str	r2, [r3, #0]
  return(result);
 80024cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024d0:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80024dc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80024e0:	461a      	mov	r2, r3
 80024e2:	2300      	movs	r3, #0
 80024e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe f99b 	bl	8000820 <HAL_GetTick>
 80024ea:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	e009      	b.n	8002504 <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe f996 	bl	8000820 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e154      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 8002504:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800251c:	601a      	str	r2, [r3, #0]
  return(result);
 800251e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002522:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0xb5e>
 8002538:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e00e      	b.n	800255c <HAL_RCC_OscConfig+0xb7c>
 800253e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002560:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002564:	6011      	str	r1, [r2, #0]
 8002566:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	fa92 f1a2 	rbit	r1, r2
 8002570:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002574:	6011      	str	r1, [r2, #0]
  return(result);
 8002576:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	fab2 f282 	clz	r2, r2
 8002580:	b252      	sxtb	r2, r2
 8002582:	f042 0220 	orr.w	r2, r2, #32
 8002586:	b252      	sxtb	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f002 021f 	and.w	r2, r2, #31
 800258e:	40d3      	lsrs	r3, r2
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ab      	bne.n	80024f0 <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a2:	d109      	bne.n	80025b8 <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	492b      	ldr	r1, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a19      	ldr	r1, [r3, #32]
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	430b      	orrs	r3, r1
 80025ce:	4924      	ldr	r1, [pc, #144]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ec:	601a      	str	r2, [r3, #0]
  return(result);
 80025ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025f2:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80025fe:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8002602:	461a      	mov	r2, r3
 8002604:	2301      	movs	r3, #1
 8002606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe f90a 	bl	8000820 <HAL_GetTick>
 800260c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002610:	e009      	b.n	8002626 <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe f905 	bl	8000820 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0c3      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 8002626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800262a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800263e:	601a      	str	r2, [r3, #0]
  return(result);
 8002640:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002644:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d104      	bne.n	8002664 <HAL_RCC_OscConfig+0xc84>
 800265a:	4b01      	ldr	r3, [pc, #4]	; (8002660 <HAL_RCC_OscConfig+0xc80>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	e010      	b.n	8002682 <HAL_RCC_OscConfig+0xca2>
 8002660:	40021000 	.word	0x40021000
 8002664:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	4b4e      	ldr	r3, [pc, #312]	; (80027b8 <HAL_RCC_OscConfig+0xdd8>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002686:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800268a:	6011      	str	r1, [r2, #0]
 800268c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	fa92 f1a2 	rbit	r1, r2
 8002696:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800269a:	6011      	str	r1, [r2, #0]
  return(result);
 800269c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	b252      	sxtb	r2, r2
 80026a8:	f042 0220 	orr.w	r2, r2, #32
 80026ac:	b252      	sxtb	r2, r2
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f002 021f 	and.w	r2, r2, #31
 80026b4:	40d3      	lsrs	r3, r2
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0a9      	beq.n	8002612 <HAL_RCC_OscConfig+0xc32>
 80026be:	e075      	b.n	80027ac <HAL_RCC_OscConfig+0xdcc>
 80026c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fa93 f2a3 	rbit	r2, r3
 80026d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d8:	601a      	str	r2, [r3, #0]
  return(result);
 80026da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026de:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80026ea:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80026ee:	461a      	mov	r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe f894 	bl	8000820 <HAL_GetTick>
 80026f8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fc:	e009      	b.n	8002712 <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe f88f 	bl	8000820 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04d      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
 8002712:	f107 0320 	add.w	r3, r7, #32
 8002716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f107 0320 	add.w	r3, r7, #32
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	601a      	str	r2, [r3, #0]
  return(result);
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_RCC_OscConfig+0xd6c>
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0xdd8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e00e      	b.n	800276a <HAL_RCC_OscConfig+0xd8a>
 800274c:	f107 0318 	add.w	r3, r7, #24
 8002750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f107 0318 	add.w	r3, r7, #24
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_RCC_OscConfig+0xdd8>)
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f107 0210 	add.w	r2, r7, #16
 800276e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002772:	6011      	str	r1, [r2, #0]
 8002774:	f107 0210 	add.w	r2, r7, #16
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	fa92 f1a2 	rbit	r1, r2
 800277e:	f107 020c 	add.w	r2, r7, #12
 8002782:	6011      	str	r1, [r2, #0]
  return(result);
 8002784:	f107 020c 	add.w	r2, r7, #12
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b252      	sxtb	r2, r2
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	b252      	sxtb	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f002 021f 	and.w	r2, r2, #31
 800279c:	40d3      	lsrs	r3, r2
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ab      	bne.n	80026fe <HAL_RCC_OscConfig+0xd1e>
 80027a6:	e001      	b.n	80027ac <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0a8      	sub	sp, #160	; 0xa0
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80027cc:	4bb0      	ldr	r3, [pc, #704]	; (8002a90 <HAL_RCC_ClockConfig+0x2d4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	f240 812b 	bls.w	8002a32 <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027dc:	4bac      	ldr	r3, [pc, #688]	; (8002a90 <HAL_RCC_ClockConfig+0x2d4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 0207 	bic.w	r2, r3, #7
 80027e4:	49aa      	ldr	r1, [pc, #680]	; (8002a90 <HAL_RCC_ClockConfig+0x2d4>)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ec:	4ba8      	ldr	r3, [pc, #672]	; (8002a90 <HAL_RCC_ClockConfig+0x2d4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e25d      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280a:	4ba2      	ldr	r3, [pc, #648]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	499f      	ldr	r1, [pc, #636]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8225 	beq.w	8002c74 <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d140      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
 8002832:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002836:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8002846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_RCC_ClockConfig+0xa8>
 800285e:	4b8d      	ldr	r3, [pc, #564]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e00b      	b.n	800287c <HAL_RCC_ClockConfig+0xc0>
 8002864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002878:	4b86      	ldr	r3, [pc, #536]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002880:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002884:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8002890:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b252      	sxtb	r2, r2
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	b252      	sxtb	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	40d3      	lsrs	r3, r2
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d170      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e202      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d137      	bne.n	800292c <HAL_RCC_ClockConfig+0x170>
 80028bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80028ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_RCC_ClockConfig+0x12e>
 80028e4:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	e008      	b.n	80028fc <HAL_RCC_ClockConfig+0x140>
 80028ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ee:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	677b      	str	r3, [r7, #116]	; 0x74
 80028f8:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002900:	673a      	str	r2, [r7, #112]	; 0x70
 8002902:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 800290a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b252      	sxtb	r2, r2
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	b252      	sxtb	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f002 021f 	and.w	r2, r2, #31
 800291e:	40d3      	lsrs	r3, r2
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d134      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e1c6      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
 800292c:	2302      	movs	r3, #2
 800292e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8002938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <HAL_RCC_ClockConfig+0x198>
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	e007      	b.n	8002964 <HAL_RCC_ClockConfig+0x1a8>
 8002954:	2302      	movs	r3, #2
 8002956:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	2202      	movs	r2, #2
 8002966:	65ba      	str	r2, [r7, #88]	; 0x58
 8002968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800296a:	fa92 f2a2 	rbit	r2, r2
 800296e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002972:	fab2 f282 	clz	r2, r2
 8002976:	b252      	sxtb	r2, r2
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	b252      	sxtb	r2, r2
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f002 021f 	and.w	r2, r2, #31
 8002984:	40d3      	lsrs	r3, r2
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e193      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	493d      	ldr	r1, [pc, #244]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a4:	f7fd ff3c 	bl	8000820 <HAL_GetTick>
 80029a8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d113      	bne.n	80029dc <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b6:	f7fd ff33 	bl	8000820 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e175      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d1ed      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x1fa>
 80029da:	e14b      	b.n	8002c74 <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d11f      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e4:	e00b      	b.n	80029fe <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fd ff1b 	bl	8000820 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e15d      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d1ed      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x22a>
 8002a0a:	e133      	b.n	8002c74 <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fd ff08 	bl	8000820 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e14a      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ed      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x250>
 8002a30:	e120      	b.n	8002c74 <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4912      	ldr	r1, [pc, #72]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80fa 	beq.w	8002c52 <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d139      	bne.n	8002ada <HAL_RCC_ClockConfig+0x31e>
 8002a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x2dc>
 8002a8a:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <HAL_RCC_ClockConfig+0x2d8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	e00c      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2ee>
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40021000 	.word	0x40021000
 8002a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa6:	4b87      	ldr	r3, [pc, #540]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aae:	643a      	str	r2, [r7, #64]	; 0x40
 8002ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ab2:	fa92 f2a2 	rbit	r2, r2
 8002ab6:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 8002ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aba:	fab2 f282 	clz	r2, r2
 8002abe:	b252      	sxtb	r2, r2
 8002ac0:	f042 0220 	orr.w	r2, r2, #32
 8002ac4:	b252      	sxtb	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f002 021f 	and.w	r2, r2, #31
 8002acc:	40d3      	lsrs	r3, r2
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d16e      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0ef      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d135      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x392>
 8002ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x350>
 8002b06:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_ClockConfig+0x362>
 8002b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b22:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b26:	fa92 f2a2 	rbit	r2, r2
 8002b2a:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b252      	sxtb	r2, r2
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	b252      	sxtb	r2, r2
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f002 021f 	and.w	r2, r2, #31
 8002b40:	40d3      	lsrs	r3, r2
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d134      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0b5      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x3ba>
 8002b70:	4b54      	ldr	r3, [pc, #336]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	e007      	b.n	8002b86 <HAL_RCC_ClockConfig+0x3ca>
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2202      	movs	r2, #2
 8002b88:	613a      	str	r2, [r7, #16]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	fa92 f2a2 	rbit	r2, r2
 8002b90:	60fa      	str	r2, [r7, #12]
  return(result);
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b252      	sxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b252      	sxtb	r2, r2
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	40d3      	lsrs	r3, r2
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e082      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb4:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 0203 	bic.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4940      	ldr	r1, [pc, #256]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fd fe2b 	bl	8000820 <HAL_GetTick>
 8002bca:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d113      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fd fe22 	bl	8000820 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e064      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf0:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d1ed      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x41c>
 8002bfc:	e029      	b.n	8002c52 <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11f      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fd fe0a 	bl	8000820 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e04c      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d1ed      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x44c>
 8002c2c:	e011      	b.n	8002c52 <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2e:	f7fd fdf7 	bl	8000820 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e039      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c46:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ed      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_ClockConfig+0x50c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 0207 	bic.w	r2, r3, #7
 8002c5a:	491b      	ldr	r1, [pc, #108]	; (8002cc8 <HAL_RCC_ClockConfig+0x50c>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x50c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e022      	b.n	8002cba <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4905      	ldr	r1, [pc, #20]	; (8002cc4 <HAL_RCC_ClockConfig+0x508>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fd fd8a 	bl	80007cc <HAL_InitTick>
  
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	37a0      	adds	r7, #160	; 0xa0
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40022000 	.word	0x40022000

08002ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b490      	push	{r4, r7}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cd2:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002cd4:	1d3c      	adds	r4, r7, #4
 8002cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8002cdc:	4b33      	ldr	r3, [pc, #204]	; (8002dac <HAL_RCC_GetSysClockFreq+0xe0>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cea:	2300      	movs	r3, #0
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x40>
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x46>
 8002d0a:	e043      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d0c:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d10:	e043      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d18:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d34:	4413      	add	r3, r2
 8002d36:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01e      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	617b      	str	r3, [r7, #20]
  return(result);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	e004      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3738      	adds	r7, #56	; 0x38
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc90      	pop	{r4, r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	0800433c 	.word	0x0800433c
 8002dac:	0800434c 	.word	0x0800434c
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	003d0900 	.word	0x003d0900

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002dc2:	f7ff ff83 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x44>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd0:	23f0      	movs	r3, #240	; 0xf0
 8002dd2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	603b      	str	r3, [r7, #0]
  return(result);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	fa22 f303 	lsr.w	r3, r2, r3
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x48>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	fa21 f303 	lsr.w	r3, r1, r3
 8002dee:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002df0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08004350 	.word	0x08004350
 8002e08:	20000000 	.word	0x20000000

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002e12:	f7ff ffd3 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e16:	4601      	mov	r1, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e20:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e24:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	603b      	str	r3, [r7, #0]
  return(result);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08004350 	.word	0x08004350

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002e56:	f7ff ffb1 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002e64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002e68:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	603b      	str	r3, [r7, #0]
  return(result);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08004350 	.word	0x08004350

08002e94 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e03b      	b.n	8002f1e <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd fc10 	bl	80006e0 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f967 	bl	80031ac <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002efc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f0c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d003      	beq.n	8002f52 <HAL_UART_Transmit+0x2c>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b22      	cmp	r3, #34	; 0x22
 8002f4e:	f040 808e 	bne.w	800306e <HAL_UART_Transmit+0x148>
  {
    if((pData == NULL) || (Size == 0))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_UART_Transmit+0x38>
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e086      	b.n	8003070 <HAL_UART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Transmit+0x4a>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e07f      	b.n	8003070 <HAL_UART_Transmit+0x14a>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b22      	cmp	r3, #34	; 0x22
 8002f88:	d104      	bne.n	8002f94 <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2232      	movs	r2, #50	; 0x32
 8002f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f92:	e003      	b.n	8002f9c <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2212      	movs	r2, #18
 8002f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8002fa8:	e03d      	b.n	8003026 <HAL_UART_Transmit+0x100>
    {
      huart->TxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	d120      	bne.n	8003002 <HAL_UART_Transmit+0xdc>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f856 	bl	8003078 <UART_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e04c      	b.n	8003070 <HAL_UART_Transmit+0x14a>
        }
        tmp = (uint16_t*) pData;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_UART_Transmit+0xd4>
        {
          pData +=2;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	e015      	b.n	8003026 <HAL_UART_Transmit+0x100>
        }
        else
        { 
          pData +=1;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	e011      	b.n	8003026 <HAL_UART_Transmit+0x100>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f835 	bl	8003078 <UART_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_UART_Transmit+0xf2>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e02b      	b.n	8003070 <HAL_UART_Transmit+0x14a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	60ba      	str	r2, [r7, #8]
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1bd      	bne.n	8002faa <HAL_UART_Transmit+0x84>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	2140      	movs	r1, #64	; 0x40
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f81f 	bl	8003078 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_UART_Transmit+0x11e>
    { 
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e015      	b.n	8003070 <HAL_UART_Transmit+0x14a>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b32      	cmp	r3, #50	; 0x32
 800304e:	d104      	bne.n	800305a <HAL_UART_Transmit+0x134>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2222      	movs	r2, #34	; 0x22
 8003054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003058:	e003      	b.n	8003062 <HAL_UART_Transmit+0x13c>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
  }
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800308c:	f7fd fbc8 	bl	8000820 <HAL_GetTick>
 8003090:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d17b      	bne.n	8003190 <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003098:	e038      	b.n	800310c <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d034      	beq.n	800310c <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x40>
 80030a8:	f7fd fbba 	bl	8000820 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d229      	bcs.n	800310c <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0220 	bic.w	r2, r2, #32
 80030d6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e04a      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4013      	ands	r3, r2
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d1be      	bne.n	800309a <UART_WaitOnFlagUntilTimeout+0x22>
 800311c:	e040      	b.n	80031a0 <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d034      	beq.n	8003190 <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0xc4>
 800312c:	f7fd fb78 	bl	8000820 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d229      	bcs.n	8003190 <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800314a:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0220 	bic.w	r2, r2, #32
 800315a:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800316a:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e008      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4013      	ands	r3, r2
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d0be      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0xa6>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	b5b0      	push	{r4, r5, r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ea:	f023 030c 	bic.w	r3, r3, #12
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a44      	ldr	r2, [pc, #272]	; (8003324 <UART_SetConfig+0x178>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d140      	bne.n	800329a <UART_SetConfig+0xee>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003218:	f7ff fe1a 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 800321c:	4602      	mov	r2, r0
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009a      	lsls	r2, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	4a3d      	ldr	r2, [pc, #244]	; (8003328 <UART_SetConfig+0x17c>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	011c      	lsls	r4, r3, #4
 800323c:	f7ff fe08 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8003240:	4602      	mov	r2, r0
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009a      	lsls	r2, r3, #2
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	fbb2 f5f3 	udiv	r5, r2, r3
 8003256:	f7ff fdfb 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 800325a:	4602      	mov	r2, r0
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <UART_SetConfig+0x17c>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2264      	movs	r2, #100	; 0x64
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	1aeb      	subs	r3, r5, r3
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	3332      	adds	r3, #50	; 0x32
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <UART_SetConfig+0x17c>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4322      	orrs	r2, r4
 8003296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8003298:	e03f      	b.n	800331a <UART_SetConfig+0x16e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800329a:	f7ff fdb7 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <UART_SetConfig+0x17c>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	011c      	lsls	r4, r3, #4
 80032be:	f7ff fda5 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80032d8:	f7ff fd98 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009a      	lsls	r2, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <UART_SetConfig+0x17c>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	2264      	movs	r2, #100	; 0x64
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	1aeb      	subs	r3, r5, r3
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <UART_SetConfig+0x17c>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 020f 	and.w	r2, r3, #15
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4322      	orrs	r2, r4
 8003318:	609a      	str	r2, [r3, #8]
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bdb0      	pop	{r4, r5, r7, pc}
 8003322:	bf00      	nop
 8003324:	40013800 	.word	0x40013800
 8003328:	51eb851f 	.word	0x51eb851f

0800332c <__errno>:
 800332c:	4b01      	ldr	r3, [pc, #4]	; (8003334 <__errno+0x8>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000004 	.word	0x20000004

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	2500      	movs	r5, #0
 800333c:	4e0c      	ldr	r6, [pc, #48]	; (8003370 <__libc_init_array+0x38>)
 800333e:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 8003340:	1ba4      	subs	r4, r4, r6
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	42a5      	cmp	r5, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	f000 ff84 	bl	8004254 <_init>
 800334c:	2500      	movs	r5, #0
 800334e:	4e0a      	ldr	r6, [pc, #40]	; (8003378 <__libc_init_array+0x40>)
 8003350:	4c0a      	ldr	r4, [pc, #40]	; (800337c <__libc_init_array+0x44>)
 8003352:	1ba4      	subs	r4, r4, r6
 8003354:	10a4      	asrs	r4, r4, #2
 8003356:	42a5      	cmp	r5, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003360:	4798      	blx	r3
 8003362:	3501      	adds	r5, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800336a:	4798      	blx	r3
 800336c:	3501      	adds	r5, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	080043f8 	.word	0x080043f8
 8003374:	080043f8 	.word	0x080043f8
 8003378:	080043f8 	.word	0x080043f8
 800337c:	080043fc 	.word	0x080043fc

08003380 <memcmp>:
 8003380:	b530      	push	{r4, r5, lr}
 8003382:	2400      	movs	r4, #0
 8003384:	42a2      	cmp	r2, r4
 8003386:	d101      	bne.n	800338c <memcmp+0xc>
 8003388:	2000      	movs	r0, #0
 800338a:	e007      	b.n	800339c <memcmp+0x1c>
 800338c:	5d03      	ldrb	r3, [r0, r4]
 800338e:	3401      	adds	r4, #1
 8003390:	190d      	adds	r5, r1, r4
 8003392:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003396:	42ab      	cmp	r3, r5
 8003398:	d0f4      	beq.n	8003384 <memcmp+0x4>
 800339a:	1b58      	subs	r0, r3, r5
 800339c:	bd30      	pop	{r4, r5, pc}

0800339e <memset>:
 800339e:	4603      	mov	r3, r0
 80033a0:	4402      	add	r2, r0
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d100      	bne.n	80033a8 <memset+0xa>
 80033a6:	4770      	bx	lr
 80033a8:	f803 1b01 	strb.w	r1, [r3], #1
 80033ac:	e7f9      	b.n	80033a2 <memset+0x4>
	...

080033b0 <iprintf>:
 80033b0:	b40f      	push	{r0, r1, r2, r3}
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <iprintf+0x2c>)
 80033b4:	b513      	push	{r0, r1, r4, lr}
 80033b6:	681c      	ldr	r4, [r3, #0]
 80033b8:	b124      	cbz	r4, 80033c4 <iprintf+0x14>
 80033ba:	69a3      	ldr	r3, [r4, #24]
 80033bc:	b913      	cbnz	r3, 80033c4 <iprintf+0x14>
 80033be:	4620      	mov	r0, r4
 80033c0:	f000 fa22 	bl	8003808 <__sinit>
 80033c4:	ab05      	add	r3, sp, #20
 80033c6:	9a04      	ldr	r2, [sp, #16]
 80033c8:	68a1      	ldr	r1, [r4, #8]
 80033ca:	4620      	mov	r0, r4
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	f000 fbd7 	bl	8003b80 <_vfiprintf_r>
 80033d2:	b002      	add	sp, #8
 80033d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d8:	b004      	add	sp, #16
 80033da:	4770      	bx	lr
 80033dc:	20000004 	.word	0x20000004

080033e0 <_puts_r>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	460e      	mov	r6, r1
 80033e4:	4605      	mov	r5, r0
 80033e6:	b118      	cbz	r0, 80033f0 <_puts_r+0x10>
 80033e8:	6983      	ldr	r3, [r0, #24]
 80033ea:	b90b      	cbnz	r3, 80033f0 <_puts_r+0x10>
 80033ec:	f000 fa0c 	bl	8003808 <__sinit>
 80033f0:	69ab      	ldr	r3, [r5, #24]
 80033f2:	68ac      	ldr	r4, [r5, #8]
 80033f4:	b913      	cbnz	r3, 80033fc <_puts_r+0x1c>
 80033f6:	4628      	mov	r0, r5
 80033f8:	f000 fa06 	bl	8003808 <__sinit>
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <_puts_r+0xac>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	d117      	bne.n	8003432 <_puts_r+0x52>
 8003402:	686c      	ldr	r4, [r5, #4]
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	071b      	lsls	r3, r3, #28
 8003408:	d51d      	bpl.n	8003446 <_puts_r+0x66>
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	b1db      	cbz	r3, 8003446 <_puts_r+0x66>
 800340e:	3e01      	subs	r6, #1
 8003410:	68a3      	ldr	r3, [r4, #8]
 8003412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003416:	3b01      	subs	r3, #1
 8003418:	60a3      	str	r3, [r4, #8]
 800341a:	b9e9      	cbnz	r1, 8003458 <_puts_r+0x78>
 800341c:	2b00      	cmp	r3, #0
 800341e:	da2e      	bge.n	800347e <_puts_r+0x9e>
 8003420:	4622      	mov	r2, r4
 8003422:	210a      	movs	r1, #10
 8003424:	4628      	mov	r0, r5
 8003426:	f000 f83f 	bl	80034a8 <__swbuf_r>
 800342a:	3001      	adds	r0, #1
 800342c:	d011      	beq.n	8003452 <_puts_r+0x72>
 800342e:	200a      	movs	r0, #10
 8003430:	e011      	b.n	8003456 <_puts_r+0x76>
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <_puts_r+0xb0>)
 8003434:	429c      	cmp	r4, r3
 8003436:	d101      	bne.n	800343c <_puts_r+0x5c>
 8003438:	68ac      	ldr	r4, [r5, #8]
 800343a:	e7e3      	b.n	8003404 <_puts_r+0x24>
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <_puts_r+0xb4>)
 800343e:	429c      	cmp	r4, r3
 8003440:	bf08      	it	eq
 8003442:	68ec      	ldreq	r4, [r5, #12]
 8003444:	e7de      	b.n	8003404 <_puts_r+0x24>
 8003446:	4621      	mov	r1, r4
 8003448:	4628      	mov	r0, r5
 800344a:	f000 f87f 	bl	800354c <__swsetup_r>
 800344e:	2800      	cmp	r0, #0
 8003450:	d0dd      	beq.n	800340e <_puts_r+0x2e>
 8003452:	f04f 30ff 	mov.w	r0, #4294967295
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	2b00      	cmp	r3, #0
 800345a:	da04      	bge.n	8003466 <_puts_r+0x86>
 800345c:	69a2      	ldr	r2, [r4, #24]
 800345e:	429a      	cmp	r2, r3
 8003460:	dc06      	bgt.n	8003470 <_puts_r+0x90>
 8003462:	290a      	cmp	r1, #10
 8003464:	d004      	beq.n	8003470 <_puts_r+0x90>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	6022      	str	r2, [r4, #0]
 800346c:	7019      	strb	r1, [r3, #0]
 800346e:	e7cf      	b.n	8003410 <_puts_r+0x30>
 8003470:	4622      	mov	r2, r4
 8003472:	4628      	mov	r0, r5
 8003474:	f000 f818 	bl	80034a8 <__swbuf_r>
 8003478:	3001      	adds	r0, #1
 800347a:	d1c9      	bne.n	8003410 <_puts_r+0x30>
 800347c:	e7e9      	b.n	8003452 <_puts_r+0x72>
 800347e:	200a      	movs	r0, #10
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	6022      	str	r2, [r4, #0]
 8003486:	7018      	strb	r0, [r3, #0]
 8003488:	e7e5      	b.n	8003456 <_puts_r+0x76>
 800348a:	bf00      	nop
 800348c:	08004384 	.word	0x08004384
 8003490:	080043a4 	.word	0x080043a4
 8003494:	08004364 	.word	0x08004364

08003498 <puts>:
 8003498:	4b02      	ldr	r3, [pc, #8]	; (80034a4 <puts+0xc>)
 800349a:	4601      	mov	r1, r0
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	f7ff bf9f 	b.w	80033e0 <_puts_r>
 80034a2:	bf00      	nop
 80034a4:	20000004 	.word	0x20000004

080034a8 <__swbuf_r>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	460e      	mov	r6, r1
 80034ac:	4614      	mov	r4, r2
 80034ae:	4605      	mov	r5, r0
 80034b0:	b118      	cbz	r0, 80034ba <__swbuf_r+0x12>
 80034b2:	6983      	ldr	r3, [r0, #24]
 80034b4:	b90b      	cbnz	r3, 80034ba <__swbuf_r+0x12>
 80034b6:	f000 f9a7 	bl	8003808 <__sinit>
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <__swbuf_r+0x98>)
 80034bc:	429c      	cmp	r4, r3
 80034be:	d12a      	bne.n	8003516 <__swbuf_r+0x6e>
 80034c0:	686c      	ldr	r4, [r5, #4]
 80034c2:	69a3      	ldr	r3, [r4, #24]
 80034c4:	60a3      	str	r3, [r4, #8]
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	071a      	lsls	r2, r3, #28
 80034ca:	d52e      	bpl.n	800352a <__swbuf_r+0x82>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	b363      	cbz	r3, 800352a <__swbuf_r+0x82>
 80034d0:	6923      	ldr	r3, [r4, #16]
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	b2f6      	uxtb	r6, r6
 80034d6:	1ac0      	subs	r0, r0, r3
 80034d8:	6963      	ldr	r3, [r4, #20]
 80034da:	4637      	mov	r7, r6
 80034dc:	4283      	cmp	r3, r0
 80034de:	dc04      	bgt.n	80034ea <__swbuf_r+0x42>
 80034e0:	4621      	mov	r1, r4
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f926 	bl	8003734 <_fflush_r>
 80034e8:	bb28      	cbnz	r0, 8003536 <__swbuf_r+0x8e>
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	3001      	adds	r0, #1
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	6022      	str	r2, [r4, #0]
 80034f8:	701e      	strb	r6, [r3, #0]
 80034fa:	6963      	ldr	r3, [r4, #20]
 80034fc:	4283      	cmp	r3, r0
 80034fe:	d004      	beq.n	800350a <__swbuf_r+0x62>
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	07db      	lsls	r3, r3, #31
 8003504:	d519      	bpl.n	800353a <__swbuf_r+0x92>
 8003506:	2e0a      	cmp	r6, #10
 8003508:	d117      	bne.n	800353a <__swbuf_r+0x92>
 800350a:	4621      	mov	r1, r4
 800350c:	4628      	mov	r0, r5
 800350e:	f000 f911 	bl	8003734 <_fflush_r>
 8003512:	b190      	cbz	r0, 800353a <__swbuf_r+0x92>
 8003514:	e00f      	b.n	8003536 <__swbuf_r+0x8e>
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <__swbuf_r+0x9c>)
 8003518:	429c      	cmp	r4, r3
 800351a:	d101      	bne.n	8003520 <__swbuf_r+0x78>
 800351c:	68ac      	ldr	r4, [r5, #8]
 800351e:	e7d0      	b.n	80034c2 <__swbuf_r+0x1a>
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <__swbuf_r+0xa0>)
 8003522:	429c      	cmp	r4, r3
 8003524:	bf08      	it	eq
 8003526:	68ec      	ldreq	r4, [r5, #12]
 8003528:	e7cb      	b.n	80034c2 <__swbuf_r+0x1a>
 800352a:	4621      	mov	r1, r4
 800352c:	4628      	mov	r0, r5
 800352e:	f000 f80d 	bl	800354c <__swsetup_r>
 8003532:	2800      	cmp	r0, #0
 8003534:	d0cc      	beq.n	80034d0 <__swbuf_r+0x28>
 8003536:	f04f 37ff 	mov.w	r7, #4294967295
 800353a:	4638      	mov	r0, r7
 800353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353e:	bf00      	nop
 8003540:	08004384 	.word	0x08004384
 8003544:	080043a4 	.word	0x080043a4
 8003548:	08004364 	.word	0x08004364

0800354c <__swsetup_r>:
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <__swsetup_r+0xcc>)
 800354e:	b570      	push	{r4, r5, r6, lr}
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	4606      	mov	r6, r0
 8003554:	460c      	mov	r4, r1
 8003556:	b125      	cbz	r5, 8003562 <__swsetup_r+0x16>
 8003558:	69ab      	ldr	r3, [r5, #24]
 800355a:	b913      	cbnz	r3, 8003562 <__swsetup_r+0x16>
 800355c:	4628      	mov	r0, r5
 800355e:	f000 f953 	bl	8003808 <__sinit>
 8003562:	4b2e      	ldr	r3, [pc, #184]	; (800361c <__swsetup_r+0xd0>)
 8003564:	429c      	cmp	r4, r3
 8003566:	d10f      	bne.n	8003588 <__swsetup_r+0x3c>
 8003568:	686c      	ldr	r4, [r5, #4]
 800356a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800356e:	b29a      	uxth	r2, r3
 8003570:	0715      	lsls	r5, r2, #28
 8003572:	d42c      	bmi.n	80035ce <__swsetup_r+0x82>
 8003574:	06d0      	lsls	r0, r2, #27
 8003576:	d411      	bmi.n	800359c <__swsetup_r+0x50>
 8003578:	2209      	movs	r2, #9
 800357a:	6032      	str	r2, [r6, #0]
 800357c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003580:	81a3      	strh	r3, [r4, #12]
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	e03e      	b.n	8003606 <__swsetup_r+0xba>
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <__swsetup_r+0xd4>)
 800358a:	429c      	cmp	r4, r3
 800358c:	d101      	bne.n	8003592 <__swsetup_r+0x46>
 800358e:	68ac      	ldr	r4, [r5, #8]
 8003590:	e7eb      	b.n	800356a <__swsetup_r+0x1e>
 8003592:	4b24      	ldr	r3, [pc, #144]	; (8003624 <__swsetup_r+0xd8>)
 8003594:	429c      	cmp	r4, r3
 8003596:	bf08      	it	eq
 8003598:	68ec      	ldreq	r4, [r5, #12]
 800359a:	e7e6      	b.n	800356a <__swsetup_r+0x1e>
 800359c:	0751      	lsls	r1, r2, #29
 800359e:	d512      	bpl.n	80035c6 <__swsetup_r+0x7a>
 80035a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a2:	b141      	cbz	r1, 80035b6 <__swsetup_r+0x6a>
 80035a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035a8:	4299      	cmp	r1, r3
 80035aa:	d002      	beq.n	80035b2 <__swsetup_r+0x66>
 80035ac:	4630      	mov	r0, r6
 80035ae:	f000 fa19 	bl	80039e4 <_free_r>
 80035b2:	2300      	movs	r3, #0
 80035b4:	6363      	str	r3, [r4, #52]	; 0x34
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	2300      	movs	r3, #0
 80035c0:	6063      	str	r3, [r4, #4]
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	f043 0308 	orr.w	r3, r3, #8
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	b94b      	cbnz	r3, 80035e6 <__swsetup_r+0x9a>
 80035d2:	89a3      	ldrh	r3, [r4, #12]
 80035d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d003      	beq.n	80035e6 <__swsetup_r+0x9a>
 80035de:	4621      	mov	r1, r4
 80035e0:	4630      	mov	r0, r6
 80035e2:	f000 f9bf 	bl	8003964 <__smakebuf_r>
 80035e6:	89a2      	ldrh	r2, [r4, #12]
 80035e8:	f012 0301 	ands.w	r3, r2, #1
 80035ec:	d00c      	beq.n	8003608 <__swsetup_r+0xbc>
 80035ee:	2300      	movs	r3, #0
 80035f0:	60a3      	str	r3, [r4, #8]
 80035f2:	6963      	ldr	r3, [r4, #20]
 80035f4:	425b      	negs	r3, r3
 80035f6:	61a3      	str	r3, [r4, #24]
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	b953      	cbnz	r3, 8003612 <__swsetup_r+0xc6>
 80035fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003600:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003604:	d1ba      	bne.n	800357c <__swsetup_r+0x30>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	0792      	lsls	r2, r2, #30
 800360a:	bf58      	it	pl
 800360c:	6963      	ldrpl	r3, [r4, #20]
 800360e:	60a3      	str	r3, [r4, #8]
 8003610:	e7f2      	b.n	80035f8 <__swsetup_r+0xac>
 8003612:	2000      	movs	r0, #0
 8003614:	e7f7      	b.n	8003606 <__swsetup_r+0xba>
 8003616:	bf00      	nop
 8003618:	20000004 	.word	0x20000004
 800361c:	08004384 	.word	0x08004384
 8003620:	080043a4 	.word	0x080043a4
 8003624:	08004364 	.word	0x08004364

08003628 <__sflush_r>:
 8003628:	898a      	ldrh	r2, [r1, #12]
 800362a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800362e:	4605      	mov	r5, r0
 8003630:	0710      	lsls	r0, r2, #28
 8003632:	460c      	mov	r4, r1
 8003634:	d458      	bmi.n	80036e8 <__sflush_r+0xc0>
 8003636:	684b      	ldr	r3, [r1, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	dc05      	bgt.n	8003648 <__sflush_r+0x20>
 800363c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	dc02      	bgt.n	8003648 <__sflush_r+0x20>
 8003642:	2000      	movs	r0, #0
 8003644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800364a:	2e00      	cmp	r6, #0
 800364c:	d0f9      	beq.n	8003642 <__sflush_r+0x1a>
 800364e:	2300      	movs	r3, #0
 8003650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003654:	682f      	ldr	r7, [r5, #0]
 8003656:	6a21      	ldr	r1, [r4, #32]
 8003658:	602b      	str	r3, [r5, #0]
 800365a:	d032      	beq.n	80036c2 <__sflush_r+0x9a>
 800365c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	075a      	lsls	r2, r3, #29
 8003662:	d505      	bpl.n	8003670 <__sflush_r+0x48>
 8003664:	6863      	ldr	r3, [r4, #4]
 8003666:	1ac0      	subs	r0, r0, r3
 8003668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800366a:	b10b      	cbz	r3, 8003670 <__sflush_r+0x48>
 800366c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800366e:	1ac0      	subs	r0, r0, r3
 8003670:	2300      	movs	r3, #0
 8003672:	4602      	mov	r2, r0
 8003674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003676:	6a21      	ldr	r1, [r4, #32]
 8003678:	4628      	mov	r0, r5
 800367a:	47b0      	blx	r6
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	d106      	bne.n	8003690 <__sflush_r+0x68>
 8003682:	6829      	ldr	r1, [r5, #0]
 8003684:	291d      	cmp	r1, #29
 8003686:	d848      	bhi.n	800371a <__sflush_r+0xf2>
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <__sflush_r+0x108>)
 800368a:	40ca      	lsrs	r2, r1
 800368c:	07d6      	lsls	r6, r2, #31
 800368e:	d544      	bpl.n	800371a <__sflush_r+0xf2>
 8003690:	2200      	movs	r2, #0
 8003692:	6062      	str	r2, [r4, #4]
 8003694:	6922      	ldr	r2, [r4, #16]
 8003696:	04d9      	lsls	r1, r3, #19
 8003698:	6022      	str	r2, [r4, #0]
 800369a:	d504      	bpl.n	80036a6 <__sflush_r+0x7e>
 800369c:	1c42      	adds	r2, r0, #1
 800369e:	d101      	bne.n	80036a4 <__sflush_r+0x7c>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b903      	cbnz	r3, 80036a6 <__sflush_r+0x7e>
 80036a4:	6560      	str	r0, [r4, #84]	; 0x54
 80036a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036a8:	602f      	str	r7, [r5, #0]
 80036aa:	2900      	cmp	r1, #0
 80036ac:	d0c9      	beq.n	8003642 <__sflush_r+0x1a>
 80036ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036b2:	4299      	cmp	r1, r3
 80036b4:	d002      	beq.n	80036bc <__sflush_r+0x94>
 80036b6:	4628      	mov	r0, r5
 80036b8:	f000 f994 	bl	80039e4 <_free_r>
 80036bc:	2000      	movs	r0, #0
 80036be:	6360      	str	r0, [r4, #52]	; 0x34
 80036c0:	e7c0      	b.n	8003644 <__sflush_r+0x1c>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4628      	mov	r0, r5
 80036c6:	47b0      	blx	r6
 80036c8:	1c41      	adds	r1, r0, #1
 80036ca:	d1c8      	bne.n	800365e <__sflush_r+0x36>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0c5      	beq.n	800365e <__sflush_r+0x36>
 80036d2:	2b1d      	cmp	r3, #29
 80036d4:	d001      	beq.n	80036da <__sflush_r+0xb2>
 80036d6:	2b16      	cmp	r3, #22
 80036d8:	d101      	bne.n	80036de <__sflush_r+0xb6>
 80036da:	602f      	str	r7, [r5, #0]
 80036dc:	e7b1      	b.n	8003642 <__sflush_r+0x1a>
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	e7ad      	b.n	8003644 <__sflush_r+0x1c>
 80036e8:	690f      	ldr	r7, [r1, #16]
 80036ea:	2f00      	cmp	r7, #0
 80036ec:	d0a9      	beq.n	8003642 <__sflush_r+0x1a>
 80036ee:	0793      	lsls	r3, r2, #30
 80036f0:	bf18      	it	ne
 80036f2:	2300      	movne	r3, #0
 80036f4:	680e      	ldr	r6, [r1, #0]
 80036f6:	bf08      	it	eq
 80036f8:	694b      	ldreq	r3, [r1, #20]
 80036fa:	eba6 0807 	sub.w	r8, r6, r7
 80036fe:	600f      	str	r7, [r1, #0]
 8003700:	608b      	str	r3, [r1, #8]
 8003702:	f1b8 0f00 	cmp.w	r8, #0
 8003706:	dd9c      	ble.n	8003642 <__sflush_r+0x1a>
 8003708:	4643      	mov	r3, r8
 800370a:	463a      	mov	r2, r7
 800370c:	6a21      	ldr	r1, [r4, #32]
 800370e:	4628      	mov	r0, r5
 8003710:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003712:	47b0      	blx	r6
 8003714:	2800      	cmp	r0, #0
 8003716:	dc06      	bgt.n	8003726 <__sflush_r+0xfe>
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371e:	81a3      	strh	r3, [r4, #12]
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	e78e      	b.n	8003644 <__sflush_r+0x1c>
 8003726:	4407      	add	r7, r0
 8003728:	eba8 0800 	sub.w	r8, r8, r0
 800372c:	e7e9      	b.n	8003702 <__sflush_r+0xda>
 800372e:	bf00      	nop
 8003730:	20400001 	.word	0x20400001

08003734 <_fflush_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	690b      	ldr	r3, [r1, #16]
 8003738:	4605      	mov	r5, r0
 800373a:	460c      	mov	r4, r1
 800373c:	b1db      	cbz	r3, 8003776 <_fflush_r+0x42>
 800373e:	b118      	cbz	r0, 8003748 <_fflush_r+0x14>
 8003740:	6983      	ldr	r3, [r0, #24]
 8003742:	b90b      	cbnz	r3, 8003748 <_fflush_r+0x14>
 8003744:	f000 f860 	bl	8003808 <__sinit>
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <_fflush_r+0x48>)
 800374a:	429c      	cmp	r4, r3
 800374c:	d109      	bne.n	8003762 <_fflush_r+0x2e>
 800374e:	686c      	ldr	r4, [r5, #4]
 8003750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003754:	b17b      	cbz	r3, 8003776 <_fflush_r+0x42>
 8003756:	4621      	mov	r1, r4
 8003758:	4628      	mov	r0, r5
 800375a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800375e:	f7ff bf63 	b.w	8003628 <__sflush_r>
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <_fflush_r+0x4c>)
 8003764:	429c      	cmp	r4, r3
 8003766:	d101      	bne.n	800376c <_fflush_r+0x38>
 8003768:	68ac      	ldr	r4, [r5, #8]
 800376a:	e7f1      	b.n	8003750 <_fflush_r+0x1c>
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <_fflush_r+0x50>)
 800376e:	429c      	cmp	r4, r3
 8003770:	bf08      	it	eq
 8003772:	68ec      	ldreq	r4, [r5, #12]
 8003774:	e7ec      	b.n	8003750 <_fflush_r+0x1c>
 8003776:	2000      	movs	r0, #0
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	bf00      	nop
 800377c:	08004384 	.word	0x08004384
 8003780:	080043a4 	.word	0x080043a4
 8003784:	08004364 	.word	0x08004364

08003788 <std>:
 8003788:	2300      	movs	r3, #0
 800378a:	b510      	push	{r4, lr}
 800378c:	4604      	mov	r4, r0
 800378e:	e9c0 3300 	strd	r3, r3, [r0]
 8003792:	6083      	str	r3, [r0, #8]
 8003794:	8181      	strh	r1, [r0, #12]
 8003796:	6643      	str	r3, [r0, #100]	; 0x64
 8003798:	81c2      	strh	r2, [r0, #14]
 800379a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800379e:	6183      	str	r3, [r0, #24]
 80037a0:	4619      	mov	r1, r3
 80037a2:	2208      	movs	r2, #8
 80037a4:	305c      	adds	r0, #92	; 0x5c
 80037a6:	f7ff fdfa 	bl	800339e <memset>
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <std+0x38>)
 80037ac:	6224      	str	r4, [r4, #32]
 80037ae:	6263      	str	r3, [r4, #36]	; 0x24
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <std+0x3c>)
 80037b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <std+0x40>)
 80037b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <std+0x44>)
 80037ba:	6323      	str	r3, [r4, #48]	; 0x30
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	bf00      	nop
 80037c0:	080040dd 	.word	0x080040dd
 80037c4:	080040ff 	.word	0x080040ff
 80037c8:	08004137 	.word	0x08004137
 80037cc:	0800415b 	.word	0x0800415b

080037d0 <_cleanup_r>:
 80037d0:	4901      	ldr	r1, [pc, #4]	; (80037d8 <_cleanup_r+0x8>)
 80037d2:	f000 b885 	b.w	80038e0 <_fwalk_reent>
 80037d6:	bf00      	nop
 80037d8:	08003735 	.word	0x08003735

080037dc <__sfmoreglue>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	2568      	movs	r5, #104	; 0x68
 80037e0:	1e4a      	subs	r2, r1, #1
 80037e2:	4355      	muls	r5, r2
 80037e4:	460e      	mov	r6, r1
 80037e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037ea:	f000 f947 	bl	8003a7c <_malloc_r>
 80037ee:	4604      	mov	r4, r0
 80037f0:	b140      	cbz	r0, 8003804 <__sfmoreglue+0x28>
 80037f2:	2100      	movs	r1, #0
 80037f4:	e9c0 1600 	strd	r1, r6, [r0]
 80037f8:	300c      	adds	r0, #12
 80037fa:	60a0      	str	r0, [r4, #8]
 80037fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003800:	f7ff fdcd 	bl	800339e <memset>
 8003804:	4620      	mov	r0, r4
 8003806:	bd70      	pop	{r4, r5, r6, pc}

08003808 <__sinit>:
 8003808:	6983      	ldr	r3, [r0, #24]
 800380a:	b510      	push	{r4, lr}
 800380c:	4604      	mov	r4, r0
 800380e:	bb33      	cbnz	r3, 800385e <__sinit+0x56>
 8003810:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003814:	6503      	str	r3, [r0, #80]	; 0x50
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <__sinit+0x58>)
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <__sinit+0x5c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6282      	str	r2, [r0, #40]	; 0x28
 800381e:	4298      	cmp	r0, r3
 8003820:	bf04      	itt	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	6183      	streq	r3, [r0, #24]
 8003826:	f000 f81f 	bl	8003868 <__sfp>
 800382a:	6060      	str	r0, [r4, #4]
 800382c:	4620      	mov	r0, r4
 800382e:	f000 f81b 	bl	8003868 <__sfp>
 8003832:	60a0      	str	r0, [r4, #8]
 8003834:	4620      	mov	r0, r4
 8003836:	f000 f817 	bl	8003868 <__sfp>
 800383a:	2200      	movs	r2, #0
 800383c:	60e0      	str	r0, [r4, #12]
 800383e:	2104      	movs	r1, #4
 8003840:	6860      	ldr	r0, [r4, #4]
 8003842:	f7ff ffa1 	bl	8003788 <std>
 8003846:	2201      	movs	r2, #1
 8003848:	2109      	movs	r1, #9
 800384a:	68a0      	ldr	r0, [r4, #8]
 800384c:	f7ff ff9c 	bl	8003788 <std>
 8003850:	2202      	movs	r2, #2
 8003852:	2112      	movs	r1, #18
 8003854:	68e0      	ldr	r0, [r4, #12]
 8003856:	f7ff ff97 	bl	8003788 <std>
 800385a:	2301      	movs	r3, #1
 800385c:	61a3      	str	r3, [r4, #24]
 800385e:	bd10      	pop	{r4, pc}
 8003860:	08004360 	.word	0x08004360
 8003864:	080037d1 	.word	0x080037d1

08003868 <__sfp>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <__sfp+0x70>)
 800386c:	4607      	mov	r7, r0
 800386e:	681e      	ldr	r6, [r3, #0]
 8003870:	69b3      	ldr	r3, [r6, #24]
 8003872:	b913      	cbnz	r3, 800387a <__sfp+0x12>
 8003874:	4630      	mov	r0, r6
 8003876:	f7ff ffc7 	bl	8003808 <__sinit>
 800387a:	3648      	adds	r6, #72	; 0x48
 800387c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003880:	3b01      	subs	r3, #1
 8003882:	d503      	bpl.n	800388c <__sfp+0x24>
 8003884:	6833      	ldr	r3, [r6, #0]
 8003886:	b133      	cbz	r3, 8003896 <__sfp+0x2e>
 8003888:	6836      	ldr	r6, [r6, #0]
 800388a:	e7f7      	b.n	800387c <__sfp+0x14>
 800388c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003890:	b16d      	cbz	r5, 80038ae <__sfp+0x46>
 8003892:	3468      	adds	r4, #104	; 0x68
 8003894:	e7f4      	b.n	8003880 <__sfp+0x18>
 8003896:	2104      	movs	r1, #4
 8003898:	4638      	mov	r0, r7
 800389a:	f7ff ff9f 	bl	80037dc <__sfmoreglue>
 800389e:	6030      	str	r0, [r6, #0]
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1f1      	bne.n	8003888 <__sfp+0x20>
 80038a4:	230c      	movs	r3, #12
 80038a6:	4604      	mov	r4, r0
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4620      	mov	r0, r4
 80038ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <__sfp+0x74>)
 80038b0:	6665      	str	r5, [r4, #100]	; 0x64
 80038b2:	e9c4 5500 	strd	r5, r5, [r4]
 80038b6:	60a5      	str	r5, [r4, #8]
 80038b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80038bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038c0:	2208      	movs	r2, #8
 80038c2:	4629      	mov	r1, r5
 80038c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038c8:	f7ff fd69 	bl	800339e <memset>
 80038cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038d4:	e7e9      	b.n	80038aa <__sfp+0x42>
 80038d6:	bf00      	nop
 80038d8:	08004360 	.word	0x08004360
 80038dc:	ffff0001 	.word	0xffff0001

080038e0 <_fwalk_reent>:
 80038e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e4:	4680      	mov	r8, r0
 80038e6:	4689      	mov	r9, r1
 80038e8:	2600      	movs	r6, #0
 80038ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038ee:	b914      	cbnz	r4, 80038f6 <_fwalk_reent+0x16>
 80038f0:	4630      	mov	r0, r6
 80038f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80038fa:	3f01      	subs	r7, #1
 80038fc:	d501      	bpl.n	8003902 <_fwalk_reent+0x22>
 80038fe:	6824      	ldr	r4, [r4, #0]
 8003900:	e7f5      	b.n	80038ee <_fwalk_reent+0xe>
 8003902:	89ab      	ldrh	r3, [r5, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d907      	bls.n	8003918 <_fwalk_reent+0x38>
 8003908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800390c:	3301      	adds	r3, #1
 800390e:	d003      	beq.n	8003918 <_fwalk_reent+0x38>
 8003910:	4629      	mov	r1, r5
 8003912:	4640      	mov	r0, r8
 8003914:	47c8      	blx	r9
 8003916:	4306      	orrs	r6, r0
 8003918:	3568      	adds	r5, #104	; 0x68
 800391a:	e7ee      	b.n	80038fa <_fwalk_reent+0x1a>

0800391c <__swhatbuf_r>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	460e      	mov	r6, r1
 8003920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003924:	b096      	sub	sp, #88	; 0x58
 8003926:	2900      	cmp	r1, #0
 8003928:	4614      	mov	r4, r2
 800392a:	461d      	mov	r5, r3
 800392c:	da07      	bge.n	800393e <__swhatbuf_r+0x22>
 800392e:	2300      	movs	r3, #0
 8003930:	602b      	str	r3, [r5, #0]
 8003932:	89b3      	ldrh	r3, [r6, #12]
 8003934:	061a      	lsls	r2, r3, #24
 8003936:	d410      	bmi.n	800395a <__swhatbuf_r+0x3e>
 8003938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800393c:	e00e      	b.n	800395c <__swhatbuf_r+0x40>
 800393e:	466a      	mov	r2, sp
 8003940:	f000 fc32 	bl	80041a8 <_fstat_r>
 8003944:	2800      	cmp	r0, #0
 8003946:	dbf2      	blt.n	800392e <__swhatbuf_r+0x12>
 8003948:	9a01      	ldr	r2, [sp, #4]
 800394a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800394e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003952:	425a      	negs	r2, r3
 8003954:	415a      	adcs	r2, r3
 8003956:	602a      	str	r2, [r5, #0]
 8003958:	e7ee      	b.n	8003938 <__swhatbuf_r+0x1c>
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	2000      	movs	r0, #0
 800395e:	6023      	str	r3, [r4, #0]
 8003960:	b016      	add	sp, #88	; 0x58
 8003962:	bd70      	pop	{r4, r5, r6, pc}

08003964 <__smakebuf_r>:
 8003964:	898b      	ldrh	r3, [r1, #12]
 8003966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003968:	079d      	lsls	r5, r3, #30
 800396a:	4606      	mov	r6, r0
 800396c:	460c      	mov	r4, r1
 800396e:	d507      	bpl.n	8003980 <__smakebuf_r+0x1c>
 8003970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	6123      	str	r3, [r4, #16]
 8003978:	2301      	movs	r3, #1
 800397a:	6163      	str	r3, [r4, #20]
 800397c:	b002      	add	sp, #8
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	ab01      	add	r3, sp, #4
 8003982:	466a      	mov	r2, sp
 8003984:	f7ff ffca 	bl	800391c <__swhatbuf_r>
 8003988:	9900      	ldr	r1, [sp, #0]
 800398a:	4605      	mov	r5, r0
 800398c:	4630      	mov	r0, r6
 800398e:	f000 f875 	bl	8003a7c <_malloc_r>
 8003992:	b948      	cbnz	r0, 80039a8 <__smakebuf_r+0x44>
 8003994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003998:	059a      	lsls	r2, r3, #22
 800399a:	d4ef      	bmi.n	800397c <__smakebuf_r+0x18>
 800399c:	f023 0303 	bic.w	r3, r3, #3
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	81a3      	strh	r3, [r4, #12]
 80039a6:	e7e3      	b.n	8003970 <__smakebuf_r+0xc>
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <__smakebuf_r+0x7c>)
 80039aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	6020      	str	r0, [r4, #0]
 80039b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	9b00      	ldr	r3, [sp, #0]
 80039b8:	6120      	str	r0, [r4, #16]
 80039ba:	6163      	str	r3, [r4, #20]
 80039bc:	9b01      	ldr	r3, [sp, #4]
 80039be:	b15b      	cbz	r3, 80039d8 <__smakebuf_r+0x74>
 80039c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039c4:	4630      	mov	r0, r6
 80039c6:	f000 fc01 	bl	80041cc <_isatty_r>
 80039ca:	b128      	cbz	r0, 80039d8 <__smakebuf_r+0x74>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	431d      	orrs	r5, r3
 80039dc:	81a5      	strh	r5, [r4, #12]
 80039de:	e7cd      	b.n	800397c <__smakebuf_r+0x18>
 80039e0:	080037d1 	.word	0x080037d1

080039e4 <_free_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4605      	mov	r5, r0
 80039e8:	2900      	cmp	r1, #0
 80039ea:	d043      	beq.n	8003a74 <_free_r+0x90>
 80039ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f0:	1f0c      	subs	r4, r1, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bfb8      	it	lt
 80039f6:	18e4      	addlt	r4, r4, r3
 80039f8:	f000 fc18 	bl	800422c <__malloc_lock>
 80039fc:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <_free_r+0x94>)
 80039fe:	6813      	ldr	r3, [r2, #0]
 8003a00:	4610      	mov	r0, r2
 8003a02:	b933      	cbnz	r3, 8003a12 <_free_r+0x2e>
 8003a04:	6063      	str	r3, [r4, #4]
 8003a06:	6014      	str	r4, [r2, #0]
 8003a08:	4628      	mov	r0, r5
 8003a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a0e:	f000 bc0e 	b.w	800422e <__malloc_unlock>
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	d90b      	bls.n	8003a2e <_free_r+0x4a>
 8003a16:	6821      	ldr	r1, [r4, #0]
 8003a18:	1862      	adds	r2, r4, r1
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	bf01      	itttt	eq
 8003a1e:	681a      	ldreq	r2, [r3, #0]
 8003a20:	685b      	ldreq	r3, [r3, #4]
 8003a22:	1852      	addeq	r2, r2, r1
 8003a24:	6022      	streq	r2, [r4, #0]
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	6004      	str	r4, [r0, #0]
 8003a2a:	e7ed      	b.n	8003a08 <_free_r+0x24>
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	b10a      	cbz	r2, 8003a36 <_free_r+0x52>
 8003a32:	42a2      	cmp	r2, r4
 8003a34:	d9fa      	bls.n	8003a2c <_free_r+0x48>
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	1858      	adds	r0, r3, r1
 8003a3a:	42a0      	cmp	r0, r4
 8003a3c:	d10b      	bne.n	8003a56 <_free_r+0x72>
 8003a3e:	6820      	ldr	r0, [r4, #0]
 8003a40:	4401      	add	r1, r0
 8003a42:	1858      	adds	r0, r3, r1
 8003a44:	4282      	cmp	r2, r0
 8003a46:	6019      	str	r1, [r3, #0]
 8003a48:	d1de      	bne.n	8003a08 <_free_r+0x24>
 8003a4a:	6810      	ldr	r0, [r2, #0]
 8003a4c:	6852      	ldr	r2, [r2, #4]
 8003a4e:	4401      	add	r1, r0
 8003a50:	6019      	str	r1, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e7d8      	b.n	8003a08 <_free_r+0x24>
 8003a56:	d902      	bls.n	8003a5e <_free_r+0x7a>
 8003a58:	230c      	movs	r3, #12
 8003a5a:	602b      	str	r3, [r5, #0]
 8003a5c:	e7d4      	b.n	8003a08 <_free_r+0x24>
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	1821      	adds	r1, r4, r0
 8003a62:	428a      	cmp	r2, r1
 8003a64:	bf01      	itttt	eq
 8003a66:	6811      	ldreq	r1, [r2, #0]
 8003a68:	6852      	ldreq	r2, [r2, #4]
 8003a6a:	1809      	addeq	r1, r1, r0
 8003a6c:	6021      	streq	r1, [r4, #0]
 8003a6e:	6062      	str	r2, [r4, #4]
 8003a70:	605c      	str	r4, [r3, #4]
 8003a72:	e7c9      	b.n	8003a08 <_free_r+0x24>
 8003a74:	bd38      	pop	{r3, r4, r5, pc}
 8003a76:	bf00      	nop
 8003a78:	2000008c 	.word	0x2000008c

08003a7c <_malloc_r>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	1ccd      	adds	r5, r1, #3
 8003a80:	f025 0503 	bic.w	r5, r5, #3
 8003a84:	3508      	adds	r5, #8
 8003a86:	2d0c      	cmp	r5, #12
 8003a88:	bf38      	it	cc
 8003a8a:	250c      	movcc	r5, #12
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	4606      	mov	r6, r0
 8003a90:	db01      	blt.n	8003a96 <_malloc_r+0x1a>
 8003a92:	42a9      	cmp	r1, r5
 8003a94:	d903      	bls.n	8003a9e <_malloc_r+0x22>
 8003a96:	230c      	movs	r3, #12
 8003a98:	6033      	str	r3, [r6, #0]
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bd70      	pop	{r4, r5, r6, pc}
 8003a9e:	f000 fbc5 	bl	800422c <__malloc_lock>
 8003aa2:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <_malloc_r+0xac>)
 8003aa4:	6814      	ldr	r4, [r2, #0]
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	b991      	cbnz	r1, 8003ad0 <_malloc_r+0x54>
 8003aaa:	4c20      	ldr	r4, [pc, #128]	; (8003b2c <_malloc_r+0xb0>)
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	b91b      	cbnz	r3, 8003ab8 <_malloc_r+0x3c>
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f000 fb03 	bl	80040bc <_sbrk_r>
 8003ab6:	6020      	str	r0, [r4, #0]
 8003ab8:	4629      	mov	r1, r5
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 fafe 	bl	80040bc <_sbrk_r>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d124      	bne.n	8003b0e <_malloc_r+0x92>
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	6033      	str	r3, [r6, #0]
 8003aca:	f000 fbb0 	bl	800422e <__malloc_unlock>
 8003ace:	e7e4      	b.n	8003a9a <_malloc_r+0x1e>
 8003ad0:	680b      	ldr	r3, [r1, #0]
 8003ad2:	1b5b      	subs	r3, r3, r5
 8003ad4:	d418      	bmi.n	8003b08 <_malloc_r+0x8c>
 8003ad6:	2b0b      	cmp	r3, #11
 8003ad8:	d90f      	bls.n	8003afa <_malloc_r+0x7e>
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	18cc      	adds	r4, r1, r3
 8003ade:	50cd      	str	r5, [r1, r3]
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f000 fba4 	bl	800422e <__malloc_unlock>
 8003ae6:	f104 000b 	add.w	r0, r4, #11
 8003aea:	1d23      	adds	r3, r4, #4
 8003aec:	f020 0007 	bic.w	r0, r0, #7
 8003af0:	1ac3      	subs	r3, r0, r3
 8003af2:	d0d3      	beq.n	8003a9c <_malloc_r+0x20>
 8003af4:	425a      	negs	r2, r3
 8003af6:	50e2      	str	r2, [r4, r3]
 8003af8:	e7d0      	b.n	8003a9c <_malloc_r+0x20>
 8003afa:	684b      	ldr	r3, [r1, #4]
 8003afc:	428c      	cmp	r4, r1
 8003afe:	bf16      	itet	ne
 8003b00:	6063      	strne	r3, [r4, #4]
 8003b02:	6013      	streq	r3, [r2, #0]
 8003b04:	460c      	movne	r4, r1
 8003b06:	e7eb      	b.n	8003ae0 <_malloc_r+0x64>
 8003b08:	460c      	mov	r4, r1
 8003b0a:	6849      	ldr	r1, [r1, #4]
 8003b0c:	e7cc      	b.n	8003aa8 <_malloc_r+0x2c>
 8003b0e:	1cc4      	adds	r4, r0, #3
 8003b10:	f024 0403 	bic.w	r4, r4, #3
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d005      	beq.n	8003b24 <_malloc_r+0xa8>
 8003b18:	1a21      	subs	r1, r4, r0
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f000 face 	bl	80040bc <_sbrk_r>
 8003b20:	3001      	adds	r0, #1
 8003b22:	d0cf      	beq.n	8003ac4 <_malloc_r+0x48>
 8003b24:	6025      	str	r5, [r4, #0]
 8003b26:	e7db      	b.n	8003ae0 <_malloc_r+0x64>
 8003b28:	2000008c 	.word	0x2000008c
 8003b2c:	20000090 	.word	0x20000090

08003b30 <__sfputc_r>:
 8003b30:	6893      	ldr	r3, [r2, #8]
 8003b32:	b410      	push	{r4}
 8003b34:	3b01      	subs	r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	6093      	str	r3, [r2, #8]
 8003b3a:	da07      	bge.n	8003b4c <__sfputc_r+0x1c>
 8003b3c:	6994      	ldr	r4, [r2, #24]
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	db01      	blt.n	8003b46 <__sfputc_r+0x16>
 8003b42:	290a      	cmp	r1, #10
 8003b44:	d102      	bne.n	8003b4c <__sfputc_r+0x1c>
 8003b46:	bc10      	pop	{r4}
 8003b48:	f7ff bcae 	b.w	80034a8 <__swbuf_r>
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	1c58      	adds	r0, r3, #1
 8003b50:	6010      	str	r0, [r2, #0]
 8003b52:	7019      	strb	r1, [r3, #0]
 8003b54:	4608      	mov	r0, r1
 8003b56:	bc10      	pop	{r4}
 8003b58:	4770      	bx	lr

08003b5a <__sfputs_r>:
 8003b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	460f      	mov	r7, r1
 8003b60:	4614      	mov	r4, r2
 8003b62:	18d5      	adds	r5, r2, r3
 8003b64:	42ac      	cmp	r4, r5
 8003b66:	d101      	bne.n	8003b6c <__sfputs_r+0x12>
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e007      	b.n	8003b7c <__sfputs_r+0x22>
 8003b6c:	463a      	mov	r2, r7
 8003b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7ff ffdc 	bl	8003b30 <__sfputc_r>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d1f3      	bne.n	8003b64 <__sfputs_r+0xa>
 8003b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b80 <_vfiprintf_r>:
 8003b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b84:	460c      	mov	r4, r1
 8003b86:	b09d      	sub	sp, #116	; 0x74
 8003b88:	4617      	mov	r7, r2
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	b118      	cbz	r0, 8003b98 <_vfiprintf_r+0x18>
 8003b90:	6983      	ldr	r3, [r0, #24]
 8003b92:	b90b      	cbnz	r3, 8003b98 <_vfiprintf_r+0x18>
 8003b94:	f7ff fe38 	bl	8003808 <__sinit>
 8003b98:	4b7c      	ldr	r3, [pc, #496]	; (8003d8c <_vfiprintf_r+0x20c>)
 8003b9a:	429c      	cmp	r4, r3
 8003b9c:	d158      	bne.n	8003c50 <_vfiprintf_r+0xd0>
 8003b9e:	6874      	ldr	r4, [r6, #4]
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	0718      	lsls	r0, r3, #28
 8003ba4:	d55e      	bpl.n	8003c64 <_vfiprintf_r+0xe4>
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05b      	beq.n	8003c64 <_vfiprintf_r+0xe4>
 8003bac:	2300      	movs	r3, #0
 8003bae:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb6:	2330      	movs	r3, #48	; 0x30
 8003bb8:	f04f 0b01 	mov.w	fp, #1
 8003bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bc0:	9503      	str	r5, [sp, #12]
 8003bc2:	46b8      	mov	r8, r7
 8003bc4:	4645      	mov	r5, r8
 8003bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bca:	b10b      	cbz	r3, 8003bd0 <_vfiprintf_r+0x50>
 8003bcc:	2b25      	cmp	r3, #37	; 0x25
 8003bce:	d154      	bne.n	8003c7a <_vfiprintf_r+0xfa>
 8003bd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8003bd4:	d00b      	beq.n	8003bee <_vfiprintf_r+0x6e>
 8003bd6:	4653      	mov	r3, sl
 8003bd8:	463a      	mov	r2, r7
 8003bda:	4621      	mov	r1, r4
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f7ff ffbc 	bl	8003b5a <__sfputs_r>
 8003be2:	3001      	adds	r0, #1
 8003be4:	f000 80c2 	beq.w	8003d6c <_vfiprintf_r+0x1ec>
 8003be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bea:	4453      	add	r3, sl
 8003bec:	9309      	str	r3, [sp, #36]	; 0x24
 8003bee:	f898 3000 	ldrb.w	r3, [r8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80ba 	beq.w	8003d6c <_vfiprintf_r+0x1ec>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	9307      	str	r3, [sp, #28]
 8003c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c0c:	46a8      	mov	r8, r5
 8003c0e:	2205      	movs	r2, #5
 8003c10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c14:	485e      	ldr	r0, [pc, #376]	; (8003d90 <_vfiprintf_r+0x210>)
 8003c16:	f000 fafb 	bl	8004210 <memchr>
 8003c1a:	9b04      	ldr	r3, [sp, #16]
 8003c1c:	bb78      	cbnz	r0, 8003c7e <_vfiprintf_r+0xfe>
 8003c1e:	06d9      	lsls	r1, r3, #27
 8003c20:	bf44      	itt	mi
 8003c22:	2220      	movmi	r2, #32
 8003c24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c28:	071a      	lsls	r2, r3, #28
 8003c2a:	bf44      	itt	mi
 8003c2c:	222b      	movmi	r2, #43	; 0x2b
 8003c2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c32:	782a      	ldrb	r2, [r5, #0]
 8003c34:	2a2a      	cmp	r2, #42	; 0x2a
 8003c36:	d02a      	beq.n	8003c8e <_vfiprintf_r+0x10e>
 8003c38:	46a8      	mov	r8, r5
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	250a      	movs	r5, #10
 8003c3e:	9a07      	ldr	r2, [sp, #28]
 8003c40:	4641      	mov	r1, r8
 8003c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c46:	3b30      	subs	r3, #48	; 0x30
 8003c48:	2b09      	cmp	r3, #9
 8003c4a:	d969      	bls.n	8003d20 <_vfiprintf_r+0x1a0>
 8003c4c:	b360      	cbz	r0, 8003ca8 <_vfiprintf_r+0x128>
 8003c4e:	e024      	b.n	8003c9a <_vfiprintf_r+0x11a>
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <_vfiprintf_r+0x214>)
 8003c52:	429c      	cmp	r4, r3
 8003c54:	d101      	bne.n	8003c5a <_vfiprintf_r+0xda>
 8003c56:	68b4      	ldr	r4, [r6, #8]
 8003c58:	e7a2      	b.n	8003ba0 <_vfiprintf_r+0x20>
 8003c5a:	4b4f      	ldr	r3, [pc, #316]	; (8003d98 <_vfiprintf_r+0x218>)
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	bf08      	it	eq
 8003c60:	68f4      	ldreq	r4, [r6, #12]
 8003c62:	e79d      	b.n	8003ba0 <_vfiprintf_r+0x20>
 8003c64:	4621      	mov	r1, r4
 8003c66:	4630      	mov	r0, r6
 8003c68:	f7ff fc70 	bl	800354c <__swsetup_r>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d09d      	beq.n	8003bac <_vfiprintf_r+0x2c>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	b01d      	add	sp, #116	; 0x74
 8003c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7a:	46a8      	mov	r8, r5
 8003c7c:	e7a2      	b.n	8003bc4 <_vfiprintf_r+0x44>
 8003c7e:	4a44      	ldr	r2, [pc, #272]	; (8003d90 <_vfiprintf_r+0x210>)
 8003c80:	4645      	mov	r5, r8
 8003c82:	1a80      	subs	r0, r0, r2
 8003c84:	fa0b f000 	lsl.w	r0, fp, r0
 8003c88:	4318      	orrs	r0, r3
 8003c8a:	9004      	str	r0, [sp, #16]
 8003c8c:	e7be      	b.n	8003c0c <_vfiprintf_r+0x8c>
 8003c8e:	9a03      	ldr	r2, [sp, #12]
 8003c90:	1d11      	adds	r1, r2, #4
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	9103      	str	r1, [sp, #12]
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	db01      	blt.n	8003c9e <_vfiprintf_r+0x11e>
 8003c9a:	9207      	str	r2, [sp, #28]
 8003c9c:	e004      	b.n	8003ca8 <_vfiprintf_r+0x128>
 8003c9e:	4252      	negs	r2, r2
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	9207      	str	r2, [sp, #28]
 8003ca6:	9304      	str	r3, [sp, #16]
 8003ca8:	f898 3000 	ldrb.w	r3, [r8]
 8003cac:	2b2e      	cmp	r3, #46	; 0x2e
 8003cae:	d10e      	bne.n	8003cce <_vfiprintf_r+0x14e>
 8003cb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb6:	d138      	bne.n	8003d2a <_vfiprintf_r+0x1aa>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	f108 0802 	add.w	r8, r8, #2
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	9203      	str	r2, [sp, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bfb8      	it	lt
 8003cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	4d33      	ldr	r5, [pc, #204]	; (8003d9c <_vfiprintf_r+0x21c>)
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	f898 1000 	ldrb.w	r1, [r8]
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f000 fa9a 	bl	8004210 <memchr>
 8003cdc:	b140      	cbz	r0, 8003cf0 <_vfiprintf_r+0x170>
 8003cde:	2340      	movs	r3, #64	; 0x40
 8003ce0:	1b40      	subs	r0, r0, r5
 8003ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce6:	9b04      	ldr	r3, [sp, #16]
 8003ce8:	f108 0801 	add.w	r8, r8, #1
 8003cec:	4303      	orrs	r3, r0
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	f898 1000 	ldrb.w	r1, [r8]
 8003cf4:	2206      	movs	r2, #6
 8003cf6:	482a      	ldr	r0, [pc, #168]	; (8003da0 <_vfiprintf_r+0x220>)
 8003cf8:	f108 0701 	add.w	r7, r8, #1
 8003cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d00:	f000 fa86 	bl	8004210 <memchr>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d037      	beq.n	8003d78 <_vfiprintf_r+0x1f8>
 8003d08:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <_vfiprintf_r+0x224>)
 8003d0a:	bb1b      	cbnz	r3, 8003d54 <_vfiprintf_r+0x1d4>
 8003d0c:	9b03      	ldr	r3, [sp, #12]
 8003d0e:	3307      	adds	r3, #7
 8003d10:	f023 0307 	bic.w	r3, r3, #7
 8003d14:	3308      	adds	r3, #8
 8003d16:	9303      	str	r3, [sp, #12]
 8003d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d1a:	444b      	add	r3, r9
 8003d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1e:	e750      	b.n	8003bc2 <_vfiprintf_r+0x42>
 8003d20:	fb05 3202 	mla	r2, r5, r2, r3
 8003d24:	2001      	movs	r0, #1
 8003d26:	4688      	mov	r8, r1
 8003d28:	e78a      	b.n	8003c40 <_vfiprintf_r+0xc0>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	250a      	movs	r5, #10
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f108 0801 	add.w	r8, r8, #1
 8003d34:	9305      	str	r3, [sp, #20]
 8003d36:	4640      	mov	r0, r8
 8003d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d3c:	3a30      	subs	r2, #48	; 0x30
 8003d3e:	2a09      	cmp	r2, #9
 8003d40:	d903      	bls.n	8003d4a <_vfiprintf_r+0x1ca>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0c3      	beq.n	8003cce <_vfiprintf_r+0x14e>
 8003d46:	9105      	str	r1, [sp, #20]
 8003d48:	e7c1      	b.n	8003cce <_vfiprintf_r+0x14e>
 8003d4a:	fb05 2101 	mla	r1, r5, r1, r2
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4680      	mov	r8, r0
 8003d52:	e7f0      	b.n	8003d36 <_vfiprintf_r+0x1b6>
 8003d54:	ab03      	add	r3, sp, #12
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <_vfiprintf_r+0x228>)
 8003d5c:	a904      	add	r1, sp, #16
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f3af 8000 	nop.w
 8003d64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d68:	4681      	mov	r9, r0
 8003d6a:	d1d5      	bne.n	8003d18 <_vfiprintf_r+0x198>
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	065b      	lsls	r3, r3, #25
 8003d70:	f53f af7e 	bmi.w	8003c70 <_vfiprintf_r+0xf0>
 8003d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d76:	e77d      	b.n	8003c74 <_vfiprintf_r+0xf4>
 8003d78:	ab03      	add	r3, sp, #12
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <_vfiprintf_r+0x228>)
 8003d80:	a904      	add	r1, sp, #16
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 f888 	bl	8003e98 <_printf_i>
 8003d88:	e7ec      	b.n	8003d64 <_vfiprintf_r+0x1e4>
 8003d8a:	bf00      	nop
 8003d8c:	08004384 	.word	0x08004384
 8003d90:	080043c4 	.word	0x080043c4
 8003d94:	080043a4 	.word	0x080043a4
 8003d98:	08004364 	.word	0x08004364
 8003d9c:	080043ca 	.word	0x080043ca
 8003da0:	080043ce 	.word	0x080043ce
 8003da4:	00000000 	.word	0x00000000
 8003da8:	08003b5b 	.word	0x08003b5b

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4691      	mov	r9, r2
 8003db2:	461f      	mov	r7, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	4606      	mov	r6, r0
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bfb8      	it	lt
 8003dbe:	4613      	movlt	r3, r2
 8003dc0:	f8c9 3000 	str.w	r3, [r9]
 8003dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc8:	460c      	mov	r4, r1
 8003dca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dce:	b112      	cbz	r2, 8003dd6 <_printf_common+0x2a>
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f8c9 3000 	str.w	r3, [r9]
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	0699      	lsls	r1, r3, #26
 8003dda:	bf42      	ittt	mi
 8003ddc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003de0:	3302      	addmi	r3, #2
 8003de2:	f8c9 3000 	strmi.w	r3, [r9]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	f015 0506 	ands.w	r5, r5, #6
 8003dec:	d107      	bne.n	8003dfe <_printf_common+0x52>
 8003dee:	f104 0a19 	add.w	sl, r4, #25
 8003df2:	68e3      	ldr	r3, [r4, #12]
 8003df4:	f8d9 2000 	ldr.w	r2, [r9]
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	42ab      	cmp	r3, r5
 8003dfc:	dc29      	bgt.n	8003e52 <_printf_common+0xa6>
 8003dfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	3300      	adds	r3, #0
 8003e06:	bf18      	it	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	0692      	lsls	r2, r2, #26
 8003e0c:	d42e      	bmi.n	8003e6c <_printf_common+0xc0>
 8003e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e12:	4639      	mov	r1, r7
 8003e14:	4630      	mov	r0, r6
 8003e16:	47c0      	blx	r8
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d021      	beq.n	8003e60 <_printf_common+0xb4>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	68e5      	ldr	r5, [r4, #12]
 8003e20:	f003 0306 	and.w	r3, r3, #6
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	bf18      	it	ne
 8003e28:	2500      	movne	r5, #0
 8003e2a:	f8d9 2000 	ldr.w	r2, [r9]
 8003e2e:	f04f 0900 	mov.w	r9, #0
 8003e32:	bf08      	it	eq
 8003e34:	1aad      	subeq	r5, r5, r2
 8003e36:	68a3      	ldr	r3, [r4, #8]
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	bf08      	it	eq
 8003e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bfc4      	itt	gt
 8003e44:	1a9b      	subgt	r3, r3, r2
 8003e46:	18ed      	addgt	r5, r5, r3
 8003e48:	341a      	adds	r4, #26
 8003e4a:	454d      	cmp	r5, r9
 8003e4c:	d11a      	bne.n	8003e84 <_printf_common+0xd8>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e008      	b.n	8003e64 <_printf_common+0xb8>
 8003e52:	2301      	movs	r3, #1
 8003e54:	4652      	mov	r2, sl
 8003e56:	4639      	mov	r1, r7
 8003e58:	4630      	mov	r0, r6
 8003e5a:	47c0      	blx	r8
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d103      	bne.n	8003e68 <_printf_common+0xbc>
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e68:	3501      	adds	r5, #1
 8003e6a:	e7c2      	b.n	8003df2 <_printf_common+0x46>
 8003e6c:	2030      	movs	r0, #48	; 0x30
 8003e6e:	18e1      	adds	r1, r4, r3
 8003e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e7a:	4422      	add	r2, r4
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e82:	e7c4      	b.n	8003e0e <_printf_common+0x62>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4622      	mov	r2, r4
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	47c0      	blx	r8
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d0e6      	beq.n	8003e60 <_printf_common+0xb4>
 8003e92:	f109 0901 	add.w	r9, r9, #1
 8003e96:	e7d8      	b.n	8003e4a <_printf_common+0x9e>

08003e98 <_printf_i>:
 8003e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	7e09      	ldrb	r1, [r1, #24]
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	296e      	cmp	r1, #110	; 0x6e
 8003ea8:	4617      	mov	r7, r2
 8003eaa:	4606      	mov	r6, r0
 8003eac:	4698      	mov	r8, r3
 8003eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eb0:	f000 80b3 	beq.w	800401a <_printf_i+0x182>
 8003eb4:	d822      	bhi.n	8003efc <_printf_i+0x64>
 8003eb6:	2963      	cmp	r1, #99	; 0x63
 8003eb8:	d036      	beq.n	8003f28 <_printf_i+0x90>
 8003eba:	d80a      	bhi.n	8003ed2 <_printf_i+0x3a>
 8003ebc:	2900      	cmp	r1, #0
 8003ebe:	f000 80b9 	beq.w	8004034 <_printf_i+0x19c>
 8003ec2:	2958      	cmp	r1, #88	; 0x58
 8003ec4:	f000 8083 	beq.w	8003fce <_printf_i+0x136>
 8003ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ecc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ed0:	e032      	b.n	8003f38 <_printf_i+0xa0>
 8003ed2:	2964      	cmp	r1, #100	; 0x64
 8003ed4:	d001      	beq.n	8003eda <_printf_i+0x42>
 8003ed6:	2969      	cmp	r1, #105	; 0x69
 8003ed8:	d1f6      	bne.n	8003ec8 <_printf_i+0x30>
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	6813      	ldr	r3, [r2, #0]
 8003ede:	0605      	lsls	r5, r0, #24
 8003ee0:	f103 0104 	add.w	r1, r3, #4
 8003ee4:	d52a      	bpl.n	8003f3c <_printf_i+0xa4>
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6011      	str	r1, [r2, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	da03      	bge.n	8003ef6 <_printf_i+0x5e>
 8003eee:	222d      	movs	r2, #45	; 0x2d
 8003ef0:	425b      	negs	r3, r3
 8003ef2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ef6:	486f      	ldr	r0, [pc, #444]	; (80040b4 <_printf_i+0x21c>)
 8003ef8:	220a      	movs	r2, #10
 8003efa:	e039      	b.n	8003f70 <_printf_i+0xd8>
 8003efc:	2973      	cmp	r1, #115	; 0x73
 8003efe:	f000 809d 	beq.w	800403c <_printf_i+0x1a4>
 8003f02:	d808      	bhi.n	8003f16 <_printf_i+0x7e>
 8003f04:	296f      	cmp	r1, #111	; 0x6f
 8003f06:	d020      	beq.n	8003f4a <_printf_i+0xb2>
 8003f08:	2970      	cmp	r1, #112	; 0x70
 8003f0a:	d1dd      	bne.n	8003ec8 <_printf_i+0x30>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	f043 0320 	orr.w	r3, r3, #32
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	e003      	b.n	8003f1e <_printf_i+0x86>
 8003f16:	2975      	cmp	r1, #117	; 0x75
 8003f18:	d017      	beq.n	8003f4a <_printf_i+0xb2>
 8003f1a:	2978      	cmp	r1, #120	; 0x78
 8003f1c:	d1d4      	bne.n	8003ec8 <_printf_i+0x30>
 8003f1e:	2378      	movs	r3, #120	; 0x78
 8003f20:	4865      	ldr	r0, [pc, #404]	; (80040b8 <_printf_i+0x220>)
 8003f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f26:	e055      	b.n	8003fd4 <_printf_i+0x13c>
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f2e:	1d19      	adds	r1, r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6011      	str	r1, [r2, #0]
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e08c      	b.n	8004056 <_printf_i+0x1be>
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f42:	6011      	str	r1, [r2, #0]
 8003f44:	bf18      	it	ne
 8003f46:	b21b      	sxthne	r3, r3
 8003f48:	e7cf      	b.n	8003eea <_printf_i+0x52>
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	6825      	ldr	r5, [r4, #0]
 8003f4e:	1d18      	adds	r0, r3, #4
 8003f50:	6010      	str	r0, [r2, #0]
 8003f52:	0628      	lsls	r0, r5, #24
 8003f54:	d501      	bpl.n	8003f5a <_printf_i+0xc2>
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	e002      	b.n	8003f60 <_printf_i+0xc8>
 8003f5a:	0668      	lsls	r0, r5, #25
 8003f5c:	d5fb      	bpl.n	8003f56 <_printf_i+0xbe>
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	296f      	cmp	r1, #111	; 0x6f
 8003f62:	bf14      	ite	ne
 8003f64:	220a      	movne	r2, #10
 8003f66:	2208      	moveq	r2, #8
 8003f68:	4852      	ldr	r0, [pc, #328]	; (80040b4 <_printf_i+0x21c>)
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f70:	6865      	ldr	r5, [r4, #4]
 8003f72:	2d00      	cmp	r5, #0
 8003f74:	60a5      	str	r5, [r4, #8]
 8003f76:	f2c0 8095 	blt.w	80040a4 <_printf_i+0x20c>
 8003f7a:	6821      	ldr	r1, [r4, #0]
 8003f7c:	f021 0104 	bic.w	r1, r1, #4
 8003f80:	6021      	str	r1, [r4, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d13d      	bne.n	8004002 <_printf_i+0x16a>
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	f040 808e 	bne.w	80040a8 <_printf_i+0x210>
 8003f8c:	4665      	mov	r5, ip
 8003f8e:	2a08      	cmp	r2, #8
 8003f90:	d10b      	bne.n	8003faa <_printf_i+0x112>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	07db      	lsls	r3, r3, #31
 8003f96:	d508      	bpl.n	8003faa <_printf_i+0x112>
 8003f98:	6923      	ldr	r3, [r4, #16]
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	bfde      	ittt	le
 8003fa0:	2330      	movle	r3, #48	; 0x30
 8003fa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003faa:	ebac 0305 	sub.w	r3, ip, r5
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	f8cd 8000 	str.w	r8, [sp]
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	aa03      	add	r2, sp, #12
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f7ff fef6 	bl	8003dac <_printf_common>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d14d      	bne.n	8004060 <_printf_i+0x1c8>
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	b005      	add	sp, #20
 8003fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fce:	4839      	ldr	r0, [pc, #228]	; (80040b4 <_printf_i+0x21c>)
 8003fd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	6821      	ldr	r1, [r4, #0]
 8003fd8:	1d1d      	adds	r5, r3, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6015      	str	r5, [r2, #0]
 8003fde:	060a      	lsls	r2, r1, #24
 8003fe0:	d50b      	bpl.n	8003ffa <_printf_i+0x162>
 8003fe2:	07ca      	lsls	r2, r1, #31
 8003fe4:	bf44      	itt	mi
 8003fe6:	f041 0120 	orrmi.w	r1, r1, #32
 8003fea:	6021      	strmi	r1, [r4, #0]
 8003fec:	b91b      	cbnz	r3, 8003ff6 <_printf_i+0x15e>
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	f022 0220 	bic.w	r2, r2, #32
 8003ff4:	6022      	str	r2, [r4, #0]
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	e7b7      	b.n	8003f6a <_printf_i+0xd2>
 8003ffa:	064d      	lsls	r5, r1, #25
 8003ffc:	bf48      	it	mi
 8003ffe:	b29b      	uxthmi	r3, r3
 8004000:	e7ef      	b.n	8003fe2 <_printf_i+0x14a>
 8004002:	4665      	mov	r5, ip
 8004004:	fbb3 f1f2 	udiv	r1, r3, r2
 8004008:	fb02 3311 	mls	r3, r2, r1, r3
 800400c:	5cc3      	ldrb	r3, [r0, r3]
 800400e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004012:	460b      	mov	r3, r1
 8004014:	2900      	cmp	r1, #0
 8004016:	d1f5      	bne.n	8004004 <_printf_i+0x16c>
 8004018:	e7b9      	b.n	8003f8e <_printf_i+0xf6>
 800401a:	6813      	ldr	r3, [r2, #0]
 800401c:	6825      	ldr	r5, [r4, #0]
 800401e:	1d18      	adds	r0, r3, #4
 8004020:	6961      	ldr	r1, [r4, #20]
 8004022:	6010      	str	r0, [r2, #0]
 8004024:	0628      	lsls	r0, r5, #24
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	d501      	bpl.n	800402e <_printf_i+0x196>
 800402a:	6019      	str	r1, [r3, #0]
 800402c:	e002      	b.n	8004034 <_printf_i+0x19c>
 800402e:	066a      	lsls	r2, r5, #25
 8004030:	d5fb      	bpl.n	800402a <_printf_i+0x192>
 8004032:	8019      	strh	r1, [r3, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	4665      	mov	r5, ip
 8004038:	6123      	str	r3, [r4, #16]
 800403a:	e7b9      	b.n	8003fb0 <_printf_i+0x118>
 800403c:	6813      	ldr	r3, [r2, #0]
 800403e:	1d19      	adds	r1, r3, #4
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	681d      	ldr	r5, [r3, #0]
 8004044:	6862      	ldr	r2, [r4, #4]
 8004046:	2100      	movs	r1, #0
 8004048:	4628      	mov	r0, r5
 800404a:	f000 f8e1 	bl	8004210 <memchr>
 800404e:	b108      	cbz	r0, 8004054 <_printf_i+0x1bc>
 8004050:	1b40      	subs	r0, r0, r5
 8004052:	6060      	str	r0, [r4, #4]
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	2300      	movs	r3, #0
 800405a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405e:	e7a7      	b.n	8003fb0 <_printf_i+0x118>
 8004060:	6923      	ldr	r3, [r4, #16]
 8004062:	462a      	mov	r2, r5
 8004064:	4639      	mov	r1, r7
 8004066:	4630      	mov	r0, r6
 8004068:	47c0      	blx	r8
 800406a:	3001      	adds	r0, #1
 800406c:	d0aa      	beq.n	8003fc4 <_printf_i+0x12c>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	079b      	lsls	r3, r3, #30
 8004072:	d413      	bmi.n	800409c <_printf_i+0x204>
 8004074:	68e0      	ldr	r0, [r4, #12]
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	4298      	cmp	r0, r3
 800407a:	bfb8      	it	lt
 800407c:	4618      	movlt	r0, r3
 800407e:	e7a3      	b.n	8003fc8 <_printf_i+0x130>
 8004080:	2301      	movs	r3, #1
 8004082:	464a      	mov	r2, r9
 8004084:	4639      	mov	r1, r7
 8004086:	4630      	mov	r0, r6
 8004088:	47c0      	blx	r8
 800408a:	3001      	adds	r0, #1
 800408c:	d09a      	beq.n	8003fc4 <_printf_i+0x12c>
 800408e:	3501      	adds	r5, #1
 8004090:	68e3      	ldr	r3, [r4, #12]
 8004092:	9a03      	ldr	r2, [sp, #12]
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	42ab      	cmp	r3, r5
 8004098:	dcf2      	bgt.n	8004080 <_printf_i+0x1e8>
 800409a:	e7eb      	b.n	8004074 <_printf_i+0x1dc>
 800409c:	2500      	movs	r5, #0
 800409e:	f104 0919 	add.w	r9, r4, #25
 80040a2:	e7f5      	b.n	8004090 <_printf_i+0x1f8>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ac      	bne.n	8004002 <_printf_i+0x16a>
 80040a8:	7803      	ldrb	r3, [r0, #0]
 80040aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040b2:	e76c      	b.n	8003f8e <_printf_i+0xf6>
 80040b4:	080043d5 	.word	0x080043d5
 80040b8:	080043e6 	.word	0x080043e6

080040bc <_sbrk_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	2300      	movs	r3, #0
 80040c0:	4c05      	ldr	r4, [pc, #20]	; (80040d8 <_sbrk_r+0x1c>)
 80040c2:	4605      	mov	r5, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	6023      	str	r3, [r4, #0]
 80040c8:	f7fc fa86 	bl	80005d8 <_sbrk>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_sbrk_r+0x1a>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_sbrk_r+0x1a>
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	20000314 	.word	0x20000314

080040dc <__sread>:
 80040dc:	b510      	push	{r4, lr}
 80040de:	460c      	mov	r4, r1
 80040e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e4:	f000 f8a4 	bl	8004230 <_read_r>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	bfab      	itete	ge
 80040ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040ee:	89a3      	ldrhlt	r3, [r4, #12]
 80040f0:	181b      	addge	r3, r3, r0
 80040f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040f6:	bfac      	ite	ge
 80040f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80040fa:	81a3      	strhlt	r3, [r4, #12]
 80040fc:	bd10      	pop	{r4, pc}

080040fe <__swrite>:
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	461f      	mov	r7, r3
 8004104:	898b      	ldrh	r3, [r1, #12]
 8004106:	4605      	mov	r5, r0
 8004108:	05db      	lsls	r3, r3, #23
 800410a:	460c      	mov	r4, r1
 800410c:	4616      	mov	r6, r2
 800410e:	d505      	bpl.n	800411c <__swrite+0x1e>
 8004110:	2302      	movs	r3, #2
 8004112:	2200      	movs	r2, #0
 8004114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004118:	f000 f868 	bl	80041ec <_lseek_r>
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	4632      	mov	r2, r6
 8004120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800412a:	463b      	mov	r3, r7
 800412c:	4628      	mov	r0, r5
 800412e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	f000 b817 	b.w	8004164 <_write_r>

08004136 <__sseek>:
 8004136:	b510      	push	{r4, lr}
 8004138:	460c      	mov	r4, r1
 800413a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413e:	f000 f855 	bl	80041ec <_lseek_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	bf15      	itete	ne
 8004148:	6560      	strne	r0, [r4, #84]	; 0x54
 800414a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800414e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004152:	81a3      	strheq	r3, [r4, #12]
 8004154:	bf18      	it	ne
 8004156:	81a3      	strhne	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__sclose>:
 800415a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800415e:	f000 b813 	b.w	8004188 <_close_r>
	...

08004164 <_write_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4605      	mov	r5, r0
 8004168:	4608      	mov	r0, r1
 800416a:	4611      	mov	r1, r2
 800416c:	2200      	movs	r2, #0
 800416e:	4c05      	ldr	r4, [pc, #20]	; (8004184 <_write_r+0x20>)
 8004170:	6022      	str	r2, [r4, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	f7fc f9e3 	bl	800053e <_write>
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d102      	bne.n	8004182 <_write_r+0x1e>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	b103      	cbz	r3, 8004182 <_write_r+0x1e>
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	20000314 	.word	0x20000314

08004188 <_close_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	2300      	movs	r3, #0
 800418c:	4c05      	ldr	r4, [pc, #20]	; (80041a4 <_close_r+0x1c>)
 800418e:	4605      	mov	r5, r0
 8004190:	4608      	mov	r0, r1
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	f7fc f9ef 	bl	8000576 <_close>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_close_r+0x1a>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_close_r+0x1a>
 80041a0:	602b      	str	r3, [r5, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20000314 	.word	0x20000314

080041a8 <_fstat_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	2300      	movs	r3, #0
 80041ac:	4c06      	ldr	r4, [pc, #24]	; (80041c8 <_fstat_r+0x20>)
 80041ae:	4605      	mov	r5, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	f7fc f9e9 	bl	800058c <_fstat>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d102      	bne.n	80041c4 <_fstat_r+0x1c>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	b103      	cbz	r3, 80041c4 <_fstat_r+0x1c>
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	bd38      	pop	{r3, r4, r5, pc}
 80041c6:	bf00      	nop
 80041c8:	20000314 	.word	0x20000314

080041cc <_isatty_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	2300      	movs	r3, #0
 80041d0:	4c05      	ldr	r4, [pc, #20]	; (80041e8 <_isatty_r+0x1c>)
 80041d2:	4605      	mov	r5, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	f7fc f9e7 	bl	80005aa <_isatty>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_isatty_r+0x1a>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_isatty_r+0x1a>
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000314 	.word	0x20000314

080041ec <_lseek_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4605      	mov	r5, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	2200      	movs	r2, #0
 80041f6:	4c05      	ldr	r4, [pc, #20]	; (800420c <_lseek_r+0x20>)
 80041f8:	6022      	str	r2, [r4, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fc f9df 	bl	80005be <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_lseek_r+0x1e>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	b103      	cbz	r3, 800420a <_lseek_r+0x1e>
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000314 	.word	0x20000314

08004210 <memchr>:
 8004210:	b510      	push	{r4, lr}
 8004212:	b2c9      	uxtb	r1, r1
 8004214:	4402      	add	r2, r0
 8004216:	4290      	cmp	r0, r2
 8004218:	4603      	mov	r3, r0
 800421a:	d101      	bne.n	8004220 <memchr+0x10>
 800421c:	2300      	movs	r3, #0
 800421e:	e003      	b.n	8004228 <memchr+0x18>
 8004220:	781c      	ldrb	r4, [r3, #0]
 8004222:	3001      	adds	r0, #1
 8004224:	428c      	cmp	r4, r1
 8004226:	d1f6      	bne.n	8004216 <memchr+0x6>
 8004228:	4618      	mov	r0, r3
 800422a:	bd10      	pop	{r4, pc}

0800422c <__malloc_lock>:
 800422c:	4770      	bx	lr

0800422e <__malloc_unlock>:
 800422e:	4770      	bx	lr

08004230 <_read_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4605      	mov	r5, r0
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	2200      	movs	r2, #0
 800423a:	4c05      	ldr	r4, [pc, #20]	; (8004250 <_read_r+0x20>)
 800423c:	6022      	str	r2, [r4, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	f7fc f960 	bl	8000504 <_read>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_read_r+0x1e>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	b103      	cbz	r3, 800424e <_read_r+0x1e>
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	20000314 	.word	0x20000314

08004254 <_init>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr

08004260 <_fini>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr
