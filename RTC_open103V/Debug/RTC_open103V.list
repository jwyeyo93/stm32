
RTC_open103V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004338  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004618  08004618  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004618  08004618  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000068  08004688  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08004688  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106d6  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027e2  00000000  00000000  00030767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  00032f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00033708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012988  00000000  00000000  00033da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a691  00000000  00000000  00046730  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00064d60  00000000  00000000  00050dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5b21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002400  00000000  00000000  000b5b9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08004504 	.word	0x08004504

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08004504 	.word	0x08004504

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <MX_GPIO_Init+0x40>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <MX_GPIO_Init+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0310 	and.w	r3, r3, #16
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <MX_GPIO_Init+0x40>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <MX_GPIO_Init+0x40>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <MX_GPIO_Init+0x40>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]

}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000

08000268 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fa8c 	bl	8000788 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f83c 	bl	80002ec <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f7ff ffd6 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000278:	f000 f9f0 	bl	800065c <MX_USART1_UART_Init>
  MX_RTC_Init();
 800027c:	f000 f882 	bl	8000384 <MX_RTC_Init>
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		/* Get the RTC current Time ,must get time first*/
		HAL_RTC_GetTime(&hrtc, &stimestructure, RTC_FORMAT_BIN);
 8000280:	2200      	movs	r2, #0
 8000282:	4914      	ldr	r1, [pc, #80]	; (80002d4 <main+0x6c>)
 8000284:	4814      	ldr	r0, [pc, #80]	; (80002d8 <main+0x70>)
 8000286:	f002 fae3 	bl	8002850 <HAL_RTC_GetTime>
		/* Get the RTC current Date */
		HAL_RTC_GetDate(&hrtc, &sdatestructure, RTC_FORMAT_BIN);
 800028a:	2200      	movs	r2, #0
 800028c:	4913      	ldr	r1, [pc, #76]	; (80002dc <main+0x74>)
 800028e:	4812      	ldr	r0, [pc, #72]	; (80002d8 <main+0x70>)
 8000290:	f002 fc6c 	bl	8002b6c <HAL_RTC_GetDate>

		/* Display date Format : yy/mm/dd */
		printf("%02d/%02d/%02d\r\n",2000 + sdatestructure.Year, sdatestructure.Month, sdatestructure.Date);
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <main+0x74>)
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <main+0x74>)
 800029e:	785b      	ldrb	r3, [r3, #1]
 80002a0:	461a      	mov	r2, r3
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <main+0x74>)
 80002a4:	789b      	ldrb	r3, [r3, #2]
 80002a6:	480e      	ldr	r0, [pc, #56]	; (80002e0 <main+0x78>)
 80002a8:	f003 f9da 	bl	8003660 <iprintf>
		/* Display time Format : hh:mm:ss */
		printf("%02d:%02d:%02d\r\n",stimestructure.Hours, stimestructure.Minutes, stimestructure.Seconds);
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <main+0x6c>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4619      	mov	r1, r3
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <main+0x6c>)
 80002b4:	785b      	ldrb	r3, [r3, #1]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <main+0x6c>)
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	4809      	ldr	r0, [pc, #36]	; (80002e4 <main+0x7c>)
 80002be:	f003 f9cf 	bl	8003660 <iprintf>

		printf("\r\n");
 80002c2:	4809      	ldr	r0, [pc, #36]	; (80002e8 <main+0x80>)
 80002c4:	f003 fa40 	bl	8003748 <puts>
		HAL_Delay(1000);
 80002c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002cc:	f000 faa6 	bl	800081c <HAL_Delay>
		HAL_RTC_GetTime(&hrtc, &stimestructure, RTC_FORMAT_BIN);
 80002d0:	e7d6      	b.n	8000280 <main+0x18>
 80002d2:	bf00      	nop
 80002d4:	20000098 	.word	0x20000098
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	20000094 	.word	0x20000094
 80002e0:	0800451c 	.word	0x0800451c
 80002e4:	08004530 	.word	0x08004530
 80002e8:	08004544 	.word	0x08004544

080002ec <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b096      	sub	sp, #88	; 0x58
 80002f0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002f2:	2309      	movs	r3, #9
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000312:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fd29 	bl	8000d70 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2302      	movs	r3, #2
 8000324:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000334:	f107 031c 	add.w	r3, r7, #28
 8000338:	2102      	movs	r1, #2
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fc06 	bl	8001b4c <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000340:	2301      	movs	r3, #1
 8000342:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000348:	60bb      	str	r3, [r7, #8]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f001 ff69 	bl	8002224 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000352:	f001 fefb 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8000356:	4602      	mov	r2, r0
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <SystemClock_Config+0x94>)
 800035a:	fba3 2302 	umull	r2, r3, r3, r2
 800035e:	099b      	lsrs	r3, r3, #6
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fb48 	bl	80009f6 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000366:	2004      	movs	r0, #4
 8000368:	f000 fb52 	bl	8000a10 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	f04f 30ff 	mov.w	r0, #4294967295
 8000374:	f000 fb23 	bl	80009be <HAL_NVIC_SetPriority>
}
 8000378:	bf00      	nop
 800037a:	3758      	adds	r7, #88	; 0x58
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	10624dd3 	.word	0x10624dd3

08000384 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC and set the Time and Date 
    */
  hrtc.Instance = RTC;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_RTC_Init+0x5c>)
 800038c:	4a15      	ldr	r2, [pc, #84]	; (80003e4 <MX_RTC_Init+0x60>)
 800038e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_RTC_Init+0x5c>)
 8000392:	f04f 32ff 	mov.w	r2, #4294967295
 8000396:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_RTC_Init+0x5c>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  HAL_RTC_Init(&hrtc);
 800039e:	4810      	ldr	r0, [pc, #64]	; (80003e0 <MX_RTC_Init+0x5c>)
 80003a0:	f002 f928 	bl	80025f4 <HAL_RTC_Init>

  sTime.Hours = 11;
 80003a4:	230b      	movs	r3, #11
 80003a6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 30;
 80003a8:	231e      	movs	r3, #30
 80003aa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	71bb      	strb	r3, [r7, #6]

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	480a      	ldr	r0, [pc, #40]	; (80003e0 <MX_RTC_Init+0x5c>)
 80003b8:	f002 f9b2 	bl	8002720 <HAL_RTC_SetTime>

  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80003bc:	2303      	movs	r3, #3
 80003be:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 80003c0:	2304      	movs	r3, #4
 80003c2:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 6;
 80003c4:	2306      	movs	r3, #6
 80003c6:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 16;
 80003c8:	2310      	movs	r3, #16
 80003ca:	70fb      	strb	r3, [r7, #3]

  HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80003cc:	463b      	mov	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	4619      	mov	r1, r3
 80003d2:	4803      	ldr	r0, [pc, #12]	; (80003e0 <MX_RTC_Init+0x5c>)
 80003d4:	f002 fb14 	bl	8002a00 <HAL_RTC_SetDate>

}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000009c 	.word	0x2000009c
 80003e4:	40002800 	.word	0x40002800

080003e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a12      	ldr	r2, [pc, #72]	; (8000440 <HAL_RTC_MspInit+0x58>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d11e      	bne.n	8000438 <HAL_RTC_MspInit+0x50>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80003fa:	f000 fc9f 	bl	8000d3c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <HAL_RTC_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a10      	ldr	r2, [pc, #64]	; (8000444 <HAL_RTC_MspInit+0x5c>)
 8000404:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <HAL_RTC_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800041a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	fa93 f3a3 	rbit	r3, r3
 8000422:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000424:	693b      	ldr	r3, [r7, #16]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000426:	fab3 f383 	clz	r3, r3
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	461a      	mov	r2, r3
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_RTC_MspInit+0x60>)
 8000430:	4413      	add	r3, r2
 8000432:	461a      	mov	r2, r3
 8000434:	2301      	movs	r3, #1
 8000436:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40002800 	.word	0x40002800
 8000444:	40021000 	.word	0x40021000
 8000448:	42420400 	.word	0x42420400

0800044c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <HAL_MspInit+0x68>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <HAL_MspInit+0x68>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <HAL_MspInit+0x68>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800046a:	2003      	movs	r0, #3
 800046c:	f000 fa9c 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	2100      	movs	r1, #0
 8000474:	f06f 000b 	mvn.w	r0, #11
 8000478:	f000 faa1 	bl	80009be <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2100      	movs	r1, #0
 8000480:	f06f 000a 	mvn.w	r0, #10
 8000484:	f000 fa9b 	bl	80009be <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	f06f 0009 	mvn.w	r0, #9
 8000490:	f000 fa95 	bl	80009be <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	f06f 0003 	mvn.w	r0, #3
 800049c:	f000 fa8f 	bl	80009be <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	f04f 30ff 	mov.w	r0, #4294967295
 80004a8:	f000 fa89 	bl	80009be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000

080004b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f996 	bl	80007ec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80004c0:	f000 fac2 	bl	8000a48 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e00a      	b.n	80004f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004da:	f3af 8000 	nop.w
 80004de:	4601      	mov	r1, r0
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60ba      	str	r2, [r7, #8]
 80004e6:	b2ca      	uxtb	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3301      	adds	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbf0      	blt.n	80004da <_read+0x12>
	}

return len;
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e009      	b.n	8000528 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f8fb 	bl	8000718 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbf1      	blt.n	8000514 <_write+0x12>
	}
	return len;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <_close>:

int _close(int file)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
	return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000560:	605a      	str	r2, [r3, #4]
	return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <_isatty>:

int _isatty(int file)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	return 1;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	return 0;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <_sbrk+0x50>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x16>
		heap_end = &end;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <_sbrk+0x50>)
 80005ae:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <_sbrk+0x54>)
 80005b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <_sbrk+0x50>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <_sbrk+0x50>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	466a      	mov	r2, sp
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d907      	bls.n	80005d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005c6:	f003 f819 	bl	80035fc <__errno>
 80005ca:	4602      	mov	r2, r0
 80005cc:	230c      	movs	r3, #12
 80005ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	e006      	b.n	80005e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <_sbrk+0x50>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a03      	ldr	r2, [pc, #12]	; (80005ec <_sbrk+0x50>)
 80005e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000084 	.word	0x20000084
 80005f0:	200000f8 	.word	0x200000f8

080005f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <SystemInit+0x5c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a14      	ldr	r2, [pc, #80]	; (8000650 <SystemInit+0x5c>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <SystemInit+0x5c>)
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	4911      	ldr	r1, [pc, #68]	; (8000650 <SystemInit+0x5c>)
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <SystemInit+0x60>)
 800060c:	4013      	ands	r3, r2
 800060e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <SystemInit+0x5c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <SystemInit+0x5c>)
 8000616:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800061a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <SystemInit+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <SystemInit+0x5c>)
 8000626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <SystemInit+0x5c>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <SystemInit+0x5c>)
 8000632:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000636:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <SystemInit+0x5c>)
 800063a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800063e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <SystemInit+0x64>)
 8000642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000646:	609a      	str	r2, [r3, #8]
#endif 
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	f8ff0000 	.word	0xf8ff0000
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x40>)
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <MX_USART1_UART_Init+0x44>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_USART1_UART_Init+0x40>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x40>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART1_UART_Init+0x40>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART1_UART_Init+0x40>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x40>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_USART1_UART_Init+0x40>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <MX_USART1_UART_Init+0x40>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <MX_USART1_UART_Init+0x40>)
 8000694:	f002 fd66 	bl	8003164 <HAL_UART_Init>

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000b0 	.word	0x200000b0
 80006a0:	40013800 	.word	0x40013800

080006a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a16      	ldr	r2, [pc, #88]	; (800070c <HAL_UART_MspInit+0x68>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d125      	bne.n	8000702 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_UART_MspInit+0x6c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_UART_MspInit+0x6c>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_UART_MspInit+0x6c>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <HAL_UART_MspInit+0x70>)
 80006e4:	f000 f9bc 	bl	8000a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_UART_MspInit+0x70>)
 80006fe:	f000 f9af 	bl	8000a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40013800 	.word	0x40013800
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800

08000718 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* write a character to the uart1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000720:	1d39      	adds	r1, r7, #4
 8000722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000726:	2201      	movs	r2, #1
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <__io_putchar+0x20>)
 800072a:	f002 fd64 	bl	80031f6 <HAL_UART_Transmit>

  return ch;
 800072e:	687b      	ldr	r3, [r7, #4]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000b0 	.word	0x200000b0

0800073c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800073c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800073e:	e003      	b.n	8000748 <LoopCopyDataInit>

08000740 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000742:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000744:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000746:	3104      	adds	r1, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800074c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800074e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000750:	d3f6      	bcc.n	8000740 <CopyDataInit>
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000754:	e002      	b.n	800075c <LoopFillZerobss>

08000756 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000758:	f842 3b04 	str.w	r3, [r2], #4

0800075c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800075e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000760:	d3f9      	bcc.n	8000756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000762:	f7ff ff47 	bl	80005f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f002 ff4f 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fd7d 	bl	8000268 <main>
  bx lr
 800076e:	4770      	bx	lr
  ldr r3, =_sidata
 8000770:	08004620 	.word	0x08004620
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000778:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 800077c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000780:	200000f4 	.word	0x200000f4

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f905 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff fe52 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80007bc:	f001 fcc6 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80007c0:	4602      	mov	r2, r0
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_InitTick+0x34>)
 80007c4:	fba3 2302 	umull	r2, r3, r3, r2
 80007c8:	099b      	lsrs	r3, r3, #6
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f913 	bl	80009f6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f8f1 	bl	80009be <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	10624dd3 	.word	0x10624dd3

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick++;
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <HAL_IncTick+0x18>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a03      	ldr	r2, [pc, #12]	; (8000804 <HAL_IncTick+0x18>)
 80007f8:	6013      	str	r3, [r2, #0]
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000088 	.word	0x20000088

08000808 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;
 800080c:	4b02      	ldr	r3, [pc, #8]	; (8000818 <HAL_GetTick+0x10>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000088 	.word	0x20000088

0800081c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000828:	f7ff ffee 	bl	8000808 <HAL_GetTick>
 800082c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800082e:	bf00      	nop
 8000830:	f7ff ffea 	bl	8000808 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1ad2      	subs	r2, r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3f7      	bcc.n	8000830 <HAL_Delay+0x14>
  {
  }
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	da0b      	bge.n	80008d8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <NVIC_SetPriority+0x4c>)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	3b04      	subs	r3, #4
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d6:	e009      	b.n	80008ec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4907      	ldr	r1, [pc, #28]	; (80008fc <NVIC_SetPriority+0x50>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00
 80008fc:	e000e100 	.word	0xe000e100

08000900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	bf28      	it	cs
 800091e:	2304      	movcs	r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3304      	adds	r3, #4
 8000926:	2b06      	cmp	r3, #6
 8000928:	d902      	bls.n	8000930 <NVIC_EncodePriority+0x30>
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3b03      	subs	r3, #3
 800092e:	e000      	b.n	8000932 <NVIC_EncodePriority+0x32>
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43da      	mvns	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000948:	f04f 31ff 	mov.w	r1, #4294967295
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43d9      	mvns	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
         );
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000974:	d301      	bcc.n	800097a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000976:	2301      	movs	r3, #1
 8000978:	e00f      	b.n	800099a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <SysTick_Config+0x40>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000982:	210f      	movs	r1, #15
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f7ff ff90 	bl	80008ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x40>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff49 	bl	8000848 <NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d0:	f7ff ff5e 	bl	8000890 <NVIC_GetPriorityGrouping>
 80009d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f7ff ff90 	bl	8000900 <NVIC_EncodePriority>
 80009e0:	4602      	mov	r2, r0
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff5f 	bl	80008ac <NVIC_SetPriority>
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ffb0 	bl	8000964 <SysTick_Config>
 8000a04:	4603      	mov	r3, r0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d106      	bne.n	8000a2c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a2a:	e005      	b.n	8000a38 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a32:	f023 0304 	bic.w	r3, r3, #4
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a4c:	f000 f802 	bl	8000a54 <HAL_SYSTICK_Callback>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b08b      	sub	sp, #44	; 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
 8000a82:	e133      	b.n	8000cec <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a84:	2201      	movs	r2, #1
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	f040 8122 	bne.w	8000ce6 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2b12      	cmp	r3, #18
 8000aa8:	d034      	beq.n	8000b14 <HAL_GPIO_Init+0xb4>
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d80d      	bhi.n	8000aca <HAL_GPIO_Init+0x6a>
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d02b      	beq.n	8000b0a <HAL_GPIO_Init+0xaa>
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d804      	bhi.n	8000ac0 <HAL_GPIO_Init+0x60>
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d031      	beq.n	8000b1e <HAL_GPIO_Init+0xbe>
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d01c      	beq.n	8000af8 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000abe:	e048      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d043      	beq.n	8000b4c <HAL_GPIO_Init+0xec>
 8000ac4:	2b11      	cmp	r3, #17
 8000ac6:	d01b      	beq.n	8000b00 <HAL_GPIO_Init+0xa0>
          break;
 8000ac8:	e043      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000aca:	4a8d      	ldr	r2, [pc, #564]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d026      	beq.n	8000b1e <HAL_GPIO_Init+0xbe>
 8000ad0:	4a8b      	ldr	r2, [pc, #556]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d806      	bhi.n	8000ae4 <HAL_GPIO_Init+0x84>
 8000ad6:	4a8b      	ldr	r2, [pc, #556]	; (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d020      	beq.n	8000b1e <HAL_GPIO_Init+0xbe>
 8000adc:	4a8a      	ldr	r2, [pc, #552]	; (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d01d      	beq.n	8000b1e <HAL_GPIO_Init+0xbe>
          break;
 8000ae2:	e036      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000ae4:	4a89      	ldr	r2, [pc, #548]	; (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d019      	beq.n	8000b1e <HAL_GPIO_Init+0xbe>
 8000aea:	4a89      	ldr	r2, [pc, #548]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d016      	beq.n	8000b1e <HAL_GPIO_Init+0xbe>
 8000af0:	4a88      	ldr	r2, [pc, #544]	; (8000d14 <HAL_GPIO_Init+0x2b4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d013      	beq.n	8000b1e <HAL_GPIO_Init+0xbe>
          break;
 8000af6:	e02c      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e028      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	3304      	adds	r3, #4
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e023      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e01e      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	330c      	adds	r3, #12
 8000b1a:	623b      	str	r3, [r7, #32]
          break;
 8000b1c:	e019      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b26:	2304      	movs	r3, #4
 8000b28:	623b      	str	r3, [r7, #32]
          break; 
 8000b2a:	e012      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d105      	bne.n	8000b40 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	611a      	str	r2, [r3, #16]
          break; 
 8000b3e:	e008      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b40:	2308      	movs	r3, #8
 8000b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	615a      	str	r2, [r3, #20]
          break; 
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d801      	bhi.n	8000b5c <HAL_GPIO_Init+0xfc>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	e001      	b.n	8000b60 <HAL_GPIO_Init+0x100>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2bff      	cmp	r3, #255	; 0xff
 8000b66:	d802      	bhi.n	8000b6e <HAL_GPIO_Init+0x10e>
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	e002      	b.n	8000b74 <HAL_GPIO_Init+0x114>
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3b08      	subs	r3, #8
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	401a      	ands	r2, r3
 8000b86:	6a39      	ldr	r1, [r7, #32]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 80a2 	beq.w	8000ce6 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba2:	4b5d      	ldr	r3, [pc, #372]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a5c      	ldr	r2, [pc, #368]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b5a      	ldr	r3, [pc, #360]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8000bba:	4a58      	ldr	r2, [pc, #352]	; (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4f      	ldr	r2, [pc, #316]	; (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d01f      	beq.n	8000c26 <HAL_GPIO_Init+0x1c6>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4e      	ldr	r2, [pc, #312]	; (8000d24 <HAL_GPIO_Init+0x2c4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d019      	beq.n	8000c22 <HAL_GPIO_Init+0x1c2>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <HAL_GPIO_Init+0x2c8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0x1be>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <HAL_GPIO_Init+0x2cc>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d00d      	beq.n	8000c1a <HAL_GPIO_Init+0x1ba>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4b      	ldr	r2, [pc, #300]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d007      	beq.n	8000c16 <HAL_GPIO_Init+0x1b6>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4a      	ldr	r2, [pc, #296]	; (8000d34 <HAL_GPIO_Init+0x2d4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_GPIO_Init+0x1b2>
 8000c0e:	2305      	movs	r3, #5
 8000c10:	e00a      	b.n	8000c28 <HAL_GPIO_Init+0x1c8>
 8000c12:	2306      	movs	r3, #6
 8000c14:	e008      	b.n	8000c28 <HAL_GPIO_Init+0x1c8>
 8000c16:	2304      	movs	r3, #4
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x1c8>
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e004      	b.n	8000c28 <HAL_GPIO_Init+0x1c8>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_Init+0x1c8>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_Init+0x1c8>
 8000c26:	2300      	movs	r3, #0
 8000c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2a:	f002 0203 	and.w	r2, r2, #3
 8000c2e:	0092      	lsls	r2, r2, #2
 8000c30:	4093      	lsls	r3, r2
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000c38:	4938      	ldr	r1, [pc, #224]	; (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4938      	ldr	r1, [pc, #224]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
 8000c5e:	e006      	b.n	8000c6e <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4933      	ldr	r1, [pc, #204]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	492e      	ldr	r1, [pc, #184]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	604b      	str	r3, [r1, #4]
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4929      	ldr	r1, [pc, #164]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4924      	ldr	r1, [pc, #144]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	491f      	ldr	r1, [pc, #124]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	491a      	ldr	r1, [pc, #104]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
 8000cd6:	e006      	b.n	8000ce6 <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4915      	ldr	r1, [pc, #84]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3301      	adds	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	2b0f      	cmp	r3, #15
 8000cf0:	f67f aec8 	bls.w	8000a84 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	372c      	adds	r7, #44	; 0x2c
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	10210000 	.word	0x10210000
 8000d04:	10110000 	.word	0x10110000
 8000d08:	10120000 	.word	0x10120000
 8000d0c:	10310000 	.word	0x10310000
 8000d10:	10320000 	.word	0x10320000
 8000d14:	10220000 	.word	0x10220000
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40010c00 	.word	0x40010c00
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40011400 	.word	0x40011400
 8000d30:	40011800 	.word	0x40011800
 8000d34:	40011c00 	.word	0x40011c00
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d46:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000d52:	fab3 f383 	clz	r3, r3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000d5c:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000d60:	461a      	mov	r2, r3
 8000d62:	2301      	movs	r3, #1
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0f0      	sub	sp, #448	; 0x1c0
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 819e 	beq.w	80010cc <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d90:	4bb9      	ldr	r3, [pc, #740]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d00c      	beq.n	8000db6 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d9c:	4bb6      	ldr	r3, [pc, #728]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d14f      	bne.n	8000e48 <HAL_RCC_OscConfig+0xd8>
 8000da8:	4bb3      	ldr	r3, [pc, #716]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db4:	d148      	bne.n	8000e48 <HAL_RCC_OscConfig+0xd8>
 8000db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dba:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  return(result);
 8000dca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dce:	fab3 f383 	clz	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	095b      	lsrs	r3, r3, #5
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d102      	bne.n	8000de8 <HAL_RCC_OscConfig+0x78>
 8000de2:	4ba5      	ldr	r3, [pc, #660]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	e00b      	b.n	8000e00 <HAL_RCC_OscConfig+0x90>
 8000de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000dfc:	4b9e      	ldr	r3, [pc, #632]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e04:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8000e08:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8000e0c:	fa92 f2a2 	rbit	r2, r2
 8000e10:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 8000e14:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b252      	sxtb	r2, r2
 8000e1e:	f042 0220 	orr.w	r2, r2, #32
 8000e22:	b252      	sxtb	r2, r2
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	f002 021f 	and.w	r2, r2, #31
 8000e2a:	40d3      	lsrs	r3, r2
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 814a 	beq.w	80010ca <HAL_RCC_OscConfig+0x35a>
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 8144 	bne.w	80010ca <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f000 be7b 	b.w	8001b3e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000e48:	4b8b      	ldr	r3, [pc, #556]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a8a      	ldr	r2, [pc, #552]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b88      	ldr	r3, [pc, #544]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a87      	ldr	r2, [pc, #540]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e60:	f7ff fcd2 	bl	8000808 <HAL_GetTick>
 8000e64:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fccd 	bl	8000808 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	d902      	bls.n	8000e80 <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	f000 be5f 	b.w	8001b3e <HAL_RCC_OscConfig+0xdce>
 8000e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e84:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8000e94:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d102      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x142>
 8000eac:	4b72      	ldr	r3, [pc, #456]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	e00b      	b.n	8000eca <HAL_RCC_OscConfig+0x15a>
 8000eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000ec6:	4b6c      	ldr	r3, [pc, #432]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ece:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8000ed2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8000ed6:	fa92 f2a2 	rbit	r2, r2
 8000eda:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 8000ede:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000ee2:	fab2 f282 	clz	r2, r2
 8000ee6:	b252      	sxtb	r2, r2
 8000ee8:	f042 0220 	orr.w	r2, r2, #32
 8000eec:	b252      	sxtb	r2, r2
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	f002 021f 	and.w	r2, r2, #31
 8000ef4:	40d3      	lsrs	r3, r2
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1b5      	bne.n	8000e6a <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f08:	d106      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1a8>
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a5a      	ldr	r2, [pc, #360]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e030      	b.n	8000f7a <HAL_RCC_OscConfig+0x20a>
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1cc>
 8000f22:	4b55      	ldr	r3, [pc, #340]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a54      	ldr	r2, [pc, #336]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b52      	ldr	r3, [pc, #328]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a51      	ldr	r2, [pc, #324]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e01e      	b.n	8000f7a <HAL_RCC_OscConfig+0x20a>
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x1f2>
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b48      	ldr	r3, [pc, #288]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a47      	ldr	r2, [pc, #284]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e00b      	b.n	8000f7a <HAL_RCC_OscConfig+0x20a>
 8000f62:	4b45      	ldr	r3, [pc, #276]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a41      	ldr	r2, [pc, #260]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d04f      	beq.n	8001024 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fc40 	bl	8000808 <HAL_GetTick>
 8000f88:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8c:	e00a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fc3b 	bl	8000808 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d902      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f000 bdcd 	b.w	8001b3e <HAL_RCC_OscConfig+0xdce>
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 8000fb8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbc:	fab3 f383 	clz	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d102      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x266>
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	e00b      	b.n	8000fee <HAL_RCC_OscConfig+0x27e>
 8000fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fda:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ff6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ffa:	fa92 f2a2 	rbit	r2, r2
 8000ffe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8001002:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001006:	fab2 f282 	clz	r2, r2
 800100a:	b252      	sxtb	r2, r2
 800100c:	f042 0220 	orr.w	r2, r2, #32
 8001010:	b252      	sxtb	r2, r2
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	f002 021f 	and.w	r2, r2, #31
 8001018:	40d3      	lsrs	r3, r2
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0b5      	beq.n	8000f8e <HAL_RCC_OscConfig+0x21e>
 8001022:	e053      	b.n	80010cc <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fbf0 	bl	8000808 <HAL_GetTick>
 8001028:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102c:	e00a      	b.n	8001044 <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102e:	f7ff fbeb 	bl	8000808 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d902      	bls.n	8001044 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	f000 bd7d 	b.w	8001b3e <HAL_RCC_OscConfig+0xdce>
 8001044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001048:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8001058:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_RCC_OscConfig+0x30c>
 8001070:	4b01      	ldr	r3, [pc, #4]	; (8001078 <HAL_RCC_OscConfig+0x308>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	e00e      	b.n	8001094 <HAL_RCC_OscConfig+0x324>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001080:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001090:	4bce      	ldr	r3, [pc, #824]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001098:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800109c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80010a0:	fa92 f2a2 	rbit	r2, r2
 80010a4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 80010a8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80010ac:	fab2 f282 	clz	r2, r2
 80010b0:	b252      	sxtb	r2, r2
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	b252      	sxtb	r2, r2
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	f002 021f 	and.w	r2, r2, #31
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1b2      	bne.n	800102e <HAL_RCC_OscConfig+0x2be>
 80010c8:	e000      	b.n	80010cc <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8151 	beq.w	800137e <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010dc:	4bbb      	ldr	r3, [pc, #748]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010e8:	4bb8      	ldr	r3, [pc, #736]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d163      	bne.n	80011bc <HAL_RCC_OscConfig+0x44c>
 80010f4:	4bb5      	ldr	r3, [pc, #724]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d15d      	bne.n	80011bc <HAL_RCC_OscConfig+0x44c>
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8001112:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	095b      	lsrs	r3, r3, #5
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d102      	bne.n	8001130 <HAL_RCC_OscConfig+0x3c0>
 800112a:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	e00a      	b.n	8001146 <HAL_RCC_OscConfig+0x3d6>
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001142:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2202      	movs	r2, #2
 8001148:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800114c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001150:	fa92 f2a2 	rbit	r2, r2
 8001154:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8001158:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	b252      	sxtb	r2, r2
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	b252      	sxtb	r2, r2
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	f002 021f 	and.w	r2, r2, #31
 800116e:	40d3      	lsrs	r3, r2
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d007      	beq.n	8001188 <HAL_RCC_OscConfig+0x418>
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d002      	beq.n	8001188 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	f000 bcdb 	b.w	8001b3e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b90      	ldr	r3, [pc, #576]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6959      	ldr	r1, [r3, #20]
 8001196:	23f8      	movs	r3, #248	; 0xf8
 8001198:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 80011a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	4985      	ldr	r1, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	e0e0      	b.n	800137e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d07a      	beq.n	80012bc <HAL_RCC_OscConfig+0x54c>
 80011c6:	2301      	movs	r3, #1
 80011c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 80011d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80011e6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80011ea:	461a      	mov	r2, r3
 80011ec:	2301      	movs	r3, #1
 80011ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fb0a 	bl	8000808 <HAL_GetTick>
 80011f4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fb05 	bl	8000808 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d902      	bls.n	8001210 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	f000 bc97 	b.w	8001b3e <HAL_RCC_OscConfig+0xdce>
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8001222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	095b      	lsrs	r3, r3, #5
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x4d0>
 800123a:	4b64      	ldr	r3, [pc, #400]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	e00a      	b.n	8001256 <HAL_RCC_OscConfig+0x4e6>
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	2202      	movs	r2, #2
 8001258:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800125c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001260:	fa92 f2a2 	rbit	r2, r2
 8001264:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 8001268:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b252      	sxtb	r2, r2
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	b252      	sxtb	r2, r2
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	f002 021f 	and.w	r2, r2, #31
 800127e:	40d3      	lsrs	r3, r2
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0b8      	beq.n	80011fa <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6959      	ldr	r1, [r3, #20]
 8001296:	23f8      	movs	r3, #248	; 0xf8
 8001298:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 80012a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	4945      	ldr	r1, [pc, #276]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
 80012ba:	e060      	b.n	800137e <HAL_RCC_OscConfig+0x60e>
 80012bc:	2301      	movs	r3, #1
 80012be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 80012ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80012dc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80012e0:	461a      	mov	r2, r3
 80012e2:	2300      	movs	r3, #0
 80012e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fa8f 	bl	8000808 <HAL_GetTick>
 80012ea:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fa8a 	bl	8000808 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 bc1c 	b.w	8001b3e <HAL_RCC_OscConfig+0xdce>
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 8001318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <HAL_RCC_OscConfig+0x5c6>
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x5dc>
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_RCC_OscConfig+0x65c>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	2202      	movs	r2, #2
 800134e:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001352:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001356:	fa92 f2a2 	rbit	r2, r2
 800135a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 800135e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001362:	fab2 f282 	clz	r2, r2
 8001366:	b252      	sxtb	r2, r2
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	b252      	sxtb	r2, r2
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	f002 021f 	and.w	r2, r2, #31
 8001374:	40d3      	lsrs	r3, r2
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1b8      	bne.n	80012f0 <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80b7 	beq.w	80014fc <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d059      	beq.n	800144c <HAL_RCC_OscConfig+0x6dc>
 8001398:	2301      	movs	r3, #1
 800139a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 80013aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_RCC_OscConfig+0x660>)
 80013b8:	4413      	add	r3, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	2301      	movs	r3, #1
 80013be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fa22 	bl	8000808 <HAL_GetTick>
 80013c4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c8:	e00e      	b.n	80013e8 <HAL_RCC_OscConfig+0x678>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fa18 	bl	8000808 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e3aa      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140c:	4bb0      	ldr	r3, [pc, #704]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800140e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8001422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b25b      	sxtb	r3, r3
 800142c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001430:	b25b      	sxtb	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0c7      	beq.n	80013d4 <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff f9e9 	bl	800081c <HAL_Delay>
 800144a:	e057      	b.n	80014fc <HAL_RCC_OscConfig+0x78c>
 800144c:	2301      	movs	r3, #1
 800144e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 800145e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	461a      	mov	r2, r3
 800146a:	4b9a      	ldr	r3, [pc, #616]	; (80016d4 <HAL_RCC_OscConfig+0x964>)
 800146c:	4413      	add	r3, r2
 800146e:	461a      	mov	r2, r3
 8001470:	2300      	movs	r3, #0
 8001472:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001474:	f7ff f9c8 	bl	8000808 <HAL_GetTick>
 8001478:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e009      	b.n	8001492 <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff f9c3 	bl	8000808 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e355      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014a8:	2202      	movs	r2, #2
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	fa93 f2a3 	rbit	r2, r3
 80014b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 80014be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014c4:	2102      	movs	r1, #2
 80014c6:	6019      	str	r1, [r3, #0]
 80014c8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f1a3 	rbit	r1, r3
 80014d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014d6:	6019      	str	r1, [r3, #0]
  return(result);
 80014d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1c0      	bne.n	800147e <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8188 	beq.w	800181c <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4a6f      	ldr	r2, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	61d3      	str	r3, [r2, #28]
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x968>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x968>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001538:	f7ff f966 	bl	8000808 <HAL_GetTick>
 800153c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001540:	e009      	b.n	8001556 <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001542:	f7ff f961 	bl	8000808 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e2f3      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001556:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_RCC_OscConfig+0x968>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0ef      	beq.n	8001542 <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001562:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a5a      	ldr	r2, [pc, #360]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157a:	f7ff f945 	bl	8000808 <HAL_GetTick>
 800157e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff f940 	bl	8000808 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e2d0      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 800159c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015a0:	2202      	movs	r2, #2
 80015a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015b8:	2202      	movs	r2, #2
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fa93 f2a3 	rbit	r2, r3
 80015c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ca:	601a      	str	r2, [r3, #0]
  return(result);
 80015cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d0:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	095b      	lsrs	r3, r3, #5
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_OscConfig+0x87c>
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	e001      	b.n	80015f0 <HAL_RCC_OscConfig+0x880>
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80015f4:	2102      	movs	r1, #2
 80015f6:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	fa92 f1a2 	rbit	r1, r2
 8001602:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001606:	6011      	str	r1, [r2, #0]
  return(result);
 8001608:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	fab2 f282 	clz	r2, r2
 8001612:	b252      	sxtb	r2, r2
 8001614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001618:	b252      	sxtb	r2, r2
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	f002 021f 	and.w	r2, r2, #31
 8001620:	40d3      	lsrs	r3, r2
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ac      	bne.n	8001584 <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x8d2>
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e02f      	b.n	80016a2 <HAL_RCC_OscConfig+0x932>
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x8f6>
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e01d      	b.n	80016a2 <HAL_RCC_OscConfig+0x932>
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x91a>
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x932>
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_RCC_OscConfig+0x960>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d05f      	beq.n	800176c <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff f8ac 	bl	8000808 <HAL_GetTick>
 80016b0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	e012      	b.n	80016dc <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f8a7 	bl	8000808 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d908      	bls.n	80016dc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e237      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	42420480 	.word	0x42420480
 80016d8:	40007000 	.word	0x40007000
 80016dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016e0:	2202      	movs	r2, #2
 80016e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016f8:	2202      	movs	r2, #2
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f2a3 	rbit	r2, r3
 8001706:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800170a:	601a      	str	r2, [r3, #0]
  return(result);
 800170c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001710:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	095b      	lsrs	r3, r3, #5
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d102      	bne.n	800172c <HAL_RCC_OscConfig+0x9bc>
 8001726:	4bb2      	ldr	r3, [pc, #712]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	e001      	b.n	8001730 <HAL_RCC_OscConfig+0x9c0>
 800172c:	4bb0      	ldr	r3, [pc, #704]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001734:	2102      	movs	r1, #2
 8001736:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	fa92 f1a2 	rbit	r1, r2
 8001742:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001746:	6011      	str	r1, [r2, #0]
  return(result);
 8001748:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	fab2 f282 	clz	r2, r2
 8001752:	b252      	sxtb	r2, r2
 8001754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001758:	b252      	sxtb	r2, r2
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f002 021f 	and.w	r2, r2, #31
 8001760:	40d3      	lsrs	r3, r2
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0a5      	beq.n	80016b6 <HAL_RCC_OscConfig+0x946>
 800176a:	e057      	b.n	800181c <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff f84c 	bl	8000808 <HAL_GetTick>
 8001770:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff f847 	bl	8000808 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e1d7      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 800178e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001792:	2202      	movs	r2, #2
 8001794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017aa:	2202      	movs	r2, #2
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017bc:	601a      	str	r2, [r3, #0]
  return(result);
 80017be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0xa6e>
 80017d8:	4b85      	ldr	r3, [pc, #532]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	e001      	b.n	80017e2 <HAL_RCC_OscConfig+0xa72>
 80017de:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80017e6:	2102      	movs	r1, #2
 80017e8:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	fa92 f1a2 	rbit	r1, r2
 80017f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80017f8:	6011      	str	r1, [r2, #0]
  return(result);
 80017fa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	b252      	sxtb	r2, r2
 8001806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800180a:	b252      	sxtb	r2, r2
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	40d3      	lsrs	r3, r2
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ac      	bne.n	8001776 <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 818a 	beq.w	8001b3c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001828:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	f000 8181 	beq.w	8001b38 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b02      	cmp	r3, #2
 800183e:	f040 8107 	bne.w	8001a50 <HAL_RCC_OscConfig+0xce0>
 8001842:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001846:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800184a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	fa93 f2a3 	rbit	r2, r3
 8001856:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800185a:	601a      	str	r2, [r3, #0]
  return(result);
 800185c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001860:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800186c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001870:	461a      	mov	r2, r3
 8001872:	2300      	movs	r3, #0
 8001874:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7fe ffc7 	bl	8000808 <HAL_GetTick>
 800187a:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	e009      	b.n	8001894 <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7fe ffc2 	bl	8000808 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e154      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 8001894:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ac:	601a      	str	r2, [r3, #0]
  return(result);
 80018ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_OscConfig+0xb5e>
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e00e      	b.n	80018ec <HAL_RCC_OscConfig+0xb7c>
 80018ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80018f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018f4:	6011      	str	r1, [r2, #0]
 80018f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	fa92 f1a2 	rbit	r1, r2
 8001900:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001904:	6011      	str	r1, [r2, #0]
  return(result);
 8001906:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	fab2 f282 	clz	r2, r2
 8001910:	b252      	sxtb	r2, r2
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	b252      	sxtb	r2, r2
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f002 021f 	and.w	r2, r2, #31
 800191e:	40d3      	lsrs	r3, r2
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ab      	bne.n	8001880 <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d109      	bne.n	8001948 <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	492b      	ldr	r1, [pc, #172]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a19      	ldr	r1, [r3, #32]
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	430b      	orrs	r3, r1
 800195e:	4924      	ldr	r1, [pc, #144]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001968:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800197c:	601a      	str	r2, [r3, #0]
  return(result);
 800197e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001982:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800198e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001992:	461a      	mov	r2, r3
 8001994:	2301      	movs	r3, #1
 8001996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7fe ff36 	bl	8000808 <HAL_GetTick>
 800199c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7fe ff31 	bl	8000808 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0c3      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 80019b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ce:	601a      	str	r2, [r3, #0]
  return(result);
 80019d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	095b      	lsrs	r3, r3, #5
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d104      	bne.n	80019f4 <HAL_RCC_OscConfig+0xc84>
 80019ea:	4b01      	ldr	r3, [pc, #4]	; (80019f0 <HAL_RCC_OscConfig+0xc80>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	e010      	b.n	8001a12 <HAL_RCC_OscConfig+0xca2>
 80019f0:	40021000 	.word	0x40021000
 80019f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_RCC_OscConfig+0xdd8>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a1a:	6011      	str	r1, [r2, #0]
 8001a1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	fa92 f1a2 	rbit	r1, r2
 8001a26:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a2a:	6011      	str	r1, [r2, #0]
  return(result);
 8001a2c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b252      	sxtb	r2, r2
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	b252      	sxtb	r2, r2
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	40d3      	lsrs	r3, r2
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0a9      	beq.n	80019a2 <HAL_RCC_OscConfig+0xc32>
 8001a4e:	e075      	b.n	8001b3c <HAL_RCC_OscConfig+0xdcc>
 8001a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f2a3 	rbit	r2, r3
 8001a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a68:	601a      	str	r2, [r3, #0]
  return(result);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001a7a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2300      	movs	r3, #0
 8001a82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7fe fec0 	bl	8000808 <HAL_GetTick>
 8001a88:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7fe febb 	bl	8000808 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e04d      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 8001aa2:	f107 0320 	add.w	r3, r7, #32
 8001aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	601a      	str	r2, [r3, #0]
  return(result);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0xd6c>
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_RCC_OscConfig+0xdd8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e00e      	b.n	8001afa <HAL_RCC_OscConfig+0xd8a>
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_RCC_OscConfig+0xdd8>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f107 0210 	add.w	r2, r7, #16
 8001afe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b02:	6011      	str	r1, [r2, #0]
 8001b04:	f107 0210 	add.w	r2, r7, #16
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	fa92 f1a2 	rbit	r1, r2
 8001b0e:	f107 020c 	add.w	r2, r7, #12
 8001b12:	6011      	str	r1, [r2, #0]
  return(result);
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b252      	sxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b252      	sxtb	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	40d3      	lsrs	r3, r2
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ab      	bne.n	8001a8e <HAL_RCC_OscConfig+0xd1e>
 8001b36:	e001      	b.n	8001b3c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0a8      	sub	sp, #160	; 0xa0
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b5c:	4bb0      	ldr	r3, [pc, #704]	; (8001e20 <HAL_RCC_ClockConfig+0x2d4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	f240 812b 	bls.w	8001dc2 <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6c:	4bac      	ldr	r3, [pc, #688]	; (8001e20 <HAL_RCC_ClockConfig+0x2d4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 0207 	bic.w	r2, r3, #7
 8001b74:	49aa      	ldr	r1, [pc, #680]	; (8001e20 <HAL_RCC_ClockConfig+0x2d4>)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b7c:	4ba8      	ldr	r3, [pc, #672]	; (8001e20 <HAL_RCC_ClockConfig+0x2d4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e25d      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9a:	4ba2      	ldr	r3, [pc, #648]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	499f      	ldr	r1, [pc, #636]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8225 	beq.w	8002004 <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d140      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
 8001bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8001bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d102      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xa8>
 8001bee:	4b8d      	ldr	r3, [pc, #564]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_ClockConfig+0xc0>
 8001bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c08:	4b86      	ldr	r3, [pc, #536]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c10:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001c14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001c18:	fa92 f2a2 	rbit	r2, r2
 8001c1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8001c20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c24:	fab2 f282 	clz	r2, r2
 8001c28:	b252      	sxtb	r2, r2
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	b252      	sxtb	r2, r2
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f002 021f 	and.w	r2, r2, #31
 8001c36:	40d3      	lsrs	r3, r2
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d170      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e202      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d137      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x170>
 8001c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x12e>
 8001c74:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_ClockConfig+0x140>
 8001c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	677b      	str	r3, [r7, #116]	; 0x74
 8001c88:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	673a      	str	r2, [r7, #112]	; 0x70
 8001c92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8001c9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	b252      	sxtb	r2, r2
 8001ca2:	f042 0220 	orr.w	r2, r2, #32
 8001ca6:	b252      	sxtb	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f002 021f 	and.w	r2, r2, #31
 8001cae:	40d3      	lsrs	r3, r2
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d134      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e1c6      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x198>
 8001cde:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e007      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1a8>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001d00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d02:	fab2 f282 	clz	r2, r2
 8001d06:	b252      	sxtb	r2, r2
 8001d08:	f042 0220 	orr.w	r2, r2, #32
 8001d0c:	b252      	sxtb	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	40d3      	lsrs	r3, r2
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e193      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d22:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f023 0203 	bic.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	493d      	ldr	r1, [pc, #244]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7fe fd68 	bl	8000808 <HAL_GetTick>
 8001d38:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d113      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d46:	f7fe fd5f 	bl	8000808 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e175      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d1ed      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1fa>
 8001d6a:	e14b      	b.n	8002004 <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d11f      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	e00b      	b.n	8001d8e <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d76:	f7fe fd47 	bl	8000808 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e15d      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d1ed      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x22a>
 8001d9a:	e133      	b.n	8002004 <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7fe fd34 	bl	8000808 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e14a      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ed      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x250>
 8001dc0:	e120      	b.n	8002004 <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4912      	ldr	r1, [pc, #72]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80fa 	beq.w	8001fe2 <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d139      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x31e>
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d106      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x2dc>
 8001e1a:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <HAL_RCC_ClockConfig+0x2d8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e00c      	b.n	8001e3a <HAL_RCC_ClockConfig+0x2ee>
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	647b      	str	r3, [r7, #68]	; 0x44
 8001e36:	4b87      	ldr	r3, [pc, #540]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e3e:	643a      	str	r2, [r7, #64]	; 0x40
 8001e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e42:	fa92 f2a2 	rbit	r2, r2
 8001e46:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 8001e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e4a:	fab2 f282 	clz	r2, r2
 8001e4e:	b252      	sxtb	r2, r2
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	b252      	sxtb	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f002 021f 	and.w	r2, r2, #31
 8001e5c:	40d3      	lsrs	r3, r2
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d16e      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0ef      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d135      	bne.n	8001ede <HAL_RCC_ClockConfig+0x392>
 8001e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x350>
 8001e96:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_ClockConfig+0x362>
 8001e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb6:	fa92 f2a2 	rbit	r2, r2
 8001eba:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b252      	sxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b252      	sxtb	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	40d3      	lsrs	r3, r2
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d134      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0b5      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001eea:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x3ba>
 8001f00:	4b54      	ldr	r3, [pc, #336]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e007      	b.n	8001f16 <HAL_RCC_ClockConfig+0x3ca>
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	2202      	movs	r2, #2
 8001f18:	613a      	str	r2, [r7, #16]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	fa92 f2a2 	rbit	r2, r2
 8001f20:	60fa      	str	r2, [r7, #12]
  return(result);
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b252      	sxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b252      	sxtb	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f002 021f 	and.w	r2, r2, #31
 8001f36:	40d3      	lsrs	r3, r2
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e082      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 0203 	bic.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4940      	ldr	r1, [pc, #256]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fc57 	bl	8000808 <HAL_GetTick>
 8001f5a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d113      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe fc4e 	bl	8000808 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e064      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d1ed      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x41c>
 8001f8c:	e029      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d11f      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe fc36 	bl	8000808 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e04c      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d1ed      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x44c>
 8001fbc:	e011      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7fe fc23 	bl	8000808 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e039      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ed      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCC_ClockConfig+0x50c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	491b      	ldr	r1, [pc, #108]	; (8002058 <HAL_RCC_ClockConfig+0x50c>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_ClockConfig+0x50c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e022      	b.n	800204a <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	490d      	ldr	r1, [pc, #52]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4905      	ldr	r1, [pc, #20]	; (8002054 <HAL_RCC_ClockConfig+0x508>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002042:	2000      	movs	r0, #0
 8002044:	f7fe fbb6 	bl	80007b4 <HAL_InitTick>
  
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	37a0      	adds	r7, #160	; 0xa0
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b490      	push	{r4, r7}
 800205e:	b08e      	sub	sp, #56	; 0x38
 8002060:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002064:	1d3c      	adds	r4, r7, #4
 8002066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800206c:	4b33      	ldr	r3, [pc, #204]	; (800213c <HAL_RCC_GetSysClockFreq+0xe0>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x46>
 800209a:	e043      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_GetSysClockFreq+0xe8>)
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a0:	e043      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80020ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020c4:	4413      	add	r3, r2
 80020c6:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01e      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_RCC_GetSysClockFreq+0xe4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80020de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	617b      	str	r3, [r7, #20]
  return(result);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020fa:	4413      	add	r3, r2
 80020fc:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002102:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002106:	fbb2 f2f3 	udiv	r2, r2, r3
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
 8002112:	e004      	b.n	800211e <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <HAL_RCC_GetSysClockFreq+0xec>)
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002122:	e002      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800212c:	4618      	mov	r0, r3
 800212e:	3738      	adds	r7, #56	; 0x38
 8002130:	46bd      	mov	sp, r7
 8002132:	bc90      	pop	{r4, r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	08004548 	.word	0x08004548
 800213c:	08004558 	.word	0x08004558
 8002140:	40021000 	.word	0x40021000
 8002144:	007a1200 	.word	0x007a1200
 8002148:	003d0900 	.word	0x003d0900

0800214c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002152:	f7ff ff83 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_RCC_GetHCLKFreq+0x44>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002160:	23f0      	movs	r3, #240	; 0xf0
 8002162:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	603b      	str	r3, [r7, #0]
  return(result);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_RCC_GetHCLKFreq+0x48>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002180:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002184:	681b      	ldr	r3, [r3, #0]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	08004570 	.word	0x08004570
 8002198:	20000000 	.word	0x20000000

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80021a2:	f7ff ffd3 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80021a6:	4601      	mov	r1, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021b4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	603b      	str	r3, [r7, #0]
  return(result);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08004570 	.word	0x08004570

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80021e6:	f7ff ffb1 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80021ea:	4601      	mov	r1, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80021f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021f8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	603b      	str	r3, [r7, #0]
  return(result);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x40>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	08004570 	.word	0x08004570

08002224 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b090      	sub	sp, #64	; 0x40
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0, temp_reg = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002230:	2300      	movs	r3, #0
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a6 	beq.w	800238e <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a63      	ldr	r2, [pc, #396]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	61d3      	str	r3, [r2, #28]
 800224e:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5e      	ldr	r2, [pc, #376]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002266:	f7fe facf 	bl	8000808 <HAL_GetTick>
 800226a:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe facb 	bl	8000808 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0a5      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002280:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4053      	eors	r3, r2
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d077      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	461a      	mov	r2, r3
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022c2:	4413      	add	r3, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	2301      	movs	r3, #1
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b3e      	ldr	r3, [pc, #248]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022e4:	4413      	add	r3, r2
 80022e6:	461a      	mov	r2, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ec:	4a39      	ldr	r2, [pc, #228]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80022f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03f      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fa84 	bl	8000808 <HAL_GetTick>
 8002300:	63f8      	str	r0, [r7, #60]	; 0x3c
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fa80 	bl	8000808 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e058      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800231a:	2302      	movs	r3, #2
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	2302      	movs	r3, #2
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	61bb      	str	r3, [r7, #24]
  return(result);
 8002332:	69bb      	ldr	r3, [r7, #24]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d102      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	e001      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2202      	movs	r2, #2
 8002354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	613a      	str	r2, [r7, #16]
  return(result);
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b252      	sxtb	r2, r2
 8002366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236a:	b252      	sxtb	r2, r2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	40d3      	lsrs	r3, r2
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0c3      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xe0>
          }      
        }  
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4912      	ldr	r1, [pc, #72]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	490b      	ldr	r1, [pc, #44]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3740      	adds	r7, #64	; 0x40
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
 80023dc:	42420400 	.word	0x42420400

080023e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b093      	sub	sp, #76	; 0x4c
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023e8:	4b7c      	ldr	r3, [pc, #496]	; (80025dc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80023ea:	f107 040c 	add.w	r4, r7, #12
 80023ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80023f4:	4b7a      	ldr	r3, [pc, #488]	; (80025e0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	813b      	strh	r3, [r7, #8]
#endif
#endif
  uint32_t temp_reg = 0, frequency = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023fe:	2300      	movs	r3, #0
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1 = 0, pllclk = 0, pllmul = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	63bb      	str	r3, [r7, #56]	; 0x38
 8002406:	2300      	movs	r3, #0
 8002408:	643b      	str	r3, [r7, #64]	; 0x40
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3b01      	subs	r3, #1
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f200 80da 	bhi.w	80025cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	0800252f 	.word	0x0800252f
 8002424:	0800259b 	.word	0x0800259b
 8002428:	080025cd 	.word	0x080025cd
 800242c:	0800251f 	.word	0x0800251f
 8002430:	080025cd 	.word	0x080025cd
 8002434:	080025cd 	.word	0x080025cd
 8002438:	080025cd 	.word	0x080025cd
 800243c:	08002527 	.word	0x08002527
 8002440:	080025cd 	.word	0x080025cd
 8002444:	080025cd 	.word	0x080025cd
 8002448:	080025cd 	.word	0x080025cd
 800244c:	080025cd 	.word	0x080025cd
 8002450:	080025cd 	.word	0x080025cd
 8002454:	080025cd 	.word	0x080025cd
 8002458:	080025cd 	.word	0x080025cd
 800245c:	08002461 	.word	0x08002461
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002460:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	63fb      	str	r3, [r7, #60]	; 0x3c
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80ae 	beq.w	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800247a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002496:	4413      	add	r3, r2
 8002498:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d023      	beq.n	80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80024b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80024cc:	4413      	add	r3, r2
 80024ce:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
          {
              pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80024de:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	643b      	str	r3, [r7, #64]	; 0x40
 80024ee:	e004      	b.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	4a3e      	ldr	r2, [pc, #248]	; (80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002506:	d102      	bne.n	800250e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800250c:	e060      	b.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
          frequency = (pllclk * 2) / 3;
 800250e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4a37      	ldr	r2, [pc, #220]	; (80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 800251c:	e058      	b.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 || defined(STM32F107xC)
  case RCC_PERIPHCLK_I2S2:  
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800251e:	f7ff fd9d 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002522:	6478      	str	r0, [r7, #68]	; 0x44
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> POSITION_VAL(RCC_CFGR2_PLL3MUL)) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002524:	e055      	b.n	80025d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
    }
  case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002526:	f7ff fd99 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800252a:	6478      	str	r0, [r7, #68]	; 0x44
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> POSITION_VAL(RCC_CFGR2_PLL3MUL)) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800252c:	e051      	b.n	80025d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253e:	d108      	bne.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8002540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
      {
        frequency = LSE_VALUE;
 800254a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
 8002550:	e022      	b.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d109      	bne.n	8002572 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
      {
        frequency = LSI_VALUE;
 800256a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
 8002570:	e012      	b.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800257c:	d109      	bne.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
      {
        frequency = HSE_VALUE / 128;
 800258a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
 8002590:	e002      	b.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
      }
      break;
 8002596:	e01c      	b.n	80025d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8002598:	e01b      	b.n	80025d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 800259a:	f7ff fe21 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 800259e:	4601      	mov	r1, r0
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80025a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c8:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
    }
  default: 
    {
      break;
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
      break;
 80025d0:	bf00      	nop
    }
  }
  return(frequency);
 80025d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	374c      	adds	r7, #76	; 0x4c
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	0800455c 	.word	0x0800455c
 80025e0:	0800456c 	.word	0x0800456c
 80025e4:	40021000 	.word	0x40021000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	003d0900 	.word	0x003d0900
 80025f0:	aaaaaaab 	.word	0xaaaaaaab

080025f4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e084      	b.n	8002714 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7c5b      	ldrb	r3, [r3, #17]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fd fee4 	bl	80003e8 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 faf4 	bl	8002c14 <HAL_RTC_WaitForSynchro>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e06b      	b.n	8002714 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fbad 	bl	8002d9c <RTC_EnterInitMode>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2204      	movs	r2, #4
 800264c:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e060      	b.n	8002714 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0207 	bic.w	r2, r2, #7
 8002660:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <HAL_RTC_Init+0x128>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_RTC_Init+0x128>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RTC_Init+0x128>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4926      	ldr	r1, [pc, #152]	; (800271c <HAL_RTC_Init+0x128>)
 8002684:	4313      	orrs	r3, r2
 8002686:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d003      	beq.n	800269a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e00e      	b.n	80026b8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff fea0 	bl	80023e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80026a0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2204      	movs	r2, #4
 80026ac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e030      	b.n	8002714 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 010f 	bic.w	r1, r3, #15
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	0c1a      	lsrs	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b291      	uxth	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fb81 	bl	8002dec <RTC_ExitInitMode>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2204      	movs	r2, #4
 80026f4:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00c      	b.n	8002714 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 8002712:	2300      	movs	r3, #0
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40006c00 	.word	0x40006c00

08002720 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0, counter_alarm = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_RTC_SetTime+0x20>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RTC_SetTime+0x24>
  {
     return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e080      	b.n	8002846 <HAL_RTC_SetTime+0x126>
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	7c1b      	ldrb	r3, [r3, #16]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_RTC_SetTime+0x30>
 800274c:	2302      	movs	r3, #2
 800274e:	e07a      	b.n	8002846 <HAL_RTC_SetTime+0x126>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2202      	movs	r2, #2
 800275a:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800276c:	fb03 f202 	mul.w	r2, r3, r2
                        ((uint32_t)sTime->Minutes * 60) + \
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	785b      	ldrb	r3, [r3, #1]
 8002774:	4619      	mov	r1, r3
 8002776:	460b      	mov	r3, r1
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a5b      	subs	r3, r3, r1
 800277c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 800277e:	4413      	add	r3, r2
                        ((uint32_t)sTime->Seconds));  
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 8002784:	4413      	add	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e01e      	b.n	80027c8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fb71 	bl	8002e76 <RTC_Bcd2ToByte>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800279c:	fb03 f402 	mul.w	r4, r3, r2
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fb66 	bl	8002e76 <RTC_Bcd2ToByte>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 80027b6:	441c      	add	r4, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fb5a 	bl	8002e76 <RTC_Bcd2ToByte>
 80027c2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 80027c4:	4423      	add	r3, r4
 80027c6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027c8:	6979      	ldr	r1, [r7, #20]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fa7f 	bl	8002cce <RTC_WriteTimeCounter>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2204      	movs	r2, #4
 80027da:	745a      	strb	r2, [r3, #17]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	741a      	strb	r2, [r3, #16]
    
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e02f      	b.n	8002846 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0205 	bic.w	r2, r2, #5
 80027f4:	605a      	str	r2, [r3, #4]
    
    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa90 	bl	8002d1c <RTC_ReadAlarmCounter>
 80027fc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d018      	beq.n	8002838 <HAL_RTC_SetTime+0x118>
    {
      if(counter_alarm < counter_time)
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	429a      	cmp	r2, r3
 800280c:	d214      	bcs.n	8002838 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002814:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002818:	613b      	str	r3, [r7, #16]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800281a:	6939      	ldr	r1, [r7, #16]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fa96 	bl	8002d4e <RTC_WriteAlarmCounter>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2204      	movs	r2, #4
 800282c:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e006      	b.n	8002846 <HAL_RTC_SetTime+0x126>
        }
      }
    }
    
    hrtc->State = HAL_RTC_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	745a      	strb	r2, [r3, #17]
  
   __HAL_UNLOCK(hrtc); 
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	741a      	strb	r2, [r3, #16]
     
   return HAL_OK;
 8002844:	2300      	movs	r3, #0
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
	...

08002850 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0, counter_alarm = 0, days_elapsed = 0, hours = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_RTC_GetTime+0x28>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RTC_GetTime+0x2c>
  {
     return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0b5      	b.n	80029e8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_RTC_GetTime+0x3e>
  {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0ac      	b.n	80029e8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f9ed 	bl	8002c6e <RTC_ReadTimeCounter>
 8002894:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600;
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <HAL_RTC_GetTime+0x1a0>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0adb      	lsrs	r3, r3, #11
 80028a0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600) / 60);
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_RTC_GetTime+0x1a0>)
 80028a6:	fba3 1302 	umull	r1, r3, r3, r2
 80028aa:	0adb      	lsrs	r3, r3, #11
 80028ac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	4a4f      	ldr	r2, [pc, #316]	; (80029f4 <HAL_RTC_GetTime+0x1a4>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600) % 60);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4a4a      	ldr	r2, [pc, #296]	; (80029f0 <HAL_RTC_GetTime+0x1a0>)
 80028c8:	fba2 1203 	umull	r1, r2, r2, r3
 80028cc:	0ad2      	lsrs	r2, r2, #11
 80028ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028d2:	fb01 f202 	mul.w	r2, r1, r2
 80028d6:	1a9a      	subs	r2, r3, r2
 80028d8:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RTC_GetTime+0x1a4>)
 80028da:	fba3 1302 	umull	r1, r3, r3, r2
 80028de:	0959      	lsrs	r1, r3, #5
 80028e0:	460b      	mov	r3, r1
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a5b      	subs	r3, r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	1ad1      	subs	r1, r2, r3
 80028ea:	b2ca      	uxtb	r2, r1
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	709a      	strb	r2, [r3, #2]

  if (hours >= 24)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b17      	cmp	r3, #23
 80028f4:	d955      	bls.n	80029a2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4a3f      	ldr	r2, [pc, #252]	; (80029f8 <HAL_RTC_GetTime+0x1a8>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24);    
 8002902:	6939      	ldr	r1, [r7, #16]
 8002904:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <HAL_RTC_GetTime+0x1a8>)
 8002906:	fba3 2301 	umull	r2, r3, r3, r1
 800290a:	091a      	lsrs	r2, r3, #4
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	1aca      	subs	r2, r1, r3
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f9fd 	bl	8002d1c <RTC_ReadAlarmCounter>
 8002922:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d008      	beq.n	800293e <HAL_RTC_GetTime+0xee>
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	429a      	cmp	r2, r3
 8002932:	d904      	bls.n	800293e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	e002      	b.n	8002944 <HAL_RTC_GetTime+0xf4>
    }
    else 
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24 * 3600);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <HAL_RTC_GetTime+0x1ac>)
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	61bb      	str	r3, [r7, #24]
    
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002952:	69b9      	ldr	r1, [r7, #24]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f9ba 	bl	8002cce <RTC_WriteTimeCounter>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e041      	b.n	80029e8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d00c      	beq.n	8002986 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	61fb      	str	r3, [r7, #28]
      
      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002974:	69f9      	ldr	r1, [r7, #28]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f9e9 	bl	8002d4e <RTC_WriteAlarmCounter>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e030      	b.n	80029e8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f9e0 	bl	8002d4e <RTC_WriteAlarmCounter>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e027      	b.n	80029e8 <HAL_RTC_GetTime+0x198>
      }
    }
    
    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002998:	6979      	ldr	r1, [r7, #20]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fa88 	bl	8002eb0 <RTC_DateUpdate>
 80029a0:	e003      	b.n	80029aa <HAL_RTC_GetTime+0x15a>
  }
  else 
  {
    sTime->Hours = hours;    
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if(Format != RTC_FORMAT_BIN)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01a      	beq.n	80029e6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fa41 	bl	8002e3c <RTC_ByteToBcd2>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa38 	bl	8002e3c <RTC_ByteToBcd2>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	789b      	ldrb	r3, [r3, #2]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fa2f 	bl	8002e3c <RTC_ByteToBcd2>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	709a      	strb	r2, [r3, #2]
  }
  
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	91a2b3c5 	.word	0x91a2b3c5
 80029f4:	88888889 	.word	0x88888889
 80029f8:	aaaaaaab 	.word	0xaaaaaaab
 80029fc:	00015180 	.word	0x00015180

08002a00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0, counter_alarm = 0, hours = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_RTC_SetDate+0x24>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RTC_SetDate+0x28>
  {
     return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e097      	b.n	8002b58 <HAL_RTC_SetDate+0x158>
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	7c1b      	ldrb	r3, [r3, #16]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_RTC_SetDate+0x34>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e091      	b.n	8002b58 <HAL_RTC_SetDate+0x158>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	78da      	ldrb	r2, [r3, #3]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	785a      	ldrb	r2, [r3, #1]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	789a      	ldrb	r2, [r3, #2]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	739a      	strb	r2, [r3, #14]
 8002a5e:	e01a      	b.n	8002a96 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	78db      	ldrb	r3, [r3, #3]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fa06 	bl	8002e76 <RTC_Bcd2ToByte>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f9fd 	bl	8002e76 <RTC_Bcd2ToByte>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	789b      	ldrb	r3, [r3, #2]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f9f4 	bl	8002e76 <RTC_Bcd2ToByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	7bdb      	ldrb	r3, [r3, #15]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	7b59      	ldrb	r1, [r3, #13]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	7b9b      	ldrb	r3, [r3, #14]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f000 fadf 	bl	8003068 <RTC_WeekDayNum>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7b1a      	ldrb	r2, [r3, #12]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f8d7 	bl	8002c6e <RTC_ReadTimeCounter>
 8002ac0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_RTC_SetDate+0x160>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0adb      	lsrs	r3, r3, #11
 8002acc:	617b      	str	r3, [r7, #20]
  if (hours > 24)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b18      	cmp	r3, #24
 8002ad2:	d93a      	bls.n	8002b4a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24) * 24 * 3600);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_RTC_SetDate+0x164>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <HAL_RTC_SetDate+0x168>)
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002aea:	69f9      	ldr	r1, [r7, #28]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f8ee 	bl	8002cce <RTC_WriteTimeCounter>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2204      	movs	r2, #4
 8002afc:	745a      	strb	r2, [r3, #17]
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	741a      	strb	r2, [r3, #16]
      
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e027      	b.n	8002b58 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f907 	bl	8002d1c <RTC_ReadAlarmCounter>
 8002b0e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d018      	beq.n	8002b4a <HAL_RTC_SetDate+0x14a>
    {
      if(counter_alarm < counter_time)
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d214      	bcs.n	8002b4a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24 * 3600);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002b26:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b2a:	61bb      	str	r3, [r7, #24]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b2c:	69b9      	ldr	r1, [r7, #24]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f90d 	bl	8002d4e <RTC_WriteAlarmCounter>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e006      	b.n	8002b58 <HAL_RTC_SetDate+0x158>
    }
    

  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	745a      	strb	r2, [r3, #17]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;    
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	91a2b3c5 	.word	0x91a2b3c5
 8002b64:	aaaaaaab 	.word	0xaaaaaaab
 8002b68:	00015180 	.word	0x00015180

08002b6c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format 
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0};
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	460a      	mov	r2, r1
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	460a      	mov	r2, r1
 8002b84:	709a      	strb	r2, [r3, #2]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_RTC_GetDate+0x26>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RTC_GetDate+0x2a>
  {
     return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e03a      	b.n	8002c0c <HAL_RTC_GetDate+0xa0>
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff fe56 	bl	8002850 <HAL_RTC_GetTime>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e02e      	b.n	8002c0c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	7b1a      	ldrb	r2, [r3, #12]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	7bda      	ldrb	r2, [r3, #15]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	7b5a      	ldrb	r2, [r3, #13]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	7b9a      	ldrb	r2, [r3, #14]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if(Format != RTC_FORMAT_BIN)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01a      	beq.n	8002c0a <HAL_RTC_GetDate+0x9e>
  {    
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	78db      	ldrb	r3, [r3, #3]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f92f 	bl	8002e3c <RTC_ByteToBcd2>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f926 	bl	8002e3c <RTC_ByteToBcd2>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);  
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	789b      	ldrb	r3, [r3, #2]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f91d 	bl	8002e3c <RTC_ByteToBcd2>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e01d      	b.n	8002c66 <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8002c3a:	f7fd fde5 	bl	8000808 <HAL_GetTick>
 8002c3e:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002c40:	e009      	b.n	8002c56 <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8002c42:	f7fd fde1 	bl	8000808 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c50:	d901      	bls.n	8002c56 <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e007      	b.n	8002c66 <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ee      	beq.n	8002c42 <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0, high2 = 0, low = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	827b      	strh	r3, [r7, #18]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	823b      	strh	r3, [r7, #16]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002c9e:	8a7a      	ldrh	r2, [r7, #18]
 8002ca0:	8a3b      	ldrh	r3, [r7, #16]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d008      	beq.n	8002cb8 <RTC_ReadTimeCounter+0x4a>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16 ) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002ca6:	8a3b      	ldrh	r3, [r7, #16]
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e004      	b.n	8002cc2 <RTC_ReadTimeCounter+0x54>
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16 ) | low);
 8002cb8:	8a7b      	ldrh	r3, [r7, #18]
 8002cba:	041a      	lsls	r2, r3, #16
 8002cbc:	89fb      	ldrh	r3, [r7, #14]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002cc2:	697b      	ldr	r3, [r7, #20]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef* hrtc, uint32_t TimeCounter)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f85d 	bl	8002d9c <RTC_EnterInitMode>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	e011      	b.n	8002d12 <RTC_WriteTimeCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	0c12      	lsrs	r2, r2, #16
 8002cf6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	61da      	str	r2, [r3, #28]
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f872 	bl	8002dec <RTC_ExitInitMode>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <RTC_WriteTimeCounter+0x44>
    {       
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0, low = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	81fb      	strh	r3, [r7, #14]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16 ) | low);
 8002d3c:	89fb      	ldrh	r3, [r7, #14]
 8002d3e:	041a      	lsls	r2, r3, #16
 8002d40:	89bb      	ldrh	r3, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef* hrtc, uint32_t AlarmCounter)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f81d 	bl	8002d9c <RTC_EnterInitMode>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e011      	b.n	8002d92 <RTC_WriteAlarmCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	0c12      	lsrs	r2, r2, #16
 8002d76:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f832 	bl	8002dec <RTC_ExitInitMode>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <RTC_WriteAlarmCounter+0x44>
    {       
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8002da8:	f7fd fd2e 	bl	8000808 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002dae:	e009      	b.n	8002dc4 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002db0:	f7fd fd2a 	bl	8000808 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dbe:	d901      	bls.n	8002dc4 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e00f      	b.n	8002de4 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ee      	beq.n	8002db0 <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0210 	orr.w	r2, r2, #16
 8002de0:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0210 	bic.w	r2, r2, #16
 8002e06:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8002e08:	f7fd fcfe 	bl	8000808 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e0e:	e009      	b.n	8002e24 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e10:	f7fd fcfa 	bl	8000808 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e1e:	d901      	bls.n	8002e24 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e007      	b.n	8002e34 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ee      	beq.n	8002e10 <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  
  while(Value >= 10)
 8002e4a:	e005      	b.n	8002e58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	3b0a      	subs	r3, #10
 8002e56:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	d8f6      	bhi.n	8002e4c <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	b2db      	uxtb	r3, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b2db      	uxtb	r3, r3
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef* hrtc, uint32_t DayElapsed)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0, month = 0, day = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7bdb      	ldrb	r3, [r3, #15]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7b5b      	ldrb	r3, [r3, #13]
 8002ed4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7b9b      	ldrb	r3, [r3, #14]
 8002eda:	60fb      	str	r3, [r7, #12]

  for (loop = 0; loop < DayElapsed; loop++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	e06f      	b.n	8002fc2 <RTC_DateUpdate+0x112>
  {
    if((month == 1) || (month == 3) || (month == 5) || (month == 7) || \
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d011      	beq.n	8002f0c <RTC_DateUpdate+0x5c>
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d00e      	beq.n	8002f0c <RTC_DateUpdate+0x5c>
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d00b      	beq.n	8002f0c <RTC_DateUpdate+0x5c>
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d008      	beq.n	8002f0c <RTC_DateUpdate+0x5c>
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d005      	beq.n	8002f0c <RTC_DateUpdate+0x5c>
       (month == 8) || (month == 10) || (month == 12))
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d002      	beq.n	8002f0c <RTC_DateUpdate+0x5c>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d117      	bne.n	8002f3c <RTC_DateUpdate+0x8c>
    {
      if(day < 31)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b1e      	cmp	r3, #30
 8002f10:	d803      	bhi.n	8002f1a <RTC_DateUpdate+0x6a>
      {
        day++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
      if(day < 31)
 8002f18:	e050      	b.n	8002fbc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if(month != 12)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d005      	beq.n	8002f2c <RTC_DateUpdate+0x7c>
        {
          month++;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	3301      	adds	r3, #1
 8002f24:	613b      	str	r3, [r7, #16]
          day = 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
      if(day < 31)
 8002f2a:	e047      	b.n	8002fbc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
          day = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
          year++;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3301      	adds	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
      if(day < 31)
 8002f3a:	e03f      	b.n	8002fbc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if((month == 4) || (month == 6) || (month == 9) || (month == 11))
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d008      	beq.n	8002f54 <RTC_DateUpdate+0xa4>
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d005      	beq.n	8002f54 <RTC_DateUpdate+0xa4>
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d002      	beq.n	8002f54 <RTC_DateUpdate+0xa4>
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b0b      	cmp	r3, #11
 8002f52:	d10c      	bne.n	8002f6e <RTC_DateUpdate+0xbe>
    {
      if(day < 30)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b1d      	cmp	r3, #29
 8002f58:	d803      	bhi.n	8002f62 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
      if(day < 30)
 8002f60:	e02c      	b.n	8002fbc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	3301      	adds	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
        day = 1;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
      if(day < 30)
 8002f6c:	e026      	b.n	8002fbc <RTC_DateUpdate+0x10c>
      }
    }
    else if(month == 2)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d123      	bne.n	8002fbc <RTC_DateUpdate+0x10c>
    {
      if(day < 28)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b1b      	cmp	r3, #27
 8002f78:	d803      	bhi.n	8002f82 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e01c      	b.n	8002fbc <RTC_DateUpdate+0x10c>
      }
      else if(day == 28)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b1c      	cmp	r3, #28
 8002f86:	d111      	bne.n	8002fac <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if(RTC_IsLeapYear(year))
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f839 	bl	8003004 <RTC_IsLeapYear>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e00d      	b.n	8002fbc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	613b      	str	r3, [r7, #16]
          day = 1;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e007      	b.n	8002fbc <RTC_DateUpdate+0x10c>
        }
      }
      else if(day == 29)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b1d      	cmp	r3, #29
 8002fb0:	d104      	bne.n	8002fbc <RTC_DateUpdate+0x10c>
      {
        month++;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
        day = 1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
  for (loop = 0; loop < DayElapsed; loop++)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d38b      	bcc.n	8002ee2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	6978      	ldr	r0, [r7, #20]
 8002fee:	f000 f83b 	bl	8003068 <RTC_WeekDayNum>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	731a      	strb	r2, [r3, #12]
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
  if((nYear % 4) != 0) 
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <RTC_IsLeapYear+0x1a>
  {
    return 0;
 800301a:	2300      	movs	r3, #0
 800301c:	e01d      	b.n	800305a <RTC_IsLeapYear+0x56>
  }
  
  if((nYear % 100) != 0) 
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4a10      	ldr	r2, [pc, #64]	; (8003064 <RTC_IsLeapYear+0x60>)
 8003022:	fba2 1203 	umull	r1, r2, r2, r3
 8003026:	0952      	lsrs	r2, r2, #5
 8003028:	2164      	movs	r1, #100	; 0x64
 800302a:	fb01 f202 	mul.w	r2, r1, r2
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <RTC_IsLeapYear+0x36>
  {
    return 1;
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <RTC_IsLeapYear+0x56>
  }
  
  if((nYear % 400) == 0)
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <RTC_IsLeapYear+0x60>)
 800303e:	fba2 1203 	umull	r1, r2, r2, r3
 8003042:	09d2      	lsrs	r2, r2, #7
 8003044:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003048:	fb01 f202 	mul.w	r2, r1, r2
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <RTC_IsLeapYear+0x54>
  {
    return 1;
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0;
 8003058:	2300      	movs	r3, #0
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	51eb851f 	.word	0x51eb851f

08003068 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
 8003074:	4613      	mov	r3, r2
 8003076:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0, weekday = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]

  year = 2000 + nYear;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003086:	60bb      	str	r3, [r7, #8]
  
  if(nMonth < 3)
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d830      	bhi.n	80030f0 <RTC_WeekDayNum+0x88>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <RTC_WeekDayNum+0xf0>)
 800309c:	fb82 1203 	smull	r1, r2, r2, r3
 80030a0:	1052      	asrs	r2, r2, #1
 80030a2:	17db      	asrs	r3, r3, #31
 80030a4:	1ad2      	subs	r2, r2, r3
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	4413      	add	r3, r2
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	441a      	add	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	441a      	add	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	4927      	ldr	r1, [pc, #156]	; (800315c <RTC_WeekDayNum+0xf4>)
 80030be:	fba1 1303 	umull	r1, r3, r1, r3
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	1ad2      	subs	r2, r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	4924      	ldr	r1, [pc, #144]	; (800315c <RTC_WeekDayNum+0xf4>)
 80030cc:	fba1 1303 	umull	r1, r3, r1, r3
 80030d0:	09db      	lsrs	r3, r3, #7
 80030d2:	4413      	add	r3, r2
 80030d4:	1d1a      	adds	r2, r3, #4
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <RTC_WeekDayNum+0xf8>)
 80030d8:	fba3 1302 	umull	r1, r3, r3, r2
 80030dc:	1ad1      	subs	r1, r2, r3
 80030de:	0849      	lsrs	r1, r1, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	0899      	lsrs	r1, r3, #2
 80030e4:	460b      	mov	r3, r1
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a5b      	subs	r3, r3, r1
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e02c      	b.n	800314a <RTC_WeekDayNum+0xe2>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <RTC_WeekDayNum+0xf0>)
 80030fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003102:	1052      	asrs	r2, r2, #1
 8003104:	17db      	asrs	r3, r3, #31
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	78bb      	ldrb	r3, [r7, #2]
 800310a:	4413      	add	r3, r2
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	441a      	add	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4910      	ldr	r1, [pc, #64]	; (800315c <RTC_WeekDayNum+0xf4>)
 800311c:	fba1 1303 	umull	r1, r3, r1, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	490d      	ldr	r1, [pc, #52]	; (800315c <RTC_WeekDayNum+0xf4>)
 8003128:	fba1 1303 	umull	r1, r3, r1, r3
 800312c:	09db      	lsrs	r3, r3, #7
 800312e:	4413      	add	r3, r2
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <RTC_WeekDayNum+0xf8>)
 8003134:	fba3 1302 	umull	r1, r3, r3, r2
 8003138:	1ad1      	subs	r1, r2, r3
 800313a:	0849      	lsrs	r1, r1, #1
 800313c:	440b      	add	r3, r1
 800313e:	0899      	lsrs	r1, r3, #2
 8003140:	460b      	mov	r3, r1
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a5b      	subs	r3, r3, r1
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	b2db      	uxtb	r3, r3
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	38e38e39 	.word	0x38e38e39
 800315c:	51eb851f 	.word	0x51eb851f
 8003160:	24924925 	.word	0x24924925

08003164 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e03b      	b.n	80031ee <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fa8a 	bl	80006a4 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f967 	bl	800347c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031cc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003210:	b2db      	uxtb	r3, r3
 8003212:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d003      	beq.n	8003222 <HAL_UART_Transmit+0x2c>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b22      	cmp	r3, #34	; 0x22
 800321e:	f040 808e 	bne.w	800333e <HAL_UART_Transmit+0x148>
  {
    if((pData == NULL) || (Size == 0))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Transmit+0x38>
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e086      	b.n	8003340 <HAL_UART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_UART_Transmit+0x4a>
 800323c:	2302      	movs	r3, #2
 800323e:	e07f      	b.n	8003340 <HAL_UART_Transmit+0x14a>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b22      	cmp	r3, #34	; 0x22
 8003258:	d104      	bne.n	8003264 <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2232      	movs	r2, #50	; 0x32
 800325e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003262:	e003      	b.n	800326c <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2212      	movs	r2, #18
 8003268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8003278:	e03d      	b.n	80032f6 <HAL_UART_Transmit+0x100>
    {
      huart->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328e:	d120      	bne.n	80032d2 <HAL_UART_Transmit+0xdc>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	2180      	movs	r1, #128	; 0x80
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f856 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e04c      	b.n	8003340 <HAL_UART_Transmit+0x14a>
        }
        tmp = (uint16_t*) pData;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_UART_Transmit+0xd4>
        {
          pData +=2;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3302      	adds	r3, #2
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	e015      	b.n	80032f6 <HAL_UART_Transmit+0x100>
        }
        else
        { 
          pData +=1;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	e011      	b.n	80032f6 <HAL_UART_Transmit+0x100>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f835 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0xf2>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e02b      	b.n	8003340 <HAL_UART_Transmit+0x14a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	60ba      	str	r2, [r7, #8]
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1bd      	bne.n	800327a <HAL_UART_Transmit+0x84>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2200      	movs	r2, #0
 8003302:	2140      	movs	r1, #64	; 0x40
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f81f 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_Transmit+0x11e>
    { 
      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e015      	b.n	8003340 <HAL_UART_Transmit+0x14a>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b32      	cmp	r3, #50	; 0x32
 800331e:	d104      	bne.n	800332a <HAL_UART_Transmit+0x134>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2222      	movs	r2, #34	; 0x22
 8003324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003328:	e003      	b.n	8003332 <HAL_UART_Transmit+0x13c>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800335c:	f7fd fa54 	bl	8000808 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d17b      	bne.n	8003460 <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003368:	e038      	b.n	80033dc <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d034      	beq.n	80033dc <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0x40>
 8003378:	f7fd fa46 	bl	8000808 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d229      	bcs.n	80033dc <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003396:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0220 	bic.w	r2, r2, #32
 80033a6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e04a      	b.n	8003472 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1be      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0x22>
 80033ec:	e040      	b.n	8003470 <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d034      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <UART_WaitOnFlagUntilTimeout+0xc4>
 80033fc:	f7fd fa04 	bl	8000808 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d229      	bcs.n	8003460 <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341a:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0220 	bic.w	r2, r2, #32
 800342a:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343a:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e008      	b.n	8003472 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d0be      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0xa6>
        }
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034ba:	f023 030c 	bic.w	r3, r3, #12
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	68f9      	ldr	r1, [r7, #12]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a44      	ldr	r2, [pc, #272]	; (80035f4 <UART_SetConfig+0x178>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d140      	bne.n	800356a <UART_SetConfig+0xee>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80034e8:	f7fe fe7a 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009a      	lsls	r2, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	4a3d      	ldr	r2, [pc, #244]	; (80035f8 <UART_SetConfig+0x17c>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	011c      	lsls	r4, r3, #4
 800350c:	f7fe fe68 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8003510:	4602      	mov	r2, r0
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	009a      	lsls	r2, r3, #2
 800351a:	441a      	add	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	fbb2 f5f3 	udiv	r5, r2, r3
 8003526:	f7fe fe5b 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 800352a:	4602      	mov	r2, r0
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009a      	lsls	r2, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <UART_SetConfig+0x17c>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2264      	movs	r2, #100	; 0x64
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	1aeb      	subs	r3, r5, r3
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	3332      	adds	r3, #50	; 0x32
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <UART_SetConfig+0x17c>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4322      	orrs	r2, r4
 8003566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8003568:	e03f      	b.n	80035ea <UART_SetConfig+0x16e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800356a:	f7fe fe17 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 800356e:	4602      	mov	r2, r0
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009a      	lsls	r2, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <UART_SetConfig+0x17c>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	011c      	lsls	r4, r3, #4
 800358e:	f7fe fe05 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8003592:	4602      	mov	r2, r0
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009a      	lsls	r2, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80035a8:	f7fe fdf8 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009a      	lsls	r2, r3, #2
 80035b6:	441a      	add	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <UART_SetConfig+0x17c>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	2264      	movs	r2, #100	; 0x64
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	1aeb      	subs	r3, r5, r3
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	3332      	adds	r3, #50	; 0x32
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <UART_SetConfig+0x17c>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4322      	orrs	r2, r4
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bdb0      	pop	{r4, r5, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40013800 	.word	0x40013800
 80035f8:	51eb851f 	.word	0x51eb851f

080035fc <__errno>:
 80035fc:	4b01      	ldr	r3, [pc, #4]	; (8003604 <__errno+0x8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000004 	.word	0x20000004

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	2500      	movs	r5, #0
 800360c:	4e0c      	ldr	r6, [pc, #48]	; (8003640 <__libc_init_array+0x38>)
 800360e:	4c0d      	ldr	r4, [pc, #52]	; (8003644 <__libc_init_array+0x3c>)
 8003610:	1ba4      	subs	r4, r4, r6
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	42a5      	cmp	r5, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	f000 ff74 	bl	8004504 <_init>
 800361c:	2500      	movs	r5, #0
 800361e:	4e0a      	ldr	r6, [pc, #40]	; (8003648 <__libc_init_array+0x40>)
 8003620:	4c0a      	ldr	r4, [pc, #40]	; (800364c <__libc_init_array+0x44>)
 8003622:	1ba4      	subs	r4, r4, r6
 8003624:	10a4      	asrs	r4, r4, #2
 8003626:	42a5      	cmp	r5, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003630:	4798      	blx	r3
 8003632:	3501      	adds	r5, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800363a:	4798      	blx	r3
 800363c:	3501      	adds	r5, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	08004618 	.word	0x08004618
 8003644:	08004618 	.word	0x08004618
 8003648:	08004618 	.word	0x08004618
 800364c:	0800461c 	.word	0x0800461c

08003650 <memset>:
 8003650:	4603      	mov	r3, r0
 8003652:	4402      	add	r2, r0
 8003654:	4293      	cmp	r3, r2
 8003656:	d100      	bne.n	800365a <memset+0xa>
 8003658:	4770      	bx	lr
 800365a:	f803 1b01 	strb.w	r1, [r3], #1
 800365e:	e7f9      	b.n	8003654 <memset+0x4>

08003660 <iprintf>:
 8003660:	b40f      	push	{r0, r1, r2, r3}
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <iprintf+0x2c>)
 8003664:	b513      	push	{r0, r1, r4, lr}
 8003666:	681c      	ldr	r4, [r3, #0]
 8003668:	b124      	cbz	r4, 8003674 <iprintf+0x14>
 800366a:	69a3      	ldr	r3, [r4, #24]
 800366c:	b913      	cbnz	r3, 8003674 <iprintf+0x14>
 800366e:	4620      	mov	r0, r4
 8003670:	f000 fa22 	bl	8003ab8 <__sinit>
 8003674:	ab05      	add	r3, sp, #20
 8003676:	9a04      	ldr	r2, [sp, #16]
 8003678:	68a1      	ldr	r1, [r4, #8]
 800367a:	4620      	mov	r0, r4
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	f000 fbd7 	bl	8003e30 <_vfiprintf_r>
 8003682:	b002      	add	sp, #8
 8003684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003688:	b004      	add	sp, #16
 800368a:	4770      	bx	lr
 800368c:	20000004 	.word	0x20000004

08003690 <_puts_r>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	460e      	mov	r6, r1
 8003694:	4605      	mov	r5, r0
 8003696:	b118      	cbz	r0, 80036a0 <_puts_r+0x10>
 8003698:	6983      	ldr	r3, [r0, #24]
 800369a:	b90b      	cbnz	r3, 80036a0 <_puts_r+0x10>
 800369c:	f000 fa0c 	bl	8003ab8 <__sinit>
 80036a0:	69ab      	ldr	r3, [r5, #24]
 80036a2:	68ac      	ldr	r4, [r5, #8]
 80036a4:	b913      	cbnz	r3, 80036ac <_puts_r+0x1c>
 80036a6:	4628      	mov	r0, r5
 80036a8:	f000 fa06 	bl	8003ab8 <__sinit>
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <_puts_r+0xac>)
 80036ae:	429c      	cmp	r4, r3
 80036b0:	d117      	bne.n	80036e2 <_puts_r+0x52>
 80036b2:	686c      	ldr	r4, [r5, #4]
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	071b      	lsls	r3, r3, #28
 80036b8:	d51d      	bpl.n	80036f6 <_puts_r+0x66>
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	b1db      	cbz	r3, 80036f6 <_puts_r+0x66>
 80036be:	3e01      	subs	r6, #1
 80036c0:	68a3      	ldr	r3, [r4, #8]
 80036c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60a3      	str	r3, [r4, #8]
 80036ca:	b9e9      	cbnz	r1, 8003708 <_puts_r+0x78>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da2e      	bge.n	800372e <_puts_r+0x9e>
 80036d0:	4622      	mov	r2, r4
 80036d2:	210a      	movs	r1, #10
 80036d4:	4628      	mov	r0, r5
 80036d6:	f000 f83f 	bl	8003758 <__swbuf_r>
 80036da:	3001      	adds	r0, #1
 80036dc:	d011      	beq.n	8003702 <_puts_r+0x72>
 80036de:	200a      	movs	r0, #10
 80036e0:	e011      	b.n	8003706 <_puts_r+0x76>
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <_puts_r+0xb0>)
 80036e4:	429c      	cmp	r4, r3
 80036e6:	d101      	bne.n	80036ec <_puts_r+0x5c>
 80036e8:	68ac      	ldr	r4, [r5, #8]
 80036ea:	e7e3      	b.n	80036b4 <_puts_r+0x24>
 80036ec:	4b15      	ldr	r3, [pc, #84]	; (8003744 <_puts_r+0xb4>)
 80036ee:	429c      	cmp	r4, r3
 80036f0:	bf08      	it	eq
 80036f2:	68ec      	ldreq	r4, [r5, #12]
 80036f4:	e7de      	b.n	80036b4 <_puts_r+0x24>
 80036f6:	4621      	mov	r1, r4
 80036f8:	4628      	mov	r0, r5
 80036fa:	f000 f87f 	bl	80037fc <__swsetup_r>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d0dd      	beq.n	80036be <_puts_r+0x2e>
 8003702:	f04f 30ff 	mov.w	r0, #4294967295
 8003706:	bd70      	pop	{r4, r5, r6, pc}
 8003708:	2b00      	cmp	r3, #0
 800370a:	da04      	bge.n	8003716 <_puts_r+0x86>
 800370c:	69a2      	ldr	r2, [r4, #24]
 800370e:	429a      	cmp	r2, r3
 8003710:	dc06      	bgt.n	8003720 <_puts_r+0x90>
 8003712:	290a      	cmp	r1, #10
 8003714:	d004      	beq.n	8003720 <_puts_r+0x90>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	6022      	str	r2, [r4, #0]
 800371c:	7019      	strb	r1, [r3, #0]
 800371e:	e7cf      	b.n	80036c0 <_puts_r+0x30>
 8003720:	4622      	mov	r2, r4
 8003722:	4628      	mov	r0, r5
 8003724:	f000 f818 	bl	8003758 <__swbuf_r>
 8003728:	3001      	adds	r0, #1
 800372a:	d1c9      	bne.n	80036c0 <_puts_r+0x30>
 800372c:	e7e9      	b.n	8003702 <_puts_r+0x72>
 800372e:	200a      	movs	r0, #10
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	6022      	str	r2, [r4, #0]
 8003736:	7018      	strb	r0, [r3, #0]
 8003738:	e7e5      	b.n	8003706 <_puts_r+0x76>
 800373a:	bf00      	nop
 800373c:	080045a4 	.word	0x080045a4
 8003740:	080045c4 	.word	0x080045c4
 8003744:	08004584 	.word	0x08004584

08003748 <puts>:
 8003748:	4b02      	ldr	r3, [pc, #8]	; (8003754 <puts+0xc>)
 800374a:	4601      	mov	r1, r0
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	f7ff bf9f 	b.w	8003690 <_puts_r>
 8003752:	bf00      	nop
 8003754:	20000004 	.word	0x20000004

08003758 <__swbuf_r>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	460e      	mov	r6, r1
 800375c:	4614      	mov	r4, r2
 800375e:	4605      	mov	r5, r0
 8003760:	b118      	cbz	r0, 800376a <__swbuf_r+0x12>
 8003762:	6983      	ldr	r3, [r0, #24]
 8003764:	b90b      	cbnz	r3, 800376a <__swbuf_r+0x12>
 8003766:	f000 f9a7 	bl	8003ab8 <__sinit>
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <__swbuf_r+0x98>)
 800376c:	429c      	cmp	r4, r3
 800376e:	d12a      	bne.n	80037c6 <__swbuf_r+0x6e>
 8003770:	686c      	ldr	r4, [r5, #4]
 8003772:	69a3      	ldr	r3, [r4, #24]
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	071a      	lsls	r2, r3, #28
 800377a:	d52e      	bpl.n	80037da <__swbuf_r+0x82>
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	b363      	cbz	r3, 80037da <__swbuf_r+0x82>
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	b2f6      	uxtb	r6, r6
 8003786:	1ac0      	subs	r0, r0, r3
 8003788:	6963      	ldr	r3, [r4, #20]
 800378a:	4637      	mov	r7, r6
 800378c:	4283      	cmp	r3, r0
 800378e:	dc04      	bgt.n	800379a <__swbuf_r+0x42>
 8003790:	4621      	mov	r1, r4
 8003792:	4628      	mov	r0, r5
 8003794:	f000 f926 	bl	80039e4 <_fflush_r>
 8003798:	bb28      	cbnz	r0, 80037e6 <__swbuf_r+0x8e>
 800379a:	68a3      	ldr	r3, [r4, #8]
 800379c:	3001      	adds	r0, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	60a3      	str	r3, [r4, #8]
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	6022      	str	r2, [r4, #0]
 80037a8:	701e      	strb	r6, [r3, #0]
 80037aa:	6963      	ldr	r3, [r4, #20]
 80037ac:	4283      	cmp	r3, r0
 80037ae:	d004      	beq.n	80037ba <__swbuf_r+0x62>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	07db      	lsls	r3, r3, #31
 80037b4:	d519      	bpl.n	80037ea <__swbuf_r+0x92>
 80037b6:	2e0a      	cmp	r6, #10
 80037b8:	d117      	bne.n	80037ea <__swbuf_r+0x92>
 80037ba:	4621      	mov	r1, r4
 80037bc:	4628      	mov	r0, r5
 80037be:	f000 f911 	bl	80039e4 <_fflush_r>
 80037c2:	b190      	cbz	r0, 80037ea <__swbuf_r+0x92>
 80037c4:	e00f      	b.n	80037e6 <__swbuf_r+0x8e>
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <__swbuf_r+0x9c>)
 80037c8:	429c      	cmp	r4, r3
 80037ca:	d101      	bne.n	80037d0 <__swbuf_r+0x78>
 80037cc:	68ac      	ldr	r4, [r5, #8]
 80037ce:	e7d0      	b.n	8003772 <__swbuf_r+0x1a>
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <__swbuf_r+0xa0>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	bf08      	it	eq
 80037d6:	68ec      	ldreq	r4, [r5, #12]
 80037d8:	e7cb      	b.n	8003772 <__swbuf_r+0x1a>
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 f80d 	bl	80037fc <__swsetup_r>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d0cc      	beq.n	8003780 <__swbuf_r+0x28>
 80037e6:	f04f 37ff 	mov.w	r7, #4294967295
 80037ea:	4638      	mov	r0, r7
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ee:	bf00      	nop
 80037f0:	080045a4 	.word	0x080045a4
 80037f4:	080045c4 	.word	0x080045c4
 80037f8:	08004584 	.word	0x08004584

080037fc <__swsetup_r>:
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <__swsetup_r+0xcc>)
 80037fe:	b570      	push	{r4, r5, r6, lr}
 8003800:	681d      	ldr	r5, [r3, #0]
 8003802:	4606      	mov	r6, r0
 8003804:	460c      	mov	r4, r1
 8003806:	b125      	cbz	r5, 8003812 <__swsetup_r+0x16>
 8003808:	69ab      	ldr	r3, [r5, #24]
 800380a:	b913      	cbnz	r3, 8003812 <__swsetup_r+0x16>
 800380c:	4628      	mov	r0, r5
 800380e:	f000 f953 	bl	8003ab8 <__sinit>
 8003812:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <__swsetup_r+0xd0>)
 8003814:	429c      	cmp	r4, r3
 8003816:	d10f      	bne.n	8003838 <__swsetup_r+0x3c>
 8003818:	686c      	ldr	r4, [r5, #4]
 800381a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800381e:	b29a      	uxth	r2, r3
 8003820:	0715      	lsls	r5, r2, #28
 8003822:	d42c      	bmi.n	800387e <__swsetup_r+0x82>
 8003824:	06d0      	lsls	r0, r2, #27
 8003826:	d411      	bmi.n	800384c <__swsetup_r+0x50>
 8003828:	2209      	movs	r2, #9
 800382a:	6032      	str	r2, [r6, #0]
 800382c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003830:	81a3      	strh	r3, [r4, #12]
 8003832:	f04f 30ff 	mov.w	r0, #4294967295
 8003836:	e03e      	b.n	80038b6 <__swsetup_r+0xba>
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <__swsetup_r+0xd4>)
 800383a:	429c      	cmp	r4, r3
 800383c:	d101      	bne.n	8003842 <__swsetup_r+0x46>
 800383e:	68ac      	ldr	r4, [r5, #8]
 8003840:	e7eb      	b.n	800381a <__swsetup_r+0x1e>
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <__swsetup_r+0xd8>)
 8003844:	429c      	cmp	r4, r3
 8003846:	bf08      	it	eq
 8003848:	68ec      	ldreq	r4, [r5, #12]
 800384a:	e7e6      	b.n	800381a <__swsetup_r+0x1e>
 800384c:	0751      	lsls	r1, r2, #29
 800384e:	d512      	bpl.n	8003876 <__swsetup_r+0x7a>
 8003850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003852:	b141      	cbz	r1, 8003866 <__swsetup_r+0x6a>
 8003854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003858:	4299      	cmp	r1, r3
 800385a:	d002      	beq.n	8003862 <__swsetup_r+0x66>
 800385c:	4630      	mov	r0, r6
 800385e:	f000 fa19 	bl	8003c94 <_free_r>
 8003862:	2300      	movs	r3, #0
 8003864:	6363      	str	r3, [r4, #52]	; 0x34
 8003866:	89a3      	ldrh	r3, [r4, #12]
 8003868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800386c:	81a3      	strh	r3, [r4, #12]
 800386e:	2300      	movs	r3, #0
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	b94b      	cbnz	r3, 8003896 <__swsetup_r+0x9a>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d003      	beq.n	8003896 <__swsetup_r+0x9a>
 800388e:	4621      	mov	r1, r4
 8003890:	4630      	mov	r0, r6
 8003892:	f000 f9bf 	bl	8003c14 <__smakebuf_r>
 8003896:	89a2      	ldrh	r2, [r4, #12]
 8003898:	f012 0301 	ands.w	r3, r2, #1
 800389c:	d00c      	beq.n	80038b8 <__swsetup_r+0xbc>
 800389e:	2300      	movs	r3, #0
 80038a0:	60a3      	str	r3, [r4, #8]
 80038a2:	6963      	ldr	r3, [r4, #20]
 80038a4:	425b      	negs	r3, r3
 80038a6:	61a3      	str	r3, [r4, #24]
 80038a8:	6923      	ldr	r3, [r4, #16]
 80038aa:	b953      	cbnz	r3, 80038c2 <__swsetup_r+0xc6>
 80038ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80038b4:	d1ba      	bne.n	800382c <__swsetup_r+0x30>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	0792      	lsls	r2, r2, #30
 80038ba:	bf58      	it	pl
 80038bc:	6963      	ldrpl	r3, [r4, #20]
 80038be:	60a3      	str	r3, [r4, #8]
 80038c0:	e7f2      	b.n	80038a8 <__swsetup_r+0xac>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e7f7      	b.n	80038b6 <__swsetup_r+0xba>
 80038c6:	bf00      	nop
 80038c8:	20000004 	.word	0x20000004
 80038cc:	080045a4 	.word	0x080045a4
 80038d0:	080045c4 	.word	0x080045c4
 80038d4:	08004584 	.word	0x08004584

080038d8 <__sflush_r>:
 80038d8:	898a      	ldrh	r2, [r1, #12]
 80038da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038de:	4605      	mov	r5, r0
 80038e0:	0710      	lsls	r0, r2, #28
 80038e2:	460c      	mov	r4, r1
 80038e4:	d458      	bmi.n	8003998 <__sflush_r+0xc0>
 80038e6:	684b      	ldr	r3, [r1, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	dc05      	bgt.n	80038f8 <__sflush_r+0x20>
 80038ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dc02      	bgt.n	80038f8 <__sflush_r+0x20>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038fa:	2e00      	cmp	r6, #0
 80038fc:	d0f9      	beq.n	80038f2 <__sflush_r+0x1a>
 80038fe:	2300      	movs	r3, #0
 8003900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003904:	682f      	ldr	r7, [r5, #0]
 8003906:	6a21      	ldr	r1, [r4, #32]
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	d032      	beq.n	8003972 <__sflush_r+0x9a>
 800390c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	075a      	lsls	r2, r3, #29
 8003912:	d505      	bpl.n	8003920 <__sflush_r+0x48>
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	1ac0      	subs	r0, r0, r3
 8003918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800391a:	b10b      	cbz	r3, 8003920 <__sflush_r+0x48>
 800391c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800391e:	1ac0      	subs	r0, r0, r3
 8003920:	2300      	movs	r3, #0
 8003922:	4602      	mov	r2, r0
 8003924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003926:	6a21      	ldr	r1, [r4, #32]
 8003928:	4628      	mov	r0, r5
 800392a:	47b0      	blx	r6
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	d106      	bne.n	8003940 <__sflush_r+0x68>
 8003932:	6829      	ldr	r1, [r5, #0]
 8003934:	291d      	cmp	r1, #29
 8003936:	d848      	bhi.n	80039ca <__sflush_r+0xf2>
 8003938:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <__sflush_r+0x108>)
 800393a:	40ca      	lsrs	r2, r1
 800393c:	07d6      	lsls	r6, r2, #31
 800393e:	d544      	bpl.n	80039ca <__sflush_r+0xf2>
 8003940:	2200      	movs	r2, #0
 8003942:	6062      	str	r2, [r4, #4]
 8003944:	6922      	ldr	r2, [r4, #16]
 8003946:	04d9      	lsls	r1, r3, #19
 8003948:	6022      	str	r2, [r4, #0]
 800394a:	d504      	bpl.n	8003956 <__sflush_r+0x7e>
 800394c:	1c42      	adds	r2, r0, #1
 800394e:	d101      	bne.n	8003954 <__sflush_r+0x7c>
 8003950:	682b      	ldr	r3, [r5, #0]
 8003952:	b903      	cbnz	r3, 8003956 <__sflush_r+0x7e>
 8003954:	6560      	str	r0, [r4, #84]	; 0x54
 8003956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003958:	602f      	str	r7, [r5, #0]
 800395a:	2900      	cmp	r1, #0
 800395c:	d0c9      	beq.n	80038f2 <__sflush_r+0x1a>
 800395e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003962:	4299      	cmp	r1, r3
 8003964:	d002      	beq.n	800396c <__sflush_r+0x94>
 8003966:	4628      	mov	r0, r5
 8003968:	f000 f994 	bl	8003c94 <_free_r>
 800396c:	2000      	movs	r0, #0
 800396e:	6360      	str	r0, [r4, #52]	; 0x34
 8003970:	e7c0      	b.n	80038f4 <__sflush_r+0x1c>
 8003972:	2301      	movs	r3, #1
 8003974:	4628      	mov	r0, r5
 8003976:	47b0      	blx	r6
 8003978:	1c41      	adds	r1, r0, #1
 800397a:	d1c8      	bne.n	800390e <__sflush_r+0x36>
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0c5      	beq.n	800390e <__sflush_r+0x36>
 8003982:	2b1d      	cmp	r3, #29
 8003984:	d001      	beq.n	800398a <__sflush_r+0xb2>
 8003986:	2b16      	cmp	r3, #22
 8003988:	d101      	bne.n	800398e <__sflush_r+0xb6>
 800398a:	602f      	str	r7, [r5, #0]
 800398c:	e7b1      	b.n	80038f2 <__sflush_r+0x1a>
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003994:	81a3      	strh	r3, [r4, #12]
 8003996:	e7ad      	b.n	80038f4 <__sflush_r+0x1c>
 8003998:	690f      	ldr	r7, [r1, #16]
 800399a:	2f00      	cmp	r7, #0
 800399c:	d0a9      	beq.n	80038f2 <__sflush_r+0x1a>
 800399e:	0793      	lsls	r3, r2, #30
 80039a0:	bf18      	it	ne
 80039a2:	2300      	movne	r3, #0
 80039a4:	680e      	ldr	r6, [r1, #0]
 80039a6:	bf08      	it	eq
 80039a8:	694b      	ldreq	r3, [r1, #20]
 80039aa:	eba6 0807 	sub.w	r8, r6, r7
 80039ae:	600f      	str	r7, [r1, #0]
 80039b0:	608b      	str	r3, [r1, #8]
 80039b2:	f1b8 0f00 	cmp.w	r8, #0
 80039b6:	dd9c      	ble.n	80038f2 <__sflush_r+0x1a>
 80039b8:	4643      	mov	r3, r8
 80039ba:	463a      	mov	r2, r7
 80039bc:	6a21      	ldr	r1, [r4, #32]
 80039be:	4628      	mov	r0, r5
 80039c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039c2:	47b0      	blx	r6
 80039c4:	2800      	cmp	r0, #0
 80039c6:	dc06      	bgt.n	80039d6 <__sflush_r+0xfe>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	e78e      	b.n	80038f4 <__sflush_r+0x1c>
 80039d6:	4407      	add	r7, r0
 80039d8:	eba8 0800 	sub.w	r8, r8, r0
 80039dc:	e7e9      	b.n	80039b2 <__sflush_r+0xda>
 80039de:	bf00      	nop
 80039e0:	20400001 	.word	0x20400001

080039e4 <_fflush_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	690b      	ldr	r3, [r1, #16]
 80039e8:	4605      	mov	r5, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	b1db      	cbz	r3, 8003a26 <_fflush_r+0x42>
 80039ee:	b118      	cbz	r0, 80039f8 <_fflush_r+0x14>
 80039f0:	6983      	ldr	r3, [r0, #24]
 80039f2:	b90b      	cbnz	r3, 80039f8 <_fflush_r+0x14>
 80039f4:	f000 f860 	bl	8003ab8 <__sinit>
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <_fflush_r+0x48>)
 80039fa:	429c      	cmp	r4, r3
 80039fc:	d109      	bne.n	8003a12 <_fflush_r+0x2e>
 80039fe:	686c      	ldr	r4, [r5, #4]
 8003a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a04:	b17b      	cbz	r3, 8003a26 <_fflush_r+0x42>
 8003a06:	4621      	mov	r1, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a0e:	f7ff bf63 	b.w	80038d8 <__sflush_r>
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <_fflush_r+0x4c>)
 8003a14:	429c      	cmp	r4, r3
 8003a16:	d101      	bne.n	8003a1c <_fflush_r+0x38>
 8003a18:	68ac      	ldr	r4, [r5, #8]
 8003a1a:	e7f1      	b.n	8003a00 <_fflush_r+0x1c>
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <_fflush_r+0x50>)
 8003a1e:	429c      	cmp	r4, r3
 8003a20:	bf08      	it	eq
 8003a22:	68ec      	ldreq	r4, [r5, #12]
 8003a24:	e7ec      	b.n	8003a00 <_fflush_r+0x1c>
 8003a26:	2000      	movs	r0, #0
 8003a28:	bd38      	pop	{r3, r4, r5, pc}
 8003a2a:	bf00      	nop
 8003a2c:	080045a4 	.word	0x080045a4
 8003a30:	080045c4 	.word	0x080045c4
 8003a34:	08004584 	.word	0x08004584

08003a38 <std>:
 8003a38:	2300      	movs	r3, #0
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a42:	6083      	str	r3, [r0, #8]
 8003a44:	8181      	strh	r1, [r0, #12]
 8003a46:	6643      	str	r3, [r0, #100]	; 0x64
 8003a48:	81c2      	strh	r2, [r0, #14]
 8003a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a4e:	6183      	str	r3, [r0, #24]
 8003a50:	4619      	mov	r1, r3
 8003a52:	2208      	movs	r2, #8
 8003a54:	305c      	adds	r0, #92	; 0x5c
 8003a56:	f7ff fdfb 	bl	8003650 <memset>
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <std+0x38>)
 8003a5c:	6224      	str	r4, [r4, #32]
 8003a5e:	6263      	str	r3, [r4, #36]	; 0x24
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <std+0x3c>)
 8003a62:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <std+0x40>)
 8003a66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <std+0x44>)
 8003a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	bf00      	nop
 8003a70:	0800438d 	.word	0x0800438d
 8003a74:	080043af 	.word	0x080043af
 8003a78:	080043e7 	.word	0x080043e7
 8003a7c:	0800440b 	.word	0x0800440b

08003a80 <_cleanup_r>:
 8003a80:	4901      	ldr	r1, [pc, #4]	; (8003a88 <_cleanup_r+0x8>)
 8003a82:	f000 b885 	b.w	8003b90 <_fwalk_reent>
 8003a86:	bf00      	nop
 8003a88:	080039e5 	.word	0x080039e5

08003a8c <__sfmoreglue>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	2568      	movs	r5, #104	; 0x68
 8003a90:	1e4a      	subs	r2, r1, #1
 8003a92:	4355      	muls	r5, r2
 8003a94:	460e      	mov	r6, r1
 8003a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a9a:	f000 f947 	bl	8003d2c <_malloc_r>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	b140      	cbz	r0, 8003ab4 <__sfmoreglue+0x28>
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8003aa8:	300c      	adds	r0, #12
 8003aaa:	60a0      	str	r0, [r4, #8]
 8003aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ab0:	f7ff fdce 	bl	8003650 <memset>
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}

08003ab8 <__sinit>:
 8003ab8:	6983      	ldr	r3, [r0, #24]
 8003aba:	b510      	push	{r4, lr}
 8003abc:	4604      	mov	r4, r0
 8003abe:	bb33      	cbnz	r3, 8003b0e <__sinit+0x56>
 8003ac0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003ac4:	6503      	str	r3, [r0, #80]	; 0x50
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <__sinit+0x58>)
 8003ac8:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <__sinit+0x5c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6282      	str	r2, [r0, #40]	; 0x28
 8003ace:	4298      	cmp	r0, r3
 8003ad0:	bf04      	itt	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	6183      	streq	r3, [r0, #24]
 8003ad6:	f000 f81f 	bl	8003b18 <__sfp>
 8003ada:	6060      	str	r0, [r4, #4]
 8003adc:	4620      	mov	r0, r4
 8003ade:	f000 f81b 	bl	8003b18 <__sfp>
 8003ae2:	60a0      	str	r0, [r4, #8]
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 f817 	bl	8003b18 <__sfp>
 8003aea:	2200      	movs	r2, #0
 8003aec:	60e0      	str	r0, [r4, #12]
 8003aee:	2104      	movs	r1, #4
 8003af0:	6860      	ldr	r0, [r4, #4]
 8003af2:	f7ff ffa1 	bl	8003a38 <std>
 8003af6:	2201      	movs	r2, #1
 8003af8:	2109      	movs	r1, #9
 8003afa:	68a0      	ldr	r0, [r4, #8]
 8003afc:	f7ff ff9c 	bl	8003a38 <std>
 8003b00:	2202      	movs	r2, #2
 8003b02:	2112      	movs	r1, #18
 8003b04:	68e0      	ldr	r0, [r4, #12]
 8003b06:	f7ff ff97 	bl	8003a38 <std>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61a3      	str	r3, [r4, #24]
 8003b0e:	bd10      	pop	{r4, pc}
 8003b10:	08004580 	.word	0x08004580
 8003b14:	08003a81 	.word	0x08003a81

08003b18 <__sfp>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <__sfp+0x70>)
 8003b1c:	4607      	mov	r7, r0
 8003b1e:	681e      	ldr	r6, [r3, #0]
 8003b20:	69b3      	ldr	r3, [r6, #24]
 8003b22:	b913      	cbnz	r3, 8003b2a <__sfp+0x12>
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7ff ffc7 	bl	8003ab8 <__sinit>
 8003b2a:	3648      	adds	r6, #72	; 0x48
 8003b2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	d503      	bpl.n	8003b3c <__sfp+0x24>
 8003b34:	6833      	ldr	r3, [r6, #0]
 8003b36:	b133      	cbz	r3, 8003b46 <__sfp+0x2e>
 8003b38:	6836      	ldr	r6, [r6, #0]
 8003b3a:	e7f7      	b.n	8003b2c <__sfp+0x14>
 8003b3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b40:	b16d      	cbz	r5, 8003b5e <__sfp+0x46>
 8003b42:	3468      	adds	r4, #104	; 0x68
 8003b44:	e7f4      	b.n	8003b30 <__sfp+0x18>
 8003b46:	2104      	movs	r1, #4
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f7ff ff9f 	bl	8003a8c <__sfmoreglue>
 8003b4e:	6030      	str	r0, [r6, #0]
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d1f1      	bne.n	8003b38 <__sfp+0x20>
 8003b54:	230c      	movs	r3, #12
 8003b56:	4604      	mov	r4, r0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <__sfp+0x74>)
 8003b60:	6665      	str	r5, [r4, #100]	; 0x64
 8003b62:	e9c4 5500 	strd	r5, r5, [r4]
 8003b66:	60a5      	str	r5, [r4, #8]
 8003b68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003b6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003b70:	2208      	movs	r2, #8
 8003b72:	4629      	mov	r1, r5
 8003b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b78:	f7ff fd6a 	bl	8003650 <memset>
 8003b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b84:	e7e9      	b.n	8003b5a <__sfp+0x42>
 8003b86:	bf00      	nop
 8003b88:	08004580 	.word	0x08004580
 8003b8c:	ffff0001 	.word	0xffff0001

08003b90 <_fwalk_reent>:
 8003b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b94:	4680      	mov	r8, r0
 8003b96:	4689      	mov	r9, r1
 8003b98:	2600      	movs	r6, #0
 8003b9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b9e:	b914      	cbnz	r4, 8003ba6 <_fwalk_reent+0x16>
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ba6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003baa:	3f01      	subs	r7, #1
 8003bac:	d501      	bpl.n	8003bb2 <_fwalk_reent+0x22>
 8003bae:	6824      	ldr	r4, [r4, #0]
 8003bb0:	e7f5      	b.n	8003b9e <_fwalk_reent+0xe>
 8003bb2:	89ab      	ldrh	r3, [r5, #12]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d907      	bls.n	8003bc8 <_fwalk_reent+0x38>
 8003bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	d003      	beq.n	8003bc8 <_fwalk_reent+0x38>
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	47c8      	blx	r9
 8003bc6:	4306      	orrs	r6, r0
 8003bc8:	3568      	adds	r5, #104	; 0x68
 8003bca:	e7ee      	b.n	8003baa <_fwalk_reent+0x1a>

08003bcc <__swhatbuf_r>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	460e      	mov	r6, r1
 8003bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd4:	b096      	sub	sp, #88	; 0x58
 8003bd6:	2900      	cmp	r1, #0
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	da07      	bge.n	8003bee <__swhatbuf_r+0x22>
 8003bde:	2300      	movs	r3, #0
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	89b3      	ldrh	r3, [r6, #12]
 8003be4:	061a      	lsls	r2, r3, #24
 8003be6:	d410      	bmi.n	8003c0a <__swhatbuf_r+0x3e>
 8003be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bec:	e00e      	b.n	8003c0c <__swhatbuf_r+0x40>
 8003bee:	466a      	mov	r2, sp
 8003bf0:	f000 fc32 	bl	8004458 <_fstat_r>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	dbf2      	blt.n	8003bde <__swhatbuf_r+0x12>
 8003bf8:	9a01      	ldr	r2, [sp, #4]
 8003bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c02:	425a      	negs	r2, r3
 8003c04:	415a      	adcs	r2, r3
 8003c06:	602a      	str	r2, [r5, #0]
 8003c08:	e7ee      	b.n	8003be8 <__swhatbuf_r+0x1c>
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	6023      	str	r3, [r4, #0]
 8003c10:	b016      	add	sp, #88	; 0x58
 8003c12:	bd70      	pop	{r4, r5, r6, pc}

08003c14 <__smakebuf_r>:
 8003c14:	898b      	ldrh	r3, [r1, #12]
 8003c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c18:	079d      	lsls	r5, r3, #30
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	d507      	bpl.n	8003c30 <__smakebuf_r+0x1c>
 8003c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	6123      	str	r3, [r4, #16]
 8003c28:	2301      	movs	r3, #1
 8003c2a:	6163      	str	r3, [r4, #20]
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	ab01      	add	r3, sp, #4
 8003c32:	466a      	mov	r2, sp
 8003c34:	f7ff ffca 	bl	8003bcc <__swhatbuf_r>
 8003c38:	9900      	ldr	r1, [sp, #0]
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	f000 f875 	bl	8003d2c <_malloc_r>
 8003c42:	b948      	cbnz	r0, 8003c58 <__smakebuf_r+0x44>
 8003c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c48:	059a      	lsls	r2, r3, #22
 8003c4a:	d4ef      	bmi.n	8003c2c <__smakebuf_r+0x18>
 8003c4c:	f023 0303 	bic.w	r3, r3, #3
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	e7e3      	b.n	8003c20 <__smakebuf_r+0xc>
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <__smakebuf_r+0x7c>)
 8003c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	6020      	str	r0, [r4, #0]
 8003c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c64:	81a3      	strh	r3, [r4, #12]
 8003c66:	9b00      	ldr	r3, [sp, #0]
 8003c68:	6120      	str	r0, [r4, #16]
 8003c6a:	6163      	str	r3, [r4, #20]
 8003c6c:	9b01      	ldr	r3, [sp, #4]
 8003c6e:	b15b      	cbz	r3, 8003c88 <__smakebuf_r+0x74>
 8003c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c74:	4630      	mov	r0, r6
 8003c76:	f000 fc01 	bl	800447c <_isatty_r>
 8003c7a:	b128      	cbz	r0, 8003c88 <__smakebuf_r+0x74>
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	81a3      	strh	r3, [r4, #12]
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	431d      	orrs	r5, r3
 8003c8c:	81a5      	strh	r5, [r4, #12]
 8003c8e:	e7cd      	b.n	8003c2c <__smakebuf_r+0x18>
 8003c90:	08003a81 	.word	0x08003a81

08003c94 <_free_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d043      	beq.n	8003d24 <_free_r+0x90>
 8003c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca0:	1f0c      	subs	r4, r1, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	18e4      	addlt	r4, r4, r3
 8003ca8:	f000 fc18 	bl	80044dc <__malloc_lock>
 8003cac:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <_free_r+0x94>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	b933      	cbnz	r3, 8003cc2 <_free_r+0x2e>
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	6014      	str	r4, [r2, #0]
 8003cb8:	4628      	mov	r0, r5
 8003cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cbe:	f000 bc0e 	b.w	80044de <__malloc_unlock>
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	d90b      	bls.n	8003cde <_free_r+0x4a>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	1862      	adds	r2, r4, r1
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bf01      	itttt	eq
 8003cce:	681a      	ldreq	r2, [r3, #0]
 8003cd0:	685b      	ldreq	r3, [r3, #4]
 8003cd2:	1852      	addeq	r2, r2, r1
 8003cd4:	6022      	streq	r2, [r4, #0]
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	6004      	str	r4, [r0, #0]
 8003cda:	e7ed      	b.n	8003cb8 <_free_r+0x24>
 8003cdc:	4613      	mov	r3, r2
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	b10a      	cbz	r2, 8003ce6 <_free_r+0x52>
 8003ce2:	42a2      	cmp	r2, r4
 8003ce4:	d9fa      	bls.n	8003cdc <_free_r+0x48>
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	1858      	adds	r0, r3, r1
 8003cea:	42a0      	cmp	r0, r4
 8003cec:	d10b      	bne.n	8003d06 <_free_r+0x72>
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	4401      	add	r1, r0
 8003cf2:	1858      	adds	r0, r3, r1
 8003cf4:	4282      	cmp	r2, r0
 8003cf6:	6019      	str	r1, [r3, #0]
 8003cf8:	d1de      	bne.n	8003cb8 <_free_r+0x24>
 8003cfa:	6810      	ldr	r0, [r2, #0]
 8003cfc:	6852      	ldr	r2, [r2, #4]
 8003cfe:	4401      	add	r1, r0
 8003d00:	6019      	str	r1, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	e7d8      	b.n	8003cb8 <_free_r+0x24>
 8003d06:	d902      	bls.n	8003d0e <_free_r+0x7a>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	e7d4      	b.n	8003cb8 <_free_r+0x24>
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	1821      	adds	r1, r4, r0
 8003d12:	428a      	cmp	r2, r1
 8003d14:	bf01      	itttt	eq
 8003d16:	6811      	ldreq	r1, [r2, #0]
 8003d18:	6852      	ldreq	r2, [r2, #4]
 8003d1a:	1809      	addeq	r1, r1, r0
 8003d1c:	6021      	streq	r1, [r4, #0]
 8003d1e:	6062      	str	r2, [r4, #4]
 8003d20:	605c      	str	r4, [r3, #4]
 8003d22:	e7c9      	b.n	8003cb8 <_free_r+0x24>
 8003d24:	bd38      	pop	{r3, r4, r5, pc}
 8003d26:	bf00      	nop
 8003d28:	2000008c 	.word	0x2000008c

08003d2c <_malloc_r>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	1ccd      	adds	r5, r1, #3
 8003d30:	f025 0503 	bic.w	r5, r5, #3
 8003d34:	3508      	adds	r5, #8
 8003d36:	2d0c      	cmp	r5, #12
 8003d38:	bf38      	it	cc
 8003d3a:	250c      	movcc	r5, #12
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	4606      	mov	r6, r0
 8003d40:	db01      	blt.n	8003d46 <_malloc_r+0x1a>
 8003d42:	42a9      	cmp	r1, r5
 8003d44:	d903      	bls.n	8003d4e <_malloc_r+0x22>
 8003d46:	230c      	movs	r3, #12
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
 8003d4e:	f000 fbc5 	bl	80044dc <__malloc_lock>
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <_malloc_r+0xac>)
 8003d54:	6814      	ldr	r4, [r2, #0]
 8003d56:	4621      	mov	r1, r4
 8003d58:	b991      	cbnz	r1, 8003d80 <_malloc_r+0x54>
 8003d5a:	4c20      	ldr	r4, [pc, #128]	; (8003ddc <_malloc_r+0xb0>)
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	b91b      	cbnz	r3, 8003d68 <_malloc_r+0x3c>
 8003d60:	4630      	mov	r0, r6
 8003d62:	f000 fb03 	bl	800436c <_sbrk_r>
 8003d66:	6020      	str	r0, [r4, #0]
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f000 fafe 	bl	800436c <_sbrk_r>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d124      	bne.n	8003dbe <_malloc_r+0x92>
 8003d74:	230c      	movs	r3, #12
 8003d76:	4630      	mov	r0, r6
 8003d78:	6033      	str	r3, [r6, #0]
 8003d7a:	f000 fbb0 	bl	80044de <__malloc_unlock>
 8003d7e:	e7e4      	b.n	8003d4a <_malloc_r+0x1e>
 8003d80:	680b      	ldr	r3, [r1, #0]
 8003d82:	1b5b      	subs	r3, r3, r5
 8003d84:	d418      	bmi.n	8003db8 <_malloc_r+0x8c>
 8003d86:	2b0b      	cmp	r3, #11
 8003d88:	d90f      	bls.n	8003daa <_malloc_r+0x7e>
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	18cc      	adds	r4, r1, r3
 8003d8e:	50cd      	str	r5, [r1, r3]
 8003d90:	4630      	mov	r0, r6
 8003d92:	f000 fba4 	bl	80044de <__malloc_unlock>
 8003d96:	f104 000b 	add.w	r0, r4, #11
 8003d9a:	1d23      	adds	r3, r4, #4
 8003d9c:	f020 0007 	bic.w	r0, r0, #7
 8003da0:	1ac3      	subs	r3, r0, r3
 8003da2:	d0d3      	beq.n	8003d4c <_malloc_r+0x20>
 8003da4:	425a      	negs	r2, r3
 8003da6:	50e2      	str	r2, [r4, r3]
 8003da8:	e7d0      	b.n	8003d4c <_malloc_r+0x20>
 8003daa:	684b      	ldr	r3, [r1, #4]
 8003dac:	428c      	cmp	r4, r1
 8003dae:	bf16      	itet	ne
 8003db0:	6063      	strne	r3, [r4, #4]
 8003db2:	6013      	streq	r3, [r2, #0]
 8003db4:	460c      	movne	r4, r1
 8003db6:	e7eb      	b.n	8003d90 <_malloc_r+0x64>
 8003db8:	460c      	mov	r4, r1
 8003dba:	6849      	ldr	r1, [r1, #4]
 8003dbc:	e7cc      	b.n	8003d58 <_malloc_r+0x2c>
 8003dbe:	1cc4      	adds	r4, r0, #3
 8003dc0:	f024 0403 	bic.w	r4, r4, #3
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d005      	beq.n	8003dd4 <_malloc_r+0xa8>
 8003dc8:	1a21      	subs	r1, r4, r0
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f000 face 	bl	800436c <_sbrk_r>
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d0cf      	beq.n	8003d74 <_malloc_r+0x48>
 8003dd4:	6025      	str	r5, [r4, #0]
 8003dd6:	e7db      	b.n	8003d90 <_malloc_r+0x64>
 8003dd8:	2000008c 	.word	0x2000008c
 8003ddc:	20000090 	.word	0x20000090

08003de0 <__sfputc_r>:
 8003de0:	6893      	ldr	r3, [r2, #8]
 8003de2:	b410      	push	{r4}
 8003de4:	3b01      	subs	r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	da07      	bge.n	8003dfc <__sfputc_r+0x1c>
 8003dec:	6994      	ldr	r4, [r2, #24]
 8003dee:	42a3      	cmp	r3, r4
 8003df0:	db01      	blt.n	8003df6 <__sfputc_r+0x16>
 8003df2:	290a      	cmp	r1, #10
 8003df4:	d102      	bne.n	8003dfc <__sfputc_r+0x1c>
 8003df6:	bc10      	pop	{r4}
 8003df8:	f7ff bcae 	b.w	8003758 <__swbuf_r>
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	1c58      	adds	r0, r3, #1
 8003e00:	6010      	str	r0, [r2, #0]
 8003e02:	7019      	strb	r1, [r3, #0]
 8003e04:	4608      	mov	r0, r1
 8003e06:	bc10      	pop	{r4}
 8003e08:	4770      	bx	lr

08003e0a <__sfputs_r>:
 8003e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	460f      	mov	r7, r1
 8003e10:	4614      	mov	r4, r2
 8003e12:	18d5      	adds	r5, r2, r3
 8003e14:	42ac      	cmp	r4, r5
 8003e16:	d101      	bne.n	8003e1c <__sfputs_r+0x12>
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e007      	b.n	8003e2c <__sfputs_r+0x22>
 8003e1c:	463a      	mov	r2, r7
 8003e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e22:	4630      	mov	r0, r6
 8003e24:	f7ff ffdc 	bl	8003de0 <__sfputc_r>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d1f3      	bne.n	8003e14 <__sfputs_r+0xa>
 8003e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e30 <_vfiprintf_r>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	460c      	mov	r4, r1
 8003e36:	b09d      	sub	sp, #116	; 0x74
 8003e38:	4617      	mov	r7, r2
 8003e3a:	461d      	mov	r5, r3
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	b118      	cbz	r0, 8003e48 <_vfiprintf_r+0x18>
 8003e40:	6983      	ldr	r3, [r0, #24]
 8003e42:	b90b      	cbnz	r3, 8003e48 <_vfiprintf_r+0x18>
 8003e44:	f7ff fe38 	bl	8003ab8 <__sinit>
 8003e48:	4b7c      	ldr	r3, [pc, #496]	; (800403c <_vfiprintf_r+0x20c>)
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d158      	bne.n	8003f00 <_vfiprintf_r+0xd0>
 8003e4e:	6874      	ldr	r4, [r6, #4]
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	0718      	lsls	r0, r3, #28
 8003e54:	d55e      	bpl.n	8003f14 <_vfiprintf_r+0xe4>
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05b      	beq.n	8003f14 <_vfiprintf_r+0xe4>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e60:	2320      	movs	r3, #32
 8003e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e66:	2330      	movs	r3, #48	; 0x30
 8003e68:	f04f 0b01 	mov.w	fp, #1
 8003e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e70:	9503      	str	r5, [sp, #12]
 8003e72:	46b8      	mov	r8, r7
 8003e74:	4645      	mov	r5, r8
 8003e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e7a:	b10b      	cbz	r3, 8003e80 <_vfiprintf_r+0x50>
 8003e7c:	2b25      	cmp	r3, #37	; 0x25
 8003e7e:	d154      	bne.n	8003f2a <_vfiprintf_r+0xfa>
 8003e80:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e84:	d00b      	beq.n	8003e9e <_vfiprintf_r+0x6e>
 8003e86:	4653      	mov	r3, sl
 8003e88:	463a      	mov	r2, r7
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f7ff ffbc 	bl	8003e0a <__sfputs_r>
 8003e92:	3001      	adds	r0, #1
 8003e94:	f000 80c2 	beq.w	800401c <_vfiprintf_r+0x1ec>
 8003e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9a:	4453      	add	r3, sl
 8003e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9e:	f898 3000 	ldrb.w	r3, [r8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80ba 	beq.w	800401c <_vfiprintf_r+0x1ec>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eb2:	9304      	str	r3, [sp, #16]
 8003eb4:	9307      	str	r3, [sp, #28]
 8003eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eba:	931a      	str	r3, [sp, #104]	; 0x68
 8003ebc:	46a8      	mov	r8, r5
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003ec4:	485e      	ldr	r0, [pc, #376]	; (8004040 <_vfiprintf_r+0x210>)
 8003ec6:	f000 fafb 	bl	80044c0 <memchr>
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	bb78      	cbnz	r0, 8003f2e <_vfiprintf_r+0xfe>
 8003ece:	06d9      	lsls	r1, r3, #27
 8003ed0:	bf44      	itt	mi
 8003ed2:	2220      	movmi	r2, #32
 8003ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ed8:	071a      	lsls	r2, r3, #28
 8003eda:	bf44      	itt	mi
 8003edc:	222b      	movmi	r2, #43	; 0x2b
 8003ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ee2:	782a      	ldrb	r2, [r5, #0]
 8003ee4:	2a2a      	cmp	r2, #42	; 0x2a
 8003ee6:	d02a      	beq.n	8003f3e <_vfiprintf_r+0x10e>
 8003ee8:	46a8      	mov	r8, r5
 8003eea:	2000      	movs	r0, #0
 8003eec:	250a      	movs	r5, #10
 8003eee:	9a07      	ldr	r2, [sp, #28]
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ef6:	3b30      	subs	r3, #48	; 0x30
 8003ef8:	2b09      	cmp	r3, #9
 8003efa:	d969      	bls.n	8003fd0 <_vfiprintf_r+0x1a0>
 8003efc:	b360      	cbz	r0, 8003f58 <_vfiprintf_r+0x128>
 8003efe:	e024      	b.n	8003f4a <_vfiprintf_r+0x11a>
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <_vfiprintf_r+0x214>)
 8003f02:	429c      	cmp	r4, r3
 8003f04:	d101      	bne.n	8003f0a <_vfiprintf_r+0xda>
 8003f06:	68b4      	ldr	r4, [r6, #8]
 8003f08:	e7a2      	b.n	8003e50 <_vfiprintf_r+0x20>
 8003f0a:	4b4f      	ldr	r3, [pc, #316]	; (8004048 <_vfiprintf_r+0x218>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	bf08      	it	eq
 8003f10:	68f4      	ldreq	r4, [r6, #12]
 8003f12:	e79d      	b.n	8003e50 <_vfiprintf_r+0x20>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4630      	mov	r0, r6
 8003f18:	f7ff fc70 	bl	80037fc <__swsetup_r>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d09d      	beq.n	8003e5c <_vfiprintf_r+0x2c>
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	b01d      	add	sp, #116	; 0x74
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2a:	46a8      	mov	r8, r5
 8003f2c:	e7a2      	b.n	8003e74 <_vfiprintf_r+0x44>
 8003f2e:	4a44      	ldr	r2, [pc, #272]	; (8004040 <_vfiprintf_r+0x210>)
 8003f30:	4645      	mov	r5, r8
 8003f32:	1a80      	subs	r0, r0, r2
 8003f34:	fa0b f000 	lsl.w	r0, fp, r0
 8003f38:	4318      	orrs	r0, r3
 8003f3a:	9004      	str	r0, [sp, #16]
 8003f3c:	e7be      	b.n	8003ebc <_vfiprintf_r+0x8c>
 8003f3e:	9a03      	ldr	r2, [sp, #12]
 8003f40:	1d11      	adds	r1, r2, #4
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	9103      	str	r1, [sp, #12]
 8003f46:	2a00      	cmp	r2, #0
 8003f48:	db01      	blt.n	8003f4e <_vfiprintf_r+0x11e>
 8003f4a:	9207      	str	r2, [sp, #28]
 8003f4c:	e004      	b.n	8003f58 <_vfiprintf_r+0x128>
 8003f4e:	4252      	negs	r2, r2
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	9207      	str	r2, [sp, #28]
 8003f56:	9304      	str	r3, [sp, #16]
 8003f58:	f898 3000 	ldrb.w	r3, [r8]
 8003f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f5e:	d10e      	bne.n	8003f7e <_vfiprintf_r+0x14e>
 8003f60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f64:	2b2a      	cmp	r3, #42	; 0x2a
 8003f66:	d138      	bne.n	8003fda <_vfiprintf_r+0x1aa>
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	f108 0802 	add.w	r8, r8, #2
 8003f6e:	1d1a      	adds	r2, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	9203      	str	r2, [sp, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bfb8      	it	lt
 8003f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	4d33      	ldr	r5, [pc, #204]	; (800404c <_vfiprintf_r+0x21c>)
 8003f80:	2203      	movs	r2, #3
 8003f82:	f898 1000 	ldrb.w	r1, [r8]
 8003f86:	4628      	mov	r0, r5
 8003f88:	f000 fa9a 	bl	80044c0 <memchr>
 8003f8c:	b140      	cbz	r0, 8003fa0 <_vfiprintf_r+0x170>
 8003f8e:	2340      	movs	r3, #64	; 0x40
 8003f90:	1b40      	subs	r0, r0, r5
 8003f92:	fa03 f000 	lsl.w	r0, r3, r0
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	f108 0801 	add.w	r8, r8, #1
 8003f9c:	4303      	orrs	r3, r0
 8003f9e:	9304      	str	r3, [sp, #16]
 8003fa0:	f898 1000 	ldrb.w	r1, [r8]
 8003fa4:	2206      	movs	r2, #6
 8003fa6:	482a      	ldr	r0, [pc, #168]	; (8004050 <_vfiprintf_r+0x220>)
 8003fa8:	f108 0701 	add.w	r7, r8, #1
 8003fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fb0:	f000 fa86 	bl	80044c0 <memchr>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d037      	beq.n	8004028 <_vfiprintf_r+0x1f8>
 8003fb8:	4b26      	ldr	r3, [pc, #152]	; (8004054 <_vfiprintf_r+0x224>)
 8003fba:	bb1b      	cbnz	r3, 8004004 <_vfiprintf_r+0x1d4>
 8003fbc:	9b03      	ldr	r3, [sp, #12]
 8003fbe:	3307      	adds	r3, #7
 8003fc0:	f023 0307 	bic.w	r3, r3, #7
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fca:	444b      	add	r3, r9
 8003fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fce:	e750      	b.n	8003e72 <_vfiprintf_r+0x42>
 8003fd0:	fb05 3202 	mla	r2, r5, r2, r3
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	4688      	mov	r8, r1
 8003fd8:	e78a      	b.n	8003ef0 <_vfiprintf_r+0xc0>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	250a      	movs	r5, #10
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f108 0801 	add.w	r8, r8, #1
 8003fe4:	9305      	str	r3, [sp, #20]
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fec:	3a30      	subs	r2, #48	; 0x30
 8003fee:	2a09      	cmp	r2, #9
 8003ff0:	d903      	bls.n	8003ffa <_vfiprintf_r+0x1ca>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0c3      	beq.n	8003f7e <_vfiprintf_r+0x14e>
 8003ff6:	9105      	str	r1, [sp, #20]
 8003ff8:	e7c1      	b.n	8003f7e <_vfiprintf_r+0x14e>
 8003ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8003ffe:	2301      	movs	r3, #1
 8004000:	4680      	mov	r8, r0
 8004002:	e7f0      	b.n	8003fe6 <_vfiprintf_r+0x1b6>
 8004004:	ab03      	add	r3, sp, #12
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4622      	mov	r2, r4
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <_vfiprintf_r+0x228>)
 800400c:	a904      	add	r1, sp, #16
 800400e:	4630      	mov	r0, r6
 8004010:	f3af 8000 	nop.w
 8004014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004018:	4681      	mov	r9, r0
 800401a:	d1d5      	bne.n	8003fc8 <_vfiprintf_r+0x198>
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	065b      	lsls	r3, r3, #25
 8004020:	f53f af7e 	bmi.w	8003f20 <_vfiprintf_r+0xf0>
 8004024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004026:	e77d      	b.n	8003f24 <_vfiprintf_r+0xf4>
 8004028:	ab03      	add	r3, sp, #12
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4622      	mov	r2, r4
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <_vfiprintf_r+0x228>)
 8004030:	a904      	add	r1, sp, #16
 8004032:	4630      	mov	r0, r6
 8004034:	f000 f888 	bl	8004148 <_printf_i>
 8004038:	e7ec      	b.n	8004014 <_vfiprintf_r+0x1e4>
 800403a:	bf00      	nop
 800403c:	080045a4 	.word	0x080045a4
 8004040:	080045e4 	.word	0x080045e4
 8004044:	080045c4 	.word	0x080045c4
 8004048:	08004584 	.word	0x08004584
 800404c:	080045ea 	.word	0x080045ea
 8004050:	080045ee 	.word	0x080045ee
 8004054:	00000000 	.word	0x00000000
 8004058:	08003e0b 	.word	0x08003e0b

0800405c <_printf_common>:
 800405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	4691      	mov	r9, r2
 8004062:	461f      	mov	r7, r3
 8004064:	688a      	ldr	r2, [r1, #8]
 8004066:	690b      	ldr	r3, [r1, #16]
 8004068:	4606      	mov	r6, r0
 800406a:	4293      	cmp	r3, r2
 800406c:	bfb8      	it	lt
 800406e:	4613      	movlt	r3, r2
 8004070:	f8c9 3000 	str.w	r3, [r9]
 8004074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004078:	460c      	mov	r4, r1
 800407a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800407e:	b112      	cbz	r2, 8004086 <_printf_common+0x2a>
 8004080:	3301      	adds	r3, #1
 8004082:	f8c9 3000 	str.w	r3, [r9]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	0699      	lsls	r1, r3, #26
 800408a:	bf42      	ittt	mi
 800408c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004090:	3302      	addmi	r3, #2
 8004092:	f8c9 3000 	strmi.w	r3, [r9]
 8004096:	6825      	ldr	r5, [r4, #0]
 8004098:	f015 0506 	ands.w	r5, r5, #6
 800409c:	d107      	bne.n	80040ae <_printf_common+0x52>
 800409e:	f104 0a19 	add.w	sl, r4, #25
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	f8d9 2000 	ldr.w	r2, [r9]
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	dc29      	bgt.n	8004102 <_printf_common+0xa6>
 80040ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	3300      	adds	r3, #0
 80040b6:	bf18      	it	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	0692      	lsls	r2, r2, #26
 80040bc:	d42e      	bmi.n	800411c <_printf_common+0xc0>
 80040be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c2:	4639      	mov	r1, r7
 80040c4:	4630      	mov	r0, r6
 80040c6:	47c0      	blx	r8
 80040c8:	3001      	adds	r0, #1
 80040ca:	d021      	beq.n	8004110 <_printf_common+0xb4>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	68e5      	ldr	r5, [r4, #12]
 80040d0:	f003 0306 	and.w	r3, r3, #6
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	bf18      	it	ne
 80040d8:	2500      	movne	r5, #0
 80040da:	f8d9 2000 	ldr.w	r2, [r9]
 80040de:	f04f 0900 	mov.w	r9, #0
 80040e2:	bf08      	it	eq
 80040e4:	1aad      	subeq	r5, r5, r2
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	6922      	ldr	r2, [r4, #16]
 80040ea:	bf08      	it	eq
 80040ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfc4      	itt	gt
 80040f4:	1a9b      	subgt	r3, r3, r2
 80040f6:	18ed      	addgt	r5, r5, r3
 80040f8:	341a      	adds	r4, #26
 80040fa:	454d      	cmp	r5, r9
 80040fc:	d11a      	bne.n	8004134 <_printf_common+0xd8>
 80040fe:	2000      	movs	r0, #0
 8004100:	e008      	b.n	8004114 <_printf_common+0xb8>
 8004102:	2301      	movs	r3, #1
 8004104:	4652      	mov	r2, sl
 8004106:	4639      	mov	r1, r7
 8004108:	4630      	mov	r0, r6
 800410a:	47c0      	blx	r8
 800410c:	3001      	adds	r0, #1
 800410e:	d103      	bne.n	8004118 <_printf_common+0xbc>
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004118:	3501      	adds	r5, #1
 800411a:	e7c2      	b.n	80040a2 <_printf_common+0x46>
 800411c:	2030      	movs	r0, #48	; 0x30
 800411e:	18e1      	adds	r1, r4, r3
 8004120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800412a:	4422      	add	r2, r4
 800412c:	3302      	adds	r3, #2
 800412e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004132:	e7c4      	b.n	80040be <_printf_common+0x62>
 8004134:	2301      	movs	r3, #1
 8004136:	4622      	mov	r2, r4
 8004138:	4639      	mov	r1, r7
 800413a:	4630      	mov	r0, r6
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d0e6      	beq.n	8004110 <_printf_common+0xb4>
 8004142:	f109 0901 	add.w	r9, r9, #1
 8004146:	e7d8      	b.n	80040fa <_printf_common+0x9e>

08004148 <_printf_i>:
 8004148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800414c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004150:	460c      	mov	r4, r1
 8004152:	7e09      	ldrb	r1, [r1, #24]
 8004154:	b085      	sub	sp, #20
 8004156:	296e      	cmp	r1, #110	; 0x6e
 8004158:	4617      	mov	r7, r2
 800415a:	4606      	mov	r6, r0
 800415c:	4698      	mov	r8, r3
 800415e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004160:	f000 80b3 	beq.w	80042ca <_printf_i+0x182>
 8004164:	d822      	bhi.n	80041ac <_printf_i+0x64>
 8004166:	2963      	cmp	r1, #99	; 0x63
 8004168:	d036      	beq.n	80041d8 <_printf_i+0x90>
 800416a:	d80a      	bhi.n	8004182 <_printf_i+0x3a>
 800416c:	2900      	cmp	r1, #0
 800416e:	f000 80b9 	beq.w	80042e4 <_printf_i+0x19c>
 8004172:	2958      	cmp	r1, #88	; 0x58
 8004174:	f000 8083 	beq.w	800427e <_printf_i+0x136>
 8004178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800417c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004180:	e032      	b.n	80041e8 <_printf_i+0xa0>
 8004182:	2964      	cmp	r1, #100	; 0x64
 8004184:	d001      	beq.n	800418a <_printf_i+0x42>
 8004186:	2969      	cmp	r1, #105	; 0x69
 8004188:	d1f6      	bne.n	8004178 <_printf_i+0x30>
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	0605      	lsls	r5, r0, #24
 8004190:	f103 0104 	add.w	r1, r3, #4
 8004194:	d52a      	bpl.n	80041ec <_printf_i+0xa4>
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	da03      	bge.n	80041a6 <_printf_i+0x5e>
 800419e:	222d      	movs	r2, #45	; 0x2d
 80041a0:	425b      	negs	r3, r3
 80041a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041a6:	486f      	ldr	r0, [pc, #444]	; (8004364 <_printf_i+0x21c>)
 80041a8:	220a      	movs	r2, #10
 80041aa:	e039      	b.n	8004220 <_printf_i+0xd8>
 80041ac:	2973      	cmp	r1, #115	; 0x73
 80041ae:	f000 809d 	beq.w	80042ec <_printf_i+0x1a4>
 80041b2:	d808      	bhi.n	80041c6 <_printf_i+0x7e>
 80041b4:	296f      	cmp	r1, #111	; 0x6f
 80041b6:	d020      	beq.n	80041fa <_printf_i+0xb2>
 80041b8:	2970      	cmp	r1, #112	; 0x70
 80041ba:	d1dd      	bne.n	8004178 <_printf_i+0x30>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	f043 0320 	orr.w	r3, r3, #32
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	e003      	b.n	80041ce <_printf_i+0x86>
 80041c6:	2975      	cmp	r1, #117	; 0x75
 80041c8:	d017      	beq.n	80041fa <_printf_i+0xb2>
 80041ca:	2978      	cmp	r1, #120	; 0x78
 80041cc:	d1d4      	bne.n	8004178 <_printf_i+0x30>
 80041ce:	2378      	movs	r3, #120	; 0x78
 80041d0:	4865      	ldr	r0, [pc, #404]	; (8004368 <_printf_i+0x220>)
 80041d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041d6:	e055      	b.n	8004284 <_printf_i+0x13c>
 80041d8:	6813      	ldr	r3, [r2, #0]
 80041da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041de:	1d19      	adds	r1, r3, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6011      	str	r1, [r2, #0]
 80041e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041e8:	2301      	movs	r3, #1
 80041ea:	e08c      	b.n	8004306 <_printf_i+0x1be>
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041f2:	6011      	str	r1, [r2, #0]
 80041f4:	bf18      	it	ne
 80041f6:	b21b      	sxthne	r3, r3
 80041f8:	e7cf      	b.n	800419a <_printf_i+0x52>
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	6825      	ldr	r5, [r4, #0]
 80041fe:	1d18      	adds	r0, r3, #4
 8004200:	6010      	str	r0, [r2, #0]
 8004202:	0628      	lsls	r0, r5, #24
 8004204:	d501      	bpl.n	800420a <_printf_i+0xc2>
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	e002      	b.n	8004210 <_printf_i+0xc8>
 800420a:	0668      	lsls	r0, r5, #25
 800420c:	d5fb      	bpl.n	8004206 <_printf_i+0xbe>
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	296f      	cmp	r1, #111	; 0x6f
 8004212:	bf14      	ite	ne
 8004214:	220a      	movne	r2, #10
 8004216:	2208      	moveq	r2, #8
 8004218:	4852      	ldr	r0, [pc, #328]	; (8004364 <_printf_i+0x21c>)
 800421a:	2100      	movs	r1, #0
 800421c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004220:	6865      	ldr	r5, [r4, #4]
 8004222:	2d00      	cmp	r5, #0
 8004224:	60a5      	str	r5, [r4, #8]
 8004226:	f2c0 8095 	blt.w	8004354 <_printf_i+0x20c>
 800422a:	6821      	ldr	r1, [r4, #0]
 800422c:	f021 0104 	bic.w	r1, r1, #4
 8004230:	6021      	str	r1, [r4, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d13d      	bne.n	80042b2 <_printf_i+0x16a>
 8004236:	2d00      	cmp	r5, #0
 8004238:	f040 808e 	bne.w	8004358 <_printf_i+0x210>
 800423c:	4665      	mov	r5, ip
 800423e:	2a08      	cmp	r2, #8
 8004240:	d10b      	bne.n	800425a <_printf_i+0x112>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	07db      	lsls	r3, r3, #31
 8004246:	d508      	bpl.n	800425a <_printf_i+0x112>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	bfde      	ittt	le
 8004250:	2330      	movle	r3, #48	; 0x30
 8004252:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004256:	f105 35ff 	addle.w	r5, r5, #4294967295
 800425a:	ebac 0305 	sub.w	r3, ip, r5
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	f8cd 8000 	str.w	r8, [sp]
 8004264:	463b      	mov	r3, r7
 8004266:	aa03      	add	r2, sp, #12
 8004268:	4621      	mov	r1, r4
 800426a:	4630      	mov	r0, r6
 800426c:	f7ff fef6 	bl	800405c <_printf_common>
 8004270:	3001      	adds	r0, #1
 8004272:	d14d      	bne.n	8004310 <_printf_i+0x1c8>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	b005      	add	sp, #20
 800427a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800427e:	4839      	ldr	r0, [pc, #228]	; (8004364 <_printf_i+0x21c>)
 8004280:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004284:	6813      	ldr	r3, [r2, #0]
 8004286:	6821      	ldr	r1, [r4, #0]
 8004288:	1d1d      	adds	r5, r3, #4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6015      	str	r5, [r2, #0]
 800428e:	060a      	lsls	r2, r1, #24
 8004290:	d50b      	bpl.n	80042aa <_printf_i+0x162>
 8004292:	07ca      	lsls	r2, r1, #31
 8004294:	bf44      	itt	mi
 8004296:	f041 0120 	orrmi.w	r1, r1, #32
 800429a:	6021      	strmi	r1, [r4, #0]
 800429c:	b91b      	cbnz	r3, 80042a6 <_printf_i+0x15e>
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	f022 0220 	bic.w	r2, r2, #32
 80042a4:	6022      	str	r2, [r4, #0]
 80042a6:	2210      	movs	r2, #16
 80042a8:	e7b7      	b.n	800421a <_printf_i+0xd2>
 80042aa:	064d      	lsls	r5, r1, #25
 80042ac:	bf48      	it	mi
 80042ae:	b29b      	uxthmi	r3, r3
 80042b0:	e7ef      	b.n	8004292 <_printf_i+0x14a>
 80042b2:	4665      	mov	r5, ip
 80042b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042b8:	fb02 3311 	mls	r3, r2, r1, r3
 80042bc:	5cc3      	ldrb	r3, [r0, r3]
 80042be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042c2:	460b      	mov	r3, r1
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d1f5      	bne.n	80042b4 <_printf_i+0x16c>
 80042c8:	e7b9      	b.n	800423e <_printf_i+0xf6>
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	6825      	ldr	r5, [r4, #0]
 80042ce:	1d18      	adds	r0, r3, #4
 80042d0:	6961      	ldr	r1, [r4, #20]
 80042d2:	6010      	str	r0, [r2, #0]
 80042d4:	0628      	lsls	r0, r5, #24
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	d501      	bpl.n	80042de <_printf_i+0x196>
 80042da:	6019      	str	r1, [r3, #0]
 80042dc:	e002      	b.n	80042e4 <_printf_i+0x19c>
 80042de:	066a      	lsls	r2, r5, #25
 80042e0:	d5fb      	bpl.n	80042da <_printf_i+0x192>
 80042e2:	8019      	strh	r1, [r3, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	4665      	mov	r5, ip
 80042e8:	6123      	str	r3, [r4, #16]
 80042ea:	e7b9      	b.n	8004260 <_printf_i+0x118>
 80042ec:	6813      	ldr	r3, [r2, #0]
 80042ee:	1d19      	adds	r1, r3, #4
 80042f0:	6011      	str	r1, [r2, #0]
 80042f2:	681d      	ldr	r5, [r3, #0]
 80042f4:	6862      	ldr	r2, [r4, #4]
 80042f6:	2100      	movs	r1, #0
 80042f8:	4628      	mov	r0, r5
 80042fa:	f000 f8e1 	bl	80044c0 <memchr>
 80042fe:	b108      	cbz	r0, 8004304 <_printf_i+0x1bc>
 8004300:	1b40      	subs	r0, r0, r5
 8004302:	6060      	str	r0, [r4, #4]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	2300      	movs	r3, #0
 800430a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430e:	e7a7      	b.n	8004260 <_printf_i+0x118>
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	462a      	mov	r2, r5
 8004314:	4639      	mov	r1, r7
 8004316:	4630      	mov	r0, r6
 8004318:	47c0      	blx	r8
 800431a:	3001      	adds	r0, #1
 800431c:	d0aa      	beq.n	8004274 <_printf_i+0x12c>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	079b      	lsls	r3, r3, #30
 8004322:	d413      	bmi.n	800434c <_printf_i+0x204>
 8004324:	68e0      	ldr	r0, [r4, #12]
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	4298      	cmp	r0, r3
 800432a:	bfb8      	it	lt
 800432c:	4618      	movlt	r0, r3
 800432e:	e7a3      	b.n	8004278 <_printf_i+0x130>
 8004330:	2301      	movs	r3, #1
 8004332:	464a      	mov	r2, r9
 8004334:	4639      	mov	r1, r7
 8004336:	4630      	mov	r0, r6
 8004338:	47c0      	blx	r8
 800433a:	3001      	adds	r0, #1
 800433c:	d09a      	beq.n	8004274 <_printf_i+0x12c>
 800433e:	3501      	adds	r5, #1
 8004340:	68e3      	ldr	r3, [r4, #12]
 8004342:	9a03      	ldr	r2, [sp, #12]
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	42ab      	cmp	r3, r5
 8004348:	dcf2      	bgt.n	8004330 <_printf_i+0x1e8>
 800434a:	e7eb      	b.n	8004324 <_printf_i+0x1dc>
 800434c:	2500      	movs	r5, #0
 800434e:	f104 0919 	add.w	r9, r4, #25
 8004352:	e7f5      	b.n	8004340 <_printf_i+0x1f8>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ac      	bne.n	80042b2 <_printf_i+0x16a>
 8004358:	7803      	ldrb	r3, [r0, #0]
 800435a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800435e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004362:	e76c      	b.n	800423e <_printf_i+0xf6>
 8004364:	080045f5 	.word	0x080045f5
 8004368:	08004606 	.word	0x08004606

0800436c <_sbrk_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	2300      	movs	r3, #0
 8004370:	4c05      	ldr	r4, [pc, #20]	; (8004388 <_sbrk_r+0x1c>)
 8004372:	4605      	mov	r5, r0
 8004374:	4608      	mov	r0, r1
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	f7fc f910 	bl	800059c <_sbrk>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_sbrk_r+0x1a>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	b103      	cbz	r3, 8004386 <_sbrk_r+0x1a>
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	200000f0 	.word	0x200000f0

0800438c <__sread>:
 800438c:	b510      	push	{r4, lr}
 800438e:	460c      	mov	r4, r1
 8004390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004394:	f000 f8a4 	bl	80044e0 <_read_r>
 8004398:	2800      	cmp	r0, #0
 800439a:	bfab      	itete	ge
 800439c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800439e:	89a3      	ldrhlt	r3, [r4, #12]
 80043a0:	181b      	addge	r3, r3, r0
 80043a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043a6:	bfac      	ite	ge
 80043a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043aa:	81a3      	strhlt	r3, [r4, #12]
 80043ac:	bd10      	pop	{r4, pc}

080043ae <__swrite>:
 80043ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b2:	461f      	mov	r7, r3
 80043b4:	898b      	ldrh	r3, [r1, #12]
 80043b6:	4605      	mov	r5, r0
 80043b8:	05db      	lsls	r3, r3, #23
 80043ba:	460c      	mov	r4, r1
 80043bc:	4616      	mov	r6, r2
 80043be:	d505      	bpl.n	80043cc <__swrite+0x1e>
 80043c0:	2302      	movs	r3, #2
 80043c2:	2200      	movs	r2, #0
 80043c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c8:	f000 f868 	bl	800449c <_lseek_r>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	4632      	mov	r2, r6
 80043d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043da:	463b      	mov	r3, r7
 80043dc:	4628      	mov	r0, r5
 80043de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e2:	f000 b817 	b.w	8004414 <_write_r>

080043e6 <__sseek>:
 80043e6:	b510      	push	{r4, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ee:	f000 f855 	bl	800449c <_lseek_r>
 80043f2:	1c43      	adds	r3, r0, #1
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	bf15      	itete	ne
 80043f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80043fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004402:	81a3      	strheq	r3, [r4, #12]
 8004404:	bf18      	it	ne
 8004406:	81a3      	strhne	r3, [r4, #12]
 8004408:	bd10      	pop	{r4, pc}

0800440a <__sclose>:
 800440a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440e:	f000 b813 	b.w	8004438 <_close_r>
	...

08004414 <_write_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	2200      	movs	r2, #0
 800441e:	4c05      	ldr	r4, [pc, #20]	; (8004434 <_write_r+0x20>)
 8004420:	6022      	str	r2, [r4, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	f7fc f86d 	bl	8000502 <_write>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_write_r+0x1e>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	b103      	cbz	r3, 8004432 <_write_r+0x1e>
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	200000f0 	.word	0x200000f0

08004438 <_close_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	2300      	movs	r3, #0
 800443c:	4c05      	ldr	r4, [pc, #20]	; (8004454 <_close_r+0x1c>)
 800443e:	4605      	mov	r5, r0
 8004440:	4608      	mov	r0, r1
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	f7fc f879 	bl	800053a <_close>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_close_r+0x1a>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	b103      	cbz	r3, 8004452 <_close_r+0x1a>
 8004450:	602b      	str	r3, [r5, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	200000f0 	.word	0x200000f0

08004458 <_fstat_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	2300      	movs	r3, #0
 800445c:	4c06      	ldr	r4, [pc, #24]	; (8004478 <_fstat_r+0x20>)
 800445e:	4605      	mov	r5, r0
 8004460:	4608      	mov	r0, r1
 8004462:	4611      	mov	r1, r2
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	f7fc f873 	bl	8000550 <_fstat>
 800446a:	1c43      	adds	r3, r0, #1
 800446c:	d102      	bne.n	8004474 <_fstat_r+0x1c>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	b103      	cbz	r3, 8004474 <_fstat_r+0x1c>
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	bd38      	pop	{r3, r4, r5, pc}
 8004476:	bf00      	nop
 8004478:	200000f0 	.word	0x200000f0

0800447c <_isatty_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	2300      	movs	r3, #0
 8004480:	4c05      	ldr	r4, [pc, #20]	; (8004498 <_isatty_r+0x1c>)
 8004482:	4605      	mov	r5, r0
 8004484:	4608      	mov	r0, r1
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	f7fc f871 	bl	800056e <_isatty>
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	d102      	bne.n	8004496 <_isatty_r+0x1a>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	b103      	cbz	r3, 8004496 <_isatty_r+0x1a>
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	bd38      	pop	{r3, r4, r5, pc}
 8004498:	200000f0 	.word	0x200000f0

0800449c <_lseek_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	4605      	mov	r5, r0
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	2200      	movs	r2, #0
 80044a6:	4c05      	ldr	r4, [pc, #20]	; (80044bc <_lseek_r+0x20>)
 80044a8:	6022      	str	r2, [r4, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f7fc f869 	bl	8000582 <_lseek>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_lseek_r+0x1e>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_lseek_r+0x1e>
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	200000f0 	.word	0x200000f0

080044c0 <memchr>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	b2c9      	uxtb	r1, r1
 80044c4:	4402      	add	r2, r0
 80044c6:	4290      	cmp	r0, r2
 80044c8:	4603      	mov	r3, r0
 80044ca:	d101      	bne.n	80044d0 <memchr+0x10>
 80044cc:	2300      	movs	r3, #0
 80044ce:	e003      	b.n	80044d8 <memchr+0x18>
 80044d0:	781c      	ldrb	r4, [r3, #0]
 80044d2:	3001      	adds	r0, #1
 80044d4:	428c      	cmp	r4, r1
 80044d6:	d1f6      	bne.n	80044c6 <memchr+0x6>
 80044d8:	4618      	mov	r0, r3
 80044da:	bd10      	pop	{r4, pc}

080044dc <__malloc_lock>:
 80044dc:	4770      	bx	lr

080044de <__malloc_unlock>:
 80044de:	4770      	bx	lr

080044e0 <_read_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4605      	mov	r5, r0
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	2200      	movs	r2, #0
 80044ea:	4c05      	ldr	r4, [pc, #20]	; (8004500 <_read_r+0x20>)
 80044ec:	6022      	str	r2, [r4, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7fb ffea 	bl	80004c8 <_read>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_read_r+0x1e>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_read_r+0x1e>
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	200000f0 	.word	0x200000f0

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
