
TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e0  080027e0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080027e0  080027e0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e0  080027e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080027e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000004  080027ec  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080027ec  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddfe  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c1a  00000000  00000000  0002de2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000848  00000000  00000000  0002fa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000112d8  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008895  00000000  00000000  00041ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00065a72  00000000  00000000  0004a57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000affef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  000b006c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	080027a4 	.word	0x080027a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	080027a4 	.word	0x080027a4

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOB_CLK_ENABLE();
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_GPIO_Init+0x4c>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a10      	ldr	r2, [pc, #64]	; (8000270 <MX_GPIO_Init+0x4c>)
 8000230:	f043 0308 	orr.w	r3, r3, #8
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_GPIO_Init+0x4c>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0308 	and.w	r3, r3, #8
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <MX_GPIO_Init+0x50>)
 800024a:	f000 fc89 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800024e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	2301      	movs	r3, #1
 8000256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000258:	2302      	movs	r3, #2
 800025a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	4619      	mov	r1, r3
 8000262:	4804      	ldr	r0, [pc, #16]	; (8000274 <MX_GPIO_Init+0x50>)
 8000264:	f000 fb0e 	bl	8000884 <HAL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3718      	adds	r7, #24
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40021000 	.word	0x40021000
 8000274:	40010c00 	.word	0x40010c00

08000278 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 f970 	bl	8000560 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f80c 	bl	800029c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f7ff ffce 	bl	8000224 <MX_GPIO_Init>
  SystemClock_Config();
 8000288:	f000 f808 	bl	800029c <SystemClock_Config>
  MX_TIM3_Init();
 800028c:	f000 f8ea 	bl	8000464 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000290:	4801      	ldr	r0, [pc, #4]	; (8000298 <main+0x20>)
 8000292:	f001 fed0 	bl	8002036 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000296:	e7fe      	b.n	8000296 <main+0x1e>
 8000298:	20000024 	.word	0x20000024

0800029c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	; 0x40
 80002a0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002be:	2300      	movs	r3, #0
 80002c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fc74 	bl	8000bb4 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fb52 	bl	8001990 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002ec:	f001 fe50 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 80002f0:	4602      	mov	r2, r0
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <SystemClock_Config+0x80>)
 80002f4:	fba3 2302 	umull	r2, r3, r3, r2
 80002f8:	099b      	lsrs	r3, r3, #6
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fa8d 	bl	800081a <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000300:	2004      	movs	r0, #4
 8000302:	f000 fa97 	bl	8000834 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	f04f 30ff 	mov.w	r0, #4294967295
 800030e:	f000 fa5a 	bl	80007c6 <HAL_NVIC_SetPriority>
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	; 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	10624dd3 	.word	0x10624dd3

08000320 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d113      	bne.n	800035a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		/* Toggle LED */
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000336:	480c      	ldr	r0, [pc, #48]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000338:	f000 fc2a 	bl	8000b90 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800033c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000342:	f000 fc25 	bl	8000b90 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800034a:	4807      	ldr	r0, [pc, #28]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800034c:	f000 fc20 	bl	8000b90 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000356:	f000 fc1b 	bl	8000b90 <HAL_GPIO_TogglePin>
	}
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40000400 	.word	0x40000400
 8000368:	40010c00 	.word	0x40010c00

0800036c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <HAL_MspInit+0x68>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <HAL_MspInit+0x68>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_MspInit+0x68>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800038a:	2003      	movs	r0, #3
 800038c:	f000 fa10 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	2100      	movs	r1, #0
 8000394:	f06f 000b 	mvn.w	r0, #11
 8000398:	f000 fa15 	bl	80007c6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2100      	movs	r1, #0
 80003a0:	f06f 000a 	mvn.w	r0, #10
 80003a4:	f000 fa0f 	bl	80007c6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	f06f 0009 	mvn.w	r0, #9
 80003b0:	f000 fa09 	bl	80007c6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	f06f 0003 	mvn.w	r0, #3
 80003bc:	f000 fa03 	bl	80007c6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2100      	movs	r1, #0
 80003c4:	f04f 30ff 	mov.w	r0, #4294967295
 80003c8:	f000 f9fd 	bl	80007c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000

080003d8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003dc:	f000 f8f2 	bl	80005c4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80003e0:	f000 fa44 	bl	800086c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80003ec:	4802      	ldr	r0, [pc, #8]	; (80003f8 <TIM3_IRQHandler+0x10>)
 80003ee:	f001 fe3c 	bl	800206a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000024 	.word	0x20000024

080003fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <SystemInit+0x5c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <SystemInit+0x5c>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <SystemInit+0x5c>)
 800040e:	685a      	ldr	r2, [r3, #4]
 8000410:	4911      	ldr	r1, [pc, #68]	; (8000458 <SystemInit+0x5c>)
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <SystemInit+0x60>)
 8000414:	4013      	ands	r3, r2
 8000416:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <SystemInit+0x5c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <SystemInit+0x5c>)
 800041e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <SystemInit+0x5c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <SystemInit+0x5c>)
 800042e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000432:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <SystemInit+0x5c>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <SystemInit+0x5c>)
 800043a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800043e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <SystemInit+0x5c>)
 8000442:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000446:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <SystemInit+0x64>)
 800044a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800044e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	f8ff0000 	.word	0xf8ff0000
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_TIM3_Init+0x5c>)
 800046c:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <MX_TIM3_Init+0x60>)
 800046e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_TIM3_Init+0x5c>)
 8000472:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000476:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_TIM3_Init+0x5c>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000-1;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_TIM3_Init+0x5c>)
 8000480:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_TIM3_Init+0x5c>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim3);
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <MX_TIM3_Init+0x5c>)
 800048e:	f001 fda7 	bl	8001fe0 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000496:	60bb      	str	r3, [r7, #8]
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	4619      	mov	r1, r3
 800049e:	4808      	ldr	r0, [pc, #32]	; (80004c0 <MX_TIM3_Init+0x5c>)
 80004a0:	f001 feeb 	bl	800227a <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004a4:	2320      	movs	r3, #32
 80004a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 80004ac:	463b      	mov	r3, r7
 80004ae:	4619      	mov	r1, r3
 80004b0:	4803      	ldr	r0, [pc, #12]	; (80004c0 <MX_TIM3_Init+0x5c>)
 80004b2:	f002 f8fc 	bl	80026ae <HAL_TIMEx_MasterConfigSynchronization>

}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000024 	.word	0x20000024
 80004c4:	40000400 	.word	0x40000400

080004c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <HAL_TIM_Base_MspInit+0x44>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d113      	bne.n	8000502 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __TIM3_CLK_ENABLE();
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <HAL_TIM_Base_MspInit+0x48>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <HAL_TIM_Base_MspInit+0x48>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_TIM_Base_MspInit+0x48>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	201d      	movs	r0, #29
 80004f8:	f000 f965 	bl	80007c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80004fc:	201d      	movs	r0, #29
 80004fe:	f000 f97e 	bl	80007fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40000400 	.word	0x40000400
 8000510:	40021000 	.word	0x40021000

08000514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000514:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000516:	e003      	b.n	8000520 <LoopCopyDataInit>

08000518 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800051a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800051c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800051e:	3104      	adds	r1, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000520:	480a      	ldr	r0, [pc, #40]	; (800054c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000524:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000528:	d3f6      	bcc.n	8000518 <CopyDataInit>
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800052c:	e002      	b.n	8000534 <LoopFillZerobss>

0800052e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000530:	f842 3b04 	str.w	r3, [r2], #4

08000534 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000536:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000538:	d3f9      	bcc.n	800052e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053a:	f7ff ff5f 	bl	80003fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f002 f90d 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff fe99 	bl	8000278 <main>
  bx lr
 8000546:	4770      	bx	lr
  ldr r3, =_sidata
 8000548:	080027e8 	.word	0x080027e8
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000550:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000554:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000558:	20000060 	.word	0x20000060

0800055c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_2_IRQHandler>
	...

08000560 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_Init+0x28>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_Init+0x28>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f91d 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f808 	bl	800058c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800057c:	f7ff fef6 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40022000 	.word	0x40022000

0800058c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000594:	f001 fcfc 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8000598:	4602      	mov	r2, r0
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_InitTick+0x34>)
 800059c:	fba3 2302 	umull	r2, r3, r3, r2
 80005a0:	099b      	lsrs	r3, r3, #6
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f939 	bl	800081a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 f909 	bl	80007c6 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	10624dd3 	.word	0x10624dd3

080005c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick++;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_IncTick+0x18>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_IncTick+0x18>)
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000020 	.word	0x20000020

080005e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000020 	.word	0x20000020

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000606:	bf00      	nop
 8000608:	f7ff ffea 	bl	80005e0 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x14>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <NVIC_SetPriorityGrouping+0x44>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800064c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <NVIC_SetPriorityGrouping+0x44>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <NVIC_GetPriorityGrouping+0x18>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 0307 	and.w	r3, r3, #7
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 021f 	and.w	r2, r3, #31
 8000694:	4906      	ldr	r1, [pc, #24]	; (80006b0 <NVIC_EnableIRQ+0x2c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	095b      	lsrs	r3, r3, #5
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	da0b      	bge.n	80006e0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	; (8000700 <NVIC_SetPriority+0x4c>)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	3b04      	subs	r3, #4
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006de:	e009      	b.n	80006f4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4907      	ldr	r1, [pc, #28]	; (8000704 <NVIC_SetPriority+0x50>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	e000e100 	.word	0xe000e100

08000708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	f1c3 0307 	rsb	r3, r3, #7
 8000722:	2b04      	cmp	r3, #4
 8000724:	bf28      	it	cs
 8000726:	2304      	movcs	r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3304      	adds	r3, #4
 800072e:	2b06      	cmp	r3, #6
 8000730:	d902      	bls.n	8000738 <NVIC_EncodePriority+0x30>
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3b03      	subs	r3, #3
 8000736:	e000      	b.n	800073a <NVIC_EncodePriority+0x32>
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 32ff 	mov.w	r2, #4294967295
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43da      	mvns	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	401a      	ands	r2, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000750:	f04f 31ff 	mov.w	r1, #4294967295
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43d9      	mvns	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	4313      	orrs	r3, r2
         );
}
 8000762:	4618      	mov	r0, r3
 8000764:	3724      	adds	r7, #36	; 0x24
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800077c:	d301      	bcc.n	8000782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077e:	2301      	movs	r3, #1
 8000780:	e00f      	b.n	80007a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <SysTick_Config+0x40>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078a:	210f      	movs	r1, #15
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	f7ff ff90 	bl	80006b4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SysTick_Config+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SysTick_Config+0x40>)
 800079c:	2207      	movs	r2, #7
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff31 	bl	8000620 <NVIC_SetPriorityGrouping>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d8:	f7ff ff46 	bl	8000668 <NVIC_GetPriorityGrouping>
 80007dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	6978      	ldr	r0, [r7, #20]
 80007e4:	f7ff ff90 	bl	8000708 <NVIC_EncodePriority>
 80007e8:	4602      	mov	r2, r0
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff5f 	bl	80006b4 <NVIC_SetPriority>
}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff39 	bl	8000684 <NVIC_EnableIRQ>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ffa2 	bl	800076c <SysTick_Config>
 8000828:	4603      	mov	r3, r0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b04      	cmp	r3, #4
 8000840:	d106      	bne.n	8000850 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800084e:	e005      	b.n	800085c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000856:	f023 0304 	bic.w	r3, r3, #4
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000870:	f000 f802 	bl	8000878 <HAL_SYSTICK_Callback>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b08b      	sub	sp, #44	; 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
 80008a6:	e133      	b.n	8000b10 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008a8:	2201      	movs	r2, #1
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f040 8122 	bne.w	8000b0a <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d034      	beq.n	8000938 <HAL_GPIO_Init+0xb4>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d80d      	bhi.n	80008ee <HAL_GPIO_Init+0x6a>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d02b      	beq.n	800092e <HAL_GPIO_Init+0xaa>
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d804      	bhi.n	80008e4 <HAL_GPIO_Init+0x60>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d031      	beq.n	8000942 <HAL_GPIO_Init+0xbe>
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d01c      	beq.n	800091c <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80008e2:	e048      	b.n	8000976 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d043      	beq.n	8000970 <HAL_GPIO_Init+0xec>
 80008e8:	2b11      	cmp	r3, #17
 80008ea:	d01b      	beq.n	8000924 <HAL_GPIO_Init+0xa0>
          break;
 80008ec:	e043      	b.n	8000976 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80008ee:	4a8d      	ldr	r2, [pc, #564]	; (8000b24 <HAL_GPIO_Init+0x2a0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d026      	beq.n	8000942 <HAL_GPIO_Init+0xbe>
 80008f4:	4a8b      	ldr	r2, [pc, #556]	; (8000b24 <HAL_GPIO_Init+0x2a0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d806      	bhi.n	8000908 <HAL_GPIO_Init+0x84>
 80008fa:	4a8b      	ldr	r2, [pc, #556]	; (8000b28 <HAL_GPIO_Init+0x2a4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d020      	beq.n	8000942 <HAL_GPIO_Init+0xbe>
 8000900:	4a8a      	ldr	r2, [pc, #552]	; (8000b2c <HAL_GPIO_Init+0x2a8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d01d      	beq.n	8000942 <HAL_GPIO_Init+0xbe>
          break;
 8000906:	e036      	b.n	8000976 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000908:	4a89      	ldr	r2, [pc, #548]	; (8000b30 <HAL_GPIO_Init+0x2ac>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d019      	beq.n	8000942 <HAL_GPIO_Init+0xbe>
 800090e:	4a89      	ldr	r2, [pc, #548]	; (8000b34 <HAL_GPIO_Init+0x2b0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d016      	beq.n	8000942 <HAL_GPIO_Init+0xbe>
 8000914:	4a88      	ldr	r2, [pc, #544]	; (8000b38 <HAL_GPIO_Init+0x2b4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d013      	beq.n	8000942 <HAL_GPIO_Init+0xbe>
          break;
 800091a:	e02c      	b.n	8000976 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e028      	b.n	8000976 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	3304      	adds	r3, #4
 800092a:	623b      	str	r3, [r7, #32]
          break;
 800092c:	e023      	b.n	8000976 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	3308      	adds	r3, #8
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e01e      	b.n	8000976 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	330c      	adds	r3, #12
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e019      	b.n	8000976 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094a:	2304      	movs	r3, #4
 800094c:	623b      	str	r3, [r7, #32]
          break; 
 800094e:	e012      	b.n	8000976 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d105      	bne.n	8000964 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000958:	2308      	movs	r3, #8
 800095a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	611a      	str	r2, [r3, #16]
          break; 
 8000962:	e008      	b.n	8000976 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	615a      	str	r2, [r3, #20]
          break; 
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
          break;
 8000974:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	2bff      	cmp	r3, #255	; 0xff
 800097a:	d801      	bhi.n	8000980 <HAL_GPIO_Init+0xfc>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	e001      	b.n	8000984 <HAL_GPIO_Init+0x100>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3304      	adds	r3, #4
 8000984:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2bff      	cmp	r3, #255	; 0xff
 800098a:	d802      	bhi.n	8000992 <HAL_GPIO_Init+0x10e>
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	e002      	b.n	8000998 <HAL_GPIO_Init+0x114>
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3b08      	subs	r3, #8
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	210f      	movs	r1, #15
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	401a      	ands	r2, r3
 80009aa:	6a39      	ldr	r1, [r7, #32]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	431a      	orrs	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f000 80a2 	beq.w	8000b0a <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c6:	4b5d      	ldr	r3, [pc, #372]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a5c      	ldr	r2, [pc, #368]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 80009de:	4a58      	ldr	r2, [pc, #352]	; (8000b40 <HAL_GPIO_Init+0x2bc>)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3302      	adds	r3, #2
 80009e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ea:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	220f      	movs	r2, #15
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	4013      	ands	r3, r2
 8000a00:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4f      	ldr	r2, [pc, #316]	; (8000b44 <HAL_GPIO_Init+0x2c0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d01f      	beq.n	8000a4a <HAL_GPIO_Init+0x1c6>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <HAL_GPIO_Init+0x2c4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d019      	beq.n	8000a46 <HAL_GPIO_Init+0x1c2>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4d      	ldr	r2, [pc, #308]	; (8000b4c <HAL_GPIO_Init+0x2c8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0x1be>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00d      	beq.n	8000a3e <HAL_GPIO_Init+0x1ba>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d007      	beq.n	8000a3a <HAL_GPIO_Init+0x1b6>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4a      	ldr	r2, [pc, #296]	; (8000b58 <HAL_GPIO_Init+0x2d4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_GPIO_Init+0x1b2>
 8000a32:	2305      	movs	r3, #5
 8000a34:	e00a      	b.n	8000a4c <HAL_GPIO_Init+0x1c8>
 8000a36:	2306      	movs	r3, #6
 8000a38:	e008      	b.n	8000a4c <HAL_GPIO_Init+0x1c8>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x1c8>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x1c8>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x1c8>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x1c8>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000a5c:	4938      	ldr	r1, [pc, #224]	; (8000b40 <HAL_GPIO_Init+0x2bc>)
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d006      	beq.n	8000a84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4938      	ldr	r1, [pc, #224]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
 8000a82:	e006      	b.n	8000a92 <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000a84:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	4933      	ldr	r1, [pc, #204]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	492e      	ldr	r1, [pc, #184]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	604b      	str	r3, [r1, #4]
 8000aaa:	e006      	b.n	8000aba <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	4929      	ldr	r1, [pc, #164]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	4924      	ldr	r1, [pc, #144]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	608b      	str	r3, [r1, #8]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	491f      	ldr	r1, [pc, #124]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	491a      	ldr	r1, [pc, #104]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60cb      	str	r3, [r1, #12]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4915      	ldr	r1, [pc, #84]	; (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	f67f aec8 	bls.w	80008a8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000b18:	bf00      	nop
 8000b1a:	372c      	adds	r7, #44	; 0x2c
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	10210000 	.word	0x10210000
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	10120000 	.word	0x10120000
 8000b30:	10310000 	.word	0x10310000
 8000b34:	10320000 	.word	0x10320000
 8000b38:	10220000 	.word	0x10220000
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40011400 	.word	0x40011400
 8000b54:	40011800 	.word	0x40011800
 8000b58:	40011c00 	.word	0x40011c00
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	405a      	eors	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	60da      	str	r2, [r3, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0f0      	sub	sp, #448	; 0x1c0
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 819e 	beq.w	8000f10 <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bd4:	4bb9      	ldr	r3, [pc, #740]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d00c      	beq.n	8000bfa <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be0:	4bb6      	ldr	r3, [pc, #728]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d14f      	bne.n	8000c8c <HAL_RCC_OscConfig+0xd8>
 8000bec:	4bb3      	ldr	r3, [pc, #716]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf8:	d148      	bne.n	8000c8c <HAL_RCC_OscConfig+0xd8>
 8000bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bfe:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c02:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000c06:	fa93 f3a3 	rbit	r3, r3
 8000c0a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c12:	fab3 f383 	clz	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	095b      	lsrs	r3, r3, #5
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d102      	bne.n	8000c2c <HAL_RCC_OscConfig+0x78>
 8000c26:	4ba5      	ldr	r3, [pc, #660]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	e00b      	b.n	8000c44 <HAL_RCC_OscConfig+0x90>
 8000c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000c38:	fa93 f3a3 	rbit	r3, r3
 8000c3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000c40:	4b9e      	ldr	r3, [pc, #632]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c48:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8000c4c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8000c50:	fa92 f2a2 	rbit	r2, r2
 8000c54:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 8000c58:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b252      	sxtb	r2, r2
 8000c62:	f042 0220 	orr.w	r2, r2, #32
 8000c66:	b252      	sxtb	r2, r2
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	f002 021f 	and.w	r2, r2, #31
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 814a 	beq.w	8000f0e <HAL_RCC_OscConfig+0x35a>
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f040 8144 	bne.w	8000f0e <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f000 be7b 	b.w	8001982 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000c8c:	4b8b      	ldr	r3, [pc, #556]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a8a      	ldr	r2, [pc, #552]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b88      	ldr	r3, [pc, #544]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a87      	ldr	r2, [pc, #540]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca4:	f7ff fc9c 	bl	80005e0 <HAL_GetTick>
 8000ca8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cac:	e00a      	b.n	8000cc4 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cae:	f7ff fc97 	bl	80005e0 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b64      	cmp	r3, #100	; 0x64
 8000cbc:	d902      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	f000 be5f 	b.w	8001982 <HAL_RCC_OscConfig+0xdce>
 8000cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ccc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000cd0:	fa93 f3a3 	rbit	r3, r3
 8000cd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8000cd8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cdc:	fab3 f383 	clz	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d102      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x142>
 8000cf0:	4b72      	ldr	r3, [pc, #456]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	e00b      	b.n	8000d0e <HAL_RCC_OscConfig+0x15a>
 8000cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000d0a:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d12:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8000d16:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8000d1a:	fa92 f2a2 	rbit	r2, r2
 8000d1e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 8000d22:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	b252      	sxtb	r2, r2
 8000d2c:	f042 0220 	orr.w	r2, r2, #32
 8000d30:	b252      	sxtb	r2, r2
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	f002 021f 	and.w	r2, r2, #31
 8000d38:	40d3      	lsrs	r3, r2
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1b5      	bne.n	8000cae <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4c:	d106      	bne.n	8000d5c <HAL_RCC_OscConfig+0x1a8>
 8000d4e:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a5a      	ldr	r2, [pc, #360]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e030      	b.n	8000dbe <HAL_RCC_OscConfig+0x20a>
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x1cc>
 8000d66:	4b55      	ldr	r3, [pc, #340]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a54      	ldr	r2, [pc, #336]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e01e      	b.n	8000dbe <HAL_RCC_OscConfig+0x20a>
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d8a:	d10c      	bne.n	8000da6 <HAL_RCC_OscConfig+0x1f2>
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a4a      	ldr	r2, [pc, #296]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a47      	ldr	r2, [pc, #284]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e00b      	b.n	8000dbe <HAL_RCC_OscConfig+0x20a>
 8000da6:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	4b42      	ldr	r3, [pc, #264]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a41      	ldr	r2, [pc, #260]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d04f      	beq.n	8000e68 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc0a 	bl	80005e0 <HAL_GetTick>
 8000dcc:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd0:	e00a      	b.n	8000de8 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd2:	f7ff fc05 	bl	80005e0 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d902      	bls.n	8000de8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f000 bdcd 	b.w	8001982 <HAL_RCC_OscConfig+0xdce>
 8000de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 8000dfc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d102      	bne.n	8000e1a <HAL_RCC_OscConfig+0x266>
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	e00b      	b.n	8000e32 <HAL_RCC_OscConfig+0x27e>
 8000e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e36:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e3e:	fa92 f2a2 	rbit	r2, r2
 8000e42:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8000e46:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e4a:	fab2 f282 	clz	r2, r2
 8000e4e:	b252      	sxtb	r2, r2
 8000e50:	f042 0220 	orr.w	r2, r2, #32
 8000e54:	b252      	sxtb	r2, r2
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	f002 021f 	and.w	r2, r2, #31
 8000e5c:	40d3      	lsrs	r3, r2
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0b5      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x21e>
 8000e66:	e053      	b.n	8000f10 <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fbba 	bl	80005e0 <HAL_GetTick>
 8000e6c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e70:	e00a      	b.n	8000e88 <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e72:	f7ff fbb5 	bl	80005e0 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d902      	bls.n	8000e88 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	f000 bd7d 	b.w	8001982 <HAL_RCC_OscConfig+0xdce>
 8000e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8000e9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d105      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x30c>
 8000eb4:	4b01      	ldr	r3, [pc, #4]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	e00e      	b.n	8000ed8 <HAL_RCC_OscConfig+0x324>
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000ed4:	4bce      	ldr	r3, [pc, #824]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000edc:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8000ee0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000ee4:	fa92 f2a2 	rbit	r2, r2
 8000ee8:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 8000eec:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	b252      	sxtb	r2, r2
 8000ef6:	f042 0220 	orr.w	r2, r2, #32
 8000efa:	b252      	sxtb	r2, r2
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	f002 021f 	and.w	r2, r2, #31
 8000f02:	40d3      	lsrs	r3, r2
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1b2      	bne.n	8000e72 <HAL_RCC_OscConfig+0x2be>
 8000f0c:	e000      	b.n	8000f10 <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8151 	beq.w	80011c2 <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f20:	4bbb      	ldr	r3, [pc, #748]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f2c:	4bb8      	ldr	r3, [pc, #736]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d163      	bne.n	8001000 <HAL_RCC_OscConfig+0x44c>
 8000f38:	4bb5      	ldr	r3, [pc, #724]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d15d      	bne.n	8001000 <HAL_RCC_OscConfig+0x44c>
 8000f44:	2302      	movs	r3, #2
 8000f46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8000f56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	095b      	lsrs	r3, r3, #5
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d102      	bne.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
 8000f6e:	4ba8      	ldr	r3, [pc, #672]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	e00a      	b.n	8000f8a <HAL_RCC_OscConfig+0x3d6>
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f86:	4ba2      	ldr	r3, [pc, #648]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000f90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f94:	fa92 f2a2 	rbit	r2, r2
 8000f98:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8000f9c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fa0:	fab2 f282 	clz	r2, r2
 8000fa4:	b252      	sxtb	r2, r2
 8000fa6:	f042 0220 	orr.w	r2, r2, #32
 8000faa:	b252      	sxtb	r2, r2
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	f002 021f 	and.w	r2, r2, #31
 8000fb2:	40d3      	lsrs	r3, r2
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <HAL_RCC_OscConfig+0x418>
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d002      	beq.n	8000fcc <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f000 bcdb 	b.w	8001982 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b90      	ldr	r3, [pc, #576]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6959      	ldr	r1, [r3, #20]
 8000fda:	23f8      	movs	r3, #248	; 0xf8
 8000fdc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8000fec:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4985      	ldr	r1, [pc, #532]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	e0e0      	b.n	80011c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d07a      	beq.n	8001100 <HAL_RCC_OscConfig+0x54c>
 800100a:	2301      	movs	r3, #1
 800100c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 800101c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	fab3 f383 	clz	r3, r3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800102a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800102e:	461a      	mov	r2, r3
 8001030:	2301      	movs	r3, #1
 8001032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fad4 	bl	80005e0 <HAL_GetTick>
 8001038:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff facf 	bl	80005e0 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d902      	bls.n	8001054 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	f000 bc97 	b.w	8001982 <HAL_RCC_OscConfig+0xdce>
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8001066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	fab3 f383 	clz	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	095b      	lsrs	r3, r3, #5
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d102      	bne.n	8001084 <HAL_RCC_OscConfig+0x4d0>
 800107e:	4b64      	ldr	r3, [pc, #400]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	e00a      	b.n	800109a <HAL_RCC_OscConfig+0x4e6>
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	2202      	movs	r2, #2
 800109c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80010a0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80010a4:	fa92 f2a2 	rbit	r2, r2
 80010a8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 80010ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80010b0:	fab2 f282 	clz	r2, r2
 80010b4:	b252      	sxtb	r2, r2
 80010b6:	f042 0220 	orr.w	r2, r2, #32
 80010ba:	b252      	sxtb	r2, r2
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f002 021f 	and.w	r2, r2, #31
 80010c2:	40d3      	lsrs	r3, r2
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0b8      	beq.n	800103e <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6959      	ldr	r1, [r3, #20]
 80010da:	23f8      	movs	r3, #248	; 0xf8
 80010dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 80010ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	4945      	ldr	r1, [pc, #276]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
 80010fe:	e060      	b.n	80011c2 <HAL_RCC_OscConfig+0x60e>
 8001100:	2301      	movs	r3, #1
 8001102:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8001112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001120:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001124:	461a      	mov	r2, r3
 8001126:	2300      	movs	r3, #0
 8001128:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fa59 	bl	80005e0 <HAL_GetTick>
 800112e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	e00a      	b.n	800114a <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001134:	f7ff fa54 	bl	80005e0 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d902      	bls.n	800114a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	f000 bc1c 	b.w	8001982 <HAL_RCC_OscConfig+0xdce>
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 800115c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d102      	bne.n	800117a <HAL_RCC_OscConfig+0x5c6>
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	e00a      	b.n	8001190 <HAL_RCC_OscConfig+0x5dc>
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_OscConfig+0x65c>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	2202      	movs	r2, #2
 8001192:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001196:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800119a:	fa92 f2a2 	rbit	r2, r2
 800119e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 80011a2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80011a6:	fab2 f282 	clz	r2, r2
 80011aa:	b252      	sxtb	r2, r2
 80011ac:	f042 0220 	orr.w	r2, r2, #32
 80011b0:	b252      	sxtb	r2, r2
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	f002 021f 	and.w	r2, r2, #31
 80011b8:	40d3      	lsrs	r3, r2
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1b8      	bne.n	8001134 <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80b7 	beq.w	8001340 <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d059      	beq.n	8001290 <HAL_RCC_OscConfig+0x6dc>
 80011dc:	2301      	movs	r3, #1
 80011de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 80011ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_RCC_OscConfig+0x660>)
 80011fc:	4413      	add	r3, r2
 80011fe:	461a      	mov	r2, r3
 8001200:	2301      	movs	r3, #1
 8001202:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff f9ec 	bl	80005e0 <HAL_GetTick>
 8001208:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120c:	e00e      	b.n	800122c <HAL_RCC_OscConfig+0x678>
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff f9e2 	bl	80005e0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e3aa      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001250:	4bb0      	ldr	r3, [pc, #704]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 8001252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800125a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8001266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b25b      	sxtb	r3, r3
 8001270:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001274:	b25b      	sxtb	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0c7      	beq.n	8001218 <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff f9b3 	bl	80005f4 <HAL_Delay>
 800128e:	e057      	b.n	8001340 <HAL_RCC_OscConfig+0x78c>
 8001290:	2301      	movs	r3, #1
 8001292:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 80012a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b9a      	ldr	r3, [pc, #616]	; (8001518 <HAL_RCC_OscConfig+0x964>)
 80012b0:	4413      	add	r3, r2
 80012b2:	461a      	mov	r2, r3
 80012b4:	2300      	movs	r3, #0
 80012b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff f992 	bl	80005e0 <HAL_GetTick>
 80012bc:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	e009      	b.n	80012d6 <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff f98d 	bl	80005e0 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e355      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80012e8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012ec:	2202      	movs	r2, #2
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	fa93 f2a3 	rbit	r2, r3
 80012fa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001300:	4b84      	ldr	r3, [pc, #528]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 8001302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001304:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001308:	2102      	movs	r1, #2
 800130a:	6019      	str	r1, [r3, #0]
 800130c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	fa93 f1a3 	rbit	r1, r3
 8001316:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800131a:	6019      	str	r1, [r3, #0]
  return(result);
 800131c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b25b      	sxtb	r3, r3
 8001328:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800132c:	b25b      	sxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1c0      	bne.n	80012c2 <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8188 	beq.w	8001660 <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	4b70      	ldr	r3, [pc, #448]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4a6f      	ldr	r2, [pc, #444]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135a:	61d3      	str	r3, [r2, #28]
 800135c:	4b6d      	ldr	r3, [pc, #436]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001370:	4b6a      	ldr	r3, [pc, #424]	; (800151c <HAL_RCC_OscConfig+0x968>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a69      	ldr	r2, [pc, #420]	; (800151c <HAL_RCC_OscConfig+0x968>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800137c:	f7ff f930 	bl	80005e0 <HAL_GetTick>
 8001380:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001384:	e009      	b.n	800139a <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff f92b 	bl	80005e0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e2f3      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800139a:	4b60      	ldr	r3, [pc, #384]	; (800151c <HAL_RCC_OscConfig+0x968>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ef      	beq.n	8001386 <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a5a      	ldr	r2, [pc, #360]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013be:	f7ff f90f 	bl	80005e0 <HAL_GetTick>
 80013c2:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff f90a 	bl	80005e0 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e2d0      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 80013e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013e4:	2202      	movs	r2, #2
 80013e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	fa93 f2a3 	rbit	r2, r3
 80013f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80013fc:	2202      	movs	r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800140e:	601a      	str	r2, [r3, #0]
  return(result);
 8001410:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001414:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	095b      	lsrs	r3, r3, #5
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x87c>
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	e001      	b.n	8001434 <HAL_RCC_OscConfig+0x880>
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001438:	2102      	movs	r1, #2
 800143a:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	fa92 f1a2 	rbit	r1, r2
 8001446:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800144a:	6011      	str	r1, [r2, #0]
  return(result);
 800144c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	fab2 f282 	clz	r2, r2
 8001456:	b252      	sxtb	r2, r2
 8001458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800145c:	b252      	sxtb	r2, r2
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f002 021f 	and.w	r2, r2, #31
 8001464:	40d3      	lsrs	r3, r2
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ac      	bne.n	80013c8 <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x8d2>
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a25      	ldr	r2, [pc, #148]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e02f      	b.n	80014e6 <HAL_RCC_OscConfig+0x932>
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0x8f6>
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6213      	str	r3, [r2, #32]
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	e01d      	b.n	80014e6 <HAL_RCC_OscConfig+0x932>
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x91a>
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a16      	ldr	r2, [pc, #88]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e00b      	b.n	80014e6 <HAL_RCC_OscConfig+0x932>
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <HAL_RCC_OscConfig+0x960>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05f      	beq.n	80015b0 <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f876 	bl	80005e0 <HAL_GetTick>
 80014f4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	e012      	b.n	8001520 <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff f871 	bl	80005e0 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d908      	bls.n	8001520 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e237      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	42420480 	.word	0x42420480
 800151c:	40007000 	.word	0x40007000
 8001520:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f2a3 	rbit	r2, r3
 8001532:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800153c:	2202      	movs	r2, #2
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800154e:	601a      	str	r2, [r3, #0]
  return(result);
 8001550:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001554:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	095b      	lsrs	r3, r3, #5
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d102      	bne.n	8001570 <HAL_RCC_OscConfig+0x9bc>
 800156a:	4bb2      	ldr	r3, [pc, #712]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	e001      	b.n	8001574 <HAL_RCC_OscConfig+0x9c0>
 8001570:	4bb0      	ldr	r3, [pc, #704]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001578:	2102      	movs	r1, #2
 800157a:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	fa92 f1a2 	rbit	r1, r2
 8001586:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800158a:	6011      	str	r1, [r2, #0]
  return(result);
 800158c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	fab2 f282 	clz	r2, r2
 8001596:	b252      	sxtb	r2, r2
 8001598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159c:	b252      	sxtb	r2, r2
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	f002 021f 	and.w	r2, r2, #31
 80015a4:	40d3      	lsrs	r3, r2
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0a5      	beq.n	80014fa <HAL_RCC_OscConfig+0x946>
 80015ae:	e057      	b.n	8001660 <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff f816 	bl	80005e0 <HAL_GetTick>
 80015b4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	e00b      	b.n	80015d2 <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff f811 	bl	80005e0 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1d7      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 80015d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015d6:	2202      	movs	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015ee:	2202      	movs	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fa93 f2a3 	rbit	r2, r3
 80015fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001600:	601a      	str	r2, [r3, #0]
  return(result);
 8001602:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001606:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d102      	bne.n	8001622 <HAL_RCC_OscConfig+0xa6e>
 800161c:	4b85      	ldr	r3, [pc, #532]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	e001      	b.n	8001626 <HAL_RCC_OscConfig+0xa72>
 8001622:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800162a:	2102      	movs	r1, #2
 800162c:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	fa92 f1a2 	rbit	r1, r2
 8001638:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800163c:	6011      	str	r1, [r2, #0]
  return(result);
 800163e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	fab2 f282 	clz	r2, r2
 8001648:	b252      	sxtb	r2, r2
 800164a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164e:	b252      	sxtb	r2, r2
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f002 021f 	and.w	r2, r2, #31
 8001656:	40d3      	lsrs	r3, r2
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ac      	bne.n	80015ba <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 818a 	beq.w	8001980 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166c:	4b71      	ldr	r3, [pc, #452]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	f000 8181 	beq.w	800197c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b02      	cmp	r3, #2
 8001682:	f040 8107 	bne.w	8001894 <HAL_RCC_OscConfig+0xce0>
 8001686:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800168a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800168e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800169e:	601a      	str	r2, [r3, #0]
  return(result);
 80016a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016a4:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80016b0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80016b4:	461a      	mov	r2, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7fe ff91 	bl	80005e0 <HAL_GetTick>
 80016be:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c2:	e009      	b.n	80016d8 <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7fe ff8c 	bl	80005e0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e154      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 80016d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fa93 f2a3 	rbit	r2, r3
 80016ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016f0:	601a      	str	r2, [r3, #0]
  return(result);
 80016f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <HAL_RCC_OscConfig+0xb5e>
 800170c:	4b49      	ldr	r3, [pc, #292]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	e00e      	b.n	8001730 <HAL_RCC_OscConfig+0xb7c>
 8001712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001734:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001738:	6011      	str	r1, [r2, #0]
 800173a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	fa92 f1a2 	rbit	r1, r2
 8001744:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001748:	6011      	str	r1, [r2, #0]
  return(result);
 800174a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	fab2 f282 	clz	r2, r2
 8001754:	b252      	sxtb	r2, r2
 8001756:	f042 0220 	orr.w	r2, r2, #32
 800175a:	b252      	sxtb	r2, r2
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f002 021f 	and.w	r2, r2, #31
 8001762:	40d3      	lsrs	r3, r2
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ab      	bne.n	80016c4 <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001776:	d109      	bne.n	800178c <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	492b      	ldr	r1, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a19      	ldr	r1, [r3, #32]
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	430b      	orrs	r3, r1
 80017a2:	4924      	ldr	r1, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017c0:	601a      	str	r2, [r3, #0]
  return(result);
 80017c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017c6:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80017d2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80017d6:	461a      	mov	r2, r3
 80017d8:	2301      	movs	r3, #1
 80017da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7fe ff00 	bl	80005e0 <HAL_GetTick>
 80017e0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e4:	e009      	b.n	80017fa <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7fe fefb 	bl	80005e0 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0c3      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 80017fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001812:	601a      	str	r2, [r3, #0]
  return(result);
 8001814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001818:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d104      	bne.n	8001838 <HAL_RCC_OscConfig+0xc84>
 800182e:	4b01      	ldr	r3, [pc, #4]	; (8001834 <HAL_RCC_OscConfig+0xc80>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e010      	b.n	8001856 <HAL_RCC_OscConfig+0xca2>
 8001834:	40021000 	.word	0x40021000
 8001838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800183c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	4b4e      	ldr	r3, [pc, #312]	; (800198c <HAL_RCC_OscConfig+0xdd8>)
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800185a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800185e:	6011      	str	r1, [r2, #0]
 8001860:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	fa92 f1a2 	rbit	r1, r2
 800186a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800186e:	6011      	str	r1, [r2, #0]
  return(result);
 8001870:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	fab2 f282 	clz	r2, r2
 800187a:	b252      	sxtb	r2, r2
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	b252      	sxtb	r2, r2
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	f002 021f 	and.w	r2, r2, #31
 8001888:	40d3      	lsrs	r3, r2
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0a9      	beq.n	80017e6 <HAL_RCC_OscConfig+0xc32>
 8001892:	e075      	b.n	8001980 <HAL_RCC_OscConfig+0xdcc>
 8001894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800189c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	601a      	str	r2, [r3, #0]
  return(result);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80018be:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80018c2:	461a      	mov	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe fe8a 	bl	80005e0 <HAL_GetTick>
 80018cc:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7fe fe85 	bl	80005e0 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e04d      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	601a      	str	r2, [r3, #0]
  return(result);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	095b      	lsrs	r3, r3, #5
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0xd6c>
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_RCC_OscConfig+0xdd8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e00e      	b.n	800193e <HAL_RCC_OscConfig+0xd8a>
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_RCC_OscConfig+0xdd8>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f107 0210 	add.w	r2, r7, #16
 8001942:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001946:	6011      	str	r1, [r2, #0]
 8001948:	f107 0210 	add.w	r2, r7, #16
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	fa92 f1a2 	rbit	r1, r2
 8001952:	f107 020c 	add.w	r2, r7, #12
 8001956:	6011      	str	r1, [r2, #0]
  return(result);
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	fab2 f282 	clz	r2, r2
 8001962:	b252      	sxtb	r2, r2
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	b252      	sxtb	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	40d3      	lsrs	r3, r2
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ab      	bne.n	80018d2 <HAL_RCC_OscConfig+0xd1e>
 800197a:	e001      	b.n	8001980 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000

08001990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0a8      	sub	sp, #160	; 0xa0
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019a0:	4bb0      	ldr	r3, [pc, #704]	; (8001c64 <HAL_RCC_ClockConfig+0x2d4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	f240 812b 	bls.w	8001c06 <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b0:	4bac      	ldr	r3, [pc, #688]	; (8001c64 <HAL_RCC_ClockConfig+0x2d4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 0207 	bic.w	r2, r3, #7
 80019b8:	49aa      	ldr	r1, [pc, #680]	; (8001c64 <HAL_RCC_ClockConfig+0x2d4>)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019c0:	4ba8      	ldr	r3, [pc, #672]	; (8001c64 <HAL_RCC_ClockConfig+0x2d4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e25d      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019de:	4ba2      	ldr	r3, [pc, #648]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	499f      	ldr	r1, [pc, #636]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8225 	beq.w	8001e48 <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d140      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8001a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	095b      	lsrs	r3, r3, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d102      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xa8>
 8001a32:	4b8d      	ldr	r3, [pc, #564]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_ClockConfig+0xc0>
 8001a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a4c:	4b86      	ldr	r3, [pc, #536]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a54:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001a58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001a5c:	fa92 f2a2 	rbit	r2, r2
 8001a60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8001a64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b252      	sxtb	r2, r2
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b252      	sxtb	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f002 021f 	and.w	r2, r2, #31
 8001a7a:	40d3      	lsrs	r3, r2
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d170      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e202      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d137      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x170>
 8001a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_ClockConfig+0x12e>
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x140>
 8001abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	677b      	str	r3, [r7, #116]	; 0x74
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad4:	673a      	str	r2, [r7, #112]	; 0x70
 8001ad6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8001ade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b252      	sxtb	r2, r2
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	b252      	sxtb	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f002 021f 	and.w	r2, r2, #31
 8001af2:	40d3      	lsrs	r3, r2
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d134      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e1c6      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
 8001b00:	2302      	movs	r3, #2
 8001b02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	095b      	lsrs	r3, r3, #5
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x198>
 8001b22:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e007      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1a8>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	2202      	movs	r2, #2
 8001b3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b3e:	fa92 f2a2 	rbit	r2, r2
 8001b42:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b252      	sxtb	r2, r2
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b252      	sxtb	r2, r2
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f002 021f 	and.w	r2, r2, #31
 8001b58:	40d3      	lsrs	r3, r2
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e193      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	493d      	ldr	r1, [pc, #244]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7fe fd32 	bl	80005e0 <HAL_GetTick>
 8001b7c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d113      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b88:	e00b      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7fe fd29 	bl	80005e0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e175      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d1ed      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x1fa>
 8001bae:	e14b      	b.n	8001e48 <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d11f      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bba:	f7fe fd11 	bl	80005e0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e15d      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d1ed      	bne.n	8001bba <HAL_RCC_ClockConfig+0x22a>
 8001bde:	e133      	b.n	8001e48 <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7fe fcfe 	bl	80005e0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e14a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ed      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x250>
 8001c04:	e120      	b.n	8001e48 <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	4912      	ldr	r1, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80fa 	beq.w	8001e26 <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d139      	bne.n	8001cae <HAL_RCC_ClockConfig+0x31e>
 8001c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x2dc>
 8001c5e:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <HAL_RCC_ClockConfig+0x2d8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	e00c      	b.n	8001c7e <HAL_RCC_ClockConfig+0x2ee>
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
 8001c7a:	4b87      	ldr	r3, [pc, #540]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c82:	643a      	str	r2, [r7, #64]	; 0x40
 8001c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c86:	fa92 f2a2 	rbit	r2, r2
 8001c8a:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 8001c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	b252      	sxtb	r2, r2
 8001c94:	f042 0220 	orr.w	r2, r2, #32
 8001c98:	b252      	sxtb	r2, r2
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	40d3      	lsrs	r3, r2
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d16e      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0ef      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d135      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x392>
 8001cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x350>
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x362>
 8001ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cee:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	fab2 f282 	clz	r2, r2
 8001d06:	b252      	sxtb	r2, r2
 8001d08:	f042 0220 	orr.w	r2, r2, #32
 8001d0c:	b252      	sxtb	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	40d3      	lsrs	r3, r2
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d134      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0b5      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d2e:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_ClockConfig+0x3ba>
 8001d44:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_RCC_ClockConfig+0x3ca>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	613a      	str	r2, [r7, #16]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	fa92 f2a2 	rbit	r2, r2
 8001d64:	60fa      	str	r2, [r7, #12]
  return(result);
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b252      	sxtb	r2, r2
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	b252      	sxtb	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	40d3      	lsrs	r3, r2
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e082      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d88:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 0203 	bic.w	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4940      	ldr	r1, [pc, #256]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7fe fc21 	bl	80005e0 <HAL_GetTick>
 8001d9e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d113      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7fe fc18 	bl	80005e0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e064      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d1ed      	bne.n	8001dac <HAL_RCC_ClockConfig+0x41c>
 8001dd0:	e029      	b.n	8001e26 <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d11f      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7fe fc00 	bl	80005e0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e04c      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d1ed      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x44c>
 8001e00:	e011      	b.n	8001e26 <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e02:	f7fe fbed 	bl	80005e0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e039      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ed      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_ClockConfig+0x50c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <HAL_RCC_ClockConfig+0x50c>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x50c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e022      	b.n	8001e8e <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	490d      	ldr	r1, [pc, #52]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4905      	ldr	r1, [pc, #20]	; (8001e98 <HAL_RCC_ClockConfig+0x508>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7fe fb80 	bl	800058c <HAL_InitTick>
  
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	37a0      	adds	r7, #160	; 0xa0
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b490      	push	{r4, r7}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ea8:	1d3c      	adds	r4, r7, #4
 8001eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d002      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ede:	e043      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ee4:	e043      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eec:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f08:	4413      	add	r3, r2
 8001f0a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01e      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	617b      	str	r3, [r7, #20]
  return(result);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
 8001f56:	e004      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xec>)
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3738      	adds	r7, #56	; 0x38
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc90      	pop	{r4, r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	080027bc 	.word	0x080027bc
 8001f80:	080027cc 	.word	0x080027cc
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001f96:	f7ff ff83 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x44>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fa4:	23f0      	movs	r3, #240	; 0xf0
 8001fa6:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	603b      	str	r3, [r7, #0]
  return(result);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_RCC_GetHCLKFreq+0x48>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8001fc2:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x4c>)
 8001fc4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x4c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	080027d0 	.word	0x080027d0
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e01d      	b.n	800202e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fa5e 	bl	80004c8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 fa2a 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d122      	bne.n	80020c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d11b      	bne.n	80020c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f06f 0202 	mvn.w	r2, #2
 8002096:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9c8 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 80020b2:	e005      	b.n	80020c0 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f9bb 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f9ca 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d122      	bne.n	800211a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d11b      	bne.n	800211a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0204 	mvn.w	r2, #4
 80020ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f99e 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 8002106:	e005      	b.n	8002114 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f991 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f9a0 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b08      	cmp	r3, #8
 8002126:	d122      	bne.n	800216e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b08      	cmp	r3, #8
 8002134:	d11b      	bne.n	800216e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f06f 0208 	mvn.w	r2, #8
 800213e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f974 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 800215a:	e005      	b.n	8002168 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f967 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f976 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b10      	cmp	r3, #16
 800217a:	d122      	bne.n	80021c2 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b10      	cmp	r3, #16
 8002188:	d11b      	bne.n	80021c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0210 	mvn.w	r2, #16
 8002192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2208      	movs	r2, #8
 8002198:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f94a 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 80021ae:	e005      	b.n	80021bc <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f93d 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f94c 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10e      	bne.n	80021ee <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f06f 0201 	mvn.w	r2, #1
 80021e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fe f899 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d10e      	bne.n	800221a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b80      	cmp	r3, #128	; 0x80
 8002208:	d107      	bne.n	800221a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002212:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fa97 	bl	8002748 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002224:	2b40      	cmp	r3, #64	; 0x40
 8002226:	d10e      	bne.n	8002246 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b40      	cmp	r3, #64	; 0x40
 8002234:	d107      	bne.n	8002246 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800223e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f910 	bl	8002466 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b20      	cmp	r3, #32
 8002252:	d10e      	bne.n	8002272 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	d107      	bne.n	8002272 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 0220 	mvn.w	r2, #32
 800226a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fa62 	bl	8002736 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_TIM_ConfigClockSource+0x1c>
 8002292:	2302      	movs	r3, #2
 8002294:	e0c8      	b.n	8002428 <HAL_TIM_ConfigClockSource+0x1ae>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b40      	cmp	r3, #64	; 0x40
 80022cc:	d077      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x144>
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d80e      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x76>
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	f000 808a 	beq.w	80023ec <HAL_TIM_ConfigClockSource+0x172>
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d802      	bhi.n	80022e2 <HAL_TIM_ConfigClockSource+0x68>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d07e      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80022e0:	e099      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	f000 8089 	beq.w	80023fa <HAL_TIM_ConfigClockSource+0x180>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	f000 808d 	beq.w	8002408 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80022ee:	e092      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80022f0:	2b70      	cmp	r3, #112	; 0x70
 80022f2:	d016      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0xa8>
 80022f4:	2b70      	cmp	r3, #112	; 0x70
 80022f6:	d804      	bhi.n	8002302 <HAL_TIM_ConfigClockSource+0x88>
 80022f8:	2b50      	cmp	r3, #80	; 0x50
 80022fa:	d040      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x104>
 80022fc:	2b60      	cmp	r3, #96	; 0x60
 80022fe:	d04e      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x124>
    break;
 8002300:	e089      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	d003      	beq.n	8002310 <HAL_TIM_ConfigClockSource+0x96>
 8002308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230c:	d024      	beq.n	8002358 <HAL_TIM_ConfigClockSource+0xde>
    break;
 800230e:	e082      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0207 	bic.w	r2, r2, #7
 800231e:	609a      	str	r2, [r3, #8]
    break;
 8002320:	e079      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f000 f99b 	bl	800266c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002344:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800234c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	609a      	str	r2, [r3, #8]
    break;
 8002356:	e05e      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f000 f980 	bl	800266c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800237a:	609a      	str	r2, [r3, #8]
    break;
 800237c:	e04b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	461a      	mov	r2, r3
 800238c:	f000 f8ea 	bl	8002564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2150      	movs	r1, #80	; 0x50
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f949 	bl	800262e <TIM_ITRx_SetConfig>
    break;
 800239c:	e03b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f000 f90c 	bl	80025c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2160      	movs	r1, #96	; 0x60
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f939 	bl	800262e <TIM_ITRx_SetConfig>
    break;
 80023bc:	e02b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f000 f8ca 	bl	8002564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f929 	bl	800262e <TIM_ITRx_SetConfig>
    break;
 80023dc:	e01b      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f922 	bl	800262e <TIM_ITRx_SetConfig>
    break;
 80023ea:	e014      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2110      	movs	r1, #16
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f91b 	bl	800262e <TIM_ITRx_SetConfig>
    break;
 80023f8:	e00d      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2120      	movs	r1, #32
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f914 	bl	800262e <TIM_ITRx_SetConfig>
    break;
 8002406:	e006      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2130      	movs	r1, #48	; 0x30
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f90d 	bl	800262e <TIM_ITRx_SetConfig>
    break;
 8002414:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a30      	ldr	r2, [pc, #192]	; (8002550 <TIM_Base_SetConfig+0xd8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <TIM_Base_SetConfig+0x44>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a2f      	ldr	r2, [pc, #188]	; (8002554 <TIM_Base_SetConfig+0xdc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00f      	beq.n	80024bc <TIM_Base_SetConfig+0x44>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d00b      	beq.n	80024bc <TIM_Base_SetConfig+0x44>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <TIM_Base_SetConfig+0xe0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <TIM_Base_SetConfig+0x44>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a2b      	ldr	r2, [pc, #172]	; (800255c <TIM_Base_SetConfig+0xe4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <TIM_Base_SetConfig+0x44>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a2a      	ldr	r2, [pc, #168]	; (8002560 <TIM_Base_SetConfig+0xe8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d108      	bne.n	80024ce <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <TIM_Base_SetConfig+0xd8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <TIM_Base_SetConfig+0x86>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <TIM_Base_SetConfig+0xdc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00f      	beq.n	80024fe <TIM_Base_SetConfig+0x86>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d00b      	beq.n	80024fe <TIM_Base_SetConfig+0x86>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <TIM_Base_SetConfig+0xe0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0x86>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1a      	ldr	r2, [pc, #104]	; (800255c <TIM_Base_SetConfig+0xe4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0x86>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <TIM_Base_SetConfig+0xe8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a09      	ldr	r2, [pc, #36]	; (8002550 <TIM_Base_SetConfig+0xd8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <TIM_Base_SetConfig+0xbe>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <TIM_Base_SetConfig+0xdc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d103      	bne.n	800253e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	615a      	str	r2, [r3, #20]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40013400 	.word	0x40013400
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	40000c00 	.word	0x40000c00

08002564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	f023 0201 	bic.w	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002596:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f023 030a 	bic.w	r3, r3, #10
 80025a8:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	621a      	str	r2, [r3, #32]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 0210 	bic.w	r2, r3, #16
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	031b      	lsls	r3, r3, #12
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800260c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	f043 0307 	orr.w	r3, r3, #7
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	609a      	str	r2, [r3, #8]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800268a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	021a      	lsls	r2, r3, #8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	431a      	orrs	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4313      	orrs	r3, r2
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e032      	b.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026e4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002706:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
	...

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	2500      	movs	r5, #0
 8002760:	4e0c      	ldr	r6, [pc, #48]	; (8002794 <__libc_init_array+0x38>)
 8002762:	4c0d      	ldr	r4, [pc, #52]	; (8002798 <__libc_init_array+0x3c>)
 8002764:	1ba4      	subs	r4, r4, r6
 8002766:	10a4      	asrs	r4, r4, #2
 8002768:	42a5      	cmp	r5, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	f000 f81a 	bl	80027a4 <_init>
 8002770:	2500      	movs	r5, #0
 8002772:	4e0a      	ldr	r6, [pc, #40]	; (800279c <__libc_init_array+0x40>)
 8002774:	4c0a      	ldr	r4, [pc, #40]	; (80027a0 <__libc_init_array+0x44>)
 8002776:	1ba4      	subs	r4, r4, r6
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	42a5      	cmp	r5, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002784:	4798      	blx	r3
 8002786:	3501      	adds	r5, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800278e:	4798      	blx	r3
 8002790:	3501      	adds	r5, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	080027e0 	.word	0x080027e0
 8002798:	080027e0 	.word	0x080027e0
 800279c:	080027e0 	.word	0x080027e0
 80027a0:	080027e4 	.word	0x080027e4

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
