
touchGFX_practice1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fcc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ac  20000010  080062a4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000bc  080062a4  000200bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001391e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022a2  00000000  00000000  0003395c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ad8  00000000  00000000  00035c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a00  00000000  00000000  000366d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d7b3  00000000  00000000  000370d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a640  00000000  00000000  0007488b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00190e9a  00000000  00000000  0007eecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0020fd65  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c08  00000000  00000000  0020fde0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800624c 	.word	0x0800624c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800624c 	.word	0x0800624c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <SystemInit+0xc4>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <SystemInit+0xc4>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemInit+0xc4>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemInit+0xc4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemInit+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemInit+0xc8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemInit+0xc8>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemInit+0xc8>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4924      	ldr	r1, [pc, #144]	; (80006a0 <SystemInit+0xc8>)
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SystemInit+0xcc>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemInit+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SystemInit+0xc8>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemInit+0xc8>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemInit+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <SystemInit+0xc8>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SystemInit+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemInit+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <SystemInit+0xc8>)
 8000642:	2200      	movs	r2, #0
 8000644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <SystemInit+0xc8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <SystemInit+0xc8>)
 800064e:	2200      	movs	r2, #0
 8000650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <SystemInit+0xc8>)
 8000654:	2200      	movs	r2, #0
 8000656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <SystemInit+0xc8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <SystemInit+0xc8>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SystemInit+0xc8>)
 8000666:	2200      	movs	r2, #0
 8000668:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <SystemInit+0xd0>)
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <SystemInit+0xd0>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <SystemInit+0xd4>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <SystemInit+0xd8>)
 800067c:	4013      	ands	r3, r2
 800067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000682:	d202      	bcs.n	800068a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <SystemInit+0xdc>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SystemInit+0xc4>)
 800068c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000690:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	58024400 	.word	0x58024400
 80006a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006a8:	580000c0 	.word	0x580000c0
 80006ac:	5c001000 	.word	0x5c001000
 80006b0:	ffff0000 	.word	0xffff0000
 80006b4:	51008108 	.word	0x51008108

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80006c4:	bf00      	nop
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <main+0x94>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <main+0x24>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dcf4      	bgt.n	80006c6 <main+0xe>
  if ( timeout < 0 )
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da01      	bge.n	80006e6 <main+0x2e>
  {
  Error_Handler();
 80006e2:	f000 f9d1 	bl	8000a88 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fa93 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f831 	bl	8000750 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <main+0x94>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a15      	ldr	r2, [pc, #84]	; (800074c <main+0x94>)
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <main+0x94>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 fdb1 	bl	8001274 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fdc7 	bl	80012a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000720:	bf00      	nop
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <main+0x94>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <main+0x80>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dcf4      	bgt.n	8000722 <main+0x6a>
if ( timeout < 0 )
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	da01      	bge.n	8000742 <main+0x8a>
{
Error_Handler();
 800073e:	f000 f9a3 	bl	8000a88 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f94f 	bl	80009e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000746:	f000 f901 	bl	800094c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074a:	e7fe      	b.n	800074a <main+0x92>
 800074c:	58024400 	.word	0x58024400

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0cc      	sub	sp, #304	; 0x130
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f005 fd6c 	bl	800623c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f005 fd65 	bl	800623c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	23c0      	movs	r3, #192	; 0xc0
 8000778:	461a      	mov	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f005 fd5e 	bl	800623c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000780:	2004      	movs	r0, #4
 8000782:	f000 fda5 	bl	80012d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	4b6b      	ldr	r3, [pc, #428]	; (800093c <SystemClock_Config+0x1ec>)
 800078e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000790:	4a6a      	ldr	r2, [pc, #424]	; (800093c <SystemClock_Config+0x1ec>)
 8000792:	f023 0301 	bic.w	r3, r3, #1
 8000796:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000798:	4b68      	ldr	r3, [pc, #416]	; (800093c <SystemClock_Config+0x1ec>)
 800079a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079c:	f003 0201 	and.w	r2, r3, #1
 80007a0:	463b      	mov	r3, r7
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	4b66      	ldr	r3, [pc, #408]	; (8000940 <SystemClock_Config+0x1f0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a65      	ldr	r2, [pc, #404]	; (8000940 <SystemClock_Config+0x1f0>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b63      	ldr	r3, [pc, #396]	; (8000940 <SystemClock_Config+0x1f0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007b8:	463b      	mov	r3, r7
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	463b      	mov	r3, r7
 80007be:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c0:	bf00      	nop
 80007c2:	4b5f      	ldr	r3, [pc, #380]	; (8000940 <SystemClock_Config+0x1f0>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ce:	d1f8      	bne.n	80007c2 <SystemClock_Config+0x72>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007d0:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <SystemClock_Config+0x1f4>)
 80007d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d4:	4a5b      	ldr	r2, [pc, #364]	; (8000944 <SystemClock_Config+0x1f4>)
 80007d6:	f023 0303 	bic.w	r3, r3, #3
 80007da:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007dc:	230a      	movs	r3, #10
 80007de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000800:	2320      	movs	r3, #32
 8000802:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000806:	2381      	movs	r3, #129	; 0x81
 8000808:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fda5 	bl	8001384 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000840:	f000 f922 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	233f      	movs	r3, #63	; 0x3f
 8000846:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f001 f95a 	bl	8001b34 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000886:	f000 f8ff 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4a2e      	ldr	r2, [pc, #184]	; (8000948 <SystemClock_Config+0x1f8>)
 800088e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPDIFRX
                              |RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CEC
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2220      	movs	r2, #32
 8000894:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2281      	movs	r2, #129	; 0x81
 800089a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2202      	movs	r2, #2
 80008a0:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2202      	movs	r2, #2
 80008a6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2202      	movs	r2, #2
 80008ac:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	665a      	str	r2, [r3, #100]	; 0x64
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fcfb 	bl	8002310 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x1d4>
  {
    Error_Handler();
 8000920:	f000 f8b2 	bl	8000a88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000924:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f001 fab8 	bl	8001ea0 <HAL_RCC_MCOConfig>
}
 8000930:	bf00      	nop
 8000932:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	58000400 	.word	0x58000400
 8000940:	58024800 	.word	0x58024800
 8000944:	58024400 	.word	0x58024400
 8000948:	0bc93103 	.word	0x0bc93103

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART1_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x90>)
 8000996:	f002 ffd7 	bl	8003948 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f872 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009a8:	f005 fb3f 	bl	800602a <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f869 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ba:	f005 fb74 	bl	80060a6 <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f860 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART1_UART_Init+0x90>)
 80009ca:	f005 faf5 	bl	8005fb8 <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f858 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000002c 	.word	0x2000002c
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_GPIO_Init+0x9c>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_GPIO_Init+0x9c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_GPIO_Init+0xa0>)
 8000a72:	f000 fa4f 	bl	8000f14 <HAL_GPIO_Init>

}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58020000 	.word	0x58020000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa4:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x30>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x30>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	58024400 	.word	0x58024400

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <HAL_UART_MspInit+0x88>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12e      	bne.n	8000b4c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_UART_MspInit+0x90>)
 8000b48:	f000 f9e4 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40011000 	.word	0x40011000
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020000 	.word	0x58020000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f89e 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bc2:	e003      	b.n	8000bcc <LoopCopyDataInit>

08000bc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bca:	3104      	adds	r1, #4

08000bcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bd4:	d3f6      	bcc.n	8000bc4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bd8:	e002      	b.n	8000be0 <LoopFillZerobss>

08000bda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bdc:	f842 3b04 	str.w	r3, [r2], #4

08000be0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000be2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000be4:	d3f9      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be6:	f7ff fcf7 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f005 fb03 	bl	80061f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd63 	bl	80006b8 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bf8:	08006294 	.word	0x08006294
  ldr  r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c00:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c04:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c08:	200000bc 	.word	0x200000bc

08000c0c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC3_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f94a 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c1c:	f001 f9aa 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8000c20:	4601      	mov	r1, r0
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_Init+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <HAL_Init+0x6c>)
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	f003 031f 	and.w	r3, r3, #31
 8000c34:	fa21 f303 	lsr.w	r3, r1, r3
 8000c38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_Init+0x68>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_Init+0x6c>)
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	f003 031f 	and.w	r3, r3, #31
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <HAL_Init+0x70>)
 8000c52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <HAL_Init+0x74>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f814 	bl	8000c88 <HAL_InitTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e002      	b.n	8000c70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6a:	f7ff ff15 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	08006274 	.word	0x08006274
 8000c80:	20000004 	.word	0x20000004
 8000c84:	20000000 	.word	0x20000000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_InitTick+0x60>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e021      	b.n	8000ce0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_InitTick+0x64>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_InitTick+0x60>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f921 	bl	8000efa <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00e      	b.n	8000ce0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d80a      	bhi.n	8000cde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f8f9 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_InitTick+0x68>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	200000b8 	.word	0x200000b8

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200000b8 	.word	0x200000b8

08000d34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetREVID+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	0c1b      	lsrs	r3, r3, #16
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	5c001000 	.word	0x5c001000

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <__NVIC_SetPriorityGrouping+0x40>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x40>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	05fa0000 	.word	0x05fa0000

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff47 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff5e 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffb2 	bl	8000e6c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f22:	4b89      	ldr	r3, [pc, #548]	; (8001148 <HAL_GPIO_Init+0x234>)
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f26:	e194      	b.n	8001252 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8186 	beq.w	800124c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d00b      	beq.n	8000f60 <HAL_GPIO_Init+0x4c>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d007      	beq.n	8000f60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f54:	2b11      	cmp	r3, #17
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b12      	cmp	r3, #18
 8000f5e:	d130      	bne.n	8000fc2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f96:	2201      	movs	r2, #1
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 0201 	and.w	r2, r3, #1
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0xee>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	69b9      	ldr	r1, [r7, #24]
 8001046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0203 	and.w	r2, r3, #3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80e0 	beq.w	800124c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	4b2f      	ldr	r3, [pc, #188]	; (800114c <HAL_GPIO_Init+0x238>)
 800108e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001092:	4a2e      	ldr	r2, [pc, #184]	; (800114c <HAL_GPIO_Init+0x238>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_GPIO_Init+0x238>)
 800109e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010aa:	4a29      	ldr	r2, [pc, #164]	; (8001150 <HAL_GPIO_Init+0x23c>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <HAL_GPIO_Init+0x240>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d052      	beq.n	800117c <HAL_GPIO_Init+0x268>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <HAL_GPIO_Init+0x244>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d031      	beq.n	8001142 <HAL_GPIO_Init+0x22e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_GPIO_Init+0x248>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d02b      	beq.n	800113e <HAL_GPIO_Init+0x22a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_GPIO_Init+0x24c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d025      	beq.n	800113a <HAL_GPIO_Init+0x226>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <HAL_GPIO_Init+0x250>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01f      	beq.n	8001136 <HAL_GPIO_Init+0x222>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <HAL_GPIO_Init+0x254>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x21e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_GPIO_Init+0x258>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x21a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_GPIO_Init+0x25c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x216>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x260>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x212>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_GPIO_Init+0x264>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x20e>
 800111e:	2309      	movs	r3, #9
 8001120:	e02d      	b.n	800117e <HAL_GPIO_Init+0x26a>
 8001122:	230a      	movs	r3, #10
 8001124:	e02b      	b.n	800117e <HAL_GPIO_Init+0x26a>
 8001126:	2308      	movs	r3, #8
 8001128:	e029      	b.n	800117e <HAL_GPIO_Init+0x26a>
 800112a:	2307      	movs	r3, #7
 800112c:	e027      	b.n	800117e <HAL_GPIO_Init+0x26a>
 800112e:	2306      	movs	r3, #6
 8001130:	e025      	b.n	800117e <HAL_GPIO_Init+0x26a>
 8001132:	2305      	movs	r3, #5
 8001134:	e023      	b.n	800117e <HAL_GPIO_Init+0x26a>
 8001136:	2304      	movs	r3, #4
 8001138:	e021      	b.n	800117e <HAL_GPIO_Init+0x26a>
 800113a:	2303      	movs	r3, #3
 800113c:	e01f      	b.n	800117e <HAL_GPIO_Init+0x26a>
 800113e:	2302      	movs	r3, #2
 8001140:	e01d      	b.n	800117e <HAL_GPIO_Init+0x26a>
 8001142:	2301      	movs	r3, #1
 8001144:	e01b      	b.n	800117e <HAL_GPIO_Init+0x26a>
 8001146:	bf00      	nop
 8001148:	58000080 	.word	0x58000080
 800114c:	58024400 	.word	0x58024400
 8001150:	58000400 	.word	0x58000400
 8001154:	58020000 	.word	0x58020000
 8001158:	58020400 	.word	0x58020400
 800115c:	58020800 	.word	0x58020800
 8001160:	58020c00 	.word	0x58020c00
 8001164:	58021000 	.word	0x58021000
 8001168:	58021400 	.word	0x58021400
 800116c:	58021800 	.word	0x58021800
 8001170:	58021c00 	.word	0x58021c00
 8001174:	58022000 	.word	0x58022000
 8001178:	58022400 	.word	0x58022400
 800117c:	2300      	movs	r3, #0
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118e:	4938      	ldr	r1, [pc, #224]	; (8001270 <HAL_GPIO_Init+0x35c>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3301      	adds	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	f47f ae63 	bne.w	8000f28 <HAL_GPIO_Init+0x14>
  }
}
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	58000400 	.word	0x58000400

08001274 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800127c:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_HSEM_FastTake+0x2c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3320      	adds	r3, #32
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_HSEM_FastTake+0x30>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e000      	b.n	8001292 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	58026400 	.word	0x58026400
 80012a4:	80000300 	.word	0x80000300

080012a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012b2:	4906      	ldr	r1, [pc, #24]	; (80012cc <HAL_HSEM_Release+0x24>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	58026400 	.word	0x58026400

080012d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	d00a      	beq.n	80012fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d001      	beq.n	80012f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e040      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e03e      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001302:	491f      	ldr	r1, [pc, #124]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800130a:	f7ff fd07 	bl	8000d1c <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001310:	e009      	b.n	8001326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001312:	f7ff fd03 	bl	8000d1c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001320:	d901      	bls.n	8001326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e028      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001332:	d1ee      	bne.n	8001312 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b1e      	cmp	r3, #30
 8001338:	d008      	beq.n	800134c <HAL_PWREx_ConfigSupply+0x7c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b2e      	cmp	r3, #46	; 0x2e
 800133e:	d005      	beq.n	800134c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b1d      	cmp	r3, #29
 8001344:	d002      	beq.n	800134c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b2d      	cmp	r3, #45	; 0x2d
 800134a:	d114      	bne.n	8001376 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800134c:	f7ff fce6 	bl	8000d1c <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001352:	e009      	b.n	8001368 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001354:	f7ff fce2 	bl	8000d1c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001362:	d901      	bls.n	8001368 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e007      	b.n	8001378 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_PWREx_ConfigSupply+0xb0>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d1ee      	bne.n	8001354 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	58024800 	.word	0x58024800

08001384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e3c4      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8087 	beq.w	80014b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a4:	4ba2      	ldr	r3, [pc, #648]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013ae:	4ba0      	ldr	r3, [pc, #640]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b6:	2b10      	cmp	r3, #16
 80013b8:	d007      	beq.n	80013ca <HAL_RCC_OscConfig+0x46>
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	2b18      	cmp	r3, #24
 80013be:	d110      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5e>
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d10b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ca:	4b99      	ldr	r3, [pc, #612]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d06c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x12c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d168      	bne.n	80014b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e39e      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x76>
 80013ec:	4b90      	ldr	r3, [pc, #576]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a8f      	ldr	r2, [pc, #572]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e02e      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x98>
 8001402:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a8a      	ldr	r2, [pc, #552]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a87      	ldr	r2, [pc, #540]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0xbc>
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a81      	ldr	r2, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b7f      	ldr	r3, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7e      	ldr	r2, [pc, #504]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xd4>
 8001440:	4b7b      	ldr	r3, [pc, #492]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a7a      	ldr	r2, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a77      	ldr	r2, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc5c 	bl	8000d1c <HAL_GetTick>
 8001464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc58 	bl	8000d1c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e352      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800147a:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xe4>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc48 	bl	8000d1c <HAL_GetTick>
 800148c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc44 	bl	8000d1c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e33e      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x10c>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8092 	beq.w	80015e4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ca:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <HAL_RCC_OscConfig+0x162>
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	2b18      	cmp	r3, #24
 80014da:	d12d      	bne.n	8001538 <HAL_RCC_OscConfig+0x1b4>
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d128      	bne.n	8001538 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e6:	4b52      	ldr	r3, [pc, #328]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x17a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e310      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	f7ff fc19 	bl	8000d34 <HAL_GetREVID>
 8001502:	4602      	mov	r2, r0
 8001504:	f241 0303 	movw	r3, #4099	; 0x1003
 8001508:	429a      	cmp	r2, r3
 800150a:	d80a      	bhi.n	8001522 <HAL_RCC_OscConfig+0x19e>
 800150c:	4b48      	ldr	r3, [pc, #288]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	4945      	ldr	r1, [pc, #276]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001520:	e060      	b.n	80015e4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	493f      	ldr	r1, [pc, #252]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001536:	e055      	b.n	80015e4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d038      	beq.n	80015b2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001540:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 0219 	bic.w	r2, r3, #25
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4938      	ldr	r1, [pc, #224]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fbe3 	bl	8000d1c <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fbdf 	bl	8000d1c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e2d9      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156c:	4b30      	ldr	r3, [pc, #192]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	f7ff fbdc 	bl	8000d34 <HAL_GetREVID>
 800157c:	4602      	mov	r2, r0
 800157e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001582:	429a      	cmp	r2, r3
 8001584:	d80a      	bhi.n	800159c <HAL_RCC_OscConfig+0x218>
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	031b      	lsls	r3, r3, #12
 8001594:	4926      	ldr	r1, [pc, #152]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
 800159a:	e023      	b.n	80015e4 <HAL_RCC_OscConfig+0x260>
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	061b      	lsls	r3, r3, #24
 80015aa:	4921      	ldr	r1, [pc, #132]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e018      	b.n	80015e4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff fbad 	bl	8000d1c <HAL_GetTick>
 80015c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fba9 	bl	8000d1c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e2a3      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8091 	beq.w	8001714 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b08      	cmp	r3, #8
 8001606:	d007      	beq.n	8001618 <HAL_RCC_OscConfig+0x294>
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b18      	cmp	r3, #24
 800160c:	d12f      	bne.n	800166e <HAL_RCC_OscConfig+0x2ea>
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d12a      	bne.n	800166e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x2ac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <HAL_RCC_OscConfig+0x2b0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	2b80      	cmp	r3, #128	; 0x80
 800162a:	d003      	beq.n	8001634 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e277      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
 8001630:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001634:	f7ff fb7e 	bl	8000d34 <HAL_GetREVID>
 8001638:	4602      	mov	r2, r0
 800163a:	f241 0303 	movw	r3, #4099	; 0x1003
 800163e:	429a      	cmp	r2, r3
 8001640:	d80a      	bhi.n	8001658 <HAL_RCC_OscConfig+0x2d4>
 8001642:	4ba2      	ldr	r3, [pc, #648]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	069b      	lsls	r3, r3, #26
 8001650:	499e      	ldr	r1, [pc, #632]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001656:	e05d      	b.n	8001714 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001658:	4b9c      	ldr	r3, [pc, #624]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	4999      	ldr	r1, [pc, #612]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001668:	4313      	orrs	r3, r2
 800166a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800166c:	e052      	b.n	8001714 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d035      	beq.n	80016e2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001676:	4b95      	ldr	r3, [pc, #596]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a94      	ldr	r2, [pc, #592]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fb4b 	bl	8000d1c <HAL_GetTick>
 8001686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800168a:	f7ff fb47 	bl	8000d1c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e241      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800169c:	4b8b      	ldr	r3, [pc, #556]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016a8:	f7ff fb44 	bl	8000d34 <HAL_GetREVID>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d80a      	bhi.n	80016cc <HAL_RCC_OscConfig+0x348>
 80016b6:	4b85      	ldr	r3, [pc, #532]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	069b      	lsls	r3, r3, #26
 80016c4:	4981      	ldr	r1, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
 80016ca:	e023      	b.n	8001714 <HAL_RCC_OscConfig+0x390>
 80016cc:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	497c      	ldr	r1, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e018      	b.n	8001714 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a79      	ldr	r2, [pc, #484]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80016e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb15 	bl	8000d1c <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016f6:	f7ff fb11 	bl	8000d1c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e20b      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001708:	4b70      	ldr	r3, [pc, #448]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d036      	beq.n	800178e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d019      	beq.n	800175c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001728:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172c:	4a67      	ldr	r2, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff faf2 	bl	8000d1c <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff faee 	bl	8000d1c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1e8      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x3b8>
 800175a:	e018      	b.n	800178e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800175e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001760:	4a5a      	ldr	r2, [pc, #360]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fad8 	bl	8000d1c <HAL_GetTick>
 800176c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fad4 	bl	8000d1c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1ce      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001782:	4b52      	ldr	r3, [pc, #328]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	2b00      	cmp	r3, #0
 8001798:	d036      	beq.n	8001808 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d019      	beq.n	80017d6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80017a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fab5 	bl	8000d1c <HAL_GetTick>
 80017b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017b6:	f7ff fab1 	bl	8000d1c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1ab      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017c8:	4b40      	ldr	r3, [pc, #256]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x432>
 80017d4:	e018      	b.n	8001808 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a3c      	ldr	r2, [pc, #240]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80017dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fa9b 	bl	8000d1c <HAL_GetTick>
 80017e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017ea:	f7ff fa97 	bl	8000d1c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e191      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8086 	beq.w	8001922 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_RCC_OscConfig+0x54c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <HAL_RCC_OscConfig+0x54c>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001822:	f7ff fa7b 	bl	8000d1c <HAL_GetTick>
 8001826:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800182a:	f7ff fa77 	bl	8000d1c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e171      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_OscConfig+0x54c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x4da>
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
 800185c:	e02d      	b.n	80018ba <HAL_RCC_OscConfig+0x536>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x4fc>
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a18      	ldr	r2, [pc, #96]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	e01c      	b.n	80018ba <HAL_RCC_OscConfig+0x536>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x51e>
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	e00b      	b.n	80018ba <HAL_RCC_OscConfig+0x536>
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x548>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01a      	beq.n	80018f8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fa2b 	bl	8000d1c <HAL_GetTick>
 80018c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018c8:	e00f      	b.n	80018ea <HAL_RCC_OscConfig+0x566>
 80018ca:	bf00      	nop
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d4:	f7ff fa22 	bl	8000d1c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e11a      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ea:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ee      	beq.n	80018d4 <HAL_RCC_OscConfig+0x550>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa10 	bl	8000d1c <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fa0c 	bl	8000d1c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e104      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001916:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ee      	bne.n	8001900 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80f9 	beq.w	8001b1e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800192c:	4b7e      	ldr	r3, [pc, #504]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001934:	2b18      	cmp	r3, #24
 8001936:	f000 80b4 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	2b02      	cmp	r3, #2
 8001940:	f040 8095 	bne.w	8001a6e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001944:	4b78      	ldr	r3, [pc, #480]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a77      	ldr	r2, [pc, #476]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 800194a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f9e4 	bl	8000d1c <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f9e0 	bl	8000d1c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0da      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800196a:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001976:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800197a:	4b6c      	ldr	r3, [pc, #432]	; (8001b2c <HAL_RCC_OscConfig+0x7a8>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	430a      	orrs	r2, r1
 800198a:	4967      	ldr	r1, [pc, #412]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	628b      	str	r3, [r1, #40]	; 0x28
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	3b01      	subs	r3, #1
 8001996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	3b01      	subs	r3, #1
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	3b01      	subs	r3, #1
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	3b01      	subs	r3, #1
 80019ba:	061b      	lsls	r3, r3, #24
 80019bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019c0:	4959      	ldr	r1, [pc, #356]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80019c6:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	4a57      	ldr	r2, [pc, #348]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019d2:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <HAL_RCC_OscConfig+0x7ac>)
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019de:	00d2      	lsls	r2, r2, #3
 80019e0:	4951      	ldr	r1, [pc, #324]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f023 020c 	bic.w	r2, r3, #12
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	494d      	ldr	r1, [pc, #308]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f023 0202 	bic.w	r2, r3, #2
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	4948      	ldr	r1, [pc, #288]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	4a46      	ldr	r2, [pc, #280]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	4a43      	ldr	r2, [pc, #268]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	4a40      	ldr	r2, [pc, #256]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a3a      	ldr	r2, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f969 	bl	8000d1c <HAL_GetTick>
 8001a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f965 	bl	8000d1c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e05f      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x6ca>
 8001a6c:	e057      	b.n	8001b1e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f94f 	bl	8000d1c <HAL_GetTick>
 8001a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f94b 	bl	8000d1c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e045      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x6fe>
 8001aa0:	e03d      	b.n	8001b1e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <HAL_RCC_OscConfig+0x7a4>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d031      	beq.n	8001b1a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d12a      	bne.n	8001b1a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d122      	bne.n	8001b1a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d11a      	bne.n	8001b1a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	0a5b      	lsrs	r3, r3, #9
 8001ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d111      	bne.n	8001b1a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d108      	bne.n	8001b1a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	0e1b      	lsrs	r3, r3, #24
 8001b0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	fffffc0c 	.word	0xfffffc0c
 8001b30:	ffff0007 	.word	0xffff0007

08001b34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e19c      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b8a      	ldr	r3, [pc, #552]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 020f 	bic.w	r2, r3, #15
 8001b5e:	4985      	ldr	r1, [pc, #532]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e184      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d908      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b94:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4975      	ldr	r1, [pc, #468]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	496a      	ldr	r1, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	4b64      	ldr	r3, [pc, #400]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d908      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bf0:	4b61      	ldr	r3, [pc, #388]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	495e      	ldr	r1, [pc, #376]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d908      	bls.n	8001c30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4953      	ldr	r1, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f023 020f 	bic.w	r2, r3, #15
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4947      	ldr	r1, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d055      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4940      	ldr	r1, [pc, #256]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c84:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0f6      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d115      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0ea      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0de      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d6      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f023 0207 	bic.w	r2, r3, #7
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4925      	ldr	r1, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f819 	bl	8000d1c <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cee:	f7ff f815 	bl	8000d1c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0be      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d1eb      	bne.n	8001cee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d208      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x244>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d214      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	4906      	ldr	r1, [pc, #24]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <HAL_RCC_ClockConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e086      	b.n	8001e82 <HAL_RCC_ClockConfig+0x34e>
 8001d74:	52002000 	.word	0x52002000
 8001d78:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d208      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d98:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4939      	ldr	r1, [pc, #228]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d208      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	492e      	ldr	r1, [pc, #184]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699a      	ldr	r2, [r3, #24]
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d208      	bcs.n	8001e06 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4922      	ldr	r1, [pc, #136]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d208      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4917      	ldr	r1, [pc, #92]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e34:	f000 f89e 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_RCC_ClockConfig+0x35c>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8001e50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x358>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_RCC_ClockConfig+0x35c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x360>)
 8001e6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_RCC_ClockConfig+0x364>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_RCC_ClockConfig+0x368>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe ff06 	bl	8000c88 <HAL_InitTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	08006274 	.word	0x08006274
 8001e94:	20000004 	.word	0x20000004
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d12a      	bne.n	8001f08 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	481f      	ldr	r0, [pc, #124]	; (8001f6c <HAL_RCC_MCOConfig+0xcc>)
 8001eee:	f7ff f811 	bl	8000f14 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	430b      	orrs	r3, r1
 8001f00:	4919      	ldr	r1, [pc, #100]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001f06:	e02a      	b.n	8001f5e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4619      	mov	r1, r3
 8001f42:	480b      	ldr	r0, [pc, #44]	; (8001f70 <HAL_RCC_MCOConfig+0xd0>)
 8001f44:	f7fe ffe6 	bl	8000f14 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	01d9      	lsls	r1, r3, #7
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	430b      	orrs	r3, r1
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <HAL_RCC_MCOConfig+0xc8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	610b      	str	r3, [r1, #16]
}
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58020000 	.word	0x58020000
 8001f70:	58020800 	.word	0x58020800

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f7a:	4baf      	ldr	r3, [pc, #700]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f82:	2b18      	cmp	r3, #24
 8001f84:	f200 814e 	bhi.w	8002224 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001ff5 	.word	0x08001ff5
 8001f94:	08002225 	.word	0x08002225
 8001f98:	08002225 	.word	0x08002225
 8001f9c:	08002225 	.word	0x08002225
 8001fa0:	08002225 	.word	0x08002225
 8001fa4:	08002225 	.word	0x08002225
 8001fa8:	08002225 	.word	0x08002225
 8001fac:	08002225 	.word	0x08002225
 8001fb0:	0800201b 	.word	0x0800201b
 8001fb4:	08002225 	.word	0x08002225
 8001fb8:	08002225 	.word	0x08002225
 8001fbc:	08002225 	.word	0x08002225
 8001fc0:	08002225 	.word	0x08002225
 8001fc4:	08002225 	.word	0x08002225
 8001fc8:	08002225 	.word	0x08002225
 8001fcc:	08002225 	.word	0x08002225
 8001fd0:	08002021 	.word	0x08002021
 8001fd4:	08002225 	.word	0x08002225
 8001fd8:	08002225 	.word	0x08002225
 8001fdc:	08002225 	.word	0x08002225
 8001fe0:	08002225 	.word	0x08002225
 8001fe4:	08002225 	.word	0x08002225
 8001fe8:	08002225 	.word	0x08002225
 8001fec:	08002225 	.word	0x08002225
 8001ff0:	08002027 	.word	0x08002027
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ff4:	4b90      	ldr	r3, [pc, #576]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002000:	4b8d      	ldr	r3, [pc, #564]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	4a8c      	ldr	r2, [pc, #560]	; (800223c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002012:	e10a      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002014:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002016:	61bb      	str	r3, [r7, #24]
    break;
 8002018:	e107      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800201c:	61bb      	str	r3, [r7, #24]
    break;
 800201e:	e104      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002020:	4b88      	ldr	r3, [pc, #544]	; (8002244 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002022:	61bb      	str	r3, [r7, #24]
    break;
 8002024:	e101      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002026:	4b84      	ldr	r3, [pc, #528]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002030:	4b81      	ldr	r3, [pc, #516]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800203c:	4b7e      	ldr	r3, [pc, #504]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002046:	4b7c      	ldr	r3, [pc, #496]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80da 	beq.w	800221e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d05a      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x1b2>
 8002070:	2b01      	cmp	r3, #1
 8002072:	d302      	bcc.n	800207a <HAL_RCC_GetSysClockFreq+0x106>
 8002074:	2b02      	cmp	r3, #2
 8002076:	d078      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x1f6>
 8002078:	e099      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d02d      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b0:	4b61      	ldr	r3, [pc, #388]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2d4>
 80020c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020e0:	e087      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800224c <HAL_RCC_GetSysClockFreq+0x2d8>
 80020f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002104:	ed97 6a02 	vldr	s12, [r7, #8]
 8002108:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2d4>
 800210c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002124:	e065      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002130:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002148:	ed97 6a02 	vldr	s12, [r7, #8]
 800214c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800215c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002164:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002168:	e043      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002174:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002254 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002190:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ac:	e021      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	ee07 3a90 	vmov	s15, r3
 80021b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002250 <HAL_RCC_GetSysClockFreq+0x2dc>
 80021bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80021d4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2d4>
 80021d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021f0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fc:	3301      	adds	r3, #1
 80021fe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800220a:	edd7 6a07 	vldr	s13, [r7, #28]
 800220e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002216:	ee17 3a90 	vmov	r3, s15
 800221a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800221c:	e005      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
    break;
 8002222:	e002      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002226:	61bb      	str	r3, [r7, #24]
    break;
 8002228:	bf00      	nop
  }

  return sysclockfreq;
 800222a:	69bb      	ldr	r3, [r7, #24]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3724      	adds	r7, #36	; 0x24
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	58024400 	.word	0x58024400
 800223c:	03d09000 	.word	0x03d09000
 8002240:	003d0900 	.word	0x003d0900
 8002244:	017d7840 	.word	0x017d7840
 8002248:	46000000 	.word	0x46000000
 800224c:	4c742400 	.word	0x4c742400
 8002250:	4a742400 	.word	0x4a742400
 8002254:	4bbebc20 	.word	0x4bbebc20

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800225e:	f7ff fe89 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8002262:	4601      	mov	r1, r0
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <HAL_RCC_GetHCLKFreq+0x54>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	fa21 f303 	lsr.w	r3, r1, r3
 800227a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_GetHCLKFreq+0x54>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002294:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58024400 	.word	0x58024400
 80022ac:	08006274 	.word	0x08006274
 80022b0:	20000004 	.word	0x20000004
 80022b4:	20000000 	.word	0x20000000

080022b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80022bc:	f7ff ffcc 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022c0:	4601      	mov	r1, r0
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	58024400 	.word	0x58024400
 80022e0:	08006274 	.word	0x08006274

080022e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80022e8:	f7ff ffb6 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022ec:	4601      	mov	r1, r0
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_RCC_GetPCLK2Freq+0x28>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	58024400 	.word	0x58024400
 800230c:	08006274 	.word	0x08006274

08002310 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002318:	2300      	movs	r3, #0
 800231a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800231c:	2300      	movs	r3, #0
 800231e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d03d      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002334:	d013      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800233a:	d802      	bhi.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002340:	e01f      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002346:	d013      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800234c:	d01c      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800234e:	e018      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002350:	4baf      	ldr	r3, [pc, #700]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	4aae      	ldr	r2, [pc, #696]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800235c:	e015      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f001 f98b 	bl	8003680 <RCCEx_PLL2_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800236e:	e00c      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3324      	adds	r3, #36	; 0x24
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fa34 	bl	80037e4 <RCCEx_PLL3_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002380:	e003      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
      break;
 8002386:	e000      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002390:	4b9f      	ldr	r3, [pc, #636]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239c:	499c      	ldr	r1, [pc, #624]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	650b      	str	r3, [r1, #80]	; 0x50
 80023a2:	e001      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d03d      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d826      	bhi.n	800240a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	080023d9 	.word	0x080023d9
 80023c8:	080023e7 	.word	0x080023e7
 80023cc:	080023f9 	.word	0x080023f9
 80023d0:	08002411 	.word	0x08002411
 80023d4:	08002411 	.word	0x08002411
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d8:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	4a8c      	ldr	r2, [pc, #560]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023e4:	e015      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 f947 	bl	8003680 <RCCEx_PLL2_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023f6:	e00c      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3324      	adds	r3, #36	; 0x24
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f9f0 	bl	80037e4 <RCCEx_PLL3_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002408:	e003      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
      break;
 800240e:	e000      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002418:	4b7d      	ldr	r3, [pc, #500]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	f023 0207 	bic.w	r2, r3, #7
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	497a      	ldr	r1, [pc, #488]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002426:	4313      	orrs	r3, r2
 8002428:	650b      	str	r3, [r1, #80]	; 0x50
 800242a:	e001      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03e      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2b80      	cmp	r3, #128	; 0x80
 8002442:	d01c      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d804      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d00d      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002450:	e01e      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002452:	2bc0      	cmp	r3, #192	; 0xc0
 8002454:	d01f      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245a:	d01e      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800245c:	e018      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800245e:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	4a6b      	ldr	r2, [pc, #428]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800246a:	e017      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f001 f904 	bl	8003680 <RCCEx_PLL2_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800247c:	e00e      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3324      	adds	r3, #36	; 0x24
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f001 f9ad 	bl	80037e4 <RCCEx_PLL3_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800248e:	e005      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
      break;
 8002494:	e002      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800249a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	4958      	ldr	r1, [pc, #352]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	650b      	str	r3, [r1, #80]	; 0x50
 80024b4:	e001      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d044      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d0:	d01f      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d805      	bhi.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024e0:	d00e      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80024e2:	e01f      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80024e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024e8:	d01f      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80024ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ee:	d01e      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80024f0:	e018      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	4a46      	ldr	r2, [pc, #280]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024fe:	e017      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f001 f8ba 	bl	8003680 <RCCEx_PLL2_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002510:	e00e      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3324      	adds	r3, #36	; 0x24
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f963 	bl	80037e4 <RCCEx_PLL3_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002522:	e005      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	75fb      	strb	r3, [r7, #23]
      break;
 8002528:	e002      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800252e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002544:	4932      	ldr	r1, [pc, #200]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002546:	4313      	orrs	r3, r2
 8002548:	658b      	str	r3, [r1, #88]	; 0x58
 800254a:	e001      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002558:	2b00      	cmp	r3, #0
 800255a:	d044      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002566:	d01f      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800256c:	d805      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002576:	d00e      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002578:	e01f      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800257a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800257e:	d01f      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002584:	d01e      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002586:	e018      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800258e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002592:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002594:	e017      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f86f 	bl	8003680 <RCCEx_PLL2_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80025a6:	e00e      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3324      	adds	r3, #36	; 0x24
 80025ac:	2100      	movs	r1, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f001 f918 	bl	80037e4 <RCCEx_PLL3_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025b8:	e005      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80025c0:	bf00      	nop
 80025c2:	e000      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80025c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80025da:	490d      	ldr	r1, [pc, #52]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	658b      	str	r3, [r1, #88]	; 0x58
 80025e0:	e001      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d035      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d00c      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d802      	bhi.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01b      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002602:	e017      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d00c      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002608:	2b30      	cmp	r3, #48	; 0x30
 800260a:	d018      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800260c:	e012      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800260e:	bf00      	nop
 8002610:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002614:	4bae      	ldr	r3, [pc, #696]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	4aad      	ldr	r2, [pc, #692]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800261a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002620:	e00e      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f829 	bl	8003680 <RCCEx_PLL2_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002632:	e005      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
      break;
 8002638:	e002      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800263e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002646:	4ba2      	ldr	r3, [pc, #648]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002652:	499f      	ldr	r1, [pc, #636]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002654:	4313      	orrs	r3, r2
 8002656:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002658:	e001      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d042      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002672:	d01f      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	d805      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d00e      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002684:	e01f      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800268a:	d01f      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800268c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002690:	d01e      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002692:	e018      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002694:	4b8e      	ldr	r3, [pc, #568]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4a8d      	ldr	r2, [pc, #564]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800269a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026a0:	e017      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 ffe9 	bl	8003680 <RCCEx_PLL2_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026b2:	e00e      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3324      	adds	r3, #36	; 0x24
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 f892 	bl	80037e4 <RCCEx_PLL3_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026c4:	e005      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80026d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80026d8:	4b7d      	ldr	r3, [pc, #500]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80026da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	497a      	ldr	r1, [pc, #488]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	650b      	str	r3, [r1, #80]	; 0x50
 80026ea:	e001      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d042      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002704:	d01b      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800270a:	d805      	bhi.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800270c:	2b00      	cmp	r3, #0
 800270e:	d022      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002716:	e01b      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800271c:	d01d      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800271e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002722:	d01c      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002724:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002728:	d01b      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800272a:	e011      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	2101      	movs	r1, #1
 8002732:	4618      	mov	r0, r3
 8002734:	f000 ffa4 	bl	8003680 <RCCEx_PLL2_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800273c:	e012      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3324      	adds	r3, #36	; 0x24
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f001 f84d 	bl	80037e4 <RCCEx_PLL3_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800274e:	e009      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
      break;
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002756:	bf00      	nop
 8002758:	e004      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800276a:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800276c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002776:	4956      	ldr	r1, [pc, #344]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	650b      	str	r3, [r1, #80]	; 0x50
 800277c:	e001      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d044      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002798:	d01b      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800279a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800279e:	d805      	bhi.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d022      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80027a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80027aa:	e01b      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d01d      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80027b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b6:	d01c      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80027b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027bc:	d01b      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027be:	e011      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	2101      	movs	r1, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 ff5a 	bl	8003680 <RCCEx_PLL2_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80027d0:	e012      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3324      	adds	r3, #36	; 0x24
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 f803 	bl	80037e4 <RCCEx_PLL3_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80027e2:	e009      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	75fb      	strb	r3, [r7, #23]
      break;
 80027e8:	e006      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e004      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80027f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800280c:	4930      	ldr	r1, [pc, #192]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	658b      	str	r3, [r1, #88]	; 0x58
 8002812:	e001      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d022      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00e      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x53a>
 800282c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002830:	d108      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f000 ff21 	bl	8003680 <RCCEx_PLL2_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002842:	e003      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	75fb      	strb	r3, [r7, #23]
      break;
 8002848:	e000      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 800284a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	491c      	ldr	r1, [pc, #112]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002864:	e001      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d030      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800287e:	d005      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002884:	d009      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d013      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800288a:	e00f      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002898:	e00c      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 feed 	bl	8003680 <RCCEx_PLL2_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028aa:	e003      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	75fb      	strb	r3, [r7, #23]
      break;
 80028b0:	e000      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 80028b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4902      	ldr	r1, [pc, #8]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	650b      	str	r3, [r1, #80]	; 0x50
 80028cc:	e004      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80028ce:	bf00      	nop
 80028d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d032      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d81b      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80028ec:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	0800292b 	.word	0x0800292b
 80028f8:	08002905 	.word	0x08002905
 80028fc:	08002913 	.word	0x08002913
 8002900:	0800292b 	.word	0x0800292b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002904:	4bb8      	ldr	r3, [pc, #736]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4ab7      	ldr	r2, [pc, #732]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800290a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002910:	e00c      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f000 feb1 	bl	8003680 <RCCEx_PLL2_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002922:	e003      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	75fb      	strb	r3, [r7, #23]
      break;
 8002928:	e000      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 800292a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002932:	4bad      	ldr	r3, [pc, #692]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	49aa      	ldr	r1, [pc, #680]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002940:	4313      	orrs	r3, r2
 8002942:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002944:	e001      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8086 	beq.w	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4ba4      	ldr	r3, [pc, #656]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4aa3      	ldr	r2, [pc, #652]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002964:	f7fe f9da 	bl	8000d1c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800296a:	e009      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7fe f9d6 	bl	8000d1c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d902      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	75fb      	strb	r3, [r7, #23]
        break;
 800297e:	e005      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002980:	4b9a      	ldr	r3, [pc, #616]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d166      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002992:	4b95      	ldr	r3, [pc, #596]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800299c:	4053      	eors	r3, r2
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d013      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a6:	4b90      	ldr	r3, [pc, #576]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b0:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a8c      	ldr	r2, [pc, #560]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029bc:	4b8a      	ldr	r3, [pc, #552]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a89      	ldr	r2, [pc, #548]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029c8:	4a87      	ldr	r2, [pc, #540]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80029d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d8:	d115      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe f99f 	bl	8000d1c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e0:	e00b      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe f99b 	bl	8000d1c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d902      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	75fb      	strb	r3, [r7, #23]
            break;
 80029f8:	e005      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029fa:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ed      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d126      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a1a:	d10d      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002a1c:	4b72      	ldr	r3, [pc, #456]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a2a:	0919      	lsrs	r1, r3, #4
 8002a2c:	4b70      	ldr	r3, [pc, #448]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002a2e:	400b      	ands	r3, r1
 8002a30:	496d      	ldr	r1, [pc, #436]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	610b      	str	r3, [r1, #16]
 8002a36:	e005      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002a38:	4b6b      	ldr	r3, [pc, #428]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a42:	6113      	str	r3, [r2, #16]
 8002a44:	4b68      	ldr	r3, [pc, #416]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a52:	4965      	ldr	r1, [pc, #404]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	670b      	str	r3, [r1, #112]	; 0x70
 8002a58:	e004      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	75bb      	strb	r3, [r7, #22]
 8002a5e:	e001      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d07e      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a74:	2b28      	cmp	r3, #40	; 0x28
 8002a76:	d867      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002a78:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002b4f 	.word	0x08002b4f
 8002a84:	08002b49 	.word	0x08002b49
 8002a88:	08002b49 	.word	0x08002b49
 8002a8c:	08002b49 	.word	0x08002b49
 8002a90:	08002b49 	.word	0x08002b49
 8002a94:	08002b49 	.word	0x08002b49
 8002a98:	08002b49 	.word	0x08002b49
 8002a9c:	08002b49 	.word	0x08002b49
 8002aa0:	08002b25 	.word	0x08002b25
 8002aa4:	08002b49 	.word	0x08002b49
 8002aa8:	08002b49 	.word	0x08002b49
 8002aac:	08002b49 	.word	0x08002b49
 8002ab0:	08002b49 	.word	0x08002b49
 8002ab4:	08002b49 	.word	0x08002b49
 8002ab8:	08002b49 	.word	0x08002b49
 8002abc:	08002b49 	.word	0x08002b49
 8002ac0:	08002b37 	.word	0x08002b37
 8002ac4:	08002b49 	.word	0x08002b49
 8002ac8:	08002b49 	.word	0x08002b49
 8002acc:	08002b49 	.word	0x08002b49
 8002ad0:	08002b49 	.word	0x08002b49
 8002ad4:	08002b49 	.word	0x08002b49
 8002ad8:	08002b49 	.word	0x08002b49
 8002adc:	08002b49 	.word	0x08002b49
 8002ae0:	08002b4f 	.word	0x08002b4f
 8002ae4:	08002b49 	.word	0x08002b49
 8002ae8:	08002b49 	.word	0x08002b49
 8002aec:	08002b49 	.word	0x08002b49
 8002af0:	08002b49 	.word	0x08002b49
 8002af4:	08002b49 	.word	0x08002b49
 8002af8:	08002b49 	.word	0x08002b49
 8002afc:	08002b49 	.word	0x08002b49
 8002b00:	08002b4f 	.word	0x08002b4f
 8002b04:	08002b49 	.word	0x08002b49
 8002b08:	08002b49 	.word	0x08002b49
 8002b0c:	08002b49 	.word	0x08002b49
 8002b10:	08002b49 	.word	0x08002b49
 8002b14:	08002b49 	.word	0x08002b49
 8002b18:	08002b49 	.word	0x08002b49
 8002b1c:	08002b49 	.word	0x08002b49
 8002b20:	08002b4f 	.word	0x08002b4f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fda8 	bl	8003680 <RCCEx_PLL2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b34:	e00c      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3324      	adds	r3, #36	; 0x24
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fe51 	bl	80037e4 <RCCEx_PLL3_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b46:	e003      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b4c:	e000      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 8002b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b62:	4921      	ldr	r1, [pc, #132]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	654b      	str	r3, [r1, #84]	; 0x54
 8002b68:	e001      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d03e      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d820      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <HAL_RCCEx_PeriphCLKConfig+0x878>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002bcb 	.word	0x08002bcb
 8002b8c:	08002ba1 	.word	0x08002ba1
 8002b90:	08002bb3 	.word	0x08002bb3
 8002b94:	08002bcb 	.word	0x08002bcb
 8002b98:	08002bcb 	.word	0x08002bcb
 8002b9c:	08002bcb 	.word	0x08002bcb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fd6a 	bl	8003680 <RCCEx_PLL2_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3324      	adds	r3, #36	; 0x24
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fe13 	bl	80037e4 <RCCEx_PLL3_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bc2:	e003      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 8002bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d110      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bde:	4902      	ldr	r1, [pc, #8]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	654b      	str	r3, [r1, #84]	; 0x54
 8002be4:	e008      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8002be6:	bf00      	nop
 8002be8:	58024400 	.word	0x58024400
 8002bec:	58024800 	.word	0x58024800
 8002bf0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d039      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d820      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c57 	.word	0x08002c57
 8002c18:	08002c2d 	.word	0x08002c2d
 8002c1c:	08002c3f 	.word	0x08002c3f
 8002c20:	08002c57 	.word	0x08002c57
 8002c24:	08002c57 	.word	0x08002c57
 8002c28:	08002c57 	.word	0x08002c57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fd24 	bl	8003680 <RCCEx_PLL2_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c3c:	e00c      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3324      	adds	r3, #36	; 0x24
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fdcd 	bl	80037e4 <RCCEx_PLL3_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c4e:	e003      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]
      break;
 8002c54:	e000      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 8002c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c5e:	4bb2      	ldr	r3, [pc, #712]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	49ae      	ldr	r1, [pc, #696]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	658b      	str	r3, [r1, #88]	; 0x58
 8002c72:	e001      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d044      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c8e:	d01b      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8002c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c94:	d805      	bhi.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x992>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d022      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8002ca0:	e01b      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d01c      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8002cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cb2:	d01b      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8002cb4:	e011      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fcdf 	bl	8003680 <RCCEx_PLL2_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002cc6:	e012      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3324      	adds	r3, #36	; 0x24
 8002ccc:	2102      	movs	r1, #2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fd88 	bl	80037e4 <RCCEx_PLL3_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002cd8:	e009      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8002cde:	e006      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002ce0:	bf00      	nop
 8002ce2:	e004      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002ce4:	bf00      	nop
 8002ce6:	e002      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	4989      	ldr	r1, [pc, #548]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	654b      	str	r3, [r1, #84]	; 0x54
 8002d08:	e001      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d044      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d24:	d01b      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8002d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2a:	d805      	bhi.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d022      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8002d36:	e01b      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	d01d      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002d3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d42:	d01c      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8002d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d48:	d01b      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 8002d4a:	e011      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fc94 	bl	8003680 <RCCEx_PLL2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d5c:	e012      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3324      	adds	r3, #36	; 0x24
 8002d62:	2102      	movs	r1, #2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fd3d 	bl	80037e4 <RCCEx_PLL3_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d6e:	e009      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
      break;
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002d76:	bf00      	nop
 8002d78:	e004      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d98:	4963      	ldr	r1, [pc, #396]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002d9e:	e001      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d044      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dba:	d01b      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8002dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc0:	d805      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d022      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8002dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8002dcc:	e01b      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8002dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd2:	d01d      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8002dd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002dd8:	d01c      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8002dda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002dde:	d01b      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8002de0:	e011      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fc49 	bl	8003680 <RCCEx_PLL2_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002df2:	e012      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3324      	adds	r3, #36	; 0x24
 8002df8:	2102      	movs	r1, #2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fcf2 	bl	80037e4 <RCCEx_PLL3_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e04:	e009      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0a:	e006      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002e0c:	bf00      	nop
 8002e0e:	e004      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002e10:	bf00      	nop
 8002e12:	e002      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e2e:	493e      	ldr	r1, [pc, #248]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	658b      	str	r3, [r1, #88]	; 0x58
 8002e34:	e001      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e50:	d10a      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3324      	adds	r3, #36	; 0x24
 8002e56:	2102      	movs	r1, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fcc3 	bl	80037e4 <RCCEx_PLL3_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e76:	492c      	ldr	r1, [pc, #176]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e92:	d10a      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3324      	adds	r3, #36	; 0x24
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fca2 	bl	80037e4 <RCCEx_PLL3_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eaa:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb8:	491b      	ldr	r1, [pc, #108]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d032      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8002ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eda:	d016      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d111      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fbca 	bl	8003680 <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3324      	adds	r3, #36	; 0x24
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fc73 	bl	80037e4 <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f02:	e003      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8002f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f20:	4901      	ldr	r1, [pc, #4]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	658b      	str	r3, [r1, #88]	; 0x58
 8002f26:	e003      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8002f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02f      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f46:	d00c      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f4c:	d015      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d10f      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f54:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	4a71      	ldr	r2, [pc, #452]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3324      	adds	r3, #36	; 0x24
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fc3b 	bl	80037e4 <RCCEx_PLL3_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
      break;
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 8002f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f82:	4b67      	ldr	r3, [pc, #412]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	4963      	ldr	r1, [pc, #396]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	654b      	str	r3, [r1, #84]	; 0x54
 8002f96:	e001      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d029      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d007      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002fc4:	e00b      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fb57 	bl	8003680 <RCCEx_PLL2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
      break;
 8002fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff0:	494b      	ldr	r1, [pc, #300]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ff6:	e001      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fbe8 	bl	80037e4 <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d031      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d00c      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8003036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303a:	d802      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xd32>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d011      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8003040:	e00d      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003046:	d00f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8003048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800304c:	d00e      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 800304e:	e006      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	4a32      	ldr	r2, [pc, #200]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800305c:	e007      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
      break;
 8003062:	e004      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003064:	bf00      	nop
 8003066:	e002      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003068:	bf00      	nop
 800306a:	e000      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 800306c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003082:	4927      	ldr	r1, [pc, #156]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003084:	4313      	orrs	r3, r2
 8003086:	654b      	str	r3, [r1, #84]	; 0x54
 8003088:	e001      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 800309c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a6:	491e      	ldr	r1, [pc, #120]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c4:	4916      	ldr	r1, [pc, #88]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	4a11      	ldr	r2, [pc, #68]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80030e0:	6113      	str	r3, [r2, #16]
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030ec:	490c      	ldr	r1, [pc, #48]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	da08      	bge.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0xe10>)
 8003108:	4313      	orrs	r3, r2
 800310a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800310c:	7dbb      	ldrb	r3, [r7, #22]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  }
  return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58024400 	.word	0x58024400

08003124 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003128:	f7ff f896 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 800312c:	4601      	mov	r1, r0
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	58024400 	.word	0x58024400
 800314c:	08006274 	.word	0x08006274

08003150 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003158:	4b9d      	ldr	r3, [pc, #628]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003162:	4b9b      	ldr	r3, [pc, #620]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	0b1b      	lsrs	r3, r3, #12
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800316e:	4b98      	ldr	r3, [pc, #608]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800317a:	4b95      	ldr	r3, [pc, #596]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	08db      	lsrs	r3, r3, #3
 8003180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 810a 	beq.w	80033b2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d05a      	beq.n	800325a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d302      	bcc.n	80031ae <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d078      	beq.n	800329e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80031ac:	e099      	b.n	80032e2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ae:	4b88      	ldr	r3, [pc, #544]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02d      	beq.n	8003216 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031ba:	4b85      	ldr	r3, [pc, #532]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	4a83      	ldr	r2, [pc, #524]	; (80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e4:	4b7a      	ldr	r3, [pc, #488]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80031f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80033d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80031fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003210:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003214:	e087      	b.n	8003326 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003220:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80033dc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003238:	ed97 6a03 	vldr	s12, [r7, #12]
 800323c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80033d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003254:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003258:	e065      	b.n	8003326 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003264:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80033e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326c:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003280:	eddf 5a55 	vldr	s11, [pc, #340]	; 80033d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003298:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800329c:	e043      	b.n	8003326 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80033e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80032ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b0:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80032c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80033d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80032c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032e0:	e021      	b.n	8003326 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80033e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80032f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fc:	ee07 3a90 	vmov	s15, r3
 8003300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003304:	ed97 6a03 	vldr	s12, [r7, #12]
 8003308:	eddf 5a33 	vldr	s11, [pc, #204]	; 80033d8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800330c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003320:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003324:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	0a5b      	lsrs	r3, r3, #9
 800332c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003330:	ee07 3a90 	vmov	s15, r3
 8003334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800333c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003340:	edd7 6a07 	vldr	s13, [r7, #28]
 8003344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334c:	ee17 2a90 	vmov	r2, s15
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800336a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800336e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337a:	ee17 2a90 	vmov	r2, s15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	0e1b      	lsrs	r3, r3, #24
 8003388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003398:	ee37 7a87 	vadd.f32	s14, s15, s14
 800339c:	edd7 6a07 	vldr	s13, [r7, #28]
 80033a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a8:	ee17 2a90 	vmov	r2, s15
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80033b0:	e008      	b.n	80033c4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	58024400 	.word	0x58024400
 80033d4:	03d09000 	.word	0x03d09000
 80033d8:	46000000 	.word	0x46000000
 80033dc:	4c742400 	.word	0x4c742400
 80033e0:	4a742400 	.word	0x4a742400
 80033e4:	4bbebc20 	.word	0x4bbebc20

080033e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033f0:	4b9d      	ldr	r3, [pc, #628]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80033fa:	4b9b      	ldr	r3, [pc, #620]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	0d1b      	lsrs	r3, r3, #20
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003406:	4b98      	ldr	r3, [pc, #608]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003412:	4b95      	ldr	r3, [pc, #596]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 810a 	beq.w	800364a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d05a      	beq.n	80034f2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800343c:	2b01      	cmp	r3, #1
 800343e:	d302      	bcc.n	8003446 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003440:	2b02      	cmp	r3, #2
 8003442:	d078      	beq.n	8003536 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003444:	e099      	b.n	800357a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02d      	beq.n	80034ae <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003452:	4b85      	ldr	r3, [pc, #532]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	08db      	lsrs	r3, r3, #3
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	4a83      	ldr	r2, [pc, #524]	; (800366c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347c:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003490:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003670 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034ac:	e087      	b.n	80035be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003674 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80034bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c0:	4b69      	ldr	r3, [pc, #420]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80034d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003670 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80034d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034f0:	e065      	b.n	80035be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003504:	4b58      	ldr	r3, [pc, #352]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003514:	ed97 6a03 	vldr	s12, [r7, #12]
 8003518:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003670 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800351c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003530:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003534:	e043      	b.n	80035be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003540:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800367c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003548:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003558:	ed97 6a03 	vldr	s12, [r7, #12]
 800355c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003670 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003574:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003578:	e021      	b.n	80035be <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003584:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358c:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359c:	ed97 6a03 	vldr	s12, [r7, #12]
 80035a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003670 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80035a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035bc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80035dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e4:	ee17 2a90 	vmov	r2, s15
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003606:	edd7 6a07 	vldr	s13, [r7, #28]
 800360a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003612:	ee17 2a90 	vmov	r2, s15
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	0e1b      	lsrs	r3, r3, #24
 8003620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003634:	edd7 6a07 	vldr	s13, [r7, #28]
 8003638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800363c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003640:	ee17 2a90 	vmov	r2, s15
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003648:	e008      	b.n	800365c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	3724      	adds	r7, #36	; 0x24
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	58024400 	.word	0x58024400
 800366c:	03d09000 	.word	0x03d09000
 8003670:	46000000 	.word	0x46000000
 8003674:	4c742400 	.word	0x4c742400
 8003678:	4a742400 	.word	0x4a742400
 800367c:	4bbebc20 	.word	0x4bbebc20

08003680 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800368e:	4b53      	ldr	r3, [pc, #332]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b03      	cmp	r3, #3
 8003698:	d101      	bne.n	800369e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e099      	b.n	80037d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800369e:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a4e      	ldr	r2, [pc, #312]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80036a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036aa:	f7fd fb37 	bl	8000d1c <HAL_GetTick>
 80036ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036b2:	f7fd fb33 	bl	8000d1c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e086      	b.n	80037d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036c4:	4b45      	ldr	r3, [pc, #276]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036d0:	4b42      	ldr	r3, [pc, #264]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	493f      	ldr	r1, [pc, #252]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	628b      	str	r3, [r1, #40]	; 0x28
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	025b      	lsls	r3, r3, #9
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	3b01      	subs	r3, #1
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003714:	4931      	ldr	r1, [pc, #196]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	492d      	ldr	r1, [pc, #180]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800372c:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	f023 0220 	bic.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	4928      	ldr	r1, [pc, #160]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4a26      	ldr	r2, [pc, #152]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003744:	f023 0310 	bic.w	r3, r3, #16
 8003748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 800374c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <RCCEx_PLL2_Config+0x160>)
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	69d2      	ldr	r2, [r2, #28]
 8003756:	00d2      	lsls	r2, r2, #3
 8003758:	4920      	ldr	r1, [pc, #128]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800375e:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003764:	f043 0310 	orr.w	r3, r3, #16
 8003768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800377c:	e00f      	b.n	800379e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003790:	e005      	b.n	800379e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	4a11      	ldr	r2, [pc, #68]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 8003798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800379c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80037a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037aa:	f7fd fab7 	bl	8000d1c <HAL_GetTick>
 80037ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037b0:	e008      	b.n	80037c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80037b2:	f7fd fab3 	bl	8000d1c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e006      	b.n	80037d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <RCCEx_PLL2_Config+0x15c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	58024400 	.word	0x58024400
 80037e0:	ffff0007 	.word	0xffff0007

080037e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037f2:	4b53      	ldr	r3, [pc, #332]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d101      	bne.n	8003802 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e099      	b.n	8003936 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003802:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a4e      	ldr	r2, [pc, #312]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd fa85 	bl	8000d1c <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003814:	e008      	b.n	8003828 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003816:	f7fd fa81 	bl	8000d1c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e086      	b.n	8003936 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003828:	4b45      	ldr	r3, [pc, #276]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003834:	4b42      	ldr	r3, [pc, #264]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	493f      	ldr	r1, [pc, #252]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	628b      	str	r3, [r1, #40]	; 0x28
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	3b01      	subs	r3, #1
 800384e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	3b01      	subs	r3, #1
 8003858:	025b      	lsls	r3, r3, #9
 800385a:	b29b      	uxth	r3, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	3b01      	subs	r3, #1
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	3b01      	subs	r3, #1
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003878:	4931      	ldr	r1, [pc, #196]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800387e:	4b30      	ldr	r3, [pc, #192]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	492d      	ldr	r1, [pc, #180]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	4928      	ldr	r1, [pc, #160]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80038a2:	4b27      	ldr	r3, [pc, #156]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4a26      	ldr	r2, [pc, #152]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <RCCEx_PLL3_Config+0x160>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	69d2      	ldr	r2, [r2, #28]
 80038ba:	00d2      	lsls	r2, r2, #3
 80038bc:	4920      	ldr	r1, [pc, #128]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80038c2:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038e0:	e00f      	b.n	8003902 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d106      	bne.n	80038f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038f4:	e005      	b.n	8003902 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	4a11      	ldr	r2, [pc, #68]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 80038fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 8003908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390e:	f7fd fa05 	bl	8000d1c <HAL_GetTick>
 8003912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003914:	e008      	b.n	8003928 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003916:	f7fd fa01 	bl	8000d1c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e006      	b.n	8003936 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <RCCEx_PLL3_Config+0x15c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	58024400 	.word	0x58024400
 8003944:	ffff0007 	.word	0xffff0007

08003948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e042      	b.n	80039e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fd f8ad 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2224      	movs	r2, #36	; 0x24
 8003976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f82c 	bl	80039e8 <UART_SetConfig>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e022      	b.n	80039e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f002 f99e 	bl	8005ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f002 fa25 	bl	8005e28 <UART_CheckIdleState>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80039ec:	b090      	sub	sp, #64	; 0x40
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4bc1      	ldr	r3, [pc, #772]	; (8003d30 <UART_SetConfig+0x348>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a32:	430b      	orrs	r3, r1
 8003a34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4ab7      	ldr	r2, [pc, #732]	; (8003d34 <UART_SetConfig+0x34c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a62:	4313      	orrs	r3, r2
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	4bb2      	ldr	r3, [pc, #712]	; (8003d38 <UART_SetConfig+0x350>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a76:	430b      	orrs	r3, r1
 8003a78:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f023 010f 	bic.w	r1, r3, #15
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4aa9      	ldr	r2, [pc, #676]	; (8003d3c <UART_SetConfig+0x354>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d177      	bne.n	8003b8a <UART_SetConfig+0x1a2>
 8003a9a:	4ba9      	ldr	r3, [pc, #676]	; (8003d40 <UART_SetConfig+0x358>)
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa2:	2b28      	cmp	r3, #40	; 0x28
 8003aa4:	d86c      	bhi.n	8003b80 <UART_SetConfig+0x198>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <UART_SetConfig+0xc4>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003b51 	.word	0x08003b51
 8003ab0:	08003b81 	.word	0x08003b81
 8003ab4:	08003b81 	.word	0x08003b81
 8003ab8:	08003b81 	.word	0x08003b81
 8003abc:	08003b81 	.word	0x08003b81
 8003ac0:	08003b81 	.word	0x08003b81
 8003ac4:	08003b81 	.word	0x08003b81
 8003ac8:	08003b81 	.word	0x08003b81
 8003acc:	08003b59 	.word	0x08003b59
 8003ad0:	08003b81 	.word	0x08003b81
 8003ad4:	08003b81 	.word	0x08003b81
 8003ad8:	08003b81 	.word	0x08003b81
 8003adc:	08003b81 	.word	0x08003b81
 8003ae0:	08003b81 	.word	0x08003b81
 8003ae4:	08003b81 	.word	0x08003b81
 8003ae8:	08003b81 	.word	0x08003b81
 8003aec:	08003b61 	.word	0x08003b61
 8003af0:	08003b81 	.word	0x08003b81
 8003af4:	08003b81 	.word	0x08003b81
 8003af8:	08003b81 	.word	0x08003b81
 8003afc:	08003b81 	.word	0x08003b81
 8003b00:	08003b81 	.word	0x08003b81
 8003b04:	08003b81 	.word	0x08003b81
 8003b08:	08003b81 	.word	0x08003b81
 8003b0c:	08003b69 	.word	0x08003b69
 8003b10:	08003b81 	.word	0x08003b81
 8003b14:	08003b81 	.word	0x08003b81
 8003b18:	08003b81 	.word	0x08003b81
 8003b1c:	08003b81 	.word	0x08003b81
 8003b20:	08003b81 	.word	0x08003b81
 8003b24:	08003b81 	.word	0x08003b81
 8003b28:	08003b81 	.word	0x08003b81
 8003b2c:	08003b71 	.word	0x08003b71
 8003b30:	08003b81 	.word	0x08003b81
 8003b34:	08003b81 	.word	0x08003b81
 8003b38:	08003b81 	.word	0x08003b81
 8003b3c:	08003b81 	.word	0x08003b81
 8003b40:	08003b81 	.word	0x08003b81
 8003b44:	08003b81 	.word	0x08003b81
 8003b48:	08003b81 	.word	0x08003b81
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b56:	e233      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b5e:	e22f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b66:	e22b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b6e:	e227      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003b70:	2320      	movs	r3, #32
 8003b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b76:	e223      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003b78:	2340      	movs	r3, #64	; 0x40
 8003b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b7e:	e21f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b86:	bf00      	nop
 8003b88:	e21a      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6d      	ldr	r2, [pc, #436]	; (8003d44 <UART_SetConfig+0x35c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d132      	bne.n	8003bfa <UART_SetConfig+0x212>
 8003b94:	4b6a      	ldr	r3, [pc, #424]	; (8003d40 <UART_SetConfig+0x358>)
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d827      	bhi.n	8003bf0 <UART_SetConfig+0x208>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <UART_SetConfig+0x1c0>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bd1 	.word	0x08003bd1
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bc6:	e1fb      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bce:	e1f7      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bd6:	e1f3      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bde:	e1ef      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003be0:	2320      	movs	r3, #32
 8003be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003be6:	e1eb      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003be8:	2340      	movs	r3, #64	; 0x40
 8003bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bee:	e1e7      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003bf6:	bf00      	nop
 8003bf8:	e1e2      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a52      	ldr	r2, [pc, #328]	; (8003d48 <UART_SetConfig+0x360>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d132      	bne.n	8003c6a <UART_SetConfig+0x282>
 8003c04:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <UART_SetConfig+0x358>)
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d827      	bhi.n	8003c60 <UART_SetConfig+0x278>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0x230>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c31 	.word	0x08003c31
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	08003c41 	.word	0x08003c41
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c51 	.word	0x08003c51
 8003c2c:	08003c59 	.word	0x08003c59
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c36:	e1c3      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c3e:	e1bf      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003c40:	2308      	movs	r3, #8
 8003c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c46:	e1bb      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c4e:	e1b7      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003c50:	2320      	movs	r3, #32
 8003c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c56:	e1b3      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003c58:	2340      	movs	r3, #64	; 0x40
 8003c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c5e:	e1af      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c66:	bf00      	nop
 8003c68:	e1aa      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a37      	ldr	r2, [pc, #220]	; (8003d4c <UART_SetConfig+0x364>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d132      	bne.n	8003cda <UART_SetConfig+0x2f2>
 8003c74:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <UART_SetConfig+0x358>)
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d827      	bhi.n	8003cd0 <UART_SetConfig+0x2e8>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <UART_SetConfig+0x2a0>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003ca1 	.word	0x08003ca1
 8003c8c:	08003ca9 	.word	0x08003ca9
 8003c90:	08003cb1 	.word	0x08003cb1
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ca6:	e18b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cae:	e187      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003cb0:	2308      	movs	r3, #8
 8003cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cb6:	e183      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cbe:	e17f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cc6:	e17b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003cc8:	2340      	movs	r3, #64	; 0x40
 8003cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cce:	e177      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cd6:	bf00      	nop
 8003cd8:	e172      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <UART_SetConfig+0x368>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d144      	bne.n	8003d6e <UART_SetConfig+0x386>
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <UART_SetConfig+0x358>)
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d839      	bhi.n	8003d64 <UART_SetConfig+0x37c>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <UART_SetConfig+0x310>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d11 	.word	0x08003d11
 8003cfc:	08003d19 	.word	0x08003d19
 8003d00:	08003d21 	.word	0x08003d21
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d55 	.word	0x08003d55
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d16:	e153      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d1e:	e14f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003d20:	2308      	movs	r3, #8
 8003d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d26:	e14b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d2e:	e147      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003d30:	cfff69f3 	.word	0xcfff69f3
 8003d34:	58000c00 	.word	0x58000c00
 8003d38:	11fff4ff 	.word	0x11fff4ff
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	58024400 	.word	0x58024400
 8003d44:	40004400 	.word	0x40004400
 8003d48:	40004800 	.word	0x40004800
 8003d4c:	40004c00 	.word	0x40004c00
 8003d50:	40005000 	.word	0x40005000
 8003d54:	2320      	movs	r3, #32
 8003d56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d5a:	e131      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003d5c:	2340      	movs	r3, #64	; 0x40
 8003d5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d62:	e12d      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d6a:	bf00      	nop
 8003d6c:	e128      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4ac3      	ldr	r2, [pc, #780]	; (8004080 <UART_SetConfig+0x698>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d178      	bne.n	8003e6a <UART_SetConfig+0x482>
 8003d78:	4bc2      	ldr	r3, [pc, #776]	; (8004084 <UART_SetConfig+0x69c>)
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d80:	2b28      	cmp	r3, #40	; 0x28
 8003d82:	d86d      	bhi.n	8003e60 <UART_SetConfig+0x478>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <UART_SetConfig+0x3a4>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003e31 	.word	0x08003e31
 8003d90:	08003e61 	.word	0x08003e61
 8003d94:	08003e61 	.word	0x08003e61
 8003d98:	08003e61 	.word	0x08003e61
 8003d9c:	08003e61 	.word	0x08003e61
 8003da0:	08003e61 	.word	0x08003e61
 8003da4:	08003e61 	.word	0x08003e61
 8003da8:	08003e61 	.word	0x08003e61
 8003dac:	08003e39 	.word	0x08003e39
 8003db0:	08003e61 	.word	0x08003e61
 8003db4:	08003e61 	.word	0x08003e61
 8003db8:	08003e61 	.word	0x08003e61
 8003dbc:	08003e61 	.word	0x08003e61
 8003dc0:	08003e61 	.word	0x08003e61
 8003dc4:	08003e61 	.word	0x08003e61
 8003dc8:	08003e61 	.word	0x08003e61
 8003dcc:	08003e41 	.word	0x08003e41
 8003dd0:	08003e61 	.word	0x08003e61
 8003dd4:	08003e61 	.word	0x08003e61
 8003dd8:	08003e61 	.word	0x08003e61
 8003ddc:	08003e61 	.word	0x08003e61
 8003de0:	08003e61 	.word	0x08003e61
 8003de4:	08003e61 	.word	0x08003e61
 8003de8:	08003e61 	.word	0x08003e61
 8003dec:	08003e49 	.word	0x08003e49
 8003df0:	08003e61 	.word	0x08003e61
 8003df4:	08003e61 	.word	0x08003e61
 8003df8:	08003e61 	.word	0x08003e61
 8003dfc:	08003e61 	.word	0x08003e61
 8003e00:	08003e61 	.word	0x08003e61
 8003e04:	08003e61 	.word	0x08003e61
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e51 	.word	0x08003e51
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e61 	.word	0x08003e61
 8003e1c:	08003e61 	.word	0x08003e61
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e36:	e0c3      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e3e:	e0bf      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003e40:	2308      	movs	r3, #8
 8003e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e46:	e0bb      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e4e:	e0b7      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003e50:	2320      	movs	r3, #32
 8003e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e56:	e0b3      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003e58:	2340      	movs	r3, #64	; 0x40
 8003e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e5e:	e0af      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003e66:	bf00      	nop
 8003e68:	e0aa      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a86      	ldr	r2, [pc, #536]	; (8004088 <UART_SetConfig+0x6a0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d132      	bne.n	8003eda <UART_SetConfig+0x4f2>
 8003e74:	4b83      	ldr	r3, [pc, #524]	; (8004084 <UART_SetConfig+0x69c>)
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d827      	bhi.n	8003ed0 <UART_SetConfig+0x4e8>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0x4a0>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ea1 	.word	0x08003ea1
 8003e8c:	08003ea9 	.word	0x08003ea9
 8003e90:	08003eb1 	.word	0x08003eb1
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	08003ec9 	.word	0x08003ec9
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ea6:	e08b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003eae:	e087      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003eb6:	e083      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ebe:	e07f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ec6:	e07b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ece:	e077      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003ed6:	bf00      	nop
 8003ed8:	e072      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6b      	ldr	r2, [pc, #428]	; (800408c <UART_SetConfig+0x6a4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d132      	bne.n	8003f4a <UART_SetConfig+0x562>
 8003ee4:	4b67      	ldr	r3, [pc, #412]	; (8004084 <UART_SetConfig+0x69c>)
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d827      	bhi.n	8003f40 <UART_SetConfig+0x558>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x510>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f11 	.word	0x08003f11
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	08003f21 	.word	0x08003f21
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f39 	.word	0x08003f39
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f16:	e053      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f1e:	e04f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f26:	e04b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f2e:	e047      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f30:	2320      	movs	r3, #32
 8003f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f36:	e043      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f38:	2340      	movs	r3, #64	; 0x40
 8003f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f3e:	e03f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f46:	bf00      	nop
 8003f48:	e03a      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a50      	ldr	r2, [pc, #320]	; (8004090 <UART_SetConfig+0x6a8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d132      	bne.n	8003fba <UART_SetConfig+0x5d2>
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <UART_SetConfig+0x69c>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d827      	bhi.n	8003fb0 <UART_SetConfig+0x5c8>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x580>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f81 	.word	0x08003f81
 8003f6c:	08003f89 	.word	0x08003f89
 8003f70:	08003f91 	.word	0x08003f91
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f86:	e01b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f8e:	e017      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f96:	e013      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003f9e:	e00f      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003fa8:	2340      	movs	r3, #64	; 0x40
 8003faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fae:	e007      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <UART_SetConfig+0x5d8>
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a32      	ldr	r2, [pc, #200]	; (8004090 <UART_SetConfig+0x6a8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f040 86f7 	bne.w	8004dba <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	f000 80c0 	beq.w	8004156 <UART_SetConfig+0x76e>
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	dc04      	bgt.n	8003fe4 <UART_SetConfig+0x5fc>
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d00c      	beq.n	8003ff8 <UART_SetConfig+0x610>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d065      	beq.n	80040ae <UART_SetConfig+0x6c6>
 8003fe2:	e27a      	b.n	80044da <UART_SetConfig+0xaf2>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	f000 81b0 	beq.w	800434a <UART_SetConfig+0x962>
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	f000 821e 	beq.w	800442c <UART_SetConfig+0xa44>
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	f000 8104 	beq.w	80041fe <UART_SetConfig+0x816>
 8003ff6:	e270      	b.n	80044da <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003ff8:	f7ff f894 	bl	8003124 <HAL_RCCEx_GetD3PCLK1Freq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d04e      	beq.n	80040a4 <UART_SetConfig+0x6bc>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b01      	cmp	r3, #1
 800400c:	d048      	beq.n	80040a0 <UART_SetConfig+0x6b8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b02      	cmp	r3, #2
 8004014:	d042      	beq.n	800409c <UART_SetConfig+0x6b4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b03      	cmp	r3, #3
 800401c:	d03c      	beq.n	8004098 <UART_SetConfig+0x6b0>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b04      	cmp	r3, #4
 8004024:	d036      	beq.n	8004094 <UART_SetConfig+0x6ac>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b05      	cmp	r3, #5
 800402c:	d026      	beq.n	800407c <UART_SetConfig+0x694>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b06      	cmp	r3, #6
 8004034:	d020      	beq.n	8004078 <UART_SetConfig+0x690>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b07      	cmp	r3, #7
 800403c:	d01a      	beq.n	8004074 <UART_SetConfig+0x68c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b08      	cmp	r3, #8
 8004044:	d014      	beq.n	8004070 <UART_SetConfig+0x688>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b09      	cmp	r3, #9
 800404c:	d00e      	beq.n	800406c <UART_SetConfig+0x684>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2b0a      	cmp	r3, #10
 8004054:	d008      	beq.n	8004068 <UART_SetConfig+0x680>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b0b      	cmp	r3, #11
 800405c:	d102      	bne.n	8004064 <UART_SetConfig+0x67c>
 800405e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004062:	e020      	b.n	80040a6 <UART_SetConfig+0x6be>
 8004064:	2301      	movs	r3, #1
 8004066:	e01e      	b.n	80040a6 <UART_SetConfig+0x6be>
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	e01c      	b.n	80040a6 <UART_SetConfig+0x6be>
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	e01a      	b.n	80040a6 <UART_SetConfig+0x6be>
 8004070:	2320      	movs	r3, #32
 8004072:	e018      	b.n	80040a6 <UART_SetConfig+0x6be>
 8004074:	2310      	movs	r3, #16
 8004076:	e016      	b.n	80040a6 <UART_SetConfig+0x6be>
 8004078:	230c      	movs	r3, #12
 800407a:	e014      	b.n	80040a6 <UART_SetConfig+0x6be>
 800407c:	230a      	movs	r3, #10
 800407e:	e012      	b.n	80040a6 <UART_SetConfig+0x6be>
 8004080:	40011400 	.word	0x40011400
 8004084:	58024400 	.word	0x58024400
 8004088:	40007800 	.word	0x40007800
 800408c:	40007c00 	.word	0x40007c00
 8004090:	58000c00 	.word	0x58000c00
 8004094:	2308      	movs	r3, #8
 8004096:	e006      	b.n	80040a6 <UART_SetConfig+0x6be>
 8004098:	2306      	movs	r3, #6
 800409a:	e004      	b.n	80040a6 <UART_SetConfig+0x6be>
 800409c:	2304      	movs	r3, #4
 800409e:	e002      	b.n	80040a6 <UART_SetConfig+0x6be>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e000      	b.n	80040a6 <UART_SetConfig+0x6be>
 80040a4:	2301      	movs	r3, #1
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80040ac:	e219      	b.n	80044e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040ae:	f107 0318 	add.w	r3, r7, #24
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff f84c 	bl	8003150 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d044      	beq.n	800414c <UART_SetConfig+0x764>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d03e      	beq.n	8004148 <UART_SetConfig+0x760>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d038      	beq.n	8004144 <UART_SetConfig+0x75c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d032      	beq.n	8004140 <UART_SetConfig+0x758>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d02c      	beq.n	800413c <UART_SetConfig+0x754>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d026      	beq.n	8004138 <UART_SetConfig+0x750>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d020      	beq.n	8004134 <UART_SetConfig+0x74c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	d01a      	beq.n	8004130 <UART_SetConfig+0x748>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d014      	beq.n	800412c <UART_SetConfig+0x744>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b09      	cmp	r3, #9
 8004108:	d00e      	beq.n	8004128 <UART_SetConfig+0x740>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b0a      	cmp	r3, #10
 8004110:	d008      	beq.n	8004124 <UART_SetConfig+0x73c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b0b      	cmp	r3, #11
 8004118:	d102      	bne.n	8004120 <UART_SetConfig+0x738>
 800411a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800411e:	e016      	b.n	800414e <UART_SetConfig+0x766>
 8004120:	2301      	movs	r3, #1
 8004122:	e014      	b.n	800414e <UART_SetConfig+0x766>
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	e012      	b.n	800414e <UART_SetConfig+0x766>
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	e010      	b.n	800414e <UART_SetConfig+0x766>
 800412c:	2320      	movs	r3, #32
 800412e:	e00e      	b.n	800414e <UART_SetConfig+0x766>
 8004130:	2310      	movs	r3, #16
 8004132:	e00c      	b.n	800414e <UART_SetConfig+0x766>
 8004134:	230c      	movs	r3, #12
 8004136:	e00a      	b.n	800414e <UART_SetConfig+0x766>
 8004138:	230a      	movs	r3, #10
 800413a:	e008      	b.n	800414e <UART_SetConfig+0x766>
 800413c:	2308      	movs	r3, #8
 800413e:	e006      	b.n	800414e <UART_SetConfig+0x766>
 8004140:	2306      	movs	r3, #6
 8004142:	e004      	b.n	800414e <UART_SetConfig+0x766>
 8004144:	2304      	movs	r3, #4
 8004146:	e002      	b.n	800414e <UART_SetConfig+0x766>
 8004148:	2302      	movs	r3, #2
 800414a:	e000      	b.n	800414e <UART_SetConfig+0x766>
 800414c:	2301      	movs	r3, #1
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004154:	e1c5      	b.n	80044e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004156:	f107 030c 	add.w	r3, r7, #12
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff f944 	bl	80033e8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d044      	beq.n	80041f4 <UART_SetConfig+0x80c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b01      	cmp	r3, #1
 8004170:	d03e      	beq.n	80041f0 <UART_SetConfig+0x808>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b02      	cmp	r3, #2
 8004178:	d038      	beq.n	80041ec <UART_SetConfig+0x804>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b03      	cmp	r3, #3
 8004180:	d032      	beq.n	80041e8 <UART_SetConfig+0x800>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b04      	cmp	r3, #4
 8004188:	d02c      	beq.n	80041e4 <UART_SetConfig+0x7fc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b05      	cmp	r3, #5
 8004190:	d026      	beq.n	80041e0 <UART_SetConfig+0x7f8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b06      	cmp	r3, #6
 8004198:	d020      	beq.n	80041dc <UART_SetConfig+0x7f4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b07      	cmp	r3, #7
 80041a0:	d01a      	beq.n	80041d8 <UART_SetConfig+0x7f0>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d014      	beq.n	80041d4 <UART_SetConfig+0x7ec>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b09      	cmp	r3, #9
 80041b0:	d00e      	beq.n	80041d0 <UART_SetConfig+0x7e8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b0a      	cmp	r3, #10
 80041b8:	d008      	beq.n	80041cc <UART_SetConfig+0x7e4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b0b      	cmp	r3, #11
 80041c0:	d102      	bne.n	80041c8 <UART_SetConfig+0x7e0>
 80041c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041c6:	e016      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e014      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	e012      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	e010      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041d4:	2320      	movs	r3, #32
 80041d6:	e00e      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041d8:	2310      	movs	r3, #16
 80041da:	e00c      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041dc:	230c      	movs	r3, #12
 80041de:	e00a      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041e0:	230a      	movs	r3, #10
 80041e2:	e008      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041e4:	2308      	movs	r3, #8
 80041e6:	e006      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041e8:	2306      	movs	r3, #6
 80041ea:	e004      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041ec:	2304      	movs	r3, #4
 80041ee:	e002      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e000      	b.n	80041f6 <UART_SetConfig+0x80e>
 80041f4:	2301      	movs	r3, #1
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041fc:	e171      	b.n	80044e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041fe:	4b7a      	ldr	r3, [pc, #488]	; (80043e8 <UART_SetConfig+0xa00>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d054      	beq.n	80042b4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800420a:	4b77      	ldr	r3, [pc, #476]	; (80043e8 <UART_SetConfig+0xa00>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	08db      	lsrs	r3, r3, #3
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	4a75      	ldr	r2, [pc, #468]	; (80043ec <UART_SetConfig+0xa04>)
 8004216:	40da      	lsrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d044      	beq.n	80042aa <UART_SetConfig+0x8c2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b01      	cmp	r3, #1
 8004226:	d03e      	beq.n	80042a6 <UART_SetConfig+0x8be>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b02      	cmp	r3, #2
 800422e:	d038      	beq.n	80042a2 <UART_SetConfig+0x8ba>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b03      	cmp	r3, #3
 8004236:	d032      	beq.n	800429e <UART_SetConfig+0x8b6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2b04      	cmp	r3, #4
 800423e:	d02c      	beq.n	800429a <UART_SetConfig+0x8b2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b05      	cmp	r3, #5
 8004246:	d026      	beq.n	8004296 <UART_SetConfig+0x8ae>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	2b06      	cmp	r3, #6
 800424e:	d020      	beq.n	8004292 <UART_SetConfig+0x8aa>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b07      	cmp	r3, #7
 8004256:	d01a      	beq.n	800428e <UART_SetConfig+0x8a6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b08      	cmp	r3, #8
 800425e:	d014      	beq.n	800428a <UART_SetConfig+0x8a2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b09      	cmp	r3, #9
 8004266:	d00e      	beq.n	8004286 <UART_SetConfig+0x89e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2b0a      	cmp	r3, #10
 800426e:	d008      	beq.n	8004282 <UART_SetConfig+0x89a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b0b      	cmp	r3, #11
 8004276:	d102      	bne.n	800427e <UART_SetConfig+0x896>
 8004278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800427c:	e016      	b.n	80042ac <UART_SetConfig+0x8c4>
 800427e:	2301      	movs	r3, #1
 8004280:	e014      	b.n	80042ac <UART_SetConfig+0x8c4>
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	e012      	b.n	80042ac <UART_SetConfig+0x8c4>
 8004286:	2340      	movs	r3, #64	; 0x40
 8004288:	e010      	b.n	80042ac <UART_SetConfig+0x8c4>
 800428a:	2320      	movs	r3, #32
 800428c:	e00e      	b.n	80042ac <UART_SetConfig+0x8c4>
 800428e:	2310      	movs	r3, #16
 8004290:	e00c      	b.n	80042ac <UART_SetConfig+0x8c4>
 8004292:	230c      	movs	r3, #12
 8004294:	e00a      	b.n	80042ac <UART_SetConfig+0x8c4>
 8004296:	230a      	movs	r3, #10
 8004298:	e008      	b.n	80042ac <UART_SetConfig+0x8c4>
 800429a:	2308      	movs	r3, #8
 800429c:	e006      	b.n	80042ac <UART_SetConfig+0x8c4>
 800429e:	2306      	movs	r3, #6
 80042a0:	e004      	b.n	80042ac <UART_SetConfig+0x8c4>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e002      	b.n	80042ac <UART_SetConfig+0x8c4>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e000      	b.n	80042ac <UART_SetConfig+0x8c4>
 80042aa:	2301      	movs	r3, #1
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80042b2:	e116      	b.n	80044e2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d043      	beq.n	8004344 <UART_SetConfig+0x95c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d03d      	beq.n	8004340 <UART_SetConfig+0x958>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d037      	beq.n	800433c <UART_SetConfig+0x954>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d031      	beq.n	8004338 <UART_SetConfig+0x950>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d02b      	beq.n	8004334 <UART_SetConfig+0x94c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d025      	beq.n	8004330 <UART_SetConfig+0x948>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b06      	cmp	r3, #6
 80042ea:	d01f      	beq.n	800432c <UART_SetConfig+0x944>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b07      	cmp	r3, #7
 80042f2:	d019      	beq.n	8004328 <UART_SetConfig+0x940>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d013      	beq.n	8004324 <UART_SetConfig+0x93c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b09      	cmp	r3, #9
 8004302:	d00d      	beq.n	8004320 <UART_SetConfig+0x938>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b0a      	cmp	r3, #10
 800430a:	d007      	beq.n	800431c <UART_SetConfig+0x934>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2b0b      	cmp	r3, #11
 8004312:	d101      	bne.n	8004318 <UART_SetConfig+0x930>
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <UART_SetConfig+0xa08>)
 8004316:	e016      	b.n	8004346 <UART_SetConfig+0x95e>
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <UART_SetConfig+0xa04>)
 800431a:	e014      	b.n	8004346 <UART_SetConfig+0x95e>
 800431c:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <UART_SetConfig+0xa0c>)
 800431e:	e012      	b.n	8004346 <UART_SetConfig+0x95e>
 8004320:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <UART_SetConfig+0xa10>)
 8004322:	e010      	b.n	8004346 <UART_SetConfig+0x95e>
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <UART_SetConfig+0xa14>)
 8004326:	e00e      	b.n	8004346 <UART_SetConfig+0x95e>
 8004328:	4b35      	ldr	r3, [pc, #212]	; (8004400 <UART_SetConfig+0xa18>)
 800432a:	e00c      	b.n	8004346 <UART_SetConfig+0x95e>
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <UART_SetConfig+0xa1c>)
 800432e:	e00a      	b.n	8004346 <UART_SetConfig+0x95e>
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <UART_SetConfig+0xa20>)
 8004332:	e008      	b.n	8004346 <UART_SetConfig+0x95e>
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <UART_SetConfig+0xa24>)
 8004336:	e006      	b.n	8004346 <UART_SetConfig+0x95e>
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <UART_SetConfig+0xa28>)
 800433a:	e004      	b.n	8004346 <UART_SetConfig+0x95e>
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <UART_SetConfig+0xa2c>)
 800433e:	e002      	b.n	8004346 <UART_SetConfig+0x95e>
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <UART_SetConfig+0xa30>)
 8004342:	e000      	b.n	8004346 <UART_SetConfig+0x95e>
 8004344:	4b29      	ldr	r3, [pc, #164]	; (80043ec <UART_SetConfig+0xa04>)
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004348:	e0cb      	b.n	80044e2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	d046      	beq.n	80043e0 <UART_SetConfig+0x9f8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b01      	cmp	r3, #1
 8004358:	d040      	beq.n	80043dc <UART_SetConfig+0x9f4>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	2b02      	cmp	r3, #2
 8004360:	d03a      	beq.n	80043d8 <UART_SetConfig+0x9f0>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2b03      	cmp	r3, #3
 8004368:	d034      	beq.n	80043d4 <UART_SetConfig+0x9ec>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b04      	cmp	r3, #4
 8004370:	d02e      	beq.n	80043d0 <UART_SetConfig+0x9e8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b05      	cmp	r3, #5
 8004378:	d028      	beq.n	80043cc <UART_SetConfig+0x9e4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b06      	cmp	r3, #6
 8004380:	d022      	beq.n	80043c8 <UART_SetConfig+0x9e0>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b07      	cmp	r3, #7
 8004388:	d01c      	beq.n	80043c4 <UART_SetConfig+0x9dc>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b08      	cmp	r3, #8
 8004390:	d016      	beq.n	80043c0 <UART_SetConfig+0x9d8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b09      	cmp	r3, #9
 8004398:	d00f      	beq.n	80043ba <UART_SetConfig+0x9d2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b0a      	cmp	r3, #10
 80043a0:	d008      	beq.n	80043b4 <UART_SetConfig+0x9cc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b0b      	cmp	r3, #11
 80043a8:	d102      	bne.n	80043b0 <UART_SetConfig+0x9c8>
 80043aa:	f643 5309 	movw	r3, #15625	; 0x3d09
 80043ae:	e018      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <UART_SetConfig+0xa18>)
 80043b2:	e016      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043b4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80043b8:	e013      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043be:	e010      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <UART_SetConfig+0xa34>)
 80043c2:	e00e      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <UART_SetConfig+0xa08>)
 80043c6:	e00c      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <UART_SetConfig+0xa38>)
 80043ca:	e00a      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043cc:	4b15      	ldr	r3, [pc, #84]	; (8004424 <UART_SetConfig+0xa3c>)
 80043ce:	e008      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <UART_SetConfig+0xa0c>)
 80043d2:	e006      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043d4:	4b14      	ldr	r3, [pc, #80]	; (8004428 <UART_SetConfig+0xa40>)
 80043d6:	e004      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <UART_SetConfig+0xa10>)
 80043da:	e002      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <UART_SetConfig+0xa14>)
 80043de:	e000      	b.n	80043e2 <UART_SetConfig+0x9fa>
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <UART_SetConfig+0xa18>)
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043e4:	e07d      	b.n	80044e2 <UART_SetConfig+0xafa>
 80043e6:	bf00      	nop
 80043e8:	58024400 	.word	0x58024400
 80043ec:	03d09000 	.word	0x03d09000
 80043f0:	0003d090 	.word	0x0003d090
 80043f4:	0007a120 	.word	0x0007a120
 80043f8:	000f4240 	.word	0x000f4240
 80043fc:	001e8480 	.word	0x001e8480
 8004400:	003d0900 	.word	0x003d0900
 8004404:	00516155 	.word	0x00516155
 8004408:	0061a800 	.word	0x0061a800
 800440c:	007a1200 	.word	0x007a1200
 8004410:	00a2c2aa 	.word	0x00a2c2aa
 8004414:	00f42400 	.word	0x00f42400
 8004418:	01e84800 	.word	0x01e84800
 800441c:	0001e848 	.word	0x0001e848
 8004420:	00051615 	.word	0x00051615
 8004424:	00061a80 	.word	0x00061a80
 8004428:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d04e      	beq.n	80044d2 <UART_SetConfig+0xaea>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2b01      	cmp	r3, #1
 800443a:	d047      	beq.n	80044cc <UART_SetConfig+0xae4>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b02      	cmp	r3, #2
 8004442:	d040      	beq.n	80044c6 <UART_SetConfig+0xade>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b03      	cmp	r3, #3
 800444a:	d039      	beq.n	80044c0 <UART_SetConfig+0xad8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b04      	cmp	r3, #4
 8004452:	d032      	beq.n	80044ba <UART_SetConfig+0xad2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b05      	cmp	r3, #5
 800445a:	d02b      	beq.n	80044b4 <UART_SetConfig+0xacc>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b06      	cmp	r3, #6
 8004462:	d024      	beq.n	80044ae <UART_SetConfig+0xac6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b07      	cmp	r3, #7
 800446a:	d01d      	beq.n	80044a8 <UART_SetConfig+0xac0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b08      	cmp	r3, #8
 8004472:	d016      	beq.n	80044a2 <UART_SetConfig+0xaba>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2b09      	cmp	r3, #9
 800447a:	d00f      	beq.n	800449c <UART_SetConfig+0xab4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b0a      	cmp	r3, #10
 8004482:	d008      	beq.n	8004496 <UART_SetConfig+0xaae>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b0b      	cmp	r3, #11
 800448a:	d101      	bne.n	8004490 <UART_SetConfig+0xaa8>
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	e022      	b.n	80044d6 <UART_SetConfig+0xaee>
 8004490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004494:	e01f      	b.n	80044d6 <UART_SetConfig+0xaee>
 8004496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800449a:	e01c      	b.n	80044d6 <UART_SetConfig+0xaee>
 800449c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044a0:	e019      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a6:	e016      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ac:	e013      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044ae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80044b2:	e010      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044b4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80044b8:	e00d      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044be:	e00a      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044c0:	f241 5355 	movw	r3, #5461	; 0x1555
 80044c4:	e007      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ca:	e004      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d0:	e001      	b.n	80044d6 <UART_SetConfig+0xaee>
 80044d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044d8:	e003      	b.n	80044e2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80044e0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f001 83e8 	beq.w	8005cba <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d305      	bcc.n	8004506 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004502:	429a      	cmp	r2, r3
 8004504:	d904      	bls.n	8004510 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800450c:	f001 bbd5 	b.w	8005cba <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004510:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004514:	2b08      	cmp	r3, #8
 8004516:	f000 8154 	beq.w	80047c2 <UART_SetConfig+0xdda>
 800451a:	2b08      	cmp	r3, #8
 800451c:	dc06      	bgt.n	800452c <UART_SetConfig+0xb44>
 800451e:	2b02      	cmp	r3, #2
 8004520:	d00f      	beq.n	8004542 <UART_SetConfig+0xb5a>
 8004522:	2b04      	cmp	r3, #4
 8004524:	f000 80ac 	beq.w	8004680 <UART_SetConfig+0xc98>
 8004528:	f000 bc30 	b.w	8004d8c <UART_SetConfig+0x13a4>
 800452c:	2b20      	cmp	r3, #32
 800452e:	f000 832d 	beq.w	8004b8c <UART_SetConfig+0x11a4>
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	f000 83a5 	beq.w	8004c82 <UART_SetConfig+0x129a>
 8004538:	2b10      	cmp	r3, #16
 800453a:	f000 81e3 	beq.w	8004904 <UART_SetConfig+0xf1c>
 800453e:	f000 bc25 	b.w	8004d8c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004542:	f7fe fdef 	bl	8003124 <HAL_RCCEx_GetD3PCLK1Freq>
 8004546:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	4618      	mov	r0, r3
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d067      	beq.n	8004628 <UART_SetConfig+0xc40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2b01      	cmp	r3, #1
 800455e:	d05e      	beq.n	800461e <UART_SetConfig+0xc36>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b02      	cmp	r3, #2
 8004566:	d055      	beq.n	8004614 <UART_SetConfig+0xc2c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b03      	cmp	r3, #3
 800456e:	d04c      	beq.n	800460a <UART_SetConfig+0xc22>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b04      	cmp	r3, #4
 8004576:	d043      	beq.n	8004600 <UART_SetConfig+0xc18>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b05      	cmp	r3, #5
 800457e:	d03a      	beq.n	80045f6 <UART_SetConfig+0xc0e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2b06      	cmp	r3, #6
 8004586:	d031      	beq.n	80045ec <UART_SetConfig+0xc04>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2b07      	cmp	r3, #7
 800458e:	d028      	beq.n	80045e2 <UART_SetConfig+0xbfa>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	2b08      	cmp	r3, #8
 8004596:	d01f      	beq.n	80045d8 <UART_SetConfig+0xbf0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	2b09      	cmp	r3, #9
 800459e:	d016      	beq.n	80045ce <UART_SetConfig+0xbe6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b0a      	cmp	r3, #10
 80045a6:	d00d      	beq.n	80045c4 <UART_SetConfig+0xbdc>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b0b      	cmp	r3, #11
 80045ae:	d104      	bne.n	80045ba <UART_SetConfig+0xbd2>
 80045b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045b4:	f04f 0400 	mov.w	r4, #0
 80045b8:	e03a      	b.n	8004630 <UART_SetConfig+0xc48>
 80045ba:	f04f 0301 	mov.w	r3, #1
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	e035      	b.n	8004630 <UART_SetConfig+0xc48>
 80045c4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80045c8:	f04f 0400 	mov.w	r4, #0
 80045cc:	e030      	b.n	8004630 <UART_SetConfig+0xc48>
 80045ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80045d2:	f04f 0400 	mov.w	r4, #0
 80045d6:	e02b      	b.n	8004630 <UART_SetConfig+0xc48>
 80045d8:	f04f 0320 	mov.w	r3, #32
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	e026      	b.n	8004630 <UART_SetConfig+0xc48>
 80045e2:	f04f 0310 	mov.w	r3, #16
 80045e6:	f04f 0400 	mov.w	r4, #0
 80045ea:	e021      	b.n	8004630 <UART_SetConfig+0xc48>
 80045ec:	f04f 030c 	mov.w	r3, #12
 80045f0:	f04f 0400 	mov.w	r4, #0
 80045f4:	e01c      	b.n	8004630 <UART_SetConfig+0xc48>
 80045f6:	f04f 030a 	mov.w	r3, #10
 80045fa:	f04f 0400 	mov.w	r4, #0
 80045fe:	e017      	b.n	8004630 <UART_SetConfig+0xc48>
 8004600:	f04f 0308 	mov.w	r3, #8
 8004604:	f04f 0400 	mov.w	r4, #0
 8004608:	e012      	b.n	8004630 <UART_SetConfig+0xc48>
 800460a:	f04f 0306 	mov.w	r3, #6
 800460e:	f04f 0400 	mov.w	r4, #0
 8004612:	e00d      	b.n	8004630 <UART_SetConfig+0xc48>
 8004614:	f04f 0304 	mov.w	r3, #4
 8004618:	f04f 0400 	mov.w	r4, #0
 800461c:	e008      	b.n	8004630 <UART_SetConfig+0xc48>
 800461e:	f04f 0302 	mov.w	r3, #2
 8004622:	f04f 0400 	mov.w	r4, #0
 8004626:	e003      	b.n	8004630 <UART_SetConfig+0xc48>
 8004628:	f04f 0301 	mov.w	r3, #1
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	461a      	mov	r2, r3
 8004632:	4623      	mov	r3, r4
 8004634:	f7fb fe50 	bl	80002d8 <__aeabi_uldivmod>
 8004638:	4603      	mov	r3, r0
 800463a:	460c      	mov	r4, r1
 800463c:	4619      	mov	r1, r3
 800463e:	4622      	mov	r2, r4
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	0214      	lsls	r4, r2, #8
 800464a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800464e:	020b      	lsls	r3, r1, #8
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6852      	ldr	r2, [r2, #4]
 8004654:	0852      	lsrs	r2, r2, #1
 8004656:	4611      	mov	r1, r2
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	eb13 0b01 	adds.w	fp, r3, r1
 8004660:	eb44 0c02 	adc.w	ip, r4, r2
 8004664:	4658      	mov	r0, fp
 8004666:	4661      	mov	r1, ip
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f04f 0400 	mov.w	r4, #0
 8004670:	461a      	mov	r2, r3
 8004672:	4623      	mov	r3, r4
 8004674:	f7fb fe30 	bl	80002d8 <__aeabi_uldivmod>
 8004678:	4603      	mov	r3, r0
 800467a:	460c      	mov	r4, r1
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800467e:	e389      	b.n	8004d94 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004680:	f107 0318 	add.w	r3, r7, #24
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fd63 	bl	8003150 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4618      	mov	r0, r3
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d067      	beq.n	800476a <UART_SetConfig+0xd82>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d05e      	beq.n	8004760 <UART_SetConfig+0xd78>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d055      	beq.n	8004756 <UART_SetConfig+0xd6e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d04c      	beq.n	800474c <UART_SetConfig+0xd64>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d043      	beq.n	8004742 <UART_SetConfig+0xd5a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d03a      	beq.n	8004738 <UART_SetConfig+0xd50>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d031      	beq.n	800472e <UART_SetConfig+0xd46>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2b07      	cmp	r3, #7
 80046d0:	d028      	beq.n	8004724 <UART_SetConfig+0xd3c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d01f      	beq.n	800471a <UART_SetConfig+0xd32>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b09      	cmp	r3, #9
 80046e0:	d016      	beq.n	8004710 <UART_SetConfig+0xd28>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b0a      	cmp	r3, #10
 80046e8:	d00d      	beq.n	8004706 <UART_SetConfig+0xd1e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b0b      	cmp	r3, #11
 80046f0:	d104      	bne.n	80046fc <UART_SetConfig+0xd14>
 80046f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046f6:	f04f 0400 	mov.w	r4, #0
 80046fa:	e03a      	b.n	8004772 <UART_SetConfig+0xd8a>
 80046fc:	f04f 0301 	mov.w	r3, #1
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	e035      	b.n	8004772 <UART_SetConfig+0xd8a>
 8004706:	f04f 0380 	mov.w	r3, #128	; 0x80
 800470a:	f04f 0400 	mov.w	r4, #0
 800470e:	e030      	b.n	8004772 <UART_SetConfig+0xd8a>
 8004710:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	e02b      	b.n	8004772 <UART_SetConfig+0xd8a>
 800471a:	f04f 0320 	mov.w	r3, #32
 800471e:	f04f 0400 	mov.w	r4, #0
 8004722:	e026      	b.n	8004772 <UART_SetConfig+0xd8a>
 8004724:	f04f 0310 	mov.w	r3, #16
 8004728:	f04f 0400 	mov.w	r4, #0
 800472c:	e021      	b.n	8004772 <UART_SetConfig+0xd8a>
 800472e:	f04f 030c 	mov.w	r3, #12
 8004732:	f04f 0400 	mov.w	r4, #0
 8004736:	e01c      	b.n	8004772 <UART_SetConfig+0xd8a>
 8004738:	f04f 030a 	mov.w	r3, #10
 800473c:	f04f 0400 	mov.w	r4, #0
 8004740:	e017      	b.n	8004772 <UART_SetConfig+0xd8a>
 8004742:	f04f 0308 	mov.w	r3, #8
 8004746:	f04f 0400 	mov.w	r4, #0
 800474a:	e012      	b.n	8004772 <UART_SetConfig+0xd8a>
 800474c:	f04f 0306 	mov.w	r3, #6
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	e00d      	b.n	8004772 <UART_SetConfig+0xd8a>
 8004756:	f04f 0304 	mov.w	r3, #4
 800475a:	f04f 0400 	mov.w	r4, #0
 800475e:	e008      	b.n	8004772 <UART_SetConfig+0xd8a>
 8004760:	f04f 0302 	mov.w	r3, #2
 8004764:	f04f 0400 	mov.w	r4, #0
 8004768:	e003      	b.n	8004772 <UART_SetConfig+0xd8a>
 800476a:	f04f 0301 	mov.w	r3, #1
 800476e:	f04f 0400 	mov.w	r4, #0
 8004772:	461a      	mov	r2, r3
 8004774:	4623      	mov	r3, r4
 8004776:	f7fb fdaf 	bl	80002d8 <__aeabi_uldivmod>
 800477a:	4603      	mov	r3, r0
 800477c:	460c      	mov	r4, r1
 800477e:	4619      	mov	r1, r3
 8004780:	4622      	mov	r2, r4
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	0214      	lsls	r4, r2, #8
 800478c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004790:	020b      	lsls	r3, r1, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6852      	ldr	r2, [r2, #4]
 8004796:	0852      	lsrs	r2, r2, #1
 8004798:	4611      	mov	r1, r2
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	eb13 0b01 	adds.w	fp, r3, r1
 80047a2:	eb44 0c02 	adc.w	ip, r4, r2
 80047a6:	4658      	mov	r0, fp
 80047a8:	4661      	mov	r1, ip
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f04f 0400 	mov.w	r4, #0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4623      	mov	r3, r4
 80047b6:	f7fb fd8f 	bl	80002d8 <__aeabi_uldivmod>
 80047ba:	4603      	mov	r3, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80047c0:	e2e8      	b.n	8004d94 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047c2:	f107 030c 	add.w	r3, r7, #12
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fe0e 	bl	80033e8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f04f 0100 	mov.w	r1, #0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d067      	beq.n	80048ac <UART_SetConfig+0xec4>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d05e      	beq.n	80048a2 <UART_SetConfig+0xeba>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d055      	beq.n	8004898 <UART_SetConfig+0xeb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d04c      	beq.n	800488e <UART_SetConfig+0xea6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d043      	beq.n	8004884 <UART_SetConfig+0xe9c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b05      	cmp	r3, #5
 8004802:	d03a      	beq.n	800487a <UART_SetConfig+0xe92>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	2b06      	cmp	r3, #6
 800480a:	d031      	beq.n	8004870 <UART_SetConfig+0xe88>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b07      	cmp	r3, #7
 8004812:	d028      	beq.n	8004866 <UART_SetConfig+0xe7e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b08      	cmp	r3, #8
 800481a:	d01f      	beq.n	800485c <UART_SetConfig+0xe74>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b09      	cmp	r3, #9
 8004822:	d016      	beq.n	8004852 <UART_SetConfig+0xe6a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b0a      	cmp	r3, #10
 800482a:	d00d      	beq.n	8004848 <UART_SetConfig+0xe60>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b0b      	cmp	r3, #11
 8004832:	d104      	bne.n	800483e <UART_SetConfig+0xe56>
 8004834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004838:	f04f 0400 	mov.w	r4, #0
 800483c:	e03a      	b.n	80048b4 <UART_SetConfig+0xecc>
 800483e:	f04f 0301 	mov.w	r3, #1
 8004842:	f04f 0400 	mov.w	r4, #0
 8004846:	e035      	b.n	80048b4 <UART_SetConfig+0xecc>
 8004848:	f04f 0380 	mov.w	r3, #128	; 0x80
 800484c:	f04f 0400 	mov.w	r4, #0
 8004850:	e030      	b.n	80048b4 <UART_SetConfig+0xecc>
 8004852:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004856:	f04f 0400 	mov.w	r4, #0
 800485a:	e02b      	b.n	80048b4 <UART_SetConfig+0xecc>
 800485c:	f04f 0320 	mov.w	r3, #32
 8004860:	f04f 0400 	mov.w	r4, #0
 8004864:	e026      	b.n	80048b4 <UART_SetConfig+0xecc>
 8004866:	f04f 0310 	mov.w	r3, #16
 800486a:	f04f 0400 	mov.w	r4, #0
 800486e:	e021      	b.n	80048b4 <UART_SetConfig+0xecc>
 8004870:	f04f 030c 	mov.w	r3, #12
 8004874:	f04f 0400 	mov.w	r4, #0
 8004878:	e01c      	b.n	80048b4 <UART_SetConfig+0xecc>
 800487a:	f04f 030a 	mov.w	r3, #10
 800487e:	f04f 0400 	mov.w	r4, #0
 8004882:	e017      	b.n	80048b4 <UART_SetConfig+0xecc>
 8004884:	f04f 0308 	mov.w	r3, #8
 8004888:	f04f 0400 	mov.w	r4, #0
 800488c:	e012      	b.n	80048b4 <UART_SetConfig+0xecc>
 800488e:	f04f 0306 	mov.w	r3, #6
 8004892:	f04f 0400 	mov.w	r4, #0
 8004896:	e00d      	b.n	80048b4 <UART_SetConfig+0xecc>
 8004898:	f04f 0304 	mov.w	r3, #4
 800489c:	f04f 0400 	mov.w	r4, #0
 80048a0:	e008      	b.n	80048b4 <UART_SetConfig+0xecc>
 80048a2:	f04f 0302 	mov.w	r3, #2
 80048a6:	f04f 0400 	mov.w	r4, #0
 80048aa:	e003      	b.n	80048b4 <UART_SetConfig+0xecc>
 80048ac:	f04f 0301 	mov.w	r3, #1
 80048b0:	f04f 0400 	mov.w	r4, #0
 80048b4:	461a      	mov	r2, r3
 80048b6:	4623      	mov	r3, r4
 80048b8:	f7fb fd0e 	bl	80002d8 <__aeabi_uldivmod>
 80048bc:	4603      	mov	r3, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	4619      	mov	r1, r3
 80048c2:	4622      	mov	r2, r4
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	f04f 0400 	mov.w	r4, #0
 80048cc:	0214      	lsls	r4, r2, #8
 80048ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048d2:	020b      	lsls	r3, r1, #8
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6852      	ldr	r2, [r2, #4]
 80048d8:	0852      	lsrs	r2, r2, #1
 80048da:	4611      	mov	r1, r2
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	eb13 0b01 	adds.w	fp, r3, r1
 80048e4:	eb44 0c02 	adc.w	ip, r4, r2
 80048e8:	4658      	mov	r0, fp
 80048ea:	4661      	mov	r1, ip
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f04f 0400 	mov.w	r4, #0
 80048f4:	461a      	mov	r2, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	f7fb fcee 	bl	80002d8 <__aeabi_uldivmod>
 80048fc:	4603      	mov	r3, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004902:	e247      	b.n	8004d94 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004904:	4b96      	ldr	r3, [pc, #600]	; (8004b60 <UART_SetConfig+0x1178>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80a3 	beq.w	8004a58 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004912:	4b93      	ldr	r3, [pc, #588]	; (8004b60 <UART_SetConfig+0x1178>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	08db      	lsrs	r3, r3, #3
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	4a91      	ldr	r2, [pc, #580]	; (8004b64 <UART_SetConfig+0x117c>)
 800491e:	fa22 f303 	lsr.w	r3, r2, r3
 8004922:	4618      	mov	r0, r3
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	d067      	beq.n	8004a00 <UART_SetConfig+0x1018>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2b01      	cmp	r3, #1
 8004936:	d05e      	beq.n	80049f6 <UART_SetConfig+0x100e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b02      	cmp	r3, #2
 800493e:	d055      	beq.n	80049ec <UART_SetConfig+0x1004>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	2b03      	cmp	r3, #3
 8004946:	d04c      	beq.n	80049e2 <UART_SetConfig+0xffa>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	2b04      	cmp	r3, #4
 800494e:	d043      	beq.n	80049d8 <UART_SetConfig+0xff0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	2b05      	cmp	r3, #5
 8004956:	d03a      	beq.n	80049ce <UART_SetConfig+0xfe6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b06      	cmp	r3, #6
 800495e:	d031      	beq.n	80049c4 <UART_SetConfig+0xfdc>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b07      	cmp	r3, #7
 8004966:	d028      	beq.n	80049ba <UART_SetConfig+0xfd2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2b08      	cmp	r3, #8
 800496e:	d01f      	beq.n	80049b0 <UART_SetConfig+0xfc8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2b09      	cmp	r3, #9
 8004976:	d016      	beq.n	80049a6 <UART_SetConfig+0xfbe>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2b0a      	cmp	r3, #10
 800497e:	d00d      	beq.n	800499c <UART_SetConfig+0xfb4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b0b      	cmp	r3, #11
 8004986:	d104      	bne.n	8004992 <UART_SetConfig+0xfaa>
 8004988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498c:	f04f 0400 	mov.w	r4, #0
 8004990:	e03a      	b.n	8004a08 <UART_SetConfig+0x1020>
 8004992:	f04f 0301 	mov.w	r3, #1
 8004996:	f04f 0400 	mov.w	r4, #0
 800499a:	e035      	b.n	8004a08 <UART_SetConfig+0x1020>
 800499c:	f04f 0380 	mov.w	r3, #128	; 0x80
 80049a0:	f04f 0400 	mov.w	r4, #0
 80049a4:	e030      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80049aa:	f04f 0400 	mov.w	r4, #0
 80049ae:	e02b      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049b0:	f04f 0320 	mov.w	r3, #32
 80049b4:	f04f 0400 	mov.w	r4, #0
 80049b8:	e026      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049ba:	f04f 0310 	mov.w	r3, #16
 80049be:	f04f 0400 	mov.w	r4, #0
 80049c2:	e021      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049c4:	f04f 030c 	mov.w	r3, #12
 80049c8:	f04f 0400 	mov.w	r4, #0
 80049cc:	e01c      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049ce:	f04f 030a 	mov.w	r3, #10
 80049d2:	f04f 0400 	mov.w	r4, #0
 80049d6:	e017      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049d8:	f04f 0308 	mov.w	r3, #8
 80049dc:	f04f 0400 	mov.w	r4, #0
 80049e0:	e012      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049e2:	f04f 0306 	mov.w	r3, #6
 80049e6:	f04f 0400 	mov.w	r4, #0
 80049ea:	e00d      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049ec:	f04f 0304 	mov.w	r3, #4
 80049f0:	f04f 0400 	mov.w	r4, #0
 80049f4:	e008      	b.n	8004a08 <UART_SetConfig+0x1020>
 80049f6:	f04f 0302 	mov.w	r3, #2
 80049fa:	f04f 0400 	mov.w	r4, #0
 80049fe:	e003      	b.n	8004a08 <UART_SetConfig+0x1020>
 8004a00:	f04f 0301 	mov.w	r3, #1
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f7fb fc64 	bl	80002d8 <__aeabi_uldivmod>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4619      	mov	r1, r3
 8004a16:	4622      	mov	r2, r4
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	f04f 0400 	mov.w	r4, #0
 8004a20:	0214      	lsls	r4, r2, #8
 8004a22:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a26:	020b      	lsls	r3, r1, #8
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6852      	ldr	r2, [r2, #4]
 8004a2c:	0852      	lsrs	r2, r2, #1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	eb13 0b01 	adds.w	fp, r3, r1
 8004a38:	eb44 0c02 	adc.w	ip, r4, r2
 8004a3c:	4658      	mov	r0, fp
 8004a3e:	4661      	mov	r1, ip
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	f7fb fc44 	bl	80002d8 <__aeabi_uldivmod>
 8004a50:	4603      	mov	r3, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8004a56:	e19d      	b.n	8004d94 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d05b      	beq.n	8004b18 <UART_SetConfig+0x1130>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d053      	beq.n	8004b10 <UART_SetConfig+0x1128>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d04b      	beq.n	8004b08 <UART_SetConfig+0x1120>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d043      	beq.n	8004b00 <UART_SetConfig+0x1118>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d03b      	beq.n	8004af8 <UART_SetConfig+0x1110>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d033      	beq.n	8004af0 <UART_SetConfig+0x1108>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d02b      	beq.n	8004ae8 <UART_SetConfig+0x1100>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b07      	cmp	r3, #7
 8004a96:	d023      	beq.n	8004ae0 <UART_SetConfig+0x10f8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d01b      	beq.n	8004ad8 <UART_SetConfig+0x10f0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d013      	beq.n	8004ad0 <UART_SetConfig+0x10e8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b0a      	cmp	r3, #10
 8004aae:	d00b      	beq.n	8004ac8 <UART_SetConfig+0x10e0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2b0b      	cmp	r3, #11
 8004ab6:	d103      	bne.n	8004ac0 <UART_SetConfig+0x10d8>
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <UART_SetConfig+0x117c>)
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	e02e      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004ac0:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <UART_SetConfig+0x1180>)
 8004ac2:	f04f 0403 	mov.w	r4, #3
 8004ac6:	e02a      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004ac8:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <UART_SetConfig+0x1184>)
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	e026      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <UART_SetConfig+0x1188>)
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	e022      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <UART_SetConfig+0x118c>)
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	e01e      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <UART_SetConfig+0x1190>)
 8004ae2:	f04f 0400 	mov.w	r4, #0
 8004ae6:	e01a      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004ae8:	a419      	add	r4, pc, #100	; (adr r4, 8004b50 <UART_SetConfig+0x1168>)
 8004aea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004aee:	e016      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <UART_SetConfig+0x1194>)
 8004af2:	f04f 0400 	mov.w	r4, #0
 8004af6:	e012      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <UART_SetConfig+0x1198>)
 8004afa:	f04f 0400 	mov.w	r4, #0
 8004afe:	e00e      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004b00:	a415      	add	r4, pc, #84	; (adr r4, 8004b58 <UART_SetConfig+0x1170>)
 8004b02:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004b06:	e00a      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <UART_SetConfig+0x119c>)
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	e006      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004b10:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <UART_SetConfig+0x11a0>)
 8004b12:	f04f 0401 	mov.w	r4, #1
 8004b16:	e002      	b.n	8004b1e <UART_SetConfig+0x1136>
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <UART_SetConfig+0x1180>)
 8004b1a:	f04f 0403 	mov.w	r4, #3
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6852      	ldr	r2, [r2, #4]
 8004b22:	0852      	lsrs	r2, r2, #1
 8004b24:	4611      	mov	r1, r2
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	eb13 0b01 	adds.w	fp, r3, r1
 8004b2e:	eb44 0c02 	adc.w	ip, r4, r2
 8004b32:	4658      	mov	r0, fp
 8004b34:	4661      	mov	r1, ip
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f04f 0400 	mov.w	r4, #0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4623      	mov	r3, r4
 8004b42:	f7fb fbc9 	bl	80002d8 <__aeabi_uldivmod>
 8004b46:	4603      	mov	r3, r0
 8004b48:	460c      	mov	r4, r1
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004b4c:	e122      	b.n	8004d94 <UART_SetConfig+0x13ac>
 8004b4e:	bf00      	nop
 8004b50:	51615500 	.word	0x51615500
 8004b54:	00000000 	.word	0x00000000
 8004b58:	a2c2aa00 	.word	0xa2c2aa00
 8004b5c:	00000000 	.word	0x00000000
 8004b60:	58024400 	.word	0x58024400
 8004b64:	03d09000 	.word	0x03d09000
 8004b68:	d0900000 	.word	0xd0900000
 8004b6c:	07a12000 	.word	0x07a12000
 8004b70:	0f424000 	.word	0x0f424000
 8004b74:	1e848000 	.word	0x1e848000
 8004b78:	3d090000 	.word	0x3d090000
 8004b7c:	61a80000 	.word	0x61a80000
 8004b80:	7a120000 	.word	0x7a120000
 8004b84:	f4240000 	.word	0xf4240000
 8004b88:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d05b      	beq.n	8004c4c <UART_SetConfig+0x1264>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d053      	beq.n	8004c44 <UART_SetConfig+0x125c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d04b      	beq.n	8004c3c <UART_SetConfig+0x1254>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d043      	beq.n	8004c34 <UART_SetConfig+0x124c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d03b      	beq.n	8004c2c <UART_SetConfig+0x1244>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b05      	cmp	r3, #5
 8004bba:	d033      	beq.n	8004c24 <UART_SetConfig+0x123c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2b06      	cmp	r3, #6
 8004bc2:	d02b      	beq.n	8004c1c <UART_SetConfig+0x1234>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	2b07      	cmp	r3, #7
 8004bca:	d023      	beq.n	8004c14 <UART_SetConfig+0x122c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d01b      	beq.n	8004c0c <UART_SetConfig+0x1224>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b09      	cmp	r3, #9
 8004bda:	d013      	beq.n	8004c04 <UART_SetConfig+0x121c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b0a      	cmp	r3, #10
 8004be2:	d00b      	beq.n	8004bfc <UART_SetConfig+0x1214>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b0b      	cmp	r3, #11
 8004bea:	d103      	bne.n	8004bf4 <UART_SetConfig+0x120c>
 8004bec:	4bc0      	ldr	r3, [pc, #768]	; (8004ef0 <UART_SetConfig+0x1508>)
 8004bee:	f04f 0400 	mov.w	r4, #0
 8004bf2:	e02e      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004bf4:	4bbf      	ldr	r3, [pc, #764]	; (8004ef4 <UART_SetConfig+0x150c>)
 8004bf6:	f04f 0400 	mov.w	r4, #0
 8004bfa:	e02a      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004bfc:	4bbe      	ldr	r3, [pc, #760]	; (8004ef8 <UART_SetConfig+0x1510>)
 8004bfe:	f04f 0400 	mov.w	r4, #0
 8004c02:	e026      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c04:	4bbd      	ldr	r3, [pc, #756]	; (8004efc <UART_SetConfig+0x1514>)
 8004c06:	f04f 0400 	mov.w	r4, #0
 8004c0a:	e022      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c0c:	4bbc      	ldr	r3, [pc, #752]	; (8004f00 <UART_SetConfig+0x1518>)
 8004c0e:	f04f 0400 	mov.w	r4, #0
 8004c12:	e01e      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c14:	4bbb      	ldr	r3, [pc, #748]	; (8004f04 <UART_SetConfig+0x151c>)
 8004c16:	f04f 0400 	mov.w	r4, #0
 8004c1a:	e01a      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c1c:	a4b0      	add	r4, pc, #704	; (adr r4, 8004ee0 <UART_SetConfig+0x14f8>)
 8004c1e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004c22:	e016      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c24:	4bb8      	ldr	r3, [pc, #736]	; (8004f08 <UART_SetConfig+0x1520>)
 8004c26:	f04f 0400 	mov.w	r4, #0
 8004c2a:	e012      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c2c:	4bb7      	ldr	r3, [pc, #732]	; (8004f0c <UART_SetConfig+0x1524>)
 8004c2e:	f04f 0400 	mov.w	r4, #0
 8004c32:	e00e      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c34:	a4ac      	add	r4, pc, #688	; (adr r4, 8004ee8 <UART_SetConfig+0x1500>)
 8004c36:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004c3a:	e00a      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c3c:	4bb4      	ldr	r3, [pc, #720]	; (8004f10 <UART_SetConfig+0x1528>)
 8004c3e:	f04f 0400 	mov.w	r4, #0
 8004c42:	e006      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c44:	4bb3      	ldr	r3, [pc, #716]	; (8004f14 <UART_SetConfig+0x152c>)
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	e002      	b.n	8004c52 <UART_SetConfig+0x126a>
 8004c4c:	4ba9      	ldr	r3, [pc, #676]	; (8004ef4 <UART_SetConfig+0x150c>)
 8004c4e:	f04f 0400 	mov.w	r4, #0
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6852      	ldr	r2, [r2, #4]
 8004c56:	0852      	lsrs	r2, r2, #1
 8004c58:	4611      	mov	r1, r2
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	eb13 0b01 	adds.w	fp, r3, r1
 8004c62:	eb44 0c02 	adc.w	ip, r4, r2
 8004c66:	4658      	mov	r0, fp
 8004c68:	4661      	mov	r1, ip
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f04f 0400 	mov.w	r4, #0
 8004c72:	461a      	mov	r2, r3
 8004c74:	4623      	mov	r3, r4
 8004c76:	f7fb fb2f 	bl	80002d8 <__aeabi_uldivmod>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c80:	e088      	b.n	8004d94 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d064      	beq.n	8004d54 <UART_SetConfig+0x136c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d05b      	beq.n	8004d4a <UART_SetConfig+0x1362>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d052      	beq.n	8004d40 <UART_SetConfig+0x1358>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d04a      	beq.n	8004d38 <UART_SetConfig+0x1350>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d041      	beq.n	8004d2e <UART_SetConfig+0x1346>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d039      	beq.n	8004d26 <UART_SetConfig+0x133e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d031      	beq.n	8004d1e <UART_SetConfig+0x1336>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b07      	cmp	r3, #7
 8004cc0:	d028      	beq.n	8004d14 <UART_SetConfig+0x132c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d01f      	beq.n	8004d0a <UART_SetConfig+0x1322>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b09      	cmp	r3, #9
 8004cd0:	d016      	beq.n	8004d00 <UART_SetConfig+0x1318>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	2b0a      	cmp	r3, #10
 8004cd8:	d00d      	beq.n	8004cf6 <UART_SetConfig+0x130e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	2b0b      	cmp	r3, #11
 8004ce0:	d104      	bne.n	8004cec <UART_SetConfig+0x1304>
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	f04f 0400 	mov.w	r4, #0
 8004cea:	e037      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004cec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004cf0:	f04f 0400 	mov.w	r4, #0
 8004cf4:	e032      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	e02d      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d04:	f04f 0400 	mov.w	r4, #0
 8004d08:	e028      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d0e:	f04f 0400 	mov.w	r4, #0
 8004d12:	e023      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d18:	f04f 0400 	mov.w	r4, #0
 8004d1c:	e01e      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d1e:	4b7e      	ldr	r3, [pc, #504]	; (8004f18 <UART_SetConfig+0x1530>)
 8004d20:	f04f 0400 	mov.w	r4, #0
 8004d24:	e01a      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d26:	4b7d      	ldr	r3, [pc, #500]	; (8004f1c <UART_SetConfig+0x1534>)
 8004d28:	f04f 0400 	mov.w	r4, #0
 8004d2c:	e016      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d32:	f04f 0400 	mov.w	r4, #0
 8004d36:	e011      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d38:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <UART_SetConfig+0x1538>)
 8004d3a:	f04f 0400 	mov.w	r4, #0
 8004d3e:	e00d      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d44:	f04f 0400 	mov.w	r4, #0
 8004d48:	e008      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d4e:	f04f 0400 	mov.w	r4, #0
 8004d52:	e003      	b.n	8004d5c <UART_SetConfig+0x1374>
 8004d54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d58:	f04f 0400 	mov.w	r4, #0
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6852      	ldr	r2, [r2, #4]
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	4611      	mov	r1, r2
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	eb13 0b01 	adds.w	fp, r3, r1
 8004d6c:	eb44 0c02 	adc.w	ip, r4, r2
 8004d70:	4658      	mov	r0, fp
 8004d72:	4661      	mov	r1, ip
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f04f 0400 	mov.w	r4, #0
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4623      	mov	r3, r4
 8004d80:	f7fb faaa 	bl	80002d8 <__aeabi_uldivmod>
 8004d84:	4603      	mov	r3, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d8a:	e003      	b.n	8004d94 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8004d92:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9a:	d309      	bcc.n	8004db0 <UART_SetConfig+0x13c8>
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da2:	d205      	bcs.n	8004db0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004daa:	60da      	str	r2, [r3, #12]
 8004dac:	f000 bf85 	b.w	8005cba <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db6:	f000 bf80 	b.w	8005cba <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc2:	f040 83da 	bne.w	800557a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8004dc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	f200 83b3 	bhi.w	8005536 <UART_SetConfig+0x1b4e>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0x13f0>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004f25 	.word	0x08004f25
 8004ddc:	08004fdd 	.word	0x08004fdd
 8004de0:	08005537 	.word	0x08005537
 8004de4:	08005537 	.word	0x08005537
 8004de8:	08005095 	.word	0x08005095
 8004dec:	08005537 	.word	0x08005537
 8004df0:	08005537 	.word	0x08005537
 8004df4:	08005537 	.word	0x08005537
 8004df8:	08005151 	.word	0x08005151
 8004dfc:	08005537 	.word	0x08005537
 8004e00:	08005537 	.word	0x08005537
 8004e04:	08005537 	.word	0x08005537
 8004e08:	08005537 	.word	0x08005537
 8004e0c:	08005537 	.word	0x08005537
 8004e10:	08005537 	.word	0x08005537
 8004e14:	08005537 	.word	0x08005537
 8004e18:	0800520d 	.word	0x0800520d
 8004e1c:	08005537 	.word	0x08005537
 8004e20:	08005537 	.word	0x08005537
 8004e24:	08005537 	.word	0x08005537
 8004e28:	08005537 	.word	0x08005537
 8004e2c:	08005537 	.word	0x08005537
 8004e30:	08005537 	.word	0x08005537
 8004e34:	08005537 	.word	0x08005537
 8004e38:	08005537 	.word	0x08005537
 8004e3c:	08005537 	.word	0x08005537
 8004e40:	08005537 	.word	0x08005537
 8004e44:	08005537 	.word	0x08005537
 8004e48:	08005537 	.word	0x08005537
 8004e4c:	08005537 	.word	0x08005537
 8004e50:	08005537 	.word	0x08005537
 8004e54:	08005537 	.word	0x08005537
 8004e58:	0800537f 	.word	0x0800537f
 8004e5c:	08005537 	.word	0x08005537
 8004e60:	08005537 	.word	0x08005537
 8004e64:	08005537 	.word	0x08005537
 8004e68:	08005537 	.word	0x08005537
 8004e6c:	08005537 	.word	0x08005537
 8004e70:	08005537 	.word	0x08005537
 8004e74:	08005537 	.word	0x08005537
 8004e78:	08005537 	.word	0x08005537
 8004e7c:	08005537 	.word	0x08005537
 8004e80:	08005537 	.word	0x08005537
 8004e84:	08005537 	.word	0x08005537
 8004e88:	08005537 	.word	0x08005537
 8004e8c:	08005537 	.word	0x08005537
 8004e90:	08005537 	.word	0x08005537
 8004e94:	08005537 	.word	0x08005537
 8004e98:	08005537 	.word	0x08005537
 8004e9c:	08005537 	.word	0x08005537
 8004ea0:	08005537 	.word	0x08005537
 8004ea4:	08005537 	.word	0x08005537
 8004ea8:	08005537 	.word	0x08005537
 8004eac:	08005537 	.word	0x08005537
 8004eb0:	08005537 	.word	0x08005537
 8004eb4:	08005537 	.word	0x08005537
 8004eb8:	08005537 	.word	0x08005537
 8004ebc:	08005537 	.word	0x08005537
 8004ec0:	08005537 	.word	0x08005537
 8004ec4:	08005537 	.word	0x08005537
 8004ec8:	08005537 	.word	0x08005537
 8004ecc:	08005537 	.word	0x08005537
 8004ed0:	08005537 	.word	0x08005537
 8004ed4:	08005537 	.word	0x08005537
 8004ed8:	08005475 	.word	0x08005475
 8004edc:	f3af 8000 	nop.w
 8004ee0:	05161500 	.word	0x05161500
 8004ee4:	00000000 	.word	0x00000000
 8004ee8:	0a2c2a00 	.word	0x0a2c2a00
 8004eec:	00000000 	.word	0x00000000
 8004ef0:	003d0900 	.word	0x003d0900
 8004ef4:	3d090000 	.word	0x3d090000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	00f42400 	.word	0x00f42400
 8004f00:	01e84800 	.word	0x01e84800
 8004f04:	03d09000 	.word	0x03d09000
 8004f08:	061a8000 	.word	0x061a8000
 8004f0c:	07a12000 	.word	0x07a12000
 8004f10:	0f424000 	.word	0x0f424000
 8004f14:	1e848000 	.word	0x1e848000
 8004f18:	000aaa00 	.word	0x000aaa00
 8004f1c:	000ccc00 	.word	0x000ccc00
 8004f20:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fd f9c8 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 8004f28:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d044      	beq.n	8004fbc <UART_SetConfig+0x15d4>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d03e      	beq.n	8004fb8 <UART_SetConfig+0x15d0>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d038      	beq.n	8004fb4 <UART_SetConfig+0x15cc>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d032      	beq.n	8004fb0 <UART_SetConfig+0x15c8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d02c      	beq.n	8004fac <UART_SetConfig+0x15c4>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d026      	beq.n	8004fa8 <UART_SetConfig+0x15c0>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d020      	beq.n	8004fa4 <UART_SetConfig+0x15bc>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b07      	cmp	r3, #7
 8004f68:	d01a      	beq.n	8004fa0 <UART_SetConfig+0x15b8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d014      	beq.n	8004f9c <UART_SetConfig+0x15b4>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b09      	cmp	r3, #9
 8004f78:	d00e      	beq.n	8004f98 <UART_SetConfig+0x15b0>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b0a      	cmp	r3, #10
 8004f80:	d008      	beq.n	8004f94 <UART_SetConfig+0x15ac>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b0b      	cmp	r3, #11
 8004f88:	d102      	bne.n	8004f90 <UART_SetConfig+0x15a8>
 8004f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f8e:	e016      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e014      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	e012      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	e010      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e00e      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	e00c      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	e00a      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fa8:	230a      	movs	r3, #10
 8004faa:	e008      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fac:	2308      	movs	r3, #8
 8004fae:	e006      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	e004      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	e002      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e000      	b.n	8004fbe <UART_SetConfig+0x15d6>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	005a      	lsls	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fda:	e2b0      	b.n	800553e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fd f982 	bl	80022e4 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d044      	beq.n	8005074 <UART_SetConfig+0x168c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d03e      	beq.n	8005070 <UART_SetConfig+0x1688>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d038      	beq.n	800506c <UART_SetConfig+0x1684>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d032      	beq.n	8005068 <UART_SetConfig+0x1680>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b04      	cmp	r3, #4
 8005008:	d02c      	beq.n	8005064 <UART_SetConfig+0x167c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b05      	cmp	r3, #5
 8005010:	d026      	beq.n	8005060 <UART_SetConfig+0x1678>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b06      	cmp	r3, #6
 8005018:	d020      	beq.n	800505c <UART_SetConfig+0x1674>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b07      	cmp	r3, #7
 8005020:	d01a      	beq.n	8005058 <UART_SetConfig+0x1670>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b08      	cmp	r3, #8
 8005028:	d014      	beq.n	8005054 <UART_SetConfig+0x166c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b09      	cmp	r3, #9
 8005030:	d00e      	beq.n	8005050 <UART_SetConfig+0x1668>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b0a      	cmp	r3, #10
 8005038:	d008      	beq.n	800504c <UART_SetConfig+0x1664>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b0b      	cmp	r3, #11
 8005040:	d102      	bne.n	8005048 <UART_SetConfig+0x1660>
 8005042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005046:	e016      	b.n	8005076 <UART_SetConfig+0x168e>
 8005048:	2301      	movs	r3, #1
 800504a:	e014      	b.n	8005076 <UART_SetConfig+0x168e>
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	e012      	b.n	8005076 <UART_SetConfig+0x168e>
 8005050:	2340      	movs	r3, #64	; 0x40
 8005052:	e010      	b.n	8005076 <UART_SetConfig+0x168e>
 8005054:	2320      	movs	r3, #32
 8005056:	e00e      	b.n	8005076 <UART_SetConfig+0x168e>
 8005058:	2310      	movs	r3, #16
 800505a:	e00c      	b.n	8005076 <UART_SetConfig+0x168e>
 800505c:	230c      	movs	r3, #12
 800505e:	e00a      	b.n	8005076 <UART_SetConfig+0x168e>
 8005060:	230a      	movs	r3, #10
 8005062:	e008      	b.n	8005076 <UART_SetConfig+0x168e>
 8005064:	2308      	movs	r3, #8
 8005066:	e006      	b.n	8005076 <UART_SetConfig+0x168e>
 8005068:	2306      	movs	r3, #6
 800506a:	e004      	b.n	8005076 <UART_SetConfig+0x168e>
 800506c:	2304      	movs	r3, #4
 800506e:	e002      	b.n	8005076 <UART_SetConfig+0x168e>
 8005070:	2302      	movs	r3, #2
 8005072:	e000      	b.n	8005076 <UART_SetConfig+0x168e>
 8005074:	2301      	movs	r3, #1
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	005a      	lsls	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	b29b      	uxth	r3, r3
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005092:	e254      	b.n	800553e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005094:	f107 0318 	add.w	r3, r7, #24
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe f859 	bl	8003150 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d044      	beq.n	8005132 <UART_SetConfig+0x174a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d03e      	beq.n	800512e <UART_SetConfig+0x1746>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d038      	beq.n	800512a <UART_SetConfig+0x1742>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d032      	beq.n	8005126 <UART_SetConfig+0x173e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d02c      	beq.n	8005122 <UART_SetConfig+0x173a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b05      	cmp	r3, #5
 80050ce:	d026      	beq.n	800511e <UART_SetConfig+0x1736>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b06      	cmp	r3, #6
 80050d6:	d020      	beq.n	800511a <UART_SetConfig+0x1732>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b07      	cmp	r3, #7
 80050de:	d01a      	beq.n	8005116 <UART_SetConfig+0x172e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d014      	beq.n	8005112 <UART_SetConfig+0x172a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b09      	cmp	r3, #9
 80050ee:	d00e      	beq.n	800510e <UART_SetConfig+0x1726>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b0a      	cmp	r3, #10
 80050f6:	d008      	beq.n	800510a <UART_SetConfig+0x1722>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b0b      	cmp	r3, #11
 80050fe:	d102      	bne.n	8005106 <UART_SetConfig+0x171e>
 8005100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005104:	e016      	b.n	8005134 <UART_SetConfig+0x174c>
 8005106:	2301      	movs	r3, #1
 8005108:	e014      	b.n	8005134 <UART_SetConfig+0x174c>
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	e012      	b.n	8005134 <UART_SetConfig+0x174c>
 800510e:	2340      	movs	r3, #64	; 0x40
 8005110:	e010      	b.n	8005134 <UART_SetConfig+0x174c>
 8005112:	2320      	movs	r3, #32
 8005114:	e00e      	b.n	8005134 <UART_SetConfig+0x174c>
 8005116:	2310      	movs	r3, #16
 8005118:	e00c      	b.n	8005134 <UART_SetConfig+0x174c>
 800511a:	230c      	movs	r3, #12
 800511c:	e00a      	b.n	8005134 <UART_SetConfig+0x174c>
 800511e:	230a      	movs	r3, #10
 8005120:	e008      	b.n	8005134 <UART_SetConfig+0x174c>
 8005122:	2308      	movs	r3, #8
 8005124:	e006      	b.n	8005134 <UART_SetConfig+0x174c>
 8005126:	2306      	movs	r3, #6
 8005128:	e004      	b.n	8005134 <UART_SetConfig+0x174c>
 800512a:	2304      	movs	r3, #4
 800512c:	e002      	b.n	8005134 <UART_SetConfig+0x174c>
 800512e:	2302      	movs	r3, #2
 8005130:	e000      	b.n	8005134 <UART_SetConfig+0x174c>
 8005132:	2301      	movs	r3, #1
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	005a      	lsls	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	b29b      	uxth	r3, r3
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800514e:	e1f6      	b.n	800553e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005150:	f107 030c 	add.w	r3, r7, #12
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe f947 	bl	80033e8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d044      	beq.n	80051ee <UART_SetConfig+0x1806>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b01      	cmp	r3, #1
 800516a:	d03e      	beq.n	80051ea <UART_SetConfig+0x1802>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b02      	cmp	r3, #2
 8005172:	d038      	beq.n	80051e6 <UART_SetConfig+0x17fe>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b03      	cmp	r3, #3
 800517a:	d032      	beq.n	80051e2 <UART_SetConfig+0x17fa>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b04      	cmp	r3, #4
 8005182:	d02c      	beq.n	80051de <UART_SetConfig+0x17f6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b05      	cmp	r3, #5
 800518a:	d026      	beq.n	80051da <UART_SetConfig+0x17f2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b06      	cmp	r3, #6
 8005192:	d020      	beq.n	80051d6 <UART_SetConfig+0x17ee>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b07      	cmp	r3, #7
 800519a:	d01a      	beq.n	80051d2 <UART_SetConfig+0x17ea>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d014      	beq.n	80051ce <UART_SetConfig+0x17e6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b09      	cmp	r3, #9
 80051aa:	d00e      	beq.n	80051ca <UART_SetConfig+0x17e2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b0a      	cmp	r3, #10
 80051b2:	d008      	beq.n	80051c6 <UART_SetConfig+0x17de>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b0b      	cmp	r3, #11
 80051ba:	d102      	bne.n	80051c2 <UART_SetConfig+0x17da>
 80051bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051c0:	e016      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e014      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	e012      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	e010      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051ce:	2320      	movs	r3, #32
 80051d0:	e00e      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051d2:	2310      	movs	r3, #16
 80051d4:	e00c      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051d6:	230c      	movs	r3, #12
 80051d8:	e00a      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051da:	230a      	movs	r3, #10
 80051dc:	e008      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051de:	2308      	movs	r3, #8
 80051e0:	e006      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051e2:	2306      	movs	r3, #6
 80051e4:	e004      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051e6:	2304      	movs	r3, #4
 80051e8:	e002      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e000      	b.n	80051f0 <UART_SetConfig+0x1808>
 80051ee:	2301      	movs	r3, #1
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	005a      	lsls	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	441a      	add	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	b29b      	uxth	r3, r3
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800520a:	e198      	b.n	800553e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800520c:	4b87      	ldr	r3, [pc, #540]	; (800542c <UART_SetConfig+0x1a44>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05e      	beq.n	80052d6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005218:	4b84      	ldr	r3, [pc, #528]	; (800542c <UART_SetConfig+0x1a44>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	08db      	lsrs	r3, r3, #3
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	4a83      	ldr	r2, [pc, #524]	; (8005430 <UART_SetConfig+0x1a48>)
 8005224:	40da      	lsrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d044      	beq.n	80052b8 <UART_SetConfig+0x18d0>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b01      	cmp	r3, #1
 8005234:	d03e      	beq.n	80052b4 <UART_SetConfig+0x18cc>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b02      	cmp	r3, #2
 800523c:	d038      	beq.n	80052b0 <UART_SetConfig+0x18c8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b03      	cmp	r3, #3
 8005244:	d032      	beq.n	80052ac <UART_SetConfig+0x18c4>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b04      	cmp	r3, #4
 800524c:	d02c      	beq.n	80052a8 <UART_SetConfig+0x18c0>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b05      	cmp	r3, #5
 8005254:	d026      	beq.n	80052a4 <UART_SetConfig+0x18bc>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b06      	cmp	r3, #6
 800525c:	d020      	beq.n	80052a0 <UART_SetConfig+0x18b8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b07      	cmp	r3, #7
 8005264:	d01a      	beq.n	800529c <UART_SetConfig+0x18b4>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b08      	cmp	r3, #8
 800526c:	d014      	beq.n	8005298 <UART_SetConfig+0x18b0>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b09      	cmp	r3, #9
 8005274:	d00e      	beq.n	8005294 <UART_SetConfig+0x18ac>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b0a      	cmp	r3, #10
 800527c:	d008      	beq.n	8005290 <UART_SetConfig+0x18a8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b0b      	cmp	r3, #11
 8005284:	d102      	bne.n	800528c <UART_SetConfig+0x18a4>
 8005286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800528a:	e016      	b.n	80052ba <UART_SetConfig+0x18d2>
 800528c:	2301      	movs	r3, #1
 800528e:	e014      	b.n	80052ba <UART_SetConfig+0x18d2>
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	e012      	b.n	80052ba <UART_SetConfig+0x18d2>
 8005294:	2340      	movs	r3, #64	; 0x40
 8005296:	e010      	b.n	80052ba <UART_SetConfig+0x18d2>
 8005298:	2320      	movs	r3, #32
 800529a:	e00e      	b.n	80052ba <UART_SetConfig+0x18d2>
 800529c:	2310      	movs	r3, #16
 800529e:	e00c      	b.n	80052ba <UART_SetConfig+0x18d2>
 80052a0:	230c      	movs	r3, #12
 80052a2:	e00a      	b.n	80052ba <UART_SetConfig+0x18d2>
 80052a4:	230a      	movs	r3, #10
 80052a6:	e008      	b.n	80052ba <UART_SetConfig+0x18d2>
 80052a8:	2308      	movs	r3, #8
 80052aa:	e006      	b.n	80052ba <UART_SetConfig+0x18d2>
 80052ac:	2306      	movs	r3, #6
 80052ae:	e004      	b.n	80052ba <UART_SetConfig+0x18d2>
 80052b0:	2304      	movs	r3, #4
 80052b2:	e002      	b.n	80052ba <UART_SetConfig+0x18d2>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e000      	b.n	80052ba <UART_SetConfig+0x18d2>
 80052b8:	2301      	movs	r3, #1
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	005a      	lsls	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	441a      	add	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80052d4:	e133      	b.n	800553e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d043      	beq.n	8005366 <UART_SetConfig+0x197e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d03d      	beq.n	8005362 <UART_SetConfig+0x197a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d037      	beq.n	800535e <UART_SetConfig+0x1976>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d031      	beq.n	800535a <UART_SetConfig+0x1972>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d02b      	beq.n	8005356 <UART_SetConfig+0x196e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b05      	cmp	r3, #5
 8005304:	d025      	beq.n	8005352 <UART_SetConfig+0x196a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b06      	cmp	r3, #6
 800530c:	d01f      	beq.n	800534e <UART_SetConfig+0x1966>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b07      	cmp	r3, #7
 8005314:	d019      	beq.n	800534a <UART_SetConfig+0x1962>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b08      	cmp	r3, #8
 800531c:	d013      	beq.n	8005346 <UART_SetConfig+0x195e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b09      	cmp	r3, #9
 8005324:	d00d      	beq.n	8005342 <UART_SetConfig+0x195a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b0a      	cmp	r3, #10
 800532c:	d007      	beq.n	800533e <UART_SetConfig+0x1956>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b0b      	cmp	r3, #11
 8005334:	d101      	bne.n	800533a <UART_SetConfig+0x1952>
 8005336:	4b3f      	ldr	r3, [pc, #252]	; (8005434 <UART_SetConfig+0x1a4c>)
 8005338:	e016      	b.n	8005368 <UART_SetConfig+0x1980>
 800533a:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <UART_SetConfig+0x1a50>)
 800533c:	e014      	b.n	8005368 <UART_SetConfig+0x1980>
 800533e:	4b3f      	ldr	r3, [pc, #252]	; (800543c <UART_SetConfig+0x1a54>)
 8005340:	e012      	b.n	8005368 <UART_SetConfig+0x1980>
 8005342:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <UART_SetConfig+0x1a58>)
 8005344:	e010      	b.n	8005368 <UART_SetConfig+0x1980>
 8005346:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <UART_SetConfig+0x1a5c>)
 8005348:	e00e      	b.n	8005368 <UART_SetConfig+0x1980>
 800534a:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <UART_SetConfig+0x1a60>)
 800534c:	e00c      	b.n	8005368 <UART_SetConfig+0x1980>
 800534e:	4b3f      	ldr	r3, [pc, #252]	; (800544c <UART_SetConfig+0x1a64>)
 8005350:	e00a      	b.n	8005368 <UART_SetConfig+0x1980>
 8005352:	4b3f      	ldr	r3, [pc, #252]	; (8005450 <UART_SetConfig+0x1a68>)
 8005354:	e008      	b.n	8005368 <UART_SetConfig+0x1980>
 8005356:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <UART_SetConfig+0x1a6c>)
 8005358:	e006      	b.n	8005368 <UART_SetConfig+0x1980>
 800535a:	4b3f      	ldr	r3, [pc, #252]	; (8005458 <UART_SetConfig+0x1a70>)
 800535c:	e004      	b.n	8005368 <UART_SetConfig+0x1980>
 800535e:	4b3f      	ldr	r3, [pc, #252]	; (800545c <UART_SetConfig+0x1a74>)
 8005360:	e002      	b.n	8005368 <UART_SetConfig+0x1980>
 8005362:	4b33      	ldr	r3, [pc, #204]	; (8005430 <UART_SetConfig+0x1a48>)
 8005364:	e000      	b.n	8005368 <UART_SetConfig+0x1980>
 8005366:	4b34      	ldr	r3, [pc, #208]	; (8005438 <UART_SetConfig+0x1a50>)
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6852      	ldr	r2, [r2, #4]
 800536c:	0852      	lsrs	r2, r2, #1
 800536e:	441a      	add	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	b29b      	uxth	r3, r3
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800537c:	e0df      	b.n	800553e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	2b00      	cmp	r3, #0
 8005384:	d045      	beq.n	8005412 <UART_SetConfig+0x1a2a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b01      	cmp	r3, #1
 800538c:	d03f      	beq.n	800540e <UART_SetConfig+0x1a26>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b02      	cmp	r3, #2
 8005394:	d039      	beq.n	800540a <UART_SetConfig+0x1a22>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b03      	cmp	r3, #3
 800539c:	d033      	beq.n	8005406 <UART_SetConfig+0x1a1e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d02d      	beq.n	8005402 <UART_SetConfig+0x1a1a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d027      	beq.n	80053fe <UART_SetConfig+0x1a16>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d021      	beq.n	80053fa <UART_SetConfig+0x1a12>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b07      	cmp	r3, #7
 80053bc:	d01b      	beq.n	80053f6 <UART_SetConfig+0x1a0e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d015      	beq.n	80053f2 <UART_SetConfig+0x1a0a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b09      	cmp	r3, #9
 80053cc:	d00f      	beq.n	80053ee <UART_SetConfig+0x1a06>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b0a      	cmp	r3, #10
 80053d4:	d008      	beq.n	80053e8 <UART_SetConfig+0x1a00>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b0b      	cmp	r3, #11
 80053dc:	d102      	bne.n	80053e4 <UART_SetConfig+0x19fc>
 80053de:	f647 2312 	movw	r3, #31250	; 0x7a12
 80053e2:	e017      	b.n	8005414 <UART_SetConfig+0x1a2c>
 80053e4:	4b18      	ldr	r3, [pc, #96]	; (8005448 <UART_SetConfig+0x1a60>)
 80053e6:	e015      	b.n	8005414 <UART_SetConfig+0x1a2c>
 80053e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053ec:	e012      	b.n	8005414 <UART_SetConfig+0x1a2c>
 80053ee:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <UART_SetConfig+0x1a78>)
 80053f0:	e010      	b.n	8005414 <UART_SetConfig+0x1a2c>
 80053f2:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <UART_SetConfig+0x1a7c>)
 80053f4:	e00e      	b.n	8005414 <UART_SetConfig+0x1a2c>
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <UART_SetConfig+0x1a4c>)
 80053f8:	e00c      	b.n	8005414 <UART_SetConfig+0x1a2c>
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <UART_SetConfig+0x1a80>)
 80053fc:	e00a      	b.n	8005414 <UART_SetConfig+0x1a2c>
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <UART_SetConfig+0x1a84>)
 8005400:	e008      	b.n	8005414 <UART_SetConfig+0x1a2c>
 8005402:	4b0e      	ldr	r3, [pc, #56]	; (800543c <UART_SetConfig+0x1a54>)
 8005404:	e006      	b.n	8005414 <UART_SetConfig+0x1a2c>
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <UART_SetConfig+0x1a88>)
 8005408:	e004      	b.n	8005414 <UART_SetConfig+0x1a2c>
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <UART_SetConfig+0x1a58>)
 800540c:	e002      	b.n	8005414 <UART_SetConfig+0x1a2c>
 800540e:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <UART_SetConfig+0x1a5c>)
 8005410:	e000      	b.n	8005414 <UART_SetConfig+0x1a2c>
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <UART_SetConfig+0x1a60>)
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6852      	ldr	r2, [r2, #4]
 8005418:	0852      	lsrs	r2, r2, #1
 800541a:	441a      	add	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	b29b      	uxth	r3, r3
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005428:	e089      	b.n	800553e <UART_SetConfig+0x1b56>
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
 8005430:	03d09000 	.word	0x03d09000
 8005434:	0007a120 	.word	0x0007a120
 8005438:	07a12000 	.word	0x07a12000
 800543c:	000f4240 	.word	0x000f4240
 8005440:	001e8480 	.word	0x001e8480
 8005444:	003d0900 	.word	0x003d0900
 8005448:	007a1200 	.word	0x007a1200
 800544c:	00a2c2aa 	.word	0x00a2c2aa
 8005450:	00c35000 	.word	0x00c35000
 8005454:	00f42400 	.word	0x00f42400
 8005458:	01458554 	.word	0x01458554
 800545c:	01e84800 	.word	0x01e84800
 8005460:	0001e848 	.word	0x0001e848
 8005464:	0003d090 	.word	0x0003d090
 8005468:	000a2c2a 	.word	0x000a2c2a
 800546c:	000c3500 	.word	0x000c3500
 8005470:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d04f      	beq.n	800551c <UART_SetConfig+0x1b34>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b01      	cmp	r3, #1
 8005482:	d048      	beq.n	8005516 <UART_SetConfig+0x1b2e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b02      	cmp	r3, #2
 800548a:	d041      	beq.n	8005510 <UART_SetConfig+0x1b28>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b03      	cmp	r3, #3
 8005492:	d03a      	beq.n	800550a <UART_SetConfig+0x1b22>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b04      	cmp	r3, #4
 800549a:	d033      	beq.n	8005504 <UART_SetConfig+0x1b1c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b05      	cmp	r3, #5
 80054a2:	d02c      	beq.n	80054fe <UART_SetConfig+0x1b16>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	d025      	beq.n	80054f8 <UART_SetConfig+0x1b10>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	d01e      	beq.n	80054f2 <UART_SetConfig+0x1b0a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d017      	beq.n	80054ec <UART_SetConfig+0x1b04>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d010      	beq.n	80054e6 <UART_SetConfig+0x1afe>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b0a      	cmp	r3, #10
 80054ca:	d009      	beq.n	80054e0 <UART_SetConfig+0x1af8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b0b      	cmp	r3, #11
 80054d2:	d102      	bne.n	80054da <UART_SetConfig+0x1af2>
 80054d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d8:	e022      	b.n	8005520 <UART_SetConfig+0x1b38>
 80054da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054de:	e01f      	b.n	8005520 <UART_SetConfig+0x1b38>
 80054e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e4:	e01c      	b.n	8005520 <UART_SetConfig+0x1b38>
 80054e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ea:	e019      	b.n	8005520 <UART_SetConfig+0x1b38>
 80054ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054f0:	e016      	b.n	8005520 <UART_SetConfig+0x1b38>
 80054f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f6:	e013      	b.n	8005520 <UART_SetConfig+0x1b38>
 80054f8:	f241 5354 	movw	r3, #5460	; 0x1554
 80054fc:	e010      	b.n	8005520 <UART_SetConfig+0x1b38>
 80054fe:	f641 1398 	movw	r3, #6552	; 0x1998
 8005502:	e00d      	b.n	8005520 <UART_SetConfig+0x1b38>
 8005504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005508:	e00a      	b.n	8005520 <UART_SetConfig+0x1b38>
 800550a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800550e:	e007      	b.n	8005520 <UART_SetConfig+0x1b38>
 8005510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005514:	e004      	b.n	8005520 <UART_SetConfig+0x1b38>
 8005516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551a:	e001      	b.n	8005520 <UART_SetConfig+0x1b38>
 800551c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6852      	ldr	r2, [r2, #4]
 8005524:	0852      	lsrs	r2, r2, #1
 8005526:	441a      	add	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005534:	e003      	b.n	800553e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800553c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	2b0f      	cmp	r3, #15
 8005542:	d916      	bls.n	8005572 <UART_SetConfig+0x1b8a>
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554a:	d212      	bcs.n	8005572 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	b29b      	uxth	r3, r3
 8005550:	f023 030f 	bic.w	r3, r3, #15
 8005554:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	b29a      	uxth	r2, r3
 8005562:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005564:	4313      	orrs	r3, r2
 8005566:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	e3a3      	b.n	8005cba <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005578:	e39f      	b.n	8005cba <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800557a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	f200 8388 	bhi.w	8005c94 <UART_SetConfig+0x22ac>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x1ba4>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	08005691 	.word	0x08005691
 8005590:	08005747 	.word	0x08005747
 8005594:	08005c95 	.word	0x08005c95
 8005598:	08005c95 	.word	0x08005c95
 800559c:	080057fd 	.word	0x080057fd
 80055a0:	08005c95 	.word	0x08005c95
 80055a4:	08005c95 	.word	0x08005c95
 80055a8:	08005c95 	.word	0x08005c95
 80055ac:	080058b7 	.word	0x080058b7
 80055b0:	08005c95 	.word	0x08005c95
 80055b4:	08005c95 	.word	0x08005c95
 80055b8:	08005c95 	.word	0x08005c95
 80055bc:	08005c95 	.word	0x08005c95
 80055c0:	08005c95 	.word	0x08005c95
 80055c4:	08005c95 	.word	0x08005c95
 80055c8:	08005c95 	.word	0x08005c95
 80055cc:	08005971 	.word	0x08005971
 80055d0:	08005c95 	.word	0x08005c95
 80055d4:	08005c95 	.word	0x08005c95
 80055d8:	08005c95 	.word	0x08005c95
 80055dc:	08005c95 	.word	0x08005c95
 80055e0:	08005c95 	.word	0x08005c95
 80055e4:	08005c95 	.word	0x08005c95
 80055e8:	08005c95 	.word	0x08005c95
 80055ec:	08005c95 	.word	0x08005c95
 80055f0:	08005c95 	.word	0x08005c95
 80055f4:	08005c95 	.word	0x08005c95
 80055f8:	08005c95 	.word	0x08005c95
 80055fc:	08005c95 	.word	0x08005c95
 8005600:	08005c95 	.word	0x08005c95
 8005604:	08005c95 	.word	0x08005c95
 8005608:	08005c95 	.word	0x08005c95
 800560c:	08005ae1 	.word	0x08005ae1
 8005610:	08005c95 	.word	0x08005c95
 8005614:	08005c95 	.word	0x08005c95
 8005618:	08005c95 	.word	0x08005c95
 800561c:	08005c95 	.word	0x08005c95
 8005620:	08005c95 	.word	0x08005c95
 8005624:	08005c95 	.word	0x08005c95
 8005628:	08005c95 	.word	0x08005c95
 800562c:	08005c95 	.word	0x08005c95
 8005630:	08005c95 	.word	0x08005c95
 8005634:	08005c95 	.word	0x08005c95
 8005638:	08005c95 	.word	0x08005c95
 800563c:	08005c95 	.word	0x08005c95
 8005640:	08005c95 	.word	0x08005c95
 8005644:	08005c95 	.word	0x08005c95
 8005648:	08005c95 	.word	0x08005c95
 800564c:	08005c95 	.word	0x08005c95
 8005650:	08005c95 	.word	0x08005c95
 8005654:	08005c95 	.word	0x08005c95
 8005658:	08005c95 	.word	0x08005c95
 800565c:	08005c95 	.word	0x08005c95
 8005660:	08005c95 	.word	0x08005c95
 8005664:	08005c95 	.word	0x08005c95
 8005668:	08005c95 	.word	0x08005c95
 800566c:	08005c95 	.word	0x08005c95
 8005670:	08005c95 	.word	0x08005c95
 8005674:	08005c95 	.word	0x08005c95
 8005678:	08005c95 	.word	0x08005c95
 800567c:	08005c95 	.word	0x08005c95
 8005680:	08005c95 	.word	0x08005c95
 8005684:	08005c95 	.word	0x08005c95
 8005688:	08005c95 	.word	0x08005c95
 800568c:	08005bd5 	.word	0x08005bd5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005690:	f7fc fe12 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 8005694:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d044      	beq.n	8005728 <UART_SetConfig+0x1d40>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d03e      	beq.n	8005724 <UART_SetConfig+0x1d3c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d038      	beq.n	8005720 <UART_SetConfig+0x1d38>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d032      	beq.n	800571c <UART_SetConfig+0x1d34>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d02c      	beq.n	8005718 <UART_SetConfig+0x1d30>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d026      	beq.n	8005714 <UART_SetConfig+0x1d2c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b06      	cmp	r3, #6
 80056cc:	d020      	beq.n	8005710 <UART_SetConfig+0x1d28>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b07      	cmp	r3, #7
 80056d4:	d01a      	beq.n	800570c <UART_SetConfig+0x1d24>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d014      	beq.n	8005708 <UART_SetConfig+0x1d20>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d00e      	beq.n	8005704 <UART_SetConfig+0x1d1c>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b0a      	cmp	r3, #10
 80056ec:	d008      	beq.n	8005700 <UART_SetConfig+0x1d18>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b0b      	cmp	r3, #11
 80056f4:	d102      	bne.n	80056fc <UART_SetConfig+0x1d14>
 80056f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056fa:	e016      	b.n	800572a <UART_SetConfig+0x1d42>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e014      	b.n	800572a <UART_SetConfig+0x1d42>
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	e012      	b.n	800572a <UART_SetConfig+0x1d42>
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	e010      	b.n	800572a <UART_SetConfig+0x1d42>
 8005708:	2320      	movs	r3, #32
 800570a:	e00e      	b.n	800572a <UART_SetConfig+0x1d42>
 800570c:	2310      	movs	r3, #16
 800570e:	e00c      	b.n	800572a <UART_SetConfig+0x1d42>
 8005710:	230c      	movs	r3, #12
 8005712:	e00a      	b.n	800572a <UART_SetConfig+0x1d42>
 8005714:	230a      	movs	r3, #10
 8005716:	e008      	b.n	800572a <UART_SetConfig+0x1d42>
 8005718:	2308      	movs	r3, #8
 800571a:	e006      	b.n	800572a <UART_SetConfig+0x1d42>
 800571c:	2306      	movs	r3, #6
 800571e:	e004      	b.n	800572a <UART_SetConfig+0x1d42>
 8005720:	2304      	movs	r3, #4
 8005722:	e002      	b.n	800572a <UART_SetConfig+0x1d42>
 8005724:	2302      	movs	r3, #2
 8005726:	e000      	b.n	800572a <UART_SetConfig+0x1d42>
 8005728:	2301      	movs	r3, #1
 800572a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	441a      	add	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	b29b      	uxth	r3, r3
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005744:	e2aa      	b.n	8005c9c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005746:	f7fc fdcd 	bl	80022e4 <HAL_RCC_GetPCLK2Freq>
 800574a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d044      	beq.n	80057de <UART_SetConfig+0x1df6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b01      	cmp	r3, #1
 800575a:	d03e      	beq.n	80057da <UART_SetConfig+0x1df2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	2b02      	cmp	r3, #2
 8005762:	d038      	beq.n	80057d6 <UART_SetConfig+0x1dee>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2b03      	cmp	r3, #3
 800576a:	d032      	beq.n	80057d2 <UART_SetConfig+0x1dea>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b04      	cmp	r3, #4
 8005772:	d02c      	beq.n	80057ce <UART_SetConfig+0x1de6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b05      	cmp	r3, #5
 800577a:	d026      	beq.n	80057ca <UART_SetConfig+0x1de2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b06      	cmp	r3, #6
 8005782:	d020      	beq.n	80057c6 <UART_SetConfig+0x1dde>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b07      	cmp	r3, #7
 800578a:	d01a      	beq.n	80057c2 <UART_SetConfig+0x1dda>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2b08      	cmp	r3, #8
 8005792:	d014      	beq.n	80057be <UART_SetConfig+0x1dd6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b09      	cmp	r3, #9
 800579a:	d00e      	beq.n	80057ba <UART_SetConfig+0x1dd2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b0a      	cmp	r3, #10
 80057a2:	d008      	beq.n	80057b6 <UART_SetConfig+0x1dce>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b0b      	cmp	r3, #11
 80057aa:	d102      	bne.n	80057b2 <UART_SetConfig+0x1dca>
 80057ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057b0:	e016      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e014      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	e012      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	e010      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057be:	2320      	movs	r3, #32
 80057c0:	e00e      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057c2:	2310      	movs	r3, #16
 80057c4:	e00c      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057c6:	230c      	movs	r3, #12
 80057c8:	e00a      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057ca:	230a      	movs	r3, #10
 80057cc:	e008      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057ce:	2308      	movs	r3, #8
 80057d0:	e006      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057d2:	2306      	movs	r3, #6
 80057d4:	e004      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057d6:	2304      	movs	r3, #4
 80057d8:	e002      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057da:	2302      	movs	r3, #2
 80057dc:	e000      	b.n	80057e0 <UART_SetConfig+0x1df8>
 80057de:	2301      	movs	r3, #1
 80057e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	441a      	add	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057fa:	e24f      	b.n	8005c9c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057fc:	f107 0318 	add.w	r3, r7, #24
 8005800:	4618      	mov	r0, r3
 8005802:	f7fd fca5 	bl	8003150 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d044      	beq.n	800589a <UART_SetConfig+0x1eb2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b01      	cmp	r3, #1
 8005816:	d03e      	beq.n	8005896 <UART_SetConfig+0x1eae>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b02      	cmp	r3, #2
 800581e:	d038      	beq.n	8005892 <UART_SetConfig+0x1eaa>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b03      	cmp	r3, #3
 8005826:	d032      	beq.n	800588e <UART_SetConfig+0x1ea6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b04      	cmp	r3, #4
 800582e:	d02c      	beq.n	800588a <UART_SetConfig+0x1ea2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b05      	cmp	r3, #5
 8005836:	d026      	beq.n	8005886 <UART_SetConfig+0x1e9e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b06      	cmp	r3, #6
 800583e:	d020      	beq.n	8005882 <UART_SetConfig+0x1e9a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	2b07      	cmp	r3, #7
 8005846:	d01a      	beq.n	800587e <UART_SetConfig+0x1e96>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2b08      	cmp	r3, #8
 800584e:	d014      	beq.n	800587a <UART_SetConfig+0x1e92>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b09      	cmp	r3, #9
 8005856:	d00e      	beq.n	8005876 <UART_SetConfig+0x1e8e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b0a      	cmp	r3, #10
 800585e:	d008      	beq.n	8005872 <UART_SetConfig+0x1e8a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b0b      	cmp	r3, #11
 8005866:	d102      	bne.n	800586e <UART_SetConfig+0x1e86>
 8005868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586c:	e016      	b.n	800589c <UART_SetConfig+0x1eb4>
 800586e:	2301      	movs	r3, #1
 8005870:	e014      	b.n	800589c <UART_SetConfig+0x1eb4>
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	e012      	b.n	800589c <UART_SetConfig+0x1eb4>
 8005876:	2340      	movs	r3, #64	; 0x40
 8005878:	e010      	b.n	800589c <UART_SetConfig+0x1eb4>
 800587a:	2320      	movs	r3, #32
 800587c:	e00e      	b.n	800589c <UART_SetConfig+0x1eb4>
 800587e:	2310      	movs	r3, #16
 8005880:	e00c      	b.n	800589c <UART_SetConfig+0x1eb4>
 8005882:	230c      	movs	r3, #12
 8005884:	e00a      	b.n	800589c <UART_SetConfig+0x1eb4>
 8005886:	230a      	movs	r3, #10
 8005888:	e008      	b.n	800589c <UART_SetConfig+0x1eb4>
 800588a:	2308      	movs	r3, #8
 800588c:	e006      	b.n	800589c <UART_SetConfig+0x1eb4>
 800588e:	2306      	movs	r3, #6
 8005890:	e004      	b.n	800589c <UART_SetConfig+0x1eb4>
 8005892:	2304      	movs	r3, #4
 8005894:	e002      	b.n	800589c <UART_SetConfig+0x1eb4>
 8005896:	2302      	movs	r3, #2
 8005898:	e000      	b.n	800589c <UART_SetConfig+0x1eb4>
 800589a:	2301      	movs	r3, #1
 800589c:	fbb2 f2f3 	udiv	r2, r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	441a      	add	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058b4:	e1f2      	b.n	8005c9c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058b6:	f107 030c 	add.w	r3, r7, #12
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fd fd94 	bl	80033e8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d044      	beq.n	8005954 <UART_SetConfig+0x1f6c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d03e      	beq.n	8005950 <UART_SetConfig+0x1f68>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d038      	beq.n	800594c <UART_SetConfig+0x1f64>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d032      	beq.n	8005948 <UART_SetConfig+0x1f60>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d02c      	beq.n	8005944 <UART_SetConfig+0x1f5c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d026      	beq.n	8005940 <UART_SetConfig+0x1f58>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d020      	beq.n	800593c <UART_SetConfig+0x1f54>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b07      	cmp	r3, #7
 8005900:	d01a      	beq.n	8005938 <UART_SetConfig+0x1f50>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b08      	cmp	r3, #8
 8005908:	d014      	beq.n	8005934 <UART_SetConfig+0x1f4c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b09      	cmp	r3, #9
 8005910:	d00e      	beq.n	8005930 <UART_SetConfig+0x1f48>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b0a      	cmp	r3, #10
 8005918:	d008      	beq.n	800592c <UART_SetConfig+0x1f44>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b0b      	cmp	r3, #11
 8005920:	d102      	bne.n	8005928 <UART_SetConfig+0x1f40>
 8005922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005926:	e016      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005928:	2301      	movs	r3, #1
 800592a:	e014      	b.n	8005956 <UART_SetConfig+0x1f6e>
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	e012      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005930:	2340      	movs	r3, #64	; 0x40
 8005932:	e010      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005934:	2320      	movs	r3, #32
 8005936:	e00e      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005938:	2310      	movs	r3, #16
 800593a:	e00c      	b.n	8005956 <UART_SetConfig+0x1f6e>
 800593c:	230c      	movs	r3, #12
 800593e:	e00a      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005940:	230a      	movs	r3, #10
 8005942:	e008      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005944:	2308      	movs	r3, #8
 8005946:	e006      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005948:	2306      	movs	r3, #6
 800594a:	e004      	b.n	8005956 <UART_SetConfig+0x1f6e>
 800594c:	2304      	movs	r3, #4
 800594e:	e002      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005950:	2302      	movs	r3, #2
 8005952:	e000      	b.n	8005956 <UART_SetConfig+0x1f6e>
 8005954:	2301      	movs	r3, #1
 8005956:	fbb2 f2f3 	udiv	r2, r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800596e:	e195      	b.n	8005c9c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005970:	4b87      	ldr	r3, [pc, #540]	; (8005b90 <UART_SetConfig+0x21a8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05d      	beq.n	8005a38 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800597c:	4b84      	ldr	r3, [pc, #528]	; (8005b90 <UART_SetConfig+0x21a8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	08db      	lsrs	r3, r3, #3
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	4a83      	ldr	r2, [pc, #524]	; (8005b94 <UART_SetConfig+0x21ac>)
 8005988:	40da      	lsrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d044      	beq.n	8005a1c <UART_SetConfig+0x2034>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b01      	cmp	r3, #1
 8005998:	d03e      	beq.n	8005a18 <UART_SetConfig+0x2030>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d038      	beq.n	8005a14 <UART_SetConfig+0x202c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d032      	beq.n	8005a10 <UART_SetConfig+0x2028>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d02c      	beq.n	8005a0c <UART_SetConfig+0x2024>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d026      	beq.n	8005a08 <UART_SetConfig+0x2020>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2b06      	cmp	r3, #6
 80059c0:	d020      	beq.n	8005a04 <UART_SetConfig+0x201c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b07      	cmp	r3, #7
 80059c8:	d01a      	beq.n	8005a00 <UART_SetConfig+0x2018>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d014      	beq.n	80059fc <UART_SetConfig+0x2014>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b09      	cmp	r3, #9
 80059d8:	d00e      	beq.n	80059f8 <UART_SetConfig+0x2010>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b0a      	cmp	r3, #10
 80059e0:	d008      	beq.n	80059f4 <UART_SetConfig+0x200c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b0b      	cmp	r3, #11
 80059e8:	d102      	bne.n	80059f0 <UART_SetConfig+0x2008>
 80059ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ee:	e016      	b.n	8005a1e <UART_SetConfig+0x2036>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e014      	b.n	8005a1e <UART_SetConfig+0x2036>
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	e012      	b.n	8005a1e <UART_SetConfig+0x2036>
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	e010      	b.n	8005a1e <UART_SetConfig+0x2036>
 80059fc:	2320      	movs	r3, #32
 80059fe:	e00e      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a00:	2310      	movs	r3, #16
 8005a02:	e00c      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a04:	230c      	movs	r3, #12
 8005a06:	e00a      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a08:	230a      	movs	r3, #10
 8005a0a:	e008      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	e006      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a10:	2306      	movs	r3, #6
 8005a12:	e004      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a14:	2304      	movs	r3, #4
 8005a16:	e002      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e000      	b.n	8005a1e <UART_SetConfig+0x2036>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005a36:	e131      	b.n	8005c9c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d043      	beq.n	8005ac8 <UART_SetConfig+0x20e0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d03d      	beq.n	8005ac4 <UART_SetConfig+0x20dc>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d037      	beq.n	8005ac0 <UART_SetConfig+0x20d8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d031      	beq.n	8005abc <UART_SetConfig+0x20d4>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d02b      	beq.n	8005ab8 <UART_SetConfig+0x20d0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d025      	beq.n	8005ab4 <UART_SetConfig+0x20cc>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b06      	cmp	r3, #6
 8005a6e:	d01f      	beq.n	8005ab0 <UART_SetConfig+0x20c8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b07      	cmp	r3, #7
 8005a76:	d019      	beq.n	8005aac <UART_SetConfig+0x20c4>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d013      	beq.n	8005aa8 <UART_SetConfig+0x20c0>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b09      	cmp	r3, #9
 8005a86:	d00d      	beq.n	8005aa4 <UART_SetConfig+0x20bc>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b0a      	cmp	r3, #10
 8005a8e:	d007      	beq.n	8005aa0 <UART_SetConfig+0x20b8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b0b      	cmp	r3, #11
 8005a96:	d101      	bne.n	8005a9c <UART_SetConfig+0x20b4>
 8005a98:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <UART_SetConfig+0x21b0>)
 8005a9a:	e016      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005a9c:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <UART_SetConfig+0x21ac>)
 8005a9e:	e014      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005aa0:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <UART_SetConfig+0x21b4>)
 8005aa2:	e012      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005aa4:	4b3e      	ldr	r3, [pc, #248]	; (8005ba0 <UART_SetConfig+0x21b8>)
 8005aa6:	e010      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005aa8:	4b3e      	ldr	r3, [pc, #248]	; (8005ba4 <UART_SetConfig+0x21bc>)
 8005aaa:	e00e      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005aac:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <UART_SetConfig+0x21c0>)
 8005aae:	e00c      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <UART_SetConfig+0x21c4>)
 8005ab2:	e00a      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005ab4:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <UART_SetConfig+0x21c8>)
 8005ab6:	e008      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005ab8:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <UART_SetConfig+0x21cc>)
 8005aba:	e006      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005abc:	4b3e      	ldr	r3, [pc, #248]	; (8005bb8 <UART_SetConfig+0x21d0>)
 8005abe:	e004      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005ac0:	4b3e      	ldr	r3, [pc, #248]	; (8005bbc <UART_SetConfig+0x21d4>)
 8005ac2:	e002      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005ac4:	4b3e      	ldr	r3, [pc, #248]	; (8005bc0 <UART_SetConfig+0x21d8>)
 8005ac6:	e000      	b.n	8005aca <UART_SetConfig+0x20e2>
 8005ac8:	4b32      	ldr	r3, [pc, #200]	; (8005b94 <UART_SetConfig+0x21ac>)
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6852      	ldr	r2, [r2, #4]
 8005ace:	0852      	lsrs	r2, r2, #1
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ade:	e0dd      	b.n	8005c9c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d046      	beq.n	8005b76 <UART_SetConfig+0x218e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d040      	beq.n	8005b72 <UART_SetConfig+0x218a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d03a      	beq.n	8005b6e <UART_SetConfig+0x2186>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d034      	beq.n	8005b6a <UART_SetConfig+0x2182>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d02e      	beq.n	8005b66 <UART_SetConfig+0x217e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d028      	beq.n	8005b62 <UART_SetConfig+0x217a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d022      	beq.n	8005b5e <UART_SetConfig+0x2176>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b07      	cmp	r3, #7
 8005b1e:	d01c      	beq.n	8005b5a <UART_SetConfig+0x2172>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d016      	beq.n	8005b56 <UART_SetConfig+0x216e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b09      	cmp	r3, #9
 8005b2e:	d00f      	beq.n	8005b50 <UART_SetConfig+0x2168>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b0a      	cmp	r3, #10
 8005b36:	d008      	beq.n	8005b4a <UART_SetConfig+0x2162>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2b0b      	cmp	r3, #11
 8005b3e:	d102      	bne.n	8005b46 <UART_SetConfig+0x215e>
 8005b40:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005b44:	e018      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <UART_SetConfig+0x21c0>)
 8005b48:	e016      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b4a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005b4e:	e013      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b50:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b54:	e010      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <UART_SetConfig+0x21dc>)
 8005b58:	e00e      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b5a:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <UART_SetConfig+0x21b0>)
 8005b5c:	e00c      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <UART_SetConfig+0x21e0>)
 8005b60:	e00a      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b62:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <UART_SetConfig+0x21e4>)
 8005b64:	e008      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b66:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <UART_SetConfig+0x21b4>)
 8005b68:	e006      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b6a:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <UART_SetConfig+0x21e8>)
 8005b6c:	e004      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <UART_SetConfig+0x21b8>)
 8005b70:	e002      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <UART_SetConfig+0x21bc>)
 8005b74:	e000      	b.n	8005b78 <UART_SetConfig+0x2190>
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <UART_SetConfig+0x21c0>)
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6852      	ldr	r2, [r2, #4]
 8005b7c:	0852      	lsrs	r2, r2, #1
 8005b7e:	441a      	add	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b8c:	e086      	b.n	8005c9c <UART_SetConfig+0x22b4>
 8005b8e:	bf00      	nop
 8005b90:	58024400 	.word	0x58024400
 8005b94:	03d09000 	.word	0x03d09000
 8005b98:	0003d090 	.word	0x0003d090
 8005b9c:	0007a120 	.word	0x0007a120
 8005ba0:	000f4240 	.word	0x000f4240
 8005ba4:	001e8480 	.word	0x001e8480
 8005ba8:	003d0900 	.word	0x003d0900
 8005bac:	00516155 	.word	0x00516155
 8005bb0:	0061a800 	.word	0x0061a800
 8005bb4:	007a1200 	.word	0x007a1200
 8005bb8:	00a2c2aa 	.word	0x00a2c2aa
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	01e84800 	.word	0x01e84800
 8005bc4:	0001e848 	.word	0x0001e848
 8005bc8:	00051615 	.word	0x00051615
 8005bcc:	00061a80 	.word	0x00061a80
 8005bd0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d04e      	beq.n	8005c7a <UART_SetConfig+0x2292>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d047      	beq.n	8005c74 <UART_SetConfig+0x228c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d040      	beq.n	8005c6e <UART_SetConfig+0x2286>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d039      	beq.n	8005c68 <UART_SetConfig+0x2280>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d032      	beq.n	8005c62 <UART_SetConfig+0x227a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b05      	cmp	r3, #5
 8005c02:	d02b      	beq.n	8005c5c <UART_SetConfig+0x2274>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b06      	cmp	r3, #6
 8005c0a:	d024      	beq.n	8005c56 <UART_SetConfig+0x226e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b07      	cmp	r3, #7
 8005c12:	d01d      	beq.n	8005c50 <UART_SetConfig+0x2268>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d016      	beq.n	8005c4a <UART_SetConfig+0x2262>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d00f      	beq.n	8005c44 <UART_SetConfig+0x225c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b0a      	cmp	r3, #10
 8005c2a:	d008      	beq.n	8005c3e <UART_SetConfig+0x2256>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b0b      	cmp	r3, #11
 8005c32:	d101      	bne.n	8005c38 <UART_SetConfig+0x2250>
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	e022      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3c:	e01f      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c42:	e01c      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c48:	e019      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4e:	e016      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c54:	e013      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c56:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005c5a:	e010      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c5c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005c60:	e00d      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c66:	e00a      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c68:	f241 5355 	movw	r3, #5461	; 0x1555
 8005c6c:	e007      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c72:	e004      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c78:	e001      	b.n	8005c7e <UART_SetConfig+0x2296>
 8005c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6852      	ldr	r2, [r2, #4]
 8005c82:	0852      	lsrs	r2, r2, #1
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c92:	e003      	b.n	8005c9c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005c9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d908      	bls.n	8005cb4 <UART_SetConfig+0x22cc>
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d204      	bcs.n	8005cb4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb0:	60da      	str	r2, [r3, #12]
 8005cb2:	e002      	b.n	8005cba <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3740      	adds	r7, #64	; 0x40
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de2:	d10a      	bne.n	8005dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e38:	f7fa ff70 	bl	8000d1c <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d10e      	bne.n	8005e6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f82c 	bl	8005eb8 <UART_WaitOnFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e022      	b.n	8005eb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d10e      	bne.n	8005e96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f816 	bl	8005eb8 <UART_WaitOnFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00c      	b.n	8005eb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec8:	e062      	b.n	8005f90 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d05e      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed2:	f7fa ff23 	bl	8000d1c <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d11d      	bne.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ef6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e045      	b.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02e      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f40:	d126      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f4a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0201 	bic.w	r2, r2, #1
 8005f6a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e00f      	b.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d08d      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_UARTEx_DisableFifoMode+0x16>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e027      	b.n	800601e <HAL_UARTEx_DisableFifoMode+0x66>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2224      	movs	r2, #36	; 0x24
 8005fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ffc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800603e:	2302      	movs	r3, #2
 8006040:	e02d      	b.n	800609e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2224      	movs	r2, #36	; 0x24
 800604e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f850 	bl	8006124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e02d      	b.n	800611a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2224      	movs	r2, #36	; 0x24
 80060ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f812 	bl	8006124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800612c:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <UARTEx_SetNbDataToProcess+0xc8>)
 800612e:	f107 0314 	add.w	r3, r7, #20
 8006132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006136:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800613a:	4a2d      	ldr	r2, [pc, #180]	; (80061f0 <UARTEx_SetNbDataToProcess+0xcc>)
 800613c:	f107 030c 	add.w	r3, r7, #12
 8006140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006144:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006160:	e03d      	b.n	80061de <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006162:	2308      	movs	r3, #8
 8006164:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006166:	2308      	movs	r3, #8
 8006168:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	0e5b      	lsrs	r3, r3, #25
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	0f5b      	lsrs	r3, r3, #29
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800618a:	7fbb      	ldrb	r3, [r7, #30]
 800618c:	7f3a      	ldrb	r2, [r7, #28]
 800618e:	f107 0120 	add.w	r1, r7, #32
 8006192:	440a      	add	r2, r1
 8006194:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006198:	fb02 f303 	mul.w	r3, r2, r3
 800619c:	7f3a      	ldrb	r2, [r7, #28]
 800619e:	f107 0120 	add.w	r1, r7, #32
 80061a2:	440a      	add	r2, r1
 80061a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80061a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80061b4:	7ffb      	ldrb	r3, [r7, #31]
 80061b6:	7f7a      	ldrb	r2, [r7, #29]
 80061b8:	f107 0120 	add.w	r1, r7, #32
 80061bc:	440a      	add	r2, r1
 80061be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	7f7a      	ldrb	r2, [r7, #29]
 80061c8:	f107 0120 	add.w	r1, r7, #32
 80061cc:	440a      	add	r2, r1
 80061ce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80061d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061de:	bf00      	nop
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	08006264 	.word	0x08006264
 80061f0:	0800626c 	.word	0x0800626c

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4e0d      	ldr	r6, [pc, #52]	; (800622c <__libc_init_array+0x38>)
 80061f8:	4c0d      	ldr	r4, [pc, #52]	; (8006230 <__libc_init_array+0x3c>)
 80061fa:	1ba4      	subs	r4, r4, r6
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	2500      	movs	r5, #0
 8006200:	42a5      	cmp	r5, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	4e0b      	ldr	r6, [pc, #44]	; (8006234 <__libc_init_array+0x40>)
 8006206:	4c0c      	ldr	r4, [pc, #48]	; (8006238 <__libc_init_array+0x44>)
 8006208:	f000 f820 	bl	800624c <_init>
 800620c:	1ba4      	subs	r4, r4, r6
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	2500      	movs	r5, #0
 8006212:	42a5      	cmp	r5, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800621c:	4798      	blx	r3
 800621e:	3501      	adds	r5, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006226:	4798      	blx	r3
 8006228:	3501      	adds	r5, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	0800628c 	.word	0x0800628c
 8006230:	0800628c 	.word	0x0800628c
 8006234:	0800628c 	.word	0x0800628c
 8006238:	08006290 	.word	0x08006290

0800623c <memset>:
 800623c:	4402      	add	r2, r0
 800623e:	4603      	mov	r3, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <_init>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr

08006258 <_fini>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr
