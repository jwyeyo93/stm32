
CLCD_32F103VE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002028  08002028  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002028  08002028  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002028  08002028  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002028  08002028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800202c  0800202c  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  080020a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080020a0  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005413  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001307  00000000  00000000  000254ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000460  00000000  00000000  000267b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003a8  00000000  00000000  00026c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151f8  00000000  00000000  00026fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e2b  00000000  00000000  0003c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075c8a  00000000  00000000  00040fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6c6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001208  00000000  00000000  000b6ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08001f7c 	.word	0x08001f7c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08001f7c 	.word	0x08001f7c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <MX_GPIO_Init+0xc4>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a2e      	ldr	r2, [pc, #184]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6193      	str	r3, [r2, #24]
 8000246:	4b2c      	ldr	r3, [pc, #176]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f003 0310 	and.w	r3, r3, #16
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000252:	4b29      	ldr	r3, [pc, #164]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	4a28      	ldr	r2, [pc, #160]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6193      	str	r3, [r2, #24]
 800025e:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	f003 0320 	and.w	r3, r3, #32
 8000266:	60bb      	str	r3, [r7, #8]
 8000268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <MX_GPIO_Init+0xc4>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	4a22      	ldr	r2, [pc, #136]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000270:	f043 0304 	orr.w	r3, r3, #4
 8000274:	6193      	str	r3, [r2, #24]
 8000276:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	f003 0304 	and.w	r3, r3, #4
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000288:	f043 0308 	orr.w	r3, r3, #8
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <MX_GPIO_Init+0xc4>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f003 0308 	and.w	r3, r3, #8
 8000296:	603b      	str	r3, [r7, #0]
 8000298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800029a:	2200      	movs	r2, #0
 800029c:	f640 710f 	movw	r1, #3855	; 0xf0f
 80002a0:	4816      	ldr	r0, [pc, #88]	; (80002fc <MX_GPIO_Init+0xc8>)
 80002a2:	f000 fe23 	bl	8000eec <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|E_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80002ac:	4814      	ldr	r0, [pc, #80]	; (8000300 <MX_GPIO_Init+0xcc>)
 80002ae:	f000 fe1d 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80002b2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80002b6:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2302      	movs	r3, #2
 80002c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <MX_GPIO_Init+0xc8>)
 80002cc:	f000 fca4 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin;
 80002d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	2302      	movs	r3, #2
 80002e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	4619      	mov	r1, r3
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_GPIO_Init+0xcc>)
 80002ea:	f000 fc95 	bl	8000c18 <HAL_GPIO_Init>

}
 80002ee:	bf00      	nop
 80002f0:	3720      	adds	r7, #32
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010800 	.word	0x40010800
 8000300:	40010c00 	.word	0x40010c00

08000304 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b08a      	sub	sp, #40	; 0x28
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
 8000310:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000312:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800031a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800031e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000322:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000326:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f80e 	bl	800035a <Lcd_init>

	return lcd;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	461d      	mov	r5, r3
 8000342:	f107 0410 	add.w	r4, r7, #16
 8000346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800034a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800034e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000352:	68f8      	ldr	r0, [r7, #12]
 8000354:	3728      	adds	r7, #40	; 0x28
 8000356:	46bd      	mov	sp, r7
 8000358:	bdb0      	pop	{r4, r5, r7, pc}

0800035a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	7d9b      	ldrb	r3, [r3, #22]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10c      	bne.n	8000384 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800036a:	2133      	movs	r1, #51	; 0x33
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f000 f86e 	bl	800044e <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000372:	2132      	movs	r1, #50	; 0x32
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f86a 	bl	800044e <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800037a:	2128      	movs	r1, #40	; 0x28
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f000 f866 	bl	800044e <lcd_write_command>
 8000382:	e003      	b.n	800038c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000384:	2138      	movs	r1, #56	; 0x38
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 f861 	bl	800044e <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800038c:	2101      	movs	r1, #1
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f000 f85d 	bl	800044e <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000394:	210c      	movs	r1, #12
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f859 	bl	800044e <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800039c:	2106      	movs	r1, #6
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 f855 	bl	800044e <lcd_write_command>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	4906      	ldr	r1, [pc, #24]	; (80003d8 <Lcd_int+0x2c>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 f9ca 	bl	8001758 <siprintf>

	Lcd_string(lcd, buffer);
 80003c4:	f107 030c 	add.w	r3, r7, #12
 80003c8:	4619      	mov	r1, r3
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f000 f806 	bl	80003dc <Lcd_string>
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	08001f94 	.word	0x08001f94

080003dc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	e00a      	b.n	8000402 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	683a      	ldr	r2, [r7, #0]
 80003f0:	4413      	add	r3, r2
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f857 	bl	80004aa <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	3301      	adds	r3, #1
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	7bfc      	ldrb	r4, [r7, #15]
 8000404:	6838      	ldr	r0, [r7, #0]
 8000406:	f7ff ff0d 	bl	8000224 <strlen>
 800040a:	4603      	mov	r3, r0
 800040c:	429c      	cmp	r4, r3
 800040e:	d3ed      	bcc.n	80003ec <Lcd_string+0x10>
	}
}
 8000410:	bf00      	nop
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}

08000418 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]
 8000424:	4613      	mov	r3, r2
 8000426:	70bb      	strb	r3, [r7, #2]
	lcd_write_command(lcd, SET_DDRAM_ADDR | ((row * 0x40) + col));
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	019b      	lsls	r3, r3, #6
 800042c:	b2da      	uxtb	r2, r3
 800042e:	78bb      	ldrb	r3, [r7, #2]
 8000430:	4413      	add	r3, r2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	b25b      	sxtb	r3, r3
 8000436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800043a:	b25b      	sxtb	r3, r3
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4619      	mov	r1, r3
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f804 	bl	800044e <lcd_write_command>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	460b      	mov	r3, r1
 8000458:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6898      	ldr	r0, [r3, #8]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	899b      	ldrh	r3, [r3, #12]
 8000462:	2200      	movs	r2, #0
 8000464:	4619      	mov	r1, r3
 8000466:	f000 fd41 	bl	8000eec <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7d9b      	ldrb	r3, [r3, #22]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d111      	bne.n	8000496 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000472:	78fb      	ldrb	r3, [r7, #3]
 8000474:	091b      	lsrs	r3, r3, #4
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2204      	movs	r2, #4
 800047a:	4619      	mov	r1, r3
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f000 f842 	bl	8000506 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000482:	78fb      	ldrb	r3, [r7, #3]
 8000484:	f003 030f 	and.w	r3, r3, #15
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2204      	movs	r2, #4
 800048c:	4619      	mov	r1, r3
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f000 f839 	bl	8000506 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000494:	e005      	b.n	80004a2 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000496:	78fb      	ldrb	r3, [r7, #3]
 8000498:	2208      	movs	r2, #8
 800049a:	4619      	mov	r1, r3
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 f832 	bl	8000506 <lcd_write>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	460b      	mov	r3, r1
 80004b4:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	6898      	ldr	r0, [r3, #8]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	899b      	ldrh	r3, [r3, #12]
 80004be:	2201      	movs	r2, #1
 80004c0:	4619      	mov	r1, r3
 80004c2:	f000 fd13 	bl	8000eec <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7d9b      	ldrb	r3, [r3, #22]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d111      	bne.n	80004f2 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	091b      	lsrs	r3, r3, #4
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2204      	movs	r2, #4
 80004d6:	4619      	mov	r1, r3
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f814 	bl	8000506 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80004de:	78fb      	ldrb	r3, [r7, #3]
 80004e0:	f003 030f 	and.w	r3, r3, #15
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2204      	movs	r2, #4
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f80b 	bl	8000506 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80004f0:	e005      	b.n	80004fe <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	2208      	movs	r2, #8
 80004f6:	4619      	mov	r1, r3
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f804 	bl	8000506 <lcd_write>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b084      	sub	sp, #16
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
 8000512:	4613      	mov	r3, r2
 8000514:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000516:	2300      	movs	r3, #0
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e019      	b.n	8000550 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	4413      	add	r3, r2
 8000532:	8819      	ldrh	r1, [r3, #0]
 8000534:	78fa      	ldrb	r2, [r7, #3]
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	fa42 f303 	asr.w	r3, r2, r3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	f000 fcd1 	bl	8000eec <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	3301      	adds	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	7bfa      	ldrb	r2, [r7, #15]
 8000552:	78bb      	ldrb	r3, [r7, #2]
 8000554:	429a      	cmp	r2, r3
 8000556:	d3e1      	bcc.n	800051c <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6918      	ldr	r0, [r3, #16]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	8a9b      	ldrh	r3, [r3, #20]
 8000560:	2201      	movs	r2, #1
 8000562:	4619      	mov	r1, r3
 8000564:	f000 fcc2 	bl	8000eec <HAL_GPIO_WritePin>
	DELAY(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fa27 	bl	80009bc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6918      	ldr	r0, [r3, #16]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	8a9b      	ldrh	r3, [r3, #20]
 8000576:	2200      	movs	r2, #0
 8000578:	4619      	mov	r1, r3
 800057a:	f000 fcb7 	bl	8000eec <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 f9b3 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f849 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff fe4d 	bl	8000234 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = {
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <main+0x8c>)
 800059c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };

  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <main+0x90>)
 80005a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b0:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd;

  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, E_GPIO_Port, E_Pin, LCD_4_BIT_MODE);
 80005b4:	4638      	mov	r0, r7
 80005b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80005ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80005be:	2300      	movs	r3, #0
 80005c0:	9303      	str	r3, [sp, #12]
 80005c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c6:	9302      	str	r3, [sp, #8]
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <main+0x94>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <main+0x94>)
 80005d4:	f7ff fe96 	bl	8000304 <Lcd_create>
 80005d8:	f107 0418 	add.w	r4, r7, #24
 80005dc:	463d      	mov	r5, r7
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e6:	e884 0003 	stmia.w	r4, {r0, r1}

  Lcd_string(&lcd, "4ilo - 4bit");
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	490c      	ldr	r1, [pc, #48]	; (8000620 <main+0x98>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fef3 	bl	80003dc <Lcd_string>

  Lcd_cursor(&lcd, 1,6);
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2206      	movs	r2, #6
 80005fc:	2101      	movs	r1, #1
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff0a 	bl	8000418 <Lcd_cursor>
  Lcd_int(&lcd, -500);
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	4906      	ldr	r1, [pc, #24]	; (8000624 <main+0x9c>)
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fece 	bl	80003ac <Lcd_int>
  /* USER CODE END 2 */
//
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x88>
 8000612:	bf00      	nop
 8000614:	08001fa4 	.word	0x08001fa4
 8000618:	08001fb4 	.word	0x08001fb4
 800061c:	40010c00 	.word	0x40010c00
 8000620:	08001f98 	.word	0x08001f98
 8000624:	fffffe0c 	.word	0xfffffe0c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b090      	sub	sp, #64	; 0x40
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800064a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0318 	add.w	r3, r7, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fc61 	bl	8000f1c <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000660:	2197      	movs	r1, #151	; 0x97
 8000662:	4818      	ldr	r0, [pc, #96]	; (80006c4 <SystemClock_Config+0x9c>)
 8000664:	f000 f832 	bl	80006cc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2102      	movs	r1, #2
 8000682:	4618      	mov	r0, r3
 8000684:	f000 feca 	bl	800141c <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <SystemClock_Config+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800068e:	21a5      	movs	r1, #165	; 0xa5
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <SystemClock_Config+0x9c>)
 8000692:	f000 f81b 	bl	80006cc <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000696:	f001 f80d 	bl	80016b4 <HAL_RCC_GetHCLKFreq>
 800069a:	4602      	mov	r2, r0
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <SystemClock_Config+0xa0>)
 800069e:	fba3 2302 	umull	r2, r3, r3, r2
 80006a2:	099b      	lsrs	r3, r3, #6
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fa82 	bl	8000bae <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006aa:	2004      	movs	r0, #4
 80006ac:	f000 fa8c 	bl	8000bc8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 fa5d 	bl	8000b76 <HAL_NVIC_SetPriority>
}
 80006bc:	bf00      	nop
 80006be:	3740      	adds	r7, #64	; 0x40
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	08001fbc 	.word	0x08001fbc
 80006c8:	10624dd3 	.word	0x10624dd3

080006cc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80006d6:	e7fe      	b.n	80006d6 <_Error_Handler+0xa>

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <HAL_MspInit+0xb4>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a2a      	ldr	r2, [pc, #168]	; (800078c <HAL_MspInit+0xb4>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <HAL_MspInit+0xb4>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <HAL_MspInit+0xb4>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <HAL_MspInit+0xb4>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <HAL_MspInit+0xb4>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070e:	2003      	movs	r0, #3
 8000710:	f000 fa26 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	f06f 000b 	mvn.w	r0, #11
 800071c:	f000 fa2b 	bl	8000b76 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	f06f 000a 	mvn.w	r0, #10
 8000728:	f000 fa25 	bl	8000b76 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	f06f 0009 	mvn.w	r0, #9
 8000734:	f000 fa1f 	bl	8000b76 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	f06f 0004 	mvn.w	r0, #4
 8000740:	f000 fa19 	bl	8000b76 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	f06f 0003 	mvn.w	r0, #3
 800074c:	f000 fa13 	bl	8000b76 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	f06f 0001 	mvn.w	r0, #1
 8000758:	f000 fa0d 	bl	8000b76 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f000 fa07 	bl	8000b76 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0xb8>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_MspInit+0xb8>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	40010000 	.word	0x40010000

08000794 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <HardFault_Handler+0x4>

080007a6 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <BusFault_Handler+0x4>

080007b2 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <UsageFault_Handler+0x4>

080007b8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f8d0 	bl	8000984 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80007e4:	f000 fa0c 	bl	8000c00 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <_sbrk+0x50>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <_sbrk+0x16>
		heap_end = &end;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <_sbrk+0x50>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <_sbrk+0x54>)
 8000800:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <_sbrk+0x50>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <_sbrk+0x50>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	466a      	mov	r2, sp
 8000812:	4293      	cmp	r3, r2
 8000814:	d907      	bls.n	8000826 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000816:	f000 ff75 	bl	8001704 <__errno>
 800081a:	4602      	mov	r2, r0
 800081c:	230c      	movs	r3, #12
 800081e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	e006      	b.n	8000834 <_sbrk+0x48>
	}

	heap_end += incr;
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <_sbrk+0x50>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	4a03      	ldr	r2, [pc, #12]	; (800083c <_sbrk+0x50>)
 8000830:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000008c 	.word	0x2000008c
 8000840:	200000a0 	.word	0x200000a0

08000844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <SystemInit+0x5c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <SystemInit+0x5c>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <SystemInit+0x5c>)
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	4911      	ldr	r1, [pc, #68]	; (80008a0 <SystemInit+0x5c>)
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <SystemInit+0x60>)
 800085c:	4013      	ands	r3, r2
 800085e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <SystemInit+0x5c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <SystemInit+0x5c>)
 8000866:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800086a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800086e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <SystemInit+0x5c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <SystemInit+0x5c>)
 8000876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800087a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <SystemInit+0x5c>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <SystemInit+0x5c>)
 8000882:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000886:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SystemInit+0x5c>)
 800088a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800088e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SystemInit+0x64>)
 8000892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000896:	609a      	str	r2, [r3, #8]
#endif 
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000
 80008a4:	f8ff0000 	.word	0xf8ff0000
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008ae:	e003      	b.n	80008b8 <LoopCopyDataInit>

080008b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008b6:	3104      	adds	r1, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008b8:	480a      	ldr	r0, [pc, #40]	; (80008e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008c0:	d3f6      	bcc.n	80008b0 <CopyDataInit>
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008c4:	e002      	b.n	80008cc <LoopFillZerobss>

080008c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008c8:	f842 3b04 	str.w	r3, [r2], #4

080008cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008d0:	d3f9      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d2:	f7ff ffb7 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d6:	f000 ff1b 	bl	8001710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008da:	f7ff fe55 	bl	8000588 <main>
  bx lr
 80008de:	4770      	bx	lr
  ldr r3, =_sidata
 80008e0:	08002030 	.word	0x08002030
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008e8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008ec:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008f0:	200000a0 	.word	0x200000a0

080008f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_2_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_Init+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_Init+0x28>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f929 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f808 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000914:	f7ff fee0 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x54>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x58>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f933 	bl	8000bae <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00e      	b.n	8000970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d80a      	bhi.n	800096e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 f909 	bl	8000b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_InitTick+0x5c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x1c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x20>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <HAL_IncTick+0x20>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000098 	.word	0x20000098

080009a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <HAL_GetTick+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000098 	.word	0x20000098

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff fff0 	bl	80009a8 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_Delay+0x40>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e2:	bf00      	nop
 80009e4:	f7ff ffe0 	bl	80009a8 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000008 	.word	0x20000008

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff90 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff49 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5e 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff90 	bl	8000ab8 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5f 	bl	8000a64 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb0 	bl	8000b1c <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d106      	bne.n	8000be4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000be2:	e005      	b.n	8000bf0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bea:	f023 0304 	bic.w	r3, r3, #4
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c04:	f000 f802 	bl	8000c0c <HAL_SYSTICK_Callback>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	e133      	b.n	8000e94 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f040 8122 	bne.w	8000e8e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d034      	beq.n	8000cbc <HAL_GPIO_Init+0xa4>
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d80d      	bhi.n	8000c72 <HAL_GPIO_Init+0x5a>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d02b      	beq.n	8000cb2 <HAL_GPIO_Init+0x9a>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d804      	bhi.n	8000c68 <HAL_GPIO_Init+0x50>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d031      	beq.n	8000cc6 <HAL_GPIO_Init+0xae>
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d01c      	beq.n	8000ca0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c66:	e048      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d043      	beq.n	8000cf4 <HAL_GPIO_Init+0xdc>
 8000c6c:	2b11      	cmp	r3, #17
 8000c6e:	d01b      	beq.n	8000ca8 <HAL_GPIO_Init+0x90>
          break;
 8000c70:	e043      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c72:	4a8f      	ldr	r2, [pc, #572]	; (8000eb0 <HAL_GPIO_Init+0x298>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d026      	beq.n	8000cc6 <HAL_GPIO_Init+0xae>
 8000c78:	4a8d      	ldr	r2, [pc, #564]	; (8000eb0 <HAL_GPIO_Init+0x298>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d806      	bhi.n	8000c8c <HAL_GPIO_Init+0x74>
 8000c7e:	4a8d      	ldr	r2, [pc, #564]	; (8000eb4 <HAL_GPIO_Init+0x29c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d020      	beq.n	8000cc6 <HAL_GPIO_Init+0xae>
 8000c84:	4a8c      	ldr	r2, [pc, #560]	; (8000eb8 <HAL_GPIO_Init+0x2a0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d01d      	beq.n	8000cc6 <HAL_GPIO_Init+0xae>
          break;
 8000c8a:	e036      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c8c:	4a8b      	ldr	r2, [pc, #556]	; (8000ebc <HAL_GPIO_Init+0x2a4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d019      	beq.n	8000cc6 <HAL_GPIO_Init+0xae>
 8000c92:	4a8b      	ldr	r2, [pc, #556]	; (8000ec0 <HAL_GPIO_Init+0x2a8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d016      	beq.n	8000cc6 <HAL_GPIO_Init+0xae>
 8000c98:	4a8a      	ldr	r2, [pc, #552]	; (8000ec4 <HAL_GPIO_Init+0x2ac>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d013      	beq.n	8000cc6 <HAL_GPIO_Init+0xae>
          break;
 8000c9e:	e02c      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	623b      	str	r3, [r7, #32]
          break;
 8000ca6:	e028      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	3304      	adds	r3, #4
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e023      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e01e      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	330c      	adds	r3, #12
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e019      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e012      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d105      	bne.n	8000ce8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	611a      	str	r2, [r3, #16]
          break;
 8000ce6:	e008      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	615a      	str	r2, [r3, #20]
          break;
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2bff      	cmp	r3, #255	; 0xff
 8000cfe:	d801      	bhi.n	8000d04 <HAL_GPIO_Init+0xec>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	e001      	b.n	8000d08 <HAL_GPIO_Init+0xf0>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3304      	adds	r3, #4
 8000d08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	2bff      	cmp	r3, #255	; 0xff
 8000d0e:	d802      	bhi.n	8000d16 <HAL_GPIO_Init+0xfe>
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x104>
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	210f      	movs	r1, #15
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	6a39      	ldr	r1, [r7, #32]
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	431a      	orrs	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80a2 	beq.w	8000e8e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4a:	4b5f      	ldr	r3, [pc, #380]	; (8000ec8 <HAL_GPIO_Init+0x2b0>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	4a5e      	ldr	r2, [pc, #376]	; (8000ec8 <HAL_GPIO_Init+0x2b0>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6193      	str	r3, [r2, #24]
 8000d56:	4b5c      	ldr	r3, [pc, #368]	; (8000ec8 <HAL_GPIO_Init+0x2b0>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d62:	4a5a      	ldr	r2, [pc, #360]	; (8000ecc <HAL_GPIO_Init+0x2b4>)
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <HAL_GPIO_Init+0x2b8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01f      	beq.n	8000dce <HAL_GPIO_Init+0x1b6>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_GPIO_Init+0x2bc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d019      	beq.n	8000dca <HAL_GPIO_Init+0x1b2>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <HAL_GPIO_Init+0x2c0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x1ae>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_GPIO_Init+0x2c4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x1aa>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <HAL_GPIO_Init+0x2c8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x1a6>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4c      	ldr	r2, [pc, #304]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x1a2>
 8000db6:	2305      	movs	r3, #5
 8000db8:	e00a      	b.n	8000dd0 <HAL_GPIO_Init+0x1b8>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e008      	b.n	8000dd0 <HAL_GPIO_Init+0x1b8>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x1b8>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x1b8>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x1b8>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x1b8>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd2:	f002 0203 	and.w	r2, r2, #3
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de0:	493a      	ldr	r1, [pc, #232]	; (8000ecc <HAL_GPIO_Init+0x2b4>)
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	493a      	ldr	r1, [pc, #232]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
 8000e06:	e006      	b.n	8000e16 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e08:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4935      	ldr	r1, [pc, #212]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4930      	ldr	r1, [pc, #192]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	604b      	str	r3, [r1, #4]
 8000e2e:	e006      	b.n	8000e3e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	492b      	ldr	r1, [pc, #172]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	4926      	ldr	r1, [pc, #152]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	608b      	str	r3, [r1, #8]
 8000e56:	e006      	b.n	8000e66 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4921      	ldr	r1, [pc, #132]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	491c      	ldr	r1, [pc, #112]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60cb      	str	r3, [r1, #12]
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4917      	ldr	r1, [pc, #92]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	3301      	adds	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f47f aec4 	bne.w	8000c2c <HAL_GPIO_Init+0x14>
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	372c      	adds	r7, #44	; 0x2c
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	10210000 	.word	0x10210000
 8000eb4:	10110000 	.word	0x10110000
 8000eb8:	10120000 	.word	0x10120000
 8000ebc:	10310000 	.word	0x10310000
 8000ec0:	10320000 	.word	0x10320000
 8000ec4:	10220000 	.word	0x10220000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	40011400 	.word	0x40011400
 8000ee0:	40011800 	.word	0x40011800
 8000ee4:	40011c00 	.word	0x40011c00
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000efc:	787b      	ldrb	r3, [r7, #1]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f08:	e003      	b.n	8000f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	041a      	lsls	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	611a      	str	r2, [r3, #16]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e26c      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8087 	beq.w	800104a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3c:	4b92      	ldr	r3, [pc, #584]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d00c      	beq.n	8000f62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f48:	4b8f      	ldr	r3, [pc, #572]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d112      	bne.n	8000f7a <HAL_RCC_OscConfig+0x5e>
 8000f54:	4b8c      	ldr	r3, [pc, #560]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d10b      	bne.n	8000f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f62:	4b89      	ldr	r3, [pc, #548]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d06c      	beq.n	8001048 <HAL_RCC_OscConfig+0x12c>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d168      	bne.n	8001048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e246      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x76>
 8000f84:	4b80      	ldr	r3, [pc, #512]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a7f      	ldr	r2, [pc, #508]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e02e      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x98>
 8000f9a:	4b7b      	ldr	r3, [pc, #492]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a7a      	ldr	r2, [pc, #488]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b78      	ldr	r3, [pc, #480]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a77      	ldr	r2, [pc, #476]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e01d      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xbc>
 8000fbe:	4b72      	ldr	r3, [pc, #456]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a71      	ldr	r2, [pc, #452]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b6f      	ldr	r3, [pc, #444]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000fd8:	4b6b      	ldr	r3, [pc, #428]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a6a      	ldr	r2, [pc, #424]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b68      	ldr	r3, [pc, #416]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a67      	ldr	r2, [pc, #412]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d013      	beq.n	8001020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcd6 	bl	80009a8 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fcd2 	bl	80009a8 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1fa      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0xe4>
 800101e:	e014      	b.n	800104a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fcc2 	bl	80009a8 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fcbe 	bl	80009a8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e1e6      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x10c>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d063      	beq.n	800111e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b08      	cmp	r3, #8
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x18c>
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b43      	ldr	r3, [pc, #268]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <HAL_RCC_OscConfig+0x176>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e1ba      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4939      	ldr	r1, [pc, #228]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e03a      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_RCC_OscConfig+0x270>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc77 	bl	80009a8 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fc73 	bl	80009a8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e19b      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4927      	ldr	r1, [pc, #156]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_RCC_OscConfig+0x270>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc56 	bl	80009a8 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fc52 	bl	80009a8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e17a      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d03a      	beq.n	80011a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d019      	beq.n	8001166 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_RCC_OscConfig+0x274>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001138:	f7ff fc36 	bl	80009a8 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fc32 	bl	80009a8 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e15a      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fab2 	bl	80016c8 <RCC_Delay>
 8001164:	e01c      	b.n	80011a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_RCC_OscConfig+0x274>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fc1c 	bl	80009a8 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001172:	e00f      	b.n	8001194 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fc18 	bl	80009a8 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d908      	bls.n	8001194 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e140      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	42420000 	.word	0x42420000
 8001190:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e9      	bne.n	8001174 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80a6 	beq.w	80012fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10d      	bne.n	80011da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b94      	ldr	r3, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a93      	ldr	r2, [pc, #588]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b91      	ldr	r3, [pc, #580]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4b8e      	ldr	r3, [pc, #568]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a8a      	ldr	r2, [pc, #552]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fbd9 	bl	80009a8 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fa:	f7ff fbd5 	bl	80009a8 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0fd      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d106      	bne.n	800122e <HAL_RCC_OscConfig+0x312>
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	e02d      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x334>
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	6213      	str	r3, [r2, #32]
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0304 	bic.w	r3, r3, #4
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	e01c      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b05      	cmp	r3, #5
 8001256:	d10c      	bne.n	8001272 <HAL_RCC_OscConfig+0x356>
 8001258:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a69      	ldr	r2, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	e00b      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a66      	ldr	r2, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a63      	ldr	r2, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d015      	beq.n	80012be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fb89 	bl	80009a8 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff fb85 	bl	80009a8 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0ab      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0ee      	beq.n	800129a <HAL_RCC_OscConfig+0x37e>
 80012bc:	e014      	b.n	80012e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fb73 	bl	80009a8 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff fb6f 	bl	80009a8 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e095      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ee      	bne.n	80012c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a47      	ldr	r2, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8081 	beq.w	8001406 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d061      	beq.n	80013d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d146      	bne.n	80013a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001318:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fb43 	bl	80009a8 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fb3f 	bl	80009a8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e067      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d108      	bne.n	8001360 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	492d      	ldr	r1, [pc, #180]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a19      	ldr	r1, [r3, #32]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	430b      	orrs	r3, r1
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fb13 	bl	80009a8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fb0f 	bl	80009a8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e037      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x46a>
 80013a4:	e02f      	b.n	8001406 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fafc 	bl	80009a8 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff faf8 	bl	80009a8 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e020      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x498>
 80013d2:	e018      	b.n	8001406 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e013      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	42420060 	.word	0x42420060

0800141c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0d0      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0207 	bic.w	r2, r3, #7
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800149a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e073      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06b      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4936      	ldr	r1, [pc, #216]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff fa4c 	bl	80009a8 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff fa48 	bl	80009a8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e053      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d210      	bcs.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 0207 	bic.w	r2, r3, #7
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f821 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015ae:	4601      	mov	r1, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	fa21 f303 	lsr.w	r3, r1, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1cc>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1d0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f9aa 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	08001fe4 	.word	0x08001fe4
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b490      	push	{r4, r7}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f8:	1d3c      	adds	r4, r7, #4
 80015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x40>
 800162a:	2b08      	cmp	r3, #8
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x46>
 800162e:	e02d      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001632:	623b      	str	r3, [r7, #32]
      break;
 8001634:	e02d      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	0c9b      	lsrs	r3, r3, #18
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001642:	4413      	add	r3, r2
 8001644:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001648:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	0c5b      	lsrs	r3, r3, #17
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001662:	4413      	add	r3, r2
 8001664:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001668:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800166e:	fb02 f203 	mul.w	r2, r2, r3
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	e004      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	623b      	str	r3, [r7, #32]
      break;
 800168a:	e002      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800168e:	623b      	str	r3, [r7, #32]
      break;
 8001690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001692:	6a3b      	ldr	r3, [r7, #32]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bc90      	pop	{r4, r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	08001fd0 	.word	0x08001fd0
 80016a4:	08001fe0 	.word	0x08001fe0
 80016a8:	40021000 	.word	0x40021000
 80016ac:	007a1200 	.word	0x007a1200
 80016b0:	003d0900 	.word	0x003d0900

080016b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000000 	.word	0x20000000

080016c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <RCC_Delay+0x34>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <RCC_Delay+0x38>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0a5b      	lsrs	r3, r3, #9
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e4:	bf00      	nop
  }
  while (Delay --);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	60fa      	str	r2, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <RCC_Delay+0x1c>
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000000 	.word	0x20000000
 8001700:	10624dd3 	.word	0x10624dd3

08001704 <__errno>:
 8001704:	4b01      	ldr	r3, [pc, #4]	; (800170c <__errno+0x8>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000000c 	.word	0x2000000c

08001710 <__libc_init_array>:
 8001710:	b570      	push	{r4, r5, r6, lr}
 8001712:	2500      	movs	r5, #0
 8001714:	4e0c      	ldr	r6, [pc, #48]	; (8001748 <__libc_init_array+0x38>)
 8001716:	4c0d      	ldr	r4, [pc, #52]	; (800174c <__libc_init_array+0x3c>)
 8001718:	1ba4      	subs	r4, r4, r6
 800171a:	10a4      	asrs	r4, r4, #2
 800171c:	42a5      	cmp	r5, r4
 800171e:	d109      	bne.n	8001734 <__libc_init_array+0x24>
 8001720:	f000 fc2c 	bl	8001f7c <_init>
 8001724:	2500      	movs	r5, #0
 8001726:	4e0a      	ldr	r6, [pc, #40]	; (8001750 <__libc_init_array+0x40>)
 8001728:	4c0a      	ldr	r4, [pc, #40]	; (8001754 <__libc_init_array+0x44>)
 800172a:	1ba4      	subs	r4, r4, r6
 800172c:	10a4      	asrs	r4, r4, #2
 800172e:	42a5      	cmp	r5, r4
 8001730:	d105      	bne.n	800173e <__libc_init_array+0x2e>
 8001732:	bd70      	pop	{r4, r5, r6, pc}
 8001734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001738:	4798      	blx	r3
 800173a:	3501      	adds	r5, #1
 800173c:	e7ee      	b.n	800171c <__libc_init_array+0xc>
 800173e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001742:	4798      	blx	r3
 8001744:	3501      	adds	r5, #1
 8001746:	e7f2      	b.n	800172e <__libc_init_array+0x1e>
 8001748:	08002028 	.word	0x08002028
 800174c:	08002028 	.word	0x08002028
 8001750:	08002028 	.word	0x08002028
 8001754:	0800202c 	.word	0x0800202c

08001758 <siprintf>:
 8001758:	b40e      	push	{r1, r2, r3}
 800175a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800175e:	b500      	push	{lr}
 8001760:	b09c      	sub	sp, #112	; 0x70
 8001762:	ab1d      	add	r3, sp, #116	; 0x74
 8001764:	9002      	str	r0, [sp, #8]
 8001766:	9006      	str	r0, [sp, #24]
 8001768:	9107      	str	r1, [sp, #28]
 800176a:	9104      	str	r1, [sp, #16]
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <siprintf+0x38>)
 800176e:	4909      	ldr	r1, [pc, #36]	; (8001794 <siprintf+0x3c>)
 8001770:	f853 2b04 	ldr.w	r2, [r3], #4
 8001774:	9105      	str	r1, [sp, #20]
 8001776:	6800      	ldr	r0, [r0, #0]
 8001778:	a902      	add	r1, sp, #8
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	f000 f866 	bl	800184c <_svfiprintf_r>
 8001780:	2200      	movs	r2, #0
 8001782:	9b02      	ldr	r3, [sp, #8]
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	b01c      	add	sp, #112	; 0x70
 8001788:	f85d eb04 	ldr.w	lr, [sp], #4
 800178c:	b003      	add	sp, #12
 800178e:	4770      	bx	lr
 8001790:	2000000c 	.word	0x2000000c
 8001794:	ffff0208 	.word	0xffff0208

08001798 <__ssputs_r>:
 8001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800179c:	688e      	ldr	r6, [r1, #8]
 800179e:	4682      	mov	sl, r0
 80017a0:	429e      	cmp	r6, r3
 80017a2:	460c      	mov	r4, r1
 80017a4:	4690      	mov	r8, r2
 80017a6:	4699      	mov	r9, r3
 80017a8:	d837      	bhi.n	800181a <__ssputs_r+0x82>
 80017aa:	898a      	ldrh	r2, [r1, #12]
 80017ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017b0:	d031      	beq.n	8001816 <__ssputs_r+0x7e>
 80017b2:	2302      	movs	r3, #2
 80017b4:	6825      	ldr	r5, [r4, #0]
 80017b6:	6909      	ldr	r1, [r1, #16]
 80017b8:	1a6f      	subs	r7, r5, r1
 80017ba:	6965      	ldr	r5, [r4, #20]
 80017bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80017c4:	f109 0301 	add.w	r3, r9, #1
 80017c8:	443b      	add	r3, r7
 80017ca:	429d      	cmp	r5, r3
 80017cc:	bf38      	it	cc
 80017ce:	461d      	movcc	r5, r3
 80017d0:	0553      	lsls	r3, r2, #21
 80017d2:	d530      	bpl.n	8001836 <__ssputs_r+0x9e>
 80017d4:	4629      	mov	r1, r5
 80017d6:	f000 fb37 	bl	8001e48 <_malloc_r>
 80017da:	4606      	mov	r6, r0
 80017dc:	b950      	cbnz	r0, 80017f4 <__ssputs_r+0x5c>
 80017de:	230c      	movs	r3, #12
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f8ca 3000 	str.w	r3, [sl]
 80017e8:	89a3      	ldrh	r3, [r4, #12]
 80017ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ee:	81a3      	strh	r3, [r4, #12]
 80017f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f4:	463a      	mov	r2, r7
 80017f6:	6921      	ldr	r1, [r4, #16]
 80017f8:	f000 fab6 	bl	8001d68 <memcpy>
 80017fc:	89a3      	ldrh	r3, [r4, #12]
 80017fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001806:	81a3      	strh	r3, [r4, #12]
 8001808:	6126      	str	r6, [r4, #16]
 800180a:	443e      	add	r6, r7
 800180c:	6026      	str	r6, [r4, #0]
 800180e:	464e      	mov	r6, r9
 8001810:	6165      	str	r5, [r4, #20]
 8001812:	1bed      	subs	r5, r5, r7
 8001814:	60a5      	str	r5, [r4, #8]
 8001816:	454e      	cmp	r6, r9
 8001818:	d900      	bls.n	800181c <__ssputs_r+0x84>
 800181a:	464e      	mov	r6, r9
 800181c:	4632      	mov	r2, r6
 800181e:	4641      	mov	r1, r8
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	f000 faac 	bl	8001d7e <memmove>
 8001826:	68a3      	ldr	r3, [r4, #8]
 8001828:	2000      	movs	r0, #0
 800182a:	1b9b      	subs	r3, r3, r6
 800182c:	60a3      	str	r3, [r4, #8]
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	441e      	add	r6, r3
 8001832:	6026      	str	r6, [r4, #0]
 8001834:	e7dc      	b.n	80017f0 <__ssputs_r+0x58>
 8001836:	462a      	mov	r2, r5
 8001838:	f000 fb60 	bl	8001efc <_realloc_r>
 800183c:	4606      	mov	r6, r0
 800183e:	2800      	cmp	r0, #0
 8001840:	d1e2      	bne.n	8001808 <__ssputs_r+0x70>
 8001842:	6921      	ldr	r1, [r4, #16]
 8001844:	4650      	mov	r0, sl
 8001846:	f000 fab3 	bl	8001db0 <_free_r>
 800184a:	e7c8      	b.n	80017de <__ssputs_r+0x46>

0800184c <_svfiprintf_r>:
 800184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001850:	461d      	mov	r5, r3
 8001852:	898b      	ldrh	r3, [r1, #12]
 8001854:	b09d      	sub	sp, #116	; 0x74
 8001856:	061f      	lsls	r7, r3, #24
 8001858:	4680      	mov	r8, r0
 800185a:	460c      	mov	r4, r1
 800185c:	4616      	mov	r6, r2
 800185e:	d50f      	bpl.n	8001880 <_svfiprintf_r+0x34>
 8001860:	690b      	ldr	r3, [r1, #16]
 8001862:	b96b      	cbnz	r3, 8001880 <_svfiprintf_r+0x34>
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	f000 faef 	bl	8001e48 <_malloc_r>
 800186a:	6020      	str	r0, [r4, #0]
 800186c:	6120      	str	r0, [r4, #16]
 800186e:	b928      	cbnz	r0, 800187c <_svfiprintf_r+0x30>
 8001870:	230c      	movs	r3, #12
 8001872:	f8c8 3000 	str.w	r3, [r8]
 8001876:	f04f 30ff 	mov.w	r0, #4294967295
 800187a:	e0c8      	b.n	8001a0e <_svfiprintf_r+0x1c2>
 800187c:	2340      	movs	r3, #64	; 0x40
 800187e:	6163      	str	r3, [r4, #20]
 8001880:	2300      	movs	r3, #0
 8001882:	9309      	str	r3, [sp, #36]	; 0x24
 8001884:	2320      	movs	r3, #32
 8001886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800188a:	2330      	movs	r3, #48	; 0x30
 800188c:	f04f 0b01 	mov.w	fp, #1
 8001890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001894:	9503      	str	r5, [sp, #12]
 8001896:	4637      	mov	r7, r6
 8001898:	463d      	mov	r5, r7
 800189a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800189e:	b10b      	cbz	r3, 80018a4 <_svfiprintf_r+0x58>
 80018a0:	2b25      	cmp	r3, #37	; 0x25
 80018a2:	d13e      	bne.n	8001922 <_svfiprintf_r+0xd6>
 80018a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80018a8:	d00b      	beq.n	80018c2 <_svfiprintf_r+0x76>
 80018aa:	4653      	mov	r3, sl
 80018ac:	4632      	mov	r2, r6
 80018ae:	4621      	mov	r1, r4
 80018b0:	4640      	mov	r0, r8
 80018b2:	f7ff ff71 	bl	8001798 <__ssputs_r>
 80018b6:	3001      	adds	r0, #1
 80018b8:	f000 80a4 	beq.w	8001a04 <_svfiprintf_r+0x1b8>
 80018bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018be:	4453      	add	r3, sl
 80018c0:	9309      	str	r3, [sp, #36]	; 0x24
 80018c2:	783b      	ldrb	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 809d 	beq.w	8001a04 <_svfiprintf_r+0x1b8>
 80018ca:	2300      	movs	r3, #0
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018d4:	9304      	str	r3, [sp, #16]
 80018d6:	9307      	str	r3, [sp, #28]
 80018d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018dc:	931a      	str	r3, [sp, #104]	; 0x68
 80018de:	462f      	mov	r7, r5
 80018e0:	2205      	movs	r2, #5
 80018e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80018e6:	4850      	ldr	r0, [pc, #320]	; (8001a28 <_svfiprintf_r+0x1dc>)
 80018e8:	f000 fa30 	bl	8001d4c <memchr>
 80018ec:	9b04      	ldr	r3, [sp, #16]
 80018ee:	b9d0      	cbnz	r0, 8001926 <_svfiprintf_r+0xda>
 80018f0:	06d9      	lsls	r1, r3, #27
 80018f2:	bf44      	itt	mi
 80018f4:	2220      	movmi	r2, #32
 80018f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018fa:	071a      	lsls	r2, r3, #28
 80018fc:	bf44      	itt	mi
 80018fe:	222b      	movmi	r2, #43	; 0x2b
 8001900:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001904:	782a      	ldrb	r2, [r5, #0]
 8001906:	2a2a      	cmp	r2, #42	; 0x2a
 8001908:	d015      	beq.n	8001936 <_svfiprintf_r+0xea>
 800190a:	462f      	mov	r7, r5
 800190c:	2000      	movs	r0, #0
 800190e:	250a      	movs	r5, #10
 8001910:	9a07      	ldr	r2, [sp, #28]
 8001912:	4639      	mov	r1, r7
 8001914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001918:	3b30      	subs	r3, #48	; 0x30
 800191a:	2b09      	cmp	r3, #9
 800191c:	d94d      	bls.n	80019ba <_svfiprintf_r+0x16e>
 800191e:	b1b8      	cbz	r0, 8001950 <_svfiprintf_r+0x104>
 8001920:	e00f      	b.n	8001942 <_svfiprintf_r+0xf6>
 8001922:	462f      	mov	r7, r5
 8001924:	e7b8      	b.n	8001898 <_svfiprintf_r+0x4c>
 8001926:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <_svfiprintf_r+0x1dc>)
 8001928:	463d      	mov	r5, r7
 800192a:	1a80      	subs	r0, r0, r2
 800192c:	fa0b f000 	lsl.w	r0, fp, r0
 8001930:	4318      	orrs	r0, r3
 8001932:	9004      	str	r0, [sp, #16]
 8001934:	e7d3      	b.n	80018de <_svfiprintf_r+0x92>
 8001936:	9a03      	ldr	r2, [sp, #12]
 8001938:	1d11      	adds	r1, r2, #4
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	9103      	str	r1, [sp, #12]
 800193e:	2a00      	cmp	r2, #0
 8001940:	db01      	blt.n	8001946 <_svfiprintf_r+0xfa>
 8001942:	9207      	str	r2, [sp, #28]
 8001944:	e004      	b.n	8001950 <_svfiprintf_r+0x104>
 8001946:	4252      	negs	r2, r2
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	9207      	str	r2, [sp, #28]
 800194e:	9304      	str	r3, [sp, #16]
 8001950:	783b      	ldrb	r3, [r7, #0]
 8001952:	2b2e      	cmp	r3, #46	; 0x2e
 8001954:	d10c      	bne.n	8001970 <_svfiprintf_r+0x124>
 8001956:	787b      	ldrb	r3, [r7, #1]
 8001958:	2b2a      	cmp	r3, #42	; 0x2a
 800195a:	d133      	bne.n	80019c4 <_svfiprintf_r+0x178>
 800195c:	9b03      	ldr	r3, [sp, #12]
 800195e:	3702      	adds	r7, #2
 8001960:	1d1a      	adds	r2, r3, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	9203      	str	r2, [sp, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	bfb8      	it	lt
 800196a:	f04f 33ff 	movlt.w	r3, #4294967295
 800196e:	9305      	str	r3, [sp, #20]
 8001970:	4d2e      	ldr	r5, [pc, #184]	; (8001a2c <_svfiprintf_r+0x1e0>)
 8001972:	2203      	movs	r2, #3
 8001974:	7839      	ldrb	r1, [r7, #0]
 8001976:	4628      	mov	r0, r5
 8001978:	f000 f9e8 	bl	8001d4c <memchr>
 800197c:	b138      	cbz	r0, 800198e <_svfiprintf_r+0x142>
 800197e:	2340      	movs	r3, #64	; 0x40
 8001980:	1b40      	subs	r0, r0, r5
 8001982:	fa03 f000 	lsl.w	r0, r3, r0
 8001986:	9b04      	ldr	r3, [sp, #16]
 8001988:	3701      	adds	r7, #1
 800198a:	4303      	orrs	r3, r0
 800198c:	9304      	str	r3, [sp, #16]
 800198e:	7839      	ldrb	r1, [r7, #0]
 8001990:	2206      	movs	r2, #6
 8001992:	4827      	ldr	r0, [pc, #156]	; (8001a30 <_svfiprintf_r+0x1e4>)
 8001994:	1c7e      	adds	r6, r7, #1
 8001996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800199a:	f000 f9d7 	bl	8001d4c <memchr>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d038      	beq.n	8001a14 <_svfiprintf_r+0x1c8>
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <_svfiprintf_r+0x1e8>)
 80019a4:	bb13      	cbnz	r3, 80019ec <_svfiprintf_r+0x1a0>
 80019a6:	9b03      	ldr	r3, [sp, #12]
 80019a8:	3307      	adds	r3, #7
 80019aa:	f023 0307 	bic.w	r3, r3, #7
 80019ae:	3308      	adds	r3, #8
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019b4:	444b      	add	r3, r9
 80019b6:	9309      	str	r3, [sp, #36]	; 0x24
 80019b8:	e76d      	b.n	8001896 <_svfiprintf_r+0x4a>
 80019ba:	fb05 3202 	mla	r2, r5, r2, r3
 80019be:	2001      	movs	r0, #1
 80019c0:	460f      	mov	r7, r1
 80019c2:	e7a6      	b.n	8001912 <_svfiprintf_r+0xc6>
 80019c4:	2300      	movs	r3, #0
 80019c6:	250a      	movs	r5, #10
 80019c8:	4619      	mov	r1, r3
 80019ca:	3701      	adds	r7, #1
 80019cc:	9305      	str	r3, [sp, #20]
 80019ce:	4638      	mov	r0, r7
 80019d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019d4:	3a30      	subs	r2, #48	; 0x30
 80019d6:	2a09      	cmp	r2, #9
 80019d8:	d903      	bls.n	80019e2 <_svfiprintf_r+0x196>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0c8      	beq.n	8001970 <_svfiprintf_r+0x124>
 80019de:	9105      	str	r1, [sp, #20]
 80019e0:	e7c6      	b.n	8001970 <_svfiprintf_r+0x124>
 80019e2:	fb05 2101 	mla	r1, r5, r1, r2
 80019e6:	2301      	movs	r3, #1
 80019e8:	4607      	mov	r7, r0
 80019ea:	e7f0      	b.n	80019ce <_svfiprintf_r+0x182>
 80019ec:	ab03      	add	r3, sp, #12
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4622      	mov	r2, r4
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_svfiprintf_r+0x1ec>)
 80019f4:	a904      	add	r1, sp, #16
 80019f6:	4640      	mov	r0, r8
 80019f8:	f3af 8000 	nop.w
 80019fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a00:	4681      	mov	r9, r0
 8001a02:	d1d6      	bne.n	80019b2 <_svfiprintf_r+0x166>
 8001a04:	89a3      	ldrh	r3, [r4, #12]
 8001a06:	065b      	lsls	r3, r3, #25
 8001a08:	f53f af35 	bmi.w	8001876 <_svfiprintf_r+0x2a>
 8001a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a0e:	b01d      	add	sp, #116	; 0x74
 8001a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a14:	ab03      	add	r3, sp, #12
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4622      	mov	r2, r4
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_svfiprintf_r+0x1ec>)
 8001a1c:	a904      	add	r1, sp, #16
 8001a1e:	4640      	mov	r0, r8
 8001a20:	f000 f882 	bl	8001b28 <_printf_i>
 8001a24:	e7ea      	b.n	80019fc <_svfiprintf_r+0x1b0>
 8001a26:	bf00      	nop
 8001a28:	08001ff4 	.word	0x08001ff4
 8001a2c:	08001ffa 	.word	0x08001ffa
 8001a30:	08001ffe 	.word	0x08001ffe
 8001a34:	00000000 	.word	0x00000000
 8001a38:	08001799 	.word	0x08001799

08001a3c <_printf_common>:
 8001a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a40:	4691      	mov	r9, r2
 8001a42:	461f      	mov	r7, r3
 8001a44:	688a      	ldr	r2, [r1, #8]
 8001a46:	690b      	ldr	r3, [r1, #16]
 8001a48:	4606      	mov	r6, r0
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	bfb8      	it	lt
 8001a4e:	4613      	movlt	r3, r2
 8001a50:	f8c9 3000 	str.w	r3, [r9]
 8001a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a58:	460c      	mov	r4, r1
 8001a5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a5e:	b112      	cbz	r2, 8001a66 <_printf_common+0x2a>
 8001a60:	3301      	adds	r3, #1
 8001a62:	f8c9 3000 	str.w	r3, [r9]
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	0699      	lsls	r1, r3, #26
 8001a6a:	bf42      	ittt	mi
 8001a6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a70:	3302      	addmi	r3, #2
 8001a72:	f8c9 3000 	strmi.w	r3, [r9]
 8001a76:	6825      	ldr	r5, [r4, #0]
 8001a78:	f015 0506 	ands.w	r5, r5, #6
 8001a7c:	d107      	bne.n	8001a8e <_printf_common+0x52>
 8001a7e:	f104 0a19 	add.w	sl, r4, #25
 8001a82:	68e3      	ldr	r3, [r4, #12]
 8001a84:	f8d9 2000 	ldr.w	r2, [r9]
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	42ab      	cmp	r3, r5
 8001a8c:	dc29      	bgt.n	8001ae2 <_printf_common+0xa6>
 8001a8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	3300      	adds	r3, #0
 8001a96:	bf18      	it	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	0692      	lsls	r2, r2, #26
 8001a9c:	d42e      	bmi.n	8001afc <_printf_common+0xc0>
 8001a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001aa2:	4639      	mov	r1, r7
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	47c0      	blx	r8
 8001aa8:	3001      	adds	r0, #1
 8001aaa:	d021      	beq.n	8001af0 <_printf_common+0xb4>
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	68e5      	ldr	r5, [r4, #12]
 8001ab0:	f003 0306 	and.w	r3, r3, #6
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	bf18      	it	ne
 8001ab8:	2500      	movne	r5, #0
 8001aba:	f8d9 2000 	ldr.w	r2, [r9]
 8001abe:	f04f 0900 	mov.w	r9, #0
 8001ac2:	bf08      	it	eq
 8001ac4:	1aad      	subeq	r5, r5, r2
 8001ac6:	68a3      	ldr	r3, [r4, #8]
 8001ac8:	6922      	ldr	r2, [r4, #16]
 8001aca:	bf08      	it	eq
 8001acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	bfc4      	itt	gt
 8001ad4:	1a9b      	subgt	r3, r3, r2
 8001ad6:	18ed      	addgt	r5, r5, r3
 8001ad8:	341a      	adds	r4, #26
 8001ada:	454d      	cmp	r5, r9
 8001adc:	d11a      	bne.n	8001b14 <_printf_common+0xd8>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e008      	b.n	8001af4 <_printf_common+0xb8>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	4639      	mov	r1, r7
 8001ae8:	4630      	mov	r0, r6
 8001aea:	47c0      	blx	r8
 8001aec:	3001      	adds	r0, #1
 8001aee:	d103      	bne.n	8001af8 <_printf_common+0xbc>
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af8:	3501      	adds	r5, #1
 8001afa:	e7c2      	b.n	8001a82 <_printf_common+0x46>
 8001afc:	2030      	movs	r0, #48	; 0x30
 8001afe:	18e1      	adds	r1, r4, r3
 8001b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b0a:	4422      	add	r2, r4
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b12:	e7c4      	b.n	8001a9e <_printf_common+0x62>
 8001b14:	2301      	movs	r3, #1
 8001b16:	4622      	mov	r2, r4
 8001b18:	4639      	mov	r1, r7
 8001b1a:	4630      	mov	r0, r6
 8001b1c:	47c0      	blx	r8
 8001b1e:	3001      	adds	r0, #1
 8001b20:	d0e6      	beq.n	8001af0 <_printf_common+0xb4>
 8001b22:	f109 0901 	add.w	r9, r9, #1
 8001b26:	e7d8      	b.n	8001ada <_printf_common+0x9e>

08001b28 <_printf_i>:
 8001b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001b30:	460c      	mov	r4, r1
 8001b32:	7e09      	ldrb	r1, [r1, #24]
 8001b34:	b085      	sub	sp, #20
 8001b36:	296e      	cmp	r1, #110	; 0x6e
 8001b38:	4617      	mov	r7, r2
 8001b3a:	4606      	mov	r6, r0
 8001b3c:	4698      	mov	r8, r3
 8001b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b40:	f000 80b3 	beq.w	8001caa <_printf_i+0x182>
 8001b44:	d822      	bhi.n	8001b8c <_printf_i+0x64>
 8001b46:	2963      	cmp	r1, #99	; 0x63
 8001b48:	d036      	beq.n	8001bb8 <_printf_i+0x90>
 8001b4a:	d80a      	bhi.n	8001b62 <_printf_i+0x3a>
 8001b4c:	2900      	cmp	r1, #0
 8001b4e:	f000 80b9 	beq.w	8001cc4 <_printf_i+0x19c>
 8001b52:	2958      	cmp	r1, #88	; 0x58
 8001b54:	f000 8083 	beq.w	8001c5e <_printf_i+0x136>
 8001b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b60:	e032      	b.n	8001bc8 <_printf_i+0xa0>
 8001b62:	2964      	cmp	r1, #100	; 0x64
 8001b64:	d001      	beq.n	8001b6a <_printf_i+0x42>
 8001b66:	2969      	cmp	r1, #105	; 0x69
 8001b68:	d1f6      	bne.n	8001b58 <_printf_i+0x30>
 8001b6a:	6820      	ldr	r0, [r4, #0]
 8001b6c:	6813      	ldr	r3, [r2, #0]
 8001b6e:	0605      	lsls	r5, r0, #24
 8001b70:	f103 0104 	add.w	r1, r3, #4
 8001b74:	d52a      	bpl.n	8001bcc <_printf_i+0xa4>
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6011      	str	r1, [r2, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da03      	bge.n	8001b86 <_printf_i+0x5e>
 8001b7e:	222d      	movs	r2, #45	; 0x2d
 8001b80:	425b      	negs	r3, r3
 8001b82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b86:	486f      	ldr	r0, [pc, #444]	; (8001d44 <_printf_i+0x21c>)
 8001b88:	220a      	movs	r2, #10
 8001b8a:	e039      	b.n	8001c00 <_printf_i+0xd8>
 8001b8c:	2973      	cmp	r1, #115	; 0x73
 8001b8e:	f000 809d 	beq.w	8001ccc <_printf_i+0x1a4>
 8001b92:	d808      	bhi.n	8001ba6 <_printf_i+0x7e>
 8001b94:	296f      	cmp	r1, #111	; 0x6f
 8001b96:	d020      	beq.n	8001bda <_printf_i+0xb2>
 8001b98:	2970      	cmp	r1, #112	; 0x70
 8001b9a:	d1dd      	bne.n	8001b58 <_printf_i+0x30>
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	6023      	str	r3, [r4, #0]
 8001ba4:	e003      	b.n	8001bae <_printf_i+0x86>
 8001ba6:	2975      	cmp	r1, #117	; 0x75
 8001ba8:	d017      	beq.n	8001bda <_printf_i+0xb2>
 8001baa:	2978      	cmp	r1, #120	; 0x78
 8001bac:	d1d4      	bne.n	8001b58 <_printf_i+0x30>
 8001bae:	2378      	movs	r3, #120	; 0x78
 8001bb0:	4865      	ldr	r0, [pc, #404]	; (8001d48 <_printf_i+0x220>)
 8001bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bb6:	e055      	b.n	8001c64 <_printf_i+0x13c>
 8001bb8:	6813      	ldr	r3, [r2, #0]
 8001bba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bbe:	1d19      	adds	r1, r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6011      	str	r1, [r2, #0]
 8001bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e08c      	b.n	8001ce6 <_printf_i+0x1be>
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001bd2:	6011      	str	r1, [r2, #0]
 8001bd4:	bf18      	it	ne
 8001bd6:	b21b      	sxthne	r3, r3
 8001bd8:	e7cf      	b.n	8001b7a <_printf_i+0x52>
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	6825      	ldr	r5, [r4, #0]
 8001bde:	1d18      	adds	r0, r3, #4
 8001be0:	6010      	str	r0, [r2, #0]
 8001be2:	0628      	lsls	r0, r5, #24
 8001be4:	d501      	bpl.n	8001bea <_printf_i+0xc2>
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	e002      	b.n	8001bf0 <_printf_i+0xc8>
 8001bea:	0668      	lsls	r0, r5, #25
 8001bec:	d5fb      	bpl.n	8001be6 <_printf_i+0xbe>
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	296f      	cmp	r1, #111	; 0x6f
 8001bf2:	bf14      	ite	ne
 8001bf4:	220a      	movne	r2, #10
 8001bf6:	2208      	moveq	r2, #8
 8001bf8:	4852      	ldr	r0, [pc, #328]	; (8001d44 <_printf_i+0x21c>)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c00:	6865      	ldr	r5, [r4, #4]
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	60a5      	str	r5, [r4, #8]
 8001c06:	f2c0 8095 	blt.w	8001d34 <_printf_i+0x20c>
 8001c0a:	6821      	ldr	r1, [r4, #0]
 8001c0c:	f021 0104 	bic.w	r1, r1, #4
 8001c10:	6021      	str	r1, [r4, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d13d      	bne.n	8001c92 <_printf_i+0x16a>
 8001c16:	2d00      	cmp	r5, #0
 8001c18:	f040 808e 	bne.w	8001d38 <_printf_i+0x210>
 8001c1c:	4665      	mov	r5, ip
 8001c1e:	2a08      	cmp	r2, #8
 8001c20:	d10b      	bne.n	8001c3a <_printf_i+0x112>
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	07db      	lsls	r3, r3, #31
 8001c26:	d508      	bpl.n	8001c3a <_printf_i+0x112>
 8001c28:	6923      	ldr	r3, [r4, #16]
 8001c2a:	6862      	ldr	r2, [r4, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	bfde      	ittt	le
 8001c30:	2330      	movle	r3, #48	; 0x30
 8001c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c3a:	ebac 0305 	sub.w	r3, ip, r5
 8001c3e:	6123      	str	r3, [r4, #16]
 8001c40:	f8cd 8000 	str.w	r8, [sp]
 8001c44:	463b      	mov	r3, r7
 8001c46:	aa03      	add	r2, sp, #12
 8001c48:	4621      	mov	r1, r4
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f7ff fef6 	bl	8001a3c <_printf_common>
 8001c50:	3001      	adds	r0, #1
 8001c52:	d14d      	bne.n	8001cf0 <_printf_i+0x1c8>
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	b005      	add	sp, #20
 8001c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c5e:	4839      	ldr	r0, [pc, #228]	; (8001d44 <_printf_i+0x21c>)
 8001c60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001c64:	6813      	ldr	r3, [r2, #0]
 8001c66:	6821      	ldr	r1, [r4, #0]
 8001c68:	1d1d      	adds	r5, r3, #4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6015      	str	r5, [r2, #0]
 8001c6e:	060a      	lsls	r2, r1, #24
 8001c70:	d50b      	bpl.n	8001c8a <_printf_i+0x162>
 8001c72:	07ca      	lsls	r2, r1, #31
 8001c74:	bf44      	itt	mi
 8001c76:	f041 0120 	orrmi.w	r1, r1, #32
 8001c7a:	6021      	strmi	r1, [r4, #0]
 8001c7c:	b91b      	cbnz	r3, 8001c86 <_printf_i+0x15e>
 8001c7e:	6822      	ldr	r2, [r4, #0]
 8001c80:	f022 0220 	bic.w	r2, r2, #32
 8001c84:	6022      	str	r2, [r4, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	e7b7      	b.n	8001bfa <_printf_i+0xd2>
 8001c8a:	064d      	lsls	r5, r1, #25
 8001c8c:	bf48      	it	mi
 8001c8e:	b29b      	uxthmi	r3, r3
 8001c90:	e7ef      	b.n	8001c72 <_printf_i+0x14a>
 8001c92:	4665      	mov	r5, ip
 8001c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c98:	fb02 3311 	mls	r3, r2, r1, r3
 8001c9c:	5cc3      	ldrb	r3, [r0, r3]
 8001c9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d1f5      	bne.n	8001c94 <_printf_i+0x16c>
 8001ca8:	e7b9      	b.n	8001c1e <_printf_i+0xf6>
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	6825      	ldr	r5, [r4, #0]
 8001cae:	1d18      	adds	r0, r3, #4
 8001cb0:	6961      	ldr	r1, [r4, #20]
 8001cb2:	6010      	str	r0, [r2, #0]
 8001cb4:	0628      	lsls	r0, r5, #24
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	d501      	bpl.n	8001cbe <_printf_i+0x196>
 8001cba:	6019      	str	r1, [r3, #0]
 8001cbc:	e002      	b.n	8001cc4 <_printf_i+0x19c>
 8001cbe:	066a      	lsls	r2, r5, #25
 8001cc0:	d5fb      	bpl.n	8001cba <_printf_i+0x192>
 8001cc2:	8019      	strh	r1, [r3, #0]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4665      	mov	r5, ip
 8001cc8:	6123      	str	r3, [r4, #16]
 8001cca:	e7b9      	b.n	8001c40 <_printf_i+0x118>
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	1d19      	adds	r1, r3, #4
 8001cd0:	6011      	str	r1, [r2, #0]
 8001cd2:	681d      	ldr	r5, [r3, #0]
 8001cd4:	6862      	ldr	r2, [r4, #4]
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f000 f837 	bl	8001d4c <memchr>
 8001cde:	b108      	cbz	r0, 8001ce4 <_printf_i+0x1bc>
 8001ce0:	1b40      	subs	r0, r0, r5
 8001ce2:	6060      	str	r0, [r4, #4]
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	6123      	str	r3, [r4, #16]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cee:	e7a7      	b.n	8001c40 <_printf_i+0x118>
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	462a      	mov	r2, r5
 8001cf4:	4639      	mov	r1, r7
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	47c0      	blx	r8
 8001cfa:	3001      	adds	r0, #1
 8001cfc:	d0aa      	beq.n	8001c54 <_printf_i+0x12c>
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	079b      	lsls	r3, r3, #30
 8001d02:	d413      	bmi.n	8001d2c <_printf_i+0x204>
 8001d04:	68e0      	ldr	r0, [r4, #12]
 8001d06:	9b03      	ldr	r3, [sp, #12]
 8001d08:	4298      	cmp	r0, r3
 8001d0a:	bfb8      	it	lt
 8001d0c:	4618      	movlt	r0, r3
 8001d0e:	e7a3      	b.n	8001c58 <_printf_i+0x130>
 8001d10:	2301      	movs	r3, #1
 8001d12:	464a      	mov	r2, r9
 8001d14:	4639      	mov	r1, r7
 8001d16:	4630      	mov	r0, r6
 8001d18:	47c0      	blx	r8
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	d09a      	beq.n	8001c54 <_printf_i+0x12c>
 8001d1e:	3501      	adds	r5, #1
 8001d20:	68e3      	ldr	r3, [r4, #12]
 8001d22:	9a03      	ldr	r2, [sp, #12]
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	42ab      	cmp	r3, r5
 8001d28:	dcf2      	bgt.n	8001d10 <_printf_i+0x1e8>
 8001d2a:	e7eb      	b.n	8001d04 <_printf_i+0x1dc>
 8001d2c:	2500      	movs	r5, #0
 8001d2e:	f104 0919 	add.w	r9, r4, #25
 8001d32:	e7f5      	b.n	8001d20 <_printf_i+0x1f8>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ac      	bne.n	8001c92 <_printf_i+0x16a>
 8001d38:	7803      	ldrb	r3, [r0, #0]
 8001d3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d42:	e76c      	b.n	8001c1e <_printf_i+0xf6>
 8001d44:	08002005 	.word	0x08002005
 8001d48:	08002016 	.word	0x08002016

08001d4c <memchr>:
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	b2c9      	uxtb	r1, r1
 8001d50:	4402      	add	r2, r0
 8001d52:	4290      	cmp	r0, r2
 8001d54:	4603      	mov	r3, r0
 8001d56:	d101      	bne.n	8001d5c <memchr+0x10>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e003      	b.n	8001d64 <memchr+0x18>
 8001d5c:	781c      	ldrb	r4, [r3, #0]
 8001d5e:	3001      	adds	r0, #1
 8001d60:	428c      	cmp	r4, r1
 8001d62:	d1f6      	bne.n	8001d52 <memchr+0x6>
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd10      	pop	{r4, pc}

08001d68 <memcpy>:
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	1e43      	subs	r3, r0, #1
 8001d6c:	440a      	add	r2, r1
 8001d6e:	4291      	cmp	r1, r2
 8001d70:	d100      	bne.n	8001d74 <memcpy+0xc>
 8001d72:	bd10      	pop	{r4, pc}
 8001d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d7c:	e7f7      	b.n	8001d6e <memcpy+0x6>

08001d7e <memmove>:
 8001d7e:	4288      	cmp	r0, r1
 8001d80:	b510      	push	{r4, lr}
 8001d82:	eb01 0302 	add.w	r3, r1, r2
 8001d86:	d807      	bhi.n	8001d98 <memmove+0x1a>
 8001d88:	1e42      	subs	r2, r0, #1
 8001d8a:	4299      	cmp	r1, r3
 8001d8c:	d00a      	beq.n	8001da4 <memmove+0x26>
 8001d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001d96:	e7f8      	b.n	8001d8a <memmove+0xc>
 8001d98:	4283      	cmp	r3, r0
 8001d9a:	d9f5      	bls.n	8001d88 <memmove+0xa>
 8001d9c:	1881      	adds	r1, r0, r2
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	42d3      	cmn	r3, r2
 8001da2:	d100      	bne.n	8001da6 <memmove+0x28>
 8001da4:	bd10      	pop	{r4, pc}
 8001da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001daa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001dae:	e7f7      	b.n	8001da0 <memmove+0x22>

08001db0 <_free_r>:
 8001db0:	b538      	push	{r3, r4, r5, lr}
 8001db2:	4605      	mov	r5, r0
 8001db4:	2900      	cmp	r1, #0
 8001db6:	d043      	beq.n	8001e40 <_free_r+0x90>
 8001db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dbc:	1f0c      	subs	r4, r1, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bfb8      	it	lt
 8001dc2:	18e4      	addlt	r4, r4, r3
 8001dc4:	f000 f8d0 	bl	8001f68 <__malloc_lock>
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <_free_r+0x94>)
 8001dca:	6813      	ldr	r3, [r2, #0]
 8001dcc:	4610      	mov	r0, r2
 8001dce:	b933      	cbnz	r3, 8001dde <_free_r+0x2e>
 8001dd0:	6063      	str	r3, [r4, #4]
 8001dd2:	6014      	str	r4, [r2, #0]
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dda:	f000 b8c6 	b.w	8001f6a <__malloc_unlock>
 8001dde:	42a3      	cmp	r3, r4
 8001de0:	d90b      	bls.n	8001dfa <_free_r+0x4a>
 8001de2:	6821      	ldr	r1, [r4, #0]
 8001de4:	1862      	adds	r2, r4, r1
 8001de6:	4293      	cmp	r3, r2
 8001de8:	bf01      	itttt	eq
 8001dea:	681a      	ldreq	r2, [r3, #0]
 8001dec:	685b      	ldreq	r3, [r3, #4]
 8001dee:	1852      	addeq	r2, r2, r1
 8001df0:	6022      	streq	r2, [r4, #0]
 8001df2:	6063      	str	r3, [r4, #4]
 8001df4:	6004      	str	r4, [r0, #0]
 8001df6:	e7ed      	b.n	8001dd4 <_free_r+0x24>
 8001df8:	4613      	mov	r3, r2
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	b10a      	cbz	r2, 8001e02 <_free_r+0x52>
 8001dfe:	42a2      	cmp	r2, r4
 8001e00:	d9fa      	bls.n	8001df8 <_free_r+0x48>
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	1858      	adds	r0, r3, r1
 8001e06:	42a0      	cmp	r0, r4
 8001e08:	d10b      	bne.n	8001e22 <_free_r+0x72>
 8001e0a:	6820      	ldr	r0, [r4, #0]
 8001e0c:	4401      	add	r1, r0
 8001e0e:	1858      	adds	r0, r3, r1
 8001e10:	4282      	cmp	r2, r0
 8001e12:	6019      	str	r1, [r3, #0]
 8001e14:	d1de      	bne.n	8001dd4 <_free_r+0x24>
 8001e16:	6810      	ldr	r0, [r2, #0]
 8001e18:	6852      	ldr	r2, [r2, #4]
 8001e1a:	4401      	add	r1, r0
 8001e1c:	6019      	str	r1, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	e7d8      	b.n	8001dd4 <_free_r+0x24>
 8001e22:	d902      	bls.n	8001e2a <_free_r+0x7a>
 8001e24:	230c      	movs	r3, #12
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	e7d4      	b.n	8001dd4 <_free_r+0x24>
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	1821      	adds	r1, r4, r0
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	bf01      	itttt	eq
 8001e32:	6811      	ldreq	r1, [r2, #0]
 8001e34:	6852      	ldreq	r2, [r2, #4]
 8001e36:	1809      	addeq	r1, r1, r0
 8001e38:	6021      	streq	r1, [r4, #0]
 8001e3a:	6062      	str	r2, [r4, #4]
 8001e3c:	605c      	str	r4, [r3, #4]
 8001e3e:	e7c9      	b.n	8001dd4 <_free_r+0x24>
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
 8001e42:	bf00      	nop
 8001e44:	20000090 	.word	0x20000090

08001e48 <_malloc_r>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	1ccd      	adds	r5, r1, #3
 8001e4c:	f025 0503 	bic.w	r5, r5, #3
 8001e50:	3508      	adds	r5, #8
 8001e52:	2d0c      	cmp	r5, #12
 8001e54:	bf38      	it	cc
 8001e56:	250c      	movcc	r5, #12
 8001e58:	2d00      	cmp	r5, #0
 8001e5a:	4606      	mov	r6, r0
 8001e5c:	db01      	blt.n	8001e62 <_malloc_r+0x1a>
 8001e5e:	42a9      	cmp	r1, r5
 8001e60:	d903      	bls.n	8001e6a <_malloc_r+0x22>
 8001e62:	230c      	movs	r3, #12
 8001e64:	6033      	str	r3, [r6, #0]
 8001e66:	2000      	movs	r0, #0
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
 8001e6a:	f000 f87d 	bl	8001f68 <__malloc_lock>
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <_malloc_r+0xac>)
 8001e70:	6814      	ldr	r4, [r2, #0]
 8001e72:	4621      	mov	r1, r4
 8001e74:	b991      	cbnz	r1, 8001e9c <_malloc_r+0x54>
 8001e76:	4c20      	ldr	r4, [pc, #128]	; (8001ef8 <_malloc_r+0xb0>)
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	b91b      	cbnz	r3, 8001e84 <_malloc_r+0x3c>
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	f000 f863 	bl	8001f48 <_sbrk_r>
 8001e82:	6020      	str	r0, [r4, #0]
 8001e84:	4629      	mov	r1, r5
 8001e86:	4630      	mov	r0, r6
 8001e88:	f000 f85e 	bl	8001f48 <_sbrk_r>
 8001e8c:	1c43      	adds	r3, r0, #1
 8001e8e:	d124      	bne.n	8001eda <_malloc_r+0x92>
 8001e90:	230c      	movs	r3, #12
 8001e92:	4630      	mov	r0, r6
 8001e94:	6033      	str	r3, [r6, #0]
 8001e96:	f000 f868 	bl	8001f6a <__malloc_unlock>
 8001e9a:	e7e4      	b.n	8001e66 <_malloc_r+0x1e>
 8001e9c:	680b      	ldr	r3, [r1, #0]
 8001e9e:	1b5b      	subs	r3, r3, r5
 8001ea0:	d418      	bmi.n	8001ed4 <_malloc_r+0x8c>
 8001ea2:	2b0b      	cmp	r3, #11
 8001ea4:	d90f      	bls.n	8001ec6 <_malloc_r+0x7e>
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	18cc      	adds	r4, r1, r3
 8001eaa:	50cd      	str	r5, [r1, r3]
 8001eac:	4630      	mov	r0, r6
 8001eae:	f000 f85c 	bl	8001f6a <__malloc_unlock>
 8001eb2:	f104 000b 	add.w	r0, r4, #11
 8001eb6:	1d23      	adds	r3, r4, #4
 8001eb8:	f020 0007 	bic.w	r0, r0, #7
 8001ebc:	1ac3      	subs	r3, r0, r3
 8001ebe:	d0d3      	beq.n	8001e68 <_malloc_r+0x20>
 8001ec0:	425a      	negs	r2, r3
 8001ec2:	50e2      	str	r2, [r4, r3]
 8001ec4:	e7d0      	b.n	8001e68 <_malloc_r+0x20>
 8001ec6:	684b      	ldr	r3, [r1, #4]
 8001ec8:	428c      	cmp	r4, r1
 8001eca:	bf16      	itet	ne
 8001ecc:	6063      	strne	r3, [r4, #4]
 8001ece:	6013      	streq	r3, [r2, #0]
 8001ed0:	460c      	movne	r4, r1
 8001ed2:	e7eb      	b.n	8001eac <_malloc_r+0x64>
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	6849      	ldr	r1, [r1, #4]
 8001ed8:	e7cc      	b.n	8001e74 <_malloc_r+0x2c>
 8001eda:	1cc4      	adds	r4, r0, #3
 8001edc:	f024 0403 	bic.w	r4, r4, #3
 8001ee0:	42a0      	cmp	r0, r4
 8001ee2:	d005      	beq.n	8001ef0 <_malloc_r+0xa8>
 8001ee4:	1a21      	subs	r1, r4, r0
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	f000 f82e 	bl	8001f48 <_sbrk_r>
 8001eec:	3001      	adds	r0, #1
 8001eee:	d0cf      	beq.n	8001e90 <_malloc_r+0x48>
 8001ef0:	6025      	str	r5, [r4, #0]
 8001ef2:	e7db      	b.n	8001eac <_malloc_r+0x64>
 8001ef4:	20000090 	.word	0x20000090
 8001ef8:	20000094 	.word	0x20000094

08001efc <_realloc_r>:
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	4607      	mov	r7, r0
 8001f00:	4614      	mov	r4, r2
 8001f02:	460e      	mov	r6, r1
 8001f04:	b921      	cbnz	r1, 8001f10 <_realloc_r+0x14>
 8001f06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	f7ff bf9c 	b.w	8001e48 <_malloc_r>
 8001f10:	b922      	cbnz	r2, 8001f1c <_realloc_r+0x20>
 8001f12:	f7ff ff4d 	bl	8001db0 <_free_r>
 8001f16:	4625      	mov	r5, r4
 8001f18:	4628      	mov	r0, r5
 8001f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f1c:	f000 f826 	bl	8001f6c <_malloc_usable_size_r>
 8001f20:	42a0      	cmp	r0, r4
 8001f22:	d20f      	bcs.n	8001f44 <_realloc_r+0x48>
 8001f24:	4621      	mov	r1, r4
 8001f26:	4638      	mov	r0, r7
 8001f28:	f7ff ff8e 	bl	8001e48 <_malloc_r>
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d0f2      	beq.n	8001f18 <_realloc_r+0x1c>
 8001f32:	4631      	mov	r1, r6
 8001f34:	4622      	mov	r2, r4
 8001f36:	f7ff ff17 	bl	8001d68 <memcpy>
 8001f3a:	4631      	mov	r1, r6
 8001f3c:	4638      	mov	r0, r7
 8001f3e:	f7ff ff37 	bl	8001db0 <_free_r>
 8001f42:	e7e9      	b.n	8001f18 <_realloc_r+0x1c>
 8001f44:	4635      	mov	r5, r6
 8001f46:	e7e7      	b.n	8001f18 <_realloc_r+0x1c>

08001f48 <_sbrk_r>:
 8001f48:	b538      	push	{r3, r4, r5, lr}
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4c05      	ldr	r4, [pc, #20]	; (8001f64 <_sbrk_r+0x1c>)
 8001f4e:	4605      	mov	r5, r0
 8001f50:	4608      	mov	r0, r1
 8001f52:	6023      	str	r3, [r4, #0]
 8001f54:	f7fe fc4a 	bl	80007ec <_sbrk>
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	d102      	bne.n	8001f62 <_sbrk_r+0x1a>
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	b103      	cbz	r3, 8001f62 <_sbrk_r+0x1a>
 8001f60:	602b      	str	r3, [r5, #0]
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
 8001f64:	2000009c 	.word	0x2000009c

08001f68 <__malloc_lock>:
 8001f68:	4770      	bx	lr

08001f6a <__malloc_unlock>:
 8001f6a:	4770      	bx	lr

08001f6c <_malloc_usable_size_r>:
 8001f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f70:	1f18      	subs	r0, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bfbc      	itt	lt
 8001f76:	580b      	ldrlt	r3, [r1, r0]
 8001f78:	18c0      	addlt	r0, r0, r3
 8001f7a:	4770      	bx	lr

08001f7c <_init>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	bf00      	nop
 8001f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f82:	bc08      	pop	{r3}
 8001f84:	469e      	mov	lr, r3
 8001f86:	4770      	bx	lr

08001f88 <_fini>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	bf00      	nop
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr
