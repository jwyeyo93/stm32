
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bed8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800c068  0800c068  0001c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1d0  0800c1d0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1d0  0800c1d0  0001c1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1d8  0800c1d8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1d8  0800c1d8  0001c1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1dc  0800c1dc  0001c1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c1e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000090  0800c270  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  0800c270  000208ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023518  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004af8  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a10  00000000  00000000  000480d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e8  00000000  00000000  00049ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d1d  00000000  00000000  0004b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019489  00000000  00000000  00072fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9a36  00000000  00000000  0008c46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007468  00000000  00000000  00165f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c050 	.word	0x0800c050

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800c050 	.word	0x0800c050

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 ff21 	bl	8001418 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fb54 	bl	8000c88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005e0:	2310      	movs	r3, #16
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80005e8:	2304      	movs	r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 ff55 	bl	80014a0 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fb44 	bl	8000c88 <Error_Handler>
  }

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000c0 	.word	0x200000c0
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <HAL_ADC_MspInit+0x3c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d10d      	bne.n	8000642 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_ADC_MspInit+0x40>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <HAL_ADC_MspInit+0x40>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000634:	6453      	str	r3, [r2, #68]	; 0x44
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <HAL_ADC_MspInit+0x40>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40012000 	.word	0x40012000
 8000654:	40023800 	.word	0x40023800

08000658 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_DAC_Init+0x4c>)
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_DAC_Init+0x50>)
 800066a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_DAC_Init+0x4c>)
 800066e:	f001 fa46 	bl	8001afe <HAL_DAC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000678:	f000 fb06 	bl	8000c88 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_DAC_Init+0x4c>)
 800068c:	f001 fa59 	bl	8001b42 <HAL_DAC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000696:	f000 faf7 	bl	8000c88 <Error_Handler>
  }

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000108 	.word	0x20000108
 80006a8:	40007400 	.word	0x40007400

080006ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_DAC_MspInit+0x7c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d127      	bne.n	800071e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_DAC_MspInit+0x80>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_DAC_MspInit+0x80>)
 80006d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <HAL_DAC_MspInit+0x80>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_DAC_MspInit+0x80>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_DAC_MspInit+0x80>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_DAC_MspInit+0x80>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000706:	2310      	movs	r3, #16
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_DAC_MspInit+0x84>)
 800071a:	f001 fa8f 	bl	8001c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40007400 	.word	0x40007400
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000

08000734 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4b7d      	ldr	r3, [pc, #500]	; (8000944 <MX_GPIO_Init+0x210>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a7c      	ldr	r2, [pc, #496]	; (8000944 <MX_GPIO_Init+0x210>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b7a      	ldr	r3, [pc, #488]	; (8000944 <MX_GPIO_Init+0x210>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b76      	ldr	r3, [pc, #472]	; (8000944 <MX_GPIO_Init+0x210>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a75      	ldr	r2, [pc, #468]	; (8000944 <MX_GPIO_Init+0x210>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b73      	ldr	r3, [pc, #460]	; (8000944 <MX_GPIO_Init+0x210>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b6f      	ldr	r3, [pc, #444]	; (8000944 <MX_GPIO_Init+0x210>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a6e      	ldr	r2, [pc, #440]	; (8000944 <MX_GPIO_Init+0x210>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b6c      	ldr	r3, [pc, #432]	; (8000944 <MX_GPIO_Init+0x210>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b68      	ldr	r3, [pc, #416]	; (8000944 <MX_GPIO_Init+0x210>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a67      	ldr	r2, [pc, #412]	; (8000944 <MX_GPIO_Init+0x210>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b65      	ldr	r3, [pc, #404]	; (8000944 <MX_GPIO_Init+0x210>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b61      	ldr	r3, [pc, #388]	; (8000944 <MX_GPIO_Init+0x210>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a60      	ldr	r2, [pc, #384]	; (8000944 <MX_GPIO_Init+0x210>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b5e      	ldr	r3, [pc, #376]	; (8000944 <MX_GPIO_Init+0x210>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b5a      	ldr	r3, [pc, #360]	; (8000944 <MX_GPIO_Init+0x210>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a59      	ldr	r2, [pc, #356]	; (8000944 <MX_GPIO_Init+0x210>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b57      	ldr	r3, [pc, #348]	; (8000944 <MX_GPIO_Init+0x210>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4854      	ldr	r0, [pc, #336]	; (8000948 <MX_GPIO_Init+0x214>)
 80007f8:	f001 fbba 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	4852      	ldr	r0, [pc, #328]	; (800094c <MX_GPIO_Init+0x218>)
 8000802:	f001 fbb5 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000806:	2200      	movs	r2, #0
 8000808:	f24f 0110 	movw	r1, #61456	; 0xf010
 800080c:	4850      	ldr	r0, [pc, #320]	; (8000950 <MX_GPIO_Init+0x21c>)
 800080e:	f001 fbaf 	bl	8001f70 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4847      	ldr	r0, [pc, #284]	; (8000948 <MX_GPIO_Init+0x214>)
 800082a:	f001 fa07 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082e:	2301      	movs	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4841      	ldr	r0, [pc, #260]	; (800094c <MX_GPIO_Init+0x218>)
 8000846:	f001 f9f9 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085a:	2305      	movs	r3, #5
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4839      	ldr	r0, [pc, #228]	; (800094c <MX_GPIO_Init+0x218>)
 8000866:	f001 f9e9 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <MX_GPIO_Init+0x220>)
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <MX_GPIO_Init+0x224>)
 800087e:	f001 f9dd 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000882:	2304      	movs	r3, #4
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4831      	ldr	r0, [pc, #196]	; (800095c <MX_GPIO_Init+0x228>)
 8000896:	f001 f9d1 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ac:	2305      	movs	r3, #5
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4829      	ldr	r0, [pc, #164]	; (800095c <MX_GPIO_Init+0x228>)
 80008b8:	f001 f9c0 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80008bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	481e      	ldr	r0, [pc, #120]	; (8000950 <MX_GPIO_Init+0x21c>)
 80008d6:	f001 f9b1 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ec:	2306      	movs	r3, #6
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4815      	ldr	r0, [pc, #84]	; (800094c <MX_GPIO_Init+0x218>)
 80008f8:	f001 f9a0 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008fc:	2320      	movs	r3, #32
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4810      	ldr	r0, [pc, #64]	; (8000950 <MX_GPIO_Init+0x21c>)
 8000910:	f001 f994 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_GPIO_Init+0x22c>)
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_GPIO_Init+0x214>)
 8000928:	f001 f988 	bl	8001c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2103      	movs	r1, #3
 8000930:	2006      	movs	r0, #6
 8000932:	f001 f8ae 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000936:	2006      	movs	r0, #6
 8000938:	f001 f8c7 	bl	8001aca <HAL_NVIC_EnableIRQ>

}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40021000 	.word	0x40021000
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	10110000 	.word	0x10110000
 8000958:	40020000 	.word	0x40020000
 800095c:	40020400 	.word	0x40020400
 8000960:	10120000 	.word	0x10120000

08000964 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x50>)
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <MX_I2C1_Init+0x54>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_I2C1_Init+0x50>)
 8000970:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_I2C1_Init+0x58>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_I2C1_Init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_I2C1_Init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_I2C1_Init+0x50>)
 8000982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_I2C1_Init+0x50>)
 80009a2:	f003 f82d 	bl	8003a00 <HAL_I2C_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009ac:	f000 f96c 	bl	8000c88 <Error_Handler>
  }

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000011c 	.word	0x2000011c
 80009b8:	40005400 	.word	0x40005400
 80009bc:	00061a80 	.word	0x00061a80

080009c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <HAL_I2C_MspInit+0xa4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d13c      	bne.n	8000a5c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <HAL_I2C_MspInit+0xa8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_I2C_MspInit+0xa8>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_I2C_MspInit+0xa8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80009fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a04:	2312      	movs	r3, #18
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a10:	2304      	movs	r3, #4
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <HAL_I2C_MspInit+0xac>)
 8000a1c:	f001 f90e 	bl	8001c3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_I2C_MspInit+0xa8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_I2C_MspInit+0xa8>)
 8000a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_I2C_MspInit+0xa8>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	201f      	movs	r0, #31
 8000a42:	f001 f826 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a46:	201f      	movs	r0, #31
 8000a48:	f001 f83f 	bl	8001aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	2020      	movs	r0, #32
 8000a52:	f001 f81e 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a56:	2020      	movs	r0, #32
 8000a58:	f001 f837 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020400 	.word	0x40020400

08000a70 <_write>:
void SystemClock_Config(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	230a      	movs	r3, #10
 8000a82:	68b9      	ldr	r1, [r7, #8]
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <_write+0x24>)
 8000a86:	f006 fb24 	bl	80070d2 <HAL_UART_Transmit>
	return len;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000208 	.word	0x20000208

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fc27 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f887 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f7ff fe45 	bl	8000734 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aaa:	f7ff ff5b 	bl	8000964 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000aae:	f000 f8f3 	bl	8000c98 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ab2:	f009 fff1 	bl	800aa98 <MX_USB_HOST_Init>
  MX_TIM7_Init();
 8000ab6:	f000 fa91 	bl	8000fdc <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000aba:	f000 faed 	bl	8001098 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000abe:	f7ff fd57 	bl	8000570 <MX_ADC1_Init>
  MX_DAC_Init();
 8000ac2:	f7ff fdc9 	bl	8000658 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  printf("\n32F4Discovery EEPROM P/G[%s]\n", __TIMESTAMP__);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <main+0xf4>)
 8000ac8:	4831      	ldr	r0, [pc, #196]	; (8000b90 <main+0xf8>)
 8000aca:	f00a fbd7 	bl	800b27c <iprintf>
  printf("SYSCLK Frequency = %d\n", (int) HAL_RCC_GetSysClockFreq());
 8000ace:	f005 fead 	bl	800682c <HAL_RCC_GetSysClockFreq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <main+0xfc>)
 8000ad8:	f00a fbd0 	bl	800b27c <iprintf>
  printf("HCLK 	 Frequency = %d\n", (int) HAL_RCC_GetHCLKFreq());\
 8000adc:	f005 ff7e 	bl	80069dc <HAL_RCC_GetHCLKFreq>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482c      	ldr	r0, [pc, #176]	; (8000b98 <main+0x100>)
 8000ae6:	f00a fbc9 	bl	800b27c <iprintf>
  printf("PCLK 	 Frequency = %d\n", (int) HAL_RCC_GetPCLK1Freq());
 8000aea:	f005 ff83 	bl	80069f4 <HAL_RCC_GetPCLK1Freq>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4619      	mov	r1, r3
 8000af2:	482a      	ldr	r0, [pc, #168]	; (8000b9c <main+0x104>)
 8000af4:	f00a fbc2 	bl	800b27c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (AT24C_Read (&hi2c1, 0, eeprom, sizeof(eeprom)) != HAL_OK)
 8000af8:	1d3a      	adds	r2, r7, #4
 8000afa:	2320      	movs	r3, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4828      	ldr	r0, [pc, #160]	; (8000ba0 <main+0x108>)
 8000b00:	f000 fbd8 	bl	80012b4 <AT24C_Read>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <main+0x78>
  {
     printf ("AT24C_Read error\n");
 8000b0a:	4826      	ldr	r0, [pc, #152]	; (8000ba4 <main+0x10c>)
 8000b0c:	f00a fc3e 	bl	800b38c <puts>
  }

  for (i = 0; i < sizeof(eeprom); i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b16:	e00f      	b.n	8000b38 <main+0xa0>
    printf ("%02X ", eeprom[i]);
 8000b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b20:	4413      	add	r3, r2
 8000b22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b26:	4619      	mov	r1, r3
 8000b28:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <main+0x110>)
 8000b2a:	f00a fba7 	bl	800b27c <iprintf>
  for (i = 0; i < sizeof(eeprom); i++)
 8000b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b32:	3301      	adds	r3, #1
 8000b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b3c:	2b1f      	cmp	r3, #31
 8000b3e:	d9eb      	bls.n	8000b18 <main+0x80>
  printf ("\n");
 8000b40:	200a      	movs	r0, #10
 8000b42:	f00a fbb3 	bl	800b2ac <putchar>

  uint8_t val = eeprom[0] + 1;
 8000b46:	793b      	ldrb	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  memset (eeprom, val, sizeof(eeprom));
 8000b4e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2220      	movs	r2, #32
 8000b56:	4618      	mov	r0, r3
 8000b58:	f00a fae0 	bl	800b11c <memset>
  if (AT24C_Write (&hi2c1, 0, eeprom, sizeof(eeprom)) != HAL_OK)
 8000b5c:	1d3a      	adds	r2, r7, #4
 8000b5e:	2320      	movs	r3, #32
 8000b60:	2100      	movs	r1, #0
 8000b62:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <main+0x108>)
 8000b64:	f000 fb3b 	bl	80011de <AT24C_Write>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <main+0xdc>
  {
    printf ("AT24C_Write error\n");
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <main+0x114>)
 8000b70:	f00a fc0c 	bl	800b38c <puts>
  }


  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <main+0x118>)
 8000b7a:	f001 fa12 	bl	8001fa2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000b7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b82:	f000 fc27 	bl	80013d4 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b86:	f009 ffad 	bl	800aae4 <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b8a:	e7f3      	b.n	8000b74 <main+0xdc>
 8000b8c:	0800c068 	.word	0x0800c068
 8000b90:	0800c084 	.word	0x0800c084
 8000b94:	0800c0a4 	.word	0x0800c0a4
 8000b98:	0800c0bc 	.word	0x0800c0bc
 8000b9c:	0800c0d4 	.word	0x0800c0d4
 8000ba0:	2000011c 	.word	0x2000011c
 8000ba4:	0800c0ec 	.word	0x0800c0ec
 8000ba8:	0800c100 	.word	0x0800c100
 8000bac:	0800c108 	.word	0x0800c108
 8000bb0:	40020c00 	.word	0x40020c00

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00a faaa 	bl	800b11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <SystemClock_Config+0xcc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <SystemClock_Config+0xcc>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <SystemClock_Config+0xcc>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <SystemClock_Config+0xd0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c28:	23a8      	movs	r3, #168	; 0xa8
 8000c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c30:	2307      	movs	r3, #7
 8000c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 faa1 	bl	8006180 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c44:	f000 f820 	bl	8000c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2105      	movs	r1, #5
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 fcfa 	bl	8006660 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c72:	f000 f809 	bl	8000c88 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	; 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_SPI1_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cea:	f005 feab 	bl	8006a44 <HAL_SPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f7ff ffc8 	bl	8000c88 <Error_Handler>
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000170 	.word	0x20000170
 8000d00:	40013000 	.word	0x40013000

08000d04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_SPI_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12b      	bne.n	8000d7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d5e:	23e0      	movs	r3, #224	; 0xe0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d7a:	f000 ff5f 	bl	8001c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40013000 	.word	0x40013000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 faac 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f001 f8c7 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <I2C1_EV_IRQHandler+0x10>)
 8000e56:	f003 fa2b 	bl	80042b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000011c 	.word	0x2000011c

08000e64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <I2C1_ER_IRQHandler+0x10>)
 8000e6a:	f003 fb87 	bl	800457c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000011c 	.word	0x2000011c

08000e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USART2_IRQHandler+0x10>)
 8000e7e:	f006 f9c1 	bl	8007204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000208 	.word	0x20000208

08000e8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIM7_IRQHandler+0x10>)
 8000e92:	f005 fe66 	bl	8006b62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200001c8 	.word	0x200001c8

08000ea0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <OTG_FS_IRQHandler+0x10>)
 8000ea6:	f001 fb49 	bl	800253c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000624 	.word	0x20000624

08000eb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e00a      	b.n	8000edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec6:	f3af 8000 	nop.w
 8000eca:	4601      	mov	r1, r0
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf0      	blt.n	8000ec6 <_read+0x12>
	}

return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_close>:
	}
	return len;
}

int _close(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f16:	605a      	str	r2, [r3, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_isatty>:

int _isatty(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x50>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x16>
		heap_end = &end;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <_sbrk+0x50>)
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <_sbrk+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <_sbrk+0x50>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <_sbrk+0x50>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	466a      	mov	r2, sp
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d907      	bls.n	8000f92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f82:	f00a f891 	bl	800b0a8 <__errno>
 8000f86:	4602      	mov	r2, r0
 8000f88:	230c      	movs	r3, #12
 8000f8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	e006      	b.n	8000fa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <_sbrk+0x50>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <_sbrk+0x50>)
 8000f9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000ac 	.word	0x200000ac
 8000fac:	200008f0 	.word	0x200008f0

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <SystemInit+0x28>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <SystemInit+0x28>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SystemInit+0x28>)
 8000fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fca:	609a      	str	r2, [r3, #8]
#endif
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_TIM7_Init+0x64>)
 8000fec:	4a15      	ldr	r2, [pc, #84]	; (8001044 <MX_TIM7_Init+0x68>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000-1;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_TIM7_Init+0x64>)
 8000ff2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_TIM7_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8400-1;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_TIM7_Init+0x64>)
 8001000:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001004:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_TIM7_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_TIM7_Init+0x64>)
 800100e:	f005 fd7d 	bl	8006b0c <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001018:	f7ff fe36 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_TIM7_Init+0x64>)
 800102a:	f005 ff75 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001034:	f7ff fe28 	bl	8000c88 <Error_Handler>
  }

}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200001c8 	.word	0x200001c8
 8001044:	40001400 	.word	0x40001400

08001048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_TIM_Base_MspInit+0x48>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d115      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_Base_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_TIM_Base_MspInit+0x4c>)
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2102      	movs	r1, #2
 800107a:	2037      	movs	r0, #55	; 0x37
 800107c:	f000 fd09 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001080:	2037      	movs	r0, #55	; 0x37
 8001082:	f000 fd22 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40001400 	.word	0x40001400
 8001094:	40023800 	.word	0x40023800

08001098 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART2_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f005 ffb2 	bl	8007038 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f7ff fdd5 	bl	8000c88 <Error_Handler>
  }

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000208 	.word	0x20000208
 80010e8:	40004400 	.word	0x40004400

080010ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_UART_MspInit+0x94>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d133      	bne.n	8001176 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_UART_MspInit+0x98>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_UART_MspInit+0x98>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	230c      	movs	r3, #12
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_UART_MspInit+0x9c>)
 8001162:	f000 fd6b 	bl	8001c3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	2026      	movs	r0, #38	; 0x26
 800116c:	f000 fc91 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001170:	2026      	movs	r0, #38	; 0x26
 8001172:	f000 fcaa 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004400 	.word	0x40004400
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001190:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001192:	e003      	b.n	800119c <LoopCopyDataInit>

08001194 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001196:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001198:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800119a:	3104      	adds	r1, #4

0800119c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a4:	d3f6      	bcc.n	8001194 <CopyDataInit>
  ldr  r2, =_sbss
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011a8:	e002      	b.n	80011b0 <LoopFillZerobss>

080011aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011ac:	f842 3b04 	str.w	r3, [r2], #4

080011b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b4:	d3f9      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011b6:	f7ff fefb 	bl	8000fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f009 ff7b 	bl	800b0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fc6b 	bl	8000a98 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011c8:	0800c1e0 	.word	0x0800c1e0
  ldr  r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80011d4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80011d8:	200008ec 	.word	0x200008ec

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>

080011de <AT24C_Write>:

#include "at24c.h"

HAL_StatusTypeDef
AT24C_Write (I2C_HandleTypeDef * hi2c, int address, void *data, size_t length)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b08c      	sub	sp, #48	; 0x30
 80011e2:	af04      	add	r7, sp, #16
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef error;
	size_t start_address = address;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
	size_t start_i = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < length; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	e034      	b.n	8001264 <AT24C_Write+0x86>
	{
		if ((address + i + 1) % EEPROM_PAGE_SIZE == 0)
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4413      	add	r3, r2
 8001200:	3301      	adds	r3, #1
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	2b00      	cmp	r3, #0
 8001208:	d129      	bne.n	800125e <AT24C_Write+0x80>
		{
			error =
					HAL_I2C_Mem_Write (hi2c, EEPROM_ID, start_address,
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	b298      	uxth	r0, r3
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	4413      	add	r3, r2
							I2C_MEMADD_SIZE_8BIT,
							((uint8_t *) data) + start_i,
							(i + 1) - start_i, 1000);
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	b291      	uxth	r1, r2
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	b292      	uxth	r2, r2
 800121c:	1a8a      	subs	r2, r1, r2
 800121e:	b292      	uxth	r2, r2
					HAL_I2C_Mem_Write (hi2c, EEPROM_ID, start_address,
 8001220:	3201      	adds	r2, #1
 8001222:	b292      	uxth	r2, r2
			error =
 8001224:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001228:	9102      	str	r1, [sp, #8]
 800122a:	9201      	str	r2, [sp, #4]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	4602      	mov	r2, r0
 8001232:	21a0      	movs	r1, #160	; 0xa0
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f002 fd1b 	bl	8003c70 <HAL_I2C_Mem_Write>
 800123a:	4603      	mov	r3, r0
 800123c:	77fb      	strb	r3, [r7, #31]

			if(error != HAL_OK)
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <AT24C_Write+0x6a>
				return error;
 8001244:	7ffb      	ldrb	r3, [r7, #31]
 8001246:	e031      	b.n	80012ac <AT24C_Write+0xce>


			start_address = address + i + 1;
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4413      	add	r3, r2
 800124e:	3301      	adds	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
			start_i = i + 1;
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
			HAL_Delay (10);
 8001258:	200a      	movs	r0, #10
 800125a:	f000 f8bb 	bl	80013d4 <HAL_Delay>
	for (int i = 0; i < length; i++)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	3301      	adds	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8c6      	bhi.n	80011fa <AT24C_Write+0x1c>
		}
	}

	if (start_i != length)
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d01a      	beq.n	80012aa <AT24C_Write+0xcc>
	{
		error =
				HAL_I2C_Mem_Write (hi2c, EEPROM_ID, start_address,
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	b298      	uxth	r0, r3
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4413      	add	r3, r2
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	b291      	uxth	r1, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	b292      	uxth	r2, r2
 8001286:	1a8a      	subs	r2, r1, r2
 8001288:	b292      	uxth	r2, r2
		error =
 800128a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800128e:	9102      	str	r1, [sp, #8]
 8001290:	9201      	str	r2, [sp, #4]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	4602      	mov	r2, r0
 8001298:	21a0      	movs	r1, #160	; 0xa0
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f002 fce8 	bl	8003c70 <HAL_I2C_Mem_Write>
 80012a0:	4603      	mov	r3, r0
 80012a2:	77fb      	strb	r3, [r7, #31]
						I2C_MEMADD_SIZE_8BIT, ((uint8_t *) data) + start_i,
						length - start_i, 1000);
		HAL_Delay (10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f000 f895 	bl	80013d4 <HAL_Delay>
	}

	return error;
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <AT24C_Read>:

HAL_StatusTypeDef
AT24C_Read (I2C_HandleTypeDef * hi2c, int address, void *data, size_t length)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af04      	add	r7, sp, #16
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef error;

	error =HAL_I2C_Mem_Read
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	b299      	uxth	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ce:	9202      	str	r2, [sp, #8]
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	460a      	mov	r2, r1
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f002 fdc1 	bl	8003e64 <HAL_I2C_Mem_Read>
 80012e2:	4603      	mov	r3, r0
 80012e4:	75fb      	strb	r3, [r7, #23]
			(hi2c, EEPROM_ID, address, I2C_MEMADD_SIZE_8BIT, (uint8_t *) data,
					length, 1000);

	return error;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_Init+0x40>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_Init+0x40>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x40>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 fbaf 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fd36 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fbc7 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 fb8f 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000000 	.word	0x20000000
 800138c:	20000008 	.word	0x20000008
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000248 	.word	0x20000248

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000248 	.word	0x20000248

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_Delay+0x40>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e033      	b.n	8001496 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff f8ec 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800145e:	f023 0302 	bic.w	r3, r3, #2
 8001462:	f043 0202 	orr.w	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f93a 	bl	80016e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
 8001486:	e001      	b.n	800148c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1c>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e105      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x228>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d925      	bls.n	8001518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	3b1e      	subs	r3, #30
 80014e2:	2207      	movs	r2, #7
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68d9      	ldr	r1, [r3, #12]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	4603      	mov	r3, r0
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4403      	add	r3, r0
 800150a:	3b1e      	subs	r3, #30
 800150c:	409a      	lsls	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e022      	b.n	800155e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6919      	ldr	r1, [r3, #16]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	2207      	movs	r2, #7
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6919      	ldr	r1, [r3, #16]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	4603      	mov	r3, r0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4403      	add	r3, r0
 8001554:	409a      	lsls	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b06      	cmp	r3, #6
 8001564:	d824      	bhi.n	80015b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b05      	subs	r3, #5
 8001578:	221f      	movs	r2, #31
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b05      	subs	r3, #5
 80015a2:	fa00 f203 	lsl.w	r2, r0, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
 80015ae:	e04c      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d824      	bhi.n	8001602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b23      	subs	r3, #35	; 0x23
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b23      	subs	r3, #35	; 0x23
 80015f4:	fa00 f203 	lsl.w	r2, r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001600:	e023      	b.n	800164a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b41      	subs	r3, #65	; 0x41
 8001614:	221f      	movs	r2, #31
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b41      	subs	r3, #65	; 0x41
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_ADC_ConfigChannel+0x234>)
 800164c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <HAL_ADC_ConfigChannel+0x238>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d109      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1cc>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d105      	bne.n	800166c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_ADC_ConfigChannel+0x238>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d123      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b10      	cmp	r3, #16
 800167c:	d003      	beq.n	8001686 <HAL_ADC_ConfigChannel+0x1e6>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b11      	cmp	r3, #17
 8001684:	d11b      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b10      	cmp	r3, #16
 8001698:	d111      	bne.n	80016be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_ADC_ConfigChannel+0x23c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <HAL_ADC_ConfigChannel+0x240>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9a      	lsrs	r2, r3, #18
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40012300 	.word	0x40012300
 80016d8:	40012000 	.word	0x40012000
 80016dc:	20000000 	.word	0x20000000
 80016e0:	431bde83 	.word	0x431bde83

080016e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ec:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <ADC_Init+0x1f0>)
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	431a      	orrs	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	021a      	lsls	r2, r3, #8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800173c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <ADC_Init+0x1f4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d022      	beq.n	80017c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800178a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6899      	ldr	r1, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	e00f      	b.n	80017e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0202 	bic.w	r2, r2, #2
 80017f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7e1b      	ldrb	r3, [r3, #24]
 80017fc:	005a      	lsls	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800181e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800182e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6859      	ldr	r1, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	3b01      	subs	r3, #1
 800183c:	035a      	lsls	r2, r3, #13
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	e007      	b.n	8001858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	3b01      	subs	r3, #1
 8001874:	051a      	lsls	r2, r3, #20
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800188c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800189a:	025a      	lsls	r2, r3, #9
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	029a      	lsls	r2, r3, #10
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40012300 	.word	0x40012300
 80018d8:	0f000001 	.word	0x0f000001

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff29 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff3e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff31 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e014      	b.n	8001b3a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	791b      	ldrb	r3, [r3, #4]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fdc3 	bl	80006ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b087      	sub	sp, #28
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	795b      	ldrb	r3, [r3, #5]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_DAC_ConfigChannel+0x20>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e036      	b.n	8001bd0 <HAL_DAC_ConfigChannel+0x8e>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001b76:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4013      	ands	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	22c0      	movs	r2, #192	; 0xc0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d004      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00c      	b.n	8001c14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2e:	b2db      	uxtb	r3, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e16b      	b.n	8001f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f040 815a 	bne.w	8001f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d00b      	beq.n	8001c96 <HAL_GPIO_Init+0x5a>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8a:	2b11      	cmp	r3, #17
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b12      	cmp	r3, #18
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0xfc>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b12      	cmp	r3, #18
 8001d36:	d123      	bne.n	8001d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	69b9      	ldr	r1, [r7, #24]
 8001d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80b4 	beq.w	8001f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <HAL_GPIO_Init+0x308>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a5e      	ldr	r2, [pc, #376]	; (8001f44 <HAL_GPIO_Init+0x308>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <HAL_GPIO_Init+0x308>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dde:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <HAL_GPIO_Init+0x30c>)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	3302      	adds	r3, #2
 8001de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	220f      	movs	r2, #15
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <HAL_GPIO_Init+0x310>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02b      	beq.n	8001e62 <HAL_GPIO_Init+0x226>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a50      	ldr	r2, [pc, #320]	; (8001f50 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d025      	beq.n	8001e5e <HAL_GPIO_Init+0x222>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4f      	ldr	r2, [pc, #316]	; (8001f54 <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01f      	beq.n	8001e5a <HAL_GPIO_Init+0x21e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4e      	ldr	r2, [pc, #312]	; (8001f58 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d019      	beq.n	8001e56 <HAL_GPIO_Init+0x21a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4d      	ldr	r2, [pc, #308]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_GPIO_Init+0x216>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4c      	ldr	r2, [pc, #304]	; (8001f60 <HAL_GPIO_Init+0x324>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00d      	beq.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4b      	ldr	r2, [pc, #300]	; (8001f64 <HAL_GPIO_Init+0x328>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <HAL_GPIO_Init+0x20e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4a      	ldr	r2, [pc, #296]	; (8001f68 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_GPIO_Init+0x20a>
 8001e42:	2307      	movs	r3, #7
 8001e44:	e00e      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e46:	2308      	movs	r3, #8
 8001e48:	e00c      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e00a      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x228>
 8001e62:	2300      	movs	r3, #0
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e74:	4934      	ldr	r1, [pc, #208]	; (8001f48 <HAL_GPIO_Init+0x30c>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea6:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eac:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_GPIO_Init+0x330>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	f67f ae90 	bls.w	8001c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3724      	adds	r7, #36	; 0x24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40021400 	.word	0x40021400
 8001f64:	40021800 	.word	0x40021800
 8001f68:	40021c00 	.word	0x40021c00
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d104      	bne.n	8001fc6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	041a      	lsls	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f806 	bl	8002008 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800201e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002020:	b08f      	sub	sp, #60	; 0x3c
 8002022:	af0a      	add	r7, sp, #40	; 0x28
 8002024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e054      	b.n	80020da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f008 fd82 	bl	800ab54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f005 ff40 	bl	8007ef4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	687e      	ldr	r6, [r7, #4]
 800207c:	466d      	mov	r5, sp
 800207e:	f106 0410 	add.w	r4, r6, #16
 8002082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800208e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002092:	1d33      	adds	r3, r6, #4
 8002094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	f005 feba 	bl	8007e10 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f005 ff37 	bl	8007f16 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	687e      	ldr	r6, [r7, #4]
 80020b0:	466d      	mov	r5, sp
 80020b2:	f106 0410 	add.w	r4, r6, #16
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c6:	1d33      	adds	r3, r6, #4
 80020c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	f006 f84a 	bl	8008164 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020e2:	b590      	push	{r4, r7, lr}
 80020e4:	b089      	sub	sp, #36	; 0x24
 80020e6:	af04      	add	r7, sp, #16
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	4608      	mov	r0, r1
 80020ec:	4611      	mov	r1, r2
 80020ee:	461a      	mov	r2, r3
 80020f0:	4603      	mov	r3, r0
 80020f2:	70fb      	strb	r3, [r7, #3]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70bb      	strb	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_HCD_HC_Init+0x28>
 8002106:	2302      	movs	r3, #2
 8002108:	e07f      	b.n	800220a <HAL_HCD_HC_Init+0x128>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	333d      	adds	r3, #61	; 0x3d
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	3338      	adds	r3, #56	; 0x38
 8002136:	787a      	ldrb	r2, [r7, #1]
 8002138:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	3340      	adds	r3, #64	; 0x40
 800214a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800214c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	3339      	adds	r3, #57	; 0x39
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	333f      	adds	r3, #63	; 0x3f
 8002172:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	78bb      	ldrb	r3, [r7, #2]
 800217c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002180:	b2d8      	uxtb	r0, r3
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	333a      	adds	r3, #58	; 0x3a
 8002190:	4602      	mov	r2, r0
 8002192:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002194:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da0a      	bge.n	80021b2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	333b      	adds	r3, #59	; 0x3b
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e009      	b.n	80021c6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	333b      	adds	r3, #59	; 0x3b
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	333c      	adds	r3, #60	; 0x3c
 80021d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021da:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	787c      	ldrb	r4, [r7, #1]
 80021e2:	78ba      	ldrb	r2, [r7, #2]
 80021e4:	78f9      	ldrb	r1, [r7, #3]
 80021e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4623      	mov	r3, r4
 80021f8:	f006 f936 	bl	8008468 <USB_HC_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}

08002212 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_HCD_HC_Halt+0x1e>
 800222c:	2302      	movs	r3, #2
 800222e:	e00f      	b.n	8002250 <HAL_HCD_HC_Halt+0x3e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f006 fb70 	bl	8008926 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	70fb      	strb	r3, [r7, #3]
 800226a:	460b      	mov	r3, r1
 800226c:	70bb      	strb	r3, [r7, #2]
 800226e:	4613      	mov	r3, r2
 8002270:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	333b      	adds	r3, #59	; 0x3b
 8002282:	78ba      	ldrb	r2, [r7, #2]
 8002284:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	333f      	adds	r3, #63	; 0x3f
 8002296:	787a      	ldrb	r2, [r7, #1]
 8002298:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800229a:	7c3b      	ldrb	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d114      	bne.n	80022ca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3342      	adds	r3, #66	; 0x42
 80022b0:	2203      	movs	r2, #3
 80022b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	333d      	adds	r3, #61	; 0x3d
 80022c4:	7f3a      	ldrb	r2, [r7, #28]
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e009      	b.n	80022de <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3342      	adds	r3, #66	; 0x42
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022de:	787b      	ldrb	r3, [r7, #1]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	f200 80d6 	bhi.w	8002492 <HAL_HCD_HC_SubmitRequest+0x23a>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <HAL_HCD_HC_SubmitRequest+0x94>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	0800247d 	.word	0x0800247d
 80022f4:	08002369 	.word	0x08002369
 80022f8:	080023f3 	.word	0x080023f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022fc:	7c3b      	ldrb	r3, [r7, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	f040 80c9 	bne.w	8002496 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002304:	78bb      	ldrb	r3, [r7, #2]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 80c5 	bne.w	8002496 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800230c:	8b3b      	ldrh	r3, [r7, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	3351      	adds	r3, #81	; 0x51
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3351      	adds	r3, #81	; 0x51
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	3342      	adds	r3, #66	; 0x42
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002350:	e0a1      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3342      	adds	r3, #66	; 0x42
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
      break;
 8002366:	e096      	b.n	8002496 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002368:	78bb      	ldrb	r3, [r7, #2]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d120      	bne.n	80023b0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	3351      	adds	r3, #81	; 0x51
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	3342      	adds	r3, #66	; 0x42
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002398:	e07e      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	3342      	adds	r3, #66	; 0x42
 80023aa:	2202      	movs	r2, #2
 80023ac:	701a      	strb	r2, [r3, #0]
      break;
 80023ae:	e073      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3350      	adds	r3, #80	; 0x50
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	3342      	adds	r3, #66	; 0x42
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
      break;
 80023da:	e05d      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3342      	adds	r3, #66	; 0x42
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
      break;
 80023f0:	e052      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d120      	bne.n	800243a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3351      	adds	r3, #81	; 0x51
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	3342      	adds	r3, #66	; 0x42
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002422:	e039      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	3342      	adds	r3, #66	; 0x42
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
      break;
 8002438:	e02e      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3350      	adds	r3, #80	; 0x50
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3342      	adds	r3, #66	; 0x42
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
      break;
 8002464:	e018      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	3342      	adds	r3, #66	; 0x42
 8002476:	2202      	movs	r2, #2
 8002478:	701a      	strb	r2, [r3, #0]
      break;
 800247a:	e00d      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	3342      	adds	r3, #66	; 0x42
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
      break;
 8002490:	e002      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002496:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	3344      	adds	r3, #68	; 0x44
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	8b39      	ldrh	r1, [r7, #24]
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4403      	add	r3, r0
 80024bc:	3348      	adds	r3, #72	; 0x48
 80024be:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	335c      	adds	r3, #92	; 0x5c
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	334c      	adds	r3, #76	; 0x4c
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3339      	adds	r3, #57	; 0x39
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	335d      	adds	r3, #93	; 0x5d
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	3338      	adds	r3, #56	; 0x38
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	18d1      	adds	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	f006 f8a6 	bl	800867c <USB_HC_StartXfer>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop

0800253c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f005 fdc3 	bl	80080de <USB_GetMode>
 8002558:	4603      	mov	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	f040 80ef 	bne.w	800273e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f005 fda7 	bl	80080b8 <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80e5 	beq.w	800273c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f005 fd9e 	bl	80080b8 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002586:	d104      	bne.n	8002592 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002590:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f005 fd8e 	bl	80080b8 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a6:	d104      	bne.n	80025b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f005 fd7e 	bl	80080b8 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c6:	d104      	bne.n	80025d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 fd6e 	bl	80080b8 <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d103      	bne.n	80025ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2202      	movs	r2, #2
 80025ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fd60 	bl	80080b8 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002602:	d115      	bne.n	8002630 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800260c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d108      	bne.n	8002630 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f008 fb16 	bl	800ac50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	4618      	mov	r0, r3
 800262c:	f005 fe56 	bl	80082dc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f005 fd3f 	bl	80080b8 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002644:	d102      	bne.n	800264c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f001 f966 	bl	8003918 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f005 fd31 	bl	80080b8 <USB_ReadInterrupts>
 8002656:	4603      	mov	r3, r0
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b08      	cmp	r3, #8
 800265e:	d106      	bne.n	800266e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f008 fad9 	bl	800ac18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2208      	movs	r2, #8
 800266c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f005 fd20 	bl	80080b8 <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002682:	d138      	bne.n	80026f6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f006 f93b 	bl	8008904 <USB_HC_ReadInterrupt>
 800268e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e025      	b.n	80026e2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d018      	beq.n	80026dc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c0:	d106      	bne.n	80026d0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f8cf 	bl	800286c <HCD_HC_IN_IRQHandler>
 80026ce:	e005      	b.n	80026dc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fcfd 	bl	80030d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3d4      	bcc.n	8002696 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fcdc 	bl	80080b8 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b10      	cmp	r3, #16
 8002708:	d101      	bne.n	800270e <HAL_HCD_IRQHandler+0x1d2>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_HCD_IRQHandler+0x1d4>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d014      	beq.n	800273e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0210 	bic.w	r2, r2, #16
 8002722:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f001 f84b 	bl	80037c0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0210 	orr.w	r2, r2, #16
 8002738:	619a      	str	r2, [r3, #24]
 800273a:	e000      	b.n	800273e <HAL_HCD_IRQHandler+0x202>
      return;
 800273c:	bf00      	nop
    }
  }
}
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_HCD_Start+0x16>
 8002756:	2302      	movs	r3, #2
 8002758:	e013      	b.n	8002782 <HAL_HCD_Start+0x3e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f005 fbb3 	bl	8007ed2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fe16 	bl	80083a4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_HCD_Stop+0x16>
 800279c:	2302      	movs	r3, #2
 800279e:	e00d      	b.n	80027bc <HAL_HCD_Stop+0x32>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f006 f9f5 	bl	8008b9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f005 fdbd 	bl	8008350 <USB_ResetPort>
 80027d6:	4603      	mov	r3, r0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	335c      	adds	r3, #92	; 0x5c
 80027fc:	781b      	ldrb	r3, [r3, #0]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	334c      	adds	r3, #76	; 0x4c
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f005 fdff 	bl	8008444 <USB_GetCurrentFrame>
 8002846:	4603      	mov	r3, r0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f005 fdda 	bl	8008416 <USB_GetHostSpeed>
 8002862:	4603      	mov	r3, r0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d119      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2304      	movs	r3, #4
 80028ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	0151      	lsls	r1, r2, #5
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	440a      	add	r2, r1
 80028c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	60d3      	str	r3, [r2, #12]
 80028ce:	e0ce      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e6:	d12c      	bne.n	8002942 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	335d      	adds	r3, #93	; 0x5d
 800290c:	2207      	movs	r2, #7
 800290e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	0151      	lsls	r1, r2, #5
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	440a      	add	r2, r1
 8002926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f005 fff3 	bl	8008926 <USB_HC_Halt>
 8002940:	e095      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d109      	bne.n	800296c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	2320      	movs	r3, #32
 8002968:	6093      	str	r3, [r2, #8]
 800296a:	e080      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b08      	cmp	r3, #8
 8002980:	d134      	bne.n	80029ec <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	0151      	lsls	r1, r2, #5
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	440a      	add	r2, r1
 8002998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	335d      	adds	r3, #93	; 0x5d
 80029b2:	2205      	movs	r2, #5
 80029b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2310      	movs	r3, #16
 80029c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2308      	movs	r3, #8
 80029d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 ff9e 	bl	8008926 <USB_HC_Halt>
 80029ea:	e040      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d134      	bne.n	8002a6e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f005 ff79 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	2310      	movs	r3, #16
 8002a44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	335d      	adds	r3, #93	; 0x5d
 8002a56:	2208      	movs	r2, #8
 8002a58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a84:	d122      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	0151      	lsls	r1, r2, #5
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	440a      	add	r2, r1
 8002a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa0:	f043 0302 	orr.w	r3, r3, #2
 8002aa4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f005 ff38 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002aca:	e300      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	f040 80fd 	bne.w	8002cde <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3348      	adds	r3, #72	; 0x48
 8002afc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0159      	lsls	r1, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	440b      	add	r3, r1
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b10:	1ad1      	subs	r1, r2, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4403      	add	r3, r0
 8002b20:	334c      	adds	r3, #76	; 0x4c
 8002b22:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	335d      	adds	r3, #93	; 0x5d
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	3358      	adds	r3, #88	; 0x58
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	333f      	adds	r3, #63	; 0x3f
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	333f      	adds	r3, #63	; 0x3f
 8002b84:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d121      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	0151      	lsls	r1, r2, #5
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f005 feb6 	bl	8008926 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2310      	movs	r3, #16
 8002bca:	6093      	str	r3, [r2, #8]
 8002bcc:	e070      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	333f      	adds	r3, #63	; 0x3f
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d12a      	bne.n	8002c3a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	0151      	lsls	r1, r2, #5
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	440a      	add	r2, r1
 8002bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c02:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	335c      	adds	r3, #92	; 0x5c
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4601      	mov	r1, r0
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f008 f81a 	bl	800ac6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c38:	e03a      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	333f      	adds	r3, #63	; 0x3f
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d12f      	bne.n	8002cb0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	3350      	adds	r3, #80	; 0x50
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2d8      	uxtb	r0, r3
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	3350      	adds	r3, #80	; 0x50
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	b2d8      	uxtb	r0, r3
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	335c      	adds	r3, #92	; 0x5c
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4601      	mov	r1, r0
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f007 ffde 	bl	800ac6c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3350      	adds	r3, #80	; 0x50
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f083 0301 	eor.w	r3, r3, #1
 8002cc6:	b2d8      	uxtb	r0, r3
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3350      	adds	r3, #80	; 0x50
 8002cd8:	4602      	mov	r2, r0
 8002cda:	701a      	strb	r2, [r3, #0]
}
 8002cdc:	e1f7      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f040 811a 	bne.w	8002f2a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	0151      	lsls	r1, r2, #5
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	440a      	add	r2, r1
 8002d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d10:	f023 0302 	bic.w	r3, r3, #2
 8002d14:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	335d      	adds	r3, #93	; 0x5d
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10a      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	335c      	adds	r3, #92	; 0x5c
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e0d9      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	335d      	adds	r3, #93	; 0x5d
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d10a      	bne.n	8002d6e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	335c      	adds	r3, #92	; 0x5c
 8002d68:	2205      	movs	r2, #5
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e0c3      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	335d      	adds	r3, #93	; 0x5d
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d00a      	beq.n	8002d9a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	335d      	adds	r3, #93	; 0x5d
 8002d94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d156      	bne.n	8002e48 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	3358      	adds	r3, #88	; 0x58
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	1c59      	adds	r1, r3, #1
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4403      	add	r3, r0
 8002dbc:	3358      	adds	r3, #88	; 0x58
 8002dbe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	3358      	adds	r3, #88	; 0x58
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d914      	bls.n	8002e00 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	3358      	adds	r3, #88	; 0x58
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	335c      	adds	r3, #92	; 0x5c
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e009      	b.n	8002e14 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	335c      	adds	r3, #92	; 0x5c
 8002e10:	2202      	movs	r2, #2
 8002e12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e056      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	335d      	adds	r3, #93	; 0x5d
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d123      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	335c      	adds	r3, #92	; 0x5c
 8002e6e:	2202      	movs	r2, #2
 8002e70:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e88:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e90:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	e027      	b.n	8002ef6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	335d      	adds	r3, #93	; 0x5d
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d11c      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	3358      	adds	r3, #88	; 0x58
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4403      	add	r3, r0
 8002ede:	3358      	adds	r3, #88	; 0x58
 8002ee0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	335c      	adds	r3, #92	; 0x5c
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	2302      	movs	r3, #2
 8002f06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	b2d8      	uxtb	r0, r3
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	335c      	adds	r3, #92	; 0x5c
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4601      	mov	r1, r0
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f007 fea2 	bl	800ac6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f28:	e0d1      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d13e      	bne.n	8002fbe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	0151      	lsls	r1, r2, #5
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	440a      	add	r2, r1
 8002f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3358      	adds	r3, #88	; 0x58
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	1c59      	adds	r1, r3, #1
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4403      	add	r3, r0
 8002f82:	3358      	adds	r3, #88	; 0x58
 8002f84:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	335d      	adds	r3, #93	; 0x5d
 8002f96:	2206      	movs	r2, #6
 8002f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f005 fcbe 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	6093      	str	r3, [r2, #8]
}
 8002fbc:	e087      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d17c      	bne.n	80030ce <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	333f      	adds	r3, #63	; 0x3f
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d122      	bne.n	8003030 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3358      	adds	r3, #88	; 0x58
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	0151      	lsls	r1, r2, #5
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	440a      	add	r2, r1
 8003014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f005 fc7c 	bl	8008926 <USB_HC_Halt>
 800302e:	e045      	b.n	80030bc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	333f      	adds	r3, #63	; 0x3f
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	333f      	adds	r3, #63	; 0x3f
 8003056:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003058:	2b02      	cmp	r3, #2
 800305a:	d12f      	bne.n	80030bc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	440b      	add	r3, r1
 800306a:	3358      	adds	r3, #88	; 0x58
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d121      	bne.n	80030bc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	335d      	adds	r3, #93	; 0x5d
 8003088:	2203      	movs	r2, #3
 800308a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	0151      	lsls	r1, r2, #5
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	440a      	add	r2, r1
 80030a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f005 fc35 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	461a      	mov	r2, r3
 80030ca:	2310      	movs	r3, #16
 80030cc:	6093      	str	r3, [r2, #8]
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d119      	bne.n	800313a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	2304      	movs	r3, #4
 8003116:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	0151      	lsls	r1, r2, #5
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	440a      	add	r2, r1
 800312e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003138:	e33e      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d141      	bne.n	80031d4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	2320      	movs	r3, #32
 8003160:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	333d      	adds	r3, #61	; 0x3d
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	f040 831f 	bne.w	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	333d      	adds	r3, #61	; 0x3d
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	335c      	adds	r3, #92	; 0x5c
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	0151      	lsls	r1, r2, #5
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	440a      	add	r2, r1
 80031b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f005 fbaa 	bl	8008926 <USB_HC_Halt>
}
 80031d2:	e2f1      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d13f      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	335d      	adds	r3, #93	; 0x5d
 80031fa:	2204      	movs	r2, #4
 80031fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	333d      	adds	r3, #61	; 0x3d
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	3358      	adds	r3, #88	; 0x58
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f005 fb68 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	2340      	movs	r3, #64	; 0x40
 8003266:	6093      	str	r3, [r2, #8]
}
 8003268:	e2a6      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003280:	d122      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	0151      	lsls	r1, r2, #5
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	440a      	add	r2, r1
 8003298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f005 fb3a 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	461a      	mov	r2, r3
 80032c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c4:	6093      	str	r3, [r2, #8]
}
 80032c6:	e277      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d135      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	3358      	adds	r3, #88	; 0x58
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	0151      	lsls	r1, r2, #5
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	440a      	add	r2, r1
 8003308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f005 fb02 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	461a      	mov	r2, r3
 8003330:	2301      	movs	r3, #1
 8003332:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	335d      	adds	r3, #93	; 0x5d
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
}
 8003348:	e236      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b08      	cmp	r3, #8
 800335e:	d12b      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2308      	movs	r3, #8
 8003370:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	0151      	lsls	r1, r2, #5
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	440a      	add	r2, r1
 8003388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f005 fac2 	bl	8008926 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	335d      	adds	r3, #93	; 0x5d
 80033b2:	2205      	movs	r2, #5
 80033b4:	701a      	strb	r2, [r3, #0]
}
 80033b6:	e1ff      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d155      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	3358      	adds	r3, #88	; 0x58
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	335d      	adds	r3, #93	; 0x5d
 80033f2:	2203      	movs	r2, #3
 80033f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	333d      	adds	r3, #61	; 0x3d
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d114      	bne.n	8003436 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	333c      	adds	r3, #60	; 0x3c
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	440b      	add	r3, r1
 8003430:	333d      	adds	r3, #61	; 0x3d
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	0151      	lsls	r1, r2, #5
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	440a      	add	r2, r1
 800344c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f005 fa60 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	2310      	movs	r3, #16
 8003476:	6093      	str	r3, [r2, #8]
}
 8003478:	e19e      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348c:	2b80      	cmp	r3, #128	; 0x80
 800348e:	d12b      	bne.n	80034e8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	0151      	lsls	r1, r2, #5
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	440a      	add	r2, r1
 80034a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f005 fa33 	bl	8008926 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335d      	adds	r3, #93	; 0x5d
 80034d0:	2206      	movs	r2, #6
 80034d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	461a      	mov	r2, r3
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	6093      	str	r3, [r2, #8]
}
 80034e6:	e167      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d135      	bne.n	800356c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	0151      	lsls	r1, r2, #5
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	440a      	add	r2, r1
 8003516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800351a:	f043 0302 	orr.w	r3, r3, #2
 800351e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f005 f9fb 	bl	8008926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	461a      	mov	r2, r3
 800353e:	2310      	movs	r3, #16
 8003540:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	461a      	mov	r2, r3
 8003550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003554:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	335d      	adds	r3, #93	; 0x5d
 8003566:	2208      	movs	r2, #8
 8003568:	701a      	strb	r2, [r3, #0]
}
 800356a:	e125      	b.n	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	f040 811a 	bne.w	80037b8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	0151      	lsls	r1, r2, #5
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	440a      	add	r2, r1
 800359a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359e:	f023 0302 	bic.w	r3, r3, #2
 80035a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	335d      	adds	r3, #93	; 0x5d
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d137      	bne.n	800362a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	440b      	add	r3, r1
 80035c8:	335c      	adds	r3, #92	; 0x5c
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	333f      	adds	r3, #63	; 0x3f
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d00b      	beq.n	80035fc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	333f      	adds	r3, #63	; 0x3f
 80035f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	f040 80c5 	bne.w	8003786 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	3351      	adds	r3, #81	; 0x51
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2d8      	uxtb	r0, r3
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	3351      	adds	r3, #81	; 0x51
 8003624:	4602      	mov	r2, r0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e0ad      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	440b      	add	r3, r1
 8003638:	335d      	adds	r3, #93	; 0x5d
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d10a      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	335c      	adds	r3, #92	; 0x5c
 8003650:	2202      	movs	r2, #2
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e097      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	440b      	add	r3, r1
 8003664:	335d      	adds	r3, #93	; 0x5d
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d10a      	bne.n	8003682 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	335c      	adds	r3, #92	; 0x5c
 800367c:	2202      	movs	r2, #2
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e081      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	335d      	adds	r3, #93	; 0x5d
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10a      	bne.n	80036ae <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	335c      	adds	r3, #92	; 0x5c
 80036a8:	2205      	movs	r2, #5
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e06b      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	335d      	adds	r3, #93	; 0x5d
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d00a      	beq.n	80036da <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	335d      	adds	r3, #93	; 0x5d
 80036d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d155      	bne.n	8003786 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	3358      	adds	r3, #88	; 0x58
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4403      	add	r3, r0
 80036fc:	3358      	adds	r3, #88	; 0x58
 80036fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	3358      	adds	r3, #88	; 0x58
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d914      	bls.n	8003740 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	3358      	adds	r3, #88	; 0x58
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	335c      	adds	r3, #92	; 0x5c
 800373a:	2204      	movs	r2, #4
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e009      	b.n	8003754 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	2202      	movs	r2, #2
 8003752:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800376a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003772:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	461a      	mov	r2, r3
 8003794:	2302      	movs	r3, #2
 8003796:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	b2d8      	uxtb	r0, r3
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	335c      	adds	r3, #92	; 0x5c
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	4601      	mov	r1, r0
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f007 fa5a 	bl	800ac6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	0c5b      	lsrs	r3, r3, #17
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d003      	beq.n	8003804 <HCD_RXQLVL_IRQHandler+0x44>
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	f000 8082 	beq.w	8003906 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003802:	e083      	b.n	800390c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d07f      	beq.n	800390a <HCD_RXQLVL_IRQHandler+0x14a>
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	3344      	adds	r3, #68	; 0x44
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d074      	beq.n	800390a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	3344      	adds	r3, #68	; 0x44
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	b292      	uxth	r2, r2
 800383a:	4619      	mov	r1, r3
 800383c:	f004 fc13 	bl	8008066 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	3344      	adds	r3, #68	; 0x44
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	18d1      	adds	r1, r2, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4403      	add	r3, r0
 8003864:	3344      	adds	r3, #68	; 0x44
 8003866:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	334c      	adds	r3, #76	; 0x4c
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	18d1      	adds	r1, r2, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4403      	add	r3, r0
 800388c:	334c      	adds	r3, #76	; 0x4c
 800388e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HCD_RXQLVL_IRQHandler+0x154>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d031      	beq.n	800390a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	440b      	add	r3, r1
 80038e6:	3350      	adds	r3, #80	; 0x50
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f083 0301 	eor.w	r3, r3, #1
 80038ee:	b2d8      	uxtb	r0, r3
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	440b      	add	r3, r1
 80038fe:	3350      	adds	r3, #80	; 0x50
 8003900:	4602      	mov	r2, r0
 8003902:	701a      	strb	r2, [r3, #0]
      break;
 8003904:	e001      	b.n	800390a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800390a:	bf00      	nop
  }
}
 800390c:	bf00      	nop
 800390e:	3728      	adds	r7, #40	; 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	1ff80000 	.word	0x1ff80000

08003918 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003944:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b02      	cmp	r3, #2
 800394e:	d10b      	bne.n	8003968 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f007 f96a 	bl	800ac34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b08      	cmp	r3, #8
 8003970:	d132      	bne.n	80039d8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d126      	bne.n	80039d2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d113      	bne.n	80039b4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003996:	d106      	bne.n	80039a6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2102      	movs	r1, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 fc9c 	bl	80082dc <USB_InitFSLSPClkSel>
 80039a4:	e011      	b.n	80039ca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	4618      	mov	r0, r3
 80039ae:	f004 fc95 	bl	80082dc <USB_InitFSLSPClkSel>
 80039b2:	e00a      	b.n	80039ca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039c2:	461a      	mov	r2, r3
 80039c4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039c8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f007 f95c 	bl	800ac88 <HAL_HCD_PortEnabled_Callback>
 80039d0:	e002      	b.n	80039d8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f007 f966 	bl	800aca4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d103      	bne.n	80039ea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f043 0320 	orr.w	r3, r3, #32
 80039e8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6013      	str	r3, [r2, #0]
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e11f      	b.n	8003c52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fc ffca 	bl	80009c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2224      	movs	r2, #36	; 0x24
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a64:	f002 ffc6 	bl	80069f4 <HAL_RCC_GetPCLK1Freq>
 8003a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4a7b      	ldr	r2, [pc, #492]	; (8003c5c <HAL_I2C_Init+0x25c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d807      	bhi.n	8003a84 <HAL_I2C_Init+0x84>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a7a      	ldr	r2, [pc, #488]	; (8003c60 <HAL_I2C_Init+0x260>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	bf94      	ite	ls
 8003a7c:	2301      	movls	r3, #1
 8003a7e:	2300      	movhi	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e006      	b.n	8003a92 <HAL_I2C_Init+0x92>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a77      	ldr	r2, [pc, #476]	; (8003c64 <HAL_I2C_Init+0x264>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0db      	b.n	8003c52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_I2C_Init+0x268>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0c9b      	lsrs	r3, r3, #18
 8003aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a64      	ldr	r2, [pc, #400]	; (8003c5c <HAL_I2C_Init+0x25c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d802      	bhi.n	8003ad4 <HAL_I2C_Init+0xd4>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	e009      	b.n	8003ae8 <HAL_I2C_Init+0xe8>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	4a63      	ldr	r2, [pc, #396]	; (8003c6c <HAL_I2C_Init+0x26c>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4956      	ldr	r1, [pc, #344]	; (8003c5c <HAL_I2C_Init+0x25c>)
 8003b04:	428b      	cmp	r3, r1
 8003b06:	d80d      	bhi.n	8003b24 <HAL_I2C_Init+0x124>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1e59      	subs	r1, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	bf38      	it	cc
 8003b20:	2304      	movcc	r3, #4
 8003b22:	e04f      	b.n	8003bc4 <HAL_I2C_Init+0x1c4>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d111      	bne.n	8003b50 <HAL_I2C_Init+0x150>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e58      	subs	r0, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e012      	b.n	8003b76 <HAL_I2C_Init+0x176>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	0099      	lsls	r1, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Init+0x17e>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e022      	b.n	8003bc4 <HAL_I2C_Init+0x1c4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10e      	bne.n	8003ba4 <HAL_I2C_Init+0x1a4>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1e58      	subs	r0, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	440b      	add	r3, r1
 8003b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba2:	e00f      	b.n	8003bc4 <HAL_I2C_Init+0x1c4>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	0099      	lsls	r1, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	6809      	ldr	r1, [r1, #0]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6911      	ldr	r1, [r2, #16]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	000186a0 	.word	0x000186a0
 8003c60:	001e847f 	.word	0x001e847f
 8003c64:	003d08ff 	.word	0x003d08ff
 8003c68:	431bde83 	.word	0x431bde83
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	817b      	strh	r3, [r7, #10]
 8003c82:	460b      	mov	r3, r1
 8003c84:	813b      	strh	r3, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7fd fb97 	bl	80013bc <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	f040 80d9 	bne.w	8003e50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2319      	movs	r3, #25
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	496d      	ldr	r1, [pc, #436]	; (8003e5c <HAL_I2C_Mem_Write+0x1ec>)
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f002 f870 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0cc      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0x56>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0c5      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d007      	beq.n	8003cec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2221      	movs	r2, #33	; 0x21
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2240      	movs	r2, #64	; 0x40
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <HAL_I2C_Mem_Write+0x1f0>)
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d2e:	88f8      	ldrh	r0, [r7, #6]
 8003d30:	893a      	ldrh	r2, [r7, #8]
 8003d32:	8979      	ldrh	r1, [r7, #10]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f001 fe2c 	bl	800599c <I2C_RequestMemoryWrite>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d052      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e081      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f002 f8f1 	bl	8005f3a <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e06b      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11b      	bne.n	8003df0 <HAL_I2C_Mem_Write+0x180>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1aa      	bne.n	8003d4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f002 f8dd 	bl	8005fbc <I2C_WaitOnBTFFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d107      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e016      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	00100002 	.word	0x00100002
 8003e60:	ffff0000 	.word	0xffff0000

08003e64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	; 0x30
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	460b      	mov	r3, r1
 8003e78:	813b      	strh	r3, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e7e:	f7fd fa9d 	bl	80013bc <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	f040 8208 	bne.w	80042a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2319      	movs	r3, #25
 8003e98:	2201      	movs	r2, #1
 8003e9a:	497b      	ldr	r1, [pc, #492]	; (8004088 <HAL_I2C_Mem_Read+0x224>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f001 ff76 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e1fb      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Mem_Read+0x56>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e1f4      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d007      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2222      	movs	r2, #34	; 0x22
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	; (800408c <HAL_I2C_Mem_Read+0x228>)
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f22:	88f8      	ldrh	r0, [r7, #6]
 8003f24:	893a      	ldrh	r2, [r7, #8]
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4603      	mov	r3, r0
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f001 fdc6 	bl	8005ac4 <I2C_RequestMemoryRead>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e1b0      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d113      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	623b      	str	r3, [r7, #32]
 8003f5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e184      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d11b      	bne.n	8003fb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e164      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d11b      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	e144      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004008:	e138      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400e:	2b03      	cmp	r3, #3
 8004010:	f200 80f1 	bhi.w	80041f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	2b01      	cmp	r3, #1
 800401a:	d123      	bne.n	8004064 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f002 f80c 	bl	800603e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e139      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004062:	e10b      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	2b02      	cmp	r3, #2
 800406a:	d14e      	bne.n	800410a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2200      	movs	r2, #0
 8004074:	4906      	ldr	r1, [pc, #24]	; (8004090 <HAL_I2C_Mem_Read+0x22c>)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f001 fe89 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e10e      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
 8004086:	bf00      	nop
 8004088:	00100002 	.word	0x00100002
 800408c:	ffff0000 	.word	0xffff0000
 8004090:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004108:	e0b8      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2200      	movs	r2, #0
 8004112:	4966      	ldr	r1, [pc, #408]	; (80042ac <HAL_I2C_Mem_Read+0x448>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f001 fe3a 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0bf      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2200      	movs	r2, #0
 800416e:	494f      	ldr	r1, [pc, #316]	; (80042ac <HAL_I2C_Mem_Read+0x448>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f001 fe0c 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e091      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041f4:	e042      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f001 ff1f 	bl	800603e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e04c      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d118      	bne.n	800427c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	f47f aec2 	bne.w	800400a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	00010004 	.word	0x00010004

080042b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d003      	beq.n	80042e8 <HAL_I2C_EV_IRQHandler+0x38>
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	f040 80b6 	bne.w	8004454 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10d      	bne.n	800431e <HAL_I2C_EV_IRQHandler+0x6e>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004308:	d003      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x62>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004310:	d101      	bne.n	8004316 <HAL_I2C_EV_IRQHandler+0x66>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x68>
 8004316:	2300      	movs	r3, #0
 8004318:	2b01      	cmp	r3, #1
 800431a:	f000 8127 	beq.w	800456c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x92>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	0a5b      	lsrs	r3, r3, #9
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 ff07 	bl	8006148 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fd1c 	bl	8004d78 <I2C_Master_SB>
 8004340:	e087      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	08db      	lsrs	r3, r3, #3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0xb2>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	0a5b      	lsrs	r3, r3, #9
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fd92 	bl	8004e84 <I2C_Master_ADD10>
 8004360:	e077      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_I2C_EV_IRQHandler+0xd2>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	0a5b      	lsrs	r3, r3, #9
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fdac 	bl	8004ed8 <I2C_Master_ADDR>
 8004380:	e067      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d030      	beq.n	80043f0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439c:	f000 80e8 	beq.w	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	09db      	lsrs	r3, r3, #7
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00f      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x11c>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	0a9b      	lsrs	r3, r3, #10
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <HAL_I2C_EV_IRQHandler+0x11c>
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f9e8 	bl	800479a <I2C_MasterTransmit_TXE>
 80043ca:	e042      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80cb 	beq.w	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	0a5b      	lsrs	r3, r3, #9
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80c4 	beq.w	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fa72 	bl	80048d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ee:	e0bf      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fe:	f000 80b7 	beq.w	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00f      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x17e>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	0a9b      	lsrs	r3, r3, #10
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x17e>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fb3a 	bl	8004aa0 <I2C_MasterReceive_RXNE>
 800442c:	e011      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 809a 	beq.w	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	0a5b      	lsrs	r3, r3, #9
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8093 	beq.w	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fbaa 	bl	8004ba4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004450:	e08e      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004452:	e08d      	b.n	8004570 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	e007      	b.n	8004476 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d012      	beq.n	80044a8 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	0a5b      	lsrs	r3, r3, #9
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 ff68 	bl	8005376 <I2C_Slave_ADDR>
 80044a6:	e066      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_I2C_EV_IRQHandler+0x218>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	0a5b      	lsrs	r3, r3, #9
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 ff9d 	bl	8005400 <I2C_Slave_STOPF>
 80044c6:	e056      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044c8:	7bbb      	ldrb	r3, [r7, #14]
 80044ca:	2b21      	cmp	r3, #33	; 0x21
 80044cc:	d002      	beq.n	80044d4 <HAL_I2C_EV_IRQHandler+0x224>
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	2b29      	cmp	r3, #41	; 0x29
 80044d2:	d125      	bne.n	8004520 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	09db      	lsrs	r3, r3, #7
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00f      	beq.n	8004500 <HAL_I2C_EV_IRQHandler+0x250>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	0a9b      	lsrs	r3, r3, #10
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_I2C_EV_IRQHandler+0x250>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fe7e 	bl	80051fa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044fe:	e039      	b.n	8004574 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d033      	beq.n	8004574 <HAL_I2C_EV_IRQHandler+0x2c4>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	0a5b      	lsrs	r3, r3, #9
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02d      	beq.n	8004574 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 feab 	bl	8005274 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800451e:	e029      	b.n	8004574 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	099b      	lsrs	r3, r3, #6
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00f      	beq.n	800454c <HAL_I2C_EV_IRQHandler+0x29c>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_I2C_EV_IRQHandler+0x29c>
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 feb6 	bl	80052b6 <I2C_SlaveReceive_RXNE>
 800454a:	e014      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	0a5b      	lsrs	r3, r3, #9
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fee4 	bl	8005332 <I2C_SlaveReceive_BTF>
 800456a:	e004      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800456c:	bf00      	nop
 800456e:	e002      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004574:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004594:	2300      	movs	r3, #0
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <HAL_I2C_ER_IRQHandler+0x4e>
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045c8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	0a5b      	lsrs	r3, r3, #9
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <HAL_I2C_ER_IRQHandler+0x78>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80045f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d03f      	beq.n	8004680 <HAL_I2C_ER_IRQHandler+0x104>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d039      	beq.n	8004680 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800460c:	7efb      	ldrb	r3, [r7, #27]
 800460e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004626:	7ebb      	ldrb	r3, [r7, #26]
 8004628:	2b20      	cmp	r3, #32
 800462a:	d112      	bne.n	8004652 <HAL_I2C_ER_IRQHandler+0xd6>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10f      	bne.n	8004652 <HAL_I2C_ER_IRQHandler+0xd6>
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	2b21      	cmp	r3, #33	; 0x21
 8004636:	d008      	beq.n	800464a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b29      	cmp	r3, #41	; 0x29
 800463c:	d005      	beq.n	800464a <HAL_I2C_ER_IRQHandler+0xce>
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b28      	cmp	r3, #40	; 0x28
 8004642:	d106      	bne.n	8004652 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b21      	cmp	r3, #33	; 0x21
 8004648:	d103      	bne.n	8004652 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 f808 	bl	8005660 <I2C_Slave_AF>
 8004650:	e016      	b.n	8004680 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800465a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f043 0304 	orr.w	r3, r3, #4
 8004662:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004664:	7efb      	ldrb	r3, [r7, #27]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d002      	beq.n	8004670 <HAL_I2C_ER_IRQHandler+0xf4>
 800466a:	7efb      	ldrb	r3, [r7, #27]
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d107      	bne.n	8004680 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	0adb      	lsrs	r3, r3, #11
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <HAL_I2C_ER_IRQHandler+0x12e>
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f043 0308 	orr.w	r3, r3, #8
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80046a8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 f83f 	bl	8005740 <I2C_ITError>
  }
}
 80046c2:	bf00      	nop
 80046c4:	3728      	adds	r7, #40	; 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	460b      	mov	r3, r1
 8004724:	70fb      	strb	r3, [r7, #3]
 8004726:	4613      	mov	r3, r2
 8004728:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d150      	bne.n	8004862 <I2C_MasterTransmit_TXE+0xc8>
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b21      	cmp	r3, #33	; 0x21
 80047c4:	d14d      	bne.n	8004862 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d01d      	beq.n	8004808 <I2C_MasterTransmit_TXE+0x6e>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d01a      	beq.n	8004808 <I2C_MasterTransmit_TXE+0x6e>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d8:	d016      	beq.n	8004808 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2211      	movs	r2, #17
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff62 	bl	80046ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004806:	e060      	b.n	80048ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004816:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d107      	bne.n	8004852 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ff7d 	bl	800474a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004850:	e03b      	b.n	80048ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff ff35 	bl	80046ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004860:	e033      	b.n	80048ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b21      	cmp	r3, #33	; 0x21
 8004866:	d005      	beq.n	8004874 <I2C_MasterTransmit_TXE+0xda>
 8004868:	7bbb      	ldrb	r3, [r7, #14]
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d12d      	bne.n	80048ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b22      	cmp	r3, #34	; 0x22
 8004872:	d12a      	bne.n	80048ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800488e:	e01c      	b.n	80048ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d103      	bne.n	80048a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f898 	bl	80049d2 <I2C_MemoryTransmit_TXE_BTF>
}
 80048a2:	e012      	b.n	80048ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048c8:	e7ff      	b.n	80048ca <I2C_MasterTransmit_TXE+0x130>
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b21      	cmp	r3, #33	; 0x21
 80048ea:	d165      	bne.n	80049b8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d012      	beq.n	800491c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800491a:	e056      	b.n	80049ca <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b08      	cmp	r3, #8
 8004920:	d01d      	beq.n	800495e <I2C_MasterTransmit_BTF+0x8c>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b20      	cmp	r3, #32
 8004926:	d01a      	beq.n	800495e <I2C_MasterTransmit_BTF+0x8c>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800492e:	d016      	beq.n	800495e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800493e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2211      	movs	r2, #17
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff feb7 	bl	80046ca <HAL_I2C_MasterTxCpltCallback>
}
 800495c:	e035      	b.n	80049ca <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d107      	bne.n	80049a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fed2 	bl	800474a <HAL_I2C_MemTxCpltCallback>
}
 80049a6:	e010      	b.n	80049ca <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fe8a 	bl	80046ca <HAL_I2C_MasterTxCpltCallback>
}
 80049b6:	e008      	b.n	80049ca <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d102      	bne.n	80049ca <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f804 	bl	80049d2 <I2C_MemoryTransmit_TXE_BTF>
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d11d      	bne.n	8004a1e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d10b      	bne.n	8004a02 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	1c9a      	adds	r2, r3, #2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a00:	e048      	b.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	121b      	asrs	r3, r3, #8
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a1c:	e03a      	b.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10b      	bne.n	8004a3e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a3c:	e02a      	b.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d126      	bne.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b22      	cmp	r3, #34	; 0x22
 8004a50:	d108      	bne.n	8004a64 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	e017      	b.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b21      	cmp	r3, #33	; 0x21
 8004a6e:	d111      	bne.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b22      	cmp	r3, #34	; 0x22
 8004ab2:	d173      	bne.n	8004b9c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d920      	bls.n	8004b04 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d154      	bne.n	8004b9c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b00:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004b02:	e04b      	b.n	8004b9c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d047      	beq.n	8004b9c <I2C_MasterReceive_RXNE+0xfc>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d002      	beq.n	8004b18 <I2C_MasterReceive_RXNE+0x78>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d141      	bne.n	8004b9c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b26:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b36:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d10a      	bne.n	8004b88 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fdec 	bl	800475e <HAL_I2C_MemRxCpltCallback>
}
 8004b86:	e009      	b.n	8004b9c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2212      	movs	r2, #18
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fda1 	bl	80046de <HAL_I2C_MasterRxCpltCallback>
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d11b      	bne.n	8004bf4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004bf2:	e0bd      	b.n	8004d70 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d129      	bne.n	8004c52 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d00a      	beq.n	8004c2a <I2C_MasterReceive_BTF+0x86>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d007      	beq.n	8004c2a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c28:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c50:	e08e      	b.n	8004d70 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d176      	bne.n	8004d4a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d002      	beq.n	8004c68 <I2C_MasterReceive_BTF+0xc4>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d108      	bne.n	8004c7a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e019      	b.n	8004cae <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d002      	beq.n	8004c86 <I2C_MasterReceive_BTF+0xe2>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d108      	bne.n	8004c98 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e00a      	b.n	8004cae <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d007      	beq.n	8004cae <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d08:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d10a      	bne.n	8004d34 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fd16 	bl	800475e <HAL_I2C_MemRxCpltCallback>
}
 8004d32:	e01d      	b.n	8004d70 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2212      	movs	r2, #18
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fccb 	bl	80046de <HAL_I2C_MasterRxCpltCallback>
}
 8004d48:	e012      	b.n	8004d70 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d117      	bne.n	8004dbc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004da6:	e067      	b.n	8004e78 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	611a      	str	r2, [r3, #16]
}
 8004dba:	e05d      	b.n	8004e78 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc4:	d133      	bne.n	8004e2e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b21      	cmp	r3, #33	; 0x21
 8004dd0:	d109      	bne.n	8004de6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de2:	611a      	str	r2, [r3, #16]
 8004de4:	e008      	b.n	8004df8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <I2C_Master_SB+0x92>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d108      	bne.n	8004e1c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d032      	beq.n	8004e78 <I2C_Master_SB+0x100>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d02d      	beq.n	8004e78 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e2a:	605a      	str	r2, [r3, #4]
}
 8004e2c:	e024      	b.n	8004e78 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10e      	bne.n	8004e54 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	11db      	asrs	r3, r3, #7
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 0306 	and.w	r3, r3, #6
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f063 030f 	orn	r3, r3, #15
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	611a      	str	r2, [r3, #16]
}
 8004e52:	e011      	b.n	8004e78 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d10d      	bne.n	8004e78 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	11db      	asrs	r3, r3, #7
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f063 030e 	orn	r3, r3, #14
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <I2C_Master_ADD10+0x24>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d011      	beq.n	8004ecc <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <I2C_Master_ADD10+0x38>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eca:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b091      	sub	sp, #68	; 0x44
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b22      	cmp	r3, #34	; 0x22
 8004f00:	f040 8169 	bne.w	80051d6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10f      	bne.n	8004f2c <I2C_Master_ADDR+0x54>
 8004f0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d10b      	bne.n	8004f2c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	e160      	b.n	80051ee <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11d      	bne.n	8004f70 <I2C_Master_ADDR+0x98>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f3c:	d118      	bne.n	8004f70 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f62:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	651a      	str	r2, [r3, #80]	; 0x50
 8004f6e:	e13e      	b.n	80051ee <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d113      	bne.n	8004fa2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e115      	b.n	80051ce <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f040 808a 	bne.w	80050c2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fb4:	d137      	bne.n	8005026 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd4:	d113      	bne.n	8004ffe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	e0e7      	b.n	80051ce <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	623b      	str	r3, [r7, #32]
 8005012:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e0d3      	b.n	80051ce <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005028:	2b08      	cmp	r3, #8
 800502a:	d02e      	beq.n	800508a <I2C_Master_ADDR+0x1b2>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	2b20      	cmp	r3, #32
 8005030:	d02b      	beq.n	800508a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	2b12      	cmp	r3, #18
 8005036:	d102      	bne.n	800503e <I2C_Master_ADDR+0x166>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2b01      	cmp	r3, #1
 800503c:	d125      	bne.n	800508a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2b04      	cmp	r3, #4
 8005042:	d00e      	beq.n	8005062 <I2C_Master_ADDR+0x18a>
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	2b02      	cmp	r3, #2
 8005048:	d00b      	beq.n	8005062 <I2C_Master_ADDR+0x18a>
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	2b10      	cmp	r3, #16
 800504e:	d008      	beq.n	8005062 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e007      	b.n	8005072 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005070:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	e0a1      	b.n	80051ce <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005098:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e085      	b.n	80051ce <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d14d      	bne.n	8005168 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d016      	beq.n	8005100 <I2C_Master_ADDR+0x228>
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d013      	beq.n	8005100 <I2C_Master_ADDR+0x228>
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d010      	beq.n	8005100 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ec:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511e:	d117      	bne.n	8005150 <I2C_Master_ADDR+0x278>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005126:	d00b      	beq.n	8005140 <I2C_Master_ADDR+0x268>
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	2b01      	cmp	r3, #1
 800512c:	d008      	beq.n	8005140 <I2C_Master_ADDR+0x268>
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	2b08      	cmp	r3, #8
 8005132:	d005      	beq.n	8005140 <I2C_Master_ADDR+0x268>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	2b10      	cmp	r3, #16
 8005138:	d002      	beq.n	8005140 <I2C_Master_ADDR+0x268>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2b20      	cmp	r3, #32
 800513e:	d107      	bne.n	8005150 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800514e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	e032      	b.n	80051ce <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005176:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005186:	d117      	bne.n	80051b8 <I2C_Master_ADDR+0x2e0>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800518e:	d00b      	beq.n	80051a8 <I2C_Master_ADDR+0x2d0>
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	2b01      	cmp	r3, #1
 8005194:	d008      	beq.n	80051a8 <I2C_Master_ADDR+0x2d0>
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b08      	cmp	r3, #8
 800519a:	d005      	beq.n	80051a8 <I2C_Master_ADDR+0x2d0>
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d002      	beq.n	80051a8 <I2C_Master_ADDR+0x2d0>
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d107      	bne.n	80051b8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80051d4:	e00b      	b.n	80051ee <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	e7ff      	b.n	80051ee <I2C_Master_ADDR+0x316>
 80051ee:	bf00      	nop
 80051f0:	3744      	adds	r7, #68	; 0x44
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02b      	beq.n	800526c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d114      	bne.n	800526c <I2C_SlaveTransmit_TXE+0x72>
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b29      	cmp	r3, #41	; 0x29
 8005246:	d111      	bne.n	800526c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2221      	movs	r2, #33	; 0x21
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2228      	movs	r2, #40	; 0x28
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fa43 	bl	80046f2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d011      	beq.n	80052aa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	781a      	ldrb	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02c      	beq.n	800532a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d114      	bne.n	800532a <I2C_SlaveReceive_RXNE+0x74>
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b2a      	cmp	r3, #42	; 0x2a
 8005304:	d111      	bne.n	800532a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005314:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2222      	movs	r2, #34	; 0x22
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2228      	movs	r2, #40	; 0x28
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff f9ee 	bl	8004706 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005390:	2b28      	cmp	r3, #40	; 0x28
 8005392:	d127      	bne.n	80053e4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	09db      	lsrs	r3, r3, #7
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	81bb      	strh	r3, [r7, #12]
 80053c6:	e002      	b.n	80053ce <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80053d6:	89ba      	ldrh	r2, [r7, #12]
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff f99c 	bl	800471a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053e2:	e008      	b.n	80053f6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0202 	mvn.w	r2, #2
 80053ec:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800541e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005420:	2300      	movs	r3, #0
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545c:	d172      	bne.n	8005544 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b22      	cmp	r3, #34	; 0x22
 8005462:	d002      	beq.n	800546a <I2C_Slave_STOPF+0x6a>
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b2a      	cmp	r3, #42	; 0x2a
 8005468:	d135      	bne.n	80054d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	b29a      	uxth	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f043 0204 	orr.w	r2, r3, #4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fc fbbc 	bl	8001c20 <HAL_DMA_GetState>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d049      	beq.n	8005542 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	4a69      	ldr	r2, [pc, #420]	; (8005658 <I2C_Slave_STOPF+0x258>)
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fc fb8e 	bl	8001bdc <HAL_DMA_Abort_IT>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03d      	beq.n	8005542 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054d0:	4610      	mov	r0, r2
 80054d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054d4:	e035      	b.n	8005542 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	b29a      	uxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f043 0204 	orr.w	r2, r3, #4
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005508:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	4618      	mov	r0, r3
 8005510:	f7fc fb86 	bl	8001c20 <HAL_DMA_GetState>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d014      	beq.n	8005544 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	4a4e      	ldr	r2, [pc, #312]	; (8005658 <I2C_Slave_STOPF+0x258>)
 8005520:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc fb58 	bl	8001bdc <HAL_DMA_Abort_IT>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800553c:	4610      	mov	r0, r2
 800553e:	4798      	blx	r3
 8005540:	e000      	b.n	8005544 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005542:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d03e      	beq.n	80055cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b04      	cmp	r3, #4
 800555a:	d112      	bne.n	8005582 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d112      	bne.n	80055b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	f043 0204 	orr.w	r2, r3, #4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f8b3 	bl	8005740 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80055da:	e039      	b.n	8005650 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	2b2a      	cmp	r3, #42	; 0x2a
 80055e0:	d109      	bne.n	80055f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2228      	movs	r2, #40	; 0x28
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff f888 	bl	8004706 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b28      	cmp	r3, #40	; 0x28
 8005600:	d111      	bne.n	8005626 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <I2C_Slave_STOPF+0x25c>)
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff f889 	bl	8004736 <HAL_I2C_ListenCpltCallback>
}
 8005624:	e014      	b.n	8005650 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	2b22      	cmp	r3, #34	; 0x22
 800562c:	d002      	beq.n	8005634 <I2C_Slave_STOPF+0x234>
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b22      	cmp	r3, #34	; 0x22
 8005632:	d10d      	bne.n	8005650 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff f85b 	bl	8004706 <HAL_I2C_SlaveRxCpltCallback>
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	08005c91 	.word	0x08005c91
 800565c:	ffff0000 	.word	0xffff0000

08005660 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d002      	beq.n	8005682 <I2C_Slave_AF+0x22>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b20      	cmp	r3, #32
 8005680:	d129      	bne.n	80056d6 <I2C_Slave_AF+0x76>
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b28      	cmp	r3, #40	; 0x28
 8005686:	d126      	bne.n	80056d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2c      	ldr	r2, [pc, #176]	; (800573c <I2C_Slave_AF+0xdc>)
 800568c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800569c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff f831 	bl	8004736 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80056d4:	e02e      	b.n	8005734 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b21      	cmp	r3, #33	; 0x21
 80056da:	d126      	bne.n	800572a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <I2C_Slave_AF+0xdc>)
 80056e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2221      	movs	r2, #33	; 0x21
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005706:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005710:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005720:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fe ffe5 	bl	80046f2 <HAL_I2C_SlaveTxCpltCallback>
}
 8005728:	e004      	b.n	8005734 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005732:	615a      	str	r2, [r3, #20]
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	ffff0000 	.word	0xffff0000

08005740 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b10      	cmp	r3, #16
 800575a:	d10a      	bne.n	8005772 <I2C_ITError+0x32>
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b22      	cmp	r3, #34	; 0x22
 8005760:	d107      	bne.n	8005772 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005770:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005778:	2b28      	cmp	r3, #40	; 0x28
 800577a:	d107      	bne.n	800578c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2228      	movs	r2, #40	; 0x28
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800578a:	e015      	b.n	80057b8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579a:	d006      	beq.n	80057aa <I2C_ITError+0x6a>
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b60      	cmp	r3, #96	; 0x60
 80057a0:	d003      	beq.n	80057aa <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c6:	d162      	bne.n	800588e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d020      	beq.n	8005828 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	4a6a      	ldr	r2, [pc, #424]	; (8005994 <I2C_ITError+0x254>)
 80057ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fc f9f2 	bl	8001bdc <HAL_DMA_Abort_IT>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8089 	beq.w	8005912 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005822:	4610      	mov	r0, r2
 8005824:	4798      	blx	r3
 8005826:	e074      	b.n	8005912 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	4a59      	ldr	r2, [pc, #356]	; (8005994 <I2C_ITError+0x254>)
 800582e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	4618      	mov	r0, r3
 8005836:	f7fc f9d1 	bl	8001bdc <HAL_DMA_Abort_IT>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d068      	beq.n	8005912 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d10b      	bne.n	8005866 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
 800588c:	e041      	b.n	8005912 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b60      	cmp	r3, #96	; 0x60
 8005898:	d125      	bne.n	80058e6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d10b      	bne.n	80058ce <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fe ff51 	bl	8004786 <HAL_I2C_AbortCpltCallback>
 80058e4:	e015      	b.n	8005912 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d10b      	bne.n	800590c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fe ff30 	bl	8004772 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10e      	bne.n	8005940 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800594e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005956:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d113      	bne.n	800598c <I2C_ITError+0x24c>
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b28      	cmp	r3, #40	; 0x28
 8005968:	d110      	bne.n	800598c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <I2C_ITError+0x258>)
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fe fed5 	bl	8004736 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	08005c91 	.word	0x08005c91
 8005998:	ffff0000 	.word	0xffff0000

0800599c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	461a      	mov	r2, r3
 80059aa:	4603      	mov	r3, r0
 80059ac:	817b      	strh	r3, [r7, #10]
 80059ae:	460b      	mov	r3, r1
 80059b0:	813b      	strh	r3, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f9db 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e05f      	b.n	8005ab8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059f8:	897b      	ldrh	r3, [r7, #10]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	492c      	ldr	r1, [pc, #176]	; (8005ac0 <I2C_RequestMemoryWrite+0x124>)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fa14 	bl	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e04c      	b.n	8005ab8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a36:	6a39      	ldr	r1, [r7, #32]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fa7e 	bl	8005f3a <I2C_WaitOnTXEFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00d      	beq.n	8005a60 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d107      	bne.n	8005a5c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e02b      	b.n	8005ab8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d105      	bne.n	8005a72 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a66:	893b      	ldrh	r3, [r7, #8]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	611a      	str	r2, [r3, #16]
 8005a70:	e021      	b.n	8005ab6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a72:	893b      	ldrh	r3, [r7, #8]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	6a39      	ldr	r1, [r7, #32]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fa58 	bl	8005f3a <I2C_WaitOnTXEFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d107      	bne.n	8005aa8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e005      	b.n	8005ab8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aac:	893b      	ldrh	r3, [r7, #8]
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	00010002 	.word	0x00010002

08005ac4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	817b      	strh	r3, [r7, #10]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	813b      	strh	r3, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f93f 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00c      	beq.n	8005b30 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e0a9      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b30:	897b      	ldrh	r3, [r7, #10]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	6a3a      	ldr	r2, [r7, #32]
 8005b44:	4951      	ldr	r1, [pc, #324]	; (8005c8c <I2C_RequestMemoryRead+0x1c8>)
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f978 	bl	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e096      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6e:	6a39      	ldr	r1, [r7, #32]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f9e2 	bl	8005f3a <I2C_WaitOnTXEFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d107      	bne.n	8005b94 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e075      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d105      	bne.n	8005baa <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b9e:	893b      	ldrh	r3, [r7, #8]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	611a      	str	r2, [r3, #16]
 8005ba8:	e021      	b.n	8005bee <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005baa:	893b      	ldrh	r3, [r7, #8]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	6a39      	ldr	r1, [r7, #32]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f9bc 	bl	8005f3a <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d107      	bne.n	8005be0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e04f      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	6a39      	ldr	r1, [r7, #32]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f9a1 	bl	8005f3a <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00d      	beq.n	8005c1a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d107      	bne.n	8005c16 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e034      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f8a9 	bl	8005d8e <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00c      	beq.n	8005c5c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e013      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c5c:	897b      	ldrh	r3, [r7, #10]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	4906      	ldr	r1, [pc, #24]	; (8005c8c <I2C_RequestMemoryRead+0x1c8>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f8e2 	bl	8005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	00010002 	.word	0x00010002

08005c90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	2200      	movs	r2, #0
 8005cea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0201 	bic.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b60      	cmp	r3, #96	; 0x60
 8005d16:	d10e      	bne.n	8005d36 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7fe fd29 	bl	8004786 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d34:	e027      	b.n	8005d86 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d3c:	2b28      	cmp	r3, #40	; 0x28
 8005d3e:	d117      	bne.n	8005d70 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2228      	movs	r2, #40	; 0x28
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d6e:	e007      	b.n	8005d80 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7fe fcf6 	bl	8004772 <HAL_I2C_ErrorCallback>
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d9e:	e025      	b.n	8005dec <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d021      	beq.n	8005dec <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da8:	f7fb fb08 	bl	80013bc <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d302      	bcc.n	8005dbe <I2C_WaitOnFlagUntilTimeout+0x30>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d116      	bne.n	8005dec <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	f043 0220 	orr.w	r2, r3, #32
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e023      	b.n	8005e34 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d10d      	bne.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	43da      	mvns	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf0c      	ite	eq
 8005e08:	2301      	moveq	r3, #1
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	e00c      	b.n	8005e2c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	43da      	mvns	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d0b6      	beq.n	8005da0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e4a:	e051      	b.n	8005ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5a:	d123      	bne.n	8005ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	f043 0204 	orr.w	r2, r3, #4
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e046      	b.n	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d021      	beq.n	8005ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eac:	f7fb fa86 	bl	80013bc <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d302      	bcc.n	8005ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d116      	bne.n	8005ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e020      	b.n	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10c      	bne.n	8005f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	43da      	mvns	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bf14      	ite	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	2300      	moveq	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e00b      	b.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bf14      	ite	ne
 8005f26:	2301      	movne	r3, #1
 8005f28:	2300      	moveq	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d18d      	bne.n	8005e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f46:	e02d      	b.n	8005fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f8ce 	bl	80060ea <I2C_IsAcknowledgeFailed>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e02d      	b.n	8005fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d021      	beq.n	8005fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f60:	f7fb fa2c 	bl	80013bc <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d302      	bcc.n	8005f76 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d116      	bne.n	8005fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	f043 0220 	orr.w	r2, r3, #32
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e007      	b.n	8005fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b80      	cmp	r3, #128	; 0x80
 8005fb0:	d1ca      	bne.n	8005f48 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fc8:	e02d      	b.n	8006026 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f88d 	bl	80060ea <I2C_IsAcknowledgeFailed>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e02d      	b.n	8006036 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d021      	beq.n	8006026 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe2:	f7fb f9eb 	bl	80013bc <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d302      	bcc.n	8005ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e007      	b.n	8006036 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b04      	cmp	r3, #4
 8006032:	d1ca      	bne.n	8005fca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800604a:	e042      	b.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b10      	cmp	r3, #16
 8006058:	d119      	bne.n	800608e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f06f 0210 	mvn.w	r2, #16
 8006062:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e029      	b.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fb f995 	bl	80013bc <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d116      	bne.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e007      	b.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d1b5      	bne.n	800604c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006100:	d11b      	bne.n	800613a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800610a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f043 0204 	orr.w	r2, r3, #4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006158:	d103      	bne.n	8006162 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006160:	e007      	b.n	8006172 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800616a:	d102      	bne.n	8006172 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2208      	movs	r2, #8
 8006170:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e25b      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d075      	beq.n	800628a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800619e:	4ba3      	ldr	r3, [pc, #652]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d00c      	beq.n	80061c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061aa:	4ba0      	ldr	r3, [pc, #640]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d112      	bne.n	80061dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b6:	4b9d      	ldr	r3, [pc, #628]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c2:	d10b      	bne.n	80061dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c4:	4b99      	ldr	r3, [pc, #612]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05b      	beq.n	8006288 <HAL_RCC_OscConfig+0x108>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d157      	bne.n	8006288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e236      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e4:	d106      	bne.n	80061f4 <HAL_RCC_OscConfig+0x74>
 80061e6:	4b91      	ldr	r3, [pc, #580]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a90      	ldr	r2, [pc, #576]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e01d      	b.n	8006230 <HAL_RCC_OscConfig+0xb0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061fc:	d10c      	bne.n	8006218 <HAL_RCC_OscConfig+0x98>
 80061fe:	4b8b      	ldr	r3, [pc, #556]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a8a      	ldr	r2, [pc, #552]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	4b88      	ldr	r3, [pc, #544]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a87      	ldr	r2, [pc, #540]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	e00b      	b.n	8006230 <HAL_RCC_OscConfig+0xb0>
 8006218:	4b84      	ldr	r3, [pc, #528]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a83      	ldr	r2, [pc, #524]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 800621e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	4b81      	ldr	r3, [pc, #516]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a80      	ldr	r2, [pc, #512]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 800622a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006238:	f7fb f8c0 	bl	80013bc <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006240:	f7fb f8bc 	bl	80013bc <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	; 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e1fb      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006252:	4b76      	ldr	r3, [pc, #472]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0xc0>
 800625e:	e014      	b.n	800628a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fb f8ac 	bl	80013bc <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006268:	f7fb f8a8 	bl	80013bc <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e1e7      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627a:	4b6c      	ldr	r3, [pc, #432]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0xe8>
 8006286:	e000      	b.n	800628a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d063      	beq.n	800635e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006296:	4b65      	ldr	r3, [pc, #404]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062a2:	4b62      	ldr	r3, [pc, #392]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d11c      	bne.n	80062e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ae:	4b5f      	ldr	r3, [pc, #380]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d116      	bne.n	80062e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ba:	4b5c      	ldr	r3, [pc, #368]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_RCC_OscConfig+0x152>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d001      	beq.n	80062d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e1bb      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d2:	4b56      	ldr	r3, [pc, #344]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	4952      	ldr	r1, [pc, #328]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e6:	e03a      	b.n	800635e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d020      	beq.n	8006332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f0:	4b4f      	ldr	r3, [pc, #316]	; (8006430 <HAL_RCC_OscConfig+0x2b0>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fb f861 	bl	80013bc <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062fe:	f7fb f85d 	bl	80013bc <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e19c      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006310:	4b46      	ldr	r3, [pc, #280]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631c:	4b43      	ldr	r3, [pc, #268]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4940      	ldr	r1, [pc, #256]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 800632c:	4313      	orrs	r3, r2
 800632e:	600b      	str	r3, [r1, #0]
 8006330:	e015      	b.n	800635e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006332:	4b3f      	ldr	r3, [pc, #252]	; (8006430 <HAL_RCC_OscConfig+0x2b0>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fb f840 	bl	80013bc <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006340:	f7fb f83c 	bl	80013bc <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e17b      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006352:	4b36      	ldr	r3, [pc, #216]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d030      	beq.n	80063cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006372:	4b30      	ldr	r3, [pc, #192]	; (8006434 <HAL_RCC_OscConfig+0x2b4>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fb f820 	bl	80013bc <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006380:	f7fb f81c 	bl	80013bc <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e15b      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006392:	4b26      	ldr	r3, [pc, #152]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 8006394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x200>
 800639e:	e015      	b.n	80063cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a0:	4b24      	ldr	r3, [pc, #144]	; (8006434 <HAL_RCC_OscConfig+0x2b4>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a6:	f7fb f809 	bl	80013bc <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ae:	f7fb f805 	bl	80013bc <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e144      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c0:	4b1a      	ldr	r3, [pc, #104]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80063c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f0      	bne.n	80063ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80a0 	beq.w	800651a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	4a0e      	ldr	r2, [pc, #56]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f8:	6413      	str	r3, [r2, #64]	; 0x40
 80063fa:	4b0c      	ldr	r3, [pc, #48]	; (800642c <HAL_RCC_OscConfig+0x2ac>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCC_OscConfig+0x2b8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d121      	bne.n	800645a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <HAL_RCC_OscConfig+0x2b8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a07      	ldr	r2, [pc, #28]	; (8006438 <HAL_RCC_OscConfig+0x2b8>)
 800641c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006422:	f7fa ffcb 	bl	80013bc <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006428:	e011      	b.n	800644e <HAL_RCC_OscConfig+0x2ce>
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800
 8006430:	42470000 	.word	0x42470000
 8006434:	42470e80 	.word	0x42470e80
 8006438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643c:	f7fa ffbe 	bl	80013bc <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e0fd      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800644e:	4b81      	ldr	r3, [pc, #516]	; (8006654 <HAL_RCC_OscConfig+0x4d4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d106      	bne.n	8006470 <HAL_RCC_OscConfig+0x2f0>
 8006462:	4b7d      	ldr	r3, [pc, #500]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	4a7c      	ldr	r2, [pc, #496]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	6713      	str	r3, [r2, #112]	; 0x70
 800646e:	e01c      	b.n	80064aa <HAL_RCC_OscConfig+0x32a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b05      	cmp	r3, #5
 8006476:	d10c      	bne.n	8006492 <HAL_RCC_OscConfig+0x312>
 8006478:	4b77      	ldr	r3, [pc, #476]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 800647a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647c:	4a76      	ldr	r2, [pc, #472]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 800647e:	f043 0304 	orr.w	r3, r3, #4
 8006482:	6713      	str	r3, [r2, #112]	; 0x70
 8006484:	4b74      	ldr	r3, [pc, #464]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	4a73      	ldr	r2, [pc, #460]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	6713      	str	r3, [r2, #112]	; 0x70
 8006490:	e00b      	b.n	80064aa <HAL_RCC_OscConfig+0x32a>
 8006492:	4b71      	ldr	r3, [pc, #452]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	4a70      	ldr	r2, [pc, #448]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	6713      	str	r3, [r2, #112]	; 0x70
 800649e:	4b6e      	ldr	r3, [pc, #440]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	4a6d      	ldr	r2, [pc, #436]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d015      	beq.n	80064de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b2:	f7fa ff83 	bl	80013bc <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b8:	e00a      	b.n	80064d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ba:	f7fa ff7f 	bl	80013bc <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e0bc      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d0:	4b61      	ldr	r3, [pc, #388]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0ee      	beq.n	80064ba <HAL_RCC_OscConfig+0x33a>
 80064dc:	e014      	b.n	8006508 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fa ff6d 	bl	80013bc <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e4:	e00a      	b.n	80064fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064e6:	f7fa ff69 	bl	80013bc <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e0a6      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064fc:	4b56      	ldr	r3, [pc, #344]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1ee      	bne.n	80064e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d105      	bne.n	800651a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800650e:	4b52      	ldr	r3, [pc, #328]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	4a51      	ldr	r2, [pc, #324]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 8092 	beq.w	8006648 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006524:	4b4c      	ldr	r3, [pc, #304]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 030c 	and.w	r3, r3, #12
 800652c:	2b08      	cmp	r3, #8
 800652e:	d05c      	beq.n	80065ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d141      	bne.n	80065bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006538:	4b48      	ldr	r3, [pc, #288]	; (800665c <HAL_RCC_OscConfig+0x4dc>)
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653e:	f7fa ff3d 	bl	80013bc <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006546:	f7fa ff39 	bl	80013bc <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e078      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006558:	4b3f      	ldr	r3, [pc, #252]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	019b      	lsls	r3, r3, #6
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	3b01      	subs	r3, #1
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	4933      	ldr	r1, [pc, #204]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 800658a:	4313      	orrs	r3, r2
 800658c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800658e:	4b33      	ldr	r3, [pc, #204]	; (800665c <HAL_RCC_OscConfig+0x4dc>)
 8006590:	2201      	movs	r2, #1
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fa ff12 	bl	80013bc <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800659c:	f7fa ff0e 	bl	80013bc <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e04d      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ae:	4b2a      	ldr	r3, [pc, #168]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x41c>
 80065ba:	e045      	b.n	8006648 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065bc:	4b27      	ldr	r3, [pc, #156]	; (800665c <HAL_RCC_OscConfig+0x4dc>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c2:	f7fa fefb 	bl	80013bc <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ca:	f7fa fef7 	bl	80013bc <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e036      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065dc:	4b1e      	ldr	r3, [pc, #120]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f0      	bne.n	80065ca <HAL_RCC_OscConfig+0x44a>
 80065e8:	e02e      	b.n	8006648 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e029      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065f6:	4b18      	ldr	r3, [pc, #96]	; (8006658 <HAL_RCC_OscConfig+0x4d8>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	429a      	cmp	r2, r3
 8006608:	d11c      	bne.n	8006644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d115      	bne.n	8006644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800661e:	4013      	ands	r3, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006624:	4293      	cmp	r3, r2
 8006626:	d10d      	bne.n	8006644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d106      	bne.n	8006644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40007000 	.word	0x40007000
 8006658:	40023800 	.word	0x40023800
 800665c:	42470060 	.word	0x42470060

08006660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0cc      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006674:	4b68      	ldr	r3, [pc, #416]	; (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d90c      	bls.n	800669c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006682:	4b65      	ldr	r3, [pc, #404]	; (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800668a:	4b63      	ldr	r3, [pc, #396]	; (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d001      	beq.n	800669c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0b8      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d020      	beq.n	80066ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a58      	ldr	r2, [pc, #352]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066cc:	4b53      	ldr	r3, [pc, #332]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	4a52      	ldr	r2, [pc, #328]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d8:	4b50      	ldr	r3, [pc, #320]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	494d      	ldr	r1, [pc, #308]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d044      	beq.n	8006780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fe:	4b47      	ldr	r3, [pc, #284]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d119      	bne.n	800673e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e07f      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d003      	beq.n	800671e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671a:	2b03      	cmp	r3, #3
 800671c:	d107      	bne.n	800672e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800671e:	4b3f      	ldr	r3, [pc, #252]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d109      	bne.n	800673e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e06f      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672e:	4b3b      	ldr	r3, [pc, #236]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e067      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800673e:	4b37      	ldr	r3, [pc, #220]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f023 0203 	bic.w	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4934      	ldr	r1, [pc, #208]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	4313      	orrs	r3, r2
 800674e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006750:	f7fa fe34 	bl	80013bc <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006756:	e00a      	b.n	800676e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fa fe30 	bl	80013bc <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f241 3288 	movw	r2, #5000	; 0x1388
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e04f      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676e:	4b2b      	ldr	r3, [pc, #172]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 020c 	and.w	r2, r3, #12
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	429a      	cmp	r2, r3
 800677e:	d1eb      	bne.n	8006758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d20c      	bcs.n	80067a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678e:	4b22      	ldr	r3, [pc, #136]	; (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006796:	4b20      	ldr	r3, [pc, #128]	; (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d001      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e032      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b4:	4b19      	ldr	r3, [pc, #100]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4916      	ldr	r1, [pc, #88]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	490e      	ldr	r1, [pc, #56]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067e6:	f000 f821 	bl	800682c <HAL_RCC_GetSysClockFreq>
 80067ea:	4601      	mov	r1, r0
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	4a0a      	ldr	r2, [pc, #40]	; (8006820 <HAL_RCC_ClockConfig+0x1c0>)
 80067f8:	5cd3      	ldrb	r3, [r2, r3]
 80067fa:	fa21 f303 	lsr.w	r3, r1, r3
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <HAL_RCC_ClockConfig+0x1c4>)
 8006800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <HAL_RCC_ClockConfig+0x1c8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fa fd94 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40023c00 	.word	0x40023c00
 800681c:	40023800 	.word	0x40023800
 8006820:	0800c120 	.word	0x0800c120
 8006824:	20000000 	.word	0x20000000
 8006828:	20000004 	.word	0x20000004

0800682c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	2300      	movs	r3, #0
 800683c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006842:	4b63      	ldr	r3, [pc, #396]	; (80069d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
 800684a:	2b04      	cmp	r3, #4
 800684c:	d007      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0x32>
 800684e:	2b08      	cmp	r3, #8
 8006850:	d008      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x38>
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 80b4 	bne.w	80069c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006858:	4b5e      	ldr	r3, [pc, #376]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800685a:	60bb      	str	r3, [r7, #8]
       break;
 800685c:	e0b3      	b.n	80069c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800685e:	4b5e      	ldr	r3, [pc, #376]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006860:	60bb      	str	r3, [r7, #8]
      break;
 8006862:	e0b0      	b.n	80069c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006864:	4b5a      	ldr	r3, [pc, #360]	; (80069d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800686c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686e:	4b58      	ldr	r3, [pc, #352]	; (80069d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04a      	beq.n	8006910 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800687a:	4b55      	ldr	r3, [pc, #340]	; (80069d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	099b      	lsrs	r3, r3, #6
 8006880:	f04f 0400 	mov.w	r4, #0
 8006884:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	ea03 0501 	and.w	r5, r3, r1
 8006890:	ea04 0602 	and.w	r6, r4, r2
 8006894:	4629      	mov	r1, r5
 8006896:	4632      	mov	r2, r6
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	f04f 0400 	mov.w	r4, #0
 80068a0:	0154      	lsls	r4, r2, #5
 80068a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068a6:	014b      	lsls	r3, r1, #5
 80068a8:	4619      	mov	r1, r3
 80068aa:	4622      	mov	r2, r4
 80068ac:	1b49      	subs	r1, r1, r5
 80068ae:	eb62 0206 	sbc.w	r2, r2, r6
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	f04f 0400 	mov.w	r4, #0
 80068ba:	0194      	lsls	r4, r2, #6
 80068bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80068c0:	018b      	lsls	r3, r1, #6
 80068c2:	1a5b      	subs	r3, r3, r1
 80068c4:	eb64 0402 	sbc.w	r4, r4, r2
 80068c8:	f04f 0100 	mov.w	r1, #0
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	00e2      	lsls	r2, r4, #3
 80068d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80068d6:	00d9      	lsls	r1, r3, #3
 80068d8:	460b      	mov	r3, r1
 80068da:	4614      	mov	r4, r2
 80068dc:	195b      	adds	r3, r3, r5
 80068de:	eb44 0406 	adc.w	r4, r4, r6
 80068e2:	f04f 0100 	mov.w	r1, #0
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	0262      	lsls	r2, r4, #9
 80068ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80068f0:	0259      	lsls	r1, r3, #9
 80068f2:	460b      	mov	r3, r1
 80068f4:	4614      	mov	r4, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	4621      	mov	r1, r4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f04f 0400 	mov.w	r4, #0
 8006900:	461a      	mov	r2, r3
 8006902:	4623      	mov	r3, r4
 8006904:	f7f9 fcb4 	bl	8000270 <__aeabi_uldivmod>
 8006908:	4603      	mov	r3, r0
 800690a:	460c      	mov	r4, r1
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	e049      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006910:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	f04f 0400 	mov.w	r4, #0
 800691a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	ea03 0501 	and.w	r5, r3, r1
 8006926:	ea04 0602 	and.w	r6, r4, r2
 800692a:	4629      	mov	r1, r5
 800692c:	4632      	mov	r2, r6
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	f04f 0400 	mov.w	r4, #0
 8006936:	0154      	lsls	r4, r2, #5
 8006938:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800693c:	014b      	lsls	r3, r1, #5
 800693e:	4619      	mov	r1, r3
 8006940:	4622      	mov	r2, r4
 8006942:	1b49      	subs	r1, r1, r5
 8006944:	eb62 0206 	sbc.w	r2, r2, r6
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	f04f 0400 	mov.w	r4, #0
 8006950:	0194      	lsls	r4, r2, #6
 8006952:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006956:	018b      	lsls	r3, r1, #6
 8006958:	1a5b      	subs	r3, r3, r1
 800695a:	eb64 0402 	sbc.w	r4, r4, r2
 800695e:	f04f 0100 	mov.w	r1, #0
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	00e2      	lsls	r2, r4, #3
 8006968:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800696c:	00d9      	lsls	r1, r3, #3
 800696e:	460b      	mov	r3, r1
 8006970:	4614      	mov	r4, r2
 8006972:	195b      	adds	r3, r3, r5
 8006974:	eb44 0406 	adc.w	r4, r4, r6
 8006978:	f04f 0100 	mov.w	r1, #0
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	02a2      	lsls	r2, r4, #10
 8006982:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006986:	0299      	lsls	r1, r3, #10
 8006988:	460b      	mov	r3, r1
 800698a:	4614      	mov	r4, r2
 800698c:	4618      	mov	r0, r3
 800698e:	4621      	mov	r1, r4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f04f 0400 	mov.w	r4, #0
 8006996:	461a      	mov	r2, r3
 8006998:	4623      	mov	r3, r4
 800699a:	f7f9 fc69 	bl	8000270 <__aeabi_uldivmod>
 800699e:	4603      	mov	r3, r0
 80069a0:	460c      	mov	r4, r1
 80069a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	0c1b      	lsrs	r3, r3, #16
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	3301      	adds	r3, #1
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	60bb      	str	r3, [r7, #8]
      break;
 80069be:	e002      	b.n	80069c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80069c2:	60bb      	str	r3, [r7, #8]
      break;
 80069c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069c6:	68bb      	ldr	r3, [r7, #8]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d0:	40023800 	.word	0x40023800
 80069d4:	00f42400 	.word	0x00f42400
 80069d8:	007a1200 	.word	0x007a1200

080069dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069e0:	4b03      	ldr	r3, [pc, #12]	; (80069f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069e2:	681b      	ldr	r3, [r3, #0]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000000 	.word	0x20000000

080069f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069f8:	f7ff fff0 	bl	80069dc <HAL_RCC_GetHCLKFreq>
 80069fc:	4601      	mov	r1, r0
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	0a9b      	lsrs	r3, r3, #10
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	4a03      	ldr	r2, [pc, #12]	; (8006a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a0a:	5cd3      	ldrb	r3, [r2, r3]
 8006a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40023800 	.word	0x40023800
 8006a18:	0800c130 	.word	0x0800c130

08006a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a20:	f7ff ffdc 	bl	80069dc <HAL_RCC_GetHCLKFreq>
 8006a24:	4601      	mov	r1, r0
 8006a26:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	0b5b      	lsrs	r3, r3, #13
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	4a03      	ldr	r2, [pc, #12]	; (8006a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a32:	5cd3      	ldrb	r3, [r2, r3]
 8006a34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	0800c130 	.word	0x0800c130

08006a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e056      	b.n	8006b04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fa f947 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	ea42 0103 	orr.w	r1, r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	f003 0104 	and.w	r1, r3, #4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69da      	ldr	r2, [r3, #28]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006af2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e01d      	b.n	8006b5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fa fa88 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f000 f944 	bl	8006dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d122      	bne.n	8006bbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d11b      	bne.n	8006bbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f06f 0202 	mvn.w	r2, #2
 8006b8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f8f8 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006baa:	e005      	b.n	8006bb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8ea 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f8fb 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d122      	bne.n	8006c12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d11b      	bne.n	8006c12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f06f 0204 	mvn.w	r2, #4
 8006be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f8ce 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006bfe:	e005      	b.n	8006c0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f8c0 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f8d1 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d122      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0308 	and.w	r3, r3, #8
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d11b      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f06f 0208 	mvn.w	r2, #8
 8006c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f8a4 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006c52:	e005      	b.n	8006c60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f896 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f8a7 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d122      	bne.n	8006cba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d11b      	bne.n	8006cba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0210 	mvn.w	r2, #16
 8006c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2208      	movs	r2, #8
 8006c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f87a 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006ca6:	e005      	b.n	8006cb4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f86c 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f87d 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d10e      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d107      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f06f 0201 	mvn.w	r2, #1
 8006cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f846 	bl	8006d72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf0:	2b80      	cmp	r3, #128	; 0x80
 8006cf2:	d10e      	bne.n	8006d12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b80      	cmp	r3, #128	; 0x80
 8006d00:	d107      	bne.n	8006d12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f989 	bl	8007024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	d10e      	bne.n	8006d3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d107      	bne.n	8006d3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f842 	bl	8006dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d10e      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d107      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f06f 0220 	mvn.w	r2, #32
 8006d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f953 	bl	8007010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a40      	ldr	r2, [pc, #256]	; (8006eec <TIM_Base_SetConfig+0x114>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df6:	d00f      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a3d      	ldr	r2, [pc, #244]	; (8006ef0 <TIM_Base_SetConfig+0x118>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00b      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a3c      	ldr	r2, [pc, #240]	; (8006ef4 <TIM_Base_SetConfig+0x11c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a3b      	ldr	r2, [pc, #236]	; (8006ef8 <TIM_Base_SetConfig+0x120>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a3a      	ldr	r2, [pc, #232]	; (8006efc <TIM_Base_SetConfig+0x124>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d108      	bne.n	8006e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2f      	ldr	r2, [pc, #188]	; (8006eec <TIM_Base_SetConfig+0x114>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d02b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d027      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ef0 <TIM_Base_SetConfig+0x118>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d023      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <TIM_Base_SetConfig+0x11c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01f      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <TIM_Base_SetConfig+0x120>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a29      	ldr	r2, [pc, #164]	; (8006efc <TIM_Base_SetConfig+0x124>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d017      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a28      	ldr	r2, [pc, #160]	; (8006f00 <TIM_Base_SetConfig+0x128>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a27      	ldr	r2, [pc, #156]	; (8006f04 <TIM_Base_SetConfig+0x12c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <TIM_Base_SetConfig+0x130>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <TIM_Base_SetConfig+0x134>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a24      	ldr	r2, [pc, #144]	; (8006f10 <TIM_Base_SetConfig+0x138>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a23      	ldr	r2, [pc, #140]	; (8006f14 <TIM_Base_SetConfig+0x13c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d108      	bne.n	8006e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <TIM_Base_SetConfig+0x114>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_Base_SetConfig+0xf8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a0c      	ldr	r2, [pc, #48]	; (8006efc <TIM_Base_SetConfig+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d103      	bne.n	8006ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	615a      	str	r2, [r3, #20]
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40010000 	.word	0x40010000
 8006ef0:	40000400 	.word	0x40000400
 8006ef4:	40000800 	.word	0x40000800
 8006ef8:	40000c00 	.word	0x40000c00
 8006efc:	40010400 	.word	0x40010400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	40014400 	.word	0x40014400
 8006f08:	40014800 	.word	0x40014800
 8006f0c:	40001800 	.word	0x40001800
 8006f10:	40001c00 	.word	0x40001c00
 8006f14:	40002000 	.word	0x40002000

08006f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e05a      	b.n	8006fe6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d022      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7c:	d01d      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a1d      	ldr	r2, [pc, #116]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d018      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1b      	ldr	r2, [pc, #108]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1a      	ldr	r2, [pc, #104]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a18      	ldr	r2, [pc, #96]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a17      	ldr	r2, [pc, #92]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a15      	ldr	r2, [pc, #84]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40010400 	.word	0x40010400
 8007008:	40014000 	.word	0x40014000
 800700c:	40001800 	.word	0x40001800

08007010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e03f      	b.n	80070ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fa f844 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2224      	movs	r2, #36	; 0x24
 8007068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800707a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fb4b 	bl	8007718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691a      	ldr	r2, [r3, #16]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007090:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	695a      	ldr	r2, [r3, #20]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b088      	sub	sp, #32
 80070d6:	af02      	add	r7, sp, #8
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	4613      	mov	r3, r2
 80070e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	f040 8083 	bne.w	80071fa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_UART_Transmit+0x2e>
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e07b      	b.n	80071fc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_UART_Transmit+0x40>
 800710e:	2302      	movs	r3, #2
 8007110:	e074      	b.n	80071fc <HAL_UART_Transmit+0x12a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2221      	movs	r2, #33	; 0x21
 8007124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007128:	f7fa f948 	bl	80013bc <HAL_GetTick>
 800712c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	88fa      	ldrh	r2, [r7, #6]
 8007132:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	88fa      	ldrh	r2, [r7, #6]
 8007138:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007142:	e042      	b.n	80071ca <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715a:	d122      	bne.n	80071a2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2200      	movs	r2, #0
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f96a 	bl	8007440 <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e042      	b.n	80071fc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007188:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3302      	adds	r3, #2
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	e017      	b.n	80071ca <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	3301      	adds	r3, #1
 800719e:	60bb      	str	r3, [r7, #8]
 80071a0:	e013      	b.n	80071ca <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2200      	movs	r2, #0
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f947 	bl	8007440 <UART_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e01f      	b.n	80071fc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	60ba      	str	r2, [r7, #8]
 80071c2:	781a      	ldrb	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1b7      	bne.n	8007144 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	2140      	movs	r1, #64	; 0x40
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f92e 	bl	8007440 <UART_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e006      	b.n	80071fc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10d      	bne.n	8007256 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <HAL_UART_IRQHandler+0x52>
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9e0 	bl	8007614 <UART_Receive_IT>
      return;
 8007254:	e0d1      	b.n	80073fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80b0 	beq.w	80073be <HAL_UART_IRQHandler+0x1ba>
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <HAL_UART_IRQHandler+0x70>
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 80a5 	beq.w	80073be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_UART_IRQHandler+0x90>
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728c:	f043 0201 	orr.w	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <HAL_UART_IRQHandler+0xb0>
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ac:	f043 0202 	orr.w	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_UART_IRQHandler+0xd0>
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072cc:	f043 0204 	orr.w	r2, r3, #4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00f      	beq.n	80072fe <HAL_UART_IRQHandler+0xfa>
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <HAL_UART_IRQHandler+0xee>
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	f043 0208 	orr.w	r2, r3, #8
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d078      	beq.n	80073f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <HAL_UART_IRQHandler+0x11c>
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f97a 	bl	8007614 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	bf0c      	ite	eq
 800732e:	2301      	moveq	r3, #1
 8007330:	2300      	movne	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <HAL_UART_IRQHandler+0x144>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d031      	beq.n	80073ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f8c3 	bl	80074d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d123      	bne.n	80073a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695a      	ldr	r2, [r3, #20]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	2b00      	cmp	r3, #0
 8007372:	d013      	beq.n	800739c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007378:	4a21      	ldr	r2, [pc, #132]	; (8007400 <HAL_UART_IRQHandler+0x1fc>)
 800737a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007380:	4618      	mov	r0, r3
 8007382:	f7fa fc2b 	bl	8001bdc <HAL_DMA_Abort_IT>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d016      	beq.n	80073ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007396:	4610      	mov	r0, r2
 8007398:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739a:	e00e      	b.n	80073ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f845 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a2:	e00a      	b.n	80073ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f841 	bl	800742c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073aa:	e006      	b.n	80073ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f83d 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80073b8:	e01e      	b.n	80073f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ba:	bf00      	nop
    return;
 80073bc:	e01c      	b.n	80073f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_UART_IRQHandler+0x1d6>
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8b0 	bl	8007538 <UART_Transmit_IT>
    return;
 80073d8:	e00f      	b.n	80073fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <HAL_UART_IRQHandler+0x1f6>
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f8f8 	bl	80075e4 <UART_EndTransmit_IT>
    return;
 80073f4:	bf00      	nop
 80073f6:	e000      	b.n	80073fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80073f8:	bf00      	nop
  }
}
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	08007511 	.word	0x08007511

08007404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007450:	e02c      	b.n	80074ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d028      	beq.n	80074ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <UART_WaitOnFlagUntilTimeout+0x30>
 8007460:	f7f9 ffac 	bl	80013bc <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	429a      	cmp	r2, r3
 800746e:	d21d      	bcs.n	80074ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800747e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e00f      	b.n	80074cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4013      	ands	r3, r2
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	bf0c      	ite	eq
 80074bc:	2301      	moveq	r3, #1
 80074be:	2300      	movne	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d0c3      	beq.n	8007452 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695a      	ldr	r2, [r3, #20]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff ff7e 	bl	800742c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b21      	cmp	r3, #33	; 0x21
 800754a:	d144      	bne.n	80075d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007554:	d11a      	bne.n	800758c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800756a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d105      	bne.n	8007580 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	1c9a      	adds	r2, r3, #2
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	621a      	str	r2, [r3, #32]
 800757e:	e00e      	b.n	800759e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]
 800758a:	e008      	b.n	800759e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	1c59      	adds	r1, r3, #1
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6211      	str	r1, [r2, #32]
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4619      	mov	r1, r3
 80075ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10f      	bne.n	80075d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e000      	b.n	80075d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80075d6:	2302      	movs	r3, #2
  }
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fefd 	bl	8007404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b22      	cmp	r3, #34	; 0x22
 8007626:	d171      	bne.n	800770c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007630:	d123      	bne.n	800767a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10e      	bne.n	800765e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	1c9a      	adds	r2, r3, #2
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	629a      	str	r2, [r3, #40]	; 0x28
 800765c:	e029      	b.n	80076b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	b29b      	uxth	r3, r3
 8007666:	b2db      	uxtb	r3, r3
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	629a      	str	r2, [r3, #40]	; 0x28
 8007678:	e01b      	b.n	80076b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6858      	ldr	r0, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	1c59      	adds	r1, r3, #1
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6291      	str	r1, [r2, #40]	; 0x28
 8007692:	b2c2      	uxtb	r2, r0
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e00c      	b.n	80076b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	1c58      	adds	r0, r3, #1
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	6288      	str	r0, [r1, #40]	; 0x28
 80076aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	4619      	mov	r1, r3
 80076c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d120      	bne.n	8007708 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0220 	bic.w	r2, r2, #32
 80076d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695a      	ldr	r2, [r3, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff fe8a 	bl	8007418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	e002      	b.n	800770e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	e000      	b.n	800770e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800770c:	2302      	movs	r3, #2
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800775a:	f023 030c 	bic.w	r3, r3, #12
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	430b      	orrs	r3, r1
 8007766:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007786:	f040 818b 	bne.w	8007aa0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4ac1      	ldr	r2, [pc, #772]	; (8007a94 <UART_SetConfig+0x37c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d005      	beq.n	80077a0 <UART_SetConfig+0x88>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4abf      	ldr	r2, [pc, #764]	; (8007a98 <UART_SetConfig+0x380>)
 800779a:	4293      	cmp	r3, r2
 800779c:	f040 80bd 	bne.w	800791a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077a0:	f7ff f93c 	bl	8006a1c <HAL_RCC_GetPCLK2Freq>
 80077a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	461d      	mov	r5, r3
 80077aa:	f04f 0600 	mov.w	r6, #0
 80077ae:	46a8      	mov	r8, r5
 80077b0:	46b1      	mov	r9, r6
 80077b2:	eb18 0308 	adds.w	r3, r8, r8
 80077b6:	eb49 0409 	adc.w	r4, r9, r9
 80077ba:	4698      	mov	r8, r3
 80077bc:	46a1      	mov	r9, r4
 80077be:	eb18 0805 	adds.w	r8, r8, r5
 80077c2:	eb49 0906 	adc.w	r9, r9, r6
 80077c6:	f04f 0100 	mov.w	r1, #0
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077da:	4688      	mov	r8, r1
 80077dc:	4691      	mov	r9, r2
 80077de:	eb18 0005 	adds.w	r0, r8, r5
 80077e2:	eb49 0106 	adc.w	r1, r9, r6
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	461d      	mov	r5, r3
 80077ec:	f04f 0600 	mov.w	r6, #0
 80077f0:	196b      	adds	r3, r5, r5
 80077f2:	eb46 0406 	adc.w	r4, r6, r6
 80077f6:	461a      	mov	r2, r3
 80077f8:	4623      	mov	r3, r4
 80077fa:	f7f8 fd39 	bl	8000270 <__aeabi_uldivmod>
 80077fe:	4603      	mov	r3, r0
 8007800:	460c      	mov	r4, r1
 8007802:	461a      	mov	r2, r3
 8007804:	4ba5      	ldr	r3, [pc, #660]	; (8007a9c <UART_SetConfig+0x384>)
 8007806:	fba3 2302 	umull	r2, r3, r3, r2
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	461d      	mov	r5, r3
 8007814:	f04f 0600 	mov.w	r6, #0
 8007818:	46a9      	mov	r9, r5
 800781a:	46b2      	mov	sl, r6
 800781c:	eb19 0309 	adds.w	r3, r9, r9
 8007820:	eb4a 040a 	adc.w	r4, sl, sl
 8007824:	4699      	mov	r9, r3
 8007826:	46a2      	mov	sl, r4
 8007828:	eb19 0905 	adds.w	r9, r9, r5
 800782c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007830:	f04f 0100 	mov.w	r1, #0
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800783c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007840:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007844:	4689      	mov	r9, r1
 8007846:	4692      	mov	sl, r2
 8007848:	eb19 0005 	adds.w	r0, r9, r5
 800784c:	eb4a 0106 	adc.w	r1, sl, r6
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	461d      	mov	r5, r3
 8007856:	f04f 0600 	mov.w	r6, #0
 800785a:	196b      	adds	r3, r5, r5
 800785c:	eb46 0406 	adc.w	r4, r6, r6
 8007860:	461a      	mov	r2, r3
 8007862:	4623      	mov	r3, r4
 8007864:	f7f8 fd04 	bl	8000270 <__aeabi_uldivmod>
 8007868:	4603      	mov	r3, r0
 800786a:	460c      	mov	r4, r1
 800786c:	461a      	mov	r2, r3
 800786e:	4b8b      	ldr	r3, [pc, #556]	; (8007a9c <UART_SetConfig+0x384>)
 8007870:	fba3 1302 	umull	r1, r3, r3, r2
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	2164      	movs	r1, #100	; 0x64
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	3332      	adds	r3, #50	; 0x32
 8007882:	4a86      	ldr	r2, [pc, #536]	; (8007a9c <UART_SetConfig+0x384>)
 8007884:	fba2 2303 	umull	r2, r3, r2, r3
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007890:	4498      	add	r8, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	461d      	mov	r5, r3
 8007896:	f04f 0600 	mov.w	r6, #0
 800789a:	46a9      	mov	r9, r5
 800789c:	46b2      	mov	sl, r6
 800789e:	eb19 0309 	adds.w	r3, r9, r9
 80078a2:	eb4a 040a 	adc.w	r4, sl, sl
 80078a6:	4699      	mov	r9, r3
 80078a8:	46a2      	mov	sl, r4
 80078aa:	eb19 0905 	adds.w	r9, r9, r5
 80078ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078c6:	4689      	mov	r9, r1
 80078c8:	4692      	mov	sl, r2
 80078ca:	eb19 0005 	adds.w	r0, r9, r5
 80078ce:	eb4a 0106 	adc.w	r1, sl, r6
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	461d      	mov	r5, r3
 80078d8:	f04f 0600 	mov.w	r6, #0
 80078dc:	196b      	adds	r3, r5, r5
 80078de:	eb46 0406 	adc.w	r4, r6, r6
 80078e2:	461a      	mov	r2, r3
 80078e4:	4623      	mov	r3, r4
 80078e6:	f7f8 fcc3 	bl	8000270 <__aeabi_uldivmod>
 80078ea:	4603      	mov	r3, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	461a      	mov	r2, r3
 80078f0:	4b6a      	ldr	r3, [pc, #424]	; (8007a9c <UART_SetConfig+0x384>)
 80078f2:	fba3 1302 	umull	r1, r3, r3, r2
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	2164      	movs	r1, #100	; 0x64
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	3332      	adds	r3, #50	; 0x32
 8007904:	4a65      	ldr	r2, [pc, #404]	; (8007a9c <UART_SetConfig+0x384>)
 8007906:	fba2 2303 	umull	r2, r3, r2, r3
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	f003 0207 	and.w	r2, r3, #7
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4442      	add	r2, r8
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	e26f      	b.n	8007dfa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800791a:	f7ff f86b 	bl	80069f4 <HAL_RCC_GetPCLK1Freq>
 800791e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	461d      	mov	r5, r3
 8007924:	f04f 0600 	mov.w	r6, #0
 8007928:	46a8      	mov	r8, r5
 800792a:	46b1      	mov	r9, r6
 800792c:	eb18 0308 	adds.w	r3, r8, r8
 8007930:	eb49 0409 	adc.w	r4, r9, r9
 8007934:	4698      	mov	r8, r3
 8007936:	46a1      	mov	r9, r4
 8007938:	eb18 0805 	adds.w	r8, r8, r5
 800793c:	eb49 0906 	adc.w	r9, r9, r6
 8007940:	f04f 0100 	mov.w	r1, #0
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800794c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007950:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007954:	4688      	mov	r8, r1
 8007956:	4691      	mov	r9, r2
 8007958:	eb18 0005 	adds.w	r0, r8, r5
 800795c:	eb49 0106 	adc.w	r1, r9, r6
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	461d      	mov	r5, r3
 8007966:	f04f 0600 	mov.w	r6, #0
 800796a:	196b      	adds	r3, r5, r5
 800796c:	eb46 0406 	adc.w	r4, r6, r6
 8007970:	461a      	mov	r2, r3
 8007972:	4623      	mov	r3, r4
 8007974:	f7f8 fc7c 	bl	8000270 <__aeabi_uldivmod>
 8007978:	4603      	mov	r3, r0
 800797a:	460c      	mov	r4, r1
 800797c:	461a      	mov	r2, r3
 800797e:	4b47      	ldr	r3, [pc, #284]	; (8007a9c <UART_SetConfig+0x384>)
 8007980:	fba3 2302 	umull	r2, r3, r3, r2
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	461d      	mov	r5, r3
 800798e:	f04f 0600 	mov.w	r6, #0
 8007992:	46a9      	mov	r9, r5
 8007994:	46b2      	mov	sl, r6
 8007996:	eb19 0309 	adds.w	r3, r9, r9
 800799a:	eb4a 040a 	adc.w	r4, sl, sl
 800799e:	4699      	mov	r9, r3
 80079a0:	46a2      	mov	sl, r4
 80079a2:	eb19 0905 	adds.w	r9, r9, r5
 80079a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80079aa:	f04f 0100 	mov.w	r1, #0
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079be:	4689      	mov	r9, r1
 80079c0:	4692      	mov	sl, r2
 80079c2:	eb19 0005 	adds.w	r0, r9, r5
 80079c6:	eb4a 0106 	adc.w	r1, sl, r6
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	461d      	mov	r5, r3
 80079d0:	f04f 0600 	mov.w	r6, #0
 80079d4:	196b      	adds	r3, r5, r5
 80079d6:	eb46 0406 	adc.w	r4, r6, r6
 80079da:	461a      	mov	r2, r3
 80079dc:	4623      	mov	r3, r4
 80079de:	f7f8 fc47 	bl	8000270 <__aeabi_uldivmod>
 80079e2:	4603      	mov	r3, r0
 80079e4:	460c      	mov	r4, r1
 80079e6:	461a      	mov	r2, r3
 80079e8:	4b2c      	ldr	r3, [pc, #176]	; (8007a9c <UART_SetConfig+0x384>)
 80079ea:	fba3 1302 	umull	r1, r3, r3, r2
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	2164      	movs	r1, #100	; 0x64
 80079f2:	fb01 f303 	mul.w	r3, r1, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	3332      	adds	r3, #50	; 0x32
 80079fc:	4a27      	ldr	r2, [pc, #156]	; (8007a9c <UART_SetConfig+0x384>)
 80079fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a0a:	4498      	add	r8, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	461d      	mov	r5, r3
 8007a10:	f04f 0600 	mov.w	r6, #0
 8007a14:	46a9      	mov	r9, r5
 8007a16:	46b2      	mov	sl, r6
 8007a18:	eb19 0309 	adds.w	r3, r9, r9
 8007a1c:	eb4a 040a 	adc.w	r4, sl, sl
 8007a20:	4699      	mov	r9, r3
 8007a22:	46a2      	mov	sl, r4
 8007a24:	eb19 0905 	adds.w	r9, r9, r5
 8007a28:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a2c:	f04f 0100 	mov.w	r1, #0
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a40:	4689      	mov	r9, r1
 8007a42:	4692      	mov	sl, r2
 8007a44:	eb19 0005 	adds.w	r0, r9, r5
 8007a48:	eb4a 0106 	adc.w	r1, sl, r6
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	461d      	mov	r5, r3
 8007a52:	f04f 0600 	mov.w	r6, #0
 8007a56:	196b      	adds	r3, r5, r5
 8007a58:	eb46 0406 	adc.w	r4, r6, r6
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4623      	mov	r3, r4
 8007a60:	f7f8 fc06 	bl	8000270 <__aeabi_uldivmod>
 8007a64:	4603      	mov	r3, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <UART_SetConfig+0x384>)
 8007a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	2164      	movs	r1, #100	; 0x64
 8007a74:	fb01 f303 	mul.w	r3, r1, r3
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	3332      	adds	r3, #50	; 0x32
 8007a7e:	4a07      	ldr	r2, [pc, #28]	; (8007a9c <UART_SetConfig+0x384>)
 8007a80:	fba2 2303 	umull	r2, r3, r2, r3
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	f003 0207 	and.w	r2, r3, #7
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4442      	add	r2, r8
 8007a90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007a92:	e1b2      	b.n	8007dfa <UART_SetConfig+0x6e2>
 8007a94:	40011000 	.word	0x40011000
 8007a98:	40011400 	.word	0x40011400
 8007a9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4ad7      	ldr	r2, [pc, #860]	; (8007e04 <UART_SetConfig+0x6ec>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d005      	beq.n	8007ab6 <UART_SetConfig+0x39e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4ad6      	ldr	r2, [pc, #856]	; (8007e08 <UART_SetConfig+0x6f0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	f040 80d1 	bne.w	8007c58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ab6:	f7fe ffb1 	bl	8006a1c <HAL_RCC_GetPCLK2Freq>
 8007aba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	469a      	mov	sl, r3
 8007ac0:	f04f 0b00 	mov.w	fp, #0
 8007ac4:	46d0      	mov	r8, sl
 8007ac6:	46d9      	mov	r9, fp
 8007ac8:	eb18 0308 	adds.w	r3, r8, r8
 8007acc:	eb49 0409 	adc.w	r4, r9, r9
 8007ad0:	4698      	mov	r8, r3
 8007ad2:	46a1      	mov	r9, r4
 8007ad4:	eb18 080a 	adds.w	r8, r8, sl
 8007ad8:	eb49 090b 	adc.w	r9, r9, fp
 8007adc:	f04f 0100 	mov.w	r1, #0
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ae8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007aec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007af0:	4688      	mov	r8, r1
 8007af2:	4691      	mov	r9, r2
 8007af4:	eb1a 0508 	adds.w	r5, sl, r8
 8007af8:	eb4b 0609 	adc.w	r6, fp, r9
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	4619      	mov	r1, r3
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	f04f 0400 	mov.w	r4, #0
 8007b0e:	0094      	lsls	r4, r2, #2
 8007b10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b14:	008b      	lsls	r3, r1, #2
 8007b16:	461a      	mov	r2, r3
 8007b18:	4623      	mov	r3, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	f7f8 fba7 	bl	8000270 <__aeabi_uldivmod>
 8007b22:	4603      	mov	r3, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	461a      	mov	r2, r3
 8007b28:	4bb8      	ldr	r3, [pc, #736]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	469b      	mov	fp, r3
 8007b38:	f04f 0c00 	mov.w	ip, #0
 8007b3c:	46d9      	mov	r9, fp
 8007b3e:	46e2      	mov	sl, ip
 8007b40:	eb19 0309 	adds.w	r3, r9, r9
 8007b44:	eb4a 040a 	adc.w	r4, sl, sl
 8007b48:	4699      	mov	r9, r3
 8007b4a:	46a2      	mov	sl, r4
 8007b4c:	eb19 090b 	adds.w	r9, r9, fp
 8007b50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b54:	f04f 0100 	mov.w	r1, #0
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b68:	4689      	mov	r9, r1
 8007b6a:	4692      	mov	sl, r2
 8007b6c:	eb1b 0509 	adds.w	r5, fp, r9
 8007b70:	eb4c 060a 	adc.w	r6, ip, sl
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	f04f 0400 	mov.w	r4, #0
 8007b86:	0094      	lsls	r4, r2, #2
 8007b88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b8c:	008b      	lsls	r3, r1, #2
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4623      	mov	r3, r4
 8007b92:	4628      	mov	r0, r5
 8007b94:	4631      	mov	r1, r6
 8007b96:	f7f8 fb6b 	bl	8000270 <__aeabi_uldivmod>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4b9a      	ldr	r3, [pc, #616]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2164      	movs	r1, #100	; 0x64
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	3332      	adds	r3, #50	; 0x32
 8007bb4:	4a95      	ldr	r2, [pc, #596]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc0:	4498      	add	r8, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	469b      	mov	fp, r3
 8007bc6:	f04f 0c00 	mov.w	ip, #0
 8007bca:	46d9      	mov	r9, fp
 8007bcc:	46e2      	mov	sl, ip
 8007bce:	eb19 0309 	adds.w	r3, r9, r9
 8007bd2:	eb4a 040a 	adc.w	r4, sl, sl
 8007bd6:	4699      	mov	r9, r3
 8007bd8:	46a2      	mov	sl, r4
 8007bda:	eb19 090b 	adds.w	r9, r9, fp
 8007bde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bf6:	4689      	mov	r9, r1
 8007bf8:	4692      	mov	sl, r2
 8007bfa:	eb1b 0509 	adds.w	r5, fp, r9
 8007bfe:	eb4c 060a 	adc.w	r6, ip, sl
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	4619      	mov	r1, r3
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	f04f 0400 	mov.w	r4, #0
 8007c14:	0094      	lsls	r4, r2, #2
 8007c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c1a:	008b      	lsls	r3, r1, #2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4623      	mov	r3, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	4631      	mov	r1, r6
 8007c24:	f7f8 fb24 	bl	8000270 <__aeabi_uldivmod>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4b77      	ldr	r3, [pc, #476]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007c30:	fba3 1302 	umull	r1, r3, r3, r2
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	2164      	movs	r1, #100	; 0x64
 8007c38:	fb01 f303 	mul.w	r3, r1, r3
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	3332      	adds	r3, #50	; 0x32
 8007c42:	4a72      	ldr	r2, [pc, #456]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007c44:	fba2 2303 	umull	r2, r3, r2, r3
 8007c48:	095b      	lsrs	r3, r3, #5
 8007c4a:	f003 020f 	and.w	r2, r3, #15
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4442      	add	r2, r8
 8007c54:	609a      	str	r2, [r3, #8]
 8007c56:	e0d0      	b.n	8007dfa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fe fecc 	bl	80069f4 <HAL_RCC_GetPCLK1Freq>
 8007c5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	469a      	mov	sl, r3
 8007c62:	f04f 0b00 	mov.w	fp, #0
 8007c66:	46d0      	mov	r8, sl
 8007c68:	46d9      	mov	r9, fp
 8007c6a:	eb18 0308 	adds.w	r3, r8, r8
 8007c6e:	eb49 0409 	adc.w	r4, r9, r9
 8007c72:	4698      	mov	r8, r3
 8007c74:	46a1      	mov	r9, r4
 8007c76:	eb18 080a 	adds.w	r8, r8, sl
 8007c7a:	eb49 090b 	adc.w	r9, r9, fp
 8007c7e:	f04f 0100 	mov.w	r1, #0
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c92:	4688      	mov	r8, r1
 8007c94:	4691      	mov	r9, r2
 8007c96:	eb1a 0508 	adds.w	r5, sl, r8
 8007c9a:	eb4b 0609 	adc.w	r6, fp, r9
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	f04f 0400 	mov.w	r4, #0
 8007cb0:	0094      	lsls	r4, r2, #2
 8007cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cb6:	008b      	lsls	r3, r1, #2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4623      	mov	r3, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	f7f8 fad6 	bl	8000270 <__aeabi_uldivmod>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4b50      	ldr	r3, [pc, #320]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	469b      	mov	fp, r3
 8007cda:	f04f 0c00 	mov.w	ip, #0
 8007cde:	46d9      	mov	r9, fp
 8007ce0:	46e2      	mov	sl, ip
 8007ce2:	eb19 0309 	adds.w	r3, r9, r9
 8007ce6:	eb4a 040a 	adc.w	r4, sl, sl
 8007cea:	4699      	mov	r9, r3
 8007cec:	46a2      	mov	sl, r4
 8007cee:	eb19 090b 	adds.w	r9, r9, fp
 8007cf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cf6:	f04f 0100 	mov.w	r1, #0
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d0a:	4689      	mov	r9, r1
 8007d0c:	4692      	mov	sl, r2
 8007d0e:	eb1b 0509 	adds.w	r5, fp, r9
 8007d12:	eb4c 060a 	adc.w	r6, ip, sl
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	0094      	lsls	r4, r2, #2
 8007d2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d2e:	008b      	lsls	r3, r1, #2
 8007d30:	461a      	mov	r2, r3
 8007d32:	4623      	mov	r3, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	4631      	mov	r1, r6
 8007d38:	f7f8 fa9a 	bl	8000270 <__aeabi_uldivmod>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	461a      	mov	r2, r3
 8007d42:	4b32      	ldr	r3, [pc, #200]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007d44:	fba3 1302 	umull	r1, r3, r3, r2
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	2164      	movs	r1, #100	; 0x64
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	3332      	adds	r3, #50	; 0x32
 8007d56:	4a2d      	ldr	r2, [pc, #180]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d62:	4498      	add	r8, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	469b      	mov	fp, r3
 8007d68:	f04f 0c00 	mov.w	ip, #0
 8007d6c:	46d9      	mov	r9, fp
 8007d6e:	46e2      	mov	sl, ip
 8007d70:	eb19 0309 	adds.w	r3, r9, r9
 8007d74:	eb4a 040a 	adc.w	r4, sl, sl
 8007d78:	4699      	mov	r9, r3
 8007d7a:	46a2      	mov	sl, r4
 8007d7c:	eb19 090b 	adds.w	r9, r9, fp
 8007d80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d84:	f04f 0100 	mov.w	r1, #0
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d98:	4689      	mov	r9, r1
 8007d9a:	4692      	mov	sl, r2
 8007d9c:	eb1b 0509 	adds.w	r5, fp, r9
 8007da0:	eb4c 060a 	adc.w	r6, ip, sl
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	4619      	mov	r1, r3
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	f04f 0400 	mov.w	r4, #0
 8007db6:	0094      	lsls	r4, r2, #2
 8007db8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dbc:	008b      	lsls	r3, r1, #2
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	f7f8 fa53 	bl	8000270 <__aeabi_uldivmod>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	2164      	movs	r1, #100	; 0x64
 8007dda:	fb01 f303 	mul.w	r3, r1, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	3332      	adds	r3, #50	; 0x32
 8007de4:	4a09      	ldr	r2, [pc, #36]	; (8007e0c <UART_SetConfig+0x6f4>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4442      	add	r2, r8
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	e7ff      	b.n	8007dfa <UART_SetConfig+0x6e2>
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	40011000 	.word	0x40011000
 8007e08:	40011400 	.word	0x40011400
 8007e0c:	51eb851f 	.word	0x51eb851f

08007e10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e10:	b084      	sub	sp, #16
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	f107 001c 	add.w	r0, r7, #28
 8007e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d122      	bne.n	8007e6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d105      	bne.n	8007e62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f94a 	bl	80080fc <USB_CoreReset>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	e01a      	b.n	8007ea4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f93e 	bl	80080fc <USB_CoreReset>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
 8007e96:	e005      	b.n	8007ea4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d10b      	bne.n	8007ec2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f043 0206 	orr.w	r2, r3, #6
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f043 0220 	orr.w	r2, r3, #32
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ece:	b004      	add	sp, #16
 8007ed0:	4770      	bx	lr

08007ed2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f043 0201 	orr.w	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f023 0201 	bic.w	r2, r3, #1
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d106      	bne.n	8007f42 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	e00b      	b.n	8007f5a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d106      	bne.n	8007f56 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	e001      	b.n	8007f5a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e003      	b.n	8007f62 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007f5a:	2032      	movs	r0, #50	; 0x32
 8007f5c:	f7f9 fa3a 	bl	80013d4 <HAL_Delay>

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	019b      	lsls	r3, r3, #6
 8007f7e:	f043 0220 	orr.w	r2, r3, #32
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <USB_FlushTxFifo+0x48>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d901      	bls.n	8007f98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e006      	b.n	8007fa6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d0f0      	beq.n	8007f86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	00030d40 	.word	0x00030d40

08007fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <USB_FlushRxFifo+0x40>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d901      	bls.n	8007fdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e006      	b.n	8007fea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d0f0      	beq.n	8007fca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	00030d40 	.word	0x00030d40

08007ffc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b089      	sub	sp, #36	; 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	460b      	mov	r3, r1
 800800c:	71fb      	strb	r3, [r7, #7]
 800800e:	4613      	mov	r3, r2
 8008010:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800801a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d11a      	bne.n	8008058 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008022:	88bb      	ldrh	r3, [r7, #4]
 8008024:	3303      	adds	r3, #3
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]
 800802e:	e00f      	b.n	8008050 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	031a      	lsls	r2, r3, #12
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4413      	add	r3, r2
 8008038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803c:	461a      	mov	r2, r3
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	3304      	adds	r3, #4
 8008048:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	3301      	adds	r3, #1
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d3eb      	bcc.n	8008030 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3724      	adds	r7, #36	; 0x24
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008066:	b480      	push	{r7}
 8008068:	b089      	sub	sp, #36	; 0x24
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	4613      	mov	r3, r2
 8008072:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800807c:	88fb      	ldrh	r3, [r7, #6]
 800807e:	3303      	adds	r3, #3
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008084:	2300      	movs	r3, #0
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	e00b      	b.n	80080a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	601a      	str	r2, [r3, #0]
    pDest++;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3304      	adds	r3, #4
 800809a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	3301      	adds	r3, #1
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d3ef      	bcc.n	800808a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80080aa:	69fb      	ldr	r3, [r7, #28]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3724      	adds	r7, #36	; 0x24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4013      	ands	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080d0:	68fb      	ldr	r3, [r7, #12]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	f003 0301 	and.w	r3, r3, #1
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4a13      	ldr	r2, [pc, #76]	; (8008160 <USB_CoreReset+0x64>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d901      	bls.n	800811a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e01b      	b.n	8008152 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	daf2      	bge.n	8008108 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f043 0201 	orr.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4a09      	ldr	r2, [pc, #36]	; (8008160 <USB_CoreReset+0x64>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d901      	bls.n	8008144 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e006      	b.n	8008152 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	d0f0      	beq.n	8008132 <USB_CoreReset+0x36>

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	00030d40 	.word	0x00030d40

08008164 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008164:	b084      	sub	sp, #16
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	f107 001c 	add.w	r0, r7, #28
 8008172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008180:	461a      	mov	r2, r3
 8008182:	2300      	movs	r3, #0
 8008184:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d10a      	bne.n	80081d2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081ca:	f043 0304 	orr.w	r3, r3, #4
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	e014      	b.n	80081fc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081e0:	f023 0304 	bic.w	r3, r3, #4
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	e009      	b.n	80081fc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081f6:	f023 0304 	bic.w	r3, r3, #4
 80081fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80081fc:	2110      	movs	r1, #16
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff feb4 	bl	8007f6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fed7 	bl	8007fb8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	e015      	b.n	800823c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4413      	add	r3, r2
 8008218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821c:	461a      	mov	r2, r3
 800821e:	f04f 33ff 	mov.w	r3, #4294967295
 8008222:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	4413      	add	r3, r2
 800822c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008230:	461a      	mov	r2, r3
 8008232:	2300      	movs	r3, #0
 8008234:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	429a      	cmp	r2, r3
 8008242:	d3e5      	bcc.n	8008210 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008244:	2101      	movs	r1, #1
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f8ac 	bl	80083a4 <USB_DriveVbus>

  HAL_Delay(200U);
 800824c:	20c8      	movs	r0, #200	; 0xc8
 800824e:	f7f9 f8c1 	bl	80013d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f04f 32ff 	mov.w	r2, #4294967295
 800825e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008272:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a14      	ldr	r2, [pc, #80]	; (80082c8 <USB_HostInit+0x164>)
 8008278:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a13      	ldr	r2, [pc, #76]	; (80082cc <USB_HostInit+0x168>)
 800827e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008282:	e009      	b.n	8008298 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2280      	movs	r2, #128	; 0x80
 8008288:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a10      	ldr	r2, [pc, #64]	; (80082d0 <USB_HostInit+0x16c>)
 800828e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <USB_HostInit+0x170>)
 8008294:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	d105      	bne.n	80082aa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f043 0210 	orr.w	r2, r3, #16
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <USB_HostInit+0x174>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082c2:	b004      	add	sp, #16
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	01000200 	.word	0x01000200
 80082cc:	00e00300 	.word	0x00e00300
 80082d0:	00600080 	.word	0x00600080
 80082d4:	004000e0 	.word	0x004000e0
 80082d8:	a3200008 	.word	0xa3200008

080082dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	68f9      	ldr	r1, [r7, #12]
 8008310:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008314:	4313      	orrs	r3, r2
 8008316:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d107      	bne.n	800832e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008324:	461a      	mov	r2, r3
 8008326:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800832a:	6053      	str	r3, [r2, #4]
 800832c:	e009      	b.n	8008342 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d106      	bne.n	8008342 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800833a:	461a      	mov	r2, r3
 800833c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008340:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008370:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800837a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800837e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008380:	2064      	movs	r0, #100	; 0x64
 8008382:	f7f9 f827 	bl	80013d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800838e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008392:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008394:	200a      	movs	r0, #10
 8008396:	f7f9 f81d 	bl	80013d4 <HAL_Delay>

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <USB_DriveVbus+0x44>
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d106      	bne.n	80083e8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083e6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f2:	d109      	bne.n	8008408 <USB_DriveVbus+0x64>
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008406:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	0c5b      	lsrs	r3, r3, #17
 8008434:	f003 0303 	and.w	r3, r3, #3
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	b29b      	uxth	r3, r3
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	4603      	mov	r3, r0
 8008478:	70fb      	strb	r3, [r7, #3]
 800847a:	460b      	mov	r3, r1
 800847c:	70bb      	strb	r3, [r7, #2]
 800847e:	4613      	mov	r3, r2
 8008480:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4413      	add	r3, r2
 8008492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008496:	461a      	mov	r2, r3
 8008498:	f04f 33ff 	mov.w	r3, #4294967295
 800849c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800849e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d87e      	bhi.n	80085a4 <USB_HC_Init+0x13c>
 80084a6:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <USB_HC_Init+0x44>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	08008567 	.word	0x08008567
 80084b4:	080084bd 	.word	0x080084bd
 80084b8:	08008529 	.word	0x08008529
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c8:	461a      	mov	r2, r3
 80084ca:	f240 439d 	movw	r3, #1181	; 0x49d
 80084ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80084d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	da10      	bge.n	80084fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80084f8:	e057      	b.n	80085aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008502:	2b00      	cmp	r3, #0
 8008504:	d051      	beq.n	80085aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	78fa      	ldrb	r2, [r7, #3]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	440a      	add	r2, r1
 800851c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008520:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008524:	60d3      	str	r3, [r2, #12]
      break;
 8008526:	e040      	b.n	80085aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4413      	add	r3, r2
 8008530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008534:	461a      	mov	r2, r3
 8008536:	f240 639d 	movw	r3, #1693	; 0x69d
 800853a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800853c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008540:	2b00      	cmp	r3, #0
 8008542:	da34      	bge.n	80085ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4413      	add	r3, r2
 800854c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	440a      	add	r2, r1
 800855a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800855e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008562:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008564:	e023      	b.n	80085ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	461a      	mov	r2, r3
 8008574:	f240 2325 	movw	r3, #549	; 0x225
 8008578:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800857a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800857e:	2b00      	cmp	r3, #0
 8008580:	da17      	bge.n	80085b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	440a      	add	r2, r1
 8008598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800859c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80085a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80085a2:	e006      	b.n	80085b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	75fb      	strb	r3, [r7, #23]
      break;
 80085a8:	e004      	b.n	80085b4 <USB_HC_Init+0x14c>
      break;
 80085aa:	bf00      	nop
 80085ac:	e002      	b.n	80085b4 <USB_HC_Init+0x14c>
      break;
 80085ae:	bf00      	nop
 80085b0:	e000      	b.n	80085b4 <USB_HC_Init+0x14c>
      break;
 80085b2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	2101      	movs	r1, #1
 80085c4:	fa01 f303 	lsl.w	r3, r1, r3
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80085ce:	4313      	orrs	r3, r2
 80085d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80085de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da03      	bge.n	80085ee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80085e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	e001      	b.n	80085f2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80085f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d103      	bne.n	8008602 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80085fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	e001      	b.n	8008606 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008606:	787b      	ldrb	r3, [r7, #1]
 8008608:	059b      	lsls	r3, r3, #22
 800860a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800860e:	78bb      	ldrb	r3, [r7, #2]
 8008610:	02db      	lsls	r3, r3, #11
 8008612:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008616:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800861c:	049b      	lsls	r3, r3, #18
 800861e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008622:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008626:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800862a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	0159      	lsls	r1, r3, #5
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	440b      	add	r3, r1
 8008638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008642:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008644:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008648:	2b03      	cmp	r3, #3
 800864a:	d10f      	bne.n	800866c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	440a      	add	r2, r1
 8008662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800866a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
}
 800866e:	4618      	mov	r0, r3
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop

0800867c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08c      	sub	sp, #48	; 0x30
 8008680:	af02      	add	r7, sp, #8
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008698:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d028      	beq.n	80086f8 <USB_HC_StartXfer+0x7c>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d124      	bne.n	80086f8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10b      	bne.n	80086cc <USB_HC_StartXfer+0x50>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	795b      	ldrb	r3, [r3, #5]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d107      	bne.n	80086cc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	4619      	mov	r1, r3
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 fa2e 	bl	8008b24 <USB_DoPing>
      return HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	e112      	b.n	80088f2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d112      	bne.n	80086f8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	6a3a      	ldr	r2, [r7, #32]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80086f0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2200      	movs	r2, #0
 80086f6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d018      	beq.n	8008732 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	8912      	ldrh	r2, [r2, #8]
 8008708:	4413      	add	r3, r2
 800870a:	3b01      	subs	r3, #1
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	8912      	ldrh	r2, [r2, #8]
 8008710:	fbb3 f3f2 	udiv	r3, r3, r2
 8008714:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008716:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008718:	8b7b      	ldrh	r3, [r7, #26]
 800871a:	429a      	cmp	r2, r3
 800871c:	d90b      	bls.n	8008736 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800871e:	8b7b      	ldrh	r3, [r7, #26]
 8008720:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008722:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	8912      	ldrh	r2, [r2, #8]
 8008728:	fb02 f203 	mul.w	r2, r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	611a      	str	r2, [r3, #16]
 8008730:	e001      	b.n	8008736 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008732:	2301      	movs	r3, #1
 8008734:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	78db      	ldrb	r3, [r3, #3]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d006      	beq.n	800874c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800873e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	8912      	ldrh	r2, [r2, #8]
 8008744:	fb02 f203 	mul.w	r2, r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008754:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008756:	04d9      	lsls	r1, r3, #19
 8008758:	4b68      	ldr	r3, [pc, #416]	; (80088fc <USB_HC_StartXfer+0x280>)
 800875a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800875c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	7a9b      	ldrb	r3, [r3, #10]
 8008762:	075b      	lsls	r3, r3, #29
 8008764:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008768:	69f9      	ldr	r1, [r7, #28]
 800876a:	0148      	lsls	r0, r1, #5
 800876c:	6a39      	ldr	r1, [r7, #32]
 800876e:	4401      	add	r1, r0
 8008770:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008774:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008776:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	68d9      	ldr	r1, [r3, #12]
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	4413      	add	r3, r2
 800878a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878e:	460a      	mov	r2, r1
 8008790:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bf0c      	ite	eq
 80087a2:	2301      	moveq	r3, #1
 80087a4:	2300      	movne	r3, #0
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	7e7b      	ldrb	r3, [r7, #25]
 80087da:	075b      	lsls	r3, r3, #29
 80087dc:	69f9      	ldr	r1, [r7, #28]
 80087de:	0148      	lsls	r0, r1, #5
 80087e0:	6a39      	ldr	r1, [r7, #32]
 80087e2:	4401      	add	r1, r0
 80087e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80087e8:	4313      	orrs	r3, r2
 80087ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a41      	ldr	r2, [pc, #260]	; (8008900 <USB_HC_StartXfer+0x284>)
 80087fc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087fe:	4b40      	ldr	r3, [pc, #256]	; (8008900 <USB_HC_StartXfer+0x284>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008806:	4a3e      	ldr	r2, [pc, #248]	; (8008900 <USB_HC_StartXfer+0x284>)
 8008808:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	78db      	ldrb	r3, [r3, #3]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008812:	4b3b      	ldr	r3, [pc, #236]	; (8008900 <USB_HC_StartXfer+0x284>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881a:	4a39      	ldr	r2, [pc, #228]	; (8008900 <USB_HC_StartXfer+0x284>)
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	e005      	b.n	800882c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008820:	4b37      	ldr	r3, [pc, #220]	; (8008900 <USB_HC_StartXfer+0x284>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008828:	4a35      	ldr	r2, [pc, #212]	; (8008900 <USB_HC_StartXfer+0x284>)
 800882a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800882c:	4b34      	ldr	r3, [pc, #208]	; (8008900 <USB_HC_StartXfer+0x284>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008834:	4a32      	ldr	r2, [pc, #200]	; (8008900 <USB_HC_StartXfer+0x284>)
 8008836:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	4413      	add	r3, r2
 8008840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008844:	461a      	mov	r2, r3
 8008846:	4b2e      	ldr	r3, [pc, #184]	; (8008900 <USB_HC_StartXfer+0x284>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d14e      	bne.n	80088f0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	78db      	ldrb	r3, [r3, #3]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d14a      	bne.n	80088f0 <USB_HC_StartXfer+0x274>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d046      	beq.n	80088f0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	79db      	ldrb	r3, [r3, #7]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d830      	bhi.n	80088cc <USB_HC_StartXfer+0x250>
 800886a:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <USB_HC_StartXfer+0x1f4>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008881 	.word	0x08008881
 8008874:	080088a5 	.word	0x080088a5
 8008878:	08008881 	.word	0x08008881
 800887c:	080088a5 	.word	0x080088a5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	3303      	adds	r3, #3
 8008886:	089b      	lsrs	r3, r3, #2
 8008888:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800888a:	8afa      	ldrh	r2, [r7, #22]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	b29b      	uxth	r3, r3
 8008892:	429a      	cmp	r2, r3
 8008894:	d91c      	bls.n	80088d0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	f043 0220 	orr.w	r2, r3, #32
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	619a      	str	r2, [r3, #24]
          }
          break;
 80088a2:	e015      	b.n	80088d0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	3303      	adds	r3, #3
 80088aa:	089b      	lsrs	r3, r3, #2
 80088ac:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80088ae:	8afa      	ldrh	r2, [r7, #22]
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d90a      	bls.n	80088d4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	619a      	str	r2, [r3, #24]
          }
          break;
 80088ca:	e003      	b.n	80088d4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80088cc:	bf00      	nop
 80088ce:	e002      	b.n	80088d6 <USB_HC_StartXfer+0x25a>
          break;
 80088d0:	bf00      	nop
 80088d2:	e000      	b.n	80088d6 <USB_HC_StartXfer+0x25a>
          break;
 80088d4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	68d9      	ldr	r1, [r3, #12]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	785a      	ldrb	r2, [r3, #1]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	b298      	uxth	r0, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4603      	mov	r3, r0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7ff fb86 	bl	8007ffc <USB_WritePacket>
    }
  }

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3728      	adds	r7, #40	; 0x28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	1ff80000 	.word	0x1ff80000
 8008900:	200000b0 	.word	0x200000b0

08008904 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	b29b      	uxth	r3, r3
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008926:	b480      	push	{r7}
 8008928:	b087      	sub	sp, #28
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	4413      	add	r3, r2
 8008946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	0c9b      	lsrs	r3, r3, #18
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <USB_HC_Halt+0x3a>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d16c      	bne.n	8008a3a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	4413      	add	r3, r2
 8008968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	440a      	add	r2, r1
 8008976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800897a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800897e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d143      	bne.n	8008a14 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	4413      	add	r3, r2
 8008994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	0151      	lsls	r1, r2, #5
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	440a      	add	r2, r1
 80089e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	3301      	adds	r3, #1
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089f8:	d81d      	bhi.n	8008a36 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a10:	d0ec      	beq.n	80089ec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a12:	e080      	b.n	8008b16 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	0151      	lsls	r1, r2, #5
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	440a      	add	r2, r1
 8008a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a32:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a34:	e06f      	b.n	8008b16 <USB_HC_Halt+0x1f0>
          break;
 8008a36:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a38:	e06d      	b.n	8008b16 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a58:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d143      	bne.n	8008af2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a88:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	0151      	lsls	r1, r2, #5
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ac8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	3301      	adds	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ad6:	d81d      	bhi.n	8008b14 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aee:	d0ec      	beq.n	8008aca <USB_HC_Halt+0x1a4>
 8008af0:	e011      	b.n	8008b16 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	0151      	lsls	r1, r2, #5
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	440a      	add	r2, r1
 8008b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	e000      	b.n	8008b16 <USB_HC_Halt+0x1f0>
          break;
 8008b14:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	04da      	lsls	r2, r3, #19
 8008b40:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <USB_DoPing+0x74>)
 8008b42:	4013      	ands	r3, r2
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	0151      	lsls	r1, r2, #5
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	440a      	add	r2, r1
 8008b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b54:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b6c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b82:	461a      	mov	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	1ff80000 	.word	0x1ff80000

08008b9c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff f9a1 	bl	8007ef4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008bb2:	2110      	movs	r1, #16
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff f9d9 	bl	8007f6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff f9fc 	bl	8007fb8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	613b      	str	r3, [r7, #16]
 8008bc4:	e01f      	b.n	8008c06 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bdc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3301      	adds	r3, #1
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b0f      	cmp	r3, #15
 8008c0a:	d9dc      	bls.n	8008bc6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	e034      	b.n	8008c7c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c46:	461a      	mov	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c58:	d80c      	bhi.n	8008c74 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c70:	d0ec      	beq.n	8008c4c <USB_StopHost+0xb0>
 8008c72:	e000      	b.n	8008c76 <USB_StopHost+0xda>
        break;
 8008c74:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b0f      	cmp	r3, #15
 8008c80:	d9c7      	bls.n	8008c12 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295
 8008c96:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff f91a 	bl	8007ed2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ca8:	b590      	push	{r4, r7, lr}
 8008caa:	b089      	sub	sp, #36	; 0x24
 8008cac:	af04      	add	r7, sp, #16
 8008cae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	2102      	movs	r1, #2
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fc68 	bl	800958c <USBH_FindInterface>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2bff      	cmp	r3, #255	; 0xff
 8008cc4:	d002      	beq.n	8008ccc <USBH_CDC_InterfaceInit+0x24>
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d901      	bls.n	8008cd0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e13d      	b.n	8008f4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fc3d 	bl	8009554 <USBH_SelectInterface>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e131      	b.n	8008f4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008cee:	2050      	movs	r0, #80	; 0x50
 8008cf0:	f002 fa04 	bl	800b0fc <malloc>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e11f      	b.n	8008f4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008d0c:	2250      	movs	r2, #80	; 0x50
 8008d0e:	2100      	movs	r1, #0
 8008d10:	68b8      	ldr	r0, [r7, #8]
 8008d12:	f002 fa03 	bl	800b11c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	211a      	movs	r1, #26
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	b25b      	sxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	da15      	bge.n	8008d5a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	211a      	movs	r1, #26
 8008d34:	fb01 f303 	mul.w	r3, r1, r3
 8008d38:	4413      	add	r3, r2
 8008d3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d3e:	781a      	ldrb	r2, [r3, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	211a      	movs	r1, #26
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d54:	881a      	ldrh	r2, [r3, #0]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 fe36 	bl	800a9d2 <USBH_AllocPipe>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461a      	mov	r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	7819      	ldrb	r1, [r3, #0]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	7858      	ldrb	r0, [r3, #1]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	8952      	ldrh	r2, [r2, #10]
 8008d86:	9202      	str	r2, [sp, #8]
 8008d88:	2203      	movs	r2, #3
 8008d8a:	9201      	str	r2, [sp, #4]
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4623      	mov	r3, r4
 8008d90:	4602      	mov	r2, r0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fdee 	bl	800a974 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f002 f8fb 	bl	800af9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008da6:	2300      	movs	r3, #0
 8008da8:	2200      	movs	r2, #0
 8008daa:	210a      	movs	r1, #10
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fbed 	bl	800958c <USBH_FindInterface>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2bff      	cmp	r3, #255	; 0xff
 8008dba:	d002      	beq.n	8008dc2 <USBH_CDC_InterfaceInit+0x11a>
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d901      	bls.n	8008dc6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e0c2      	b.n	8008f4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	211a      	movs	r1, #26
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da16      	bge.n	8008e0c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	211a      	movs	r1, #26
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	4413      	add	r3, r2
 8008dea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	211a      	movs	r1, #26
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e04:	881a      	ldrh	r2, [r3, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	835a      	strh	r2, [r3, #26]
 8008e0a:	e015      	b.n	8008e38 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	211a      	movs	r1, #26
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e1c:	781a      	ldrb	r2, [r3, #0]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	211a      	movs	r1, #26
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e32:	881a      	ldrh	r2, [r3, #0]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	211a      	movs	r1, #26
 8008e3e:	fb01 f303 	mul.w	r3, r1, r3
 8008e42:	4413      	add	r3, r2
 8008e44:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b25b      	sxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	da16      	bge.n	8008e7e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	211a      	movs	r1, #26
 8008e56:	fb01 f303 	mul.w	r3, r1, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	211a      	movs	r1, #26
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e76:	881a      	ldrh	r2, [r3, #0]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	835a      	strh	r2, [r3, #26]
 8008e7c:	e015      	b.n	8008eaa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	211a      	movs	r1, #26
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	211a      	movs	r1, #26
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008ea4:	881a      	ldrh	r2, [r3, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	7b9b      	ldrb	r3, [r3, #14]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f001 fd8e 	bl	800a9d2 <USBH_AllocPipe>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	7bdb      	ldrb	r3, [r3, #15]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 fd84 	bl	800a9d2 <USBH_AllocPipe>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	461a      	mov	r2, r3
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	7b59      	ldrb	r1, [r3, #13]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	7b98      	ldrb	r0, [r3, #14]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	8b12      	ldrh	r2, [r2, #24]
 8008eea:	9202      	str	r2, [sp, #8]
 8008eec:	2202      	movs	r2, #2
 8008eee:	9201      	str	r2, [sp, #4]
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	4623      	mov	r3, r4
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 fd3c 	bl	800a974 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	7b19      	ldrb	r1, [r3, #12]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	7bd8      	ldrb	r0, [r3, #15]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	8b52      	ldrh	r2, [r2, #26]
 8008f14:	9202      	str	r2, [sp, #8]
 8008f16:	2202      	movs	r2, #2
 8008f18:	9201      	str	r2, [sp, #4]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	4602      	mov	r2, r0
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fd27 	bl	800a974 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	7b5b      	ldrb	r3, [r3, #13]
 8008f32:	2200      	movs	r2, #0
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f002 f830 	bl	800af9c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	7b1b      	ldrb	r3, [r3, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f002 f829 	bl	800af9c <USBH_LL_SetToggle>

  return USBH_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd90      	pop	{r4, r7, pc}

08008f54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00e      	beq.n	8008f8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fd1c 	bl	800a9b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 fd47 	bl	800aa14 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	7b1b      	ldrb	r3, [r3, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00e      	beq.n	8008fb2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	7b1b      	ldrb	r3, [r3, #12]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f001 fd09 	bl	800a9b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	7b1b      	ldrb	r3, [r3, #12]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fd34 	bl	800aa14 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	7b5b      	ldrb	r3, [r3, #13]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00e      	beq.n	8008fd8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	7b5b      	ldrb	r3, [r3, #13]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 fcf6 	bl	800a9b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	7b5b      	ldrb	r3, [r3, #13]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 fd21 	bl	800aa14 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00b      	beq.n	8008ffc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f002 f88d 	bl	800b10c <free>
    phost->pActiveClass->pData = 0U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3340      	adds	r3, #64	; 0x40
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f8b1 	bl	8009186 <GetLineCoding>
 8009024:	4603      	mov	r3, r0
 8009026:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d105      	bne.n	800903a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009034:	2102      	movs	r1, #2
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800903a:	7afb      	ldrb	r3, [r7, #11]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800904c:	2301      	movs	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009064:	2b04      	cmp	r3, #4
 8009066:	d877      	bhi.n	8009158 <USBH_CDC_Process+0x114>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USBH_CDC_Process+0x2c>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	08009085 	.word	0x08009085
 8009074:	0800908b 	.word	0x0800908b
 8009078:	080090bb 	.word	0x080090bb
 800907c:	0800912f 	.word	0x0800912f
 8009080:	0800913d 	.word	0x0800913d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
      break;
 8009088:	e06d      	b.n	8009166 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f897 	bl	80091c4 <SetLineCoding>
 8009096:	4603      	mov	r3, r0
 8009098:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80090a8:	e058      	b.n	800915c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d055      	beq.n	800915c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2204      	movs	r2, #4
 80090b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80090b8:	e050      	b.n	800915c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	3340      	adds	r3, #64	; 0x40
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f860 	bl	8009186 <GetLineCoding>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d126      	bne.n	800911e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e2:	791b      	ldrb	r3, [r3, #4]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d13b      	bne.n	8009160 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d133      	bne.n	8009160 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009102:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009104:	429a      	cmp	r2, r3
 8009106:	d12b      	bne.n	8009160 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009110:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009112:	429a      	cmp	r2, r3
 8009114:	d124      	bne.n	8009160 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f95a 	bl	80093d0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800911c:	e020      	b.n	8009160 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d01d      	beq.n	8009160 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2204      	movs	r2, #4
 8009128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800912c:	e018      	b.n	8009160 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f867 	bl	8009202 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f8dc 	bl	80092f2 <CDC_ProcessReception>
      break;
 800913a:	e014      	b.n	8009166 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800913c:	2100      	movs	r1, #0
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 ffe5 	bl	800a10e <USBH_ClrFeature>
 8009144:	4603      	mov	r3, r0
 8009146:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009156:	e005      	b.n	8009164 <USBH_CDC_Process+0x120>

    default:
      break;
 8009158:	bf00      	nop
 800915a:	e004      	b.n	8009166 <USBH_CDC_Process+0x122>
      break;
 800915c:	bf00      	nop
 800915e:	e002      	b.n	8009166 <USBH_CDC_Process+0x122>
      break;
 8009160:	bf00      	nop
 8009162:	e000      	b.n	8009166 <USBH_CDC_Process+0x122>
      break;
 8009164:	bf00      	nop

  }

  return status;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	22a1      	movs	r2, #161	; 0xa1
 8009194:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2221      	movs	r2, #33	; 0x21
 800919a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2207      	movs	r2, #7
 80091ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2207      	movs	r2, #7
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f98a 	bl	800a4ce <USBH_CtlReq>
 80091ba:	4603      	mov	r3, r0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2221      	movs	r2, #33	; 0x21
 80091d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2220      	movs	r2, #32
 80091d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2207      	movs	r2, #7
 80091ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2207      	movs	r2, #7
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 f96b 	bl	800a4ce <USBH_CtlReq>
 80091f8:	4603      	mov	r3, r0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af02      	add	r7, sp, #8
 8009208:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009214:	2300      	movs	r3, #0
 8009216:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800921e:	2b01      	cmp	r3, #1
 8009220:	d002      	beq.n	8009228 <CDC_ProcessTransmission+0x26>
 8009222:	2b02      	cmp	r3, #2
 8009224:	d025      	beq.n	8009272 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8009226:	e060      	b.n	80092ea <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	8b12      	ldrh	r2, [r2, #24]
 8009230:	4293      	cmp	r3, r2
 8009232:	d90c      	bls.n	800924e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	69d9      	ldr	r1, [r3, #28]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8b1a      	ldrh	r2, [r3, #24]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	7b58      	ldrb	r0, [r3, #13]
 8009240:	2301      	movs	r3, #1
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	4603      	mov	r3, r0
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fb51 	bl	800a8ee <USBH_BulkSendData>
 800924c:	e00c      	b.n	8009268 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	7b58      	ldrb	r0, [r3, #13]
 800925c:	2301      	movs	r3, #1
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4603      	mov	r3, r0
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 fb43 	bl	800a8ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009270:	e03b      	b.n	80092ea <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	7b5b      	ldrb	r3, [r3, #13]
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f001 fe65 	bl	800af48 <USBH_LL_GetURBState>
 800927e:	4603      	mov	r3, r0
 8009280:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009282:	7afb      	ldrb	r3, [r7, #11]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d128      	bne.n	80092da <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	8b12      	ldrh	r2, [r2, #24]
 8009290:	4293      	cmp	r3, r2
 8009292:	d90e      	bls.n	80092b2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	8b12      	ldrh	r2, [r2, #24]
 800929c:	1a9a      	subs	r2, r3, r2
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	8b12      	ldrh	r2, [r2, #24]
 80092aa:	441a      	add	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	61da      	str	r2, [r3, #28]
 80092b0:	e002      	b.n	80092b8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d004      	beq.n	80092ca <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092c8:	e00e      	b.n	80092e8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f868 	bl	80093a8 <USBH_CDC_TransmitCallback>
      break;
 80092d8:	e006      	b.n	80092e8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80092da:	7afb      	ldrb	r3, [r7, #11]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d103      	bne.n	80092e8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80092e8:	bf00      	nop
  }
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b086      	sub	sp, #24
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009304:	2300      	movs	r3, #0
 8009306:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800930e:	2b03      	cmp	r3, #3
 8009310:	d002      	beq.n	8009318 <CDC_ProcessReception+0x26>
 8009312:	2b04      	cmp	r3, #4
 8009314:	d00e      	beq.n	8009334 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009316:	e043      	b.n	80093a0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	6a19      	ldr	r1, [r3, #32]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	8b5a      	ldrh	r2, [r3, #26]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	7b1b      	ldrb	r3, [r3, #12]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fb07 	bl	800a938 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2204      	movs	r2, #4
 800932e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009332:	e035      	b.n	80093a0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	7b1b      	ldrb	r3, [r3, #12]
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f001 fe04 	bl	800af48 <USBH_LL_GetURBState>
 8009340:	4603      	mov	r3, r0
 8009342:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009344:	7cfb      	ldrb	r3, [r7, #19]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d129      	bne.n	800939e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	7b1b      	ldrb	r3, [r3, #12]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 fd67 	bl	800ae24 <USBH_LL_GetLastXferSize>
 8009356:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	429a      	cmp	r2, r3
 8009360:	d016      	beq.n	8009390 <CDC_ProcessReception+0x9e>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	8b5b      	ldrh	r3, [r3, #26]
 8009366:	461a      	mov	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4293      	cmp	r3, r2
 800936c:	d910      	bls.n	8009390 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	1ad2      	subs	r2, r2, r3
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	6a1a      	ldr	r2, [r3, #32]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	441a      	add	r2, r3
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2203      	movs	r2, #3
 800938a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800938e:	e006      	b.n	800939e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f80f 	bl	80093bc <USBH_CDC_ReceiveCallback>
      break;
 800939e:	bf00      	nop
  }
}
 80093a0:	bf00      	nop
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80093f8:	2302      	movs	r3, #2
 80093fa:	e029      	b.n	8009450 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	79fa      	ldrb	r2, [r7, #7]
 8009400:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 f81f 	bl	8009458 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f001 fc39 	bl	800acc0 <USBH_LL_Init>

  return USBH_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e009      	b.n	800947e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	33e0      	adds	r3, #224	; 0xe0
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	2200      	movs	r2, #0
 8009476:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3301      	adds	r3, #1
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b0e      	cmp	r3, #14
 8009482:	d9f2      	bls.n	800946a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009484:	2300      	movs	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e009      	b.n	800949e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3301      	adds	r3, #1
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094a4:	d3f1      	bcc.n	800948a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2240      	movs	r2, #64	; 0x40
 80094ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d016      	beq.n	8009542 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10e      	bne.n	800953c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009524:	1c59      	adds	r1, r3, #1
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	33de      	adds	r3, #222	; 0xde
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
 800953a:	e004      	b.n	8009546 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800953c:	2302      	movs	r3, #2
 800953e:	73fb      	strb	r3, [r7, #15]
 8009540:	e001      	b.n	8009546 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009542:	2302      	movs	r3, #2
 8009544:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	429a      	cmp	r2, r3
 800956e:	d204      	bcs.n	800957a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009578:	e001      	b.n	800957e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800957a:	2302      	movs	r3, #2
 800957c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	461a      	mov	r2, r3
 800959a:	4603      	mov	r3, r0
 800959c:	70fb      	strb	r3, [r7, #3]
 800959e:	460b      	mov	r3, r1
 80095a0:	70bb      	strb	r3, [r7, #2]
 80095a2:	4613      	mov	r3, r2
 80095a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80095b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80095b6:	e025      	b.n	8009604 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	221a      	movs	r2, #26
 80095bc:	fb02 f303 	mul.w	r3, r2, r3
 80095c0:	3308      	adds	r3, #8
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	4413      	add	r3, r2
 80095c6:	3302      	adds	r3, #2
 80095c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	795b      	ldrb	r3, [r3, #5]
 80095ce:	78fa      	ldrb	r2, [r7, #3]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d002      	beq.n	80095da <USBH_FindInterface+0x4e>
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	2bff      	cmp	r3, #255	; 0xff
 80095d8:	d111      	bne.n	80095fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095de:	78ba      	ldrb	r2, [r7, #2]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d002      	beq.n	80095ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095e4:	78bb      	ldrb	r3, [r7, #2]
 80095e6:	2bff      	cmp	r3, #255	; 0xff
 80095e8:	d109      	bne.n	80095fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095ee:	787a      	ldrb	r2, [r7, #1]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d002      	beq.n	80095fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095f4:	787b      	ldrb	r3, [r7, #1]
 80095f6:	2bff      	cmp	r3, #255	; 0xff
 80095f8:	d101      	bne.n	80095fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	e006      	b.n	800960c <USBH_FindInterface+0x80>
    }
    if_ix++;
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	3301      	adds	r3, #1
 8009602:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d9d6      	bls.n	80095b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800960a:	23ff      	movs	r3, #255	; 0xff
}
 800960c:	4618      	mov	r0, r3
 800960e:	371c      	adds	r7, #28
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 fb89 	bl	800ad38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009626:	2101      	movs	r1, #1
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 fca0 	bl	800af6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af04      	add	r7, sp, #16
 800963e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009640:	2302      	movs	r3, #2
 8009642:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b01      	cmp	r3, #1
 8009652:	d102      	bne.n	800965a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2203      	movs	r2, #3
 8009658:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b0b      	cmp	r3, #11
 8009662:	f200 81b3 	bhi.w	80099cc <USBH_Process+0x394>
 8009666:	a201      	add	r2, pc, #4	; (adr r2, 800966c <USBH_Process+0x34>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	0800969d 	.word	0x0800969d
 8009670:	080096cf 	.word	0x080096cf
 8009674:	08009737 	.word	0x08009737
 8009678:	08009967 	.word	0x08009967
 800967c:	080099cd 	.word	0x080099cd
 8009680:	080097db 	.word	0x080097db
 8009684:	0800990d 	.word	0x0800990d
 8009688:	08009811 	.word	0x08009811
 800968c:	08009831 	.word	0x08009831
 8009690:	08009851 	.word	0x08009851
 8009694:	0800987f 	.word	0x0800987f
 8009698:	0800994f 	.word	0x0800994f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 8193 	beq.w	80099d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80096b0:	20c8      	movs	r0, #200	; 0xc8
 80096b2:	f001 fca6 	bl	800b002 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fb99 	bl	800adee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80096cc:	e180      	b.n	80099d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d107      	bne.n	80096e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096e6:	e182      	b.n	80099ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80096ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096f2:	d914      	bls.n	800971e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80096fa:	3301      	adds	r3, #1
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800970a:	2b03      	cmp	r3, #3
 800970c:	d903      	bls.n	8009716 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	220d      	movs	r2, #13
 8009712:	701a      	strb	r2, [r3, #0]
      break;
 8009714:	e16b      	b.n	80099ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
      break;
 800971c:	e167      	b.n	80099ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009724:	f103 020a 	add.w	r2, r3, #10
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800972e:	200a      	movs	r0, #10
 8009730:	f001 fc67 	bl	800b002 <USBH_Delay>
      break;
 8009734:	e15b      	b.n	80099ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009746:	2104      	movs	r1, #4
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800974c:	2064      	movs	r0, #100	; 0x64
 800974e:	f001 fc58 	bl	800b002 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 fb26 	bl	800ada4 <USBH_LL_GetSpeed>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2205      	movs	r2, #5
 8009766:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009768:	2100      	movs	r1, #0
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 f931 	bl	800a9d2 <USBH_AllocPipe>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009778:	2180      	movs	r1, #128	; 0x80
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 f929 	bl	800a9d2 <USBH_AllocPipe>
 8009780:	4603      	mov	r3, r0
 8009782:	461a      	mov	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	7919      	ldrb	r1, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800979c:	b292      	uxth	r2, r2
 800979e:	9202      	str	r2, [sp, #8]
 80097a0:	2200      	movs	r2, #0
 80097a2:	9201      	str	r2, [sp, #4]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	4603      	mov	r3, r0
 80097a8:	2280      	movs	r2, #128	; 0x80
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f001 f8e2 	bl	800a974 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	7959      	ldrb	r1, [r3, #5]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80097c4:	b292      	uxth	r2, r2
 80097c6:	9202      	str	r2, [sp, #8]
 80097c8:	2200      	movs	r2, #0
 80097ca:	9201      	str	r2, [sp, #4]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	4603      	mov	r3, r0
 80097d0:	2200      	movs	r2, #0
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 f8ce 	bl	800a974 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097d8:	e109      	b.n	80099ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f90c 	bl	80099f8 <USBH_HandleEnum>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f040 80f3 	bne.w	80099d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d103      	bne.n	8009808 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2208      	movs	r2, #8
 8009804:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009806:	e0e5      	b.n	80099d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2207      	movs	r2, #7
 800980c:	701a      	strb	r2, [r3, #0]
      break;
 800980e:	e0e1      	b.n	80099d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 80de 	beq.w	80099d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009822:	2101      	movs	r1, #1
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2208      	movs	r2, #8
 800982c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800982e:	e0d3      	b.n	80099d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009836:	b29b      	uxth	r3, r3
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fc20 	bl	800a080 <USBH_SetCfg>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	f040 80ca 	bne.w	80099dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2209      	movs	r2, #9
 800984c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800984e:	e0c5      	b.n	80099dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00b      	beq.n	8009876 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800985e:	2101      	movs	r1, #1
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fc30 	bl	800a0c6 <USBH_SetFeature>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 80b9 	bne.w	80099e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	220a      	movs	r2, #10
 8009872:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009874:	e0b4      	b.n	80099e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	220a      	movs	r2, #10
 800987a:	701a      	strb	r2, [r3, #0]
      break;
 800987c:	e0b0      	b.n	80099e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 80ad 	beq.w	80099e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
 8009896:	e016      	b.n	80098c6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009898:	7bfa      	ldrb	r2, [r7, #15]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32de      	adds	r2, #222	; 0xde
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	791a      	ldrb	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d108      	bne.n	80098c0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80098ae:	7bfa      	ldrb	r2, [r7, #15]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	32de      	adds	r2, #222	; 0xde
 80098b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80098be:	e005      	b.n	80098cc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	3301      	adds	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0e5      	beq.n	8009898 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d016      	beq.n	8009904 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	4798      	blx	r3
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2206      	movs	r2, #6
 80098ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098f4:	2103      	movs	r1, #3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098fa:	e073      	b.n	80099e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	220d      	movs	r2, #13
 8009900:	701a      	strb	r2, [r3, #0]
      break;
 8009902:	e06f      	b.n	80099e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	220d      	movs	r2, #13
 8009908:	701a      	strb	r2, [r3, #0]
      break;
 800990a:	e06b      	b.n	80099e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009912:	2b00      	cmp	r3, #0
 8009914:	d017      	beq.n	8009946 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
 8009922:	4603      	mov	r3, r0
 8009924:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009926:	7bbb      	ldrb	r3, [r7, #14]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d103      	bne.n	8009936 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	220b      	movs	r2, #11
 8009932:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009934:	e058      	b.n	80099e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d154      	bne.n	80099e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	220d      	movs	r2, #13
 8009942:	701a      	strb	r2, [r3, #0]
      break;
 8009944:	e050      	b.n	80099e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	220d      	movs	r2, #13
 800994a:	701a      	strb	r2, [r3, #0]
      break;
 800994c:	e04c      	b.n	80099e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009954:	2b00      	cmp	r3, #0
 8009956:	d049      	beq.n	80099ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	4798      	blx	r3
      }
      break;
 8009964:	e042      	b.n	80099ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff fd72 	bl	8009458 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099a2:	2105      	movs	r1, #5
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d107      	bne.n	80099c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff fe2b 	bl	8009618 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099c2:	e014      	b.n	80099ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f9b7 	bl	800ad38 <USBH_LL_Start>
      break;
 80099ca:	e010      	b.n	80099ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80099cc:	bf00      	nop
 80099ce:	e00e      	b.n	80099ee <USBH_Process+0x3b6>
      break;
 80099d0:	bf00      	nop
 80099d2:	e00c      	b.n	80099ee <USBH_Process+0x3b6>
      break;
 80099d4:	bf00      	nop
 80099d6:	e00a      	b.n	80099ee <USBH_Process+0x3b6>
    break;
 80099d8:	bf00      	nop
 80099da:	e008      	b.n	80099ee <USBH_Process+0x3b6>
      break;
 80099dc:	bf00      	nop
 80099de:	e006      	b.n	80099ee <USBH_Process+0x3b6>
      break;
 80099e0:	bf00      	nop
 80099e2:	e004      	b.n	80099ee <USBH_Process+0x3b6>
      break;
 80099e4:	bf00      	nop
 80099e6:	e002      	b.n	80099ee <USBH_Process+0x3b6>
      break;
 80099e8:	bf00      	nop
 80099ea:	e000      	b.n	80099ee <USBH_Process+0x3b6>
      break;
 80099ec:	bf00      	nop
  }
  return USBH_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b088      	sub	sp, #32
 80099fc:	af04      	add	r7, sp, #16
 80099fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009a00:	2301      	movs	r3, #1
 8009a02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009a04:	2301      	movs	r3, #1
 8009a06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	785b      	ldrb	r3, [r3, #1]
 8009a0c:	2b07      	cmp	r3, #7
 8009a0e:	f200 81c1 	bhi.w	8009d94 <USBH_HandleEnum+0x39c>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <USBH_HandleEnum+0x20>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a39 	.word	0x08009a39
 8009a1c:	08009af7 	.word	0x08009af7
 8009a20:	08009b61 	.word	0x08009b61
 8009a24:	08009bef 	.word	0x08009bef
 8009a28:	08009c59 	.word	0x08009c59
 8009a2c:	08009cc9 	.word	0x08009cc9
 8009a30:	08009d0f 	.word	0x08009d0f
 8009a34:	08009d55 	.word	0x08009d55
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009a38:	2108      	movs	r1, #8
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa50 	bl	8009ee0 <USBH_Get_DevDesc>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d130      	bne.n	8009aac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	7919      	ldrb	r1, [r3, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a6e:	b292      	uxth	r2, r2
 8009a70:	9202      	str	r2, [sp, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	9201      	str	r2, [sp, #4]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2280      	movs	r2, #128	; 0x80
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 ff79 	bl	800a974 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7959      	ldrb	r1, [r3, #5]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a96:	b292      	uxth	r2, r2
 8009a98:	9202      	str	r2, [sp, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	9201      	str	r2, [sp, #4]
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 ff65 	bl	800a974 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009aaa:	e175      	b.n	8009d98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	f040 8172 	bne.w	8009d98 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aba:	3301      	adds	r3, #1
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d903      	bls.n	8009ad6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	220d      	movs	r2, #13
 8009ad2:	701a      	strb	r2, [r3, #0]
      break;
 8009ad4:	e160      	b.n	8009d98 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	795b      	ldrb	r3, [r3, #5]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 ff99 	bl	800aa14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	791b      	ldrb	r3, [r3, #4]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 ff93 	bl	800aa14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
      break;
 8009af4:	e150      	b.n	8009d98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009af6:	2112      	movs	r1, #18
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f9f1 	bl	8009ee0 <USBH_Get_DevDesc>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d103      	bne.n	8009b10 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b0e:	e145      	b.n	8009d9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	f040 8142 	bne.w	8009d9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b1e:	3301      	adds	r3, #1
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d903      	bls.n	8009b3a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	220d      	movs	r2, #13
 8009b36:	701a      	strb	r2, [r3, #0]
      break;
 8009b38:	e130      	b.n	8009d9c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	795b      	ldrb	r3, [r3, #5]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 ff67 	bl	800aa14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	791b      	ldrb	r3, [r3, #4]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 ff61 	bl	800aa14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]
      break;
 8009b5e:	e11d      	b.n	8009d9c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009b60:	2101      	movs	r1, #1
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa68 	bl	800a038 <USBH_SetAddress>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b6c:	7bbb      	ldrb	r3, [r7, #14]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d132      	bne.n	8009bd8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009b72:	2002      	movs	r0, #2
 8009b74:	f001 fa45 	bl	800b002 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2203      	movs	r2, #3
 8009b84:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7919      	ldrb	r1, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	9202      	str	r2, [sp, #8]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	9201      	str	r2, [sp, #4]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2280      	movs	r2, #128	; 0x80
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fee3 	bl	800a974 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	7959      	ldrb	r1, [r3, #5]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009bc2:	b292      	uxth	r2, r2
 8009bc4:	9202      	str	r2, [sp, #8]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	9201      	str	r2, [sp, #4]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2200      	movs	r2, #0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fecf 	bl	800a974 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009bd6:	e0e3      	b.n	8009da0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	f040 80e0 	bne.w	8009da0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	220d      	movs	r2, #13
 8009be4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	705a      	strb	r2, [r3, #1]
      break;
 8009bec:	e0d8      	b.n	8009da0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009bee:	2109      	movs	r1, #9
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f99d 	bl	8009f30 <USBH_Get_CfgDesc>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d103      	bne.n	8009c08 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2204      	movs	r2, #4
 8009c04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c06:	e0cd      	b.n	8009da4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	f040 80ca 	bne.w	8009da4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c16:	3301      	adds	r3, #1
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d903      	bls.n	8009c32 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	220d      	movs	r2, #13
 8009c2e:	701a      	strb	r2, [r3, #0]
      break;
 8009c30:	e0b8      	b.n	8009da4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	795b      	ldrb	r3, [r3, #5]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 feeb 	bl	800aa14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	791b      	ldrb	r3, [r3, #4]
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fee5 	bl	800aa14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	701a      	strb	r2, [r3, #0]
      break;
 8009c56:	e0a5      	b.n	8009da4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f965 	bl	8009f30 <USBH_Get_CfgDesc>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d103      	bne.n	8009c78 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2205      	movs	r2, #5
 8009c74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c76:	e097      	b.n	8009da8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	f040 8094 	bne.w	8009da8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c86:	3301      	adds	r3, #1
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d903      	bls.n	8009ca2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	220d      	movs	r2, #13
 8009c9e:	701a      	strb	r2, [r3, #0]
      break;
 8009ca0:	e082      	b.n	8009da8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	795b      	ldrb	r3, [r3, #5]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 feb3 	bl	800aa14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	791b      	ldrb	r3, [r3, #4]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fead 	bl	800aa14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
      break;
 8009cc6:	e06f      	b.n	8009da8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d019      	beq.n	8009d06 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009cde:	23ff      	movs	r3, #255	; 0xff
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f949 	bl	8009f78 <USBH_Get_StringDesc>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d103      	bne.n	8009cf8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2206      	movs	r2, #6
 8009cf4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009cf6:	e059      	b.n	8009dac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d156      	bne.n	8009dac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2206      	movs	r2, #6
 8009d02:	705a      	strb	r2, [r3, #1]
      break;
 8009d04:	e052      	b.n	8009dac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2206      	movs	r2, #6
 8009d0a:	705a      	strb	r2, [r3, #1]
      break;
 8009d0c:	e04e      	b.n	8009dac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d019      	beq.n	8009d4c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d24:	23ff      	movs	r3, #255	; 0xff
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f926 	bl	8009f78 <USBH_Get_StringDesc>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2207      	movs	r2, #7
 8009d3a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009d3c:	e038      	b.n	8009db0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	d135      	bne.n	8009db0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2207      	movs	r2, #7
 8009d48:	705a      	strb	r2, [r3, #1]
      break;
 8009d4a:	e031      	b.n	8009db0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2207      	movs	r2, #7
 8009d50:	705a      	strb	r2, [r3, #1]
      break;
 8009d52:	e02d      	b.n	8009db0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d017      	beq.n	8009d8e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d6a:	23ff      	movs	r3, #255	; 0xff
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f903 	bl	8009f78 <USBH_Get_StringDesc>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009d80:	e018      	b.n	8009db4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d115      	bne.n	8009db4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d8c:	e012      	b.n	8009db4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
      break;
 8009d92:	e00f      	b.n	8009db4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009d94:	bf00      	nop
 8009d96:	e00e      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009d98:	bf00      	nop
 8009d9a:	e00c      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009d9c:	bf00      	nop
 8009d9e:	e00a      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009da0:	bf00      	nop
 8009da2:	e008      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009da4:	bf00      	nop
 8009da6:	e006      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009da8:	bf00      	nop
 8009daa:	e004      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009dac:	bf00      	nop
 8009dae:	e002      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009db0:	bf00      	nop
 8009db2:	e000      	b.n	8009db6 <USBH_HandleEnum+0x3be>
      break;
 8009db4:	bf00      	nop
  }
  return Status;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009dd2:	bf00      	nop
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f804 	bl	8009e02 <USBH_HandleSof>
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b0b      	cmp	r3, #11
 8009e12:	d10a      	bne.n	8009e2a <USBH_HandleSof+0x28>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d005      	beq.n	8009e2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
  }
}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009e42:	bf00      	nop
}
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009e5e:	bf00      	nop
}
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 ff58 	bl	800ad6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	791b      	ldrb	r3, [r3, #4]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fda5 	bl	800aa14 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	795b      	ldrb	r3, [r3, #5]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fd9f 	bl	800aa14 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ef2:	78fb      	ldrb	r3, [r7, #3]
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009efe:	2100      	movs	r1, #0
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f864 	bl	8009fce <USBH_GetDescriptor>
 8009f06:	4603      	mov	r3, r0
 8009f08:	73fb      	strb	r3, [r7, #15]
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f1c:	78fa      	ldrb	r2, [r7, #3]
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	4619      	mov	r1, r3
 8009f22:	f000 f918 	bl	800a156 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af02      	add	r7, sp, #8
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	331c      	adds	r3, #28
 8009f40:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009f42:	887b      	ldrh	r3, [r7, #2]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f83d 	bl	8009fce <USBH_GetDescriptor>
 8009f54:	4603      	mov	r3, r0
 8009f56:	72fb      	strb	r3, [r7, #11]
 8009f58:	7afb      	ldrb	r3, [r7, #11]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f64:	887a      	ldrh	r2, [r7, #2]
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 f964 	bl	800a236 <USBH_ParseCfgDesc>
  }

  return status;
 8009f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	607a      	str	r2, [r7, #4]
 8009f82:	461a      	mov	r2, r3
 8009f84:	460b      	mov	r3, r1
 8009f86:	72fb      	strb	r3, [r7, #11]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f94:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f9c:	893b      	ldrh	r3, [r7, #8]
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f812 	bl	8009fce <USBH_GetDescriptor>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75fb      	strb	r3, [r7, #23]
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d107      	bne.n	8009fc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fba:	893a      	ldrh	r2, [r7, #8]
 8009fbc:	6879      	ldr	r1, [r7, #4]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fa37 	bl	800a432 <USBH_ParseStringDesc>
  }

  return status;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	72fb      	strb	r3, [r7, #11]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	789b      	ldrb	r3, [r3, #2]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d11c      	bne.n	800a022 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009fe8:	7afb      	ldrb	r3, [r7, #11]
 8009fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2206      	movs	r2, #6
 8009ff8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	893a      	ldrh	r2, [r7, #8]
 8009ffe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a000:	893b      	ldrh	r3, [r7, #8]
 800a002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a00a:	d104      	bne.n	800a016 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f240 4209 	movw	r2, #1033	; 0x409
 800a012:	829a      	strh	r2, [r3, #20]
 800a014:	e002      	b.n	800a01c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8b3a      	ldrh	r2, [r7, #24]
 800a020:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a022:	8b3b      	ldrh	r3, [r7, #24]
 800a024:	461a      	mov	r2, r3
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fa50 	bl	800a4ce <USBH_CtlReq>
 800a02e:	4603      	mov	r3, r0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	789b      	ldrb	r3, [r3, #2]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d10f      	bne.n	800a06c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2205      	movs	r2, #5
 800a056:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a06c:	2200      	movs	r2, #0
 800a06e:	2100      	movs	r1, #0
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fa2c 	bl	800a4ce <USBH_CtlReq>
 800a076:	4603      	mov	r3, r0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	789b      	ldrb	r3, [r3, #2]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d10e      	bne.n	800a0b2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2209      	movs	r2, #9
 800a09e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	887a      	ldrh	r2, [r7, #2]
 800a0a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa09 	bl	800a4ce <USBH_CtlReq>
 800a0bc:	4603      	mov	r3, r0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	789b      	ldrb	r3, [r3, #2]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d10f      	bne.n	800a0fa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f9e5 	bl	800a4ce <USBH_CtlReq>
 800a104:	4603      	mov	r3, r0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	789b      	ldrb	r3, [r3, #2]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d10f      	bne.n	800a142 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2202      	movs	r2, #2
 800a126:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a142:	2200      	movs	r2, #0
 800a144:	2100      	movs	r1, #0
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f9c1 	bl	800a4ce <USBH_CtlReq>
 800a14c:	4603      	mov	r3, r0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	4613      	mov	r3, r2
 800a162:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	785a      	ldrb	r2, [r3, #1]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	3302      	adds	r3, #2
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	3303      	adds	r3, #3
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	b29b      	uxth	r3, r3
 800a188:	4313      	orrs	r3, r2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	791a      	ldrb	r2, [r3, #4]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	795a      	ldrb	r2, [r3, #5]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	799a      	ldrb	r2, [r3, #6]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	79da      	ldrb	r2, [r3, #7]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	2b08      	cmp	r3, #8
 800a1b4:	d939      	bls.n	800a22a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	3309      	adds	r3, #9
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	330a      	adds	r3, #10
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	330b      	adds	r3, #11
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	330c      	adds	r3, #12
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	330d      	adds	r3, #13
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	021b      	lsls	r3, r3, #8
 800a200:	b29b      	uxth	r3, r3
 800a202:	4313      	orrs	r3, r2
 800a204:	b29a      	uxth	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	7b9a      	ldrb	r2, [r3, #14]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	7bda      	ldrb	r2, [r3, #15]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	7c1a      	ldrb	r2, [r3, #16]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	7c5a      	ldrb	r2, [r3, #17]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	745a      	strb	r2, [r3, #17]
  }
}
 800a22a:	bf00      	nop
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b08a      	sub	sp, #40	; 0x28
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	4613      	mov	r3, r2
 800a242:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	785a      	ldrb	r2, [r3, #1]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	3302      	adds	r3, #2
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b29a      	uxth	r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	3303      	adds	r3, #3
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b29b      	uxth	r3, r3
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	4313      	orrs	r3, r2
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	791a      	ldrb	r2, [r3, #4]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	795a      	ldrb	r2, [r3, #5]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	799a      	ldrb	r2, [r3, #6]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	79da      	ldrb	r2, [r3, #7]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	7a1a      	ldrb	r2, [r3, #8]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	2b09      	cmp	r3, #9
 800a2b0:	d95f      	bls.n	800a372 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a2b2:	2309      	movs	r3, #9
 800a2b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2ba:	e051      	b.n	800a360 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2bc:	f107 0316 	add.w	r3, r7, #22
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2c4:	f000 f8e8 	bl	800a498 <USBH_GetNextDesc>
 800a2c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	785b      	ldrb	r3, [r3, #1]
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d146      	bne.n	800a360 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a2d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2d6:	221a      	movs	r2, #26
 800a2d8:	fb02 f303 	mul.w	r3, r2, r3
 800a2dc:	3308      	adds	r3, #8
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	3302      	adds	r3, #2
 800a2e4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a2e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2e8:	69f8      	ldr	r0, [r7, #28]
 800a2ea:	f000 f846 	bl	800a37a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2f8:	e022      	b.n	800a340 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2fa:	f107 0316 	add.w	r3, r7, #22
 800a2fe:	4619      	mov	r1, r3
 800a300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a302:	f000 f8c9 	bl	800a498 <USBH_GetNextDesc>
 800a306:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	2b05      	cmp	r3, #5
 800a30e:	d117      	bne.n	800a340 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a314:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a318:	3201      	adds	r2, #1
 800a31a:	00d2      	lsls	r2, r2, #3
 800a31c:	211a      	movs	r1, #26
 800a31e:	fb01 f303 	mul.w	r3, r1, r3
 800a322:	4413      	add	r3, r2
 800a324:	3308      	adds	r3, #8
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	3304      	adds	r3, #4
 800a32c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a32e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a330:	69b8      	ldr	r0, [r7, #24]
 800a332:	f000 f851 	bl	800a3d8 <USBH_ParseEPDesc>
            ep_ix++;
 800a336:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a33a:	3301      	adds	r3, #1
 800a33c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	791b      	ldrb	r3, [r3, #4]
 800a344:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a348:	429a      	cmp	r2, r3
 800a34a:	d204      	bcs.n	800a356 <USBH_ParseCfgDesc+0x120>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	885a      	ldrh	r2, [r3, #2]
 800a350:	8afb      	ldrh	r3, [r7, #22]
 800a352:	429a      	cmp	r2, r3
 800a354:	d8d1      	bhi.n	800a2fa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a35a:	3301      	adds	r3, #1
 800a35c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a364:	2b01      	cmp	r3, #1
 800a366:	d804      	bhi.n	800a372 <USBH_ParseCfgDesc+0x13c>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	885a      	ldrh	r2, [r3, #2]
 800a36c:	8afb      	ldrh	r3, [r7, #22]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d8a4      	bhi.n	800a2bc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a372:	bf00      	nop
 800a374:	3728      	adds	r7, #40	; 0x28
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	785a      	ldrb	r2, [r3, #1]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	789a      	ldrb	r2, [r3, #2]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	78da      	ldrb	r2, [r3, #3]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	791a      	ldrb	r2, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	795a      	ldrb	r2, [r3, #5]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	799a      	ldrb	r2, [r3, #6]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	79da      	ldrb	r2, [r3, #7]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	7a1a      	ldrb	r2, [r3, #8]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	721a      	strb	r2, [r3, #8]
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	785a      	ldrb	r2, [r3, #1]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	789a      	ldrb	r2, [r3, #2]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	78da      	ldrb	r2, [r3, #3]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	3304      	adds	r3, #4
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	b29a      	uxth	r2, r3
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	3305      	adds	r3, #5
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	021b      	lsls	r3, r3, #8
 800a414:	b29b      	uxth	r3, r3
 800a416:	4313      	orrs	r3, r2
 800a418:	b29a      	uxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	799a      	ldrb	r2, [r3, #6]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	719a      	strb	r2, [r3, #6]
}
 800a426:	bf00      	nop
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a432:	b480      	push	{r7}
 800a434:	b087      	sub	sp, #28
 800a436:	af00      	add	r7, sp, #0
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	4613      	mov	r3, r2
 800a43e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	3301      	adds	r3, #1
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b03      	cmp	r3, #3
 800a448:	d120      	bne.n	800a48c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	1e9a      	subs	r2, r3, #2
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	4293      	cmp	r3, r2
 800a454:	bf28      	it	cs
 800a456:	4613      	movcs	r3, r2
 800a458:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3302      	adds	r3, #2
 800a45e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a460:	2300      	movs	r3, #0
 800a462:	82fb      	strh	r3, [r7, #22]
 800a464:	e00b      	b.n	800a47e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a466:	8afb      	ldrh	r3, [r7, #22]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	4413      	add	r3, r2
 800a46c:	781a      	ldrb	r2, [r3, #0]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3301      	adds	r3, #1
 800a476:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a478:	8afb      	ldrh	r3, [r7, #22]
 800a47a:	3302      	adds	r3, #2
 800a47c:	82fb      	strh	r3, [r7, #22]
 800a47e:	8afa      	ldrh	r2, [r7, #22]
 800a480:	8abb      	ldrh	r3, [r7, #20]
 800a482:	429a      	cmp	r2, r3
 800a484:	d3ef      	bcc.n	800a466 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
  }
}
 800a48c:	bf00      	nop
 800a48e:	371c      	adds	r7, #28
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	881a      	ldrh	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	789b      	ldrb	r3, [r3, #2]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d002      	beq.n	800a4ee <USBH_CtlReq+0x20>
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d00f      	beq.n	800a50c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a4ec:	e027      	b.n	800a53e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	88fa      	ldrh	r2, [r7, #6]
 800a4f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2202      	movs	r2, #2
 800a504:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a506:	2301      	movs	r3, #1
 800a508:	75fb      	strb	r3, [r7, #23]
      break;
 800a50a:	e018      	b.n	800a53e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 f81b 	bl	800a548 <USBH_HandleControl>
 800a512:	4603      	mov	r3, r0
 800a514:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <USBH_CtlReq+0x54>
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d106      	bne.n	800a530 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	761a      	strb	r2, [r3, #24]
      break;
 800a52e:	e005      	b.n	800a53c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d102      	bne.n	800a53c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2201      	movs	r2, #1
 800a53a:	709a      	strb	r2, [r3, #2]
      break;
 800a53c:	bf00      	nop
  }
  return status;
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af02      	add	r7, sp, #8
 800a54e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a554:	2300      	movs	r3, #0
 800a556:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	7e1b      	ldrb	r3, [r3, #24]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	2b0a      	cmp	r3, #10
 800a560:	f200 8158 	bhi.w	800a814 <USBH_HandleControl+0x2cc>
 800a564:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <USBH_HandleControl+0x24>)
 800a566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56a:	bf00      	nop
 800a56c:	0800a599 	.word	0x0800a599
 800a570:	0800a5b3 	.word	0x0800a5b3
 800a574:	0800a61d 	.word	0x0800a61d
 800a578:	0800a643 	.word	0x0800a643
 800a57c:	0800a67b 	.word	0x0800a67b
 800a580:	0800a6a7 	.word	0x0800a6a7
 800a584:	0800a6f9 	.word	0x0800a6f9
 800a588:	0800a71b 	.word	0x0800a71b
 800a58c:	0800a757 	.word	0x0800a757
 800a590:	0800a77f 	.word	0x0800a77f
 800a594:	0800a7bd 	.word	0x0800a7bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f103 0110 	add.w	r1, r3, #16
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	795b      	ldrb	r3, [r3, #5]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f945 	bl	800a834 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	761a      	strb	r2, [r3, #24]
      break;
 800a5b0:	e13b      	b.n	800a82a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	795b      	ldrb	r3, [r3, #5]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fcc5 	bl	800af48 <USBH_LL_GetURBState>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d11e      	bne.n	800a606 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	7c1b      	ldrb	r3, [r3, #16]
 800a5cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	8adb      	ldrh	r3, [r3, #22]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a5da:	7b7b      	ldrb	r3, [r7, #13]
 800a5dc:	2b80      	cmp	r3, #128	; 0x80
 800a5de:	d103      	bne.n	800a5e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2203      	movs	r2, #3
 800a5e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5e6:	e117      	b.n	800a818 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2205      	movs	r2, #5
 800a5ec:	761a      	strb	r2, [r3, #24]
      break;
 800a5ee:	e113      	b.n	800a818 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a5f0:	7b7b      	ldrb	r3, [r7, #13]
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d103      	bne.n	800a5fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2209      	movs	r2, #9
 800a5fa:	761a      	strb	r2, [r3, #24]
      break;
 800a5fc:	e10c      	b.n	800a818 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2207      	movs	r2, #7
 800a602:	761a      	strb	r2, [r3, #24]
      break;
 800a604:	e108      	b.n	800a818 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d003      	beq.n	800a614 <USBH_HandleControl+0xcc>
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	f040 8102 	bne.w	800a818 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	220b      	movs	r2, #11
 800a618:	761a      	strb	r2, [r3, #24]
      break;
 800a61a:	e0fd      	b.n	800a818 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a622:	b29a      	uxth	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6899      	ldr	r1, [r3, #8]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	899a      	ldrh	r2, [r3, #12]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	791b      	ldrb	r3, [r3, #4]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f93c 	bl	800a8b2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2204      	movs	r2, #4
 800a63e:	761a      	strb	r2, [r3, #24]
      break;
 800a640:	e0f3      	b.n	800a82a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	791b      	ldrb	r3, [r3, #4]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fc7d 	bl	800af48 <USBH_LL_GetURBState>
 800a64e:	4603      	mov	r3, r0
 800a650:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a652:	7bbb      	ldrb	r3, [r7, #14]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d102      	bne.n	800a65e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2209      	movs	r2, #9
 800a65c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b05      	cmp	r3, #5
 800a662:	d102      	bne.n	800a66a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a664:	2303      	movs	r3, #3
 800a666:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a668:	e0d8      	b.n	800a81c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b04      	cmp	r3, #4
 800a66e:	f040 80d5 	bne.w	800a81c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	220b      	movs	r2, #11
 800a676:	761a      	strb	r2, [r3, #24]
      break;
 800a678:	e0d0      	b.n	800a81c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6899      	ldr	r1, [r3, #8]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	899a      	ldrh	r2, [r3, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	7958      	ldrb	r0, [r3, #5]
 800a686:	2301      	movs	r3, #1
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4603      	mov	r3, r0
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f8eb 	bl	800a868 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2206      	movs	r2, #6
 800a6a2:	761a      	strb	r2, [r3, #24]
      break;
 800a6a4:	e0c1      	b.n	800a82a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	795b      	ldrb	r3, [r3, #5]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fc4b 	bl	800af48 <USBH_LL_GetURBState>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d103      	bne.n	800a6c4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2207      	movs	r2, #7
 800a6c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6c2:	e0ad      	b.n	800a820 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d105      	bne.n	800a6d6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	220c      	movs	r2, #12
 800a6ce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d4:	e0a4      	b.n	800a820 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d103      	bne.n	800a6e4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2205      	movs	r2, #5
 800a6e0:	761a      	strb	r2, [r3, #24]
      break;
 800a6e2:	e09d      	b.n	800a820 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	f040 809a 	bne.w	800a820 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	220b      	movs	r2, #11
 800a6f0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f6:	e093      	b.n	800a820 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2100      	movs	r1, #0
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f8d6 	bl	800a8b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2208      	movs	r2, #8
 800a716:	761a      	strb	r2, [r3, #24]

      break;
 800a718:	e087      	b.n	800a82a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	791b      	ldrb	r3, [r3, #4]
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fc11 	bl	800af48 <USBH_LL_GetURBState>
 800a726:	4603      	mov	r3, r0
 800a728:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d105      	bne.n	800a73c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	220d      	movs	r2, #13
 800a734:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a73a:	e073      	b.n	800a824 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d103      	bne.n	800a74a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	220b      	movs	r2, #11
 800a746:	761a      	strb	r2, [r3, #24]
      break;
 800a748:	e06c      	b.n	800a824 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	2b05      	cmp	r3, #5
 800a74e:	d169      	bne.n	800a824 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800a750:	2303      	movs	r3, #3
 800a752:	73fb      	strb	r3, [r7, #15]
      break;
 800a754:	e066      	b.n	800a824 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	795a      	ldrb	r2, [r3, #5]
 800a75a:	2301      	movs	r3, #1
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	4613      	mov	r3, r2
 800a760:	2200      	movs	r2, #0
 800a762:	2100      	movs	r1, #0
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f87f 	bl	800a868 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a770:	b29a      	uxth	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	220a      	movs	r2, #10
 800a77a:	761a      	strb	r2, [r3, #24]
      break;
 800a77c:	e055      	b.n	800a82a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	795b      	ldrb	r3, [r3, #5]
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fbdf 	bl	800af48 <USBH_LL_GetURBState>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d105      	bne.n	800a7a0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	220d      	movs	r2, #13
 800a79c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a79e:	e043      	b.n	800a828 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d103      	bne.n	800a7ae <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2209      	movs	r2, #9
 800a7aa:	761a      	strb	r2, [r3, #24]
      break;
 800a7ac:	e03c      	b.n	800a828 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d139      	bne.n	800a828 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	220b      	movs	r2, #11
 800a7b8:	761a      	strb	r2, [r3, #24]
      break;
 800a7ba:	e035      	b.n	800a828 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	7e5b      	ldrb	r3, [r3, #25]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	765a      	strb	r2, [r3, #25]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	7e5b      	ldrb	r3, [r3, #25]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d806      	bhi.n	800a7de <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a7dc:	e025      	b.n	800a82a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e4:	2106      	movs	r1, #6
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	795b      	ldrb	r3, [r3, #5]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f90c 	bl	800aa14 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	791b      	ldrb	r3, [r3, #4]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f906 	bl	800aa14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a80e:	2302      	movs	r3, #2
 800a810:	73fb      	strb	r3, [r7, #15]
      break;
 800a812:	e00a      	b.n	800a82a <USBH_HandleControl+0x2e2>

    default:
      break;
 800a814:	bf00      	nop
 800a816:	e008      	b.n	800a82a <USBH_HandleControl+0x2e2>
      break;
 800a818:	bf00      	nop
 800a81a:	e006      	b.n	800a82a <USBH_HandleControl+0x2e2>
      break;
 800a81c:	bf00      	nop
 800a81e:	e004      	b.n	800a82a <USBH_HandleControl+0x2e2>
      break;
 800a820:	bf00      	nop
 800a822:	e002      	b.n	800a82a <USBH_HandleControl+0x2e2>
      break;
 800a824:	bf00      	nop
 800a826:	e000      	b.n	800a82a <USBH_HandleControl+0x2e2>
      break;
 800a828:	bf00      	nop
  }

  return status;
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b088      	sub	sp, #32
 800a838:	af04      	add	r7, sp, #16
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a842:	79f9      	ldrb	r1, [r7, #7]
 800a844:	2300      	movs	r3, #0
 800a846:	9303      	str	r3, [sp, #12]
 800a848:	2308      	movs	r3, #8
 800a84a:	9302      	str	r3, [sp, #8]
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	2300      	movs	r3, #0
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	2300      	movs	r3, #0
 800a856:	2200      	movs	r2, #0
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f000 fb44 	bl	800aee6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af04      	add	r7, sp, #16
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4611      	mov	r1, r2
 800a874:	461a      	mov	r2, r3
 800a876:	460b      	mov	r3, r1
 800a878:	80fb      	strh	r3, [r7, #6]
 800a87a:	4613      	mov	r3, r2
 800a87c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a888:	2300      	movs	r3, #0
 800a88a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a88c:	7979      	ldrb	r1, [r7, #5]
 800a88e:	7e3b      	ldrb	r3, [r7, #24]
 800a890:	9303      	str	r3, [sp, #12]
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	9302      	str	r3, [sp, #8]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	2301      	movs	r3, #1
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 fb1f 	bl	800aee6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b088      	sub	sp, #32
 800a8b6:	af04      	add	r7, sp, #16
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	4611      	mov	r1, r2
 800a8be:	461a      	mov	r2, r3
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	80fb      	strh	r3, [r7, #6]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8c8:	7979      	ldrb	r1, [r7, #5]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9303      	str	r3, [sp, #12]
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	9302      	str	r3, [sp, #8]
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	9301      	str	r3, [sp, #4]
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2201      	movs	r2, #1
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fb01 	bl	800aee6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a8e4:	2300      	movs	r3, #0

}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b088      	sub	sp, #32
 800a8f2:	af04      	add	r7, sp, #16
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	80fb      	strh	r3, [r7, #6]
 800a900:	4613      	mov	r3, r2
 800a902:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a912:	7979      	ldrb	r1, [r7, #5]
 800a914:	7e3b      	ldrb	r3, [r7, #24]
 800a916:	9303      	str	r3, [sp, #12]
 800a918:	88fb      	ldrh	r3, [r7, #6]
 800a91a:	9302      	str	r3, [sp, #8]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	2301      	movs	r3, #1
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	2302      	movs	r3, #2
 800a926:	2200      	movs	r2, #0
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fadc 	bl	800aee6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af04      	add	r7, sp, #16
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4611      	mov	r1, r2
 800a944:	461a      	mov	r2, r3
 800a946:	460b      	mov	r3, r1
 800a948:	80fb      	strh	r3, [r7, #6]
 800a94a:	4613      	mov	r3, r2
 800a94c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a94e:	7979      	ldrb	r1, [r7, #5]
 800a950:	2300      	movs	r3, #0
 800a952:	9303      	str	r3, [sp, #12]
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	9302      	str	r3, [sp, #8]
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	9301      	str	r3, [sp, #4]
 800a95c:	2301      	movs	r3, #1
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	2302      	movs	r3, #2
 800a962:	2201      	movs	r2, #1
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 fabe 	bl	800aee6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af04      	add	r7, sp, #16
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	4608      	mov	r0, r1
 800a97e:	4611      	mov	r1, r2
 800a980:	461a      	mov	r2, r3
 800a982:	4603      	mov	r3, r0
 800a984:	70fb      	strb	r3, [r7, #3]
 800a986:	460b      	mov	r3, r1
 800a988:	70bb      	strb	r3, [r7, #2]
 800a98a:	4613      	mov	r3, r2
 800a98c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a98e:	7878      	ldrb	r0, [r7, #1]
 800a990:	78ba      	ldrb	r2, [r7, #2]
 800a992:	78f9      	ldrb	r1, [r7, #3]
 800a994:	8b3b      	ldrh	r3, [r7, #24]
 800a996:	9302      	str	r3, [sp, #8]
 800a998:	7d3b      	ldrb	r3, [r7, #20]
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	7c3b      	ldrb	r3, [r7, #16]
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa51 	bl	800ae4a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fa70 	bl	800aea8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b084      	sub	sp, #16
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f836 	bl	800aa50 <USBH_GetFreePipe>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a9e8:	89fb      	ldrh	r3, [r7, #14]
 800a9ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00a      	beq.n	800aa08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a9f2:	78fa      	ldrb	r2, [r7, #3]
 800a9f4:	89fb      	ldrh	r3, [r7, #14]
 800a9f6:	f003 030f 	and.w	r3, r3, #15
 800a9fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	33e0      	adds	r3, #224	; 0xe0
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	440b      	add	r3, r1
 800aa06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aa08:	89fb      	ldrh	r3, [r7, #14]
 800aa0a:	b2db      	uxtb	r3, r3
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	2b0a      	cmp	r3, #10
 800aa24:	d80d      	bhi.n	800aa42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aa26:	78fb      	ldrb	r3, [r7, #3]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	33e0      	adds	r3, #224	; 0xe0
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	33e0      	adds	r3, #224	; 0xe0
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	440b      	add	r3, r1
 800aa40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
 800aa60:	e00f      	b.n	800aa82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	33e0      	adds	r3, #224	; 0xe0
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d102      	bne.n	800aa7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	e007      	b.n	800aa8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	73fb      	strb	r3, [r7, #15]
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b0a      	cmp	r3, #10
 800aa86:	d9ec      	bls.n	800aa62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aa88:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	490e      	ldr	r1, [pc, #56]	; (800aad8 <MX_USB_HOST_Init+0x40>)
 800aaa0:	480e      	ldr	r0, [pc, #56]	; (800aadc <MX_USB_HOST_Init+0x44>)
 800aaa2:	f7fe fc9f 	bl	80093e4 <USBH_Init>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aaac:	f7f6 f8ec 	bl	8000c88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aab0:	490b      	ldr	r1, [pc, #44]	; (800aae0 <MX_USB_HOST_Init+0x48>)
 800aab2:	480a      	ldr	r0, [pc, #40]	; (800aadc <MX_USB_HOST_Init+0x44>)
 800aab4:	f7fe fd24 	bl	8009500 <USBH_RegisterClass>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aabe:	f7f6 f8e3 	bl	8000c88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aac2:	4806      	ldr	r0, [pc, #24]	; (800aadc <MX_USB_HOST_Init+0x44>)
 800aac4:	f7fe fda8 	bl	8009618 <USBH_Start>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aace:	f7f6 f8db 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aad2:	bf00      	nop
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	0800aaf9 	.word	0x0800aaf9
 800aadc:	2000024c 	.word	0x2000024c
 800aae0:	2000000c 	.word	0x2000000c

0800aae4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aae8:	4802      	ldr	r0, [pc, #8]	; (800aaf4 <MX_USB_HOST_Process+0x10>)
 800aaea:	f7fe fda5 	bl	8009638 <USBH_Process>
}
 800aaee:	bf00      	nop
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000024c 	.word	0x2000024c

0800aaf8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d819      	bhi.n	800ab40 <USBH_UserProcess+0x48>
 800ab0c:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <USBH_UserProcess+0x1c>)
 800ab0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab12:	bf00      	nop
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	0800ab31 	.word	0x0800ab31
 800ab1c:	0800ab41 	.word	0x0800ab41
 800ab20:	0800ab39 	.word	0x0800ab39
 800ab24:	0800ab29 	.word	0x0800ab29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ab28:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <USBH_UserProcess+0x58>)
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	701a      	strb	r2, [r3, #0]
  break;
 800ab2e:	e008      	b.n	800ab42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ab30:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <USBH_UserProcess+0x58>)
 800ab32:	2202      	movs	r2, #2
 800ab34:	701a      	strb	r2, [r3, #0]
  break;
 800ab36:	e004      	b.n	800ab42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ab38:	4b05      	ldr	r3, [pc, #20]	; (800ab50 <USBH_UserProcess+0x58>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
  break;
 800ab3e:	e000      	b.n	800ab42 <USBH_UserProcess+0x4a>

  default:
  break;
 800ab40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	200000b4 	.word	0x200000b4

0800ab54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08a      	sub	sp, #40	; 0x28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab5c:	f107 0314 	add.w	r3, r7, #20
 800ab60:	2200      	movs	r2, #0
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	605a      	str	r2, [r3, #4]
 800ab66:	609a      	str	r2, [r3, #8]
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab74:	d147      	bne.n	800ac06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab76:	2300      	movs	r3, #0
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	4b25      	ldr	r3, [pc, #148]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800ab7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7e:	4a24      	ldr	r2, [pc, #144]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800ab80:	f043 0301 	orr.w	r3, r3, #1
 800ab84:	6313      	str	r3, [r2, #48]	; 0x30
 800ab86:	4b22      	ldr	r3, [pc, #136]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800ab88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	613b      	str	r3, [r7, #16]
 800ab90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aba0:	f107 0314 	add.w	r3, r7, #20
 800aba4:	4619      	mov	r1, r3
 800aba6:	481b      	ldr	r0, [pc, #108]	; (800ac14 <HAL_HCD_MspInit+0xc0>)
 800aba8:	f7f7 f848 	bl	8001c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800abac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800abb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abb2:	2302      	movs	r3, #2
 800abb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb6:	2300      	movs	r3, #0
 800abb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abba:	2300      	movs	r3, #0
 800abbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abbe:	230a      	movs	r3, #10
 800abc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abc2:	f107 0314 	add.w	r3, r7, #20
 800abc6:	4619      	mov	r1, r3
 800abc8:	4812      	ldr	r0, [pc, #72]	; (800ac14 <HAL_HCD_MspInit+0xc0>)
 800abca:	f7f7 f837 	bl	8001c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abce:	4b10      	ldr	r3, [pc, #64]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800abd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd2:	4a0f      	ldr	r2, [pc, #60]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800abd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd8:	6353      	str	r3, [r2, #52]	; 0x34
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800abe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe2:	4a0b      	ldr	r2, [pc, #44]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800abe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abe8:	6453      	str	r3, [r2, #68]	; 0x44
 800abea:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <HAL_HCD_MspInit+0xbc>)
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800abf6:	2200      	movs	r2, #0
 800abf8:	2100      	movs	r1, #0
 800abfa:	2043      	movs	r0, #67	; 0x43
 800abfc:	f7f6 ff49 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac00:	2043      	movs	r0, #67	; 0x43
 800ac02:	f7f6 ff62 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac06:	bf00      	nop
 800ac08:	3728      	adds	r7, #40	; 0x28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40023800 	.word	0x40023800
 800ac14:	40020000 	.word	0x40020000

0800ac18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff f8d9 	bl	8009dde <USBH_LL_IncTimer>
}
 800ac2c:	bf00      	nop
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff f911 	bl	8009e6a <USBH_LL_Connect>
}
 800ac48:	bf00      	nop
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff f91a 	bl	8009e98 <USBH_LL_Disconnect>
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff f8cb 	bl	8009e32 <USBH_LL_PortEnabled>
} 
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff f8cb 	bl	8009e4e <USBH_LL_PortDisabled>
} 
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d12a      	bne.n	800ad28 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800acd2:	4a18      	ldr	r2, [pc, #96]	; (800ad34 <USBH_LL_Init+0x74>)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a15      	ldr	r2, [pc, #84]	; (800ad34 <USBH_LL_Init+0x74>)
 800acde:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ace2:	4b14      	ldr	r3, [pc, #80]	; (800ad34 <USBH_LL_Init+0x74>)
 800ace4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ace8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800acea:	4b12      	ldr	r3, [pc, #72]	; (800ad34 <USBH_LL_Init+0x74>)
 800acec:	2208      	movs	r2, #8
 800acee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800acf0:	4b10      	ldr	r3, [pc, #64]	; (800ad34 <USBH_LL_Init+0x74>)
 800acf2:	2201      	movs	r2, #1
 800acf4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800acf6:	4b0f      	ldr	r3, [pc, #60]	; (800ad34 <USBH_LL_Init+0x74>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800acfc:	4b0d      	ldr	r3, [pc, #52]	; (800ad34 <USBH_LL_Init+0x74>)
 800acfe:	2202      	movs	r2, #2
 800ad00:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad02:	4b0c      	ldr	r3, [pc, #48]	; (800ad34 <USBH_LL_Init+0x74>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ad08:	480a      	ldr	r0, [pc, #40]	; (800ad34 <USBH_LL_Init+0x74>)
 800ad0a:	f7f7 f988 	bl	800201e <HAL_HCD_Init>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ad14:	f7f5 ffb8 	bl	8000c88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ad18:	4806      	ldr	r0, [pc, #24]	; (800ad34 <USBH_LL_Init+0x74>)
 800ad1a:	f7f7 fd8b 	bl	8002834 <HAL_HCD_GetCurrentFrame>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff f84c 	bl	8009dc0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000624 	.word	0x20000624

0800ad38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7f7 fcf8 	bl	8002744 <HAL_HCD_Start>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 f95c 	bl	800b018 <USBH_Get_USB_Status>
 800ad60:	4603      	mov	r3, r0
 800ad62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7f7 fd00 	bl	800278a <HAL_HCD_Stop>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f941 	bl	800b018 <USBH_Get_USB_Status>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800adac:	2301      	movs	r3, #1
 800adae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f7 fd4a 	bl	8002850 <HAL_HCD_GetCurrentSpeed>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d007      	beq.n	800add2 <USBH_LL_GetSpeed+0x2e>
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d302      	bcc.n	800adcc <USBH_LL_GetSpeed+0x28>
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d006      	beq.n	800add8 <USBH_LL_GetSpeed+0x34>
 800adca:	e008      	b.n	800adde <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
    break;
 800add0:	e008      	b.n	800ade4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800add2:	2301      	movs	r3, #1
 800add4:	73fb      	strb	r3, [r7, #15]
    break;
 800add6:	e005      	b.n	800ade4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800add8:	2302      	movs	r3, #2
 800adda:	73fb      	strb	r3, [r7, #15]
    break;
 800addc:	e002      	b.n	800ade4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800adde:	2301      	movs	r3, #1
 800ade0:	73fb      	strb	r3, [r7, #15]
    break;
 800ade2:	bf00      	nop
  }
  return  speed;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7f7 fcdd 	bl	80027c4 <HAL_HCD_ResetPort>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 f901 	bl	800b018 <USBH_Get_USB_Status>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae36:	78fa      	ldrb	r2, [r7, #3]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f7 fce5 	bl	800280a <HAL_HCD_HC_GetXferCount>
 800ae40:	4603      	mov	r3, r0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae4a:	b590      	push	{r4, r7, lr}
 800ae4c:	b089      	sub	sp, #36	; 0x24
 800ae4e:	af04      	add	r7, sp, #16
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	4608      	mov	r0, r1
 800ae54:	4611      	mov	r1, r2
 800ae56:	461a      	mov	r2, r3
 800ae58:	4603      	mov	r3, r0
 800ae5a:	70fb      	strb	r3, [r7, #3]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70bb      	strb	r3, [r7, #2]
 800ae60:	4613      	mov	r3, r2
 800ae62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae72:	787c      	ldrb	r4, [r7, #1]
 800ae74:	78ba      	ldrb	r2, [r7, #2]
 800ae76:	78f9      	ldrb	r1, [r7, #3]
 800ae78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae7a:	9302      	str	r3, [sp, #8]
 800ae7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	4623      	mov	r3, r4
 800ae8a:	f7f7 f92a 	bl	80020e2 <HAL_HCD_HC_Init>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 f8bf 	bl	800b018 <USBH_Get_USB_Status>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd90      	pop	{r4, r7, pc}

0800aea8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7f7 f9a3 	bl	8002212 <HAL_HCD_HC_Halt>
 800aecc:	4603      	mov	r3, r0
 800aece:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f8a0 	bl	800b018 <USBH_Get_USB_Status>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aee6:	b590      	push	{r4, r7, lr}
 800aee8:	b089      	sub	sp, #36	; 0x24
 800aeea:	af04      	add	r7, sp, #16
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	4608      	mov	r0, r1
 800aef0:	4611      	mov	r1, r2
 800aef2:	461a      	mov	r2, r3
 800aef4:	4603      	mov	r3, r0
 800aef6:	70fb      	strb	r3, [r7, #3]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70bb      	strb	r3, [r7, #2]
 800aefc:	4613      	mov	r3, r2
 800aefe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af0e:	787c      	ldrb	r4, [r7, #1]
 800af10:	78ba      	ldrb	r2, [r7, #2]
 800af12:	78f9      	ldrb	r1, [r7, #3]
 800af14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800af18:	9303      	str	r3, [sp, #12]
 800af1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af1c:	9302      	str	r3, [sp, #8]
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4623      	mov	r3, r4
 800af2a:	f7f7 f995 	bl	8002258 <HAL_HCD_HC_SubmitRequest>
 800af2e:	4603      	mov	r3, r0
 800af30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800af32:	7bfb      	ldrb	r3, [r7, #15]
 800af34:	4618      	mov	r0, r3
 800af36:	f000 f86f 	bl	800b018 <USBH_Get_USB_Status>
 800af3a:	4603      	mov	r3, r0
 800af3c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	bd90      	pop	{r4, r7, pc}

0800af48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af5a:	78fa      	ldrb	r2, [r7, #3]
 800af5c:	4611      	mov	r1, r2
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f7 fc3e 	bl	80027e0 <HAL_HCD_HC_GetURBState>
 800af64:	4603      	mov	r3, r0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b082      	sub	sp, #8
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af80:	2b01      	cmp	r3, #1
 800af82:	d103      	bne.n	800af8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	4618      	mov	r0, r3
 800af88:	f000 f872 	bl	800b070 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af8c:	20c8      	movs	r0, #200	; 0xc8
 800af8e:	f7f6 fa21 	bl	80013d4 <HAL_Delay>
  return USBH_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
 800afa8:	4613      	mov	r3, r2
 800afaa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800afb4:	78fa      	ldrb	r2, [r7, #3]
 800afb6:	68f9      	ldr	r1, [r7, #12]
 800afb8:	4613      	mov	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	440b      	add	r3, r1
 800afc2:	333b      	adds	r3, #59	; 0x3b
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800afca:	78fa      	ldrb	r2, [r7, #3]
 800afcc:	68f9      	ldr	r1, [r7, #12]
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	440b      	add	r3, r1
 800afd8:	3350      	adds	r3, #80	; 0x50
 800afda:	78ba      	ldrb	r2, [r7, #2]
 800afdc:	701a      	strb	r2, [r3, #0]
 800afde:	e009      	b.n	800aff4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800afe0:	78fa      	ldrb	r2, [r7, #3]
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	4613      	mov	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	440b      	add	r3, r1
 800afee:	3351      	adds	r3, #81	; 0x51
 800aff0:	78ba      	ldrb	r2, [r7, #2]
 800aff2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7f6 f9e2 	bl	80013d4 <HAL_Delay>
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d817      	bhi.n	800b05c <USBH_Get_USB_Status+0x44>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <USBH_Get_USB_Status+0x1c>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b045 	.word	0x0800b045
 800b038:	0800b04b 	.word	0x0800b04b
 800b03c:	0800b051 	.word	0x0800b051
 800b040:	0800b057 	.word	0x0800b057
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
    break;
 800b048:	e00b      	b.n	800b062 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b04a:	2302      	movs	r3, #2
 800b04c:	73fb      	strb	r3, [r7, #15]
    break;
 800b04e:	e008      	b.n	800b062 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b050:	2301      	movs	r3, #1
 800b052:	73fb      	strb	r3, [r7, #15]
    break;
 800b054:	e005      	b.n	800b062 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b056:	2302      	movs	r3, #2
 800b058:	73fb      	strb	r3, [r7, #15]
    break;
 800b05a:	e002      	b.n	800b062 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b05c:	2302      	movs	r3, #2
 800b05e:	73fb      	strb	r3, [r7, #15]
    break;
 800b060:	bf00      	nop
  }
  return usb_status;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800b07a:	79fb      	ldrb	r3, [r7, #7]
 800b07c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d102      	bne.n	800b08a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b084:	2301      	movs	r3, #1
 800b086:	73fb      	strb	r3, [r7, #15]
 800b088:	e001      	b.n	800b08e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	461a      	mov	r2, r3
 800b092:	2101      	movs	r1, #1
 800b094:	4803      	ldr	r0, [pc, #12]	; (800b0a4 <MX_DriverVbusFS+0x34>)
 800b096:	f7f6 ff6b 	bl	8001f70 <HAL_GPIO_WritePin>
}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	40020800 	.word	0x40020800

0800b0a8 <__errno>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	; (800b0b0 <__errno+0x8>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	2000002c 	.word	0x2000002c

0800b0b4 <__libc_init_array>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	4e0d      	ldr	r6, [pc, #52]	; (800b0ec <__libc_init_array+0x38>)
 800b0b8:	4c0d      	ldr	r4, [pc, #52]	; (800b0f0 <__libc_init_array+0x3c>)
 800b0ba:	1ba4      	subs	r4, r4, r6
 800b0bc:	10a4      	asrs	r4, r4, #2
 800b0be:	2500      	movs	r5, #0
 800b0c0:	42a5      	cmp	r5, r4
 800b0c2:	d109      	bne.n	800b0d8 <__libc_init_array+0x24>
 800b0c4:	4e0b      	ldr	r6, [pc, #44]	; (800b0f4 <__libc_init_array+0x40>)
 800b0c6:	4c0c      	ldr	r4, [pc, #48]	; (800b0f8 <__libc_init_array+0x44>)
 800b0c8:	f000 ffc2 	bl	800c050 <_init>
 800b0cc:	1ba4      	subs	r4, r4, r6
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	42a5      	cmp	r5, r4
 800b0d4:	d105      	bne.n	800b0e2 <__libc_init_array+0x2e>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0dc:	4798      	blx	r3
 800b0de:	3501      	adds	r5, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__libc_init_array+0xc>
 800b0e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0e6:	4798      	blx	r3
 800b0e8:	3501      	adds	r5, #1
 800b0ea:	e7f2      	b.n	800b0d2 <__libc_init_array+0x1e>
 800b0ec:	0800c1d8 	.word	0x0800c1d8
 800b0f0:	0800c1d8 	.word	0x0800c1d8
 800b0f4:	0800c1d8 	.word	0x0800c1d8
 800b0f8:	0800c1dc 	.word	0x0800c1dc

0800b0fc <malloc>:
 800b0fc:	4b02      	ldr	r3, [pc, #8]	; (800b108 <malloc+0xc>)
 800b0fe:	4601      	mov	r1, r0
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	f000 b861 	b.w	800b1c8 <_malloc_r>
 800b106:	bf00      	nop
 800b108:	2000002c 	.word	0x2000002c

0800b10c <free>:
 800b10c:	4b02      	ldr	r3, [pc, #8]	; (800b118 <free+0xc>)
 800b10e:	4601      	mov	r1, r0
 800b110:	6818      	ldr	r0, [r3, #0]
 800b112:	f000 b80b 	b.w	800b12c <_free_r>
 800b116:	bf00      	nop
 800b118:	2000002c 	.word	0x2000002c

0800b11c <memset>:
 800b11c:	4402      	add	r2, r0
 800b11e:	4603      	mov	r3, r0
 800b120:	4293      	cmp	r3, r2
 800b122:	d100      	bne.n	800b126 <memset+0xa>
 800b124:	4770      	bx	lr
 800b126:	f803 1b01 	strb.w	r1, [r3], #1
 800b12a:	e7f9      	b.n	800b120 <memset+0x4>

0800b12c <_free_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4605      	mov	r5, r0
 800b130:	2900      	cmp	r1, #0
 800b132:	d045      	beq.n	800b1c0 <_free_r+0x94>
 800b134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b138:	1f0c      	subs	r4, r1, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfb8      	it	lt
 800b13e:	18e4      	addlt	r4, r4, r3
 800b140:	f000 fbda 	bl	800b8f8 <__malloc_lock>
 800b144:	4a1f      	ldr	r2, [pc, #124]	; (800b1c4 <_free_r+0x98>)
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	4610      	mov	r0, r2
 800b14a:	b933      	cbnz	r3, 800b15a <_free_r+0x2e>
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6014      	str	r4, [r2, #0]
 800b150:	4628      	mov	r0, r5
 800b152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b156:	f000 bbd0 	b.w	800b8fa <__malloc_unlock>
 800b15a:	42a3      	cmp	r3, r4
 800b15c:	d90c      	bls.n	800b178 <_free_r+0x4c>
 800b15e:	6821      	ldr	r1, [r4, #0]
 800b160:	1862      	adds	r2, r4, r1
 800b162:	4293      	cmp	r3, r2
 800b164:	bf04      	itt	eq
 800b166:	681a      	ldreq	r2, [r3, #0]
 800b168:	685b      	ldreq	r3, [r3, #4]
 800b16a:	6063      	str	r3, [r4, #4]
 800b16c:	bf04      	itt	eq
 800b16e:	1852      	addeq	r2, r2, r1
 800b170:	6022      	streq	r2, [r4, #0]
 800b172:	6004      	str	r4, [r0, #0]
 800b174:	e7ec      	b.n	800b150 <_free_r+0x24>
 800b176:	4613      	mov	r3, r2
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	b10a      	cbz	r2, 800b180 <_free_r+0x54>
 800b17c:	42a2      	cmp	r2, r4
 800b17e:	d9fa      	bls.n	800b176 <_free_r+0x4a>
 800b180:	6819      	ldr	r1, [r3, #0]
 800b182:	1858      	adds	r0, r3, r1
 800b184:	42a0      	cmp	r0, r4
 800b186:	d10b      	bne.n	800b1a0 <_free_r+0x74>
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	4401      	add	r1, r0
 800b18c:	1858      	adds	r0, r3, r1
 800b18e:	4282      	cmp	r2, r0
 800b190:	6019      	str	r1, [r3, #0]
 800b192:	d1dd      	bne.n	800b150 <_free_r+0x24>
 800b194:	6810      	ldr	r0, [r2, #0]
 800b196:	6852      	ldr	r2, [r2, #4]
 800b198:	605a      	str	r2, [r3, #4]
 800b19a:	4401      	add	r1, r0
 800b19c:	6019      	str	r1, [r3, #0]
 800b19e:	e7d7      	b.n	800b150 <_free_r+0x24>
 800b1a0:	d902      	bls.n	800b1a8 <_free_r+0x7c>
 800b1a2:	230c      	movs	r3, #12
 800b1a4:	602b      	str	r3, [r5, #0]
 800b1a6:	e7d3      	b.n	800b150 <_free_r+0x24>
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	1821      	adds	r1, r4, r0
 800b1ac:	428a      	cmp	r2, r1
 800b1ae:	bf04      	itt	eq
 800b1b0:	6811      	ldreq	r1, [r2, #0]
 800b1b2:	6852      	ldreq	r2, [r2, #4]
 800b1b4:	6062      	str	r2, [r4, #4]
 800b1b6:	bf04      	itt	eq
 800b1b8:	1809      	addeq	r1, r1, r0
 800b1ba:	6021      	streq	r1, [r4, #0]
 800b1bc:	605c      	str	r4, [r3, #4]
 800b1be:	e7c7      	b.n	800b150 <_free_r+0x24>
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
 800b1c2:	bf00      	nop
 800b1c4:	200000b8 	.word	0x200000b8

0800b1c8 <_malloc_r>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	1ccd      	adds	r5, r1, #3
 800b1cc:	f025 0503 	bic.w	r5, r5, #3
 800b1d0:	3508      	adds	r5, #8
 800b1d2:	2d0c      	cmp	r5, #12
 800b1d4:	bf38      	it	cc
 800b1d6:	250c      	movcc	r5, #12
 800b1d8:	2d00      	cmp	r5, #0
 800b1da:	4606      	mov	r6, r0
 800b1dc:	db01      	blt.n	800b1e2 <_malloc_r+0x1a>
 800b1de:	42a9      	cmp	r1, r5
 800b1e0:	d903      	bls.n	800b1ea <_malloc_r+0x22>
 800b1e2:	230c      	movs	r3, #12
 800b1e4:	6033      	str	r3, [r6, #0]
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ea:	f000 fb85 	bl	800b8f8 <__malloc_lock>
 800b1ee:	4a21      	ldr	r2, [pc, #132]	; (800b274 <_malloc_r+0xac>)
 800b1f0:	6814      	ldr	r4, [r2, #0]
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	b991      	cbnz	r1, 800b21c <_malloc_r+0x54>
 800b1f6:	4c20      	ldr	r4, [pc, #128]	; (800b278 <_malloc_r+0xb0>)
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	b91b      	cbnz	r3, 800b204 <_malloc_r+0x3c>
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	f000 f8cd 	bl	800b39c <_sbrk_r>
 800b202:	6020      	str	r0, [r4, #0]
 800b204:	4629      	mov	r1, r5
 800b206:	4630      	mov	r0, r6
 800b208:	f000 f8c8 	bl	800b39c <_sbrk_r>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d124      	bne.n	800b25a <_malloc_r+0x92>
 800b210:	230c      	movs	r3, #12
 800b212:	6033      	str	r3, [r6, #0]
 800b214:	4630      	mov	r0, r6
 800b216:	f000 fb70 	bl	800b8fa <__malloc_unlock>
 800b21a:	e7e4      	b.n	800b1e6 <_malloc_r+0x1e>
 800b21c:	680b      	ldr	r3, [r1, #0]
 800b21e:	1b5b      	subs	r3, r3, r5
 800b220:	d418      	bmi.n	800b254 <_malloc_r+0x8c>
 800b222:	2b0b      	cmp	r3, #11
 800b224:	d90f      	bls.n	800b246 <_malloc_r+0x7e>
 800b226:	600b      	str	r3, [r1, #0]
 800b228:	50cd      	str	r5, [r1, r3]
 800b22a:	18cc      	adds	r4, r1, r3
 800b22c:	4630      	mov	r0, r6
 800b22e:	f000 fb64 	bl	800b8fa <__malloc_unlock>
 800b232:	f104 000b 	add.w	r0, r4, #11
 800b236:	1d23      	adds	r3, r4, #4
 800b238:	f020 0007 	bic.w	r0, r0, #7
 800b23c:	1ac3      	subs	r3, r0, r3
 800b23e:	d0d3      	beq.n	800b1e8 <_malloc_r+0x20>
 800b240:	425a      	negs	r2, r3
 800b242:	50e2      	str	r2, [r4, r3]
 800b244:	e7d0      	b.n	800b1e8 <_malloc_r+0x20>
 800b246:	428c      	cmp	r4, r1
 800b248:	684b      	ldr	r3, [r1, #4]
 800b24a:	bf16      	itet	ne
 800b24c:	6063      	strne	r3, [r4, #4]
 800b24e:	6013      	streq	r3, [r2, #0]
 800b250:	460c      	movne	r4, r1
 800b252:	e7eb      	b.n	800b22c <_malloc_r+0x64>
 800b254:	460c      	mov	r4, r1
 800b256:	6849      	ldr	r1, [r1, #4]
 800b258:	e7cc      	b.n	800b1f4 <_malloc_r+0x2c>
 800b25a:	1cc4      	adds	r4, r0, #3
 800b25c:	f024 0403 	bic.w	r4, r4, #3
 800b260:	42a0      	cmp	r0, r4
 800b262:	d005      	beq.n	800b270 <_malloc_r+0xa8>
 800b264:	1a21      	subs	r1, r4, r0
 800b266:	4630      	mov	r0, r6
 800b268:	f000 f898 	bl	800b39c <_sbrk_r>
 800b26c:	3001      	adds	r0, #1
 800b26e:	d0cf      	beq.n	800b210 <_malloc_r+0x48>
 800b270:	6025      	str	r5, [r4, #0]
 800b272:	e7db      	b.n	800b22c <_malloc_r+0x64>
 800b274:	200000b8 	.word	0x200000b8
 800b278:	200000bc 	.word	0x200000bc

0800b27c <iprintf>:
 800b27c:	b40f      	push	{r0, r1, r2, r3}
 800b27e:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <iprintf+0x2c>)
 800b280:	b513      	push	{r0, r1, r4, lr}
 800b282:	681c      	ldr	r4, [r3, #0]
 800b284:	b124      	cbz	r4, 800b290 <iprintf+0x14>
 800b286:	69a3      	ldr	r3, [r4, #24]
 800b288:	b913      	cbnz	r3, 800b290 <iprintf+0x14>
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fa46 	bl	800b71c <__sinit>
 800b290:	ab05      	add	r3, sp, #20
 800b292:	9a04      	ldr	r2, [sp, #16]
 800b294:	68a1      	ldr	r1, [r4, #8]
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fb59 	bl	800b950 <_vfiprintf_r>
 800b29e:	b002      	add	sp, #8
 800b2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a4:	b004      	add	sp, #16
 800b2a6:	4770      	bx	lr
 800b2a8:	2000002c 	.word	0x2000002c

0800b2ac <putchar>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <putchar+0x24>)
 800b2b0:	681c      	ldr	r4, [r3, #0]
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	b124      	cbz	r4, 800b2c0 <putchar+0x14>
 800b2b6:	69a3      	ldr	r3, [r4, #24]
 800b2b8:	b913      	cbnz	r3, 800b2c0 <putchar+0x14>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 fa2e 	bl	800b71c <__sinit>
 800b2c0:	68a2      	ldr	r2, [r4, #8]
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ca:	f000 bddf 	b.w	800be8c <_putc_r>
 800b2ce:	bf00      	nop
 800b2d0:	2000002c 	.word	0x2000002c

0800b2d4 <_puts_r>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	460e      	mov	r6, r1
 800b2d8:	4605      	mov	r5, r0
 800b2da:	b118      	cbz	r0, 800b2e4 <_puts_r+0x10>
 800b2dc:	6983      	ldr	r3, [r0, #24]
 800b2de:	b90b      	cbnz	r3, 800b2e4 <_puts_r+0x10>
 800b2e0:	f000 fa1c 	bl	800b71c <__sinit>
 800b2e4:	69ab      	ldr	r3, [r5, #24]
 800b2e6:	68ac      	ldr	r4, [r5, #8]
 800b2e8:	b913      	cbnz	r3, 800b2f0 <_puts_r+0x1c>
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 fa16 	bl	800b71c <__sinit>
 800b2f0:	4b23      	ldr	r3, [pc, #140]	; (800b380 <_puts_r+0xac>)
 800b2f2:	429c      	cmp	r4, r3
 800b2f4:	d117      	bne.n	800b326 <_puts_r+0x52>
 800b2f6:	686c      	ldr	r4, [r5, #4]
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	071b      	lsls	r3, r3, #28
 800b2fc:	d51d      	bpl.n	800b33a <_puts_r+0x66>
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	b1db      	cbz	r3, 800b33a <_puts_r+0x66>
 800b302:	3e01      	subs	r6, #1
 800b304:	68a3      	ldr	r3, [r4, #8]
 800b306:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b30a:	3b01      	subs	r3, #1
 800b30c:	60a3      	str	r3, [r4, #8]
 800b30e:	b9e9      	cbnz	r1, 800b34c <_puts_r+0x78>
 800b310:	2b00      	cmp	r3, #0
 800b312:	da2e      	bge.n	800b372 <_puts_r+0x9e>
 800b314:	4622      	mov	r2, r4
 800b316:	210a      	movs	r1, #10
 800b318:	4628      	mov	r0, r5
 800b31a:	f000 f84f 	bl	800b3bc <__swbuf_r>
 800b31e:	3001      	adds	r0, #1
 800b320:	d011      	beq.n	800b346 <_puts_r+0x72>
 800b322:	200a      	movs	r0, #10
 800b324:	e011      	b.n	800b34a <_puts_r+0x76>
 800b326:	4b17      	ldr	r3, [pc, #92]	; (800b384 <_puts_r+0xb0>)
 800b328:	429c      	cmp	r4, r3
 800b32a:	d101      	bne.n	800b330 <_puts_r+0x5c>
 800b32c:	68ac      	ldr	r4, [r5, #8]
 800b32e:	e7e3      	b.n	800b2f8 <_puts_r+0x24>
 800b330:	4b15      	ldr	r3, [pc, #84]	; (800b388 <_puts_r+0xb4>)
 800b332:	429c      	cmp	r4, r3
 800b334:	bf08      	it	eq
 800b336:	68ec      	ldreq	r4, [r5, #12]
 800b338:	e7de      	b.n	800b2f8 <_puts_r+0x24>
 800b33a:	4621      	mov	r1, r4
 800b33c:	4628      	mov	r0, r5
 800b33e:	f000 f88f 	bl	800b460 <__swsetup_r>
 800b342:	2800      	cmp	r0, #0
 800b344:	d0dd      	beq.n	800b302 <_puts_r+0x2e>
 800b346:	f04f 30ff 	mov.w	r0, #4294967295
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da04      	bge.n	800b35a <_puts_r+0x86>
 800b350:	69a2      	ldr	r2, [r4, #24]
 800b352:	429a      	cmp	r2, r3
 800b354:	dc06      	bgt.n	800b364 <_puts_r+0x90>
 800b356:	290a      	cmp	r1, #10
 800b358:	d004      	beq.n	800b364 <_puts_r+0x90>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	6022      	str	r2, [r4, #0]
 800b360:	7019      	strb	r1, [r3, #0]
 800b362:	e7cf      	b.n	800b304 <_puts_r+0x30>
 800b364:	4622      	mov	r2, r4
 800b366:	4628      	mov	r0, r5
 800b368:	f000 f828 	bl	800b3bc <__swbuf_r>
 800b36c:	3001      	adds	r0, #1
 800b36e:	d1c9      	bne.n	800b304 <_puts_r+0x30>
 800b370:	e7e9      	b.n	800b346 <_puts_r+0x72>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	200a      	movs	r0, #10
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	6022      	str	r2, [r4, #0]
 800b37a:	7018      	strb	r0, [r3, #0]
 800b37c:	e7e5      	b.n	800b34a <_puts_r+0x76>
 800b37e:	bf00      	nop
 800b380:	0800c15c 	.word	0x0800c15c
 800b384:	0800c17c 	.word	0x0800c17c
 800b388:	0800c13c 	.word	0x0800c13c

0800b38c <puts>:
 800b38c:	4b02      	ldr	r3, [pc, #8]	; (800b398 <puts+0xc>)
 800b38e:	4601      	mov	r1, r0
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	f7ff bf9f 	b.w	800b2d4 <_puts_r>
 800b396:	bf00      	nop
 800b398:	2000002c 	.word	0x2000002c

0800b39c <_sbrk_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4c06      	ldr	r4, [pc, #24]	; (800b3b8 <_sbrk_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	f7f5 fdd6 	bl	8000f58 <_sbrk>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_sbrk_r+0x1a>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_sbrk_r+0x1a>
 800b3b4:	602b      	str	r3, [r5, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	200008e8 	.word	0x200008e8

0800b3bc <__swbuf_r>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	460e      	mov	r6, r1
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	b118      	cbz	r0, 800b3ce <__swbuf_r+0x12>
 800b3c6:	6983      	ldr	r3, [r0, #24]
 800b3c8:	b90b      	cbnz	r3, 800b3ce <__swbuf_r+0x12>
 800b3ca:	f000 f9a7 	bl	800b71c <__sinit>
 800b3ce:	4b21      	ldr	r3, [pc, #132]	; (800b454 <__swbuf_r+0x98>)
 800b3d0:	429c      	cmp	r4, r3
 800b3d2:	d12a      	bne.n	800b42a <__swbuf_r+0x6e>
 800b3d4:	686c      	ldr	r4, [r5, #4]
 800b3d6:	69a3      	ldr	r3, [r4, #24]
 800b3d8:	60a3      	str	r3, [r4, #8]
 800b3da:	89a3      	ldrh	r3, [r4, #12]
 800b3dc:	071a      	lsls	r2, r3, #28
 800b3de:	d52e      	bpl.n	800b43e <__swbuf_r+0x82>
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	b363      	cbz	r3, 800b43e <__swbuf_r+0x82>
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	6820      	ldr	r0, [r4, #0]
 800b3e8:	1ac0      	subs	r0, r0, r3
 800b3ea:	6963      	ldr	r3, [r4, #20]
 800b3ec:	b2f6      	uxtb	r6, r6
 800b3ee:	4283      	cmp	r3, r0
 800b3f0:	4637      	mov	r7, r6
 800b3f2:	dc04      	bgt.n	800b3fe <__swbuf_r+0x42>
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f000 f926 	bl	800b648 <_fflush_r>
 800b3fc:	bb28      	cbnz	r0, 800b44a <__swbuf_r+0x8e>
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	3b01      	subs	r3, #1
 800b402:	60a3      	str	r3, [r4, #8]
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	6022      	str	r2, [r4, #0]
 800b40a:	701e      	strb	r6, [r3, #0]
 800b40c:	6963      	ldr	r3, [r4, #20]
 800b40e:	3001      	adds	r0, #1
 800b410:	4283      	cmp	r3, r0
 800b412:	d004      	beq.n	800b41e <__swbuf_r+0x62>
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	07db      	lsls	r3, r3, #31
 800b418:	d519      	bpl.n	800b44e <__swbuf_r+0x92>
 800b41a:	2e0a      	cmp	r6, #10
 800b41c:	d117      	bne.n	800b44e <__swbuf_r+0x92>
 800b41e:	4621      	mov	r1, r4
 800b420:	4628      	mov	r0, r5
 800b422:	f000 f911 	bl	800b648 <_fflush_r>
 800b426:	b190      	cbz	r0, 800b44e <__swbuf_r+0x92>
 800b428:	e00f      	b.n	800b44a <__swbuf_r+0x8e>
 800b42a:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <__swbuf_r+0x9c>)
 800b42c:	429c      	cmp	r4, r3
 800b42e:	d101      	bne.n	800b434 <__swbuf_r+0x78>
 800b430:	68ac      	ldr	r4, [r5, #8]
 800b432:	e7d0      	b.n	800b3d6 <__swbuf_r+0x1a>
 800b434:	4b09      	ldr	r3, [pc, #36]	; (800b45c <__swbuf_r+0xa0>)
 800b436:	429c      	cmp	r4, r3
 800b438:	bf08      	it	eq
 800b43a:	68ec      	ldreq	r4, [r5, #12]
 800b43c:	e7cb      	b.n	800b3d6 <__swbuf_r+0x1a>
 800b43e:	4621      	mov	r1, r4
 800b440:	4628      	mov	r0, r5
 800b442:	f000 f80d 	bl	800b460 <__swsetup_r>
 800b446:	2800      	cmp	r0, #0
 800b448:	d0cc      	beq.n	800b3e4 <__swbuf_r+0x28>
 800b44a:	f04f 37ff 	mov.w	r7, #4294967295
 800b44e:	4638      	mov	r0, r7
 800b450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b452:	bf00      	nop
 800b454:	0800c15c 	.word	0x0800c15c
 800b458:	0800c17c 	.word	0x0800c17c
 800b45c:	0800c13c 	.word	0x0800c13c

0800b460 <__swsetup_r>:
 800b460:	4b32      	ldr	r3, [pc, #200]	; (800b52c <__swsetup_r+0xcc>)
 800b462:	b570      	push	{r4, r5, r6, lr}
 800b464:	681d      	ldr	r5, [r3, #0]
 800b466:	4606      	mov	r6, r0
 800b468:	460c      	mov	r4, r1
 800b46a:	b125      	cbz	r5, 800b476 <__swsetup_r+0x16>
 800b46c:	69ab      	ldr	r3, [r5, #24]
 800b46e:	b913      	cbnz	r3, 800b476 <__swsetup_r+0x16>
 800b470:	4628      	mov	r0, r5
 800b472:	f000 f953 	bl	800b71c <__sinit>
 800b476:	4b2e      	ldr	r3, [pc, #184]	; (800b530 <__swsetup_r+0xd0>)
 800b478:	429c      	cmp	r4, r3
 800b47a:	d10f      	bne.n	800b49c <__swsetup_r+0x3c>
 800b47c:	686c      	ldr	r4, [r5, #4]
 800b47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b482:	b29a      	uxth	r2, r3
 800b484:	0715      	lsls	r5, r2, #28
 800b486:	d42c      	bmi.n	800b4e2 <__swsetup_r+0x82>
 800b488:	06d0      	lsls	r0, r2, #27
 800b48a:	d411      	bmi.n	800b4b0 <__swsetup_r+0x50>
 800b48c:	2209      	movs	r2, #9
 800b48e:	6032      	str	r2, [r6, #0]
 800b490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b494:	81a3      	strh	r3, [r4, #12]
 800b496:	f04f 30ff 	mov.w	r0, #4294967295
 800b49a:	e03e      	b.n	800b51a <__swsetup_r+0xba>
 800b49c:	4b25      	ldr	r3, [pc, #148]	; (800b534 <__swsetup_r+0xd4>)
 800b49e:	429c      	cmp	r4, r3
 800b4a0:	d101      	bne.n	800b4a6 <__swsetup_r+0x46>
 800b4a2:	68ac      	ldr	r4, [r5, #8]
 800b4a4:	e7eb      	b.n	800b47e <__swsetup_r+0x1e>
 800b4a6:	4b24      	ldr	r3, [pc, #144]	; (800b538 <__swsetup_r+0xd8>)
 800b4a8:	429c      	cmp	r4, r3
 800b4aa:	bf08      	it	eq
 800b4ac:	68ec      	ldreq	r4, [r5, #12]
 800b4ae:	e7e6      	b.n	800b47e <__swsetup_r+0x1e>
 800b4b0:	0751      	lsls	r1, r2, #29
 800b4b2:	d512      	bpl.n	800b4da <__swsetup_r+0x7a>
 800b4b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b6:	b141      	cbz	r1, 800b4ca <__swsetup_r+0x6a>
 800b4b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	d002      	beq.n	800b4c6 <__swsetup_r+0x66>
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7ff fe33 	bl	800b12c <_free_r>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4ca:	89a3      	ldrh	r3, [r4, #12]
 800b4cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6063      	str	r3, [r4, #4]
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	f043 0308 	orr.w	r3, r3, #8
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	b94b      	cbnz	r3, 800b4fa <__swsetup_r+0x9a>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f0:	d003      	beq.n	800b4fa <__swsetup_r+0x9a>
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f000 f9bf 	bl	800b878 <__smakebuf_r>
 800b4fa:	89a2      	ldrh	r2, [r4, #12]
 800b4fc:	f012 0301 	ands.w	r3, r2, #1
 800b500:	d00c      	beq.n	800b51c <__swsetup_r+0xbc>
 800b502:	2300      	movs	r3, #0
 800b504:	60a3      	str	r3, [r4, #8]
 800b506:	6963      	ldr	r3, [r4, #20]
 800b508:	425b      	negs	r3, r3
 800b50a:	61a3      	str	r3, [r4, #24]
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	b953      	cbnz	r3, 800b526 <__swsetup_r+0xc6>
 800b510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b514:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b518:	d1ba      	bne.n	800b490 <__swsetup_r+0x30>
 800b51a:	bd70      	pop	{r4, r5, r6, pc}
 800b51c:	0792      	lsls	r2, r2, #30
 800b51e:	bf58      	it	pl
 800b520:	6963      	ldrpl	r3, [r4, #20]
 800b522:	60a3      	str	r3, [r4, #8]
 800b524:	e7f2      	b.n	800b50c <__swsetup_r+0xac>
 800b526:	2000      	movs	r0, #0
 800b528:	e7f7      	b.n	800b51a <__swsetup_r+0xba>
 800b52a:	bf00      	nop
 800b52c:	2000002c 	.word	0x2000002c
 800b530:	0800c15c 	.word	0x0800c15c
 800b534:	0800c17c 	.word	0x0800c17c
 800b538:	0800c13c 	.word	0x0800c13c

0800b53c <__sflush_r>:
 800b53c:	898a      	ldrh	r2, [r1, #12]
 800b53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b542:	4605      	mov	r5, r0
 800b544:	0710      	lsls	r0, r2, #28
 800b546:	460c      	mov	r4, r1
 800b548:	d458      	bmi.n	800b5fc <__sflush_r+0xc0>
 800b54a:	684b      	ldr	r3, [r1, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dc05      	bgt.n	800b55c <__sflush_r+0x20>
 800b550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	dc02      	bgt.n	800b55c <__sflush_r+0x20>
 800b556:	2000      	movs	r0, #0
 800b558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b55e:	2e00      	cmp	r6, #0
 800b560:	d0f9      	beq.n	800b556 <__sflush_r+0x1a>
 800b562:	2300      	movs	r3, #0
 800b564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b568:	682f      	ldr	r7, [r5, #0]
 800b56a:	6a21      	ldr	r1, [r4, #32]
 800b56c:	602b      	str	r3, [r5, #0]
 800b56e:	d032      	beq.n	800b5d6 <__sflush_r+0x9a>
 800b570:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	075a      	lsls	r2, r3, #29
 800b576:	d505      	bpl.n	800b584 <__sflush_r+0x48>
 800b578:	6863      	ldr	r3, [r4, #4]
 800b57a:	1ac0      	subs	r0, r0, r3
 800b57c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b57e:	b10b      	cbz	r3, 800b584 <__sflush_r+0x48>
 800b580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b582:	1ac0      	subs	r0, r0, r3
 800b584:	2300      	movs	r3, #0
 800b586:	4602      	mov	r2, r0
 800b588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b58a:	6a21      	ldr	r1, [r4, #32]
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b0      	blx	r6
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	d106      	bne.n	800b5a4 <__sflush_r+0x68>
 800b596:	6829      	ldr	r1, [r5, #0]
 800b598:	291d      	cmp	r1, #29
 800b59a:	d848      	bhi.n	800b62e <__sflush_r+0xf2>
 800b59c:	4a29      	ldr	r2, [pc, #164]	; (800b644 <__sflush_r+0x108>)
 800b59e:	40ca      	lsrs	r2, r1
 800b5a0:	07d6      	lsls	r6, r2, #31
 800b5a2:	d544      	bpl.n	800b62e <__sflush_r+0xf2>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	6062      	str	r2, [r4, #4]
 800b5a8:	04d9      	lsls	r1, r3, #19
 800b5aa:	6922      	ldr	r2, [r4, #16]
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	d504      	bpl.n	800b5ba <__sflush_r+0x7e>
 800b5b0:	1c42      	adds	r2, r0, #1
 800b5b2:	d101      	bne.n	800b5b8 <__sflush_r+0x7c>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b903      	cbnz	r3, 800b5ba <__sflush_r+0x7e>
 800b5b8:	6560      	str	r0, [r4, #84]	; 0x54
 800b5ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5bc:	602f      	str	r7, [r5, #0]
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d0c9      	beq.n	800b556 <__sflush_r+0x1a>
 800b5c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c6:	4299      	cmp	r1, r3
 800b5c8:	d002      	beq.n	800b5d0 <__sflush_r+0x94>
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7ff fdae 	bl	800b12c <_free_r>
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	6360      	str	r0, [r4, #52]	; 0x34
 800b5d4:	e7c0      	b.n	800b558 <__sflush_r+0x1c>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b0      	blx	r6
 800b5dc:	1c41      	adds	r1, r0, #1
 800b5de:	d1c8      	bne.n	800b572 <__sflush_r+0x36>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0c5      	beq.n	800b572 <__sflush_r+0x36>
 800b5e6:	2b1d      	cmp	r3, #29
 800b5e8:	d001      	beq.n	800b5ee <__sflush_r+0xb2>
 800b5ea:	2b16      	cmp	r3, #22
 800b5ec:	d101      	bne.n	800b5f2 <__sflush_r+0xb6>
 800b5ee:	602f      	str	r7, [r5, #0]
 800b5f0:	e7b1      	b.n	800b556 <__sflush_r+0x1a>
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	e7ad      	b.n	800b558 <__sflush_r+0x1c>
 800b5fc:	690f      	ldr	r7, [r1, #16]
 800b5fe:	2f00      	cmp	r7, #0
 800b600:	d0a9      	beq.n	800b556 <__sflush_r+0x1a>
 800b602:	0793      	lsls	r3, r2, #30
 800b604:	680e      	ldr	r6, [r1, #0]
 800b606:	bf08      	it	eq
 800b608:	694b      	ldreq	r3, [r1, #20]
 800b60a:	600f      	str	r7, [r1, #0]
 800b60c:	bf18      	it	ne
 800b60e:	2300      	movne	r3, #0
 800b610:	eba6 0807 	sub.w	r8, r6, r7
 800b614:	608b      	str	r3, [r1, #8]
 800b616:	f1b8 0f00 	cmp.w	r8, #0
 800b61a:	dd9c      	ble.n	800b556 <__sflush_r+0x1a>
 800b61c:	4643      	mov	r3, r8
 800b61e:	463a      	mov	r2, r7
 800b620:	6a21      	ldr	r1, [r4, #32]
 800b622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b624:	4628      	mov	r0, r5
 800b626:	47b0      	blx	r6
 800b628:	2800      	cmp	r0, #0
 800b62a:	dc06      	bgt.n	800b63a <__sflush_r+0xfe>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	e78e      	b.n	800b558 <__sflush_r+0x1c>
 800b63a:	4407      	add	r7, r0
 800b63c:	eba8 0800 	sub.w	r8, r8, r0
 800b640:	e7e9      	b.n	800b616 <__sflush_r+0xda>
 800b642:	bf00      	nop
 800b644:	20400001 	.word	0x20400001

0800b648 <_fflush_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	690b      	ldr	r3, [r1, #16]
 800b64c:	4605      	mov	r5, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	b1db      	cbz	r3, 800b68a <_fflush_r+0x42>
 800b652:	b118      	cbz	r0, 800b65c <_fflush_r+0x14>
 800b654:	6983      	ldr	r3, [r0, #24]
 800b656:	b90b      	cbnz	r3, 800b65c <_fflush_r+0x14>
 800b658:	f000 f860 	bl	800b71c <__sinit>
 800b65c:	4b0c      	ldr	r3, [pc, #48]	; (800b690 <_fflush_r+0x48>)
 800b65e:	429c      	cmp	r4, r3
 800b660:	d109      	bne.n	800b676 <_fflush_r+0x2e>
 800b662:	686c      	ldr	r4, [r5, #4]
 800b664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b668:	b17b      	cbz	r3, 800b68a <_fflush_r+0x42>
 800b66a:	4621      	mov	r1, r4
 800b66c:	4628      	mov	r0, r5
 800b66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b672:	f7ff bf63 	b.w	800b53c <__sflush_r>
 800b676:	4b07      	ldr	r3, [pc, #28]	; (800b694 <_fflush_r+0x4c>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	d101      	bne.n	800b680 <_fflush_r+0x38>
 800b67c:	68ac      	ldr	r4, [r5, #8]
 800b67e:	e7f1      	b.n	800b664 <_fflush_r+0x1c>
 800b680:	4b05      	ldr	r3, [pc, #20]	; (800b698 <_fflush_r+0x50>)
 800b682:	429c      	cmp	r4, r3
 800b684:	bf08      	it	eq
 800b686:	68ec      	ldreq	r4, [r5, #12]
 800b688:	e7ec      	b.n	800b664 <_fflush_r+0x1c>
 800b68a:	2000      	movs	r0, #0
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	bf00      	nop
 800b690:	0800c15c 	.word	0x0800c15c
 800b694:	0800c17c 	.word	0x0800c17c
 800b698:	0800c13c 	.word	0x0800c13c

0800b69c <std>:
 800b69c:	2300      	movs	r3, #0
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b6a6:	6083      	str	r3, [r0, #8]
 800b6a8:	8181      	strh	r1, [r0, #12]
 800b6aa:	6643      	str	r3, [r0, #100]	; 0x64
 800b6ac:	81c2      	strh	r2, [r0, #14]
 800b6ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6b2:	6183      	str	r3, [r0, #24]
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	2208      	movs	r2, #8
 800b6b8:	305c      	adds	r0, #92	; 0x5c
 800b6ba:	f7ff fd2f 	bl	800b11c <memset>
 800b6be:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <std+0x38>)
 800b6c0:	6263      	str	r3, [r4, #36]	; 0x24
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <std+0x3c>)
 800b6c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <std+0x40>)
 800b6c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <std+0x44>)
 800b6cc:	6224      	str	r4, [r4, #32]
 800b6ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	bf00      	nop
 800b6d4:	0800bef9 	.word	0x0800bef9
 800b6d8:	0800bf1b 	.word	0x0800bf1b
 800b6dc:	0800bf53 	.word	0x0800bf53
 800b6e0:	0800bf77 	.word	0x0800bf77

0800b6e4 <_cleanup_r>:
 800b6e4:	4901      	ldr	r1, [pc, #4]	; (800b6ec <_cleanup_r+0x8>)
 800b6e6:	f000 b885 	b.w	800b7f4 <_fwalk_reent>
 800b6ea:	bf00      	nop
 800b6ec:	0800b649 	.word	0x0800b649

0800b6f0 <__sfmoreglue>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	1e4a      	subs	r2, r1, #1
 800b6f4:	2568      	movs	r5, #104	; 0x68
 800b6f6:	4355      	muls	r5, r2
 800b6f8:	460e      	mov	r6, r1
 800b6fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6fe:	f7ff fd63 	bl	800b1c8 <_malloc_r>
 800b702:	4604      	mov	r4, r0
 800b704:	b140      	cbz	r0, 800b718 <__sfmoreglue+0x28>
 800b706:	2100      	movs	r1, #0
 800b708:	e9c0 1600 	strd	r1, r6, [r0]
 800b70c:	300c      	adds	r0, #12
 800b70e:	60a0      	str	r0, [r4, #8]
 800b710:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b714:	f7ff fd02 	bl	800b11c <memset>
 800b718:	4620      	mov	r0, r4
 800b71a:	bd70      	pop	{r4, r5, r6, pc}

0800b71c <__sinit>:
 800b71c:	6983      	ldr	r3, [r0, #24]
 800b71e:	b510      	push	{r4, lr}
 800b720:	4604      	mov	r4, r0
 800b722:	bb33      	cbnz	r3, 800b772 <__sinit+0x56>
 800b724:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b728:	6503      	str	r3, [r0, #80]	; 0x50
 800b72a:	4b12      	ldr	r3, [pc, #72]	; (800b774 <__sinit+0x58>)
 800b72c:	4a12      	ldr	r2, [pc, #72]	; (800b778 <__sinit+0x5c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6282      	str	r2, [r0, #40]	; 0x28
 800b732:	4298      	cmp	r0, r3
 800b734:	bf04      	itt	eq
 800b736:	2301      	moveq	r3, #1
 800b738:	6183      	streq	r3, [r0, #24]
 800b73a:	f000 f81f 	bl	800b77c <__sfp>
 800b73e:	6060      	str	r0, [r4, #4]
 800b740:	4620      	mov	r0, r4
 800b742:	f000 f81b 	bl	800b77c <__sfp>
 800b746:	60a0      	str	r0, [r4, #8]
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 f817 	bl	800b77c <__sfp>
 800b74e:	2200      	movs	r2, #0
 800b750:	60e0      	str	r0, [r4, #12]
 800b752:	2104      	movs	r1, #4
 800b754:	6860      	ldr	r0, [r4, #4]
 800b756:	f7ff ffa1 	bl	800b69c <std>
 800b75a:	2201      	movs	r2, #1
 800b75c:	2109      	movs	r1, #9
 800b75e:	68a0      	ldr	r0, [r4, #8]
 800b760:	f7ff ff9c 	bl	800b69c <std>
 800b764:	2202      	movs	r2, #2
 800b766:	2112      	movs	r1, #18
 800b768:	68e0      	ldr	r0, [r4, #12]
 800b76a:	f7ff ff97 	bl	800b69c <std>
 800b76e:	2301      	movs	r3, #1
 800b770:	61a3      	str	r3, [r4, #24]
 800b772:	bd10      	pop	{r4, pc}
 800b774:	0800c138 	.word	0x0800c138
 800b778:	0800b6e5 	.word	0x0800b6e5

0800b77c <__sfp>:
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	4b1b      	ldr	r3, [pc, #108]	; (800b7ec <__sfp+0x70>)
 800b780:	681e      	ldr	r6, [r3, #0]
 800b782:	69b3      	ldr	r3, [r6, #24]
 800b784:	4607      	mov	r7, r0
 800b786:	b913      	cbnz	r3, 800b78e <__sfp+0x12>
 800b788:	4630      	mov	r0, r6
 800b78a:	f7ff ffc7 	bl	800b71c <__sinit>
 800b78e:	3648      	adds	r6, #72	; 0x48
 800b790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b794:	3b01      	subs	r3, #1
 800b796:	d503      	bpl.n	800b7a0 <__sfp+0x24>
 800b798:	6833      	ldr	r3, [r6, #0]
 800b79a:	b133      	cbz	r3, 800b7aa <__sfp+0x2e>
 800b79c:	6836      	ldr	r6, [r6, #0]
 800b79e:	e7f7      	b.n	800b790 <__sfp+0x14>
 800b7a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7a4:	b16d      	cbz	r5, 800b7c2 <__sfp+0x46>
 800b7a6:	3468      	adds	r4, #104	; 0x68
 800b7a8:	e7f4      	b.n	800b794 <__sfp+0x18>
 800b7aa:	2104      	movs	r1, #4
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	f7ff ff9f 	bl	800b6f0 <__sfmoreglue>
 800b7b2:	6030      	str	r0, [r6, #0]
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d1f1      	bne.n	800b79c <__sfp+0x20>
 800b7b8:	230c      	movs	r3, #12
 800b7ba:	603b      	str	r3, [r7, #0]
 800b7bc:	4604      	mov	r4, r0
 800b7be:	4620      	mov	r0, r4
 800b7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <__sfp+0x74>)
 800b7c4:	6665      	str	r5, [r4, #100]	; 0x64
 800b7c6:	e9c4 5500 	strd	r5, r5, [r4]
 800b7ca:	60a5      	str	r5, [r4, #8]
 800b7cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b7d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b7d4:	2208      	movs	r2, #8
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7dc:	f7ff fc9e 	bl	800b11c <memset>
 800b7e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7e8:	e7e9      	b.n	800b7be <__sfp+0x42>
 800b7ea:	bf00      	nop
 800b7ec:	0800c138 	.word	0x0800c138
 800b7f0:	ffff0001 	.word	0xffff0001

0800b7f4 <_fwalk_reent>:
 800b7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	4689      	mov	r9, r1
 800b7fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b800:	2600      	movs	r6, #0
 800b802:	b914      	cbnz	r4, 800b80a <_fwalk_reent+0x16>
 800b804:	4630      	mov	r0, r6
 800b806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b80e:	3f01      	subs	r7, #1
 800b810:	d501      	bpl.n	800b816 <_fwalk_reent+0x22>
 800b812:	6824      	ldr	r4, [r4, #0]
 800b814:	e7f5      	b.n	800b802 <_fwalk_reent+0xe>
 800b816:	89ab      	ldrh	r3, [r5, #12]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d907      	bls.n	800b82c <_fwalk_reent+0x38>
 800b81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b820:	3301      	adds	r3, #1
 800b822:	d003      	beq.n	800b82c <_fwalk_reent+0x38>
 800b824:	4629      	mov	r1, r5
 800b826:	4640      	mov	r0, r8
 800b828:	47c8      	blx	r9
 800b82a:	4306      	orrs	r6, r0
 800b82c:	3568      	adds	r5, #104	; 0x68
 800b82e:	e7ee      	b.n	800b80e <_fwalk_reent+0x1a>

0800b830 <__swhatbuf_r>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	460e      	mov	r6, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	2900      	cmp	r1, #0
 800b83a:	b096      	sub	sp, #88	; 0x58
 800b83c:	4614      	mov	r4, r2
 800b83e:	461d      	mov	r5, r3
 800b840:	da07      	bge.n	800b852 <__swhatbuf_r+0x22>
 800b842:	2300      	movs	r3, #0
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	89b3      	ldrh	r3, [r6, #12]
 800b848:	061a      	lsls	r2, r3, #24
 800b84a:	d410      	bmi.n	800b86e <__swhatbuf_r+0x3e>
 800b84c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b850:	e00e      	b.n	800b870 <__swhatbuf_r+0x40>
 800b852:	466a      	mov	r2, sp
 800b854:	f000 fbb6 	bl	800bfc4 <_fstat_r>
 800b858:	2800      	cmp	r0, #0
 800b85a:	dbf2      	blt.n	800b842 <__swhatbuf_r+0x12>
 800b85c:	9a01      	ldr	r2, [sp, #4]
 800b85e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b862:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b866:	425a      	negs	r2, r3
 800b868:	415a      	adcs	r2, r3
 800b86a:	602a      	str	r2, [r5, #0]
 800b86c:	e7ee      	b.n	800b84c <__swhatbuf_r+0x1c>
 800b86e:	2340      	movs	r3, #64	; 0x40
 800b870:	2000      	movs	r0, #0
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	b016      	add	sp, #88	; 0x58
 800b876:	bd70      	pop	{r4, r5, r6, pc}

0800b878 <__smakebuf_r>:
 800b878:	898b      	ldrh	r3, [r1, #12]
 800b87a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b87c:	079d      	lsls	r5, r3, #30
 800b87e:	4606      	mov	r6, r0
 800b880:	460c      	mov	r4, r1
 800b882:	d507      	bpl.n	800b894 <__smakebuf_r+0x1c>
 800b884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	6123      	str	r3, [r4, #16]
 800b88c:	2301      	movs	r3, #1
 800b88e:	6163      	str	r3, [r4, #20]
 800b890:	b002      	add	sp, #8
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	ab01      	add	r3, sp, #4
 800b896:	466a      	mov	r2, sp
 800b898:	f7ff ffca 	bl	800b830 <__swhatbuf_r>
 800b89c:	9900      	ldr	r1, [sp, #0]
 800b89e:	4605      	mov	r5, r0
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7ff fc91 	bl	800b1c8 <_malloc_r>
 800b8a6:	b948      	cbnz	r0, 800b8bc <__smakebuf_r+0x44>
 800b8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ac:	059a      	lsls	r2, r3, #22
 800b8ae:	d4ef      	bmi.n	800b890 <__smakebuf_r+0x18>
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	f043 0302 	orr.w	r3, r3, #2
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	e7e3      	b.n	800b884 <__smakebuf_r+0xc>
 800b8bc:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <__smakebuf_r+0x7c>)
 800b8be:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	6020      	str	r0, [r4, #0]
 800b8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	6163      	str	r3, [r4, #20]
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	6120      	str	r0, [r4, #16]
 800b8d2:	b15b      	cbz	r3, 800b8ec <__smakebuf_r+0x74>
 800b8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 fb85 	bl	800bfe8 <_isatty_r>
 800b8de:	b128      	cbz	r0, 800b8ec <__smakebuf_r+0x74>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	f043 0301 	orr.w	r3, r3, #1
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	431d      	orrs	r5, r3
 800b8f0:	81a5      	strh	r5, [r4, #12]
 800b8f2:	e7cd      	b.n	800b890 <__smakebuf_r+0x18>
 800b8f4:	0800b6e5 	.word	0x0800b6e5

0800b8f8 <__malloc_lock>:
 800b8f8:	4770      	bx	lr

0800b8fa <__malloc_unlock>:
 800b8fa:	4770      	bx	lr

0800b8fc <__sfputc_r>:
 800b8fc:	6893      	ldr	r3, [r2, #8]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	2b00      	cmp	r3, #0
 800b902:	b410      	push	{r4}
 800b904:	6093      	str	r3, [r2, #8]
 800b906:	da08      	bge.n	800b91a <__sfputc_r+0x1e>
 800b908:	6994      	ldr	r4, [r2, #24]
 800b90a:	42a3      	cmp	r3, r4
 800b90c:	db01      	blt.n	800b912 <__sfputc_r+0x16>
 800b90e:	290a      	cmp	r1, #10
 800b910:	d103      	bne.n	800b91a <__sfputc_r+0x1e>
 800b912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b916:	f7ff bd51 	b.w	800b3bc <__swbuf_r>
 800b91a:	6813      	ldr	r3, [r2, #0]
 800b91c:	1c58      	adds	r0, r3, #1
 800b91e:	6010      	str	r0, [r2, #0]
 800b920:	7019      	strb	r1, [r3, #0]
 800b922:	4608      	mov	r0, r1
 800b924:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <__sfputs_r>:
 800b92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92c:	4606      	mov	r6, r0
 800b92e:	460f      	mov	r7, r1
 800b930:	4614      	mov	r4, r2
 800b932:	18d5      	adds	r5, r2, r3
 800b934:	42ac      	cmp	r4, r5
 800b936:	d101      	bne.n	800b93c <__sfputs_r+0x12>
 800b938:	2000      	movs	r0, #0
 800b93a:	e007      	b.n	800b94c <__sfputs_r+0x22>
 800b93c:	463a      	mov	r2, r7
 800b93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b942:	4630      	mov	r0, r6
 800b944:	f7ff ffda 	bl	800b8fc <__sfputc_r>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d1f3      	bne.n	800b934 <__sfputs_r+0xa>
 800b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b950 <_vfiprintf_r>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	460c      	mov	r4, r1
 800b956:	b09d      	sub	sp, #116	; 0x74
 800b958:	4617      	mov	r7, r2
 800b95a:	461d      	mov	r5, r3
 800b95c:	4606      	mov	r6, r0
 800b95e:	b118      	cbz	r0, 800b968 <_vfiprintf_r+0x18>
 800b960:	6983      	ldr	r3, [r0, #24]
 800b962:	b90b      	cbnz	r3, 800b968 <_vfiprintf_r+0x18>
 800b964:	f7ff feda 	bl	800b71c <__sinit>
 800b968:	4b7c      	ldr	r3, [pc, #496]	; (800bb5c <_vfiprintf_r+0x20c>)
 800b96a:	429c      	cmp	r4, r3
 800b96c:	d158      	bne.n	800ba20 <_vfiprintf_r+0xd0>
 800b96e:	6874      	ldr	r4, [r6, #4]
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	0718      	lsls	r0, r3, #28
 800b974:	d55e      	bpl.n	800ba34 <_vfiprintf_r+0xe4>
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d05b      	beq.n	800ba34 <_vfiprintf_r+0xe4>
 800b97c:	2300      	movs	r3, #0
 800b97e:	9309      	str	r3, [sp, #36]	; 0x24
 800b980:	2320      	movs	r3, #32
 800b982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b986:	2330      	movs	r3, #48	; 0x30
 800b988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b98c:	9503      	str	r5, [sp, #12]
 800b98e:	f04f 0b01 	mov.w	fp, #1
 800b992:	46b8      	mov	r8, r7
 800b994:	4645      	mov	r5, r8
 800b996:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b99a:	b10b      	cbz	r3, 800b9a0 <_vfiprintf_r+0x50>
 800b99c:	2b25      	cmp	r3, #37	; 0x25
 800b99e:	d154      	bne.n	800ba4a <_vfiprintf_r+0xfa>
 800b9a0:	ebb8 0a07 	subs.w	sl, r8, r7
 800b9a4:	d00b      	beq.n	800b9be <_vfiprintf_r+0x6e>
 800b9a6:	4653      	mov	r3, sl
 800b9a8:	463a      	mov	r2, r7
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7ff ffbc 	bl	800b92a <__sfputs_r>
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	f000 80c2 	beq.w	800bb3c <_vfiprintf_r+0x1ec>
 800b9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ba:	4453      	add	r3, sl
 800b9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9be:	f898 3000 	ldrb.w	r3, [r8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80ba 	beq.w	800bb3c <_vfiprintf_r+0x1ec>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	9307      	str	r3, [sp, #28]
 800b9d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9da:	931a      	str	r3, [sp, #104]	; 0x68
 800b9dc:	46a8      	mov	r8, r5
 800b9de:	2205      	movs	r2, #5
 800b9e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b9e4:	485e      	ldr	r0, [pc, #376]	; (800bb60 <_vfiprintf_r+0x210>)
 800b9e6:	f7f4 fbf3 	bl	80001d0 <memchr>
 800b9ea:	9b04      	ldr	r3, [sp, #16]
 800b9ec:	bb78      	cbnz	r0, 800ba4e <_vfiprintf_r+0xfe>
 800b9ee:	06d9      	lsls	r1, r3, #27
 800b9f0:	bf44      	itt	mi
 800b9f2:	2220      	movmi	r2, #32
 800b9f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9f8:	071a      	lsls	r2, r3, #28
 800b9fa:	bf44      	itt	mi
 800b9fc:	222b      	movmi	r2, #43	; 0x2b
 800b9fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba02:	782a      	ldrb	r2, [r5, #0]
 800ba04:	2a2a      	cmp	r2, #42	; 0x2a
 800ba06:	d02a      	beq.n	800ba5e <_vfiprintf_r+0x10e>
 800ba08:	9a07      	ldr	r2, [sp, #28]
 800ba0a:	46a8      	mov	r8, r5
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	250a      	movs	r5, #10
 800ba10:	4641      	mov	r1, r8
 800ba12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba16:	3b30      	subs	r3, #48	; 0x30
 800ba18:	2b09      	cmp	r3, #9
 800ba1a:	d969      	bls.n	800baf0 <_vfiprintf_r+0x1a0>
 800ba1c:	b360      	cbz	r0, 800ba78 <_vfiprintf_r+0x128>
 800ba1e:	e024      	b.n	800ba6a <_vfiprintf_r+0x11a>
 800ba20:	4b50      	ldr	r3, [pc, #320]	; (800bb64 <_vfiprintf_r+0x214>)
 800ba22:	429c      	cmp	r4, r3
 800ba24:	d101      	bne.n	800ba2a <_vfiprintf_r+0xda>
 800ba26:	68b4      	ldr	r4, [r6, #8]
 800ba28:	e7a2      	b.n	800b970 <_vfiprintf_r+0x20>
 800ba2a:	4b4f      	ldr	r3, [pc, #316]	; (800bb68 <_vfiprintf_r+0x218>)
 800ba2c:	429c      	cmp	r4, r3
 800ba2e:	bf08      	it	eq
 800ba30:	68f4      	ldreq	r4, [r6, #12]
 800ba32:	e79d      	b.n	800b970 <_vfiprintf_r+0x20>
 800ba34:	4621      	mov	r1, r4
 800ba36:	4630      	mov	r0, r6
 800ba38:	f7ff fd12 	bl	800b460 <__swsetup_r>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d09d      	beq.n	800b97c <_vfiprintf_r+0x2c>
 800ba40:	f04f 30ff 	mov.w	r0, #4294967295
 800ba44:	b01d      	add	sp, #116	; 0x74
 800ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4a:	46a8      	mov	r8, r5
 800ba4c:	e7a2      	b.n	800b994 <_vfiprintf_r+0x44>
 800ba4e:	4a44      	ldr	r2, [pc, #272]	; (800bb60 <_vfiprintf_r+0x210>)
 800ba50:	1a80      	subs	r0, r0, r2
 800ba52:	fa0b f000 	lsl.w	r0, fp, r0
 800ba56:	4318      	orrs	r0, r3
 800ba58:	9004      	str	r0, [sp, #16]
 800ba5a:	4645      	mov	r5, r8
 800ba5c:	e7be      	b.n	800b9dc <_vfiprintf_r+0x8c>
 800ba5e:	9a03      	ldr	r2, [sp, #12]
 800ba60:	1d11      	adds	r1, r2, #4
 800ba62:	6812      	ldr	r2, [r2, #0]
 800ba64:	9103      	str	r1, [sp, #12]
 800ba66:	2a00      	cmp	r2, #0
 800ba68:	db01      	blt.n	800ba6e <_vfiprintf_r+0x11e>
 800ba6a:	9207      	str	r2, [sp, #28]
 800ba6c:	e004      	b.n	800ba78 <_vfiprintf_r+0x128>
 800ba6e:	4252      	negs	r2, r2
 800ba70:	f043 0302 	orr.w	r3, r3, #2
 800ba74:	9207      	str	r2, [sp, #28]
 800ba76:	9304      	str	r3, [sp, #16]
 800ba78:	f898 3000 	ldrb.w	r3, [r8]
 800ba7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba7e:	d10e      	bne.n	800ba9e <_vfiprintf_r+0x14e>
 800ba80:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ba84:	2b2a      	cmp	r3, #42	; 0x2a
 800ba86:	d138      	bne.n	800bafa <_vfiprintf_r+0x1aa>
 800ba88:	9b03      	ldr	r3, [sp, #12]
 800ba8a:	1d1a      	adds	r2, r3, #4
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	9203      	str	r2, [sp, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bfb8      	it	lt
 800ba94:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba98:	f108 0802 	add.w	r8, r8, #2
 800ba9c:	9305      	str	r3, [sp, #20]
 800ba9e:	4d33      	ldr	r5, [pc, #204]	; (800bb6c <_vfiprintf_r+0x21c>)
 800baa0:	f898 1000 	ldrb.w	r1, [r8]
 800baa4:	2203      	movs	r2, #3
 800baa6:	4628      	mov	r0, r5
 800baa8:	f7f4 fb92 	bl	80001d0 <memchr>
 800baac:	b140      	cbz	r0, 800bac0 <_vfiprintf_r+0x170>
 800baae:	2340      	movs	r3, #64	; 0x40
 800bab0:	1b40      	subs	r0, r0, r5
 800bab2:	fa03 f000 	lsl.w	r0, r3, r0
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	4303      	orrs	r3, r0
 800baba:	f108 0801 	add.w	r8, r8, #1
 800babe:	9304      	str	r3, [sp, #16]
 800bac0:	f898 1000 	ldrb.w	r1, [r8]
 800bac4:	482a      	ldr	r0, [pc, #168]	; (800bb70 <_vfiprintf_r+0x220>)
 800bac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baca:	2206      	movs	r2, #6
 800bacc:	f108 0701 	add.w	r7, r8, #1
 800bad0:	f7f4 fb7e 	bl	80001d0 <memchr>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d037      	beq.n	800bb48 <_vfiprintf_r+0x1f8>
 800bad8:	4b26      	ldr	r3, [pc, #152]	; (800bb74 <_vfiprintf_r+0x224>)
 800bada:	bb1b      	cbnz	r3, 800bb24 <_vfiprintf_r+0x1d4>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	3307      	adds	r3, #7
 800bae0:	f023 0307 	bic.w	r3, r3, #7
 800bae4:	3308      	adds	r3, #8
 800bae6:	9303      	str	r3, [sp, #12]
 800bae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baea:	444b      	add	r3, r9
 800baec:	9309      	str	r3, [sp, #36]	; 0x24
 800baee:	e750      	b.n	800b992 <_vfiprintf_r+0x42>
 800baf0:	fb05 3202 	mla	r2, r5, r2, r3
 800baf4:	2001      	movs	r0, #1
 800baf6:	4688      	mov	r8, r1
 800baf8:	e78a      	b.n	800ba10 <_vfiprintf_r+0xc0>
 800bafa:	2300      	movs	r3, #0
 800bafc:	f108 0801 	add.w	r8, r8, #1
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	4619      	mov	r1, r3
 800bb04:	250a      	movs	r5, #10
 800bb06:	4640      	mov	r0, r8
 800bb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb0c:	3a30      	subs	r2, #48	; 0x30
 800bb0e:	2a09      	cmp	r2, #9
 800bb10:	d903      	bls.n	800bb1a <_vfiprintf_r+0x1ca>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0c3      	beq.n	800ba9e <_vfiprintf_r+0x14e>
 800bb16:	9105      	str	r1, [sp, #20]
 800bb18:	e7c1      	b.n	800ba9e <_vfiprintf_r+0x14e>
 800bb1a:	fb05 2101 	mla	r1, r5, r1, r2
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4680      	mov	r8, r0
 800bb22:	e7f0      	b.n	800bb06 <_vfiprintf_r+0x1b6>
 800bb24:	ab03      	add	r3, sp, #12
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	4622      	mov	r2, r4
 800bb2a:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <_vfiprintf_r+0x228>)
 800bb2c:	a904      	add	r1, sp, #16
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f3af 8000 	nop.w
 800bb34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bb38:	4681      	mov	r9, r0
 800bb3a:	d1d5      	bne.n	800bae8 <_vfiprintf_r+0x198>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	065b      	lsls	r3, r3, #25
 800bb40:	f53f af7e 	bmi.w	800ba40 <_vfiprintf_r+0xf0>
 800bb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb46:	e77d      	b.n	800ba44 <_vfiprintf_r+0xf4>
 800bb48:	ab03      	add	r3, sp, #12
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	4b0a      	ldr	r3, [pc, #40]	; (800bb78 <_vfiprintf_r+0x228>)
 800bb50:	a904      	add	r1, sp, #16
 800bb52:	4630      	mov	r0, r6
 800bb54:	f000 f888 	bl	800bc68 <_printf_i>
 800bb58:	e7ec      	b.n	800bb34 <_vfiprintf_r+0x1e4>
 800bb5a:	bf00      	nop
 800bb5c:	0800c15c 	.word	0x0800c15c
 800bb60:	0800c19c 	.word	0x0800c19c
 800bb64:	0800c17c 	.word	0x0800c17c
 800bb68:	0800c13c 	.word	0x0800c13c
 800bb6c:	0800c1a2 	.word	0x0800c1a2
 800bb70:	0800c1a6 	.word	0x0800c1a6
 800bb74:	00000000 	.word	0x00000000
 800bb78:	0800b92b 	.word	0x0800b92b

0800bb7c <_printf_common>:
 800bb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb80:	4691      	mov	r9, r2
 800bb82:	461f      	mov	r7, r3
 800bb84:	688a      	ldr	r2, [r1, #8]
 800bb86:	690b      	ldr	r3, [r1, #16]
 800bb88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	bfb8      	it	lt
 800bb90:	4613      	movlt	r3, r2
 800bb92:	f8c9 3000 	str.w	r3, [r9]
 800bb96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	b112      	cbz	r2, 800bba6 <_printf_common+0x2a>
 800bba0:	3301      	adds	r3, #1
 800bba2:	f8c9 3000 	str.w	r3, [r9]
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	0699      	lsls	r1, r3, #26
 800bbaa:	bf42      	ittt	mi
 800bbac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bbb0:	3302      	addmi	r3, #2
 800bbb2:	f8c9 3000 	strmi.w	r3, [r9]
 800bbb6:	6825      	ldr	r5, [r4, #0]
 800bbb8:	f015 0506 	ands.w	r5, r5, #6
 800bbbc:	d107      	bne.n	800bbce <_printf_common+0x52>
 800bbbe:	f104 0a19 	add.w	sl, r4, #25
 800bbc2:	68e3      	ldr	r3, [r4, #12]
 800bbc4:	f8d9 2000 	ldr.w	r2, [r9]
 800bbc8:	1a9b      	subs	r3, r3, r2
 800bbca:	42ab      	cmp	r3, r5
 800bbcc:	dc28      	bgt.n	800bc20 <_printf_common+0xa4>
 800bbce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bbd2:	6822      	ldr	r2, [r4, #0]
 800bbd4:	3300      	adds	r3, #0
 800bbd6:	bf18      	it	ne
 800bbd8:	2301      	movne	r3, #1
 800bbda:	0692      	lsls	r2, r2, #26
 800bbdc:	d42d      	bmi.n	800bc3a <_printf_common+0xbe>
 800bbde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	47c0      	blx	r8
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d020      	beq.n	800bc2e <_printf_common+0xb2>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	68e5      	ldr	r5, [r4, #12]
 800bbf0:	f8d9 2000 	ldr.w	r2, [r9]
 800bbf4:	f003 0306 	and.w	r3, r3, #6
 800bbf8:	2b04      	cmp	r3, #4
 800bbfa:	bf08      	it	eq
 800bbfc:	1aad      	subeq	r5, r5, r2
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	6922      	ldr	r2, [r4, #16]
 800bc02:	bf0c      	ite	eq
 800bc04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc08:	2500      	movne	r5, #0
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	bfc4      	itt	gt
 800bc0e:	1a9b      	subgt	r3, r3, r2
 800bc10:	18ed      	addgt	r5, r5, r3
 800bc12:	f04f 0900 	mov.w	r9, #0
 800bc16:	341a      	adds	r4, #26
 800bc18:	454d      	cmp	r5, r9
 800bc1a:	d11a      	bne.n	800bc52 <_printf_common+0xd6>
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e008      	b.n	800bc32 <_printf_common+0xb6>
 800bc20:	2301      	movs	r3, #1
 800bc22:	4652      	mov	r2, sl
 800bc24:	4639      	mov	r1, r7
 800bc26:	4630      	mov	r0, r6
 800bc28:	47c0      	blx	r8
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	d103      	bne.n	800bc36 <_printf_common+0xba>
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc36:	3501      	adds	r5, #1
 800bc38:	e7c3      	b.n	800bbc2 <_printf_common+0x46>
 800bc3a:	18e1      	adds	r1, r4, r3
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	2030      	movs	r0, #48	; 0x30
 800bc40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc44:	4422      	add	r2, r4
 800bc46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc4e:	3302      	adds	r3, #2
 800bc50:	e7c5      	b.n	800bbde <_printf_common+0x62>
 800bc52:	2301      	movs	r3, #1
 800bc54:	4622      	mov	r2, r4
 800bc56:	4639      	mov	r1, r7
 800bc58:	4630      	mov	r0, r6
 800bc5a:	47c0      	blx	r8
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d0e6      	beq.n	800bc2e <_printf_common+0xb2>
 800bc60:	f109 0901 	add.w	r9, r9, #1
 800bc64:	e7d8      	b.n	800bc18 <_printf_common+0x9c>
	...

0800bc68 <_printf_i>:
 800bc68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bc70:	460c      	mov	r4, r1
 800bc72:	7e09      	ldrb	r1, [r1, #24]
 800bc74:	b085      	sub	sp, #20
 800bc76:	296e      	cmp	r1, #110	; 0x6e
 800bc78:	4617      	mov	r7, r2
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	4698      	mov	r8, r3
 800bc7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc80:	f000 80b3 	beq.w	800bdea <_printf_i+0x182>
 800bc84:	d822      	bhi.n	800bccc <_printf_i+0x64>
 800bc86:	2963      	cmp	r1, #99	; 0x63
 800bc88:	d036      	beq.n	800bcf8 <_printf_i+0x90>
 800bc8a:	d80a      	bhi.n	800bca2 <_printf_i+0x3a>
 800bc8c:	2900      	cmp	r1, #0
 800bc8e:	f000 80b9 	beq.w	800be04 <_printf_i+0x19c>
 800bc92:	2958      	cmp	r1, #88	; 0x58
 800bc94:	f000 8083 	beq.w	800bd9e <_printf_i+0x136>
 800bc98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bca0:	e032      	b.n	800bd08 <_printf_i+0xa0>
 800bca2:	2964      	cmp	r1, #100	; 0x64
 800bca4:	d001      	beq.n	800bcaa <_printf_i+0x42>
 800bca6:	2969      	cmp	r1, #105	; 0x69
 800bca8:	d1f6      	bne.n	800bc98 <_printf_i+0x30>
 800bcaa:	6820      	ldr	r0, [r4, #0]
 800bcac:	6813      	ldr	r3, [r2, #0]
 800bcae:	0605      	lsls	r5, r0, #24
 800bcb0:	f103 0104 	add.w	r1, r3, #4
 800bcb4:	d52a      	bpl.n	800bd0c <_printf_i+0xa4>
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6011      	str	r1, [r2, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da03      	bge.n	800bcc6 <_printf_i+0x5e>
 800bcbe:	222d      	movs	r2, #45	; 0x2d
 800bcc0:	425b      	negs	r3, r3
 800bcc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bcc6:	486f      	ldr	r0, [pc, #444]	; (800be84 <_printf_i+0x21c>)
 800bcc8:	220a      	movs	r2, #10
 800bcca:	e039      	b.n	800bd40 <_printf_i+0xd8>
 800bccc:	2973      	cmp	r1, #115	; 0x73
 800bcce:	f000 809d 	beq.w	800be0c <_printf_i+0x1a4>
 800bcd2:	d808      	bhi.n	800bce6 <_printf_i+0x7e>
 800bcd4:	296f      	cmp	r1, #111	; 0x6f
 800bcd6:	d020      	beq.n	800bd1a <_printf_i+0xb2>
 800bcd8:	2970      	cmp	r1, #112	; 0x70
 800bcda:	d1dd      	bne.n	800bc98 <_printf_i+0x30>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	f043 0320 	orr.w	r3, r3, #32
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	e003      	b.n	800bcee <_printf_i+0x86>
 800bce6:	2975      	cmp	r1, #117	; 0x75
 800bce8:	d017      	beq.n	800bd1a <_printf_i+0xb2>
 800bcea:	2978      	cmp	r1, #120	; 0x78
 800bcec:	d1d4      	bne.n	800bc98 <_printf_i+0x30>
 800bcee:	2378      	movs	r3, #120	; 0x78
 800bcf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcf4:	4864      	ldr	r0, [pc, #400]	; (800be88 <_printf_i+0x220>)
 800bcf6:	e055      	b.n	800bda4 <_printf_i+0x13c>
 800bcf8:	6813      	ldr	r3, [r2, #0]
 800bcfa:	1d19      	adds	r1, r3, #4
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6011      	str	r1, [r2, #0]
 800bd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e08c      	b.n	800be26 <_printf_i+0x1be>
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6011      	str	r1, [r2, #0]
 800bd10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd14:	bf18      	it	ne
 800bd16:	b21b      	sxthne	r3, r3
 800bd18:	e7cf      	b.n	800bcba <_printf_i+0x52>
 800bd1a:	6813      	ldr	r3, [r2, #0]
 800bd1c:	6825      	ldr	r5, [r4, #0]
 800bd1e:	1d18      	adds	r0, r3, #4
 800bd20:	6010      	str	r0, [r2, #0]
 800bd22:	0628      	lsls	r0, r5, #24
 800bd24:	d501      	bpl.n	800bd2a <_printf_i+0xc2>
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	e002      	b.n	800bd30 <_printf_i+0xc8>
 800bd2a:	0668      	lsls	r0, r5, #25
 800bd2c:	d5fb      	bpl.n	800bd26 <_printf_i+0xbe>
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	4854      	ldr	r0, [pc, #336]	; (800be84 <_printf_i+0x21c>)
 800bd32:	296f      	cmp	r1, #111	; 0x6f
 800bd34:	bf14      	ite	ne
 800bd36:	220a      	movne	r2, #10
 800bd38:	2208      	moveq	r2, #8
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd40:	6865      	ldr	r5, [r4, #4]
 800bd42:	60a5      	str	r5, [r4, #8]
 800bd44:	2d00      	cmp	r5, #0
 800bd46:	f2c0 8095 	blt.w	800be74 <_printf_i+0x20c>
 800bd4a:	6821      	ldr	r1, [r4, #0]
 800bd4c:	f021 0104 	bic.w	r1, r1, #4
 800bd50:	6021      	str	r1, [r4, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d13d      	bne.n	800bdd2 <_printf_i+0x16a>
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	f040 808e 	bne.w	800be78 <_printf_i+0x210>
 800bd5c:	4665      	mov	r5, ip
 800bd5e:	2a08      	cmp	r2, #8
 800bd60:	d10b      	bne.n	800bd7a <_printf_i+0x112>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	07db      	lsls	r3, r3, #31
 800bd66:	d508      	bpl.n	800bd7a <_printf_i+0x112>
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	6862      	ldr	r2, [r4, #4]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	bfde      	ittt	le
 800bd70:	2330      	movle	r3, #48	; 0x30
 800bd72:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd76:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd7a:	ebac 0305 	sub.w	r3, ip, r5
 800bd7e:	6123      	str	r3, [r4, #16]
 800bd80:	f8cd 8000 	str.w	r8, [sp]
 800bd84:	463b      	mov	r3, r7
 800bd86:	aa03      	add	r2, sp, #12
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f7ff fef6 	bl	800bb7c <_printf_common>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d14d      	bne.n	800be30 <_printf_i+0x1c8>
 800bd94:	f04f 30ff 	mov.w	r0, #4294967295
 800bd98:	b005      	add	sp, #20
 800bd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd9e:	4839      	ldr	r0, [pc, #228]	; (800be84 <_printf_i+0x21c>)
 800bda0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bda4:	6813      	ldr	r3, [r2, #0]
 800bda6:	6821      	ldr	r1, [r4, #0]
 800bda8:	1d1d      	adds	r5, r3, #4
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6015      	str	r5, [r2, #0]
 800bdae:	060a      	lsls	r2, r1, #24
 800bdb0:	d50b      	bpl.n	800bdca <_printf_i+0x162>
 800bdb2:	07ca      	lsls	r2, r1, #31
 800bdb4:	bf44      	itt	mi
 800bdb6:	f041 0120 	orrmi.w	r1, r1, #32
 800bdba:	6021      	strmi	r1, [r4, #0]
 800bdbc:	b91b      	cbnz	r3, 800bdc6 <_printf_i+0x15e>
 800bdbe:	6822      	ldr	r2, [r4, #0]
 800bdc0:	f022 0220 	bic.w	r2, r2, #32
 800bdc4:	6022      	str	r2, [r4, #0]
 800bdc6:	2210      	movs	r2, #16
 800bdc8:	e7b7      	b.n	800bd3a <_printf_i+0xd2>
 800bdca:	064d      	lsls	r5, r1, #25
 800bdcc:	bf48      	it	mi
 800bdce:	b29b      	uxthmi	r3, r3
 800bdd0:	e7ef      	b.n	800bdb2 <_printf_i+0x14a>
 800bdd2:	4665      	mov	r5, ip
 800bdd4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdd8:	fb02 3311 	mls	r3, r2, r1, r3
 800bddc:	5cc3      	ldrb	r3, [r0, r3]
 800bdde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bde2:	460b      	mov	r3, r1
 800bde4:	2900      	cmp	r1, #0
 800bde6:	d1f5      	bne.n	800bdd4 <_printf_i+0x16c>
 800bde8:	e7b9      	b.n	800bd5e <_printf_i+0xf6>
 800bdea:	6813      	ldr	r3, [r2, #0]
 800bdec:	6825      	ldr	r5, [r4, #0]
 800bdee:	6961      	ldr	r1, [r4, #20]
 800bdf0:	1d18      	adds	r0, r3, #4
 800bdf2:	6010      	str	r0, [r2, #0]
 800bdf4:	0628      	lsls	r0, r5, #24
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	d501      	bpl.n	800bdfe <_printf_i+0x196>
 800bdfa:	6019      	str	r1, [r3, #0]
 800bdfc:	e002      	b.n	800be04 <_printf_i+0x19c>
 800bdfe:	066a      	lsls	r2, r5, #25
 800be00:	d5fb      	bpl.n	800bdfa <_printf_i+0x192>
 800be02:	8019      	strh	r1, [r3, #0]
 800be04:	2300      	movs	r3, #0
 800be06:	6123      	str	r3, [r4, #16]
 800be08:	4665      	mov	r5, ip
 800be0a:	e7b9      	b.n	800bd80 <_printf_i+0x118>
 800be0c:	6813      	ldr	r3, [r2, #0]
 800be0e:	1d19      	adds	r1, r3, #4
 800be10:	6011      	str	r1, [r2, #0]
 800be12:	681d      	ldr	r5, [r3, #0]
 800be14:	6862      	ldr	r2, [r4, #4]
 800be16:	2100      	movs	r1, #0
 800be18:	4628      	mov	r0, r5
 800be1a:	f7f4 f9d9 	bl	80001d0 <memchr>
 800be1e:	b108      	cbz	r0, 800be24 <_printf_i+0x1bc>
 800be20:	1b40      	subs	r0, r0, r5
 800be22:	6060      	str	r0, [r4, #4]
 800be24:	6863      	ldr	r3, [r4, #4]
 800be26:	6123      	str	r3, [r4, #16]
 800be28:	2300      	movs	r3, #0
 800be2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be2e:	e7a7      	b.n	800bd80 <_printf_i+0x118>
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	462a      	mov	r2, r5
 800be34:	4639      	mov	r1, r7
 800be36:	4630      	mov	r0, r6
 800be38:	47c0      	blx	r8
 800be3a:	3001      	adds	r0, #1
 800be3c:	d0aa      	beq.n	800bd94 <_printf_i+0x12c>
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	079b      	lsls	r3, r3, #30
 800be42:	d413      	bmi.n	800be6c <_printf_i+0x204>
 800be44:	68e0      	ldr	r0, [r4, #12]
 800be46:	9b03      	ldr	r3, [sp, #12]
 800be48:	4298      	cmp	r0, r3
 800be4a:	bfb8      	it	lt
 800be4c:	4618      	movlt	r0, r3
 800be4e:	e7a3      	b.n	800bd98 <_printf_i+0x130>
 800be50:	2301      	movs	r3, #1
 800be52:	464a      	mov	r2, r9
 800be54:	4639      	mov	r1, r7
 800be56:	4630      	mov	r0, r6
 800be58:	47c0      	blx	r8
 800be5a:	3001      	adds	r0, #1
 800be5c:	d09a      	beq.n	800bd94 <_printf_i+0x12c>
 800be5e:	3501      	adds	r5, #1
 800be60:	68e3      	ldr	r3, [r4, #12]
 800be62:	9a03      	ldr	r2, [sp, #12]
 800be64:	1a9b      	subs	r3, r3, r2
 800be66:	42ab      	cmp	r3, r5
 800be68:	dcf2      	bgt.n	800be50 <_printf_i+0x1e8>
 800be6a:	e7eb      	b.n	800be44 <_printf_i+0x1dc>
 800be6c:	2500      	movs	r5, #0
 800be6e:	f104 0919 	add.w	r9, r4, #25
 800be72:	e7f5      	b.n	800be60 <_printf_i+0x1f8>
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1ac      	bne.n	800bdd2 <_printf_i+0x16a>
 800be78:	7803      	ldrb	r3, [r0, #0]
 800be7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be82:	e76c      	b.n	800bd5e <_printf_i+0xf6>
 800be84:	0800c1ad 	.word	0x0800c1ad
 800be88:	0800c1be 	.word	0x0800c1be

0800be8c <_putc_r>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	460d      	mov	r5, r1
 800be90:	4614      	mov	r4, r2
 800be92:	4606      	mov	r6, r0
 800be94:	b118      	cbz	r0, 800be9e <_putc_r+0x12>
 800be96:	6983      	ldr	r3, [r0, #24]
 800be98:	b90b      	cbnz	r3, 800be9e <_putc_r+0x12>
 800be9a:	f7ff fc3f 	bl	800b71c <__sinit>
 800be9e:	4b13      	ldr	r3, [pc, #76]	; (800beec <_putc_r+0x60>)
 800bea0:	429c      	cmp	r4, r3
 800bea2:	d112      	bne.n	800beca <_putc_r+0x3e>
 800bea4:	6874      	ldr	r4, [r6, #4]
 800bea6:	68a3      	ldr	r3, [r4, #8]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	60a3      	str	r3, [r4, #8]
 800beae:	da16      	bge.n	800bede <_putc_r+0x52>
 800beb0:	69a2      	ldr	r2, [r4, #24]
 800beb2:	4293      	cmp	r3, r2
 800beb4:	db02      	blt.n	800bebc <_putc_r+0x30>
 800beb6:	b2eb      	uxtb	r3, r5
 800beb8:	2b0a      	cmp	r3, #10
 800beba:	d110      	bne.n	800bede <_putc_r+0x52>
 800bebc:	4622      	mov	r2, r4
 800bebe:	4629      	mov	r1, r5
 800bec0:	4630      	mov	r0, r6
 800bec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bec6:	f7ff ba79 	b.w	800b3bc <__swbuf_r>
 800beca:	4b09      	ldr	r3, [pc, #36]	; (800bef0 <_putc_r+0x64>)
 800becc:	429c      	cmp	r4, r3
 800bece:	d101      	bne.n	800bed4 <_putc_r+0x48>
 800bed0:	68b4      	ldr	r4, [r6, #8]
 800bed2:	e7e8      	b.n	800bea6 <_putc_r+0x1a>
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <_putc_r+0x68>)
 800bed6:	429c      	cmp	r4, r3
 800bed8:	bf08      	it	eq
 800beda:	68f4      	ldreq	r4, [r6, #12]
 800bedc:	e7e3      	b.n	800bea6 <_putc_r+0x1a>
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	6022      	str	r2, [r4, #0]
 800bee4:	701d      	strb	r5, [r3, #0]
 800bee6:	b2e8      	uxtb	r0, r5
 800bee8:	bd70      	pop	{r4, r5, r6, pc}
 800beea:	bf00      	nop
 800beec:	0800c15c 	.word	0x0800c15c
 800bef0:	0800c17c 	.word	0x0800c17c
 800bef4:	0800c13c 	.word	0x0800c13c

0800bef8 <__sread>:
 800bef8:	b510      	push	{r4, lr}
 800befa:	460c      	mov	r4, r1
 800befc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf00:	f000 f894 	bl	800c02c <_read_r>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	bfab      	itete	ge
 800bf08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf0a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf0c:	181b      	addge	r3, r3, r0
 800bf0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf12:	bfac      	ite	ge
 800bf14:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf16:	81a3      	strhlt	r3, [r4, #12]
 800bf18:	bd10      	pop	{r4, pc}

0800bf1a <__swrite>:
 800bf1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1e:	461f      	mov	r7, r3
 800bf20:	898b      	ldrh	r3, [r1, #12]
 800bf22:	05db      	lsls	r3, r3, #23
 800bf24:	4605      	mov	r5, r0
 800bf26:	460c      	mov	r4, r1
 800bf28:	4616      	mov	r6, r2
 800bf2a:	d505      	bpl.n	800bf38 <__swrite+0x1e>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf34:	f000 f868 	bl	800c008 <_lseek_r>
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf42:	81a3      	strh	r3, [r4, #12]
 800bf44:	4632      	mov	r2, r6
 800bf46:	463b      	mov	r3, r7
 800bf48:	4628      	mov	r0, r5
 800bf4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4e:	f000 b817 	b.w	800bf80 <_write_r>

0800bf52 <__sseek>:
 800bf52:	b510      	push	{r4, lr}
 800bf54:	460c      	mov	r4, r1
 800bf56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5a:	f000 f855 	bl	800c008 <_lseek_r>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	bf15      	itete	ne
 800bf64:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf6e:	81a3      	strheq	r3, [r4, #12]
 800bf70:	bf18      	it	ne
 800bf72:	81a3      	strhne	r3, [r4, #12]
 800bf74:	bd10      	pop	{r4, pc}

0800bf76 <__sclose>:
 800bf76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf7a:	f000 b813 	b.w	800bfa4 <_close_r>
	...

0800bf80 <_write_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4c07      	ldr	r4, [pc, #28]	; (800bfa0 <_write_r+0x20>)
 800bf84:	4605      	mov	r5, r0
 800bf86:	4608      	mov	r0, r1
 800bf88:	4611      	mov	r1, r2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	6022      	str	r2, [r4, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7f4 fd6e 	bl	8000a70 <_write>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_write_r+0x1e>
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_write_r+0x1e>
 800bf9c:	602b      	str	r3, [r5, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	200008e8 	.word	0x200008e8

0800bfa4 <_close_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4c06      	ldr	r4, [pc, #24]	; (800bfc0 <_close_r+0x1c>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4605      	mov	r5, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	6023      	str	r3, [r4, #0]
 800bfb0:	f7f4 ff9d 	bl	8000eee <_close>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_close_r+0x1a>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_close_r+0x1a>
 800bfbc:	602b      	str	r3, [r5, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	200008e8 	.word	0x200008e8

0800bfc4 <_fstat_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4c07      	ldr	r4, [pc, #28]	; (800bfe4 <_fstat_r+0x20>)
 800bfc8:	2300      	movs	r3, #0
 800bfca:	4605      	mov	r5, r0
 800bfcc:	4608      	mov	r0, r1
 800bfce:	4611      	mov	r1, r2
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	f7f4 ff98 	bl	8000f06 <_fstat>
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	d102      	bne.n	800bfe0 <_fstat_r+0x1c>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	b103      	cbz	r3, 800bfe0 <_fstat_r+0x1c>
 800bfde:	602b      	str	r3, [r5, #0]
 800bfe0:	bd38      	pop	{r3, r4, r5, pc}
 800bfe2:	bf00      	nop
 800bfe4:	200008e8 	.word	0x200008e8

0800bfe8 <_isatty_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4c06      	ldr	r4, [pc, #24]	; (800c004 <_isatty_r+0x1c>)
 800bfec:	2300      	movs	r3, #0
 800bfee:	4605      	mov	r5, r0
 800bff0:	4608      	mov	r0, r1
 800bff2:	6023      	str	r3, [r4, #0]
 800bff4:	f7f4 ff97 	bl	8000f26 <_isatty>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	d102      	bne.n	800c002 <_isatty_r+0x1a>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	b103      	cbz	r3, 800c002 <_isatty_r+0x1a>
 800c000:	602b      	str	r3, [r5, #0]
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	200008e8 	.word	0x200008e8

0800c008 <_lseek_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4c07      	ldr	r4, [pc, #28]	; (800c028 <_lseek_r+0x20>)
 800c00c:	4605      	mov	r5, r0
 800c00e:	4608      	mov	r0, r1
 800c010:	4611      	mov	r1, r2
 800c012:	2200      	movs	r2, #0
 800c014:	6022      	str	r2, [r4, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	f7f4 ff90 	bl	8000f3c <_lseek>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d102      	bne.n	800c026 <_lseek_r+0x1e>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	b103      	cbz	r3, 800c026 <_lseek_r+0x1e>
 800c024:	602b      	str	r3, [r5, #0]
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	200008e8 	.word	0x200008e8

0800c02c <_read_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4c07      	ldr	r4, [pc, #28]	; (800c04c <_read_r+0x20>)
 800c030:	4605      	mov	r5, r0
 800c032:	4608      	mov	r0, r1
 800c034:	4611      	mov	r1, r2
 800c036:	2200      	movs	r2, #0
 800c038:	6022      	str	r2, [r4, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	f7f4 ff3a 	bl	8000eb4 <_read>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_read_r+0x1e>
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	b103      	cbz	r3, 800c04a <_read_r+0x1e>
 800c048:	602b      	str	r3, [r5, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	200008e8 	.word	0x200008e8

0800c050 <_init>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	bf00      	nop
 800c054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c056:	bc08      	pop	{r3}
 800c058:	469e      	mov	lr, r3
 800c05a:	4770      	bx	lr

0800c05c <_fini>:
 800c05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05e:	bf00      	nop
 800c060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c062:	bc08      	pop	{r3}
 800c064:	469e      	mov	lr, r3
 800c066:	4770      	bx	lr
