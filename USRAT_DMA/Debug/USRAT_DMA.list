
USRAT_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034dc  080034dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080034dc  080034dc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034dc  080034dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080034e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000068  0800354c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  0800354c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cadf  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d86  00000000  00000000  0002cb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000580  00000000  00000000  0002e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004a8  00000000  00000000  0002ee78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010f04  00000000  00000000  0002f320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e15  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00061125  00000000  00000000  00049039  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aa15e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c8  00000000  00000000  000aa1dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	080034a0 	.word	0x080034a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	080034a0 	.word	0x080034a0

08000224 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_DMA_Init+0x38>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <MX_DMA_Init+0x38>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_DMA_Init+0x38>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	200e      	movs	r0, #14
 8000248:	f000 fadf 	bl	800080a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800024c:	200e      	movs	r0, #14
 800024e:	f000 faf8 	bl	8000842 <HAL_NVIC_EnableIRQ>

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_GPIO_Init+0x28>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <MX_GPIO_Init+0x28>)
 800026c:	f043 0304 	orr.w	r3, r3, #4
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <MX_GPIO_Init+0x28>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0304 	and.w	r3, r3, #4
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]

}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40021000 	.word	0x40021000

0800028c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000290:	f000 f988 	bl	80005a4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000294:	f000 f816 	bl	80002c4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000298:	f7ff ffe2 	bl	8000260 <MX_GPIO_Init>
  MX_DMA_Init();
 800029c:	f7ff ffc2 	bl	8000224 <MX_DMA_Init>
  SystemClock_Config();
 80002a0:	f000 f810 	bl	80002c4 <SystemClock_Config>
  MX_USART1_UART_Init();
 80002a4:	f000 f8cc 	bl	8000440 <MX_USART1_UART_Init>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)aTxMessage, sizeof(aTxMessage));
 80002a8:	2261      	movs	r2, #97	; 0x61
 80002aa:	4904      	ldr	r1, [pc, #16]	; (80002bc <main+0x30>)
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <main+0x34>)
 80002ae:	f002 fd37 	bl	8002d20 <HAL_UART_Transmit_DMA>
	  HAL_Delay(1000);
 80002b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b6:	f000 f9bf 	bl	8000638 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)aTxMessage, sizeof(aTxMessage));
 80002ba:	e7f5      	b.n	80002a8 <main+0x1c>
 80002bc:	20000000 	.word	0x20000000
 80002c0:	200000c0 	.word	0x200000c0

080002c4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80002d2:	2310      	movs	r3, #16
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fa7a 	bl	80017d8 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 f959 	bl	80025b4 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000302:	f002 fc57 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8000306:	4602      	mov	r2, r0
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <SystemClock_Config+0x6c>)
 800030a:	fba3 2302 	umull	r2, r3, r3, r2
 800030e:	099b      	lsrs	r3, r3, #6
 8000310:	4618      	mov	r0, r3
 8000312:	f000 faa4 	bl	800085e <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000316:	2004      	movs	r0, #4
 8000318:	f000 faae 	bl	8000878 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	f04f 30ff 	mov.w	r0, #4294967295
 8000324:	f000 fa71 	bl	800080a <HAL_NVIC_SetPriority>
}
 8000328:	bf00      	nop
 800032a:	3740      	adds	r7, #64	; 0x40
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	10624dd3 	.word	0x10624dd3

08000334 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <HAL_MspInit+0x68>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a17      	ldr	r2, [pc, #92]	; (800039c <HAL_MspInit+0x68>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <HAL_MspInit+0x68>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000352:	2003      	movs	r0, #3
 8000354:	f000 fa4e 	bl	80007f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	f06f 000b 	mvn.w	r0, #11
 8000360:	f000 fa53 	bl	800080a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2100      	movs	r1, #0
 8000368:	f06f 000a 	mvn.w	r0, #10
 800036c:	f000 fa4d 	bl	800080a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	f06f 0009 	mvn.w	r0, #9
 8000378:	f000 fa47 	bl	800080a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	2100      	movs	r1, #0
 8000380:	f06f 0003 	mvn.w	r0, #3
 8000384:	f000 fa41 	bl	800080a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	f04f 30ff 	mov.w	r0, #4294967295
 8000390:	f000 fa3b 	bl	800080a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000

080003a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a4:	f000 f930 	bl	8000608 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80003a8:	f000 fa82 	bl	80008b0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80003b4:	4802      	ldr	r0, [pc, #8]	; (80003c0 <DMA1_Channel4_IRQHandler+0x10>)
 80003b6:	f000 fb1b 	bl	80009f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000088 	.word	0x20000088

080003c4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003c8:	4802      	ldr	r0, [pc, #8]	; (80003d4 <USART1_IRQHandler+0x10>)
 80003ca:	f002 fd23 	bl	8002e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200000c0 	.word	0x200000c0

080003d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <SystemInit+0x5c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a14      	ldr	r2, [pc, #80]	; (8000434 <SystemInit+0x5c>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <SystemInit+0x5c>)
 80003ea:	685a      	ldr	r2, [r3, #4]
 80003ec:	4911      	ldr	r1, [pc, #68]	; (8000434 <SystemInit+0x5c>)
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <SystemInit+0x60>)
 80003f0:	4013      	ands	r3, r2
 80003f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <SystemInit+0x5c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <SystemInit+0x5c>)
 80003fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000402:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SystemInit+0x5c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <SystemInit+0x5c>)
 800040a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800040e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <SystemInit+0x5c>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	4a07      	ldr	r2, [pc, #28]	; (8000434 <SystemInit+0x5c>)
 8000416:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800041a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <SystemInit+0x5c>)
 800041e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000422:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SystemInit+0x64>)
 8000426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800042a:	609a      	str	r2, [r3, #8]
#endif 
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000
 8000438:	f8ff0000 	.word	0xf8ff0000
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_USART1_UART_Init+0x40>)
 8000446:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <MX_USART1_UART_Init+0x44>)
 8000448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <MX_USART1_UART_Init+0x40>)
 800044c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_USART1_UART_Init+0x40>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_USART1_UART_Init+0x40>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_USART1_UART_Init+0x40>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_USART1_UART_Init+0x40>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_USART1_UART_Init+0x40>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <MX_USART1_UART_Init+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 8000476:	4802      	ldr	r0, [pc, #8]	; (8000480 <MX_USART1_UART_Init+0x40>)
 8000478:	f002 fc08 	bl	8002c8c <HAL_UART_Init>

}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200000c0 	.word	0x200000c0
 8000484:	40013800 	.word	0x40013800

08000488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a2b      	ldr	r2, [pc, #172]	; (8000544 <HAL_UART_MspInit+0xbc>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d14f      	bne.n	800053a <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800049a:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <HAL_UART_MspInit+0xc0>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a2a      	ldr	r2, [pc, #168]	; (8000548 <HAL_UART_MspInit+0xc0>)
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b28      	ldr	r3, [pc, #160]	; (8000548 <HAL_UART_MspInit+0xc0>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	2302      	movs	r3, #2
 80004ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004bc:	2303      	movs	r3, #3
 80004be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4821      	ldr	r0, [pc, #132]	; (800054c <HAL_UART_MspInit+0xc4>)
 80004c8:	f001 f818 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	481a      	ldr	r0, [pc, #104]	; (800054c <HAL_UART_MspInit+0xc4>)
 80004e2:	f001 f80b 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <HAL_UART_MspInit+0xc8>)
 80004e8:	4a1a      	ldr	r2, [pc, #104]	; (8000554 <HAL_UART_MspInit+0xcc>)
 80004ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_UART_MspInit+0xc8>)
 80004ee:	2210      	movs	r2, #16
 80004f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_UART_MspInit+0xc8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_UART_MspInit+0xc8>)
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_UART_MspInit+0xc8>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_UART_MspInit+0xc8>)
 8000506:	2200      	movs	r2, #0
 8000508:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_UART_MspInit+0xc8>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_UART_MspInit+0xc8>)
 8000512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000516:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_usart1_tx);
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <HAL_UART_MspInit+0xc8>)
 800051a:	f000 f9d5 	bl	80008c8 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <HAL_UART_MspInit+0xc8>)
 8000522:	631a      	str	r2, [r3, #48]	; 0x30
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_UART_MspInit+0xc8>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6253      	str	r3, [r2, #36]	; 0x24

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2025      	movs	r0, #37	; 0x25
 8000530:	f000 f96b 	bl	800080a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000534:	2025      	movs	r0, #37	; 0x25
 8000536:	f000 f984 	bl	8000842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3720      	adds	r7, #32
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800
 8000550:	20000088 	.word	0x20000088
 8000554:	40020044 	.word	0x40020044

08000558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000558:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800055a:	e003      	b.n	8000564 <LoopCopyDataInit>

0800055c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800055e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000560:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000562:	3104      	adds	r1, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000568:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800056a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800056c:	d3f6      	bcc.n	800055c <CopyDataInit>
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000570:	e002      	b.n	8000578 <LoopFillZerobss>

08000572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000574:	f842 3b04 	str.w	r3, [r2], #4

08000578 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800057a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800057c:	d3f9      	bcc.n	8000572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057e:	f7ff ff2b 	bl	80003d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000582:	f002 ff69 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fe81 	bl	800028c <main>
  bx lr
 800058a:	4770      	bx	lr
  ldr r3, =_sidata
 800058c:	080034e4 	.word	0x080034e4
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000594:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000598:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 800059c:	20000100 	.word	0x20000100

080005a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_2_IRQHandler>
	...

080005a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_Init+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_Init+0x28>)
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f91d 	bl	80007f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f808 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f7ff feb8 	bl	8000334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40022000 	.word	0x40022000

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005d8:	f002 faec 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_InitTick+0x34>)
 80005e0:	fba3 2302 	umull	r2, r3, r3, r2
 80005e4:	099b      	lsrs	r3, r3, #6
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f939 	bl	800085e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295
 80005f4:	f000 f909 	bl	800080a <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	10624dd3 	.word	0x10624dd3

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick++;
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x18>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a03      	ldr	r2, [pc, #12]	; (8000620 <HAL_IncTick+0x18>)
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000084 	.word	0x20000084

08000624 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_GetTick+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	20000084 	.word	0x20000084

08000638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000644:	f7ff ffee 	bl	8000624 <HAL_GetTick>
 8000648:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800064a:	bf00      	nop
 800064c:	f7ff ffea 	bl	8000624 <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1ad2      	subs	r2, r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f7      	bcc.n	800064c <HAL_Delay+0x14>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 021f 	and.w	r2, r3, #31
 80006d8:	4906      	ldr	r1, [pc, #24]	; (80006f4 <NVIC_EnableIRQ+0x2c>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	095b      	lsrs	r3, r3, #5
 80006e0:	2001      	movs	r0, #1
 80006e2:	fa00 f202 	lsl.w	r2, r0, r2
 80006e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	da0b      	bge.n	8000724 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <NVIC_SetPriority+0x4c>)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	3b04      	subs	r3, #4
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000722:	e009      	b.n	8000738 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <NVIC_SetPriority+0x50>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	e000e100 	.word	0xe000e100

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c0:	d301      	bcc.n	80007c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00f      	b.n	80007e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <SysTick_Config+0x40>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ce:	210f      	movs	r1, #15
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f7ff ff90 	bl	80006f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <SysTick_Config+0x40>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007de:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <SysTick_Config+0x40>)
 80007e0:	2207      	movs	r2, #7
 80007e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000e010 	.word	0xe000e010

080007f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff31 	bl	8000664 <NVIC_SetPriorityGrouping>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800081c:	f7ff ff46 	bl	80006ac <NVIC_GetPriorityGrouping>
 8000820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	6978      	ldr	r0, [r7, #20]
 8000828:	f7ff ff90 	bl	800074c <NVIC_EncodePriority>
 800082c:	4602      	mov	r2, r0
 800082e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff5f 	bl	80006f8 <NVIC_SetPriority>
}
 800083a:	bf00      	nop
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff39 	bl	80006c8 <NVIC_EnableIRQ>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ffa2 	bl	80007b0 <SysTick_Config>
 800086c:	4603      	mov	r3, r0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d106      	bne.n	8000894 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000892:	e005      	b.n	80008a0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800089a:	f023 0304 	bic.w	r3, r3, #4
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008b4:	f000 f802 	bl	80008bc <HAL_SYSTICK_Callback>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e039      	b.n	8000952 <HAL_DMA_Init+0x8a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d103      	bne.n	80008f0 <HAL_DMA_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2202      	movs	r2, #2
 80008f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000906:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800090a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800092c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	4313      	orrs	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2201      	movs	r2, #1
 800094c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <HAL_DMA_Start_IT+0x1c>
 8000974:	2302      	movs	r3, #2
 8000976:	e036      	b.n	80009e6 <HAL_DMA_Start_IT+0x8a>
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2201      	movs	r2, #1
 800097c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2202      	movs	r2, #2
 8000984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 0201 	bic.w	r2, r2, #1
 8000996:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f000 fd86 	bl	80014b0 <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f042 0202 	orr.w	r2, r2, #2
 80009b2:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0204 	orr.w	r2, r2, #4
 80009c2:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0208 	orr.w	r2, r2, #8
 80009d2:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
} 
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b99      	ldr	r3, [pc, #612]	; (8000c64 <HAL_DMA_IRQHandler+0x274>)
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d95e      	bls.n	8000ac2 <HAL_DMA_IRQHandler+0xd2>
 8000a04:	4b98      	ldr	r3, [pc, #608]	; (8000c68 <HAL_DMA_IRQHandler+0x278>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4997      	ldr	r1, [pc, #604]	; (8000c6c <HAL_DMA_IRQHandler+0x27c>)
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d04f      	beq.n	8000ab2 <HAL_DMA_IRQHandler+0xc2>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4996      	ldr	r1, [pc, #600]	; (8000c70 <HAL_DMA_IRQHandler+0x280>)
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d048      	beq.n	8000aae <HAL_DMA_IRQHandler+0xbe>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4994      	ldr	r1, [pc, #592]	; (8000c74 <HAL_DMA_IRQHandler+0x284>)
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d040      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0xb8>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4993      	ldr	r1, [pc, #588]	; (8000c78 <HAL_DMA_IRQHandler+0x288>)
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d038      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0xb2>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4991      	ldr	r1, [pc, #580]	; (8000c7c <HAL_DMA_IRQHandler+0x28c>)
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d030      	beq.n	8000a9c <HAL_DMA_IRQHandler+0xac>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4990      	ldr	r1, [pc, #576]	; (8000c80 <HAL_DMA_IRQHandler+0x290>)
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d028      	beq.n	8000a96 <HAL_DMA_IRQHandler+0xa6>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4986      	ldr	r1, [pc, #536]	; (8000c64 <HAL_DMA_IRQHandler+0x274>)
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d020      	beq.n	8000a90 <HAL_DMA_IRQHandler+0xa0>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	498c      	ldr	r1, [pc, #560]	; (8000c84 <HAL_DMA_IRQHandler+0x294>)
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d019      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x9c>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	498a      	ldr	r1, [pc, #552]	; (8000c88 <HAL_DMA_IRQHandler+0x298>)
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d012      	beq.n	8000a88 <HAL_DMA_IRQHandler+0x98>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4989      	ldr	r1, [pc, #548]	; (8000c8c <HAL_DMA_IRQHandler+0x29c>)
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d00a      	beq.n	8000a82 <HAL_DMA_IRQHandler+0x92>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4987      	ldr	r1, [pc, #540]	; (8000c90 <HAL_DMA_IRQHandler+0x2a0>)
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d102      	bne.n	8000a7c <HAL_DMA_IRQHandler+0x8c>
 8000a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a7a:	e01b      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000a7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a80:	e018      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a86:	e015      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	e013      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	e011      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a94:	e00e      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000a96:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000a9a:	e00b      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000a9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000aa0:	e008      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa6:	e005      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aac:	e002      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	e000      	b.n	8000ab4 <HAL_DMA_IRQHandler+0xc4>
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf14      	ite	ne
 8000aba:	2301      	movne	r3, #1
 8000abc:	2300      	moveq	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	e05d      	b.n	8000b7e <HAL_DMA_IRQHandler+0x18e>
 8000ac2:	4b74      	ldr	r3, [pc, #464]	; (8000c94 <HAL_DMA_IRQHandler+0x2a4>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4968      	ldr	r1, [pc, #416]	; (8000c6c <HAL_DMA_IRQHandler+0x27c>)
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d04f      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x180>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4966      	ldr	r1, [pc, #408]	; (8000c70 <HAL_DMA_IRQHandler+0x280>)
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d048      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x17c>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4965      	ldr	r1, [pc, #404]	; (8000c74 <HAL_DMA_IRQHandler+0x284>)
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d040      	beq.n	8000b66 <HAL_DMA_IRQHandler+0x176>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4963      	ldr	r1, [pc, #396]	; (8000c78 <HAL_DMA_IRQHandler+0x288>)
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d038      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x170>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4962      	ldr	r1, [pc, #392]	; (8000c7c <HAL_DMA_IRQHandler+0x28c>)
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d030      	beq.n	8000b5a <HAL_DMA_IRQHandler+0x16a>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4960      	ldr	r1, [pc, #384]	; (8000c80 <HAL_DMA_IRQHandler+0x290>)
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d028      	beq.n	8000b54 <HAL_DMA_IRQHandler+0x164>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4957      	ldr	r1, [pc, #348]	; (8000c64 <HAL_DMA_IRQHandler+0x274>)
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d020      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x15e>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	495c      	ldr	r1, [pc, #368]	; (8000c84 <HAL_DMA_IRQHandler+0x294>)
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d019      	beq.n	8000b4a <HAL_DMA_IRQHandler+0x15a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	495b      	ldr	r1, [pc, #364]	; (8000c88 <HAL_DMA_IRQHandler+0x298>)
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d012      	beq.n	8000b46 <HAL_DMA_IRQHandler+0x156>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4959      	ldr	r1, [pc, #356]	; (8000c8c <HAL_DMA_IRQHandler+0x29c>)
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d00a      	beq.n	8000b40 <HAL_DMA_IRQHandler+0x150>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4958      	ldr	r1, [pc, #352]	; (8000c90 <HAL_DMA_IRQHandler+0x2a0>)
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d102      	bne.n	8000b3a <HAL_DMA_IRQHandler+0x14a>
 8000b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b38:	e01b      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b3e:	e018      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b44:	e015      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	e013      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	e011      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b52:	e00e      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000b58:	e00b      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b5e:	e008      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b64:	e005      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6a:	e002      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	e000      	b.n	8000b72 <HAL_DMA_IRQHandler+0x182>
 8000b70:	2308      	movs	r3, #8
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 80f8 	beq.w	8000d74 <HAL_DMA_IRQHandler+0x384>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	2b08      	cmp	r3, #8
 8000b90:	f040 80f0 	bne.w	8000d74 <HAL_DMA_IRQHandler+0x384>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0208 	bic.w	r2, r2, #8
 8000ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <HAL_DMA_IRQHandler+0x274>)
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d973      	bls.n	8000c98 <HAL_DMA_IRQHandler+0x2a8>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <HAL_DMA_IRQHandler+0x27c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d04f      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x26a>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <HAL_DMA_IRQHandler+0x280>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d048      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x266>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_DMA_IRQHandler+0x284>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d040      	beq.n	8000c50 <HAL_DMA_IRQHandler+0x260>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <HAL_DMA_IRQHandler+0x288>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d038      	beq.n	8000c4a <HAL_DMA_IRQHandler+0x25a>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a27      	ldr	r2, [pc, #156]	; (8000c7c <HAL_DMA_IRQHandler+0x28c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d030      	beq.n	8000c44 <HAL_DMA_IRQHandler+0x254>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a26      	ldr	r2, [pc, #152]	; (8000c80 <HAL_DMA_IRQHandler+0x290>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d028      	beq.n	8000c3e <HAL_DMA_IRQHandler+0x24e>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <HAL_DMA_IRQHandler+0x274>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d020      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x248>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <HAL_DMA_IRQHandler+0x294>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d019      	beq.n	8000c34 <HAL_DMA_IRQHandler+0x244>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <HAL_DMA_IRQHandler+0x298>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d012      	beq.n	8000c30 <HAL_DMA_IRQHandler+0x240>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_DMA_IRQHandler+0x29c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d00a      	beq.n	8000c2a <HAL_DMA_IRQHandler+0x23a>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_DMA_IRQHandler+0x2a0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d102      	bne.n	8000c24 <HAL_DMA_IRQHandler+0x234>
 8000c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c22:	e01b      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c28:	e018      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c2e:	e015      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	e013      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c34:	2308      	movs	r3, #8
 8000c36:	e011      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c3c:	e00e      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c3e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000c42:	e00b      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c48:	e008      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c4e:	e005      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c54:	e002      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	e000      	b.n	8000c5c <HAL_DMA_IRQHandler+0x26c>
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	4a02      	ldr	r2, [pc, #8]	; (8000c68 <HAL_DMA_IRQHandler+0x278>)
 8000c5e:	6053      	str	r3, [r2, #4]
 8000c60:	e072      	b.n	8000d48 <HAL_DMA_IRQHandler+0x358>
 8000c62:	bf00      	nop
 8000c64:	40020080 	.word	0x40020080
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020008 	.word	0x40020008
 8000c70:	4002001c 	.word	0x4002001c
 8000c74:	40020030 	.word	0x40020030
 8000c78:	40020044 	.word	0x40020044
 8000c7c:	40020058 	.word	0x40020058
 8000c80:	4002006c 	.word	0x4002006c
 8000c84:	40020408 	.word	0x40020408
 8000c88:	4002041c 	.word	0x4002041c
 8000c8c:	40020430 	.word	0x40020430
 8000c90:	40020444 	.word	0x40020444
 8000c94:	40020000 	.word	0x40020000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a93      	ldr	r2, [pc, #588]	; (8000eec <HAL_DMA_IRQHandler+0x4fc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d04f      	beq.n	8000d42 <HAL_DMA_IRQHandler+0x352>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a92      	ldr	r2, [pc, #584]	; (8000ef0 <HAL_DMA_IRQHandler+0x500>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d048      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x34e>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a90      	ldr	r2, [pc, #576]	; (8000ef4 <HAL_DMA_IRQHandler+0x504>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d040      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x348>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a8f      	ldr	r2, [pc, #572]	; (8000ef8 <HAL_DMA_IRQHandler+0x508>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d038      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x342>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a8d      	ldr	r2, [pc, #564]	; (8000efc <HAL_DMA_IRQHandler+0x50c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d030      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x33c>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a8c      	ldr	r2, [pc, #560]	; (8000f00 <HAL_DMA_IRQHandler+0x510>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d028      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x336>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a8a      	ldr	r2, [pc, #552]	; (8000f04 <HAL_DMA_IRQHandler+0x514>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d020      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x330>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a89      	ldr	r2, [pc, #548]	; (8000f08 <HAL_DMA_IRQHandler+0x518>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d019      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x32c>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a87      	ldr	r2, [pc, #540]	; (8000f0c <HAL_DMA_IRQHandler+0x51c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d012      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x328>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a86      	ldr	r2, [pc, #536]	; (8000f10 <HAL_DMA_IRQHandler+0x520>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d00a      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x322>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a84      	ldr	r2, [pc, #528]	; (8000f14 <HAL_DMA_IRQHandler+0x524>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d102      	bne.n	8000d0c <HAL_DMA_IRQHandler+0x31c>
 8000d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0a:	e01b      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d10:	e018      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d16:	e015      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	e013      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	e011      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	e00e      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d2a:	e00b      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d30:	e008      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d36:	e005      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d3c:	e002      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	e000      	b.n	8000d44 <HAL_DMA_IRQHandler+0x354>
 8000d42:	2308      	movs	r3, #8
 8000d44:	4a74      	ldr	r2, [pc, #464]	; (8000f18 <HAL_DMA_IRQHandler+0x528>)
 8000d46:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4c:	f043 0201 	orr.w	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2204      	movs	r2, #4
 8000d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]
      
      if (hdma->XferErrorCallback != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_DMA_IRQHandler+0x384>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b62      	ldr	r3, [pc, #392]	; (8000f04 <HAL_DMA_IRQHandler+0x514>)
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d95e      	bls.n	8000e3e <HAL_DMA_IRQHandler+0x44e>
 8000d80:	4b66      	ldr	r3, [pc, #408]	; (8000f1c <HAL_DMA_IRQHandler+0x52c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4958      	ldr	r1, [pc, #352]	; (8000eec <HAL_DMA_IRQHandler+0x4fc>)
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d04f      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x43e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4957      	ldr	r1, [pc, #348]	; (8000ef0 <HAL_DMA_IRQHandler+0x500>)
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d048      	beq.n	8000e2a <HAL_DMA_IRQHandler+0x43a>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4955      	ldr	r1, [pc, #340]	; (8000ef4 <HAL_DMA_IRQHandler+0x504>)
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d040      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x434>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4954      	ldr	r1, [pc, #336]	; (8000ef8 <HAL_DMA_IRQHandler+0x508>)
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d038      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x42e>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4952      	ldr	r1, [pc, #328]	; (8000efc <HAL_DMA_IRQHandler+0x50c>)
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d030      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x428>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4951      	ldr	r1, [pc, #324]	; (8000f00 <HAL_DMA_IRQHandler+0x510>)
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d028      	beq.n	8000e12 <HAL_DMA_IRQHandler+0x422>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	494f      	ldr	r1, [pc, #316]	; (8000f04 <HAL_DMA_IRQHandler+0x514>)
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d020      	beq.n	8000e0c <HAL_DMA_IRQHandler+0x41c>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	494e      	ldr	r1, [pc, #312]	; (8000f08 <HAL_DMA_IRQHandler+0x518>)
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d019      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x418>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	494c      	ldr	r1, [pc, #304]	; (8000f0c <HAL_DMA_IRQHandler+0x51c>)
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d012      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x414>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	494b      	ldr	r1, [pc, #300]	; (8000f10 <HAL_DMA_IRQHandler+0x520>)
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d00a      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x40e>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4949      	ldr	r1, [pc, #292]	; (8000f14 <HAL_DMA_IRQHandler+0x524>)
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d102      	bne.n	8000df8 <HAL_DMA_IRQHandler+0x408>
 8000df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000df6:	e01b      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000df8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dfc:	e018      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e02:	e015      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e04:	2340      	movs	r3, #64	; 0x40
 8000e06:	e013      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e011      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e10:	e00e      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e16:	e00b      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e1c:	e008      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e22:	e005      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	e002      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	e000      	b.n	8000e30 <HAL_DMA_IRQHandler+0x440>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf14      	ite	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	2300      	moveq	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	e077      	b.n	8000f2e <HAL_DMA_IRQHandler+0x53e>
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <HAL_DMA_IRQHandler+0x528>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4929      	ldr	r1, [pc, #164]	; (8000eec <HAL_DMA_IRQHandler+0x4fc>)
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d069      	beq.n	8000f20 <HAL_DMA_IRQHandler+0x530>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4927      	ldr	r1, [pc, #156]	; (8000ef0 <HAL_DMA_IRQHandler+0x500>)
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d048      	beq.n	8000ee8 <HAL_DMA_IRQHandler+0x4f8>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4926      	ldr	r1, [pc, #152]	; (8000ef4 <HAL_DMA_IRQHandler+0x504>)
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d040      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x4f2>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4924      	ldr	r1, [pc, #144]	; (8000ef8 <HAL_DMA_IRQHandler+0x508>)
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d038      	beq.n	8000edc <HAL_DMA_IRQHandler+0x4ec>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4923      	ldr	r1, [pc, #140]	; (8000efc <HAL_DMA_IRQHandler+0x50c>)
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d030      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x4e6>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4921      	ldr	r1, [pc, #132]	; (8000f00 <HAL_DMA_IRQHandler+0x510>)
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d028      	beq.n	8000ed0 <HAL_DMA_IRQHandler+0x4e0>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4920      	ldr	r1, [pc, #128]	; (8000f04 <HAL_DMA_IRQHandler+0x514>)
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d020      	beq.n	8000eca <HAL_DMA_IRQHandler+0x4da>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	491e      	ldr	r1, [pc, #120]	; (8000f08 <HAL_DMA_IRQHandler+0x518>)
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d019      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x4d6>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	491d      	ldr	r1, [pc, #116]	; (8000f0c <HAL_DMA_IRQHandler+0x51c>)
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d012      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x4d2>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	491b      	ldr	r1, [pc, #108]	; (8000f10 <HAL_DMA_IRQHandler+0x520>)
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d00a      	beq.n	8000ebc <HAL_DMA_IRQHandler+0x4cc>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	491a      	ldr	r1, [pc, #104]	; (8000f14 <HAL_DMA_IRQHandler+0x524>)
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d102      	bne.n	8000eb6 <HAL_DMA_IRQHandler+0x4c6>
 8000eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb4:	e035      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000eb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000eba:	e032      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	e02f      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	e02d      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e02b      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000eca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ece:	e028      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000ed0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed4:	e025      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000ed6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000eda:	e022      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000edc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee0:	e01f      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee6:	e01c      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000ee8:	2340      	movs	r3, #64	; 0x40
 8000eea:	e01a      	b.n	8000f22 <HAL_DMA_IRQHandler+0x532>
 8000eec:	40020008 	.word	0x40020008
 8000ef0:	4002001c 	.word	0x4002001c
 8000ef4:	40020030 	.word	0x40020030
 8000ef8:	40020044 	.word	0x40020044
 8000efc:	40020058 	.word	0x40020058
 8000f00:	4002006c 	.word	0x4002006c
 8000f04:	40020080 	.word	0x40020080
 8000f08:	40020408 	.word	0x40020408
 8000f0c:	4002041c 	.word	0x4002041c
 8000f10:	40020430 	.word	0x40020430
 8000f14:	40020444 	.word	0x40020444
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	2304      	movs	r3, #4
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf14      	ite	ne
 8000f28:	2301      	movne	r3, #1
 8000f2a:	2300      	moveq	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 80da 	beq.w	80010e8 <HAL_DMA_IRQHandler+0x6f8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	f040 80d2 	bne.w	80010e8 <HAL_DMA_IRQHandler+0x6f8>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d107      	bne.n	8000f62 <HAL_DMA_IRQHandler+0x572>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0204 	bic.w	r2, r2, #4
 8000f60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b92      	ldr	r3, [pc, #584]	; (80011b4 <HAL_DMA_IRQHandler+0x7c4>)
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d958      	bls.n	8001020 <HAL_DMA_IRQHandler+0x630>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a91      	ldr	r2, [pc, #580]	; (80011b8 <HAL_DMA_IRQHandler+0x7c8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d04f      	beq.n	8001018 <HAL_DMA_IRQHandler+0x628>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a8f      	ldr	r2, [pc, #572]	; (80011bc <HAL_DMA_IRQHandler+0x7cc>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d048      	beq.n	8001014 <HAL_DMA_IRQHandler+0x624>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a8e      	ldr	r2, [pc, #568]	; (80011c0 <HAL_DMA_IRQHandler+0x7d0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d040      	beq.n	800100e <HAL_DMA_IRQHandler+0x61e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a8c      	ldr	r2, [pc, #560]	; (80011c4 <HAL_DMA_IRQHandler+0x7d4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d038      	beq.n	8001008 <HAL_DMA_IRQHandler+0x618>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a8b      	ldr	r2, [pc, #556]	; (80011c8 <HAL_DMA_IRQHandler+0x7d8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d030      	beq.n	8001002 <HAL_DMA_IRQHandler+0x612>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a89      	ldr	r2, [pc, #548]	; (80011cc <HAL_DMA_IRQHandler+0x7dc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d028      	beq.n	8000ffc <HAL_DMA_IRQHandler+0x60c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a81      	ldr	r2, [pc, #516]	; (80011b4 <HAL_DMA_IRQHandler+0x7c4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d020      	beq.n	8000ff6 <HAL_DMA_IRQHandler+0x606>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a85      	ldr	r2, [pc, #532]	; (80011d0 <HAL_DMA_IRQHandler+0x7e0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d019      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x602>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a84      	ldr	r2, [pc, #528]	; (80011d4 <HAL_DMA_IRQHandler+0x7e4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d012      	beq.n	8000fee <HAL_DMA_IRQHandler+0x5fe>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a82      	ldr	r2, [pc, #520]	; (80011d8 <HAL_DMA_IRQHandler+0x7e8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00a      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x5f8>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a81      	ldr	r2, [pc, #516]	; (80011dc <HAL_DMA_IRQHandler+0x7ec>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d102      	bne.n	8000fe2 <HAL_DMA_IRQHandler+0x5f2>
 8000fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe0:	e01b      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8000fe2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fe6:	e018      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	e015      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8000fee:	2340      	movs	r3, #64	; 0x40
 8000ff0:	e013      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e011      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8000ff6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ffa:	e00e      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8000ffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001000:	e00b      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8001002:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001006:	e008      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8001008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800100c:	e005      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 800100e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001012:	e002      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8001014:	2340      	movs	r3, #64	; 0x40
 8001016:	e000      	b.n	800101a <HAL_DMA_IRQHandler+0x62a>
 8001018:	2304      	movs	r3, #4
 800101a:	4a71      	ldr	r2, [pc, #452]	; (80011e0 <HAL_DMA_IRQHandler+0x7f0>)
 800101c:	6053      	str	r3, [r2, #4]
 800101e:	e057      	b.n	80010d0 <HAL_DMA_IRQHandler+0x6e0>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <HAL_DMA_IRQHandler+0x7c8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d04f      	beq.n	80010ca <HAL_DMA_IRQHandler+0x6da>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a63      	ldr	r2, [pc, #396]	; (80011bc <HAL_DMA_IRQHandler+0x7cc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d048      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x6d6>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a61      	ldr	r2, [pc, #388]	; (80011c0 <HAL_DMA_IRQHandler+0x7d0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d040      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x6d0>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a60      	ldr	r2, [pc, #384]	; (80011c4 <HAL_DMA_IRQHandler+0x7d4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d038      	beq.n	80010ba <HAL_DMA_IRQHandler+0x6ca>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a5e      	ldr	r2, [pc, #376]	; (80011c8 <HAL_DMA_IRQHandler+0x7d8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d030      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x6c4>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a5d      	ldr	r2, [pc, #372]	; (80011cc <HAL_DMA_IRQHandler+0x7dc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d028      	beq.n	80010ae <HAL_DMA_IRQHandler+0x6be>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a54      	ldr	r2, [pc, #336]	; (80011b4 <HAL_DMA_IRQHandler+0x7c4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d020      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x6b8>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a59      	ldr	r2, [pc, #356]	; (80011d0 <HAL_DMA_IRQHandler+0x7e0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d019      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x6b4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <HAL_DMA_IRQHandler+0x7e4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d012      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x6b0>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a56      	ldr	r2, [pc, #344]	; (80011d8 <HAL_DMA_IRQHandler+0x7e8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d00a      	beq.n	800109a <HAL_DMA_IRQHandler+0x6aa>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a54      	ldr	r2, [pc, #336]	; (80011dc <HAL_DMA_IRQHandler+0x7ec>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d102      	bne.n	8001094 <HAL_DMA_IRQHandler+0x6a4>
 800108e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001092:	e01b      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 8001094:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001098:	e018      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	e015      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	e013      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010a4:	2304      	movs	r3, #4
 80010a6:	e011      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010ac:	e00e      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b2:	e00b      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010b8:	e008      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010be:	e005      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	e002      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010c6:	2340      	movs	r3, #64	; 0x40
 80010c8:	e000      	b.n	80010cc <HAL_DMA_IRQHandler+0x6dc>
 80010ca:	2304      	movs	r3, #4
 80010cc:	4a45      	ldr	r2, [pc, #276]	; (80011e4 <HAL_DMA_IRQHandler+0x7f4>)
 80010ce:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2211      	movs	r2, #17
 80010d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x6f8>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <HAL_DMA_IRQHandler+0x7c4>)
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d979      	bls.n	80011e8 <HAL_DMA_IRQHandler+0x7f8>
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_DMA_IRQHandler+0x7f0>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	492e      	ldr	r1, [pc, #184]	; (80011b8 <HAL_DMA_IRQHandler+0x7c8>)
 80010fe:	428b      	cmp	r3, r1
 8001100:	d04f      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x7b2>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	492d      	ldr	r1, [pc, #180]	; (80011bc <HAL_DMA_IRQHandler+0x7cc>)
 8001108:	428b      	cmp	r3, r1
 800110a:	d048      	beq.n	800119e <HAL_DMA_IRQHandler+0x7ae>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	492b      	ldr	r1, [pc, #172]	; (80011c0 <HAL_DMA_IRQHandler+0x7d0>)
 8001112:	428b      	cmp	r3, r1
 8001114:	d040      	beq.n	8001198 <HAL_DMA_IRQHandler+0x7a8>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	492a      	ldr	r1, [pc, #168]	; (80011c4 <HAL_DMA_IRQHandler+0x7d4>)
 800111c:	428b      	cmp	r3, r1
 800111e:	d038      	beq.n	8001192 <HAL_DMA_IRQHandler+0x7a2>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4928      	ldr	r1, [pc, #160]	; (80011c8 <HAL_DMA_IRQHandler+0x7d8>)
 8001126:	428b      	cmp	r3, r1
 8001128:	d030      	beq.n	800118c <HAL_DMA_IRQHandler+0x79c>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <HAL_DMA_IRQHandler+0x7dc>)
 8001130:	428b      	cmp	r3, r1
 8001132:	d028      	beq.n	8001186 <HAL_DMA_IRQHandler+0x796>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	491e      	ldr	r1, [pc, #120]	; (80011b4 <HAL_DMA_IRQHandler+0x7c4>)
 800113a:	428b      	cmp	r3, r1
 800113c:	d020      	beq.n	8001180 <HAL_DMA_IRQHandler+0x790>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4923      	ldr	r1, [pc, #140]	; (80011d0 <HAL_DMA_IRQHandler+0x7e0>)
 8001144:	428b      	cmp	r3, r1
 8001146:	d019      	beq.n	800117c <HAL_DMA_IRQHandler+0x78c>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4921      	ldr	r1, [pc, #132]	; (80011d4 <HAL_DMA_IRQHandler+0x7e4>)
 800114e:	428b      	cmp	r3, r1
 8001150:	d012      	beq.n	8001178 <HAL_DMA_IRQHandler+0x788>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4920      	ldr	r1, [pc, #128]	; (80011d8 <HAL_DMA_IRQHandler+0x7e8>)
 8001158:	428b      	cmp	r3, r1
 800115a:	d00a      	beq.n	8001172 <HAL_DMA_IRQHandler+0x782>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	491e      	ldr	r1, [pc, #120]	; (80011dc <HAL_DMA_IRQHandler+0x7ec>)
 8001162:	428b      	cmp	r3, r1
 8001164:	d102      	bne.n	800116c <HAL_DMA_IRQHandler+0x77c>
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	e01b      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 800116c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001170:	e018      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 8001172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001176:	e015      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 8001178:	2320      	movs	r3, #32
 800117a:	e013      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 800117c:	2302      	movs	r3, #2
 800117e:	e011      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 8001180:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001184:	e00e      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 8001186:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800118a:	e00b      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 800118c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001190:	e008      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	e005      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	e002      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 800119e:	2320      	movs	r3, #32
 80011a0:	e000      	b.n	80011a4 <HAL_DMA_IRQHandler+0x7b4>
 80011a2:	2302      	movs	r3, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	2300      	moveq	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	e078      	b.n	80012a4 <HAL_DMA_IRQHandler+0x8b4>
 80011b2:	bf00      	nop
 80011b4:	40020080 	.word	0x40020080
 80011b8:	40020008 	.word	0x40020008
 80011bc:	4002001c 	.word	0x4002001c
 80011c0:	40020030 	.word	0x40020030
 80011c4:	40020044 	.word	0x40020044
 80011c8:	40020058 	.word	0x40020058
 80011cc:	4002006c 	.word	0x4002006c
 80011d0:	40020408 	.word	0x40020408
 80011d4:	4002041c 	.word	0x4002041c
 80011d8:	40020430 	.word	0x40020430
 80011dc:	40020444 	.word	0x40020444
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020000 	.word	0x40020000
 80011e8:	4b95      	ldr	r3, [pc, #596]	; (8001440 <HAL_DMA_IRQHandler+0xa50>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4994      	ldr	r1, [pc, #592]	; (8001444 <HAL_DMA_IRQHandler+0xa54>)
 80011f2:	428b      	cmp	r3, r1
 80011f4:	d04f      	beq.n	8001296 <HAL_DMA_IRQHandler+0x8a6>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4993      	ldr	r1, [pc, #588]	; (8001448 <HAL_DMA_IRQHandler+0xa58>)
 80011fc:	428b      	cmp	r3, r1
 80011fe:	d048      	beq.n	8001292 <HAL_DMA_IRQHandler+0x8a2>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4991      	ldr	r1, [pc, #580]	; (800144c <HAL_DMA_IRQHandler+0xa5c>)
 8001206:	428b      	cmp	r3, r1
 8001208:	d040      	beq.n	800128c <HAL_DMA_IRQHandler+0x89c>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4990      	ldr	r1, [pc, #576]	; (8001450 <HAL_DMA_IRQHandler+0xa60>)
 8001210:	428b      	cmp	r3, r1
 8001212:	d038      	beq.n	8001286 <HAL_DMA_IRQHandler+0x896>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	498e      	ldr	r1, [pc, #568]	; (8001454 <HAL_DMA_IRQHandler+0xa64>)
 800121a:	428b      	cmp	r3, r1
 800121c:	d030      	beq.n	8001280 <HAL_DMA_IRQHandler+0x890>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	498d      	ldr	r1, [pc, #564]	; (8001458 <HAL_DMA_IRQHandler+0xa68>)
 8001224:	428b      	cmp	r3, r1
 8001226:	d028      	beq.n	800127a <HAL_DMA_IRQHandler+0x88a>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	498b      	ldr	r1, [pc, #556]	; (800145c <HAL_DMA_IRQHandler+0xa6c>)
 800122e:	428b      	cmp	r3, r1
 8001230:	d020      	beq.n	8001274 <HAL_DMA_IRQHandler+0x884>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	498a      	ldr	r1, [pc, #552]	; (8001460 <HAL_DMA_IRQHandler+0xa70>)
 8001238:	428b      	cmp	r3, r1
 800123a:	d019      	beq.n	8001270 <HAL_DMA_IRQHandler+0x880>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4988      	ldr	r1, [pc, #544]	; (8001464 <HAL_DMA_IRQHandler+0xa74>)
 8001242:	428b      	cmp	r3, r1
 8001244:	d012      	beq.n	800126c <HAL_DMA_IRQHandler+0x87c>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4987      	ldr	r1, [pc, #540]	; (8001468 <HAL_DMA_IRQHandler+0xa78>)
 800124c:	428b      	cmp	r3, r1
 800124e:	d00a      	beq.n	8001266 <HAL_DMA_IRQHandler+0x876>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4985      	ldr	r1, [pc, #532]	; (800146c <HAL_DMA_IRQHandler+0xa7c>)
 8001256:	428b      	cmp	r3, r1
 8001258:	d102      	bne.n	8001260 <HAL_DMA_IRQHandler+0x870>
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	e01b      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001264:	e018      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	e015      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 800126c:	2320      	movs	r3, #32
 800126e:	e013      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001270:	2302      	movs	r3, #2
 8001272:	e011      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001278:	e00e      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 800127a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800127e:	e00b      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001284:	e008      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128a:	e005      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 800128c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001290:	e002      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001292:	2320      	movs	r3, #32
 8001294:	e000      	b.n	8001298 <HAL_DMA_IRQHandler+0x8a8>
 8001296:	2302      	movs	r3, #2
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80fc 	beq.w	80014a2 <HAL_DMA_IRQHandler+0xab2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	f040 80f4 	bne.w	80014a2 <HAL_DMA_IRQHandler+0xab2>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0320 	and.w	r3, r3, #32
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <HAL_DMA_IRQHandler+0x8e8>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0202 	bic.w	r2, r2, #2
 80012d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_DMA_IRQHandler+0xa6c>)
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d958      	bls.n	8001396 <HAL_DMA_IRQHandler+0x9a6>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_DMA_IRQHandler+0xa54>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d04f      	beq.n	800138e <HAL_DMA_IRQHandler+0x99e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a55      	ldr	r2, [pc, #340]	; (8001448 <HAL_DMA_IRQHandler+0xa58>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d048      	beq.n	800138a <HAL_DMA_IRQHandler+0x99a>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_DMA_IRQHandler+0xa5c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d040      	beq.n	8001384 <HAL_DMA_IRQHandler+0x994>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_DMA_IRQHandler+0xa60>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d038      	beq.n	800137e <HAL_DMA_IRQHandler+0x98e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_DMA_IRQHandler+0xa64>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d030      	beq.n	8001378 <HAL_DMA_IRQHandler+0x988>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_DMA_IRQHandler+0xa68>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d028      	beq.n	8001372 <HAL_DMA_IRQHandler+0x982>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a4d      	ldr	r2, [pc, #308]	; (800145c <HAL_DMA_IRQHandler+0xa6c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d020      	beq.n	800136c <HAL_DMA_IRQHandler+0x97c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <HAL_DMA_IRQHandler+0xa70>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d019      	beq.n	8001368 <HAL_DMA_IRQHandler+0x978>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a4a      	ldr	r2, [pc, #296]	; (8001464 <HAL_DMA_IRQHandler+0xa74>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d012      	beq.n	8001364 <HAL_DMA_IRQHandler+0x974>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a49      	ldr	r2, [pc, #292]	; (8001468 <HAL_DMA_IRQHandler+0xa78>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00a      	beq.n	800135e <HAL_DMA_IRQHandler+0x96e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a47      	ldr	r2, [pc, #284]	; (800146c <HAL_DMA_IRQHandler+0xa7c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d102      	bne.n	8001358 <HAL_DMA_IRQHandler+0x968>
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	e01b      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 8001358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135c:	e018      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 800135e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001362:	e015      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 8001364:	2320      	movs	r3, #32
 8001366:	e013      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 8001368:	2302      	movs	r3, #2
 800136a:	e011      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 800136c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001370:	e00e      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 8001372:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001376:	e00b      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 8001378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137c:	e008      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 800137e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001382:	e005      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001388:	e002      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 800138a:	2320      	movs	r3, #32
 800138c:	e000      	b.n	8001390 <HAL_DMA_IRQHandler+0x9a0>
 800138e:	2302      	movs	r3, #2
 8001390:	4a37      	ldr	r2, [pc, #220]	; (8001470 <HAL_DMA_IRQHandler+0xa80>)
 8001392:	6053      	str	r3, [r2, #4]
 8001394:	e071      	b.n	800147a <HAL_DMA_IRQHandler+0xa8a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a2a      	ldr	r2, [pc, #168]	; (8001444 <HAL_DMA_IRQHandler+0xa54>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d069      	beq.n	8001474 <HAL_DMA_IRQHandler+0xa84>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <HAL_DMA_IRQHandler+0xa58>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d048      	beq.n	800143c <HAL_DMA_IRQHandler+0xa4c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a27      	ldr	r2, [pc, #156]	; (800144c <HAL_DMA_IRQHandler+0xa5c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d040      	beq.n	8001436 <HAL_DMA_IRQHandler+0xa46>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a25      	ldr	r2, [pc, #148]	; (8001450 <HAL_DMA_IRQHandler+0xa60>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d038      	beq.n	8001430 <HAL_DMA_IRQHandler+0xa40>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <HAL_DMA_IRQHandler+0xa64>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d030      	beq.n	800142a <HAL_DMA_IRQHandler+0xa3a>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a22      	ldr	r2, [pc, #136]	; (8001458 <HAL_DMA_IRQHandler+0xa68>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d028      	beq.n	8001424 <HAL_DMA_IRQHandler+0xa34>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a21      	ldr	r2, [pc, #132]	; (800145c <HAL_DMA_IRQHandler+0xa6c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d020      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_DMA_IRQHandler+0xa70>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_DMA_IRQHandler+0xa2a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_DMA_IRQHandler+0xa74>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d012      	beq.n	8001416 <HAL_DMA_IRQHandler+0xa26>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <HAL_DMA_IRQHandler+0xa78>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00a      	beq.n	8001410 <HAL_DMA_IRQHandler+0xa20>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a1b      	ldr	r2, [pc, #108]	; (800146c <HAL_DMA_IRQHandler+0xa7c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d102      	bne.n	800140a <HAL_DMA_IRQHandler+0xa1a>
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	e035      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 800140a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140e:	e032      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 8001410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001414:	e02f      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 8001416:	2320      	movs	r3, #32
 8001418:	e02d      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 800141a:	2302      	movs	r3, #2
 800141c:	e02b      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 800141e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001422:	e028      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 8001424:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001428:	e025      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 800142a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142e:	e022      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	e01f      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 8001436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143a:	e01c      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 800143c:	2320      	movs	r3, #32
 800143e:	e01a      	b.n	8001476 <HAL_DMA_IRQHandler+0xa86>
 8001440:	40020000 	.word	0x40020000
 8001444:	40020008 	.word	0x40020008
 8001448:	4002001c 	.word	0x4002001c
 800144c:	40020030 	.word	0x40020030
 8001450:	40020044 	.word	0x40020044
 8001454:	40020058 	.word	0x40020058
 8001458:	4002006c 	.word	0x4002006c
 800145c:	40020080 	.word	0x40020080
 8001460:	40020408 	.word	0x40020408
 8001464:	4002041c 	.word	0x4002041c
 8001468:	40020430 	.word	0x40020430
 800146c:	40020444 	.word	0x40020444
 8001470:	40020400 	.word	0x40020400
 8001474:	2302      	movs	r3, #2
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <HAL_DMA_IRQHandler+0xabc>)
 8001478:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xab2>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
      }
    }
  }
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020000 	.word	0x40020000

080014b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d108      	bne.n	80014e0 <DMA_SetConfig+0x30>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014de:	e007      	b.n	80014f0 <DMA_SetConfig+0x40>
    hdma->Instance->CPAR = SrcAddress;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	60da      	str	r2, [r3, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	e133      	b.n	8001788 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001520:	2201      	movs	r2, #1
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 8122 	bne.w	8001782 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b12      	cmp	r3, #18
 8001544:	d034      	beq.n	80015b0 <HAL_GPIO_Init+0xb4>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d80d      	bhi.n	8001566 <HAL_GPIO_Init+0x6a>
 800154a:	2b02      	cmp	r3, #2
 800154c:	d02b      	beq.n	80015a6 <HAL_GPIO_Init+0xaa>
 800154e:	2b02      	cmp	r3, #2
 8001550:	d804      	bhi.n	800155c <HAL_GPIO_Init+0x60>
 8001552:	2b00      	cmp	r3, #0
 8001554:	d031      	beq.n	80015ba <HAL_GPIO_Init+0xbe>
 8001556:	2b01      	cmp	r3, #1
 8001558:	d01c      	beq.n	8001594 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800155a:	e048      	b.n	80015ee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800155c:	2b03      	cmp	r3, #3
 800155e:	d043      	beq.n	80015e8 <HAL_GPIO_Init+0xec>
 8001560:	2b11      	cmp	r3, #17
 8001562:	d01b      	beq.n	800159c <HAL_GPIO_Init+0xa0>
          break;
 8001564:	e043      	b.n	80015ee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001566:	4a8d      	ldr	r2, [pc, #564]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d026      	beq.n	80015ba <HAL_GPIO_Init+0xbe>
 800156c:	4a8b      	ldr	r2, [pc, #556]	; (800179c <HAL_GPIO_Init+0x2a0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d806      	bhi.n	8001580 <HAL_GPIO_Init+0x84>
 8001572:	4a8b      	ldr	r2, [pc, #556]	; (80017a0 <HAL_GPIO_Init+0x2a4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d020      	beq.n	80015ba <HAL_GPIO_Init+0xbe>
 8001578:	4a8a      	ldr	r2, [pc, #552]	; (80017a4 <HAL_GPIO_Init+0x2a8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01d      	beq.n	80015ba <HAL_GPIO_Init+0xbe>
          break;
 800157e:	e036      	b.n	80015ee <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001580:	4a89      	ldr	r2, [pc, #548]	; (80017a8 <HAL_GPIO_Init+0x2ac>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0xbe>
 8001586:	4a89      	ldr	r2, [pc, #548]	; (80017ac <HAL_GPIO_Init+0x2b0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d016      	beq.n	80015ba <HAL_GPIO_Init+0xbe>
 800158c:	4a88      	ldr	r2, [pc, #544]	; (80017b0 <HAL_GPIO_Init+0x2b4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0xbe>
          break;
 8001592:	e02c      	b.n	80015ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e028      	b.n	80015ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e023      	b.n	80015ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	3308      	adds	r3, #8
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e01e      	b.n	80015ee <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	330c      	adds	r3, #12
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e019      	b.n	80015ee <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c2:	2304      	movs	r3, #4
 80015c4:	623b      	str	r3, [r7, #32]
          break; 
 80015c6:	e012      	b.n	80015ee <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d0:	2308      	movs	r3, #8
 80015d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	611a      	str	r2, [r3, #16]
          break; 
 80015da:	e008      	b.n	80015ee <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	615a      	str	r2, [r3, #20]
          break; 
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d801      	bhi.n	80015f8 <HAL_GPIO_Init+0xfc>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	e001      	b.n	80015fc <HAL_GPIO_Init+0x100>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3304      	adds	r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2bff      	cmp	r3, #255	; 0xff
 8001602:	d802      	bhi.n	800160a <HAL_GPIO_Init+0x10e>
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x114>
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	3b08      	subs	r3, #8
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	210f      	movs	r1, #15
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	401a      	ands	r2, r3
 8001622:	6a39      	ldr	r1, [r7, #32]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	431a      	orrs	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a2 	beq.w	8001782 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163e:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4a5c      	ldr	r2, [pc, #368]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6193      	str	r3, [r2, #24]
 800164a:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8001656:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4013      	ands	r3, r2
 8001678:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <HAL_GPIO_Init+0x2c0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x1c6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4e      	ldr	r2, [pc, #312]	; (80017c0 <HAL_GPIO_Init+0x2c4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x1c2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4d      	ldr	r2, [pc, #308]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x1be>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4c      	ldr	r2, [pc, #304]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x1ba>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4b      	ldr	r2, [pc, #300]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x1b6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4a      	ldr	r2, [pc, #296]	; (80017d0 <HAL_GPIO_Init+0x2d4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x1b2>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e00a      	b.n	80016c4 <HAL_GPIO_Init+0x1c8>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e008      	b.n	80016c4 <HAL_GPIO_Init+0x1c8>
 80016b2:	2304      	movs	r3, #4
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x1c8>
 80016b6:	2303      	movs	r3, #3
 80016b8:	e004      	b.n	80016c4 <HAL_GPIO_Init+0x1c8>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e002      	b.n	80016c4 <HAL_GPIO_Init+0x1c8>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x1c8>
 80016c2:	2300      	movs	r3, #0
 80016c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c6:	f002 0203 	and.w	r2, r2, #3
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	4093      	lsls	r3, r2
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 80016d4:	4938      	ldr	r1, [pc, #224]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80016ee:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4938      	ldr	r1, [pc, #224]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	43db      	mvns	r3, r3
 8001704:	4933      	ldr	r1, [pc, #204]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	492e      	ldr	r1, [pc, #184]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
 8001722:	e006      	b.n	8001732 <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	43db      	mvns	r3, r3
 800172c:	4929      	ldr	r1, [pc, #164]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 800172e:	4013      	ands	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	4924      	ldr	r1, [pc, #144]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
 800174a:	e006      	b.n	800175a <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	43db      	mvns	r3, r3
 8001754:	491f      	ldr	r1, [pc, #124]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001756:	4013      	ands	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	491a      	ldr	r1, [pc, #104]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	60cb      	str	r3, [r1, #12]
 8001772:	e006      	b.n	8001782 <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	43db      	mvns	r3, r3
 800177c:	4915      	ldr	r1, [pc, #84]	; (80017d4 <HAL_GPIO_Init+0x2d8>)
 800177e:	4013      	ands	r3, r2
 8001780:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	3301      	adds	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	2b0f      	cmp	r3, #15
 800178c:	f67f aec8 	bls.w	8001520 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001790:	bf00      	nop
 8001792:	372c      	adds	r7, #44	; 0x2c
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	10210000 	.word	0x10210000
 80017a0:	10110000 	.word	0x10110000
 80017a4:	10120000 	.word	0x10120000
 80017a8:	10310000 	.word	0x10310000
 80017ac:	10320000 	.word	0x10320000
 80017b0:	10220000 	.word	0x10220000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40010800 	.word	0x40010800
 80017c0:	40010c00 	.word	0x40010c00
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40011400 	.word	0x40011400
 80017cc:	40011800 	.word	0x40011800
 80017d0:	40011c00 	.word	0x40011c00
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0f0      	sub	sp, #448	; 0x1c0
 80017dc:	af00      	add	r7, sp, #0
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 819e 	beq.w	8001b34 <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017f8:	4bb9      	ldr	r3, [pc, #740]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b04      	cmp	r3, #4
 8001802:	d00c      	beq.n	800181e <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001804:	4bb6      	ldr	r3, [pc, #728]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d14f      	bne.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 8001810:	4bb3      	ldr	r3, [pc, #716]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d148      	bne.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 800181e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001822:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001832:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	fab3 f383 	clz	r3, r3
 800183a:	b2db      	uxtb	r3, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <HAL_RCC_OscConfig+0x78>
 800184a:	4ba5      	ldr	r3, [pc, #660]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0x90>
 8001850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001854:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001864:	4b9e      	ldr	r3, [pc, #632]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186c:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8001870:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001874:	fa92 f2a2 	rbit	r2, r2
 8001878:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 800187c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	b252      	sxtb	r2, r2
 8001886:	f042 0220 	orr.w	r2, r2, #32
 800188a:	b252      	sxtb	r2, r2
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f002 021f 	and.w	r2, r2, #31
 8001892:	40d3      	lsrs	r3, r2
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 814a 	beq.w	8001b32 <HAL_RCC_OscConfig+0x35a>
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 8144 	bne.w	8001b32 <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f000 be7b 	b.w	80025a6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80018b0:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a8a      	ldr	r2, [pc, #552]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a87      	ldr	r2, [pc, #540]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7fe feac 	bl	8000624 <HAL_GetTick>
 80018cc:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7fe fea7 	bl	8000624 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d902      	bls.n	80018e8 <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f000 be5f 	b.w	80025a6 <HAL_RCC_OscConfig+0xdce>
 80018e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 80018fc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0x142>
 8001914:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e00b      	b.n	8001932 <HAL_RCC_OscConfig+0x15a>
 800191a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800192e:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001936:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 800193a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800193e:	fa92 f2a2 	rbit	r2, r2
 8001942:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 8001946:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	b252      	sxtb	r2, r2
 8001950:	f042 0220 	orr.w	r2, r2, #32
 8001954:	b252      	sxtb	r2, r2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f002 021f 	and.w	r2, r2, #31
 800195c:	40d3      	lsrs	r3, r2
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1b5      	bne.n	80018d2 <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x1a8>
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a5a      	ldr	r2, [pc, #360]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e030      	b.n	80019e2 <HAL_RCC_OscConfig+0x20a>
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1cc>
 800198a:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a54      	ldr	r2, [pc, #336]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 800199c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e01e      	b.n	80019e2 <HAL_RCC_OscConfig+0x20a>
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x1f2>
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b48      	ldr	r3, [pc, #288]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a47      	ldr	r2, [pc, #284]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x20a>
 80019ca:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a44      	ldr	r2, [pc, #272]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a41      	ldr	r2, [pc, #260]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 80019dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d04f      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7fe fe1a 	bl	8000624 <HAL_GetTick>
 80019f0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f6:	f7fe fe15 	bl	8000624 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d902      	bls.n	8001a0c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	f000 bdcd 	b.w	80025a6 <HAL_RCC_OscConfig+0xdce>
 8001a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 8001a20:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_OscConfig+0x266>
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0x27e>
 8001a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a62:	fa92 f2a2 	rbit	r2, r2
 8001a66:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8001a6a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	b252      	sxtb	r2, r2
 8001a74:	f042 0220 	orr.w	r2, r2, #32
 8001a78:	b252      	sxtb	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	40d3      	lsrs	r3, r2
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0b5      	beq.n	80019f6 <HAL_RCC_OscConfig+0x21e>
 8001a8a:	e053      	b.n	8001b34 <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fdca 	bl	8000624 <HAL_GetTick>
 8001a90:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a96:	f7fe fdc5 	bl	8000624 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d902      	bls.n	8001aac <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f000 bd7d 	b.w	80025a6 <HAL_RCC_OscConfig+0xdce>
 8001aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8001ac0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x30c>
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <HAL_RCC_OscConfig+0x308>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e00e      	b.n	8001afc <HAL_RCC_OscConfig+0x324>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001af8:	4bce      	ldr	r3, [pc, #824]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b00:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8001b04:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001b08:	fa92 f2a2 	rbit	r2, r2
 8001b0c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 8001b10:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b252      	sxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b252      	sxtb	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f002 021f 	and.w	r2, r2, #31
 8001b26:	40d3      	lsrs	r3, r2
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1b2      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2be>
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8151 	beq.w	8001de6 <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b44:	4bbb      	ldr	r3, [pc, #748]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00b      	beq.n	8001b68 <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b50:	4bb8      	ldr	r3, [pc, #736]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d163      	bne.n	8001c24 <HAL_RCC_OscConfig+0x44c>
 8001b5c:	4bb5      	ldr	r3, [pc, #724]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d15d      	bne.n	8001c24 <HAL_RCC_OscConfig+0x44c>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8001b7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
 8001b92:	4ba8      	ldr	r3, [pc, #672]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x3d6>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bb4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bb8:	fa92 f2a2 	rbit	r2, r2
 8001bbc:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8001bc0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b252      	sxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b252      	sxtb	r2, r2
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f002 021f 	and.w	r2, r2, #31
 8001bd6:	40d3      	lsrs	r3, r2
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x418>
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 bcdb 	b.w	80025a6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b90      	ldr	r3, [pc, #576]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6959      	ldr	r1, [r3, #20]
 8001bfe:	23f8      	movs	r3, #248	; 0xf8
 8001c00:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8001c10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	4985      	ldr	r1, [pc, #532]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e0e0      	b.n	8001de6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d07a      	beq.n	8001d24 <HAL_RCC_OscConfig+0x54c>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8001c40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c4e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c52:	461a      	mov	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7fe fce4 	bl	8000624 <HAL_GetTick>
 8001c5c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7fe fcdf 	bl	8000624 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d902      	bls.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f000 bc97 	b.w	80025a6 <HAL_RCC_OscConfig+0xdce>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8001c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
 8001ca2:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e6>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cba:	4b5e      	ldr	r3, [pc, #376]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001cc4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001cc8:	fa92 f2a2 	rbit	r2, r2
 8001ccc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 8001cd0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b252      	sxtb	r2, r2
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	b252      	sxtb	r2, r2
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f002 021f 	and.w	r2, r2, #31
 8001ce6:	40d3      	lsrs	r3, r2
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0b8      	beq.n	8001c62 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6959      	ldr	r1, [r3, #20]
 8001cfe:	23f8      	movs	r3, #248	; 0xf8
 8001d00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 8001d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	4945      	ldr	r1, [pc, #276]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
 8001d22:	e060      	b.n	8001de6 <HAL_RCC_OscConfig+0x60e>
 8001d24:	2301      	movs	r3, #1
 8001d26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8001d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001d44:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fc69 	bl	8000624 <HAL_GetTick>
 8001d52:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7fe fc64 	bl	8000624 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d902      	bls.n	8001d6e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f000 bc1c 	b.w	80025a6 <HAL_RCC_OscConfig+0xdce>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 8001d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_OscConfig+0x5c6>
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x5dc>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCC_OscConfig+0x65c>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2202      	movs	r2, #2
 8001db6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001dba:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001dbe:	fa92 f2a2 	rbit	r2, r2
 8001dc2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 8001dc6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b252      	sxtb	r2, r2
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	b252      	sxtb	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f002 021f 	and.w	r2, r2, #31
 8001ddc:	40d3      	lsrs	r3, r2
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1b8      	bne.n	8001d58 <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80b7 	beq.w	8001f64 <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d059      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x6dc>
 8001e00:	2301      	movs	r3, #1
 8001e02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 8001e12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_OscConfig+0x660>)
 8001e20:	4413      	add	r3, r2
 8001e22:	461a      	mov	r2, r3
 8001e24:	2301      	movs	r3, #1
 8001e26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7fe fbfc 	bl	8000624 <HAL_GetTick>
 8001e2c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e30:	e00e      	b.n	8001e50 <HAL_RCC_OscConfig+0x678>
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7fe fbf2 	bl	8000624 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e3aa      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 8001e50:	2302      	movs	r3, #2
 8001e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e74:	4bb0      	ldr	r3, [pc, #704]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8001e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0c7      	beq.n	8001e3c <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7fe fbc3 	bl	8000638 <HAL_Delay>
 8001eb2:	e057      	b.n	8001f64 <HAL_RCC_OscConfig+0x78c>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8001ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b9a      	ldr	r3, [pc, #616]	; (800213c <HAL_RCC_OscConfig+0x964>)
 8001ed4:	4413      	add	r3, r2
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7fe fba2 	bl	8000624 <HAL_GetTick>
 8001ee0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7fe fb9d 	bl	8000624 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e355      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f0c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f10:	2202      	movs	r2, #2
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b84      	ldr	r3, [pc, #528]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f28:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	6019      	str	r1, [r3, #0]
 8001f30:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f1a3 	rbit	r1, r3
 8001f3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f3e:	6019      	str	r1, [r3, #0]
  return(result);
 8001f40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1c0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8188 	beq.w	8002284 <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b70      	ldr	r3, [pc, #448]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	4a6f      	ldr	r2, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	61d3      	str	r3, [r2, #28]
 8001f80:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x968>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a69      	ldr	r2, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x968>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa0:	f7fe fb40 	bl	8000624 <HAL_GetTick>
 8001fa4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe fb3b 	bl	8000624 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e2f3      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fbe:	4b60      	ldr	r3, [pc, #384]	; (8002140 <HAL_RCC_OscConfig+0x968>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ef      	beq.n	8001faa <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe2:	f7fe fb1f 	bl	8000624 <HAL_GetTick>
 8001fe6:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7fe fb1a 	bl	8000624 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e2d0      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 8002004:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002008:	2202      	movs	r2, #2
 800200a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fa93 f2a3 	rbit	r2, r3
 8002016:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002032:	601a      	str	r2, [r3, #0]
  return(result);
 8002034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002038:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x87c>
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	e001      	b.n	8002058 <HAL_RCC_OscConfig+0x880>
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800205c:	2102      	movs	r1, #2
 800205e:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	fa92 f1a2 	rbit	r1, r2
 800206a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800206e:	6011      	str	r1, [r2, #0]
  return(result);
 8002070:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b252      	sxtb	r2, r2
 800207c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002080:	b252      	sxtb	r2, r2
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	f002 021f 	and.w	r2, r2, #31
 8002088:	40d3      	lsrs	r3, r2
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ac      	bne.n	8001fec <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x8d2>
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	e02f      	b.n	800210a <HAL_RCC_OscConfig+0x932>
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x8f6>
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e01d      	b.n	800210a <HAL_RCC_OscConfig+0x932>
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x91a>
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a16      	ldr	r2, [pc, #88]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a13      	ldr	r2, [pc, #76]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x932>
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_RCC_OscConfig+0x960>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05f      	beq.n	80021d4 <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7fe fa86 	bl	8000624 <HAL_GetTick>
 8002118:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e012      	b.n	8002144 <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fa81 	bl	8000624 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d908      	bls.n	8002144 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e237      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	42420480 	.word	0x42420480
 8002140:	40007000 	.word	0x40007000
 8002144:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002160:	2202      	movs	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002172:	601a      	str	r2, [r3, #0]
  return(result);
 8002174:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002178:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0x9bc>
 800218e:	4bb2      	ldr	r3, [pc, #712]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	e001      	b.n	8002198 <HAL_RCC_OscConfig+0x9c0>
 8002194:	4bb0      	ldr	r3, [pc, #704]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800219c:	2102      	movs	r1, #2
 800219e:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	fa92 f1a2 	rbit	r1, r2
 80021aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021ae:	6011      	str	r1, [r2, #0]
  return(result);
 80021b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b252      	sxtb	r2, r2
 80021bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c0:	b252      	sxtb	r2, r2
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f002 021f 	and.w	r2, r2, #31
 80021c8:	40d3      	lsrs	r3, r2
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0a5      	beq.n	800211e <HAL_RCC_OscConfig+0x946>
 80021d2:	e057      	b.n	8002284 <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7fe fa26 	bl	8000624 <HAL_GetTick>
 80021d8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fa21 	bl	8000624 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1d7      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 80021f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002212:	2202      	movs	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002224:	601a      	str	r2, [r3, #0]
  return(result);
 8002226:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800222a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0xa6e>
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	e001      	b.n	800224a <HAL_RCC_OscConfig+0xa72>
 8002246:	4b84      	ldr	r3, [pc, #528]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800224e:	2102      	movs	r1, #2
 8002250:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	fa92 f1a2 	rbit	r1, r2
 800225c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002260:	6011      	str	r1, [r2, #0]
  return(result);
 8002262:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b252      	sxtb	r2, r2
 800226e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002272:	b252      	sxtb	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	f002 021f 	and.w	r2, r2, #31
 800227a:	40d3      	lsrs	r3, r2
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ac      	bne.n	80021de <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 818a 	beq.w	80025a4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002290:	4b71      	ldr	r3, [pc, #452]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	f000 8181 	beq.w	80025a0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	f040 8107 	bne.w	80024b8 <HAL_RCC_OscConfig+0xce0>
 80022aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022c2:	601a      	str	r2, [r3, #0]
  return(result);
 80022c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022c8:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80022d4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80022d8:	461a      	mov	r2, r3
 80022da:	2300      	movs	r3, #0
 80022dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe f9a1 	bl	8000624 <HAL_GetTick>
 80022e2:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	e009      	b.n	80022fc <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe f99c 	bl	8000624 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e154      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 80022fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002314:	601a      	str	r2, [r3, #0]
  return(result);
 8002316:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800231a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d102      	bne.n	8002336 <HAL_RCC_OscConfig+0xb5e>
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	e00e      	b.n	8002354 <HAL_RCC_OscConfig+0xb7c>
 8002336:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800233a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002358:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800235c:	6011      	str	r1, [r2, #0]
 800235e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	fa92 f1a2 	rbit	r1, r2
 8002368:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800236c:	6011      	str	r1, [r2, #0]
  return(result);
 800236e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b252      	sxtb	r2, r2
 800237a:	f042 0220 	orr.w	r2, r2, #32
 800237e:	b252      	sxtb	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	40d3      	lsrs	r3, r2
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ab      	bne.n	80022e8 <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	492b      	ldr	r1, [pc, #172]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6a19      	ldr	r1, [r3, #32]
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	430b      	orrs	r3, r1
 80023c6:	4924      	ldr	r1, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023e4:	601a      	str	r2, [r3, #0]
  return(result);
 80023e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ea:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80023f6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80023fa:	461a      	mov	r2, r3
 80023fc:	2301      	movs	r3, #1
 80023fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe f910 	bl	8000624 <HAL_GetTick>
 8002404:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002408:	e009      	b.n	800241e <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe f90b 	bl	8000624 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0c3      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 800241e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f2a3 	rbit	r2, r3
 8002432:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002436:	601a      	str	r2, [r3, #0]
  return(result);
 8002438:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800243c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d104      	bne.n	800245c <HAL_RCC_OscConfig+0xc84>
 8002452:	4b01      	ldr	r3, [pc, #4]	; (8002458 <HAL_RCC_OscConfig+0xc80>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	e010      	b.n	800247a <HAL_RCC_OscConfig+0xca2>
 8002458:	40021000 	.word	0x40021000
 800245c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_RCC_OscConfig+0xdd8>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800247e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002482:	6011      	str	r1, [r2, #0]
 8002484:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	fa92 f1a2 	rbit	r1, r2
 800248e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002492:	6011      	str	r1, [r2, #0]
  return(result);
 8002494:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b252      	sxtb	r2, r2
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	b252      	sxtb	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f002 021f 	and.w	r2, r2, #31
 80024ac:	40d3      	lsrs	r3, r2
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0a9      	beq.n	800240a <HAL_RCC_OscConfig+0xc32>
 80024b6:	e075      	b.n	80025a4 <HAL_RCC_OscConfig+0xdcc>
 80024b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d0:	601a      	str	r2, [r3, #0]
  return(result);
 80024d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80024e2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80024e6:	461a      	mov	r2, r3
 80024e8:	2300      	movs	r3, #0
 80024ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe f89a 	bl	8000624 <HAL_GetTick>
 80024f0:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e009      	b.n	800250a <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe f895 	bl	8000624 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04d      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
 800250a:	f107 0320 	add.w	r3, r7, #32
 800250e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	f107 0320 	add.w	r3, r7, #32
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	fa93 f2a3 	rbit	r2, r3
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	601a      	str	r2, [r3, #0]
  return(result);
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0xd6c>
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_RCC_OscConfig+0xdd8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e00e      	b.n	8002562 <HAL_RCC_OscConfig+0xd8a>
 8002544:	f107 0318 	add.w	r3, r7, #24
 8002548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f107 0318 	add.w	r3, r7, #24
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_RCC_OscConfig+0xdd8>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f107 0210 	add.w	r2, r7, #16
 8002566:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800256a:	6011      	str	r1, [r2, #0]
 800256c:	f107 0210 	add.w	r2, r7, #16
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	fa92 f1a2 	rbit	r1, r2
 8002576:	f107 020c 	add.w	r2, r7, #12
 800257a:	6011      	str	r1, [r2, #0]
  return(result);
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b252      	sxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b252      	sxtb	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f002 021f 	and.w	r2, r2, #31
 8002594:	40d3      	lsrs	r3, r2
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ab      	bne.n	80024f6 <HAL_RCC_OscConfig+0xd1e>
 800259e:	e001      	b.n	80025a4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0a8      	sub	sp, #160	; 0xa0
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80025c4:	4bb0      	ldr	r3, [pc, #704]	; (8002888 <HAL_RCC_ClockConfig+0x2d4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	f240 812b 	bls.w	800282a <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d4:	4bac      	ldr	r3, [pc, #688]	; (8002888 <HAL_RCC_ClockConfig+0x2d4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0207 	bic.w	r2, r3, #7
 80025dc:	49aa      	ldr	r1, [pc, #680]	; (8002888 <HAL_RCC_ClockConfig+0x2d4>)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025e4:	4ba8      	ldr	r3, [pc, #672]	; (8002888 <HAL_RCC_ClockConfig+0x2d4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e25d      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002602:	4ba2      	ldr	r3, [pc, #648]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	499f      	ldr	r1, [pc, #636]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8225 	beq.w	8002a6c <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d140      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
 800262a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 800263e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d102      	bne.n	800265c <HAL_RCC_ClockConfig+0xa8>
 8002656:	4b8d      	ldr	r3, [pc, #564]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_ClockConfig+0xc0>
 800265c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002670:	4b86      	ldr	r3, [pc, #536]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002678:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800267c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002680:	fa92 f2a2 	rbit	r2, r2
 8002684:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8002688:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b252      	sxtb	r2, r2
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	b252      	sxtb	r2, r2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	40d3      	lsrs	r3, r2
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d170      	bne.n	800278a <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e202      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d137      	bne.n	8002724 <HAL_RCC_ClockConfig+0x170>
 80026b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80026c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x12e>
 80026dc:	4b6b      	ldr	r3, [pc, #428]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_ClockConfig+0x140>
 80026e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	677b      	str	r3, [r7, #116]	; 0x74
 80026f0:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f8:	673a      	str	r2, [r7, #112]	; 0x70
 80026fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80026fc:	fa92 f2a2 	rbit	r2, r2
 8002700:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8002702:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002704:	fab2 f282 	clz	r2, r2
 8002708:	b252      	sxtb	r2, r2
 800270a:	f042 0220 	orr.w	r2, r2, #32
 800270e:	b252      	sxtb	r2, r2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	40d3      	lsrs	r3, r2
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d134      	bne.n	800278a <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e1c6      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
 8002724:	2302      	movs	r3, #2
 8002726:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8002730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_RCC_ClockConfig+0x198>
 8002746:	4b51      	ldr	r3, [pc, #324]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e007      	b.n	800275c <HAL_RCC_ClockConfig+0x1a8>
 800274c:	2302      	movs	r3, #2
 800274e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002758:	4b4c      	ldr	r3, [pc, #304]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2202      	movs	r2, #2
 800275e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002760:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002762:	fa92 f2a2 	rbit	r2, r2
 8002766:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800276a:	fab2 f282 	clz	r2, r2
 800276e:	b252      	sxtb	r2, r2
 8002770:	f042 0220 	orr.w	r2, r2, #32
 8002774:	b252      	sxtb	r2, r2
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f002 021f 	and.w	r2, r2, #31
 800277c:	40d3      	lsrs	r3, r2
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e193      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	493d      	ldr	r1, [pc, #244]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fd ff42 	bl	8000624 <HAL_GetTick>
 80027a0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d113      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ac:	e00b      	b.n	80027c6 <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ae:	f7fd ff39 	bl	8000624 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e175      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d1ed      	bne.n	80027ae <HAL_RCC_ClockConfig+0x1fa>
 80027d2:	e14b      	b.n	8002a6c <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d11f      	bne.n	800281c <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f7fd ff21 	bl	8000624 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e15d      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d1ed      	bne.n	80027de <HAL_RCC_ClockConfig+0x22a>
 8002802:	e133      	b.n	8002a6c <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fd ff0e 	bl	8000624 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e14a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ed      	bne.n	8002804 <HAL_RCC_ClockConfig+0x250>
 8002828:	e120      	b.n	8002a6c <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4912      	ldr	r1, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80fa 	beq.w	8002a4a <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d139      	bne.n	80028d2 <HAL_RCC_ClockConfig+0x31e>
 800285e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002862:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <HAL_RCC_ClockConfig+0x2dc>
 8002882:	4b02      	ldr	r3, [pc, #8]	; (800288c <HAL_RCC_ClockConfig+0x2d8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e00c      	b.n	80028a2 <HAL_RCC_ClockConfig+0x2ee>
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002894:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	647b      	str	r3, [r7, #68]	; 0x44
 800289e:	4b87      	ldr	r3, [pc, #540]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028a6:	643a      	str	r2, [r7, #64]	; 0x40
 80028a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028aa:	fa92 f2a2 	rbit	r2, r2
 80028ae:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 80028b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028b2:	fab2 f282 	clz	r2, r2
 80028b6:	b252      	sxtb	r2, r2
 80028b8:	f042 0220 	orr.w	r2, r2, #32
 80028bc:	b252      	sxtb	r2, r2
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f002 021f 	and.w	r2, r2, #31
 80028c4:	40d3      	lsrs	r3, r2
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d16e      	bne.n	80029ac <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0ef      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d135      	bne.n	8002946 <HAL_RCC_ClockConfig+0x392>
 80028da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_ClockConfig+0x350>
 80028fe:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	e008      	b.n	8002916 <HAL_RCC_ClockConfig+0x362>
 8002904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291a:	62ba      	str	r2, [r7, #40]	; 0x28
 800291c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291e:	fa92 f2a2 	rbit	r2, r2
 8002922:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8002924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b252      	sxtb	r2, r2
 800292c:	f042 0220 	orr.w	r2, r2, #32
 8002930:	b252      	sxtb	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f002 021f 	and.w	r2, r2, #31
 8002938:	40d3      	lsrs	r3, r2
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d134      	bne.n	80029ac <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0b5      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
 8002946:	2302      	movs	r3, #2
 8002948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	61fb      	str	r3, [r7, #28]
  return(result);
 8002952:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d102      	bne.n	800296e <HAL_RCC_ClockConfig+0x3ba>
 8002968:	4b54      	ldr	r3, [pc, #336]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e007      	b.n	800297e <HAL_RCC_ClockConfig+0x3ca>
 800296e:	2302      	movs	r3, #2
 8002970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2202      	movs	r2, #2
 8002980:	613a      	str	r2, [r7, #16]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	fa92 f2a2 	rbit	r2, r2
 8002988:	60fa      	str	r2, [r7, #12]
  return(result);
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b252      	sxtb	r2, r2
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	b252      	sxtb	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	40d3      	lsrs	r3, r2
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e082      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ac:	4b43      	ldr	r3, [pc, #268]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 0203 	bic.w	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4940      	ldr	r1, [pc, #256]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fd fe31 	bl	8000624 <HAL_GetTick>
 80029c2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d113      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fd fe28 	bl	8000624 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e064      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d1ed      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x41c>
 80029f4:	e029      	b.n	8002a4a <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d11f      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fd fe10 	bl	8000624 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e04c      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d1ed      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x44c>
 8002a24:	e011      	b.n	8002a4a <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a26:	f7fd fdfd 	bl	8000624 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e039      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ed      	bne.n	8002a26 <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCC_ClockConfig+0x50c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	491b      	ldr	r1, [pc, #108]	; (8002ac0 <HAL_RCC_ClockConfig+0x50c>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_ClockConfig+0x50c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e022      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	490d      	ldr	r1, [pc, #52]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4905      	ldr	r1, [pc, #20]	; (8002abc <HAL_RCC_ClockConfig+0x508>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fd fd90 	bl	80005d0 <HAL_InitTick>
  
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	37a0      	adds	r7, #160	; 0xa0
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40022000 	.word	0x40022000

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	b490      	push	{r4, r7}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aca:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002acc:	1d3c      	adds	r4, r7, #4
 8002ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8002ad4:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x40>
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x46>
 8002b02:	e043      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b04:	4b29      	ldr	r3, [pc, #164]	; (8002bac <HAL_RCC_GetSysClockFreq+0xe8>)
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b08:	e043      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b10:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01e      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	617b      	str	r3, [r7, #20]
  return(result);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b62:	4413      	add	r3, r2
 8002b64:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <HAL_RCC_GetSysClockFreq+0xe8>)
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7a:	e004      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xec>)
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCC_GetSysClockFreq+0xe8>)
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3738      	adds	r7, #56	; 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc90      	pop	{r4, r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	080034b8 	.word	0x080034b8
 8002ba4:	080034c8 	.word	0x080034c8
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	007a1200 	.word	0x007a1200
 8002bb0:	003d0900 	.word	0x003d0900

08002bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002bba:	f7ff ff83 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x44>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bc8:	23f0      	movs	r3, #240	; 0xf0
 8002bca:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x48>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	fa21 f303 	lsr.w	r3, r1, r3
 8002be6:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002be8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	080034cc 	.word	0x080034cc
 8002c00:	20000064 	.word	0x20000064

08002c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002c0a:	f7ff ffd3 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c18:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c1c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	603b      	str	r3, [r7, #0]
  return(result);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	080034cc 	.word	0x080034cc

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002c4e:	f7ff ffb1 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002c52:	4601      	mov	r1, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002c5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c60:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	603b      	str	r3, [r7, #0]
  return(result);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	080034cc 	.word	0x080034cc

08002c8c <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e03b      	b.n	8002d16 <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fbe8 	bl	8000488 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cce:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fb01 	bl	80032d8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf4:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d04:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]

  tmp_state = huart->State;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d002      	beq.n	8002d48 <HAL_UART_Transmit_DMA+0x28>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b22      	cmp	r3, #34	; 0x22
 8002d46:	d15a      	bne.n	8002dfe <HAL_UART_Transmit_DMA+0xde>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_Transmit_DMA+0x34>
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e053      	b.n	8002e00 <HAL_UART_Transmit_DMA+0xe0>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Transmit_DMA+0x46>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e04c      	b.n	8002e00 <HAL_UART_Transmit_DMA+0xe0>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b22      	cmp	r3, #34	; 0x22
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit_DMA+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2232      	movs	r2, #50	; 0x32
 8002d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit_DMA+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2212      	movs	r2, #18
 8002da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <HAL_UART_Transmit_DMA+0xe8>)
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <HAL_UART_Transmit_DMA+0xec>)
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_UART_Transmit_DMA+0xf0>)
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	613b      	str	r3, [r7, #16]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f7fd fdc2 	bl	800095c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002de0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002df0:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_UART_Transmit_DMA+0xe0>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	08003009 	.word	0x08003009
 8002e0c:	0800305b 	.word	0x0800305b
 8002e10:	08003077 	.word	0x08003077

08002e14 <HAL_UART_IRQHandler>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	613b      	str	r3, [r7, #16]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_UART_IRQHandler+0x4a>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_UART_IRQHandler+0x4a>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_UART_IRQHandler+0x84>
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_UART_IRQHandler+0x84>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	617b      	str	r3, [r7, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xb2>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xb2>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	617b      	str	r3, [r7, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xe0>
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xe0>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	f043 0208 	orr.w	r2, r3, #8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	613b      	str	r3, [r7, #16]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_UART_IRQHandler+0x114>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_UART_IRQHandler+0x114>
  { 
    UART_Receive_IT(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f944 	bl	80031b0 <UART_Receive_IT>
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_UART_IRQHandler+0x148>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_IRQHandler+0x148>
  {
    UART_Transmit_IT(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8ab 	bl	80030b2 <UART_Transmit_IT>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	617b      	str	r3, [r7, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	613b      	str	r3, [r7, #16]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_UART_IRQHandler+0x17c>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_UART_IRQHandler+0x17c>
  {
    UART_EndTransmit_IT(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8ed 	bl	800316a <UART_EndTransmit_IT>
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00f      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x1a4>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f81f 	bl	8002ff6 <HAL_UART_ErrorCallback>
  }  
}
 8002fb8:	bf00      	nop
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file
   */ 
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_RxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback can be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <UART_DMATransmitCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d113      	bne.n	800304c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003038:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */    
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003048:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800304a:	e002      	b.n	8003052 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ffb7 	bl	8002fc0 <HAL_UART_TxCpltCallback>
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <UART_DMATxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff ffb2 	bl	8002fd2 <HAL_UART_TxHalfCpltCallback>
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <UART_DMAError>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff ffa6 	bl	8002ff6 <HAL_UART_ErrorCallback>
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b12      	cmp	r3, #18
 80030cc:	d002      	beq.n	80030d4 <UART_Transmit_IT+0x22>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b32      	cmp	r3, #50	; 0x32
 80030d2:	d144      	bne.n	800315e <UART_Transmit_IT+0xac>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	d11a      	bne.n	8003114 <UART_Transmit_IT+0x62>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <UART_Transmit_IT+0x56>
      {
        huart->pTxBuffPtr += 2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	1c9a      	adds	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]
 8003106:	e00e      	b.n	8003126 <UART_Transmit_IT+0x74>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]
 8003112:	e008      	b.n	8003126 <UART_Transmit_IT+0x74>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6211      	str	r1, [r2, #32]
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	84da      	strh	r2, [r3, #38]	; 0x26
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10f      	bne.n	800315a <UART_Transmit_IT+0xa8>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003158:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <UART_Transmit_IT+0xae>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003180:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b32      	cmp	r3, #50	; 0x32
 800318c:	d104      	bne.n	8003198 <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2222      	movs	r2, #34	; 0x22
 8003192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003196:	e003      	b.n	80031a0 <UART_EndTransmit_IT+0x36>
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ff0d 	bl	8002fc0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <UART_Receive_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  
  tmp_state = huart->State; 
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	60fb      	str	r3, [r7, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b22      	cmp	r3, #34	; 0x22
 80031ca:	d002      	beq.n	80031d2 <UART_Receive_IT+0x22>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b32      	cmp	r3, #50	; 0x32
 80031d0:	d17c      	bne.n	80032cc <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	d123      	bne.n	8003224 <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10e      	bne.n	8003208 <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
 8003206:	e029      	b.n	800325c <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b29b      	uxth	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	b29a      	uxth	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	629a      	str	r2, [r3, #40]	; 0x28
 8003222:	e01b      	b.n	800325c <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6858      	ldr	r0, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	1c59      	adds	r1, r3, #1
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6291      	str	r1, [r2, #40]	; 0x28
 800323c:	b2c2      	uxtb	r2, r0
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e00c      	b.n	800325c <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	1c58      	adds	r0, r3, #1
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	6288      	str	r0, [r1, #40]	; 0x28
 8003254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800326c:	2b00      	cmp	r3, #0
 800326e:	d12b      	bne.n	80032c8 <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0220 	bic.w	r2, r2, #32
 800327e:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b32      	cmp	r3, #50	; 0x32
 800328a:	d104      	bne.n	8003296 <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2212      	movs	r2, #18
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003294:	e013      	b.n	80032be <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fe90 	bl	8002fe4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e002      	b.n	80032ce <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003316:	f023 030c 	bic.w	r3, r3, #12
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a44      	ldr	r2, [pc, #272]	; (8003450 <UART_SetConfig+0x178>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d140      	bne.n	80033c6 <UART_SetConfig+0xee>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003344:	f7ff fc80 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8003348:	4602      	mov	r2, r0
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <UART_SetConfig+0x17c>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	011c      	lsls	r4, r3, #4
 8003368:	f7ff fc6e 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 800336c:	4602      	mov	r2, r0
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009a      	lsls	r2, r3, #2
 8003376:	441a      	add	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003382:	f7ff fc61 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 8003386:	4602      	mov	r2, r0
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009a      	lsls	r2, r3, #2
 8003390:	441a      	add	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	4a2d      	ldr	r2, [pc, #180]	; (8003454 <UART_SetConfig+0x17c>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2264      	movs	r2, #100	; 0x64
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	1aeb      	subs	r3, r5, r3
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	3332      	adds	r3, #50	; 0x32
 80033b0:	4a28      	ldr	r2, [pc, #160]	; (8003454 <UART_SetConfig+0x17c>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4322      	orrs	r2, r4
 80033c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 80033c4:	e03f      	b.n	8003446 <UART_SetConfig+0x16e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80033c6:	f7ff fc1d 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009a      	lsls	r2, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <UART_SetConfig+0x17c>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	011c      	lsls	r4, r3, #4
 80033ea:	f7ff fc0b 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009a      	lsls	r2, r3, #2
 80033f8:	441a      	add	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	fbb2 f5f3 	udiv	r5, r2, r3
 8003404:	f7ff fbfe 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 8003408:	4602      	mov	r2, r0
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <UART_SetConfig+0x17c>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2264      	movs	r2, #100	; 0x64
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	1aeb      	subs	r3, r5, r3
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <UART_SetConfig+0x17c>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 020f 	and.w	r2, r3, #15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4322      	orrs	r2, r4
 8003444:	609a      	str	r2, [r3, #8]
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bdb0      	pop	{r4, r5, r7, pc}
 800344e:	bf00      	nop
 8003450:	40013800 	.word	0x40013800
 8003454:	51eb851f 	.word	0x51eb851f

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	2500      	movs	r5, #0
 800345c:	4e0c      	ldr	r6, [pc, #48]	; (8003490 <__libc_init_array+0x38>)
 800345e:	4c0d      	ldr	r4, [pc, #52]	; (8003494 <__libc_init_array+0x3c>)
 8003460:	1ba4      	subs	r4, r4, r6
 8003462:	10a4      	asrs	r4, r4, #2
 8003464:	42a5      	cmp	r5, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	f000 f81a 	bl	80034a0 <_init>
 800346c:	2500      	movs	r5, #0
 800346e:	4e0a      	ldr	r6, [pc, #40]	; (8003498 <__libc_init_array+0x40>)
 8003470:	4c0a      	ldr	r4, [pc, #40]	; (800349c <__libc_init_array+0x44>)
 8003472:	1ba4      	subs	r4, r4, r6
 8003474:	10a4      	asrs	r4, r4, #2
 8003476:	42a5      	cmp	r5, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003480:	4798      	blx	r3
 8003482:	3501      	adds	r5, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800348a:	4798      	blx	r3
 800348c:	3501      	adds	r5, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	080034dc 	.word	0x080034dc
 8003494:	080034dc 	.word	0x080034dc
 8003498:	080034dc 	.word	0x080034dc
 800349c:	080034e0 	.word	0x080034e0

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
