
STM32F429_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001264  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001420  08001420  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001420  08001420  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001420  08001420  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001420  08001420  00011420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001424  08001424  00011424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800142c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800142c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000144f  00000000  00000000  0002861b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000390  00000000  00000000  00029a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002f8  00000000  00000000  00029e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000141ac  00000000  00000000  0002a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054bc  00000000  00000000  0003e2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a476  00000000  00000000  00043760  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdbd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c10  00000000  00000000  000bdc54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080013f8 	.word	0x080013f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	080013f8 	.word	0x080013f8

080001ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOF_CLK_ENABLE();
 80001f2:	4b15      	ldr	r3, [pc, #84]	; (8000248 <MX_GPIO_Init+0x5c>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <MX_GPIO_Init+0x5c>)
 80001f8:	f043 0320 	orr.w	r3, r3, #32
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <MX_GPIO_Init+0x5c>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	f003 0320 	and.w	r3, r3, #32
 8000206:	60bb      	str	r3, [r7, #8]
 8000208:	68bb      	ldr	r3, [r7, #8]
  __GPIOH_CLK_ENABLE();
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <MX_GPIO_Init+0x5c>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <MX_GPIO_Init+0x5c>)
 8000210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000214:	6313      	str	r3, [r2, #48]	; 0x30
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <MX_GPIO_Init+0x5c>)
 8000218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000222:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000228:	2301      	movs	r3, #1
 800022a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000230:	2300      	movs	r3, #0
 8000232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000234:	f107 030c 	add.w	r3, r7, #12
 8000238:	4619      	mov	r1, r3
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <MX_GPIO_Init+0x60>)
 800023c:	f000 fa86 	bl	800074c <HAL_GPIO_Init>

}
 8000240:	bf00      	nop
 8000242:	3720      	adds	r7, #32
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40023800 	.word	0x40023800
 800024c:	40021400 	.word	0x40021400

08000250 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 f8fc 	bl	8000450 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f824 	bl	80002a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f7ff ffc6 	bl	80001ec <MX_GPIO_Init>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <main+0x50>)
 8000264:	f000 fc1a 	bl	8000a9c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000268:	20c8      	movs	r0, #200	; 0xc8
 800026a:	f000 f949 	bl	8000500 <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <main+0x50>)
 8000272:	f000 fc13 	bl	8000a9c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000276:	20c8      	movs	r0, #200	; 0xc8
 8000278:	f000 f942 	bl	8000500 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 800027c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000280:	4807      	ldr	r0, [pc, #28]	; (80002a0 <main+0x50>)
 8000282:	f000 fc0b 	bl	8000a9c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000286:	20c8      	movs	r0, #200	; 0xc8
 8000288:	f000 f93a 	bl	8000500 <HAL_Delay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port,LED4_Pin);
 800028c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <main+0x50>)
 8000292:	f000 fc03 	bl	8000a9c <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000296:	20c8      	movs	r0, #200	; 0xc8
 8000298:	f000 f932 	bl	8000500 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 800029c:	e7e0      	b.n	8000260 <main+0x10>
 800029e:	bf00      	nop
 80002a0:	40021400 	.word	0x40021400

080002a4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b094      	sub	sp, #80	; 0x50
 80002a8:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 80002aa:	4b2b      	ldr	r3, [pc, #172]	; (8000358 <SystemClock_Config+0xb4>)
 80002ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ae:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <SystemClock_Config+0xb4>)
 80002b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b4:	6413      	str	r3, [r2, #64]	; 0x40
 80002b6:	4b28      	ldr	r3, [pc, #160]	; (8000358 <SystemClock_Config+0xb4>)
 80002b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c2:	4b26      	ldr	r3, [pc, #152]	; (800035c <SystemClock_Config+0xb8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a25      	ldr	r2, [pc, #148]	; (800035c <SystemClock_Config+0xb8>)
 80002c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002cc:	6013      	str	r3, [r2, #0]
 80002ce:	4b23      	ldr	r3, [pc, #140]	; (800035c <SystemClock_Config+0xb8>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	2301      	movs	r3, #1
 80002dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80002ec:	2305      	movs	r3, #5
 80002ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80002f0:	23d2      	movs	r3, #210	; 0xd2
 80002f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f4:	2302      	movs	r3, #2
 80002f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80002f8:	2304      	movs	r3, #4
 80002fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002fc:	f107 0320 	add.w	r3, r7, #32
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fbdd 	bl	8000ac0 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
 8000306:	230d      	movs	r3, #13
 8000308:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2302      	movs	r3, #2
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000312:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800031c:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	2105      	movs	r1, #5
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fe13 	bl	8000f50 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800032a:	f001 f819 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 800032e:	4602      	mov	r2, r0
 8000330:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <SystemClock_Config+0xbc>)
 8000332:	fba3 2302 	umull	r2, r3, r3, r2
 8000336:	099b      	lsrs	r3, r3, #6
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f9d0 	bl	80006de <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800033e:	2004      	movs	r0, #4
 8000340:	f000 f9da 	bl	80006f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	2100      	movs	r1, #0
 8000348:	f04f 30ff 	mov.w	r0, #4294967295
 800034c:	f000 f9ab 	bl	80006a6 <HAL_NVIC_SetPriority>
}
 8000350:	bf00      	nop
 8000352:	3750      	adds	r7, #80	; 0x50
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40023800 	.word	0x40023800
 800035c:	40007000 	.word	0x40007000
 8000360:	10624dd3 	.word	0x10624dd3

08000364 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000368:	2003      	movs	r0, #3
 800036a:	f000 f991 	bl	8000690 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2100      	movs	r1, #0
 8000372:	f04f 30ff 	mov.w	r0, #4294967295
 8000376:	f000 f996 	bl	80006a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}

0800037e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000382:	f000 f8a3 	bl	80004cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000386:	f000 f9d3 	bl	8000730 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <SystemInit+0x60>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <SystemInit+0x60>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <SystemInit+0x64>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <SystemInit+0x64>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <SystemInit+0x64>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <SystemInit+0x64>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <SystemInit+0x64>)
 80003bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <SystemInit+0x64>)
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <SystemInit+0x68>)
 80003ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <SystemInit+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <SystemInit+0x64>)
 80003d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <SystemInit+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <SystemInit+0x60>)
 80003e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003e4:	609a      	str	r2, [r3, #8]
#endif
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00
 80003f4:	40023800 	.word	0x40023800
 80003f8:	24003010 	.word	0x24003010

080003fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000434 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000400:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000402:	e003      	b.n	800040c <LoopCopyDataInit>

08000404 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000406:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000408:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800040a:	3104      	adds	r1, #4

0800040c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000410:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000412:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000414:	d3f6      	bcc.n	8000404 <CopyDataInit>
  ldr  r2, =_sbss
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000418:	e002      	b.n	8000420 <LoopFillZerobss>

0800041a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800041a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800041c:	f842 3b04 	str.w	r3, [r2], #4

08000420 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000422:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000424:	d3f9      	bcc.n	800041a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000426:	f7ff ffb3 	bl	8000390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800042a:	f000 ffc1 	bl	80013b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800042e:	f7ff ff0f 	bl	8000250 <main>
  bx  lr    
 8000432:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000434:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000438:	08001428 	.word	0x08001428
  ldr  r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000440:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000444:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000448:	20000024 	.word	0x20000024

0800044c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC_IRQHandler>
	...

08000450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <HAL_Init+0x40>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <HAL_Init+0x40>)
 800045a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800045e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <HAL_Init+0x40>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <HAL_Init+0x40>)
 8000466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <HAL_Init+0x40>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a07      	ldr	r2, [pc, #28]	; (8000490 <HAL_Init+0x40>)
 8000472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000478:	2003      	movs	r0, #3
 800047a:	f000 f909 	bl	8000690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800047e:	2000      	movs	r0, #0
 8000480:	f000 f808 	bl	8000494 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000484:	f7ff ff6e 	bl	8000364 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40023c00 	.word	0x40023c00

08000494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800049c:	f000 ff60 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 80004a0:	4602      	mov	r2, r0
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_InitTick+0x34>)
 80004a4:	fba3 2302 	umull	r2, r3, r3, r2
 80004a8:	099b      	lsrs	r3, r3, #6
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f917 	bl	80006de <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	f04f 30ff 	mov.w	r0, #4294967295
 80004b8:	f000 f8f5 	bl	80006a6 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	10624dd3 	.word	0x10624dd3

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_IncTick+0x18>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	4a03      	ldr	r2, [pc, #12]	; (80004e4 <HAL_IncTick+0x18>)
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	20000020 	.word	0x20000020

080004e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return uwTick;
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <HAL_GetTick+0x14>)
 80004ee:	681b      	ldr	r3, [r3, #0]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000020 	.word	0x20000020

08000500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800050c:	f7ff ffec 	bl	80004e8 <HAL_GetTick>
 8000510:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000512:	bf00      	nop
 8000514:	f7ff ffe8 	bl	80004e8 <HAL_GetTick>
 8000518:	4602      	mov	r2, r0
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	1ad2      	subs	r2, r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	d3f7      	bcc.n	8000514 <HAL_Delay+0x14>
  {
  }
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <NVIC_SetPriorityGrouping+0x44>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000548:	4013      	ands	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <NVIC_SetPriorityGrouping+0x44>)
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	60d3      	str	r3, [r2, #12]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <NVIC_GetPriorityGrouping+0x18>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	f003 0307 	and.w	r3, r3, #7
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da0b      	bge.n	80005bc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	490c      	ldr	r1, [pc, #48]	; (80005dc <NVIC_SetPriority+0x4c>)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f003 030f 	and.w	r3, r3, #15
 80005b0:	3b04      	subs	r3, #4
 80005b2:	0112      	lsls	r2, r2, #4
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	440b      	add	r3, r1
 80005b8:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ba:	e009      	b.n	80005d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4907      	ldr	r1, [pc, #28]	; (80005e0 <NVIC_SetPriority+0x50>)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	0112      	lsls	r2, r2, #4
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	440b      	add	r3, r1
 80005cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	e000e100 	.word	0xe000e100

080005e4 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	f1c3 0307 	rsb	r3, r3, #7
 80005fe:	2b04      	cmp	r3, #4
 8000600:	bf28      	it	cs
 8000602:	2304      	movcs	r3, #4
 8000604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3304      	adds	r3, #4
 800060a:	2b06      	cmp	r3, #6
 800060c:	d902      	bls.n	8000614 <NVIC_EncodePriority+0x30>
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3b03      	subs	r3, #3
 8000612:	e000      	b.n	8000616 <NVIC_EncodePriority+0x32>
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	f04f 32ff 	mov.w	r2, #4294967295
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	43da      	mvns	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	401a      	ands	r2, r3
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062c:	f04f 31ff 	mov.w	r1, #4294967295
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43d9      	mvns	r1, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	4313      	orrs	r3, r2
         );
}
 800063e:	4618      	mov	r0, r3
 8000640:	3724      	adds	r7, #36	; 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3b01      	subs	r3, #1
 8000658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800065c:	d301      	bcc.n	8000662 <SysTick_Config+0x16>
 800065e:	2301      	movs	r3, #1
 8000660:	e00f      	b.n	8000682 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <SysTick_Config+0x40>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800066a:	210f      	movs	r1, #15
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f7ff ff8e 	bl	8000590 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <SysTick_Config+0x40>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <SysTick_Config+0x40>)
 800067c:	2207      	movs	r2, #7
 800067e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	e000e010 	.word	0xe000e010

08000690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff47 	bl	800052c <NVIC_SetPriorityGrouping>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006b8:	f7ff ff5c 	bl	8000574 <NVIC_GetPriorityGrouping>
 80006bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	6978      	ldr	r0, [r7, #20]
 80006c4:	f7ff ff8e 	bl	80005e4 <NVIC_EncodePriority>
 80006c8:	4602      	mov	r2, r0
 80006ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff5d 	bl	8000590 <NVIC_SetPriority>
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ffb0 	bl	800064c <SysTick_Config>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d106      	bne.n	8000714 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000712:	e005      	b.n	8000720 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800071a:	f023 0304 	bic.w	r3, r3, #4
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000734:	f000 f802 	bl	800073c <HAL_SYSTICK_Callback>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	e175      	b.n	8000a54 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000768:	2201      	movs	r2, #1
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	429a      	cmp	r2, r3
 8000782:	f040 8164 	bne.w	8000a4e <HAL_GPIO_Init+0x302>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d003      	beq.n	8000796 <HAL_GPIO_Init+0x4a>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2b12      	cmp	r3, #18
 8000794:	d123      	bne.n	80007de <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	08da      	lsrs	r2, r3, #3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3208      	adds	r2, #8
 800079e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	220f      	movs	r2, #15
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	69ba      	ldr	r2, [r7, #24]
 80007b6:	4013      	ands	r3, r2
 80007b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	691a      	ldr	r2, [r3, #16]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	f003 0307 	and.w	r3, r3, #7
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	69ba      	ldr	r2, [r7, #24]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	08da      	lsrs	r2, r3, #3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3208      	adds	r2, #8
 80007d8:	69b9      	ldr	r1, [r7, #24]
 80007da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	2203      	movs	r2, #3
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	69ba      	ldr	r2, [r7, #24]
 80007f2:	4013      	ands	r3, r2
 80007f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f003 0203 	and.w	r2, r3, #3
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	69ba      	ldr	r2, [r7, #24]
 8000808:	4313      	orrs	r3, r2
 800080a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d00b      	beq.n	8000832 <HAL_GPIO_Init+0xe6>
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d007      	beq.n	8000832 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000826:	2b11      	cmp	r3, #17
 8000828:	d003      	beq.n	8000832 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b12      	cmp	r3, #18
 8000830:	d130      	bne.n	8000894 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2203      	movs	r2, #3
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	4013      	ands	r3, r2
 8000848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	4313      	orrs	r3, r2
 800085a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000868:	2201      	movs	r2, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	69ba      	ldr	r2, [r7, #24]
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	091b      	lsrs	r3, r3, #4
 800087e:	f003 0201 	and.w	r2, r3, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	4313      	orrs	r3, r2
 800088c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	2203      	movs	r2, #3
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f000 80be 	beq.w	8000a4e <HAL_GPIO_Init+0x302>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b65      	ldr	r3, [pc, #404]	; (8000a68 <HAL_GPIO_Init+0x31c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a64      	ldr	r2, [pc, #400]	; (8000a68 <HAL_GPIO_Init+0x31c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <HAL_GPIO_Init+0x31c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80008ea:	4a60      	ldr	r2, [pc, #384]	; (8000a6c <HAL_GPIO_Init+0x320>)
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3302      	adds	r3, #2
 80008f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	220f      	movs	r2, #15
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a57      	ldr	r2, [pc, #348]	; (8000a70 <HAL_GPIO_Init+0x324>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d037      	beq.n	8000986 <HAL_GPIO_Init+0x23a>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a56      	ldr	r2, [pc, #344]	; (8000a74 <HAL_GPIO_Init+0x328>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d031      	beq.n	8000982 <HAL_GPIO_Init+0x236>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a55      	ldr	r2, [pc, #340]	; (8000a78 <HAL_GPIO_Init+0x32c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d02b      	beq.n	800097e <HAL_GPIO_Init+0x232>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a54      	ldr	r2, [pc, #336]	; (8000a7c <HAL_GPIO_Init+0x330>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d025      	beq.n	800097a <HAL_GPIO_Init+0x22e>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a53      	ldr	r2, [pc, #332]	; (8000a80 <HAL_GPIO_Init+0x334>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d01f      	beq.n	8000976 <HAL_GPIO_Init+0x22a>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a52      	ldr	r2, [pc, #328]	; (8000a84 <HAL_GPIO_Init+0x338>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d019      	beq.n	8000972 <HAL_GPIO_Init+0x226>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <HAL_GPIO_Init+0x33c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d013      	beq.n	800096e <HAL_GPIO_Init+0x222>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <HAL_GPIO_Init+0x340>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d00d      	beq.n	800096a <HAL_GPIO_Init+0x21e>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <HAL_GPIO_Init+0x344>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d007      	beq.n	8000966 <HAL_GPIO_Init+0x21a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a4e      	ldr	r2, [pc, #312]	; (8000a94 <HAL_GPIO_Init+0x348>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_GPIO_Init+0x216>
 800095e:	2309      	movs	r3, #9
 8000960:	e012      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 8000962:	230a      	movs	r3, #10
 8000964:	e010      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 8000966:	2308      	movs	r3, #8
 8000968:	e00e      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 800096a:	2307      	movs	r3, #7
 800096c:	e00c      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 800096e:	2306      	movs	r3, #6
 8000970:	e00a      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 8000972:	2305      	movs	r3, #5
 8000974:	e008      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 8000976:	2304      	movs	r3, #4
 8000978:	e006      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 800097a:	2303      	movs	r3, #3
 800097c:	e004      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 800097e:	2302      	movs	r3, #2
 8000980:	e002      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 8000982:	2301      	movs	r3, #1
 8000984:	e000      	b.n	8000988 <HAL_GPIO_Init+0x23c>
 8000986:	2300      	movs	r3, #0
 8000988:	69fa      	ldr	r2, [r7, #28]
 800098a:	f002 0203 	and.w	r2, r2, #3
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	4093      	lsls	r3, r2
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000998:	4934      	ldr	r1, [pc, #208]	; (8000a6c <HAL_GPIO_Init+0x320>)
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	089b      	lsrs	r3, r3, #2
 800099e:	3302      	adds	r3, #2
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4013      	ands	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	43db      	mvns	r3, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4013      	ands	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	43db      	mvns	r3, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4013      	ands	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x2fc>
        {
          temp |= iocurrent;
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a48:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <HAL_GPIO_Init+0x34c>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	2b0f      	cmp	r3, #15
 8000a58:	f67f ae86 	bls.w	8000768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3724      	adds	r7, #36	; 0x24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020400 	.word	0x40020400
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40021400 	.word	0x40021400
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40021c00 	.word	0x40021c00
 8000a90:	40022000 	.word	0x40022000
 8000a94:	40022400 	.word	0x40022400
 8000a98:	40013c00 	.word	0x40013c00

08000a9c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	695a      	ldr	r2, [r3, #20]
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	405a      	eors	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	615a      	str	r2, [r3, #20]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0;  
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d06c      	beq.n	8000bb2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000ad8:	4ba9      	ldr	r3, [pc, #676]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d00c      	beq.n	8000afe <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ae4:	4ba6      	ldr	r3, [pc, #664]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d112      	bne.n	8000b16 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000af0:	4ba3      	ldr	r3, [pc, #652]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000afc:	d10b      	bne.n	8000b16 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000afe:	4ba0      	ldr	r3, [pc, #640]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d052      	beq.n	8000bb0 <HAL_RCC_OscConfig+0xf0>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d14e      	bne.n	8000bb0 <HAL_RCC_OscConfig+0xf0>
      {
        return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e211      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000b16:	4b9b      	ldr	r3, [pc, #620]	; (8000d84 <HAL_RCC_OscConfig+0x2c4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b1c:	f7ff fce4 	bl	80004e8 <HAL_GetTick>
 8000b20:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b22:	e00a      	b.n	8000b3a <HAL_RCC_OscConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b24:	f7ff fce0 	bl	80004e8 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d901      	bls.n	8000b3a <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e1ff      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b3a:	4b91      	ldr	r3, [pc, #580]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1ee      	bne.n	8000b24 <HAL_RCC_OscConfig+0x64>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	4b8e      	ldr	r3, [pc, #568]	; (8000d84 <HAL_RCC_OscConfig+0x2c4>)
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d015      	beq.n	8000b84 <HAL_RCC_OscConfig+0xc4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b58:	f7ff fcc6 	bl	80004e8 <HAL_GetTick>
 8000b5c:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5e:	e00a      	b.n	8000b76 <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b60:	f7ff fcc2 	bl	80004e8 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e1e1      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b76:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0ee      	beq.n	8000b60 <HAL_RCC_OscConfig+0xa0>
 8000b82:	e016      	b.n	8000bb2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b84:	f7ff fcb0 	bl	80004e8 <HAL_GetTick>
 8000b88:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8a:	e00a      	b.n	8000ba2 <HAL_RCC_OscConfig+0xe2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fcac 	bl	80004e8 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e1cb      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba2:	4b77      	ldr	r3, [pc, #476]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1ee      	bne.n	8000b8c <HAL_RCC_OscConfig+0xcc>
 8000bae:	e000      	b.n	8000bb2 <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d077      	beq.n	8000cae <HAL_RCC_OscConfig+0x1ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000bbe:	4b70      	ldr	r3, [pc, #448]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00b      	beq.n	8000be2 <HAL_RCC_OscConfig+0x122>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d126      	bne.n	8000c24 <HAL_RCC_OscConfig+0x164>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bd6:	4b6a      	ldr	r3, [pc, #424]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d120      	bne.n	8000c24 <HAL_RCC_OscConfig+0x164>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be2:	4b67      	ldr	r3, [pc, #412]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d005      	beq.n	8000bfa <HAL_RCC_OscConfig+0x13a>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d001      	beq.n	8000bfa <HAL_RCC_OscConfig+0x13a>
      {
        return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e19f      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfa:	4b61      	ldr	r3, [pc, #388]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6919      	ldr	r1, [r3, #16]
 8000c06:	23f8      	movs	r3, #248	; 0xf8
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1;
    s--;
  }
  result <<= s;                       // shift when v's highest bits are zero
#endif
  return(result);
 8000c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1c:	4958      	ldr	r1, [pc, #352]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c22:	e044      	b.n	8000cae <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d02a      	beq.n	8000c82 <HAL_RCC_OscConfig+0x1c2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c2c:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <HAL_RCC_OscConfig+0x2c8>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c32:	f7ff fc59 	bl	80004e8 <HAL_GetTick>
 8000c36:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c38:	e008      	b.n	8000c4c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c3a:	f7ff fc55 	bl	80004e8 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b64      	cmp	r3, #100	; 0x64
 8000c46:	d901      	bls.n	8000c4c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e176      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4c:	4b4c      	ldr	r3, [pc, #304]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f0      	beq.n	8000c3a <HAL_RCC_OscConfig+0x17a>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6919      	ldr	r1, [r3, #16]
 8000c64:	23f8      	movs	r3, #248	; 0xf8
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	4941      	ldr	r1, [pc, #260]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	e015      	b.n	8000cae <HAL_RCC_OscConfig+0x1ee>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c82:	4b41      	ldr	r3, [pc, #260]	; (8000d88 <HAL_RCC_OscConfig+0x2c8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c88:	f7ff fc2e 	bl	80004e8 <HAL_GetTick>
 8000c8c:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc2a 	bl	80004e8 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e14b      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x1d0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d030      	beq.n	8000d1c <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d016      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x230>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc2:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <HAL_RCC_OscConfig+0x2cc>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fc0e 	bl	80004e8 <HAL_GetTick>
 8000ccc:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc0a 	bl	80004e8 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e12b      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x210>
 8000cee:	e015      	b.n	8000d1c <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <HAL_RCC_OscConfig+0x2cc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf6:	f7ff fbf7 	bl	80004e8 <HAL_GetTick>
 8000cfa:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fbf3 	bl	80004e8 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b64      	cmp	r3, #100	; 0x64
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e114      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f0      	bne.n	8000cfe <HAL_RCC_OscConfig+0x23e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d07c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_RCC_OscConfig+0x2c0>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_RCC_OscConfig+0x2d0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <HAL_RCC_OscConfig+0x2d0>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000d4c:	f7ff fbcc 	bl	80004e8 <HAL_GetTick>
 8000d50:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x2a6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d54:	f7ff fbc8 	bl	80004e8 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x2a6>
      {
        return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e0e9      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_RCC_OscConfig+0x2d0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0x294>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_RCC_OscConfig+0x2d4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000d78:	f7ff fbb6 	bl	80004e8 <HAL_GetTick>
 8000d7c:	6378      	str	r0, [r7, #52]	; 0x34
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d7e:	e016      	b.n	8000dae <HAL_RCC_OscConfig+0x2ee>
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40023802 	.word	0x40023802
 8000d88:	42470000 	.word	0x42470000
 8000d8c:	42470e80 	.word	0x42470e80
 8000d90:	40007000 	.word	0x40007000
 8000d94:	40023870 	.word	0x40023870
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d98:	f7ff fba6 	bl	80004e8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0c5      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dae:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ee      	bne.n	8000d98 <HAL_RCC_OscConfig+0x2d8>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	4b62      	ldr	r3, [pc, #392]	; (8000f48 <HAL_RCC_OscConfig+0x488>)
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d015      	beq.n	8000df8 <HAL_RCC_OscConfig+0x338>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fb8c 	bl	80004e8 <HAL_GetTick>
 8000dd0:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd2:	e00a      	b.n	8000dea <HAL_RCC_OscConfig+0x32a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fb88 	bl	80004e8 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x32a>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e0a7      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dea:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0ee      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x314>
 8000df6:	e014      	b.n	8000e22 <HAL_RCC_OscConfig+0x362>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df8:	f7ff fb76 	bl	80004e8 <HAL_GetTick>
 8000dfc:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dfe:	e00a      	b.n	8000e16 <HAL_RCC_OscConfig+0x356>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e00:	f7ff fb72 	bl	80004e8 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e091      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e16:	4b4b      	ldr	r3, [pc, #300]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1ee      	bne.n	8000e00 <HAL_RCC_OscConfig+0x340>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8086 	beq.w	8000f38 <HAL_RCC_OscConfig+0x478>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e2c:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d07d      	beq.n	8000f34 <HAL_RCC_OscConfig+0x474>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d162      	bne.n	8000f06 <HAL_RCC_OscConfig+0x446>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e40:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <HAL_RCC_OscConfig+0x48c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e46:	f7ff fb4f 	bl	80004e8 <HAL_GetTick>
 8000e4a:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4e:	f7ff fb4b 	bl	80004e8 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e06c      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e60:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1f0      	bne.n	8000e4e <HAL_RCC_OscConfig+0x38e>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69da      	ldr	r2, [r3, #28]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	085b      	lsrs	r3, r3, #1
 8000e9a:	1e59      	subs	r1, r3, #1
 8000e9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	617b      	str	r3, [r7, #20]
  return(result);
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eba:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	61fb      	str	r3, [r7, #28]
  return(result);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	491c      	ldr	r1, [pc, #112]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <HAL_RCC_OscConfig+0x48c>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ede:	f7ff fb03 	bl	80004e8 <HAL_GetTick>
 8000ee2:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x438>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee6:	f7ff faff 	bl	80004e8 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b64      	cmp	r3, #100	; 0x64
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x438>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e020      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x426>
 8000f04:	e018      	b.n	8000f38 <HAL_RCC_OscConfig+0x478>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_RCC_OscConfig+0x48c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0c:	f7ff faec 	bl	80004e8 <HAL_GetTick>
 8000f10:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f14:	f7ff fae8 	bl	80004e8 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e009      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_RCC_OscConfig+0x484>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x454>
 8000f32:	e001      	b.n	8000f38 <HAL_RCC_OscConfig+0x478>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x47a>
    }
  }
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40023870 	.word	0x40023870
 8000f4c:	42470060 	.word	0x42470060

08000f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f5e:	4ba0      	ldr	r3, [pc, #640]	; (80011e0 <HAL_RCC_ClockConfig+0x290>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f240 80a6 	bls.w	80010ba <HAL_RCC_ClockConfig+0x16a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f6e:	4b9c      	ldr	r3, [pc, #624]	; (80011e0 <HAL_RCC_ClockConfig+0x290>)
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f76:	4b9a      	ldr	r3, [pc, #616]	; (80011e0 <HAL_RCC_ClockConfig+0x290>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d001      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x38>
    {
      return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e165      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d008      	beq.n	8000fa6 <HAL_RCC_ClockConfig+0x56>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f94:	4b93      	ldr	r3, [pc, #588]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4990      	ldr	r1, [pc, #576]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 812d 	beq.w	800120e <HAL_RCC_ClockConfig+0x2be>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d107      	bne.n	8000fcc <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbc:	4b89      	ldr	r3, [pc, #548]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d119      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e143      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d003      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x8c>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d107      	bne.n	8000fec <HAL_RCC_ClockConfig+0x9c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fdc:	4b81      	ldr	r3, [pc, #516]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d109      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e133      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	4b7d      	ldr	r3, [pc, #500]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e12b      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffc:	4b79      	ldr	r3, [pc, #484]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 0203 	bic.w	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4976      	ldr	r1, [pc, #472]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 800100a:	4313      	orrs	r3, r2
 800100c:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100e:	f7ff fa6b 	bl	80004e8 <HAL_GetTick>
 8001012:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d112      	bne.n	8001042 <HAL_RCC_ClockConfig+0xf2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800101c:	e00a      	b.n	8001034 <HAL_RCC_ClockConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101e:	f7ff fa63 	bl	80004e8 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	f241 3288 	movw	r2, #5000	; 0x1388
 800102c:	4293      	cmp	r3, r2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_ClockConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e10f      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001034:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d1ee      	bne.n	800101e <HAL_RCC_ClockConfig+0xce>
 8001040:	e0e5      	b.n	800120e <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d112      	bne.n	8001070 <HAL_RCC_ClockConfig+0x120>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800104a:	e00a      	b.n	8001062 <HAL_RCC_ClockConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800104c:	f7ff fa4c 	bl	80004e8 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f241 3288 	movw	r2, #5000	; 0x1388
 800105a:	4293      	cmp	r3, r2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_ClockConfig+0x112>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e0f8      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001062:	4b60      	ldr	r3, [pc, #384]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b08      	cmp	r3, #8
 800106c:	d1ee      	bne.n	800104c <HAL_RCC_ClockConfig+0xfc>
 800106e:	e0ce      	b.n	800120e <HAL_RCC_ClockConfig+0x2be>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d119      	bne.n	80010ac <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001078:	e00a      	b.n	8001090 <HAL_RCC_ClockConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800107a:	f7ff fa35 	bl	80004e8 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f241 3288 	movw	r2, #5000	; 0x1388
 8001088:	4293      	cmp	r3, r2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_ClockConfig+0x140>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e0e1      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001090:	4b54      	ldr	r3, [pc, #336]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	e7f1      	b.n	800107a <HAL_RCC_ClockConfig+0x12a>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001096:	f7ff fa27 	bl	80004e8 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_ClockConfig+0x15c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0d3      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ac:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ee      	bne.n	8001096 <HAL_RCC_ClockConfig+0x146>
 80010b8:	e0a9      	b.n	800120e <HAL_RCC_ClockConfig+0x2be>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x188>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4944      	ldr	r1, [pc, #272]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 8087 	beq.w	80011f4 <HAL_RCC_ClockConfig+0x2a4>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0x1ae>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d119      	bne.n	800112e <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0aa      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        }
      }
      /* PLL is selected as System Clock Source */
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <HAL_RCC_ClockConfig+0x1be>
              (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
      else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 800110a:	2b03      	cmp	r3, #3
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0x1ce>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09a      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_ClockConfig+0x1de>
        {
          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e092      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f023 0203 	bic.w	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	492a      	ldr	r1, [pc, #168]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001140:	f7ff f9d2 	bl	80004e8 <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d112      	bne.n	8001174 <HAL_RCC_ClockConfig+0x224>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff f9ca 	bl	80004e8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e076      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b04      	cmp	r3, #4
 8001170:	d1ee      	bne.n	8001150 <HAL_RCC_ClockConfig+0x200>
 8001172:	e03f      	b.n	80011f4 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d112      	bne.n	80011a2 <HAL_RCC_ClockConfig+0x252>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117c:	e00a      	b.n	8001194 <HAL_RCC_ClockConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800117e:	f7ff f9b3 	bl	80004e8 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4293      	cmp	r3, r2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_ClockConfig+0x244>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e05f      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d1ee      	bne.n	800117e <HAL_RCC_ClockConfig+0x22e>
 80011a0:	e028      	b.n	80011f4 <HAL_RCC_ClockConfig+0x2a4>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d11e      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x298>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_ClockConfig+0x272>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ac:	f7ff f99c 	bl	80004e8 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_ClockConfig+0x272>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e048      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_RCC_ClockConfig+0x294>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	e7f1      	b.n	80011ac <HAL_RCC_ClockConfig+0x25c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c8:	f7ff f98e 	bl	80004e8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d906      	bls.n	80011e8 <HAL_RCC_ClockConfig+0x298>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e03a      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00
 80011e4:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_RCC_ClockConfig+0x30c>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e9      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x278>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_RCC_ClockConfig+0x310>)
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_RCC_ClockConfig+0x310>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_RCC_ClockConfig+0x2be>
    {
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e022      	b.n	8001254 <HAL_RCC_ClockConfig+0x304>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d008      	beq.n	800122c <HAL_RCC_ClockConfig+0x2dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_RCC_ClockConfig+0x30c>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	490d      	ldr	r1, [pc, #52]	; (800125c <HAL_RCC_ClockConfig+0x30c>)
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <HAL_RCC_ClockConfig+0x2fc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_RCC_ClockConfig+0x30c>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4905      	ldr	r1, [pc, #20]	; (800125c <HAL_RCC_ClockConfig+0x30c>)
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff f921 	bl	8000494 <HAL_InitTick>
  
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40023c00 	.word	0x40023c00

08001264 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b08b      	sub	sp, #44	; 0x2c
 8001268:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800127a:	4b36      	ldr	r3, [pc, #216]	; (8001354 <HAL_RCC_GetSysClockFreq+0xf0>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b04      	cmp	r3, #4
 8001284:	d006      	beq.n	8001294 <HAL_RCC_GetSysClockFreq+0x30>
 8001286:	2b08      	cmp	r3, #8
 8001288:	d007      	beq.n	800129a <HAL_RCC_GetSysClockFreq+0x36>
 800128a:	2b00      	cmp	r3, #0
 800128c:	d158      	bne.n	8001340 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001290:	623b      	str	r3, [r7, #32]
       break;
 8001292:	e058      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001296:	623b      	str	r3, [r7, #32]
      break;
 8001298:	e055      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_RCC_GetSysClockFreq+0xf0>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012a2:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_RCC_GetSysClockFreq+0xf0>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d017      	beq.n	80012e0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <HAL_RCC_GetSysClockFreq+0xf8>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_RCC_GetSysClockFreq+0xf0>)
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012c0:	400b      	ands	r3, r1
 80012c2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80012c6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	6979      	ldr	r1, [r7, #20]
 80012ca:	fa91 f1a1 	rbit	r1, r1
 80012ce:	6139      	str	r1, [r7, #16]
  return(result);
 80012d0:	6939      	ldr	r1, [r7, #16]
 80012d2:	fab1 f181 	clz	r1, r1
 80012d6:	40cb      	lsrs	r3, r1
 80012d8:	fb03 f302 	mul.w	r3, r3, r2
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
 80012de:	e016      	b.n	800130e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_RCC_GetSysClockFreq+0xf4>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_RCC_GetSysClockFreq+0xf0>)
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012f0:	400b      	ands	r3, r1
 80012f2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80012f6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	fa91 f1a1 	rbit	r1, r1
 80012fe:	60b9      	str	r1, [r7, #8]
  return(result);
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	fab1 f181 	clz	r1, r1
 8001306:	40cb      	lsrs	r3, r1
 8001308:	fb03 f302 	mul.w	r3, r3, r2
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001316:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800131a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	603b      	str	r3, [r7, #0]
  return(result);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	fbb2 f3f3 	udiv	r3, r2, r3
 800133c:	623b      	str	r3, [r7, #32]
      break;
 800133e:	e002      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001342:	623b      	str	r3, [r7, #32]
      break;
 8001344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001346:	6a3b      	ldr	r3, [r7, #32]
}
 8001348:	4618      	mov	r0, r3
 800134a:	372c      	adds	r7, #44	; 0x2c
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40023800 	.word	0x40023800
 8001358:	00f42400 	.word	0x00f42400
 800135c:	007a1200 	.word	0x007a1200

08001360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001366:	f7ff ff7d 	bl	8001264 <HAL_RCC_GetSysClockFreq>
 800136a:	4601      	mov	r1, r0
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_RCC_GetHCLKFreq+0x44>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001374:	23f0      	movs	r3, #240	; 0xf0
 8001376:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	603b      	str	r3, [r7, #0]
  return(result);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x48>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	fa21 f303 	lsr.w	r3, r1, r3
 8001392:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_RCC_GetHCLKFreq+0x4c>)
 8001394:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetHCLKFreq+0x4c>)
 8001398:	681b      	ldr	r3, [r3, #0]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	08001410 	.word	0x08001410
 80013ac:	20000000 	.word	0x20000000

080013b0 <__libc_init_array>:
 80013b0:	b570      	push	{r4, r5, r6, lr}
 80013b2:	4e0d      	ldr	r6, [pc, #52]	; (80013e8 <__libc_init_array+0x38>)
 80013b4:	4c0d      	ldr	r4, [pc, #52]	; (80013ec <__libc_init_array+0x3c>)
 80013b6:	1ba4      	subs	r4, r4, r6
 80013b8:	10a4      	asrs	r4, r4, #2
 80013ba:	2500      	movs	r5, #0
 80013bc:	42a5      	cmp	r5, r4
 80013be:	d109      	bne.n	80013d4 <__libc_init_array+0x24>
 80013c0:	4e0b      	ldr	r6, [pc, #44]	; (80013f0 <__libc_init_array+0x40>)
 80013c2:	4c0c      	ldr	r4, [pc, #48]	; (80013f4 <__libc_init_array+0x44>)
 80013c4:	f000 f818 	bl	80013f8 <_init>
 80013c8:	1ba4      	subs	r4, r4, r6
 80013ca:	10a4      	asrs	r4, r4, #2
 80013cc:	2500      	movs	r5, #0
 80013ce:	42a5      	cmp	r5, r4
 80013d0:	d105      	bne.n	80013de <__libc_init_array+0x2e>
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
 80013d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d8:	4798      	blx	r3
 80013da:	3501      	adds	r5, #1
 80013dc:	e7ee      	b.n	80013bc <__libc_init_array+0xc>
 80013de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013e2:	4798      	blx	r3
 80013e4:	3501      	adds	r5, #1
 80013e6:	e7f2      	b.n	80013ce <__libc_init_array+0x1e>
 80013e8:	08001420 	.word	0x08001420
 80013ec:	08001420 	.word	0x08001420
 80013f0:	08001420 	.word	0x08001420
 80013f4:	08001424 	.word	0x08001424

080013f8 <_init>:
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fa:	bf00      	nop
 80013fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fe:	bc08      	pop	{r3}
 8001400:	469e      	mov	lr, r3
 8001402:	4770      	bx	lr

08001404 <_fini>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	bf00      	nop
 8001408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140a:	bc08      	pop	{r3}
 800140c:	469e      	mov	lr, r3
 800140e:	4770      	bx	lr
