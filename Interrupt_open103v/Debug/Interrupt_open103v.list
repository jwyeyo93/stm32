
Interrupt_open103v.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ddc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe4  08001fe4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001fe4  08001fe4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fe4  08001fe4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe4  08001fe4  00011fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001ff0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001ff0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008750  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000149a  00000000  00000000  0002877d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000378  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002e0  00000000  00000000  00029f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000100f0  00000000  00000000  0002a270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000576d  00000000  00000000  0003a360  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005ee93  00000000  00000000  0003facd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009e960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bb4  00000000  00000000  0009e9dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	08001fa8 	.word	0x08001fa8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	08001fa8 	.word	0x08001fa8

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800022a:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <MX_GPIO_Init+0x8c>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a20      	ldr	r2, [pc, #128]	; (80002b0 <MX_GPIO_Init+0x8c>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b1e      	ldr	r3, [pc, #120]	; (80002b0 <MX_GPIO_Init+0x8c>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0310 	and.w	r3, r3, #16
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 8000242:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <MX_GPIO_Init+0x8c>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a1a      	ldr	r2, [pc, #104]	; (80002b0 <MX_GPIO_Init+0x8c>)
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <MX_GPIO_Init+0x8c>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0308 	and.w	r3, r3, #8
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000260:	4814      	ldr	r0, [pc, #80]	; (80002b4 <MX_GPIO_Init+0x90>)
 8000262:	f000 fc25 	bl	8000ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 8000266:	2301      	movs	r3, #1
 8000268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <MX_GPIO_Init+0x94>)
 800026c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800026e:	2301      	movs	r3, #1
 8000270:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 8000272:	f107 0308 	add.w	r3, r7, #8
 8000276:	4619      	mov	r1, r3
 8000278:	4810      	ldr	r0, [pc, #64]	; (80002bc <MX_GPIO_Init+0x98>)
 800027a:	f000 faab 	bl	80007d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800027e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000282:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000284:	2301      	movs	r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000288:	2302      	movs	r3, #2
 800028a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800028c:	f107 0308 	add.w	r3, r7, #8
 8000290:	4619      	mov	r1, r3
 8000292:	4808      	ldr	r0, [pc, #32]	; (80002b4 <MX_GPIO_Init+0x90>)
 8000294:	f000 fa9e 	bl	80007d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000298:	2200      	movs	r2, #0
 800029a:	2100      	movs	r1, #0
 800029c:	2006      	movs	r0, #6
 800029e:	f000 fa3a 	bl	8000716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002a2:	2006      	movs	r0, #6
 80002a4:	f000 fa53 	bl	800074e <HAL_NVIC_EnableIRQ>

}
 80002a8:	bf00      	nop
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	10110000 	.word	0x10110000
 80002bc:	40011000 	.word	0x40011000

080002c0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 f8f4 	bl	80004b0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f806 	bl	80002d8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f7ff ffaa 	bl	8000224 <MX_GPIO_Init>
  SystemClock_Config();
 80002d0:	f000 f802 	bl	80002d8 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <main+0x14>
	...

080002d8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	; 0x40
 80002dc:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80002e6:	2310      	movs	r3, #16
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fc1e 	bl	8000b34 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fafd 	bl	8001910 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000316:	f001 fdfb 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 800031a:	4602      	mov	r2, r0
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <SystemClock_Config+0x6c>)
 800031e:	fba3 2302 	umull	r2, r3, r3, r2
 8000322:	099b      	lsrs	r3, r3, #6
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa20 	bl	800076a <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800032a:	2004      	movs	r0, #4
 800032c:	f000 fa2a 	bl	8000784 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2100      	movs	r1, #0
 8000334:	f04f 30ff 	mov.w	r0, #4294967295
 8000338:	f000 f9ed 	bl	8000716 <HAL_NVIC_SetPriority>
}
 800033c:	bf00      	nop
 800033e:	3740      	adds	r7, #64	; 0x40
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	10624dd3 	.word	0x10624dd3

08000348 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8000352:	88fb      	ldrh	r3, [r7, #6]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d104      	bne.n	8000362 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <HAL_GPIO_EXTI_Callback+0x24>)
 800035e:	f000 fbbf 	bl	8000ae0 <HAL_GPIO_TogglePin>
	}

}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010c00 	.word	0x40010c00

08000370 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_MspInit+0x68>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <HAL_MspInit+0x68>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_MspInit+0x68>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800038e:	2003      	movs	r0, #3
 8000390:	f000 f9b6 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	2100      	movs	r1, #0
 8000398:	f06f 000b 	mvn.w	r0, #11
 800039c:	f000 f9bb 	bl	8000716 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	f06f 000a 	mvn.w	r0, #10
 80003a8:	f000 f9b5 	bl	8000716 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2100      	movs	r1, #0
 80003b0:	f06f 0009 	mvn.w	r0, #9
 80003b4:	f000 f9af 	bl	8000716 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2100      	movs	r1, #0
 80003bc:	f06f 0003 	mvn.w	r0, #3
 80003c0:	f000 f9a9 	bl	8000716 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f000 f9a3 	bl	8000716 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000

080003dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e0:	f000 f898 	bl	8000514 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80003e4:	f000 f9ea 	bl	80007bc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 fb87 	bl	8000b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <SystemInit+0x5c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <SystemInit+0x5c>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <SystemInit+0x5c>)
 800040e:	685a      	ldr	r2, [r3, #4]
 8000410:	4911      	ldr	r1, [pc, #68]	; (8000458 <SystemInit+0x5c>)
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <SystemInit+0x60>)
 8000414:	4013      	ands	r3, r2
 8000416:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <SystemInit+0x5c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <SystemInit+0x5c>)
 800041e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <SystemInit+0x5c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <SystemInit+0x5c>)
 800042e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000432:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <SystemInit+0x5c>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <SystemInit+0x5c>)
 800043a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800043e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <SystemInit+0x5c>)
 8000442:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000446:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <SystemInit+0x64>)
 800044a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800044e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	f8ff0000 	.word	0xf8ff0000
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000464:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000466:	e003      	b.n	8000470 <LoopCopyDataInit>

08000468 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800046a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800046c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800046e:	3104      	adds	r1, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000470:	480a      	ldr	r0, [pc, #40]	; (800049c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000474:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000476:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000478:	d3f6      	bcc.n	8000468 <CopyDataInit>
  ldr r2, =_sbss
 800047a:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800047c:	e002      	b.n	8000484 <LoopFillZerobss>

0800047e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000480:	f842 3b04 	str.w	r3, [r2], #4

08000484 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000486:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000488:	d3f9      	bcc.n	800047e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800048a:	f7ff ffb7 	bl	80003fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048e:	f001 fd67 	bl	8001f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000492:	f7ff ff15 	bl	80002c0 <main>
  bx lr
 8000496:	4770      	bx	lr
  ldr r3, =_sidata
 8000498:	08001fec 	.word	0x08001fec
  ldr r0, =_sdata
 800049c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004a0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80004a4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80004a8:	20000024 	.word	0x20000024

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>
	...

080004b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_Init+0x28>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_Init+0x28>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 f91d 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 f808 	bl	80004dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004cc:	f7ff ff50 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40022000 	.word	0x40022000

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004e4:	f001 fd14 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_InitTick+0x34>)
 80004ec:	fba3 2302 	umull	r2, r3, r3, r2
 80004f0:	099b      	lsrs	r3, r3, #6
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f939 	bl	800076a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	f000 f909 	bl	8000716 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	10624dd3 	.word	0x10624dd3

08000514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick++;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_IncTick+0x18>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a03      	ldr	r2, [pc, #12]	; (800052c <HAL_IncTick+0x18>)
 8000520:	6013      	str	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000020 	.word	0x20000020

08000530 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return uwTick;
 8000534:	4b02      	ldr	r3, [pc, #8]	; (8000540 <HAL_GetTick+0x10>)
 8000536:	681b      	ldr	r3, [r3, #0]
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000020 	.word	0x20000020

08000544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000550:	f7ff ffee 	bl	8000530 <HAL_GetTick>
 8000554:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000556:	bf00      	nop
 8000558:	f7ff ffea 	bl	8000530 <HAL_GetTick>
 800055c:	4602      	mov	r2, r0
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	d3f7      	bcc.n	8000558 <HAL_Delay+0x14>
  {
  }
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <NVIC_SetPriorityGrouping+0x44>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800058c:	4013      	ands	r3, r2
 800058e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <NVIC_SetPriorityGrouping+0x44>)
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <NVIC_GetPriorityGrouping+0x18>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	0a1b      	lsrs	r3, r3, #8
 80005c2:	f003 0307 	and.w	r3, r3, #7
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4906      	ldr	r1, [pc, #24]	; (8000600 <NVIC_EnableIRQ+0x2c>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100

08000604 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	da0b      	bge.n	8000630 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <NVIC_SetPriority+0x4c>)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 030f 	and.w	r3, r3, #15
 8000624:	3b04      	subs	r3, #4
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062e:	e009      	b.n	8000644 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <NVIC_SetPriority+0x50>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	0112      	lsls	r2, r2, #4
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	440b      	add	r3, r1
 8000640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	e000e100 	.word	0xe000e100

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006cc:	d301      	bcc.n	80006d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00f      	b.n	80006f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <SysTick_Config+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006da:	210f      	movs	r1, #15
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f7ff ff90 	bl	8000604 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <SysTick_Config+0x40>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <SysTick_Config+0x40>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff31 	bl	8000570 <NVIC_SetPriorityGrouping>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000728:	f7ff ff46 	bl	80005b8 <NVIC_GetPriorityGrouping>
 800072c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f7ff ff90 	bl	8000658 <NVIC_EncodePriority>
 8000738:	4602      	mov	r2, r0
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff5f 	bl	8000604 <NVIC_SetPriority>
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff39 	bl	80005d4 <NVIC_EnableIRQ>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffa2 	bl	80006bc <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b04      	cmp	r3, #4
 8000790:	d106      	bne.n	80007a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800079e:	e005      	b.n	80007ac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007a6:	f023 0304 	bic.w	r3, r3, #4
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010

080007bc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007c0:	f000 f802 	bl	80007c8 <HAL_SYSTICK_Callback>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b08b      	sub	sp, #44	; 0x2c
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
 80007f6:	e133      	b.n	8000a60 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007f8:	2201      	movs	r2, #1
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	4013      	ands	r3, r2
 800080a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 8122 	bne.w	8000a5a <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b12      	cmp	r3, #18
 800081c:	d034      	beq.n	8000888 <HAL_GPIO_Init+0xb4>
 800081e:	2b12      	cmp	r3, #18
 8000820:	d80d      	bhi.n	800083e <HAL_GPIO_Init+0x6a>
 8000822:	2b02      	cmp	r3, #2
 8000824:	d02b      	beq.n	800087e <HAL_GPIO_Init+0xaa>
 8000826:	2b02      	cmp	r3, #2
 8000828:	d804      	bhi.n	8000834 <HAL_GPIO_Init+0x60>
 800082a:	2b00      	cmp	r3, #0
 800082c:	d031      	beq.n	8000892 <HAL_GPIO_Init+0xbe>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d01c      	beq.n	800086c <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8000832:	e048      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000834:	2b03      	cmp	r3, #3
 8000836:	d043      	beq.n	80008c0 <HAL_GPIO_Init+0xec>
 8000838:	2b11      	cmp	r3, #17
 800083a:	d01b      	beq.n	8000874 <HAL_GPIO_Init+0xa0>
          break;
 800083c:	e043      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800083e:	4a8d      	ldr	r2, [pc, #564]	; (8000a74 <HAL_GPIO_Init+0x2a0>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d026      	beq.n	8000892 <HAL_GPIO_Init+0xbe>
 8000844:	4a8b      	ldr	r2, [pc, #556]	; (8000a74 <HAL_GPIO_Init+0x2a0>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d806      	bhi.n	8000858 <HAL_GPIO_Init+0x84>
 800084a:	4a8b      	ldr	r2, [pc, #556]	; (8000a78 <HAL_GPIO_Init+0x2a4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d020      	beq.n	8000892 <HAL_GPIO_Init+0xbe>
 8000850:	4a8a      	ldr	r2, [pc, #552]	; (8000a7c <HAL_GPIO_Init+0x2a8>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d01d      	beq.n	8000892 <HAL_GPIO_Init+0xbe>
          break;
 8000856:	e036      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000858:	4a89      	ldr	r2, [pc, #548]	; (8000a80 <HAL_GPIO_Init+0x2ac>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d019      	beq.n	8000892 <HAL_GPIO_Init+0xbe>
 800085e:	4a89      	ldr	r2, [pc, #548]	; (8000a84 <HAL_GPIO_Init+0x2b0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d016      	beq.n	8000892 <HAL_GPIO_Init+0xbe>
 8000864:	4a88      	ldr	r2, [pc, #544]	; (8000a88 <HAL_GPIO_Init+0x2b4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d013      	beq.n	8000892 <HAL_GPIO_Init+0xbe>
          break;
 800086a:	e02c      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	623b      	str	r3, [r7, #32]
          break;
 8000872:	e028      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	3304      	adds	r3, #4
 800087a:	623b      	str	r3, [r7, #32]
          break;
 800087c:	e023      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	3308      	adds	r3, #8
 8000884:	623b      	str	r3, [r7, #32]
          break;
 8000886:	e01e      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	330c      	adds	r3, #12
 800088e:	623b      	str	r3, [r7, #32]
          break;
 8000890:	e019      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d102      	bne.n	80008a0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800089a:	2304      	movs	r3, #4
 800089c:	623b      	str	r3, [r7, #32]
          break; 
 800089e:	e012      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d105      	bne.n	80008b4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a8:	2308      	movs	r3, #8
 80008aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	611a      	str	r2, [r3, #16]
          break; 
 80008b2:	e008      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b4:	2308      	movs	r3, #8
 80008b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	615a      	str	r2, [r3, #20]
          break; 
 80008be:	e002      	b.n	80008c6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
          break;
 80008c4:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d801      	bhi.n	80008d0 <HAL_GPIO_Init+0xfc>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	e001      	b.n	80008d4 <HAL_GPIO_Init+0x100>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3304      	adds	r3, #4
 80008d4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2bff      	cmp	r3, #255	; 0xff
 80008da:	d802      	bhi.n	80008e2 <HAL_GPIO_Init+0x10e>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	e002      	b.n	80008e8 <HAL_GPIO_Init+0x114>
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	3b08      	subs	r3, #8
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	210f      	movs	r1, #15
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	401a      	ands	r2, r3
 80008fa:	6a39      	ldr	r1, [r7, #32]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	431a      	orrs	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	2b00      	cmp	r3, #0
 8000912:	f000 80a2 	beq.w	8000a5a <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a5c      	ldr	r2, [pc, #368]	; (8000a8c <HAL_GPIO_Init+0x2b8>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 800092e:	4a58      	ldr	r2, [pc, #352]	; (8000a90 <HAL_GPIO_Init+0x2bc>)
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	3302      	adds	r3, #2
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	4013      	ands	r3, r2
 8000950:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4f      	ldr	r2, [pc, #316]	; (8000a94 <HAL_GPIO_Init+0x2c0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d01f      	beq.n	800099a <HAL_GPIO_Init+0x1c6>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4e      	ldr	r2, [pc, #312]	; (8000a98 <HAL_GPIO_Init+0x2c4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_GPIO_Init+0x1c2>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <HAL_GPIO_Init+0x2c8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0x1be>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4c      	ldr	r2, [pc, #304]	; (8000aa0 <HAL_GPIO_Init+0x2cc>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d00d      	beq.n	800098e <HAL_GPIO_Init+0x1ba>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4b      	ldr	r2, [pc, #300]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0x1b6>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4a      	ldr	r2, [pc, #296]	; (8000aa8 <HAL_GPIO_Init+0x2d4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_GPIO_Init+0x1b2>
 8000982:	2305      	movs	r3, #5
 8000984:	e00a      	b.n	800099c <HAL_GPIO_Init+0x1c8>
 8000986:	2306      	movs	r3, #6
 8000988:	e008      	b.n	800099c <HAL_GPIO_Init+0x1c8>
 800098a:	2304      	movs	r3, #4
 800098c:	e006      	b.n	800099c <HAL_GPIO_Init+0x1c8>
 800098e:	2303      	movs	r3, #3
 8000990:	e004      	b.n	800099c <HAL_GPIO_Init+0x1c8>
 8000992:	2302      	movs	r3, #2
 8000994:	e002      	b.n	800099c <HAL_GPIO_Init+0x1c8>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <HAL_GPIO_Init+0x1c8>
 800099a:	2300      	movs	r3, #0
 800099c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099e:	f002 0203 	and.w	r2, r2, #3
 80009a2:	0092      	lsls	r2, r2, #2
 80009a4:	4093      	lsls	r3, r2
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 80009ac:	4938      	ldr	r1, [pc, #224]	; (8000a90 <HAL_GPIO_Init+0x2bc>)
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80009c6:	4b39      	ldr	r3, [pc, #228]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4938      	ldr	r1, [pc, #224]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	600b      	str	r3, [r1, #0]
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	43db      	mvns	r3, r3
 80009dc:	4933      	ldr	r1, [pc, #204]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 80009de:	4013      	ands	r3, r2
 80009e0:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d006      	beq.n	80009fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	492e      	ldr	r1, [pc, #184]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	604b      	str	r3, [r1, #4]
 80009fa:	e006      	b.n	8000a0a <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4929      	ldr	r1, [pc, #164]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000a16:	4b25      	ldr	r3, [pc, #148]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	4924      	ldr	r1, [pc, #144]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	608b      	str	r3, [r1, #8]
 8000a22:	e006      	b.n	8000a32 <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	491f      	ldr	r1, [pc, #124]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	491a      	ldr	r1, [pc, #104]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60cb      	str	r3, [r1, #12]
 8000a4a:	e006      	b.n	8000a5a <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4915      	ldr	r1, [pc, #84]	; (8000aac <HAL_GPIO_Init+0x2d8>)
 8000a56:	4013      	ands	r3, r2
 8000a58:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	f67f aec8 	bls.w	80007f8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000a68:	bf00      	nop
 8000a6a:	372c      	adds	r7, #44	; 0x2c
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	10210000 	.word	0x10210000
 8000a78:	10110000 	.word	0x10110000
 8000a7c:	10120000 	.word	0x10120000
 8000a80:	10310000 	.word	0x10310000
 8000a84:	10320000 	.word	0x10320000
 8000a88:	10220000 	.word	0x10220000
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000
 8000a94:	40010800 	.word	0x40010800
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	40011400 	.word	0x40011400
 8000aa4:	40011800 	.word	0x40011800
 8000aa8:	40011c00 	.word	0x40011c00
 8000aac:	40010400 	.word	0x40010400

08000ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	807b      	strh	r3, [r7, #2]
 8000abc:	4613      	mov	r3, r2
 8000abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ac0:	787b      	ldrb	r3, [r7, #1]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac6:	887a      	ldrh	r2, [r7, #2]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000acc:	e003      	b.n	8000ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	041a      	lsls	r2, r3, #16
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	611a      	str	r2, [r3, #16]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	405a      	eors	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fc10 	bl	8000348 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40010400 	.word	0x40010400

08000b34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0f0      	sub	sp, #448	; 0x1c0
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 819e 	beq.w	8000e90 <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b54:	4bb9      	ldr	r3, [pc, #740]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 030c 	and.w	r3, r3, #12
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d00c      	beq.n	8000b7a <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b60:	4bb6      	ldr	r3, [pc, #728]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	d14f      	bne.n	8000c0c <HAL_RCC_OscConfig+0xd8>
 8000b6c:	4bb3      	ldr	r3, [pc, #716]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b78:	d148      	bne.n	8000c0c <HAL_RCC_OscConfig+0xd8>
 8000b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b7e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b82:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000b86:	fa93 f3a3 	rbit	r3, r3
 8000b8a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	095b      	lsrs	r3, r3, #5
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d102      	bne.n	8000bac <HAL_RCC_OscConfig+0x78>
 8000ba6:	4ba5      	ldr	r3, [pc, #660]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	e00b      	b.n	8000bc4 <HAL_RCC_OscConfig+0x90>
 8000bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bb0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000bb8:	fa93 f3a3 	rbit	r3, r3
 8000bbc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000bc0:	4b9e      	ldr	r3, [pc, #632]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bc8:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8000bcc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8000bd0:	fa92 f2a2 	rbit	r2, r2
 8000bd4:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 8000bd8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b252      	sxtb	r2, r2
 8000be2:	f042 0220 	orr.w	r2, r2, #32
 8000be6:	b252      	sxtb	r2, r2
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	f002 021f 	and.w	r2, r2, #31
 8000bee:	40d3      	lsrs	r3, r2
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 814a 	beq.w	8000e8e <HAL_RCC_OscConfig+0x35a>
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 8144 	bne.w	8000e8e <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	f000 be7b 	b.w	8001902 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000c0c:	4b8b      	ldr	r3, [pc, #556]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a8a      	ldr	r2, [pc, #552]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b88      	ldr	r3, [pc, #544]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a87      	ldr	r2, [pc, #540]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c22:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c24:	f7ff fc84 	bl	8000530 <HAL_GetTick>
 8000c28:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c2c:	e00a      	b.n	8000c44 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c2e:	f7ff fc7f 	bl	8000530 <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b64      	cmp	r3, #100	; 0x64
 8000c3c:	d902      	bls.n	8000c44 <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	f000 be5f 	b.w	8001902 <HAL_RCC_OscConfig+0xdce>
 8000c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8000c58:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <HAL_RCC_OscConfig+0x142>
 8000c70:	4b72      	ldr	r3, [pc, #456]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	e00b      	b.n	8000c8e <HAL_RCC_OscConfig+0x15a>
 8000c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c7a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000c82:	fa93 f3a3 	rbit	r3, r3
 8000c86:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000c8a:	4b6c      	ldr	r3, [pc, #432]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c92:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8000c96:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8000c9a:	fa92 f2a2 	rbit	r2, r2
 8000c9e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 8000ca2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	b252      	sxtb	r2, r2
 8000cac:	f042 0220 	orr.w	r2, r2, #32
 8000cb0:	b252      	sxtb	r2, r2
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	f002 021f 	and.w	r2, r2, #31
 8000cb8:	40d3      	lsrs	r3, r2
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1b5      	bne.n	8000c2e <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ccc:	d106      	bne.n	8000cdc <HAL_RCC_OscConfig+0x1a8>
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a5a      	ldr	r2, [pc, #360]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e030      	b.n	8000d3e <HAL_RCC_OscConfig+0x20a>
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10c      	bne.n	8000d00 <HAL_RCC_OscConfig+0x1cc>
 8000ce6:	4b55      	ldr	r3, [pc, #340]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a54      	ldr	r2, [pc, #336]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b52      	ldr	r3, [pc, #328]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a51      	ldr	r2, [pc, #324]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e01e      	b.n	8000d3e <HAL_RCC_OscConfig+0x20a>
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d0a:	d10c      	bne.n	8000d26 <HAL_RCC_OscConfig+0x1f2>
 8000d0c:	4b4b      	ldr	r3, [pc, #300]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a4a      	ldr	r2, [pc, #296]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a47      	ldr	r2, [pc, #284]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	e00b      	b.n	8000d3e <HAL_RCC_OscConfig+0x20a>
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a44      	ldr	r2, [pc, #272]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a41      	ldr	r2, [pc, #260]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d04f      	beq.n	8000de8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d48:	f7ff fbf2 	bl	8000530 <HAL_GetTick>
 8000d4c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d50:	e00a      	b.n	8000d68 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d52:	f7ff fbed 	bl	8000530 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	d902      	bls.n	8000d68 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	f000 bdcd 	b.w	8001902 <HAL_RCC_OscConfig+0xdce>
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 8000d7c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d102      	bne.n	8000d9a <HAL_RCC_OscConfig+0x266>
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	e00b      	b.n	8000db2 <HAL_RCC_OscConfig+0x27e>
 8000d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000dba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000dbe:	fa92 f2a2 	rbit	r2, r2
 8000dc2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8000dc6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000dca:	fab2 f282 	clz	r2, r2
 8000dce:	b252      	sxtb	r2, r2
 8000dd0:	f042 0220 	orr.w	r2, r2, #32
 8000dd4:	b252      	sxtb	r2, r2
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	f002 021f 	and.w	r2, r2, #31
 8000ddc:	40d3      	lsrs	r3, r2
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0b5      	beq.n	8000d52 <HAL_RCC_OscConfig+0x21e>
 8000de6:	e053      	b.n	8000e90 <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fba2 	bl	8000530 <HAL_GetTick>
 8000dec:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df0:	e00a      	b.n	8000e08 <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df2:	f7ff fb9d 	bl	8000530 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d902      	bls.n	8000e08 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	f000 bd7d 	b.w	8001902 <HAL_RCC_OscConfig+0xdce>
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e10:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8000e1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d105      	bne.n	8000e40 <HAL_RCC_OscConfig+0x30c>
 8000e34:	4b01      	ldr	r3, [pc, #4]	; (8000e3c <HAL_RCC_OscConfig+0x308>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	e00e      	b.n	8000e58 <HAL_RCC_OscConfig+0x324>
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000e54:	4bce      	ldr	r3, [pc, #824]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e5c:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8000e60:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000e64:	fa92 f2a2 	rbit	r2, r2
 8000e68:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 8000e6c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	b252      	sxtb	r2, r2
 8000e76:	f042 0220 	orr.w	r2, r2, #32
 8000e7a:	b252      	sxtb	r2, r2
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f002 021f 	and.w	r2, r2, #31
 8000e82:	40d3      	lsrs	r3, r2
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1b2      	bne.n	8000df2 <HAL_RCC_OscConfig+0x2be>
 8000e8c:	e000      	b.n	8000e90 <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8151 	beq.w	8001142 <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea0:	4bbb      	ldr	r3, [pc, #748]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eac:	4bb8      	ldr	r3, [pc, #736]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d163      	bne.n	8000f80 <HAL_RCC_OscConfig+0x44c>
 8000eb8:	4bb5      	ldr	r3, [pc, #724]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d15d      	bne.n	8000f80 <HAL_RCC_OscConfig+0x44c>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8000ed6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	fab3 f383 	clz	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	095b      	lsrs	r3, r3, #5
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d102      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x3c0>
 8000eee:	4ba8      	ldr	r3, [pc, #672]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	e00a      	b.n	8000f0a <HAL_RCC_OscConfig+0x3d6>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f06:	4ba2      	ldr	r3, [pc, #648]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000f10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f14:	fa92 f2a2 	rbit	r2, r2
 8000f18:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8000f1c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000f20:	fab2 f282 	clz	r2, r2
 8000f24:	b252      	sxtb	r2, r2
 8000f26:	f042 0220 	orr.w	r2, r2, #32
 8000f2a:	b252      	sxtb	r2, r2
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	f002 021f 	and.w	r2, r2, #31
 8000f32:	40d3      	lsrs	r3, r2
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <HAL_RCC_OscConfig+0x418>
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d002      	beq.n	8000f4c <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f000 bcdb 	b.w	8001902 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b90      	ldr	r3, [pc, #576]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6959      	ldr	r1, [r3, #20]
 8000f5a:	23f8      	movs	r3, #248	; 0xf8
 8000f5c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8000f6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000f70:	fab3 f383 	clz	r3, r3
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	4985      	ldr	r1, [pc, #532]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7e:	e0e0      	b.n	8001142 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d07a      	beq.n	8001080 <HAL_RCC_OscConfig+0x54c>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8000f9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000faa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fabc 	bl	8000530 <HAL_GetTick>
 8000fb8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fab7 	bl	8000530 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d902      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f000 bc97 	b.w	8001902 <HAL_RCC_OscConfig+0xdce>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8000fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	095b      	lsrs	r3, r3, #5
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x4d0>
 8000ffe:	4b64      	ldr	r3, [pc, #400]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	e00a      	b.n	800101a <HAL_RCC_OscConfig+0x4e6>
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001016:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	2202      	movs	r2, #2
 800101c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001020:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 800102c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001030:	fab2 f282 	clz	r2, r2
 8001034:	b252      	sxtb	r2, r2
 8001036:	f042 0220 	orr.w	r2, r2, #32
 800103a:	b252      	sxtb	r2, r2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f002 021f 	and.w	r2, r2, #31
 8001042:	40d3      	lsrs	r3, r2
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0b8      	beq.n	8000fbe <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b50      	ldr	r3, [pc, #320]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6959      	ldr	r1, [r3, #20]
 800105a:	23f8      	movs	r3, #248	; 0xf8
 800105c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 800106c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	4945      	ldr	r1, [pc, #276]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
 800107e:	e060      	b.n	8001142 <HAL_RCC_OscConfig+0x60e>
 8001080:	2301      	movs	r3, #1
 8001082:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8001092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80010a0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80010a4:	461a      	mov	r2, r3
 80010a6:	2300      	movs	r3, #0
 80010a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010aa:	f7ff fa41 	bl	8000530 <HAL_GetTick>
 80010ae:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	e00a      	b.n	80010ca <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fa3c 	bl	8000530 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d902      	bls.n	80010ca <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	f000 bc1c 	b.w	8001902 <HAL_RCC_OscConfig+0xdce>
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 80010dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e0:	fab3 f383 	clz	r3, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d102      	bne.n	80010fa <HAL_RCC_OscConfig+0x5c6>
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x5dc>
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_RCC_OscConfig+0x65c>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2202      	movs	r2, #2
 8001112:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001116:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800111a:	fa92 f2a2 	rbit	r2, r2
 800111e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 8001122:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b252      	sxtb	r2, r2
 800112c:	f042 0220 	orr.w	r2, r2, #32
 8001130:	b252      	sxtb	r2, r2
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f002 021f 	and.w	r2, r2, #31
 8001138:	40d3      	lsrs	r3, r2
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1b8      	bne.n	80010b4 <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b7 	beq.w	80012c0 <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d059      	beq.n	8001210 <HAL_RCC_OscConfig+0x6dc>
 800115c:	2301      	movs	r3, #1
 800115e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 800116e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_RCC_OscConfig+0x660>)
 800117c:	4413      	add	r3, r2
 800117e:	461a      	mov	r2, r3
 8001180:	2301      	movs	r3, #1
 8001182:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001184:	f7ff f9d4 	bl	8000530 <HAL_GetTick>
 8001188:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118c:	e00e      	b.n	80011ac <HAL_RCC_OscConfig+0x678>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff f9ca 	bl	8000530 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e3aa      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80011c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d0:	4bb0      	ldr	r3, [pc, #704]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80011d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80011da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 80011e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0c7      	beq.n	8001198 <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff f99b 	bl	8000544 <HAL_Delay>
 800120e:	e057      	b.n	80012c0 <HAL_RCC_OscConfig+0x78c>
 8001210:	2301      	movs	r3, #1
 8001212:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8001222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	461a      	mov	r2, r3
 800122e:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <HAL_RCC_OscConfig+0x964>)
 8001230:	4413      	add	r3, r2
 8001232:	461a      	mov	r2, r3
 8001234:	2300      	movs	r3, #0
 8001236:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff f97a 	bl	8000530 <HAL_GetTick>
 800123c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	e009      	b.n	8001256 <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001242:	f7ff f975 	bl	8000530 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e355      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001268:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800126c:	2202      	movs	r2, #2
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	fa93 f2a3 	rbit	r2, r3
 800127a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800127e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	4b84      	ldr	r3, [pc, #528]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001284:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001288:	2102      	movs	r1, #2
 800128a:	6019      	str	r1, [r3, #0]
 800128c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f1a3 	rbit	r1, r3
 8001296:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800129a:	6019      	str	r1, [r3, #0]
  return(result);
 800129c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1c0      	bne.n	8001242 <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8188 	beq.w	80015e0 <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012da:	61d3      	str	r3, [r2, #28]
 80012dc:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f0:	4b6a      	ldr	r3, [pc, #424]	; (800149c <HAL_RCC_OscConfig+0x968>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a69      	ldr	r2, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x968>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012fc:	f7ff f918 	bl	8000530 <HAL_GetTick>
 8001300:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001304:	e009      	b.n	800131a <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff f913 	bl	8000530 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e2f3      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_RCC_OscConfig+0x968>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ef      	beq.n	8001306 <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4a5a      	ldr	r2, [pc, #360]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6213      	str	r3, [r2, #32]
 8001332:	4b58      	ldr	r3, [pc, #352]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a57      	ldr	r2, [pc, #348]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800133e:	f7ff f8f7 	bl	8000530 <HAL_GetTick>
 8001342:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001348:	f7ff f8f2 	bl	8000530 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e2d0      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 8001360:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fa93 f2a3 	rbit	r2, r3
 8001372:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800137c:	2202      	movs	r2, #2
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	fa93 f2a3 	rbit	r2, r3
 800138a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138e:	601a      	str	r2, [r3, #0]
  return(result);
 8001390:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001394:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d102      	bne.n	80013b0 <HAL_RCC_OscConfig+0x87c>
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	e001      	b.n	80013b4 <HAL_RCC_OscConfig+0x880>
 80013b0:	4b38      	ldr	r3, [pc, #224]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80013b8:	2102      	movs	r1, #2
 80013ba:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	fa92 f1a2 	rbit	r1, r2
 80013c6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80013ca:	6011      	str	r1, [r2, #0]
  return(result);
 80013cc:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	fab2 f282 	clz	r2, r2
 80013d6:	b252      	sxtb	r2, r2
 80013d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013dc:	b252      	sxtb	r2, r2
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	f002 021f 	and.w	r2, r2, #31
 80013e4:	40d3      	lsrs	r3, r2
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ac      	bne.n	8001348 <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x8d2>
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a25      	ldr	r2, [pc, #148]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	e02f      	b.n	8001466 <HAL_RCC_OscConfig+0x932>
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10c      	bne.n	800142a <HAL_RCC_OscConfig+0x8f6>
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	6213      	str	r3, [r2, #32]
 8001428:	e01d      	b.n	8001466 <HAL_RCC_OscConfig+0x932>
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d10c      	bne.n	800144e <HAL_RCC_OscConfig+0x91a>
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4a16      	ldr	r2, [pc, #88]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6213      	str	r3, [r2, #32]
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6213      	str	r3, [r2, #32]
 800144c:	e00b      	b.n	8001466 <HAL_RCC_OscConfig+0x932>
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_RCC_OscConfig+0x960>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d05f      	beq.n	8001530 <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff f85e 	bl	8000530 <HAL_GetTick>
 8001474:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e012      	b.n	80014a0 <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff f859 	bl	8000530 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	; 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d908      	bls.n	80014a0 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e237      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	42420480 	.word	0x42420480
 800149c:	40007000 	.word	0x40007000
 80014a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014a4:	2202      	movs	r2, #2
 80014a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fa93 f2a3 	rbit	r2, r3
 80014b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f2a3 	rbit	r2, r3
 80014ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014ce:	601a      	str	r2, [r3, #0]
  return(result);
 80014d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0x9bc>
 80014ea:	4bb2      	ldr	r3, [pc, #712]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	e001      	b.n	80014f4 <HAL_RCC_OscConfig+0x9c0>
 80014f0:	4bb0      	ldr	r3, [pc, #704]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014f8:	2102      	movs	r1, #2
 80014fa:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	fa92 f1a2 	rbit	r1, r2
 8001506:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800150a:	6011      	str	r1, [r2, #0]
  return(result);
 800150c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	fab2 f282 	clz	r2, r2
 8001516:	b252      	sxtb	r2, r2
 8001518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800151c:	b252      	sxtb	r2, r2
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f002 021f 	and.w	r2, r2, #31
 8001524:	40d3      	lsrs	r3, r2
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0a5      	beq.n	800147a <HAL_RCC_OscConfig+0x946>
 800152e:	e057      	b.n	80015e0 <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7fe fffe 	bl	8000530 <HAL_GetTick>
 8001534:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7fe fff9 	bl	8000530 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1d7      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 8001552:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f2a3 	rbit	r2, r3
 800157c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001580:	601a      	str	r2, [r3, #0]
  return(result);
 8001582:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001586:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d102      	bne.n	80015a2 <HAL_RCC_OscConfig+0xa6e>
 800159c:	4b85      	ldr	r3, [pc, #532]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	e001      	b.n	80015a6 <HAL_RCC_OscConfig+0xa72>
 80015a2:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80015aa:	2102      	movs	r1, #2
 80015ac:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	fa92 f1a2 	rbit	r1, r2
 80015b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80015bc:	6011      	str	r1, [r2, #0]
  return(result);
 80015be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	fab2 f282 	clz	r2, r2
 80015c8:	b252      	sxtb	r2, r2
 80015ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015ce:	b252      	sxtb	r2, r2
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	f002 021f 	and.w	r2, r2, #31
 80015d6:	40d3      	lsrs	r3, r2
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ac      	bne.n	800153a <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 818a 	beq.w	8001900 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ec:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	f000 8181 	beq.w	80018fc <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2b02      	cmp	r3, #2
 8001602:	f040 8107 	bne.w	8001814 <HAL_RCC_OscConfig+0xce0>
 8001606:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800160a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800160e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800161e:	601a      	str	r2, [r3, #0]
  return(result);
 8001620:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001624:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001630:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001634:	461a      	mov	r2, r3
 8001636:	2300      	movs	r3, #0
 8001638:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7fe ff79 	bl	8000530 <HAL_GetTick>
 800163e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001642:	e009      	b.n	8001658 <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7fe ff74 	bl	8000530 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e154      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 8001658:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800165c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fa93 f2a3 	rbit	r2, r3
 800166c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001670:	601a      	str	r2, [r3, #0]
  return(result);
 8001672:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001676:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <HAL_RCC_OscConfig+0xb5e>
 800168c:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	e00e      	b.n	80016b0 <HAL_RCC_OscConfig+0xb7c>
 8001692:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800169a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016b8:	6011      	str	r1, [r2, #0]
 80016ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	fa92 f1a2 	rbit	r1, r2
 80016c4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80016c8:	6011      	str	r1, [r2, #0]
  return(result);
 80016ca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	fab2 f282 	clz	r2, r2
 80016d4:	b252      	sxtb	r2, r2
 80016d6:	f042 0220 	orr.w	r2, r2, #32
 80016da:	b252      	sxtb	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f002 021f 	and.w	r2, r2, #31
 80016e2:	40d3      	lsrs	r3, r2
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ab      	bne.n	8001644 <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f6:	d109      	bne.n	800170c <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	492b      	ldr	r1, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6a19      	ldr	r1, [r3, #32]
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	430b      	orrs	r3, r1
 8001722:	4924      	ldr	r1, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
 8001728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800172c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001740:	601a      	str	r2, [r3, #0]
  return(result);
 8001742:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001746:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001752:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001756:	461a      	mov	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7fe fee8 	bl	8000530 <HAL_GetTick>
 8001760:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7fe fee3 	bl	8000530 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0c3      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 800177a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800177e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001792:	601a      	str	r2, [r3, #0]
  return(result);
 8001794:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001798:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d104      	bne.n	80017b8 <HAL_RCC_OscConfig+0xc84>
 80017ae:	4b01      	ldr	r3, [pc, #4]	; (80017b4 <HAL_RCC_OscConfig+0xc80>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e010      	b.n	80017d6 <HAL_RCC_OscConfig+0xca2>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_RCC_OscConfig+0xdd8>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017de:	6011      	str	r1, [r2, #0]
 80017e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	fa92 f1a2 	rbit	r1, r2
 80017ea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80017ee:	6011      	str	r1, [r2, #0]
  return(result);
 80017f0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	fab2 f282 	clz	r2, r2
 80017fa:	b252      	sxtb	r2, r2
 80017fc:	f042 0220 	orr.w	r2, r2, #32
 8001800:	b252      	sxtb	r2, r2
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f002 021f 	and.w	r2, r2, #31
 8001808:	40d3      	lsrs	r3, r2
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0a9      	beq.n	8001766 <HAL_RCC_OscConfig+0xc32>
 8001812:	e075      	b.n	8001900 <HAL_RCC_OscConfig+0xdcc>
 8001814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800181c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182c:	601a      	str	r2, [r3, #0]
  return(result);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800183e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001842:	461a      	mov	r2, r3
 8001844:	2300      	movs	r3, #0
 8001846:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7fe fe72 	bl	8000530 <HAL_GetTick>
 800184c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	e009      	b.n	8001866 <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7fe fe6d 	bl	8000530 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e04d      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800186e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f107 0320 	add.w	r3, r7, #32
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	601a      	str	r2, [r3, #0]
  return(result);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_OscConfig+0xd6c>
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_RCC_OscConfig+0xdd8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	e00e      	b.n	80018be <HAL_RCC_OscConfig+0xd8a>
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_RCC_OscConfig+0xdd8>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f107 0210 	add.w	r2, r7, #16
 80018c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018c6:	6011      	str	r1, [r2, #0]
 80018c8:	f107 0210 	add.w	r2, r7, #16
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	fa92 f1a2 	rbit	r1, r2
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	6011      	str	r1, [r2, #0]
  return(result);
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b252      	sxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b252      	sxtb	r2, r2
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f002 021f 	and.w	r2, r2, #31
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ab      	bne.n	8001852 <HAL_RCC_OscConfig+0xd1e>
 80018fa:	e001      	b.n	8001900 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0a8      	sub	sp, #160	; 0xa0
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001920:	4bb0      	ldr	r3, [pc, #704]	; (8001be4 <HAL_RCC_ClockConfig+0x2d4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	f240 812b 	bls.w	8001b86 <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001930:	4bac      	ldr	r3, [pc, #688]	; (8001be4 <HAL_RCC_ClockConfig+0x2d4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 0207 	bic.w	r2, r3, #7
 8001938:	49aa      	ldr	r1, [pc, #680]	; (8001be4 <HAL_RCC_ClockConfig+0x2d4>)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001940:	4ba8      	ldr	r3, [pc, #672]	; (8001be4 <HAL_RCC_ClockConfig+0x2d4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e25d      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195e:	4ba2      	ldr	r3, [pc, #648]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	499f      	ldr	r1, [pc, #636]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8225 	beq.w	8001dc8 <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d140      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
 8001986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 800199a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xa8>
 80019b2:	4b8d      	ldr	r3, [pc, #564]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_ClockConfig+0xc0>
 80019b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80019cc:	4b86      	ldr	r3, [pc, #536]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019d4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80019d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80019dc:	fa92 f2a2 	rbit	r2, r2
 80019e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 80019e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80019e8:	fab2 f282 	clz	r2, r2
 80019ec:	b252      	sxtb	r2, r2
 80019ee:	f042 0220 	orr.w	r2, r2, #32
 80019f2:	b252      	sxtb	r2, r2
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	40d3      	lsrs	r3, r2
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d170      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e202      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d137      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x170>
 8001a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x12e>
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_ClockConfig+0x140>
 8001a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a42:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	677b      	str	r3, [r7, #116]	; 0x74
 8001a4c:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a54:	673a      	str	r2, [r7, #112]	; 0x70
 8001a56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a58:	fa92 f2a2 	rbit	r2, r2
 8001a5c:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8001a5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b252      	sxtb	r2, r2
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	b252      	sxtb	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	40d3      	lsrs	r3, r2
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d134      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e1c6      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
 8001a80:	2302      	movs	r3, #2
 8001a82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x198>
 8001aa2:	4b51      	ldr	r3, [pc, #324]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1a8>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2202      	movs	r2, #2
 8001aba:	65ba      	str	r2, [r7, #88]	; 0x58
 8001abc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ac6:	fab2 f282 	clz	r2, r2
 8001aca:	b252      	sxtb	r2, r2
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	b252      	sxtb	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	40d3      	lsrs	r3, r2
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e193      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	493d      	ldr	r1, [pc, #244]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7fe fd1a 	bl	8000530 <HAL_GetTick>
 8001afc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d113      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b08:	e00b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f7fe fd11 	bl	8000530 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e175      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d1ed      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x1fa>
 8001b2e:	e14b      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d11f      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7fe fcf9 	bl	8000530 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e15d      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d1ed      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x22a>
 8001b5e:	e133      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7fe fce6 	bl	8000530 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e14a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ed      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x250>
 8001b84:	e120      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4912      	ldr	r1, [pc, #72]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80fa 	beq.w	8001da6 <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d139      	bne.n	8001c2e <HAL_RCC_ClockConfig+0x31e>
 8001bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_ClockConfig+0x2dc>
 8001bde:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <HAL_RCC_ClockConfig+0x2d8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e00c      	b.n	8001bfe <HAL_RCC_ClockConfig+0x2ee>
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8001bfa:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c02:	643a      	str	r2, [r7, #64]	; 0x40
 8001c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 8001c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b252      	sxtb	r2, r2
 8001c14:	f042 0220 	orr.w	r2, r2, #32
 8001c18:	b252      	sxtb	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	40d3      	lsrs	r3, r2
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d16e      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0ef      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d135      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x392>
 8001c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x350>
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_ClockConfig+0x362>
 8001c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6e:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c76:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c7a:	fa92 f2a2 	rbit	r2, r2
 8001c7e:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	fab2 f282 	clz	r2, r2
 8001c86:	b252      	sxtb	r2, r2
 8001c88:	f042 0220 	orr.w	r2, r2, #32
 8001c8c:	b252      	sxtb	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f002 021f 	and.w	r2, r2, #31
 8001c94:	40d3      	lsrs	r3, r2
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d134      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0b5      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	61fb      	str	r3, [r7, #28]
  return(result);
 8001cae:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_ClockConfig+0x3ba>
 8001cc4:	4b54      	ldr	r3, [pc, #336]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e007      	b.n	8001cda <HAL_RCC_ClockConfig+0x3ca>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2202      	movs	r2, #2
 8001cdc:	613a      	str	r2, [r7, #16]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	fa92 f2a2 	rbit	r2, r2
 8001ce4:	60fa      	str	r2, [r7, #12]
  return(result);
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	fab2 f282 	clz	r2, r2
 8001cec:	b252      	sxtb	r2, r2
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	b252      	sxtb	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	40d3      	lsrs	r3, r2
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e082      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 0203 	bic.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4940      	ldr	r1, [pc, #256]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fc09 	bl	8000530 <HAL_GetTick>
 8001d1e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d113      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7fe fc00 	bl	8000530 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e064      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d1ed      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x41c>
 8001d50:	e029      	b.n	8001da6 <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d11f      	bne.n	8001d9a <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7fe fbe8 	bl	8000530 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e04c      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d1ed      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x44c>
 8001d80:	e011      	b.n	8001da6 <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7fe fbd5 	bl	8000530 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e039      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ed      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCC_ClockConfig+0x50c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	491b      	ldr	r1, [pc, #108]	; (8001e1c <HAL_RCC_ClockConfig+0x50c>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x50c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e022      	b.n	8001e0e <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	490d      	ldr	r1, [pc, #52]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4905      	ldr	r1, [pc, #20]	; (8001e18 <HAL_RCC_ClockConfig+0x508>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7fe fb68 	bl	80004dc <HAL_InitTick>
  
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	37a0      	adds	r7, #160	; 0xa0
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40022000 	.word	0x40022000

08001e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b490      	push	{r4, r7}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_RCC_GetSysClockFreq+0xdc>)
 8001e28:	1d3c      	adds	r4, r7, #4
 8001e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001e30:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x40>
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x46>
 8001e5e:	e043      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e64:	e043      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e88:	4413      	add	r3, r2
 8001e8a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01e      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	617b      	str	r3, [r7, #20]
  return(result);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eca:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ed6:	e004      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xec>)
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ee6:	e002      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3738      	adds	r7, #56	; 0x38
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc90      	pop	{r4, r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	08001fc0 	.word	0x08001fc0
 8001f00:	08001fd0 	.word	0x08001fd0
 8001f04:	40021000 	.word	0x40021000
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	003d0900 	.word	0x003d0900

08001f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001f16:	f7ff ff83 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x44>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f24:	23f0      	movs	r3, #240	; 0xf0
 8001f26:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_RCC_GetHCLKFreq+0x48>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f42:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <HAL_RCC_GetHCLKFreq+0x4c>)
 8001f44:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetHCLKFreq+0x4c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08001fd4 	.word	0x08001fd4
 8001f5c:	20000000 	.word	0x20000000

08001f60 <__libc_init_array>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	2500      	movs	r5, #0
 8001f64:	4e0c      	ldr	r6, [pc, #48]	; (8001f98 <__libc_init_array+0x38>)
 8001f66:	4c0d      	ldr	r4, [pc, #52]	; (8001f9c <__libc_init_array+0x3c>)
 8001f68:	1ba4      	subs	r4, r4, r6
 8001f6a:	10a4      	asrs	r4, r4, #2
 8001f6c:	42a5      	cmp	r5, r4
 8001f6e:	d109      	bne.n	8001f84 <__libc_init_array+0x24>
 8001f70:	f000 f81a 	bl	8001fa8 <_init>
 8001f74:	2500      	movs	r5, #0
 8001f76:	4e0a      	ldr	r6, [pc, #40]	; (8001fa0 <__libc_init_array+0x40>)
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <__libc_init_array+0x44>)
 8001f7a:	1ba4      	subs	r4, r4, r6
 8001f7c:	10a4      	asrs	r4, r4, #2
 8001f7e:	42a5      	cmp	r5, r4
 8001f80:	d105      	bne.n	8001f8e <__libc_init_array+0x2e>
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f88:	4798      	blx	r3
 8001f8a:	3501      	adds	r5, #1
 8001f8c:	e7ee      	b.n	8001f6c <__libc_init_array+0xc>
 8001f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f92:	4798      	blx	r3
 8001f94:	3501      	adds	r5, #1
 8001f96:	e7f2      	b.n	8001f7e <__libc_init_array+0x1e>
 8001f98:	08001fe4 	.word	0x08001fe4
 8001f9c:	08001fe4 	.word	0x08001fe4
 8001fa0:	08001fe4 	.word	0x08001fe4
 8001fa4:	08001fe8 	.word	0x08001fe8

08001fa8 <_init>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr

08001fb4 <_fini>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr
