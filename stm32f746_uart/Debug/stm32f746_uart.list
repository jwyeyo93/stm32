
stm32f746_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013184  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08013354  08013354  00023354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013474  08013474  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08013474  08013474  00023474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801347c  0801347c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801347c  0801347c  0002347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013480  08013480  00023480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08013484  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000972c  20000094  08013518  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200097c0  08013518  000397c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047d08  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009765  00000000  00000000  00077dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003428  00000000  00000000  00081538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002f78  00000000  00000000  00084960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ac42  00000000  00000000  000878d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003ab4f  00000000  00000000  000c251a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012d274  00000000  00000000  000fd069  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022a2dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dd1c  00000000  00000000  0022a358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801333c 	.word	0x0801333c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0801333c 	.word	0x0801333c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	463b      	mov	r3, r7
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <MX_ADC3_Init+0x9c>)
 8000526:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_ADC3_Init+0x98>)
 800052a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800052e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_ADC3_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_ADC3_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_ADC3_Init+0xa0>)
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_ADC3_Init+0x98>)
 800055e:	2201      	movs	r2, #1
 8000560:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_ADC3_Init+0x98>)
 800056c:	2201      	movs	r2, #1
 800056e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000572:	f002 fca5 	bl	8002ec0 <HAL_ADC_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800057c:	f001 f986 	bl	800188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000580:	2304      	movs	r3, #4
 8000582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000584:	2301      	movs	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_ADC3_Init+0x98>)
 8000592:	f002 fcd9 	bl	8002f48 <HAL_ADC_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800059c:	f001 f976 	bl	800188c <Error_Handler>
  }

}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20008480 	.word	0x20008480
 80005ac:	40012200 	.word	0x40012200
 80005b0:	0f000001 	.word	0x0f000001

080005b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <HAL_ADC_MspInit+0xa4>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d13c      	bne.n	8000650 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005da:	4a20      	ldr	r2, [pc, #128]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005e0:	6453      	str	r3, [r2, #68]	; 0x44
 80005e2:	4b1e      	ldr	r3, [pc, #120]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a1a      	ldr	r2, [pc, #104]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005f4:	f043 0320 	orr.w	r3, r3, #32
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_ADC_MspInit+0xa8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_ADC_MspInit+0xa8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_ADC_MspInit+0xa8>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_ADC_MspInit+0xa8>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800061e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000622:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000624:	2303      	movs	r3, #3
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_ADC_MspInit+0xac>)
 8000634:	f004 f804 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063c:	2303      	movs	r3, #3
 800063e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <HAL_ADC_MspInit+0xb0>)
 800064c:	f003 fff8 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40012200 	.word	0x40012200
 800065c:	40023800 	.word	0x40023800
 8000660:	40021400 	.word	0x40021400
 8000664:	40020000 	.word	0x40020000

08000668 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_CRC_Init+0x3c>)
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <MX_CRC_Init+0x40>)
 8000670:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_CRC_Init+0x3c>)
 800067a:	2200      	movs	r2, #0
 800067c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_CRC_Init+0x3c>)
 800068c:	2201      	movs	r2, #1
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_CRC_Init+0x3c>)
 8000692:	f002 ff7f 	bl	8003594 <HAL_CRC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800069c:	f001 f8f6 	bl	800188c <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200084c8 	.word	0x200084c8
 80006a8:	40023000 	.word	0x40023000

080006ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <HAL_CRC_MspInit+0x38>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10b      	bne.n	80006d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_CRC_MspInit+0x3c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <HAL_CRC_MspInit+0x3c>)
 80006c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <HAL_CRC_MspInit+0x3c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40023000 	.word	0x40023000
 80006e8:	40023800 	.word	0x40023800

080006ec <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_DCMI_Init+0x60>)
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_DCMI_Init+0x64>)
 80006f4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_DCMI_Init+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_DCMI_Init+0x60>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_DCMI_Init+0x60>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_DCMI_Init+0x60>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_DCMI_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_DCMI_Init+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_DCMI_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_DCMI_Init+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_DCMI_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_DCMI_Init+0x60>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_DCMI_Init+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_DCMI_Init+0x60>)
 800073a:	f003 f815 	bl	8003768 <HAL_DCMI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000744:	f001 f8a2 	bl	800188c <Error_Handler>
  }

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200084ec 	.word	0x200084ec
 8000750:	50050000 	.word	0x50050000

08000754 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a50      	ldr	r2, [pc, #320]	; (80008b4 <HAL_DCMI_MspInit+0x160>)
 8000772:	4293      	cmp	r3, r2
 8000774:	f040 809a 	bne.w	80008ac <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000778:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 800077a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077c:	4a4e      	ldr	r2, [pc, #312]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6353      	str	r3, [r2, #52]	; 0x34
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 8000786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	623b      	str	r3, [r7, #32]
 800078e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000790:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a48      	ldr	r2, [pc, #288]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
 800079c:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a8:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a42      	ldr	r2, [pc, #264]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c0:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d8:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6313      	str	r3, [r2, #48]	; 0x30
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <HAL_DCMI_MspInit+0x164>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000808:	2360      	movs	r3, #96	; 0x60
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000818:	230d      	movs	r3, #13
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4826      	ldr	r0, [pc, #152]	; (80008bc <HAL_DCMI_MspInit+0x168>)
 8000824:	f003 ff0c 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000828:	2308      	movs	r3, #8
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000838:	230d      	movs	r3, #13
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	481f      	ldr	r0, [pc, #124]	; (80008c0 <HAL_DCMI_MspInit+0x16c>)
 8000844:	f003 fefc 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800085a:	230d      	movs	r3, #13
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <HAL_DCMI_MspInit+0x170>)
 8000866:	f003 feeb 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800086a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800087c:	230d      	movs	r3, #13
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <HAL_DCMI_MspInit+0x174>)
 8000888:	f003 feda 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800088c:	2350      	movs	r3, #80	; 0x50
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800089c:	230d      	movs	r3, #13
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4809      	ldr	r0, [pc, #36]	; (80008cc <HAL_DCMI_MspInit+0x178>)
 80008a8:	f003 feca 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	50050000 	.word	0x50050000
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	40021800 	.word	0x40021800
 80008c8:	40021c00 	.word	0x40021c00
 80008cc:	40020000 	.word	0x40020000

080008d0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <MX_DMA2D_Init+0x60>)
 80008d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_DMA2D_Init+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_DMA2D_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_DMA2D_Init+0x5c>)
 8000906:	f003 f843 	bl	8003990 <HAL_DMA2D_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000910:	f000 ffbc 	bl	800188c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000914:	2101      	movs	r1, #1
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_DMA2D_Init+0x5c>)
 8000918:	f003 f994 	bl	8003c44 <HAL_DMA2D_ConfigLayer>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000922:	f000 ffb3 	bl	800188c <Error_Handler>
  }

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000853c 	.word	0x2000853c
 8000930:	4002b000 	.word	0x4002b000

08000934 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <HAL_DMA2D_MspInit+0x44>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d113      	bne.n	800096e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_DMA2D_MspInit+0x48>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <HAL_DMA2D_MspInit+0x48>)
 800094c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_DMA2D_MspInit+0x48>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	205a      	movs	r0, #90	; 0x5a
 8000964:	f002 fdec 	bl	8003540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000968:	205a      	movs	r0, #90	; 0x5a
 800096a:	f002 fe05 	bl	8003578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	4002b000 	.word	0x4002b000
 800097c:	40023800 	.word	0x40023800

08000980 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_ETH_Init+0x78>)
 8000986:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <MX_ETH_Init+0x7c>)
 8000988:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_ETH_Init+0x78>)
 800098c:	2201      	movs	r2, #1
 800098e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_ETH_Init+0x78>)
 8000992:	2200      	movs	r2, #0
 8000994:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ETH_Init+0x78>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_ETH_Init+0x78>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_ETH_Init+0x78>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	3302      	adds	r3, #2
 80009ae:	22e1      	movs	r2, #225	; 0xe1
 80009b0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_ETH_Init+0x78>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	3303      	adds	r3, #3
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_ETH_Init+0x78>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_ETH_Init+0x78>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	3305      	adds	r3, #5
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_ETH_Init+0x78>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_ETH_Init+0x78>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_ETH_Init+0x78>)
 80009de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009e2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_ETH_Init+0x78>)
 80009e6:	f003 f9bf 	bl	8003d68 <HAL_ETH_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80009f0:	f000 ff4c 	bl	800188c <Error_Handler>
  }

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000857c 	.word	0x2000857c
 80009fc:	40028000 	.word	0x40028000

08000a00 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_ETH_MspInit+0x11c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d178      	bne.n	8000b14 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3e      	ldr	r2, [pc, #248]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a36:	623b      	str	r3, [r7, #32]
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a38      	ldr	r2, [pc, #224]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <HAL_ETH_MspInit+0x120>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000ab2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac4:	230b      	movs	r3, #11
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <HAL_ETH_MspInit+0x124>)
 8000ad0:	f003 fdb6 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ad4:	2332      	movs	r3, #50	; 0x32
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <HAL_ETH_MspInit+0x128>)
 8000af0:	f003 fda6 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000af4:	2386      	movs	r3, #134	; 0x86
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4807      	ldr	r0, [pc, #28]	; (8000b2c <HAL_ETH_MspInit+0x12c>)
 8000b10:	f003 fd96 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000b14:	bf00      	nop
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40028000 	.word	0x40028000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <MX_FMC_Init+0x9c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b62:	2210      	movs	r2, #16
 8000b64:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b6e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b72:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_FMC_Init+0x98>)
 8000bb2:	f009 f965 	bl	8009e80 <HAL_SDRAM_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bbc:	f000 fe66 	bl	800188c <Error_Handler>
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200085c4 	.word	0x200085c4
 8000bcc:	a0000140 	.word	0xa0000140

08000bd0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <HAL_FMC_MspInit+0x100>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d16d      	bne.n	8000cc8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_FMC_MspInit+0x100>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <HAL_FMC_MspInit+0x104>)
 8000bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf6:	4a37      	ldr	r2, [pc, #220]	; (8000cd4 <HAL_FMC_MspInit+0x104>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6393      	str	r3, [r2, #56]	; 0x38
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <HAL_FMC_MspInit+0x104>)
 8000c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c0a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c0e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <HAL_FMC_MspInit+0x108>)
 8000c26:	f003 fd0b 	bl	8004640 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c2a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c2e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4825      	ldr	r0, [pc, #148]	; (8000cdc <HAL_FMC_MspInit+0x10c>)
 8000c46:	f003 fcfb 	bl	8004640 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c4a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c4e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <HAL_FMC_MspInit+0x110>)
 8000c66:	f003 fceb 	bl	8004640 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c6a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c6e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <HAL_FMC_MspInit+0x114>)
 8000c86:	f003 fcdb 	bl	8004640 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c8a:	2328      	movs	r3, #40	; 0x28
 8000c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <HAL_FMC_MspInit+0x118>)
 8000ca4:	f003 fccc 	bl	8004640 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <HAL_FMC_MspInit+0x11c>)
 8000cc2:	f003 fcbd 	bl	8004640 <HAL_GPIO_Init>
 8000cc6:	e000      	b.n	8000cca <HAL_FMC_MspInit+0xfa>
    return;
 8000cc8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000b0 	.word	0x200000b0
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40021800 	.word	0x40021800
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40021400 	.word	0x40021400
 8000ce8:	40021c00 	.word	0x40021c00
 8000cec:	40020800 	.word	0x40020800

08000cf0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000cf8:	f7ff ff6a 	bl	8000bd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <vApplicationGetIdleTaskMemory+0x30>)
 8000d4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000b4 	.word	0x200000b4
 8000d68:	2000010c 	.word	0x2000010c

08000d6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_FREERTOS_Init+0x30>)
 8000d74:	1d3c      	adds	r4, r7, #4
 8000d76:	461d      	mov	r5, r3
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00f f899 	bl	800fec0 <osThreadCreate>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <MX_FREERTOS_Init+0x34>)
 8000d92:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9c:	08013360 	.word	0x08013360
 8000da0:	200085f8 	.word	0x200085f8

08000da4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000dac:	f011 fb1a 	bl	80123e4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f00f f8d1 	bl	800ff58 <osDelay>
 8000db6:	e7fb      	b.n	8000db0 <StartDefaultTask+0xc>

08000db8 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4baf      	ldr	r3, [pc, #700]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4aae      	ldr	r2, [pc, #696]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4bac      	ldr	r3, [pc, #688]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de6:	4ba9      	ldr	r3, [pc, #676]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4aa8      	ldr	r2, [pc, #672]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4ba6      	ldr	r3, [pc, #664]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4ba3      	ldr	r3, [pc, #652]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4aa2      	ldr	r2, [pc, #648]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4ba0      	ldr	r3, [pc, #640]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b9d      	ldr	r3, [pc, #628]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a9c      	ldr	r2, [pc, #624]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b9a      	ldr	r3, [pc, #616]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b97      	ldr	r3, [pc, #604]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a96      	ldr	r2, [pc, #600]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b94      	ldr	r3, [pc, #592]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b91      	ldr	r3, [pc, #580]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a90      	ldr	r2, [pc, #576]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b8e      	ldr	r3, [pc, #568]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a8a      	ldr	r2, [pc, #552]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b88      	ldr	r3, [pc, #544]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e76:	4b85      	ldr	r3, [pc, #532]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a84      	ldr	r2, [pc, #528]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b82      	ldr	r3, [pc, #520]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e8e:	4b7f      	ldr	r3, [pc, #508]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a7e      	ldr	r2, [pc, #504]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b7c      	ldr	r3, [pc, #496]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b79      	ldr	r3, [pc, #484]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a78      	ldr	r2, [pc, #480]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	4b73      	ldr	r3, [pc, #460]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a72      	ldr	r2, [pc, #456]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b70      	ldr	r3, [pc, #448]	; (800108c <MX_GPIO_Init+0x2d4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2120      	movs	r1, #32
 8000eda:	486d      	ldr	r0, [pc, #436]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000edc:	f003 fd72 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	210c      	movs	r1, #12
 8000ee4:	486b      	ldr	r0, [pc, #428]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000ee6:	f003 fd6d 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2108      	movs	r1, #8
 8000eee:	486a      	ldr	r0, [pc, #424]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000ef0:	f003 fd68 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efa:	4866      	ldr	r0, [pc, #408]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000efc:	f003 fd62 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	4865      	ldr	r0, [pc, #404]	; (800109c <MX_GPIO_Init+0x2e4>)
 8000f08:	f003 fd5c 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	21c8      	movs	r1, #200	; 0xc8
 8000f10:	4863      	ldr	r0, [pc, #396]	; (80010a0 <MX_GPIO_Init+0x2e8>)
 8000f12:	f003 fd57 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000f16:	2308      	movs	r3, #8
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	485e      	ldr	r0, [pc, #376]	; (80010a4 <MX_GPIO_Init+0x2ec>)
 8000f2a:	f003 fb89 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000f2e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f40:	230a      	movs	r3, #10
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4857      	ldr	r0, [pc, #348]	; (80010a8 <MX_GPIO_Init+0x2f0>)
 8000f4c:	f003 fb78 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4851      	ldr	r0, [pc, #324]	; (80010ac <MX_GPIO_Init+0x2f4>)
 8000f66:	f003 fb6b 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f6a:	2340      	movs	r3, #64	; 0x40
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f6e:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <MX_GPIO_Init+0x2f8>)
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4844      	ldr	r0, [pc, #272]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f7e:	f003 fb5f 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f82:	2320      	movs	r3, #32
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	4619      	mov	r1, r3
 8000f98:	483d      	ldr	r0, [pc, #244]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8000f9a:	f003 fb51 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000f9e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4837      	ldr	r0, [pc, #220]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8000fb8:	f003 fb42 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4838      	ldr	r0, [pc, #224]	; (80010b4 <MX_GPIO_Init+0x2fc>)
 8000fd2:	f003 fb35 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fea:	4619      	mov	r1, r3
 8000fec:	482a      	ldr	r0, [pc, #168]	; (8001098 <MX_GPIO_Init+0x2e0>)
 8000fee:	f003 fb27 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	4619      	mov	r1, r3
 8001004:	4822      	ldr	r0, [pc, #136]	; (8001090 <MX_GPIO_Init+0x2d8>)
 8001006:	f003 fb1b 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800100a:	f248 0304 	movw	r3, #32772	; 0x8004
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101c:	4619      	mov	r1, r3
 800101e:	481f      	ldr	r0, [pc, #124]	; (800109c <MX_GPIO_Init+0x2e4>)
 8001020:	f003 fb0e 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <MX_GPIO_Init+0x2e4>)
 800103e:	f003 faff 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_GPIO_Init+0x2f8>)
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <MX_GPIO_Init+0x2dc>)
 8001058:	f003 faf2 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800105c:	2310      	movs	r3, #16
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800106c:	230a      	movs	r3, #10
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <MX_GPIO_Init+0x2e4>)
 8001078:	f003 fae2 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800107c:	23c8      	movs	r3, #200	; 0xc8
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
 8001088:	e016      	b.n	80010b8 <MX_GPIO_Init+0x300>
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40022000 	.word	0x40022000
 8001098:	40022800 	.word	0x40022800
 800109c:	40021c00 	.word	0x40021c00
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40022400 	.word	0x40022400
 80010b0:	10120000 	.word	0x10120000
 80010b4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	4619      	mov	r1, r3
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <MX_GPIO_Init+0x370>)
 80010c4:	f003 fabc 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010c8:	2305      	movs	r3, #5
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010d8:	230a      	movs	r3, #10
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e0:	4619      	mov	r1, r3
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_GPIO_Init+0x374>)
 80010e4:	f003 faac 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010e8:	2304      	movs	r3, #4
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <MX_GPIO_Init+0x370>)
 80010fc:	f003 faa0 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001100:	2328      	movs	r3, #40	; 0x28
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001110:	230a      	movs	r3, #10
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_GPIO_Init+0x378>)
 800111c:	f003 fa90 	bl	8004640 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3740      	adds	r7, #64	; 0x40
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021800 	.word	0x40021800
 800112c:	40020800 	.word	0x40020800
 8001130:	40020000 	.word	0x40020000

08001134 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_I2C1_Init+0x74>)
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <MX_I2C1_Init+0x78>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <MX_I2C1_Init+0x7c>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_I2C1_Init+0x74>)
 800114c:	2201      	movs	r2, #1
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001170:	f005 f932 	bl	80063d8 <HAL_I2C_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117a:	f000 fb87 	bl	800188c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001182:	f005 f9b9 	bl	80064f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800118c:	f000 fb7e 	bl	800188c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_I2C1_Init+0x74>)
 8001194:	f005 f9fb 	bl	800658e <HAL_I2CEx_ConfigDigitalFilter>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800119e:	f000 fb75 	bl	800188c <Error_Handler>
  }

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20008648 	.word	0x20008648
 80011ac:	40005400 	.word	0x40005400
 80011b0:	00c0eaff 	.word	0x00c0eaff

080011b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_I2C3_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_I2C3_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_I2C3_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <MX_I2C3_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_I2C3_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_I2C3_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_I2C3_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_I2C3_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C3_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C3_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C3_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_I2C3_Init+0x74>)
 80011f0:	f005 f8f2 	bl	80063d8 <HAL_I2C_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f000 fb47 	bl	800188c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <MX_I2C3_Init+0x74>)
 8001202:	f005 f979 	bl	80064f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800120c:	f000 fb3e 	bl	800188c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_I2C3_Init+0x74>)
 8001214:	f005 f9bb 	bl	800658e <HAL_I2CEx_ConfigDigitalFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 fb35 	bl	800188c <Error_Handler>
  }

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200085fc 	.word	0x200085fc
 800122c:	40005c00 	.word	0x40005c00
 8001230:	00c0eaff 	.word	0x00c0eaff

08001234 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_I2C_MspInit+0xdc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d129      	bne.n	80012aa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800126e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001280:	2304      	movs	r3, #4
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4823      	ldr	r0, [pc, #140]	; (8001318 <HAL_I2C_MspInit+0xe4>)
 800128c:	f003 f9d8 	bl	8004640 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 8001296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012a8:	e02d      	b.n	8001306 <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C3)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_I2C_MspInit+0xe8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d128      	bne.n	8001306 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a16      	ldr	r2, [pc, #88]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d2:	2312      	movs	r3, #18
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012de:	2304      	movs	r3, #4
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <HAL_I2C_MspInit+0xec>)
 80012ea:	f003 f9a9 	bl	8004640 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_I2C_MspInit+0xe0>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	3730      	adds	r7, #48	; 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40005400 	.word	0x40005400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400
 800131c:	40005c00 	.word	0x40005c00
 8001320:	40021c00 	.word	0x40021c00

08001324 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09a      	sub	sp, #104	; 0x68
 8001328:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800132a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800132e:	2234      	movs	r2, #52	; 0x34
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f011 fb91 	bl	8012a5a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2234      	movs	r2, #52	; 0x34
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f011 fb8b 	bl	8012a5a <memset>

  hltdc.Instance = LTDC;
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <MX_LTDC_Init+0x164>)
 8001346:	4a51      	ldr	r2, [pc, #324]	; (800148c <MX_LTDC_Init+0x168>)
 8001348:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <MX_LTDC_Init+0x164>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001350:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <MX_LTDC_Init+0x164>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <MX_LTDC_Init+0x164>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800135c:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <MX_LTDC_Init+0x164>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <MX_LTDC_Init+0x164>)
 8001364:	2228      	movs	r2, #40	; 0x28
 8001366:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <MX_LTDC_Init+0x164>)
 800136a:	2209      	movs	r2, #9
 800136c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800136e:	4b46      	ldr	r3, [pc, #280]	; (8001488 <MX_LTDC_Init+0x164>)
 8001370:	2235      	movs	r2, #53	; 0x35
 8001372:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001374:	4b44      	ldr	r3, [pc, #272]	; (8001488 <MX_LTDC_Init+0x164>)
 8001376:	220b      	movs	r2, #11
 8001378:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800137a:	4b43      	ldr	r3, [pc, #268]	; (8001488 <MX_LTDC_Init+0x164>)
 800137c:	f240 2215 	movw	r2, #533	; 0x215
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_LTDC_Init+0x164>)
 8001384:	f240 121b 	movw	r2, #283	; 0x11b
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <MX_LTDC_Init+0x164>)
 800138c:	f240 2235 	movw	r2, #565	; 0x235
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <MX_LTDC_Init+0x164>)
 8001394:	f240 121d 	movw	r2, #285	; 0x11d
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <MX_LTDC_Init+0x164>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_LTDC_Init+0x164>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <MX_LTDC_Init+0x164>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013b2:	4835      	ldr	r0, [pc, #212]	; (8001488 <MX_LTDC_Init+0x164>)
 80013b4:	f005 f938 	bl	8006628 <HAL_LTDC_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80013be:	f000 fa65 	bl	800188c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 80013c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80013d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013d4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013d6:	2302      	movs	r3, #2
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013e8:	2307      	movs	r3, #7
 80013ea:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013f0:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80013f2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80013f8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	481b      	ldr	r0, [pc, #108]	; (8001488 <MX_LTDC_Init+0x164>)
 800141a:	f005 fa97 	bl	800694c <HAL_LTDC_ConfigLayer>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001424:	f000 fa32 	bl	800188c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001446:	2305      	movs	r3, #5
 8001448:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_LTDC_Init+0x164>)
 8001470:	f005 fa6c 	bl	800694c <HAL_LTDC_ConfigLayer>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800147a:	f000 fa07 	bl	800188c <Error_Handler>
  }

}
 800147e:	bf00      	nop
 8001480:	3768      	adds	r7, #104	; 0x68
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20008694 	.word	0x20008694
 800148c:	40016800 	.word	0x40016800

08001490 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	; 0x38
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_LTDC_MspInit+0x174>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	f040 80a3 	bne.w	80015fa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014b4:	4b54      	ldr	r3, [pc, #336]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	4a53      	ldr	r2, [pc, #332]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014be:	6453      	str	r3, [r2, #68]	; 0x44
 80014c0:	4b51      	ldr	r3, [pc, #324]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c8:	623b      	str	r3, [r7, #32]
 80014ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014cc:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6313      	str	r3, [r2, #48]	; 0x30
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a47      	ldr	r2, [pc, #284]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a41      	ldr	r2, [pc, #260]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001514:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151e:	6313      	str	r3, [r2, #48]	; 0x30
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a35      	ldr	r2, [pc, #212]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_LTDC_MspInit+0x178>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001544:	2310      	movs	r3, #16
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001554:	230e      	movs	r3, #14
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	482b      	ldr	r0, [pc, #172]	; (800160c <HAL_LTDC_MspInit+0x17c>)
 8001560:	f003 f86e 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001564:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001576:	230e      	movs	r3, #14
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4823      	ldr	r0, [pc, #140]	; (8001610 <HAL_LTDC_MspInit+0x180>)
 8001582:	f003 f85d 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001586:	23f7      	movs	r3, #247	; 0xf7
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001596:	230e      	movs	r3, #14
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <HAL_LTDC_MspInit+0x184>)
 80015a2:	f003 f84d 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80015a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015b8:	2309      	movs	r3, #9
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4815      	ldr	r0, [pc, #84]	; (8001618 <HAL_LTDC_MspInit+0x188>)
 80015c4:	f003 f83c 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80015c8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015da:	230e      	movs	r3, #14
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <HAL_LTDC_MspInit+0x18c>)
 80015e6:	f003 f82b 	bl	8004640 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2058      	movs	r0, #88	; 0x58
 80015f0:	f001 ffa6 	bl	8003540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015f4:	2058      	movs	r0, #88	; 0x58
 80015f6:	f001 ffbf 	bl	8003578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3738      	adds	r7, #56	; 0x38
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40016800 	.word	0x40016800
 8001608:	40023800 	.word	0x40023800
 800160c:	40021000 	.word	0x40021000
 8001610:	40022400 	.word	0x40022400
 8001614:	40022800 	.word	0x40022800
 8001618:	40021800 	.word	0x40021800
 800161c:	40022000 	.word	0x40022000

08001620 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	if(ch == '\n')
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b0a      	cmp	r3, #10
 800162c:	d106      	bne.n	800163c <__io_putchar+0x1c>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r", 1, 0xFFFF);
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	2201      	movs	r2, #1
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__io_putchar+0x34>)
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <__io_putchar+0x38>)
 8001638:	f009 fdee 	bl	800b218 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800163c:	1d39      	adds	r1, r7, #4
 800163e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001642:	2201      	movs	r2, #1
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <__io_putchar+0x38>)
 8001646:	f009 fde7 	bl	800b218 <HAL_UART_Transmit>

	return ch;
 800164a:	687b      	ldr	r3, [r7, #4]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	0801337c 	.word	0x0801337c
 8001658:	20008ba4 	.word	0x20008ba4

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f001 fbdf 	bl	8002e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f840 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f7ff fba6 	bl	8000db8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800166c:	f7fe ff50 	bl	8000510 <MX_ADC3_Init>
  MX_CRC_Init();
 8001670:	f7fe fffa 	bl	8000668 <MX_CRC_Init>
  MX_DCMI_Init();
 8001674:	f7ff f83a 	bl	80006ec <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001678:	f7ff f92a 	bl	80008d0 <MX_DMA2D_Init>
  MX_ETH_Init();
 800167c:	f7ff f980 	bl	8000980 <MX_ETH_Init>
  MX_FMC_Init();
 8001680:	f7ff fa56 	bl	8000b30 <MX_FMC_Init>
  MX_I2C1_Init();
 8001684:	f7ff fd56 	bl	8001134 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001688:	f7ff fd94 	bl	80011b4 <MX_I2C3_Init>
  MX_LTDC_Init();
 800168c:	f7ff fe4a 	bl	8001324 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001690:	f000 f904 	bl	800189c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001694:	f000 f9be 	bl	8001a14 <MX_RTC_Init>
  MX_SAI2_Init();
 8001698:	f000 fa7c 	bl	8001b94 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800169c:	f000 fb8c 	bl	8001db8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80016a0:	f000 fc0c 	bl	8001ebc <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80016a4:	f000 fc7c 	bl	8001fa0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80016a8:	f000 fe96 	bl	80023d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016ac:	f000 ff40 	bl	8002530 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016b0:	f000 ffb4 	bl	800261c <MX_TIM3_Init>
  MX_TIM5_Init();
 80016b4:	f001 f82a 	bl	800270c <MX_TIM5_Init>
  MX_TIM8_Init();
 80016b8:	f001 f8a0 	bl	80027fc <MX_TIM8_Init>
  MX_TIM12_Init();
 80016bc:	f001 f8f2 	bl	80028a4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80016c0:	f001 fa92 	bl	8002be8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80016c4:	f001 fac0 	bl	8002c48 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80016c8:	f00b ffac 	bl	800d624 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80016cc:	f7ff fb4e 	bl	8000d6c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80016d0:	f00e fbd3 	bl	800fe7a <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World!\n");
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <main+0x88>)
 80016d6:	f011 facd 	bl	8012c74 <puts>
	  HAL_Delay(1000);
 80016da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016de:	f001 fbcd 	bl	8002e7c <HAL_Delay>
	  printf("Hello World!\n");
 80016e2:	e7f7      	b.n	80016d4 <main+0x78>
 80016e4:	08013380 	.word	0x08013380

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0b4      	sub	sp, #208	; 0xd0
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016f2:	2230      	movs	r2, #48	; 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f011 f9af 	bl	8012a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	2284      	movs	r2, #132	; 0x84
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f011 f9a0 	bl	8012a5a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800171a:	f005 faef 	bl	8006cfc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b4f      	ldr	r3, [pc, #316]	; (800185c <SystemClock_Config+0x174>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a4e      	ldr	r2, [pc, #312]	; (800185c <SystemClock_Config+0x174>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <SystemClock_Config+0x174>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <SystemClock_Config+0x178>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a49      	ldr	r2, [pc, #292]	; (8001860 <SystemClock_Config+0x178>)
 800173c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <SystemClock_Config+0x178>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800174e:	2309      	movs	r3, #9
 8001750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800175c:	2301      	movs	r3, #1
 800175e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001762:	2302      	movs	r3, #2
 8001764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001768:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800176c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001770:	2319      	movs	r3, #25
 8001772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001776:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800177a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001784:	2309      	movs	r3, #9
 8001786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fbd6 	bl	8006f40 <HAL_RCC_OscConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800179a:	f000 f877 	bl	800188c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800179e:	f005 fabd 	bl	8006d1c <HAL_PWREx_EnableOverDrive>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017a8:	f000 f870 	bl	800188c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017d2:	2106      	movs	r1, #6
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 fe57 	bl	8007488 <HAL_RCC_ClockConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80017e0:	f000 f854 	bl	800188c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <SystemClock_Config+0x17c>)
 80017e6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80017e8:	2364      	movs	r3, #100	; 0x64
 80017ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80017f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017fe:	2305      	movs	r3, #5
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001806:	2303      	movs	r3, #3
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800181e:	2300      	movs	r3, #0
 8001820:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001822:	2300      	movs	r3, #0
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001826:	2300      	movs	r3, #0
 8001828:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800182a:	2300      	movs	r3, #0
 800182c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800182e:	2300      	movs	r3, #0
 8001830:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f006 f823 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8001850:	f000 f81c 	bl	800188c <Error_Handler>
  }
}
 8001854:	bf00      	nop
 8001856:	37d0      	adds	r7, #208	; 0xd0
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
 8001864:	01b14868 	.word	0x01b14868

08001868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187a:	f001 fadf 	bl	8002e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40001000 	.word	0x40001000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <MX_QUADSPI_Init+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018a8:	22ff      	movs	r2, #255	; 0xff
 80018aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_QUADSPI_Init+0x50>)
 80018d8:	f005 fa70 	bl	8006dbc <HAL_QSPI_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80018e2:	f7ff ffd3 	bl	800188c <Error_Handler>
  }

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000873c 	.word	0x2000873c
 80018f0:	a0001000 	.word	0xa0001000

080018f4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3b      	ldr	r2, [pc, #236]	; (8001a00 <HAL_QSPI_MspInit+0x10c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d170      	bne.n	80019f8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6393      	str	r3, [r2, #56]	; 0x38
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a2e      	ldr	r2, [pc, #184]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_QSPI_MspInit+0x110>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001976:	2304      	movs	r3, #4
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001986:	2309      	movs	r3, #9
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	481d      	ldr	r0, [pc, #116]	; (8001a08 <HAL_QSPI_MspInit+0x114>)
 8001992:	f002 fe55 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001996:	2340      	movs	r3, #64	; 0x40
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019a6:	230a      	movs	r3, #10
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4816      	ldr	r0, [pc, #88]	; (8001a0c <HAL_QSPI_MspInit+0x118>)
 80019b2:	f002 fe45 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b6:	2304      	movs	r3, #4
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019c6:	2309      	movs	r3, #9
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	480e      	ldr	r0, [pc, #56]	; (8001a0c <HAL_QSPI_MspInit+0x118>)
 80019d2:	f002 fe35 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80019d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019e8:	2309      	movs	r3, #9
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <HAL_QSPI_MspInit+0x11c>)
 80019f4:	f002 fe24 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3730      	adds	r7, #48	; 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	a0001000 	.word	0xa0001000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020c00 	.word	0x40020c00

08001a14 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b092      	sub	sp, #72	; 0x48
 8001a18:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	222c      	movs	r2, #44	; 0x2c
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f011 f80f 	bl	8012a5a <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a3c:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a3e:	4a47      	ldr	r2, [pc, #284]	; (8001b5c <MX_RTC_Init+0x148>)
 8001a40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a42:	4b45      	ldr	r3, [pc, #276]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a4a:	227f      	movs	r2, #127	; 0x7f
 8001a4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a4e:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a50:	22ff      	movs	r2, #255	; 0xff
 8001a52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a60:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a66:	483c      	ldr	r0, [pc, #240]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a68:	f006 fc34 	bl	80082d4 <HAL_RTC_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001a72:	f7ff ff0b 	bl	800188c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	482f      	ldr	r0, [pc, #188]	; (8001b58 <MX_RTC_Init+0x144>)
 8001a9a:	f006 fc97 	bl	80083cc <HAL_RTC_SetTime>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001aa4:	f7ff fef2 	bl	800188c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4823      	ldr	r0, [pc, #140]	; (8001b58 <MX_RTC_Init+0x144>)
 8001aca:	f006 fd3d 	bl	8008548 <HAL_RTC_SetDate>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001ad4:	f7ff feda 	bl	800188c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4812      	ldr	r0, [pc, #72]	; (8001b58 <MX_RTC_Init+0x144>)
 8001b10:	f006 fdc2 	bl	8008698 <HAL_RTC_SetAlarm>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001b1a:	f7ff feb7 	bl	800188c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	2201      	movs	r2, #1
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480b      	ldr	r0, [pc, #44]	; (8001b58 <MX_RTC_Init+0x144>)
 8001b2c:	f006 fdb4 	bl	8008698 <HAL_RTC_SetAlarm>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001b36:	f7ff fea9 	bl	800188c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_RTC_Init+0x144>)
 8001b40:	f006 ff34 	bl	80089ac <HAL_RTCEx_SetTimeStamp>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001b4a:	f7ff fe9f 	bl	800188c <Error_Handler>
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3748      	adds	r7, #72	; 0x48
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20008788 	.word	0x20008788
 8001b5c:	40002800 	.word	0x40002800

08001b60 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_RTC_MspInit+0x2c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d105      	bne.n	8001b7e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RTC_MspInit+0x30>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_RTC_MspInit+0x30>)
 8001b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40002800 	.word	0x40002800
 8001b90:	40023800 	.word	0x40023800

08001b94 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001b9a:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <MX_SAI2_Init+0x140>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bb0:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bbc:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bc8:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <MX_SAI2_Init+0x144>)
 8001bd8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bec:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c0a:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c28:	4829      	ldr	r0, [pc, #164]	; (8001cd0 <MX_SAI2_Init+0x13c>)
 8001c2a:	f006 ff15 	bl	8008a58 <HAL_SAI_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001c34:	f7ff fe2a 	bl	800188c <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c3a:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <MX_SAI2_Init+0x14c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c46:	2203      	movs	r2, #3
 8001c48:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c4c:	2240      	movs	r2, #64	; 0x40
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c88:	2208      	movs	r2, #8
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_SAI2_Init+0x148>)
 8001cbe:	f006 fecb 	bl	8008a58 <HAL_SAI_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001cc8:	f7ff fde0 	bl	800188c <Error_Handler>
  }

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000882c 	.word	0x2000882c
 8001cd4:	40015c04 	.word	0x40015c04
 8001cd8:	0002ee00 	.word	0x0002ee00
 8001cdc:	200087a8 	.word	0x200087a8
 8001ce0:	40015c24 	.word	0x40015c24

08001ce4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_SAI_MspInit+0xbc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d124      	bne.n	8001d40 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d1e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001d20:	23f0      	movs	r3, #240	; 0xf0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d30:	230a      	movs	r3, #10
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	481c      	ldr	r0, [pc, #112]	; (8001dac <HAL_SAI_MspInit+0xc8>)
 8001d3c:	f002 fc80 	bl	8004640 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <HAL_SAI_MspInit+0xcc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d125      	bne.n	8001d96 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_SAI_MspInit+0xc4>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_SAI_MspInit+0xc0>)
 8001d72:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d86:	230a      	movs	r3, #10
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <HAL_SAI_MspInit+0xd0>)
 8001d92:	f002 fc55 	bl	8004640 <HAL_GPIO_Init>

    }
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40015c04 	.word	0x40015c04
 8001da4:	2000030c 	.word	0x2000030c
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40015c24 	.word	0x40015c24
 8001db4:	40021800 	.word	0x40021800

08001db8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <MX_SDMMC1_SD_Init+0x3c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <MX_SDMMC1_SD_Init+0x38>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]

}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	200088b0 	.word	0x200088b0
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_SD_MspInit+0xb4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d144      	bne.n	8001ea4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_SD_MspInit+0xb8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e62:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e74:	230c      	movs	r3, #12
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <HAL_SD_MspInit+0xbc>)
 8001e80:	f002 fbde 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e84:	2304      	movs	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e94:	230c      	movs	r3, #12
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <HAL_SD_MspInit+0xc0>)
 8001ea0:	f002 fbce 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00

08001ebc <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

  hspdif.Instance = SPDIFRX;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ec2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ec6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_SPDIFRX_Init+0x5c>)
 8001f06:	f007 ffef 	bl	8009ee8 <HAL_SPDIFRX_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001f10:	f7ff fcbc 	bl	800188c <Error_Handler>
  }

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20008934 	.word	0x20008934

08001f1c <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(spdifrxHandle->Instance==SPDIFRX)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001f3c:	d127      	bne.n	8001f8e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_SPDIFRX_MspInit+0x7c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <HAL_SPDIFRX_MspInit+0x80>)
 8001f8a:	f002 fb59 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020c00 	.word	0x40020c00

08001fa0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <MX_SPI2_Init+0x78>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fbe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_SPI2_Init+0x74>)
 8001fee:	2207      	movs	r2, #7
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_SPI2_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_SPI2_Init+0x74>)
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_SPI2_Init+0x74>)
 8002000:	f007 ffce 	bl	8009fa0 <HAL_SPI_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800200a:	f7ff fc3f 	bl	800188c <Error_Handler>
  }

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20008980 	.word	0x20008980
 8002018:	40003800 	.word	0x40003800

0800201c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <HAL_SPI_MspInit+0xb4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d144      	bne.n	80020c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_SPI_MspInit+0xb8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002086:	2302      	movs	r3, #2
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002096:	2305      	movs	r3, #5
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <HAL_SPI_MspInit+0xbc>)
 80020a2:	f002 facd 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020b8:	2305      	movs	r3, #5
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	4806      	ldr	r0, [pc, #24]	; (80020dc <HAL_SPI_MspInit+0xc0>)
 80020c4:	f002 fabc 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40003800 	.word	0x40003800
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40020400 	.word	0x40020400

080020e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_MspInit+0x4c>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_MspInit+0x4c>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_MspInit+0x4c>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	210f      	movs	r1, #15
 800211a:	f06f 0001 	mvn.w	r0, #1
 800211e:	f001 fa0f 	bl	8003540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	2036      	movs	r0, #54	; 0x36
 8002146:	f001 f9fb 	bl	8003540 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214a:	2036      	movs	r0, #54	; 0x36
 800214c:	f001 fa14 	bl	8003578 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_InitTick+0xa0>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_InitTick+0xa0>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_InitTick+0xa0>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002168:	f107 0210 	add.w	r2, r7, #16
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f005 fb5a 	bl	800782c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002178:	f005 fb30 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 800217c:	4603      	mov	r3, r0
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_InitTick+0xa4>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3b01      	subs	r3, #1
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_InitTick+0xa8>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_InitTick+0xac>)
 8002194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_InitTick+0xa8>)
 8002198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800219c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <HAL_InitTick+0xa8>)
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_InitTick+0xa8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_InitTick+0xa8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021b0:	4809      	ldr	r0, [pc, #36]	; (80021d8 <HAL_InitTick+0xa8>)
 80021b2:	f007 ff87 	bl	800a0c4 <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d104      	bne.n	80021c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021bc:	4806      	ldr	r0, [pc, #24]	; (80021d8 <HAL_InitTick+0xa8>)
 80021be:	f007 ffad 	bl	800a11c <HAL_TIM_Base_Start_IT>
 80021c2:	4603      	mov	r3, r0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3730      	adds	r7, #48	; 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	200089e4 	.word	0x200089e4
 80021dc:	40001000 	.word	0x40001000

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM6_DAC_IRQHandler+0x10>)
 800221a:	f007 ffd4 	bl	800a1c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200089e4 	.word	0x200089e4

08002228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <OTG_FS_IRQHandler+0x10>)
 800222e:	f002 fe71 	bl	8004f14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200094f8 	.word	0x200094f8

0800223c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <LTDC_IRQHandler+0x10>)
 8002242:	f004 fac1 	bl	80067c8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20008694 	.word	0x20008694

08002250 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <DMA2D_IRQHandler+0x10>)
 8002256:	f001 fbe5 	bl	8003a24 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000853c 	.word	0x2000853c

08002264 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e00a      	b.n	800228c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002276:	f3af 8000 	nop.w
 800227a:	4601      	mov	r1, r0
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf0      	blt.n	8002276 <_read+0x12>
	}

return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e009      	b.n	80022c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f9b1 	bl	8001620 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf1      	blt.n	80022b0 <_write+0x12>
	}
	return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_close>:

int _close(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
	return -1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_isatty>:

int _isatty(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
	return 1;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
	return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f010 fb2e 	bl	80129d0 <__errno>
 8002374:	4602      	mov	r2, r0
 8002376:	230c      	movs	r3, #12
 8002378:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20050000 	.word	0x20050000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	20000310 	.word	0x20000310
 80023a8:	200097c0 	.word	0x200097c0

080023ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <SystemInit+0x28>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <SystemInit+0x28>)
 80023b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SystemInit+0x28>)
 80023c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023c6:	609a      	str	r2, [r3, #8]
#endif
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b09a      	sub	sp, #104	; 0x68
 80023dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	615a      	str	r2, [r3, #20]
 800240a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	222c      	movs	r2, #44	; 0x2c
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f010 fb21 	bl	8012a5a <memset>

  htim1.Instance = TIM1;
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <MX_TIM1_Init+0x150>)
 800241a:	4a44      	ldr	r2, [pc, #272]	; (800252c <MX_TIM1_Init+0x154>)
 800241c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <MX_TIM1_Init+0x150>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <MX_TIM1_Init+0x150>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <MX_TIM1_Init+0x150>)
 800242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002430:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <MX_TIM1_Init+0x150>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002438:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <MX_TIM1_Init+0x150>)
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243e:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <MX_TIM1_Init+0x150>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002444:	4838      	ldr	r0, [pc, #224]	; (8002528 <MX_TIM1_Init+0x150>)
 8002446:	f007 fe3d 	bl	800a0c4 <HAL_TIM_Base_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002450:	f7ff fa1c 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002458:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800245a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800245e:	4619      	mov	r1, r3
 8002460:	4831      	ldr	r0, [pc, #196]	; (8002528 <MX_TIM1_Init+0x150>)
 8002462:	f008 f8e7 	bl	800a634 <HAL_TIM_ConfigClockSource>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800246c:	f7ff fa0e 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002470:	482d      	ldr	r0, [pc, #180]	; (8002528 <MX_TIM1_Init+0x150>)
 8002472:	f007 fe7d 	bl	800a170 <HAL_TIM_PWM_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800247c:	f7ff fa06 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800248c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002490:	4619      	mov	r1, r3
 8002492:	4825      	ldr	r0, [pc, #148]	; (8002528 <MX_TIM1_Init+0x150>)
 8002494:	f008 fd48 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800249e:	f7ff f9f5 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a2:	2360      	movs	r3, #96	; 0x60
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024aa:	2300      	movs	r3, #0
 80024ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024ae:	2300      	movs	r3, #0
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c2:	2200      	movs	r2, #0
 80024c4:	4619      	mov	r1, r3
 80024c6:	4818      	ldr	r0, [pc, #96]	; (8002528 <MX_TIM1_Init+0x150>)
 80024c8:	f007 ff9c 	bl	800a404 <HAL_TIM_PWM_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80024d2:	f7ff f9db 	bl	800188c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4807      	ldr	r0, [pc, #28]	; (8002528 <MX_TIM1_Init+0x150>)
 800250c:	f008 fd9a 	bl	800b044 <HAL_TIMEx_ConfigBreakDeadTime>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002516:	f7ff f9b9 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <MX_TIM1_Init+0x150>)
 800251c:	f000 fa96 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 8002520:	bf00      	nop
 8002522:	3768      	adds	r7, #104	; 0x68
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20008ae4 	.word	0x20008ae4
 800252c:	40010000 	.word	0x40010000

08002530 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002550:	463b      	mov	r3, r7
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	611a      	str	r2, [r3, #16]
 800255e:	615a      	str	r2, [r3, #20]
 8002560:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <MX_TIM2_Init+0xe8>)
 8002564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002568:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <MX_TIM2_Init+0xe8>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <MX_TIM2_Init+0xe8>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <MX_TIM2_Init+0xe8>)
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <MX_TIM2_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <MX_TIM2_Init+0xe8>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800258a:	4823      	ldr	r0, [pc, #140]	; (8002618 <MX_TIM2_Init+0xe8>)
 800258c:	f007 fd9a 	bl	800a0c4 <HAL_TIM_Base_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002596:	f7ff f979 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a4:	4619      	mov	r1, r3
 80025a6:	481c      	ldr	r0, [pc, #112]	; (8002618 <MX_TIM2_Init+0xe8>)
 80025a8:	f008 f844 	bl	800a634 <HAL_TIM_ConfigClockSource>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80025b2:	f7ff f96b 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025b6:	4818      	ldr	r0, [pc, #96]	; (8002618 <MX_TIM2_Init+0xe8>)
 80025b8:	f007 fdda 	bl	800a170 <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80025c2:	f7ff f963 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4810      	ldr	r0, [pc, #64]	; (8002618 <MX_TIM2_Init+0xe8>)
 80025d6:	f008 fca7 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80025e0:	f7ff f954 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e4:	2360      	movs	r3, #96	; 0x60
 80025e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	2200      	movs	r2, #0
 80025f8:	4619      	mov	r1, r3
 80025fa:	4807      	ldr	r0, [pc, #28]	; (8002618 <MX_TIM2_Init+0xe8>)
 80025fc:	f007 ff02 	bl	800a404 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002606:	f7ff f941 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800260a:	4803      	ldr	r0, [pc, #12]	; (8002618 <MX_TIM2_Init+0xe8>)
 800260c:	f000 fa1e 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 8002610:	bf00      	nop
 8002612:	3738      	adds	r7, #56	; 0x38
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20008b24 	.word	0x20008b24

0800261c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08e      	sub	sp, #56	; 0x38
 8002620:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263c:	463b      	mov	r3, r7
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	615a      	str	r2, [r3, #20]
 800264c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <MX_TIM3_Init+0xe8>)
 8002650:	4a2d      	ldr	r2, [pc, #180]	; (8002708 <MX_TIM3_Init+0xec>)
 8002652:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <MX_TIM3_Init+0xe8>)
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <MX_TIM3_Init+0xe8>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002660:	4b28      	ldr	r3, [pc, #160]	; (8002704 <MX_TIM3_Init+0xe8>)
 8002662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002666:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002668:	4b26      	ldr	r3, [pc, #152]	; (8002704 <MX_TIM3_Init+0xe8>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266e:	4b25      	ldr	r3, [pc, #148]	; (8002704 <MX_TIM3_Init+0xe8>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002674:	4823      	ldr	r0, [pc, #140]	; (8002704 <MX_TIM3_Init+0xe8>)
 8002676:	f007 fd25 	bl	800a0c4 <HAL_TIM_Base_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002680:	f7ff f904 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800268a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268e:	4619      	mov	r1, r3
 8002690:	481c      	ldr	r0, [pc, #112]	; (8002704 <MX_TIM3_Init+0xe8>)
 8002692:	f007 ffcf 	bl	800a634 <HAL_TIM_ConfigClockSource>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800269c:	f7ff f8f6 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026a0:	4818      	ldr	r0, [pc, #96]	; (8002704 <MX_TIM3_Init+0xe8>)
 80026a2:	f007 fd65 	bl	800a170 <HAL_TIM_PWM_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80026ac:	f7ff f8ee 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	4811      	ldr	r0, [pc, #68]	; (8002704 <MX_TIM3_Init+0xe8>)
 80026c0:	f008 fc32 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80026ca:	f7ff f8df 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ce:	2360      	movs	r3, #96	; 0x60
 80026d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026de:	463b      	mov	r3, r7
 80026e0:	2200      	movs	r2, #0
 80026e2:	4619      	mov	r1, r3
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <MX_TIM3_Init+0xe8>)
 80026e6:	f007 fe8d 	bl	800a404 <HAL_TIM_PWM_ConfigChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80026f0:	f7ff f8cc 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <MX_TIM3_Init+0xe8>)
 80026f6:	f000 f9a9 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 80026fa:	bf00      	nop
 80026fc:	3738      	adds	r7, #56	; 0x38
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20008aa4 	.word	0x20008aa4
 8002708:	40000400 	.word	0x40000400

0800270c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08e      	sub	sp, #56	; 0x38
 8002710:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800272c:	463b      	mov	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
 8002738:	611a      	str	r2, [r3, #16]
 800273a:	615a      	str	r2, [r3, #20]
 800273c:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800273e:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <MX_TIM5_Init+0xe8>)
 8002740:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <MX_TIM5_Init+0xec>)
 8002742:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <MX_TIM5_Init+0xe8>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <MX_TIM5_Init+0xe8>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <MX_TIM5_Init+0xe8>)
 8002752:	f04f 32ff 	mov.w	r2, #4294967295
 8002756:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <MX_TIM5_Init+0xe8>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <MX_TIM5_Init+0xe8>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002764:	4823      	ldr	r0, [pc, #140]	; (80027f4 <MX_TIM5_Init+0xe8>)
 8002766:	f007 fcad 	bl	800a0c4 <HAL_TIM_Base_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002770:	f7ff f88c 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800277a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800277e:	4619      	mov	r1, r3
 8002780:	481c      	ldr	r0, [pc, #112]	; (80027f4 <MX_TIM5_Init+0xe8>)
 8002782:	f007 ff57 	bl	800a634 <HAL_TIM_ConfigClockSource>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800278c:	f7ff f87e 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002790:	4818      	ldr	r0, [pc, #96]	; (80027f4 <MX_TIM5_Init+0xe8>)
 8002792:	f007 fced 	bl	800a170 <HAL_TIM_PWM_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800279c:	f7ff f876 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	4811      	ldr	r0, [pc, #68]	; (80027f4 <MX_TIM5_Init+0xe8>)
 80027b0:	f008 fbba 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80027ba:	f7ff f867 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027be:	2360      	movs	r3, #96	; 0x60
 80027c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027ce:	463b      	mov	r3, r7
 80027d0:	220c      	movs	r2, #12
 80027d2:	4619      	mov	r1, r3
 80027d4:	4807      	ldr	r0, [pc, #28]	; (80027f4 <MX_TIM5_Init+0xe8>)
 80027d6:	f007 fe15 	bl	800a404 <HAL_TIM_PWM_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80027e0:	f7ff f854 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80027e4:	4803      	ldr	r0, [pc, #12]	; (80027f4 <MX_TIM5_Init+0xe8>)
 80027e6:	f000 f931 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 80027ea:	bf00      	nop
 80027ec:	3738      	adds	r7, #56	; 0x38
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20008a64 	.word	0x20008a64
 80027f8:	40000c00 	.word	0x40000c00

080027fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002802:	f107 0310 	add.w	r3, r7, #16
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]

  htim8.Instance = TIM8;
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <MX_TIM8_Init+0xa0>)
 800281c:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <MX_TIM8_Init+0xa4>)
 800281e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <MX_TIM8_Init+0xa0>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <MX_TIM8_Init+0xa0>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <MX_TIM8_Init+0xa0>)
 800282e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002832:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <MX_TIM8_Init+0xa0>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <MX_TIM8_Init+0xa0>)
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <MX_TIM8_Init+0xa0>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002846:	4815      	ldr	r0, [pc, #84]	; (800289c <MX_TIM8_Init+0xa0>)
 8002848:	f007 fc3c 	bl	800a0c4 <HAL_TIM_Base_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002852:	f7ff f81b 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4619      	mov	r1, r3
 8002862:	480e      	ldr	r0, [pc, #56]	; (800289c <MX_TIM8_Init+0xa0>)
 8002864:	f007 fee6 	bl	800a634 <HAL_TIM_ConfigClockSource>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800286e:	f7ff f80d 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4806      	ldr	r0, [pc, #24]	; (800289c <MX_TIM8_Init+0xa0>)
 8002884:	f008 fb50 	bl	800af28 <HAL_TIMEx_MasterConfigSynchronization>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800288e:	f7fe fffd 	bl	800188c <Error_Handler>
  }

}
 8002892:	bf00      	nop
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20008a24 	.word	0x20008a24
 80028a0:	40010400 	.word	0x40010400

080028a4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
 80028b8:	615a      	str	r2, [r3, #20]
 80028ba:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <MX_TIM12_Init+0x84>)
 80028be:	4a1b      	ldr	r2, [pc, #108]	; (800292c <MX_TIM12_Init+0x88>)
 80028c0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <MX_TIM12_Init+0x84>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <MX_TIM12_Init+0x84>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <MX_TIM12_Init+0x84>)
 80028d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028d4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <MX_TIM12_Init+0x84>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <MX_TIM12_Init+0x84>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028e2:	4811      	ldr	r0, [pc, #68]	; (8002928 <MX_TIM12_Init+0x84>)
 80028e4:	f007 fc44 	bl	800a170 <HAL_TIM_PWM_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80028ee:	f7fe ffcd 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f2:	2360      	movs	r3, #96	; 0x60
 80028f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	2200      	movs	r2, #0
 8002906:	4619      	mov	r1, r3
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <MX_TIM12_Init+0x84>)
 800290a:	f007 fd7b 	bl	800a404 <HAL_TIM_PWM_ConfigChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002914:	f7fe ffba 	bl	800188c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <MX_TIM12_Init+0x84>)
 800291a:	f000 f897 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 800291e:	bf00      	nop
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20008b64 	.word	0x20008b64
 800292c:	40001800 	.word	0x40001800

08002930 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_TIM_Base_MspInit+0xc8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002942:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800295a:	e046      	b.n	80029ea <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d10c      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
}
 800297e:	e034      	b.n	80029ea <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_TIM_Base_MspInit+0xd0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10c      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
}
 80029a2:	e022      	b.n	80029ea <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_TIM_Base_MspInit+0xd4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10c      	bne.n	80029c8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
}
 80029c6:	e010      	b.n	80029ea <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_TIM_Base_MspInit+0xd8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10b      	bne.n	80029ea <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_TIM_Base_MspInit+0xcc>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
}
 80029ea:	bf00      	nop
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_TIM_PWM_MspInit+0x38>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10b      	bne.n	8002a36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40001800 	.word	0x40001800
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_TIM_MspPostInit+0x178>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d11d      	bne.n	8002aaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	484a      	ldr	r0, [pc, #296]	; (8002bcc <HAL_TIM_MspPostInit+0x180>)
 8002aa4:	f001 fdcc 	bl	8004640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002aa8:	e087      	b.n	8002bba <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d11d      	bne.n	8002af0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a43      	ldr	r2, [pc, #268]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002ae2:	f107 031c 	add.w	r3, r7, #28
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4838      	ldr	r0, [pc, #224]	; (8002bcc <HAL_TIM_MspPostInit+0x180>)
 8002aea:	f001 fda9 	bl	8004640 <HAL_GPIO_Init>
}
 8002aee:	e064      	b.n	8002bba <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a36      	ldr	r2, [pc, #216]	; (8002bd0 <HAL_TIM_MspPostInit+0x184>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d11c      	bne.n	8002b34 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afa:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a32      	ldr	r2, [pc, #200]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002b12:	2310      	movs	r3, #16
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b22:	2302      	movs	r3, #2
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002b26:	f107 031c 	add.w	r3, r7, #28
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4829      	ldr	r0, [pc, #164]	; (8002bd4 <HAL_TIM_MspPostInit+0x188>)
 8002b2e:	f001 fd87 	bl	8004640 <HAL_GPIO_Init>
}
 8002b32:	e042      	b.n	8002bba <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_TIM_MspPostInit+0x18c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d11c      	bne.n	8002b78 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a21      	ldr	r2, [pc, #132]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b66:	2302      	movs	r3, #2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	481a      	ldr	r0, [pc, #104]	; (8002bdc <HAL_TIM_MspPostInit+0x190>)
 8002b72:	f001 fd65 	bl	8004640 <HAL_GPIO_Init>
}
 8002b76:	e020      	b.n	8002bba <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_TIM_MspPostInit+0x194>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d11b      	bne.n	8002bba <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_TIM_MspPostInit+0x17c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002b9a:	2340      	movs	r3, #64	; 0x40
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002baa:	2309      	movs	r3, #9
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <HAL_TIM_MspPostInit+0x198>)
 8002bb6:	f001 fd43 	bl	8004640 <HAL_GPIO_Init>
}
 8002bba:	bf00      	nop
 8002bbc:	3730      	adds	r7, #48	; 0x30
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40020400 	.word	0x40020400
 8002bd8:	40000c00 	.word	0x40000c00
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40001800 	.word	0x40001800
 8002be4:	40021c00 	.word	0x40021c00

08002be8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <MX_USART1_UART_Init+0x5c>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c2c:	f008 faa6 	bl	800b17c <HAL_UART_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c36:	f7fe fe29 	bl	800188c <Error_Handler>
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20008ba4 	.word	0x20008ba4
 8002c44:	40011000 	.word	0x40011000

08002c48 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c4e:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <MX_USART6_UART_Init+0x5c>)
 8002c50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <MX_USART6_UART_Init+0x58>)
 8002c8c:	f008 fa76 	bl	800b17c <HAL_UART_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002c96:	f7fe fdf9 	bl	800188c <Error_Handler>
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20008c24 	.word	0x20008c24
 8002ca4:	40011400 	.word	0x40011400

08002ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 031c 	add.w	r3, r7, #28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3c      	ldr	r2, [pc, #240]	; (8002db8 <HAL_UART_MspInit+0x110>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d145      	bne.n	8002d56 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cca:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a35      	ldr	r2, [pc, #212]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d22:	2307      	movs	r3, #7
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <HAL_UART_MspInit+0x118>)
 8002d2e:	f001 fc87 	bl	8004640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d44:	2307      	movs	r3, #7
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	481d      	ldr	r0, [pc, #116]	; (8002dc4 <HAL_UART_MspInit+0x11c>)
 8002d50:	f001 fc76 	bl	8004640 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d54:	e02c      	b.n	8002db0 <HAL_UART_MspInit+0x108>
  else if(uartHandle->Instance==USART6)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_UART_MspInit+0x120>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d127      	bne.n	8002db0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d66:	f043 0320 	orr.w	r3, r3, #32
 8002d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6313      	str	r3, [r2, #48]	; 0x30
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_UART_MspInit+0x114>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d90:	23c0      	movs	r3, #192	; 0xc0
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002da0:	2308      	movs	r3, #8
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	4808      	ldr	r0, [pc, #32]	; (8002dcc <HAL_UART_MspInit+0x124>)
 8002dac:	f001 fc48 	bl	8004640 <HAL_GPIO_Init>
}
 8002db0:	bf00      	nop
 8002db2:	3730      	adds	r7, #48	; 0x30
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	40020800 	.word	0x40020800

08002dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dd6:	e003      	b.n	8002de0 <LoopCopyDataInit>

08002dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dde:	3104      	adds	r1, #4

08002de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002de0:	480b      	ldr	r0, [pc, #44]	; (8002e10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002de8:	d3f6      	bcc.n	8002dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8002dea:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dec:	e002      	b.n	8002df4 <LoopFillZerobss>

08002dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002df0:	f842 3b04 	str.w	r3, [r2], #4

08002df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002df8:	d3f9      	bcc.n	8002dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dfa:	f7ff fad7 	bl	80023ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dfe:	f00f fded 	bl	80129dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e02:	f7fe fc2b 	bl	800165c <main>
  bx  lr    
 8002e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002e0c:	08013484 	.word	0x08013484
  ldr  r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e14:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002e18:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8002e1c:	200097c0 	.word	0x200097c0

08002e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC_IRQHandler>

08002e22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e26:	2003      	movs	r0, #3
 8002e28:	f000 fb7f 	bl	800352a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7ff f97f 	bl	8002130 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e32:	f7ff f955 	bl	80020e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000008 	.word	0x20000008
 8002e60:	20008ca4 	.word	0x20008ca4

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20008ca4 	.word	0x20008ca4

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_Delay+0x40>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e031      	b.n	8002f3a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fb68 	bl	80005b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_ADC_Init+0x84>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f964 	bl	80031dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
 8002f2a:	e001      	b.n	8002f30 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	ffffeefd 	.word	0xffffeefd

08002f48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1c>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e12a      	b.n	80031ba <HAL_ADC_ConfigChannel+0x272>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d93a      	bls.n	8002fea <HAL_ADC_ConfigChannel+0xa2>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7c:	d035      	beq.n	8002fea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68d9      	ldr	r1, [r3, #12]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	3b1e      	subs	r3, #30
 8002f94:	2207      	movs	r2, #7
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a87      	ldr	r2, [pc, #540]	; (80031c8 <HAL_ADC_ConfigChannel+0x280>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68d9      	ldr	r1, [r3, #12]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	061a      	lsls	r2, r3, #24
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc2:	e035      	b.n	8003030 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4403      	add	r3, r0
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe8:	e022      	b.n	8003030 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6919      	ldr	r1, [r3, #16]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	2207      	movs	r2, #7
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43da      	mvns	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	400a      	ands	r2, r1
 800300c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6919      	ldr	r1, [r3, #16]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	4603      	mov	r3, r0
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4403      	add	r3, r0
 8003026:	409a      	lsls	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d824      	bhi.n	8003082 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b05      	subs	r3, #5
 800304a:	221f      	movs	r2, #31
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43da      	mvns	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	400a      	ands	r2, r1
 8003058:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	3b05      	subs	r3, #5
 8003074:	fa00 f203 	lsl.w	r2, r0, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	635a      	str	r2, [r3, #52]	; 0x34
 8003080:	e04c      	b.n	800311c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d824      	bhi.n	80030d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3b23      	subs	r3, #35	; 0x23
 800309c:	221f      	movs	r2, #31
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	400a      	ands	r2, r1
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3b23      	subs	r3, #35	; 0x23
 80030c6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
 80030d2:	e023      	b.n	800311c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	3b41      	subs	r3, #65	; 0x41
 80030e6:	221f      	movs	r2, #31
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	4618      	mov	r0, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	3b41      	subs	r3, #65	; 0x41
 8003110:	fa00 f203 	lsl.w	r2, r0, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_ADC_ConfigChannel+0x284>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10a      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1f4>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800312e:	d105      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_ADC_ConfigChannel+0x288>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <HAL_ADC_ConfigChannel+0x288>)
 8003136:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800313a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_ADC_ConfigChannel+0x284>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d109      	bne.n	800315a <HAL_ADC_ConfigChannel+0x212>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b12      	cmp	r3, #18
 800314c:	d105      	bne.n	800315a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_ADC_ConfigChannel+0x288>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <HAL_ADC_ConfigChannel+0x288>)
 8003154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003158:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_ADC_ConfigChannel+0x284>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d125      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x268>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_ADC_ConfigChannel+0x280>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x22e>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b11      	cmp	r3, #17
 8003174:	d11c      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_ADC_ConfigChannel+0x288>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <HAL_ADC_ConfigChannel+0x288>)
 800317c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003180:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <HAL_ADC_ConfigChannel+0x280>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d111      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_ADC_ConfigChannel+0x28c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_ADC_ConfigChannel+0x290>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0c9a      	lsrs	r2, r3, #18
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031a2:	e002      	b.n	80031aa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	10000012 	.word	0x10000012
 80031cc:	40012000 	.word	0x40012000
 80031d0:	40012300 	.word	0x40012300
 80031d4:	20000000 	.word	0x20000000
 80031d8:	431bde83 	.word	0x431bde83

080031dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031e4:	4b78      	ldr	r3, [pc, #480]	; (80033c8 <ADC_Init+0x1ec>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a77      	ldr	r2, [pc, #476]	; (80033c8 <ADC_Init+0x1ec>)
 80031ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031f0:	4b75      	ldr	r3, [pc, #468]	; (80033c8 <ADC_Init+0x1ec>)
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4973      	ldr	r1, [pc, #460]	; (80033c8 <ADC_Init+0x1ec>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800320c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	4a58      	ldr	r2, [pc, #352]	; (80033cc <ADC_Init+0x1f0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800327e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6899      	ldr	r1, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e00f      	b.n	80032d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0202 	bic.w	r2, r2, #2
 80032e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	005a      	lsls	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003312:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	3b01      	subs	r3, #1
 8003330:	035a      	lsls	r2, r3, #13
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e007      	b.n	800334c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	3b01      	subs	r3, #1
 8003368:	051a      	lsls	r2, r3, #20
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800338e:	025a      	lsls	r2, r3, #9
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6899      	ldr	r1, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	029a      	lsls	r2, r3, #10
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40012300 	.word	0x40012300
 80033cc:	0f000001 	.word	0x0f000001

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <__NVIC_SetPriorityGrouping+0x40>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	; (8003410 <__NVIC_SetPriorityGrouping+0x40>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00
 8003414:	05fa0000 	.word	0x05fa0000

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff4c 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003552:	f7ff ff61 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003556:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	6978      	ldr	r0, [r7, #20]
 800355e:	f7ff ffb1 	bl	80034c4 <NVIC_EncodePriority>
 8003562:	4602      	mov	r2, r0
 8003564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff80 	bl	8003470 <__NVIC_SetPriority>
}
 8003570:	bf00      	nop
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff54 	bl	8003434 <__NVIC_EnableIRQ>
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e054      	b.n	8003650 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7f5b      	ldrb	r3, [r3, #29]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd f878 	bl	80006ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	791b      	ldrb	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a22      	ldr	r2, [pc, #136]	; (8003658 <HAL_CRC_Init+0xc4>)
 80035d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0218 	bic.w	r2, r2, #24
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	e00c      	b.n	80035fe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6899      	ldr	r1, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	461a      	mov	r2, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f834 	bl	800365c <HAL_CRCEx_Polynomial_Set>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e028      	b.n	8003650 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	795b      	ldrb	r3, [r3, #5]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d105      	bne.n	8003612 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f04f 32ff 	mov.w	r2, #4294967295
 800360e:	611a      	str	r2, [r3, #16]
 8003610:	e004      	b.n	800361c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6912      	ldr	r2, [r2, #16]
 800361a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	04c11db7 	.word	0x04c11db7

0800365c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800366c:	231f      	movs	r3, #31
 800366e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003670:	bf00      	nop
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1e5a      	subs	r2, r3, #1
 8003676:	613a      	str	r2, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_CRCEx_Polynomial_Set+0x34>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b18      	cmp	r3, #24
 8003694:	d846      	bhi.n	8003724 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	0800372b 	.word	0x0800372b
 80036a0:	08003725 	.word	0x08003725
 80036a4:	08003725 	.word	0x08003725
 80036a8:	08003725 	.word	0x08003725
 80036ac:	08003725 	.word	0x08003725
 80036b0:	08003725 	.word	0x08003725
 80036b4:	08003725 	.word	0x08003725
 80036b8:	08003725 	.word	0x08003725
 80036bc:	08003719 	.word	0x08003719
 80036c0:	08003725 	.word	0x08003725
 80036c4:	08003725 	.word	0x08003725
 80036c8:	08003725 	.word	0x08003725
 80036cc:	08003725 	.word	0x08003725
 80036d0:	08003725 	.word	0x08003725
 80036d4:	08003725 	.word	0x08003725
 80036d8:	08003725 	.word	0x08003725
 80036dc:	0800370d 	.word	0x0800370d
 80036e0:	08003725 	.word	0x08003725
 80036e4:	08003725 	.word	0x08003725
 80036e8:	08003725 	.word	0x08003725
 80036ec:	08003725 	.word	0x08003725
 80036f0:	08003725 	.word	0x08003725
 80036f4:	08003725 	.word	0x08003725
 80036f8:	08003725 	.word	0x08003725
 80036fc:	08003701 	.word	0x08003701
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b06      	cmp	r3, #6
 8003704:	d913      	bls.n	800372e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800370a:	e010      	b.n	800372e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b07      	cmp	r3, #7
 8003710:	d90f      	bls.n	8003732 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003716:	e00c      	b.n	8003732 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d90b      	bls.n	8003736 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003722:	e008      	b.n	8003736 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
      break;
 8003728:	e006      	b.n	8003738 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800372a:	bf00      	nop
 800372c:	e004      	b.n	8003738 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003736:	bf00      	nop
  }
  if (status == HAL_OK)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 0118 	bic.w	r1, r3, #24
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
}
 800375c:	4618      	mov	r0, r3
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e069      	b.n	800384e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fc ffe4 	bl	8000754 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6819      	ldr	r1, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <HAL_DCMI_Init+0xf0>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037de:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80037ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80037f6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b10      	cmp	r3, #16
 8003806:	d112      	bne.n	800382e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7f1b      	ldrb	r3, [r3, #28]
 800380c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7f5b      	ldrb	r3, [r3, #29]
 8003812:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003814:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7f9b      	ldrb	r3, [r3, #30]
 800381a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800381c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7fdb      	ldrb	r3, [r3, #31]
 8003824:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800382a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800382c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 021e 	orr.w	r2, r2, #30
 800383c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	ffe0f007 	.word	0xffe0f007

0800385c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_DMA_Start_IT+0x26>
 800387e:	2302      	movs	r3, #2
 8003880:	e048      	b.n	8003914 <HAL_DMA_Start_IT+0xb8>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d137      	bne.n	8003906 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f842 	bl	8003934 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	223f      	movs	r2, #63	; 0x3f
 80038b6:	409a      	lsls	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0216 	orr.w	r2, r2, #22
 80038ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e005      	b.n	8003912 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003912:	7dfb      	ldrb	r3, [r7, #23]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003950:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d108      	bne.n	8003974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003972:	e007      	b.n	8003984 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e039      	b.n	8003a16 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fc ffbc 	bl	8000934 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	f023 0107 	bic.w	r1, r3, #7
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_DMA2D_Init+0x90>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68d1      	ldr	r1, [r2, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	430b      	orrs	r3, r1
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	ffffc000 	.word	0xffffc000

08003a24 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d026      	beq.n	8003a94 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d021      	beq.n	8003a94 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2204      	movs	r2, #4
 8003a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d026      	beq.n	8003aec <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d021      	beq.n	8003aec <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2220      	movs	r2, #32
 8003abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac4:	f043 0202 	orr.w	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d026      	beq.n	8003b44 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d021      	beq.n	8003b44 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2208      	movs	r2, #8
 8003b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	f043 0204 	orr.w	r2, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2204      	movs	r2, #4
 8003b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d013      	beq.n	8003b76 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b66:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f853 	bl	8003c1c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d024      	beq.n	8003bca <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01f      	beq.n	8003bca <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b98:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01f      	beq.n	8003c14 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01a      	beq.n	8003c14 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2210      	movs	r2, #16
 8003bf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f80e 	bl	8003c30 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_DMA2D_ConfigLayer+0x20>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e079      	b.n	8003d58 <HAL_DMA2D_ConfigLayer+0x114>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	3318      	adds	r3, #24
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c8e:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c90:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b0a      	cmp	r3, #10
 8003c98:	d003      	beq.n	8003ca2 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b09      	cmp	r3, #9
 8003ca0:	d107      	bne.n	8003cb2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e005      	b.n	8003cbe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d120      	bne.n	8003d06 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	ea02 0103 	and.w	r1, r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b0a      	cmp	r3, #10
 8003cec:	d003      	beq.n	8003cf6 <HAL_DMA2D_ConfigLayer+0xb2>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b09      	cmp	r3, #9
 8003cf4:	d127      	bne.n	8003d46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28
 8003d04:	e01f      	b.n	8003d46 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	ea02 0103 	and.w	r1, r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b0a      	cmp	r3, #10
 8003d2e:	d003      	beq.n	8003d38 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b09      	cmp	r3, #9
 8003d36:	d106      	bne.n	8003d46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d44:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	ff03000f 	.word	0xff03000f

08003d68 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003d78:	4ba9      	ldr	r3, [pc, #676]	; (8004020 <HAL_ETH_Init+0x2b8>)
 8003d7a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e183      	b.n	8004096 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fc fe2c 	bl	8000a00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da8:	4b9e      	ldr	r3, [pc, #632]	; (8004024 <HAL_ETH_Init+0x2bc>)
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	4a9d      	ldr	r2, [pc, #628]	; (8004024 <HAL_ETH_Init+0x2bc>)
 8003dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db2:	6453      	str	r3, [r2, #68]	; 0x44
 8003db4:	4b9b      	ldr	r3, [pc, #620]	; (8004024 <HAL_ETH_Init+0x2bc>)
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003dc0:	4b99      	ldr	r3, [pc, #612]	; (8004028 <HAL_ETH_Init+0x2c0>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a98      	ldr	r2, [pc, #608]	; (8004028 <HAL_ETH_Init+0x2c0>)
 8003dc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dca:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003dcc:	4b96      	ldr	r3, [pc, #600]	; (8004028 <HAL_ETH_Init+0x2c0>)
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4994      	ldr	r1, [pc, #592]	; (8004028 <HAL_ETH_Init+0x2c0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003df2:	f7ff f837 	bl	8002e64 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003df8:	e011      	b.n	8003e1e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003dfa:	f7ff f833 	bl	8002e64 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e08:	d909      	bls.n	8003e1e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e13b      	b.n	8004096 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e4      	bne.n	8003dfa <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f023 031c 	bic.w	r3, r3, #28
 8003e3e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003e40:	f003 fcc0 	bl	80077c4 <HAL_RCC_GetHCLKFreq>
 8003e44:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4a78      	ldr	r2, [pc, #480]	; (800402c <HAL_ETH_Init+0x2c4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d908      	bls.n	8003e60 <HAL_ETH_Init+0xf8>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4a77      	ldr	r2, [pc, #476]	; (8004030 <HAL_ETH_Init+0x2c8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d804      	bhi.n	8003e60 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f043 0308 	orr.w	r3, r3, #8
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e027      	b.n	8003eb0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	4a73      	ldr	r2, [pc, #460]	; (8004030 <HAL_ETH_Init+0x2c8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d908      	bls.n	8003e7a <HAL_ETH_Init+0x112>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4a72      	ldr	r2, [pc, #456]	; (8004034 <HAL_ETH_Init+0x2cc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d804      	bhi.n	8003e7a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f043 030c 	orr.w	r3, r3, #12
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e01a      	b.n	8003eb0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4a6d      	ldr	r2, [pc, #436]	; (8004034 <HAL_ETH_Init+0x2cc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d903      	bls.n	8003e8a <HAL_ETH_Init+0x122>
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4a6c      	ldr	r2, [pc, #432]	; (8004038 <HAL_ETH_Init+0x2d0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d911      	bls.n	8003eae <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4a6a      	ldr	r2, [pc, #424]	; (8004038 <HAL_ETH_Init+0x2d0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d908      	bls.n	8003ea4 <HAL_ETH_Init+0x13c>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	4a69      	ldr	r2, [pc, #420]	; (800403c <HAL_ETH_Init+0x2d4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d804      	bhi.n	8003ea4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e005      	b.n	8003eb0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f043 0310 	orr.w	r3, r3, #16
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e000      	b.n	8003eb0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003eae:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003eb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f956 	bl	8004170 <HAL_ETH_WritePHYRegister>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003ece:	6939      	ldr	r1, [r7, #16]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f9b3 	bl	800423c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0d9      	b.n	8004096 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003ee2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003ee6:	f7fe ffc9 	bl	8002e7c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80a6 	beq.w	8004040 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fe ffb6 	bl	8002e64 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	461a      	mov	r2, r3
 8003f00:	2101      	movs	r1, #1
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8cc 	bl	80040a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003f08:	f7fe ffac 	bl	8002e64 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d90f      	bls.n	8003f3a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003f1e:	6939      	ldr	r1, [r7, #16]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f98b 	bl	800423c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0ad      	b.n	8004096 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0da      	beq.n	8003efa <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f910 	bl	8004170 <HAL_ETH_WritePHYRegister>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003f5a:	6939      	ldr	r1, [r7, #16]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f96d 	bl	800423c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e093      	b.n	8004096 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6e:	f7fe ff79 	bl	8002e64 <HAL_GetTick>
 8003f72:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f88f 	bl	80040a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003f82:	f7fe ff6f 	bl	8002e64 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d90f      	bls.n	8003fb4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003f98:	6939      	ldr	r1, [r7, #16]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f94e 	bl	800423c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e070      	b.n	8004096 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0da      	beq.n	8003f74 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003fbe:	f107 030c 	add.w	r3, r7, #12
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	211f      	movs	r1, #31
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f86a 	bl	80040a0 <HAL_ETH_ReadPHYRegister>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f92f 	bl	800423c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e055      	b.n	8004096 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	e002      	b.n	8004004 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	e036      	b.n	8004084 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	e031      	b.n	8004084 <HAL_ETH_Init+0x31c>
 8004020:	03938700 	.word	0x03938700
 8004024:	40023800 	.word	0x40023800
 8004028:	40013800 	.word	0x40013800
 800402c:	01312cff 	.word	0x01312cff
 8004030:	02160ebf 	.word	0x02160ebf
 8004034:	039386ff 	.word	0x039386ff
 8004038:	05f5e0ff 	.word	0x05f5e0ff
 800403c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004050:	4313      	orrs	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	2100      	movs	r1, #0
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f889 	bl	8004170 <HAL_ETH_WritePHYRegister>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004068:	6939      	ldr	r1, [r7, #16]
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8e6 	bl	800423c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e00c      	b.n	8004096 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800407c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004080:	f7fe fefc 	bl	8002e7c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004084:	6939      	ldr	r1, [r7, #16]
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8d8 	bl	800423c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop

080040a0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	460b      	mov	r3, r1
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b82      	cmp	r3, #130	; 0x82
 80040c0:	d101      	bne.n	80040c6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
 80040c4:	e050      	b.n	8004168 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2282      	movs	r2, #130	; 0x82
 80040ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 031c 	and.w	r3, r3, #28
 80040dc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8a1b      	ldrh	r3, [r3, #16]
 80040e2:	02db      	lsls	r3, r3, #11
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	019b      	lsls	r3, r3, #6
 80040f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0302 	bic.w	r3, r3, #2
 8004100:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004112:	f7fe fea7 	bl	8002e64 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004118:	e015      	b.n	8004146 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800411a:	f7fe fea3 	bl	8002e64 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004128:	d309      	bcc.n	800413e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e014      	b.n	8004168 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e4      	bne.n	800411a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	b29b      	uxth	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	460b      	mov	r3, r1
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b42      	cmp	r3, #66	; 0x42
 8004190:	d101      	bne.n	8004196 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
 8004194:	e04e      	b.n	8004234 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2242      	movs	r2, #66	; 0x42
 800419a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 031c 	and.w	r3, r3, #28
 80041ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8a1b      	ldrh	r3, [r3, #16]
 80041b2:	02db      	lsls	r3, r3, #11
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80041bc:	897b      	ldrh	r3, [r7, #10]
 80041be:	019b      	lsls	r3, r3, #6
 80041c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80041ec:	f7fe fe3a 	bl	8002e64 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041f2:	e015      	b.n	8004220 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80041f4:	f7fe fe36 	bl	8002e64 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d309      	bcc.n	8004218 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e00d      	b.n	8004234 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e4      	bne.n	80041f4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b0b0      	sub	sp, #192	; 0xc0
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004258:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004260:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800426a:	2300      	movs	r3, #0
 800426c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004272:	2300      	movs	r3, #0
 8004274:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004276:	2300      	movs	r3, #0
 8004278:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004286:	663b      	str	r3, [r7, #96]	; 0x60
 8004288:	e001      	b.n	800428e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800428a:	2300      	movs	r3, #0
 800428c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800428e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004292:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004294:	2300      	movs	r3, #0
 8004296:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004298:	2300      	movs	r3, #0
 800429a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800429c:	2300      	movs	r3, #0
 800429e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80042be:	2300      	movs	r3, #0
 80042c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004310:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004314:	4bab      	ldr	r3, [pc, #684]	; (80045c4 <ETH_MACDMAConfig+0x388>)
 8004316:	4013      	ands	r3, r2
 8004318:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800431c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004320:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004324:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004328:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800432e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004332:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004336:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800433c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800433e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004340:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004344:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004348:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800434a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800434c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800434e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004350:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004364:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004370:	2001      	movs	r0, #1
 8004372:	f7fe fd83 	bl	8002e7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800437e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004380:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004384:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004386:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004388:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800438a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800438e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004394:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800439a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800439c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80043a0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80043a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80043ac:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80043ae:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ba:	2001      	movs	r0, #1
 80043bc:	f7fe fd5e 	bl	8002e7c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043c8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043d2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80043dc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80043e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043ec:	f64f 7341 	movw	r3, #65345	; 0xff41
 80043f0:	4013      	ands	r3, r2
 80043f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80043f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043fa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80043fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004400:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004406:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800440c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800440e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004412:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004418:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800441a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800442c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004438:	2001      	movs	r0, #1
 800443a:	f7fe fd1f 	bl	8002e7c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004446:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004448:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800444c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004462:	2001      	movs	r0, #1
 8004464:	f7fe fd0a 	bl	8002e7c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004470:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800447a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004480:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004484:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004496:	2304      	movs	r3, #4
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800449a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80044a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044a4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80044a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80044ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80044ba:	2300      	movs	r3, #0
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f241 0318 	movw	r3, #4120	; 0x1018
 80044c6:	4413      	add	r3, r2
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80044ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044d2:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <ETH_MACDMAConfig+0x38c>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80044da:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80044dc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80044de:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80044e0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80044e2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80044e4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80044e6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80044e8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80044ea:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80044ec:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80044ee:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80044f0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80044f2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80044f6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80044fa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80044fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	f241 0318 	movw	r3, #4120	; 0x1018
 800450e:	4413      	add	r3, r2
 8004510:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004514:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	f241 0318 	movw	r3, #4120	; 0x1018
 800451e:	4413      	add	r3, r2
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004526:	2001      	movs	r0, #1
 8004528:	f7fe fca8 	bl	8002e7c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	f241 0318 	movw	r3, #4120	; 0x1018
 8004534:	4413      	add	r3, r2
 8004536:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800453a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800453c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004540:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004544:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004548:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800454c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800454e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004550:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004552:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004556:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004564:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004574:	2001      	movs	r0, #1
 8004576:	f7fe fc81 	bl	8002e7c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004586:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10d      	bne.n	80045ac <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	f241 031c 	movw	r3, #4124	; 0x101c
 8004598:	4413      	add	r3, r2
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6811      	ldr	r1, [r2, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <ETH_MACDMAConfig+0x390>)
 80045a2:	431a      	orrs	r2, r3
 80045a4:	f241 031c 	movw	r3, #4124	; 0x101c
 80045a8:	440b      	add	r3, r1
 80045aa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	461a      	mov	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f80b 	bl	80045d0 <ETH_MACAddressConfig>
}
 80045ba:	bf00      	nop
 80045bc:	37c0      	adds	r7, #192	; 0xc0
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	ff20810f 	.word	0xff20810f
 80045c8:	f8de3f23 	.word	0xf8de3f23
 80045cc:	00010040 	.word	0x00010040

080045d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3305      	adds	r3, #5
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	3204      	adds	r2, #4
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <ETH_MACAddressConfig+0x68>)
 80045f2:	4413      	add	r3, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3303      	adds	r3, #3
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	061a      	lsls	r2, r3, #24
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3302      	adds	r3, #2
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3301      	adds	r3, #1
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	4313      	orrs	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <ETH_MACAddressConfig+0x6c>)
 8004622:	4413      	add	r3, r2
 8004624:	461a      	mov	r2, r3
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40028040 	.word	0x40028040
 800463c:	40028044 	.word	0x40028044

08004640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e175      	b.n	800494c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004660:	2201      	movs	r2, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	f040 8164 	bne.w	8004946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d00b      	beq.n	800469e <HAL_GPIO_Init+0x5e>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d007      	beq.n	800469e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004692:	2b11      	cmp	r3, #17
 8004694:	d003      	beq.n	800469e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b12      	cmp	r3, #18
 800469c:	d130      	bne.n	8004700 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	2203      	movs	r2, #3
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046d4:	2201      	movs	r2, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 0201 	and.w	r2, r3, #1
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	2203      	movs	r2, #3
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x100>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b12      	cmp	r3, #18
 800473e:	d123      	bne.n	8004788 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	08da      	lsrs	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3208      	adds	r2, #8
 8004748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	220f      	movs	r2, #15
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	69b9      	ldr	r1, [r7, #24]
 8004784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0203 	and.w	r2, r3, #3
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80be 	beq.w	8004946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ca:	4b65      	ldr	r3, [pc, #404]	; (8004960 <HAL_GPIO_Init+0x320>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	4a64      	ldr	r2, [pc, #400]	; (8004960 <HAL_GPIO_Init+0x320>)
 80047d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d4:	6453      	str	r3, [r2, #68]	; 0x44
 80047d6:	4b62      	ldr	r3, [pc, #392]	; (8004960 <HAL_GPIO_Init+0x320>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047e2:	4a60      	ldr	r2, [pc, #384]	; (8004964 <HAL_GPIO_Init+0x324>)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	220f      	movs	r2, #15
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a57      	ldr	r2, [pc, #348]	; (8004968 <HAL_GPIO_Init+0x328>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d037      	beq.n	800487e <HAL_GPIO_Init+0x23e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a56      	ldr	r2, [pc, #344]	; (800496c <HAL_GPIO_Init+0x32c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d031      	beq.n	800487a <HAL_GPIO_Init+0x23a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a55      	ldr	r2, [pc, #340]	; (8004970 <HAL_GPIO_Init+0x330>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <HAL_GPIO_Init+0x236>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a54      	ldr	r2, [pc, #336]	; (8004974 <HAL_GPIO_Init+0x334>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d025      	beq.n	8004872 <HAL_GPIO_Init+0x232>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a53      	ldr	r2, [pc, #332]	; (8004978 <HAL_GPIO_Init+0x338>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01f      	beq.n	800486e <HAL_GPIO_Init+0x22e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a52      	ldr	r2, [pc, #328]	; (800497c <HAL_GPIO_Init+0x33c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d019      	beq.n	800486a <HAL_GPIO_Init+0x22a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a51      	ldr	r2, [pc, #324]	; (8004980 <HAL_GPIO_Init+0x340>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_GPIO_Init+0x226>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a50      	ldr	r2, [pc, #320]	; (8004984 <HAL_GPIO_Init+0x344>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00d      	beq.n	8004862 <HAL_GPIO_Init+0x222>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4f      	ldr	r2, [pc, #316]	; (8004988 <HAL_GPIO_Init+0x348>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <HAL_GPIO_Init+0x21e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4e      	ldr	r2, [pc, #312]	; (800498c <HAL_GPIO_Init+0x34c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_GPIO_Init+0x21a>
 8004856:	2309      	movs	r3, #9
 8004858:	e012      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800485a:	230a      	movs	r3, #10
 800485c:	e010      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800485e:	2308      	movs	r3, #8
 8004860:	e00e      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004862:	2307      	movs	r3, #7
 8004864:	e00c      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004866:	2306      	movs	r3, #6
 8004868:	e00a      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800486a:	2305      	movs	r3, #5
 800486c:	e008      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800486e:	2304      	movs	r3, #4
 8004870:	e006      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004872:	2303      	movs	r3, #3
 8004874:	e004      	b.n	8004880 <HAL_GPIO_Init+0x240>
 8004876:	2302      	movs	r3, #2
 8004878:	e002      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_GPIO_Init+0x240>
 800487e:	2300      	movs	r3, #0
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	f002 0203 	and.w	r2, r2, #3
 8004886:	0092      	lsls	r2, r2, #2
 8004888:	4093      	lsls	r3, r2
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004890:	4934      	ldr	r1, [pc, #208]	; (8004964 <HAL_GPIO_Init+0x324>)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3302      	adds	r3, #2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800489e:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <HAL_GPIO_Init+0x350>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c2:	4a33      	ldr	r2, [pc, #204]	; (8004990 <HAL_GPIO_Init+0x350>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048c8:	4b31      	ldr	r3, [pc, #196]	; (8004990 <HAL_GPIO_Init+0x350>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048ec:	4a28      	ldr	r2, [pc, #160]	; (8004990 <HAL_GPIO_Init+0x350>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f2:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_GPIO_Init+0x350>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004916:	4a1e      	ldr	r2, [pc, #120]	; (8004990 <HAL_GPIO_Init+0x350>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <HAL_GPIO_Init+0x350>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <HAL_GPIO_Init+0x350>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	f67f ae86 	bls.w	8004660 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004954:	bf00      	nop
 8004956:	3724      	adds	r7, #36	; 0x24
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40023800 	.word	0x40023800
 8004964:	40013800 	.word	0x40013800
 8004968:	40020000 	.word	0x40020000
 800496c:	40020400 	.word	0x40020400
 8004970:	40020800 	.word	0x40020800
 8004974:	40020c00 	.word	0x40020c00
 8004978:	40021000 	.word	0x40021000
 800497c:	40021400 	.word	0x40021400
 8004980:	40021800 	.word	0x40021800
 8004984:	40021c00 	.word	0x40021c00
 8004988:	40022000 	.word	0x40022000
 800498c:	40022400 	.word	0x40022400
 8004990:	40013c00 	.word	0x40013c00

08004994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e001      	b.n	80049b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
 80049d0:	4613      	mov	r3, r2
 80049d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d4:	787b      	ldrb	r3, [r7, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049e0:	e003      	b.n	80049ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049e2:	887b      	ldrh	r3, [r7, #2]
 80049e4:	041a      	lsls	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80049f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f8:	b08f      	sub	sp, #60	; 0x3c
 80049fa:	af0a      	add	r7, sp, #40	; 0x28
 80049fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e054      	b.n	8004ab2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f00d fd32 	bl	801248c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f007 ff1f 	bl	800c88a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	687e      	ldr	r6, [r7, #4]
 8004a54:	466d      	mov	r5, sp
 8004a56:	f106 0410 	add.w	r4, r6, #16
 8004a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a6a:	1d33      	adds	r3, r6, #4
 8004a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a6e:	6838      	ldr	r0, [r7, #0]
 8004a70:	f007 fea2 	bl	800c7b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f007 ff16 	bl	800c8ac <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	687e      	ldr	r6, [r7, #4]
 8004a88:	466d      	mov	r5, sp
 8004a8a:	f106 0410 	add.w	r4, r6, #16
 8004a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a9e:	1d33      	adds	r3, r6, #4
 8004aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aa2:	6838      	ldr	r0, [r7, #0]
 8004aa4:	f008 f828 	bl	800caf8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004aba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004aba:	b590      	push	{r4, r7, lr}
 8004abc:	b089      	sub	sp, #36	; 0x24
 8004abe:	af04      	add	r7, sp, #16
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	4608      	mov	r0, r1
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4603      	mov	r3, r0
 8004aca:	70fb      	strb	r3, [r7, #3]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70bb      	strb	r3, [r7, #2]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_HCD_HC_Init+0x28>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e07f      	b.n	8004be2 <HAL_HCD_HC_Init+0x128>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	333d      	adds	r3, #61	; 0x3d
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3338      	adds	r3, #56	; 0x38
 8004b0e:	787a      	ldrb	r2, [r7, #1]
 8004b10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	440b      	add	r3, r1
 8004b20:	3340      	adds	r3, #64	; 0x40
 8004b22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b24:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	440b      	add	r3, r1
 8004b34:	3339      	adds	r3, #57	; 0x39
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	440b      	add	r3, r1
 8004b48:	333f      	adds	r3, #63	; 0x3f
 8004b4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004b4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	78bb      	ldrb	r3, [r7, #2]
 8004b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b58:	b2d8      	uxtb	r0, r3
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	333a      	adds	r3, #58	; 0x3a
 8004b68:	4602      	mov	r2, r0
 8004b6a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004b6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da0a      	bge.n	8004b8a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	440b      	add	r3, r1
 8004b82:	333b      	adds	r3, #59	; 0x3b
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e009      	b.n	8004b9e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	333b      	adds	r3, #59	; 0x3b
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	440b      	add	r3, r1
 8004bac:	333c      	adds	r3, #60	; 0x3c
 8004bae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004bb2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	787c      	ldrb	r4, [r7, #1]
 8004bba:	78ba      	ldrb	r2, [r7, #2]
 8004bbc:	78f9      	ldrb	r1, [r7, #3]
 8004bbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bc0:	9302      	str	r3, [sp, #8]
 8004bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	4623      	mov	r3, r4
 8004bd0:	f008 f908 	bl	800cde4 <USB_HC_Init>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd90      	pop	{r4, r7, pc}

08004bea <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_HCD_HC_Halt+0x1e>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e00f      	b.n	8004c28 <HAL_HCD_HC_Halt+0x3e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f008 fb42 	bl	800d2a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	70fb      	strb	r3, [r7, #3]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70bb      	strb	r3, [r7, #2]
 8004c46:	4613      	mov	r3, r2
 8004c48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	440b      	add	r3, r1
 8004c58:	333b      	adds	r3, #59	; 0x3b
 8004c5a:	78ba      	ldrb	r2, [r7, #2]
 8004c5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	440b      	add	r3, r1
 8004c6c:	333f      	adds	r3, #63	; 0x3f
 8004c6e:	787a      	ldrb	r2, [r7, #1]
 8004c70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004c72:	7c3b      	ldrb	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d114      	bne.n	8004ca2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	440b      	add	r3, r1
 8004c86:	3342      	adds	r3, #66	; 0x42
 8004c88:	2203      	movs	r2, #3
 8004c8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	440b      	add	r3, r1
 8004c9a:	333d      	adds	r3, #61	; 0x3d
 8004c9c:	7f3a      	ldrb	r2, [r7, #28]
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e009      	b.n	8004cb6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	440b      	add	r3, r1
 8004cb0:	3342      	adds	r3, #66	; 0x42
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004cb6:	787b      	ldrb	r3, [r7, #1]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	f200 80d6 	bhi.w	8004e6a <HAL_HCD_HC_SubmitRequest+0x23a>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004e55 	.word	0x08004e55
 8004ccc:	08004d41 	.word	0x08004d41
 8004cd0:	08004dcb 	.word	0x08004dcb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004cd4:	7c3b      	ldrb	r3, [r7, #16]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	f040 80c9 	bne.w	8004e6e <HAL_HCD_HC_SubmitRequest+0x23e>
 8004cdc:	78bb      	ldrb	r3, [r7, #2]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 80c5 	bne.w	8004e6e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004ce4:	8b3b      	ldrh	r3, [r7, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3351      	adds	r3, #81	; 0x51
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3351      	adds	r3, #81	; 0x51
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	440b      	add	r3, r1
 8004d22:	3342      	adds	r3, #66	; 0x42
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d28:	e0a1      	b.n	8004e6e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	440b      	add	r3, r1
 8004d38:	3342      	adds	r3, #66	; 0x42
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	701a      	strb	r2, [r3, #0]
      break;
 8004d3e:	e096      	b.n	8004e6e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004d40:	78bb      	ldrb	r3, [r7, #2]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d120      	bne.n	8004d88 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d46:	78fa      	ldrb	r2, [r7, #3]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	440b      	add	r3, r1
 8004d54:	3351      	adds	r3, #81	; 0x51
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	3342      	adds	r3, #66	; 0x42
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004d70:	e07e      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	440b      	add	r3, r1
 8004d80:	3342      	adds	r3, #66	; 0x42
 8004d82:	2202      	movs	r2, #2
 8004d84:	701a      	strb	r2, [r3, #0]
      break;
 8004d86:	e073      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	440b      	add	r3, r1
 8004d96:	3350      	adds	r3, #80	; 0x50
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	440b      	add	r3, r1
 8004dac:	3342      	adds	r3, #66	; 0x42
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
      break;
 8004db2:	e05d      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	440b      	add	r3, r1
 8004dc2:	3342      	adds	r3, #66	; 0x42
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	701a      	strb	r2, [r3, #0]
      break;
 8004dc8:	e052      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004dca:	78bb      	ldrb	r3, [r7, #2]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d120      	bne.n	8004e12 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	440b      	add	r3, r1
 8004dde:	3351      	adds	r3, #81	; 0x51
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	440b      	add	r3, r1
 8004df4:	3342      	adds	r3, #66	; 0x42
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004dfa:	e039      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	3342      	adds	r3, #66	; 0x42
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	701a      	strb	r2, [r3, #0]
      break;
 8004e10:	e02e      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	440b      	add	r3, r1
 8004e20:	3350      	adds	r3, #80	; 0x50
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	440b      	add	r3, r1
 8004e36:	3342      	adds	r3, #66	; 0x42
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
      break;
 8004e3c:	e018      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3342      	adds	r3, #66	; 0x42
 8004e4e:	2202      	movs	r2, #2
 8004e50:	701a      	strb	r2, [r3, #0]
      break;
 8004e52:	e00d      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	440b      	add	r3, r1
 8004e62:	3342      	adds	r3, #66	; 0x42
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
      break;
 8004e68:	e002      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004e6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3344      	adds	r3, #68	; 0x44
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	8b39      	ldrh	r1, [r7, #24]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4403      	add	r3, r0
 8004e94:	3348      	adds	r3, #72	; 0x48
 8004e96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	335c      	adds	r3, #92	; 0x5c
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	440b      	add	r3, r1
 8004eba:	334c      	adds	r3, #76	; 0x4c
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3339      	adds	r3, #57	; 0x39
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	335d      	adds	r3, #93	; 0x5d
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	3338      	adds	r3, #56	; 0x38
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	18d1      	adds	r1, r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	f008 f878 	bl	800cff8 <USB_HC_StartXfer>
 8004f08:	4603      	mov	r3, r0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop

08004f14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f007 fda1 	bl	800ca72 <USB_GetMode>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	f040 80ef 	bne.w	8005116 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f007 fd85 	bl	800ca4c <USB_ReadInterrupts>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80e5 	beq.w	8005114 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f007 fd7c 	bl	800ca4c <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5e:	d104      	bne.n	8004f6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f007 fd6c 	bl	800ca4c <USB_ReadInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7e:	d104      	bne.n	8004f8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f007 fd5c 	bl	800ca4c <USB_ReadInterrupts>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f9e:	d104      	bne.n	8004faa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f007 fd4c 	bl	800ca4c <USB_ReadInterrupts>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d103      	bne.n	8004fc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f007 fd3e 	bl	800ca4c <USB_ReadInterrupts>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fda:	d115      	bne.n	8005008 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004fe4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f00d faba 	bl	8012570 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f007 fe28 	bl	800cc58 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f007 fd1d 	bl	800ca4c <USB_ReadInterrupts>
 8005012:	4603      	mov	r3, r0
 8005014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501c:	d102      	bne.n	8005024 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f001 f966 	bl	80062f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f007 fd0f 	bl	800ca4c <USB_ReadInterrupts>
 800502e:	4603      	mov	r3, r0
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d106      	bne.n	8005046 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f00d fa7d 	bl	8012538 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2208      	movs	r2, #8
 8005044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f007 fcfe 	bl	800ca4c <USB_ReadInterrupts>
 8005050:	4603      	mov	r3, r0
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800505a:	d138      	bne.n	80050ce <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f008 f90d 	bl	800d280 <USB_HC_ReadInterrupt>
 8005066:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e025      	b.n	80050ba <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005098:	d106      	bne.n	80050a8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f8cf 	bl	8005244 <HCD_HC_IN_IRQHandler>
 80050a6:	e005      	b.n	80050b4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fcfd 	bl	8005aae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3301      	adds	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3d4      	bcc.n	800506e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f007 fcba 	bl	800ca4c <USB_ReadInterrupts>
 80050d8:	4603      	mov	r3, r0
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d101      	bne.n	80050e6 <HAL_HCD_IRQHandler+0x1d2>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_HCD_IRQHandler+0x1d4>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d014      	beq.n	8005116 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0210 	bic.w	r2, r2, #16
 80050fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 f84b 	bl	8006198 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0210 	orr.w	r2, r2, #16
 8005110:	619a      	str	r2, [r3, #24]
 8005112:	e000      	b.n	8005116 <HAL_HCD_IRQHandler+0x202>
      return;
 8005114:	bf00      	nop
    }
  }
}
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_HCD_Start+0x16>
 800512e:	2302      	movs	r3, #2
 8005130:	e013      	b.n	800515a <HAL_HCD_Start+0x3e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f007 fb92 	bl	800c868 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f007 fde8 	bl	800cd20 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_HCD_Stop+0x16>
 8005174:	2302      	movs	r3, #2
 8005176:	e00d      	b.n	8005194 <HAL_HCD_Stop+0x32>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f008 f9c7 	bl	800d518 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f007 fd8f 	bl	800cccc <USB_ResetPort>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	335c      	adds	r3, #92	; 0x5c
 80051d4:	781b      	ldrb	r3, [r3, #0]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	440b      	add	r3, r1
 80051fc:	334c      	adds	r3, #76	; 0x4c
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f007 fdd1 	bl	800cdc0 <USB_GetCurrentFrame>
 800521e:	4603      	mov	r3, r0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f007 fdac 	bl	800cd92 <USB_GetHostSpeed>
 800523a:	4603      	mov	r3, r0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4413      	add	r3, r2
 8005266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b04      	cmp	r3, #4
 8005272:	d119      	bne.n	80052a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4413      	add	r3, r2
 800527c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005280:	461a      	mov	r2, r3
 8005282:	2304      	movs	r3, #4
 8005284:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	440a      	add	r2, r1
 800529c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	60d3      	str	r3, [r2, #12]
 80052a6:	e0ce      	b.n	8005446 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052be:	d12c      	bne.n	800531a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	461a      	mov	r2, r3
 80052ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	335d      	adds	r3, #93	; 0x5d
 80052e4:	2207      	movs	r2, #7
 80052e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005302:	f043 0302 	orr.w	r3, r3, #2
 8005306:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f007 ffc5 	bl	800d2a2 <USB_HC_Halt>
 8005318:	e095      	b.n	8005446 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b20      	cmp	r3, #32
 800532e:	d109      	bne.n	8005344 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	461a      	mov	r2, r3
 800533e:	2320      	movs	r3, #32
 8005340:	6093      	str	r3, [r2, #8]
 8005342:	e080      	b.n	8005446 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b08      	cmp	r3, #8
 8005358:	d134      	bne.n	80053c4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	440a      	add	r2, r1
 8005370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005374:	f043 0302 	orr.w	r3, r3, #2
 8005378:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	440b      	add	r3, r1
 8005388:	335d      	adds	r3, #93	; 0x5d
 800538a:	2205      	movs	r2, #5
 800538c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	461a      	mov	r2, r3
 800539c:	2310      	movs	r3, #16
 800539e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	461a      	mov	r2, r3
 80053ae:	2308      	movs	r3, #8
 80053b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	4611      	mov	r1, r2
 80053bc:	4618      	mov	r0, r3
 80053be:	f007 ff70 	bl	800d2a2 <USB_HC_Halt>
 80053c2:	e040      	b.n	8005446 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053da:	d134      	bne.n	8005446 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f6:	f043 0302 	orr.w	r3, r3, #2
 80053fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	4611      	mov	r1, r2
 8005406:	4618      	mov	r0, r3
 8005408:	f007 ff4b 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	461a      	mov	r2, r3
 800541a:	2310      	movs	r3, #16
 800541c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	440b      	add	r3, r1
 800542c:	335d      	adds	r3, #93	; 0x5d
 800542e:	2208      	movs	r2, #8
 8005430:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	461a      	mov	r2, r3
 8005440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005444:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545c:	d122      	bne.n	80054a4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	440a      	add	r2, r1
 8005474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005478:	f043 0302 	orr.w	r3, r3, #2
 800547c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f007 ff0a 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	461a      	mov	r2, r3
 800549c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054a0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80054a2:	e300      	b.n	8005aa6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	f040 80fd 	bne.w	80056b6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	3348      	adds	r3, #72	; 0x48
 80054d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	0159      	lsls	r1, r3, #5
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	440b      	add	r3, r1
 80054de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80054e8:	1ad1      	subs	r1, r2, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4403      	add	r3, r0
 80054f8:	334c      	adds	r3, #76	; 0x4c
 80054fa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	335d      	adds	r3, #93	; 0x5d
 800550c:	2201      	movs	r2, #1
 800550e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	3358      	adds	r3, #88	; 0x58
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005530:	461a      	mov	r2, r3
 8005532:	2301      	movs	r3, #1
 8005534:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	440b      	add	r3, r1
 8005544:	333f      	adds	r3, #63	; 0x3f
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	440b      	add	r3, r1
 800555a:	333f      	adds	r3, #63	; 0x3f
 800555c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800555e:	2b02      	cmp	r3, #2
 8005560:	d121      	bne.n	80055a6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	440a      	add	r2, r1
 8005578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f007 fe88 	bl	800d2a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4413      	add	r3, r2
 800559a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559e:	461a      	mov	r2, r3
 80055a0:	2310      	movs	r3, #16
 80055a2:	6093      	str	r3, [r2, #8]
 80055a4:	e070      	b.n	8005688 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	333f      	adds	r3, #63	; 0x3f
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d12a      	bne.n	8005612 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	440b      	add	r3, r1
 80055ea:	335c      	adds	r3, #92	; 0x5c
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	b2d8      	uxtb	r0, r3
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	440b      	add	r3, r1
 8005602:	335c      	adds	r3, #92	; 0x5c
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	4601      	mov	r1, r0
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f00c ffbe 	bl	801258c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005610:	e03a      	b.n	8005688 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	440b      	add	r3, r1
 8005620:	333f      	adds	r3, #63	; 0x3f
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d12f      	bne.n	8005688 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	440b      	add	r3, r1
 8005636:	335c      	adds	r3, #92	; 0x5c
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	440b      	add	r3, r1
 800564a:	3350      	adds	r3, #80	; 0x50
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f083 0301 	eor.w	r3, r3, #1
 8005652:	b2d8      	uxtb	r0, r3
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	440b      	add	r3, r1
 8005662:	3350      	adds	r3, #80	; 0x50
 8005664:	4602      	mov	r2, r0
 8005666:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	b2d8      	uxtb	r0, r3
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	440b      	add	r3, r1
 800567a:	335c      	adds	r3, #92	; 0x5c
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	4601      	mov	r1, r0
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f00c ff82 	bl	801258c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	440b      	add	r3, r1
 8005696:	3350      	adds	r3, #80	; 0x50
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f083 0301 	eor.w	r3, r3, #1
 800569e:	b2d8      	uxtb	r0, r3
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	440b      	add	r3, r1
 80056ae:	3350      	adds	r3, #80	; 0x50
 80056b0:	4602      	mov	r2, r0
 80056b2:	701a      	strb	r2, [r3, #0]
}
 80056b4:	e1f7      	b.n	8005aa6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	f040 811a 	bne.w	8005902 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e8:	f023 0302 	bic.w	r3, r3, #2
 80056ec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	335d      	adds	r3, #93	; 0x5d
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d10a      	bne.n	800571a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	440b      	add	r3, r1
 8005712:	335c      	adds	r3, #92	; 0x5c
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e0d9      	b.n	80058ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	440b      	add	r3, r1
 8005728:	335d      	adds	r3, #93	; 0x5d
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b05      	cmp	r3, #5
 800572e:	d10a      	bne.n	8005746 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	440b      	add	r3, r1
 800573e:	335c      	adds	r3, #92	; 0x5c
 8005740:	2205      	movs	r2, #5
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e0c3      	b.n	80058ce <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	440b      	add	r3, r1
 8005754:	335d      	adds	r3, #93	; 0x5d
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b06      	cmp	r3, #6
 800575a:	d00a      	beq.n	8005772 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	440b      	add	r3, r1
 800576a:	335d      	adds	r3, #93	; 0x5d
 800576c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800576e:	2b08      	cmp	r3, #8
 8005770:	d156      	bne.n	8005820 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	3358      	adds	r3, #88	; 0x58
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	1c59      	adds	r1, r3, #1
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4403      	add	r3, r0
 8005794:	3358      	adds	r3, #88	; 0x58
 8005796:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	440b      	add	r3, r1
 80057a6:	3358      	adds	r3, #88	; 0x58
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d914      	bls.n	80057d8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	440b      	add	r3, r1
 80057bc:	3358      	adds	r3, #88	; 0x58
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	440b      	add	r3, r1
 80057d0:	335c      	adds	r3, #92	; 0x5c
 80057d2:	2204      	movs	r2, #4
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e009      	b.n	80057ec <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	440b      	add	r3, r1
 80057e6:	335c      	adds	r3, #92	; 0x5c
 80057e8:	2202      	movs	r2, #2
 80057ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005802:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800580a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e056      	b.n	80058ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	335d      	adds	r3, #93	; 0x5d
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d123      	bne.n	800587e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	440b      	add	r3, r1
 8005844:	335c      	adds	r3, #92	; 0x5c
 8005846:	2202      	movs	r2, #2
 8005848:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005860:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005868:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4413      	add	r3, r2
 8005872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e027      	b.n	80058ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	335d      	adds	r3, #93	; 0x5d
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b07      	cmp	r3, #7
 8005892:	d11c      	bne.n	80058ce <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	440b      	add	r3, r1
 80058a2:	3358      	adds	r3, #88	; 0x58
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4403      	add	r3, r0
 80058b6:	3358      	adds	r3, #88	; 0x58
 80058b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	440b      	add	r3, r1
 80058c8:	335c      	adds	r3, #92	; 0x5c
 80058ca:	2204      	movs	r2, #4
 80058cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058da:	461a      	mov	r2, r3
 80058dc:	2302      	movs	r3, #2
 80058de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	b2d8      	uxtb	r0, r3
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	440b      	add	r3, r1
 80058f2:	335c      	adds	r3, #92	; 0x5c
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	4601      	mov	r1, r0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f00c fe46 	bl	801258c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005900:	e0d1      	b.n	8005aa6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d13e      	bne.n	8005996 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	440a      	add	r2, r1
 800592e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005932:	f043 0302 	orr.w	r3, r3, #2
 8005936:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	440b      	add	r3, r1
 8005946:	3358      	adds	r3, #88	; 0x58
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4403      	add	r3, r0
 800595a:	3358      	adds	r3, #88	; 0x58
 800595c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	440b      	add	r3, r1
 800596c:	335d      	adds	r3, #93	; 0x5d
 800596e:	2206      	movs	r2, #6
 8005970:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f007 fc90 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	461a      	mov	r2, r3
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	6093      	str	r3, [r2, #8]
}
 8005994:	e087      	b.n	8005aa6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d17c      	bne.n	8005aa6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	440b      	add	r3, r1
 80059ba:	333f      	adds	r3, #63	; 0x3f
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d122      	bne.n	8005a08 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	440b      	add	r3, r1
 80059d0:	3358      	adds	r3, #88	; 0x58
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f0:	f043 0302 	orr.w	r3, r3, #2
 80059f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	4611      	mov	r1, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f007 fc4e 	bl	800d2a2 <USB_HC_Halt>
 8005a06:	e045      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	333f      	adds	r3, #63	; 0x3f
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	333f      	adds	r3, #63	; 0x3f
 8005a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d12f      	bne.n	8005a94 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	440b      	add	r3, r1
 8005a42:	3358      	adds	r3, #88	; 0x58
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d121      	bne.n	8005a94 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	335d      	adds	r3, #93	; 0x5d
 8005a60:	2203      	movs	r2, #3
 8005a62:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a7e:	f043 0302 	orr.w	r3, r3, #2
 8005a82:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f007 fc07 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	6093      	str	r3, [r2, #8]
}
 8005aa6:	bf00      	nop
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d119      	bne.n	8005b12 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	461a      	mov	r2, r3
 8005aec:	2304      	movs	r3, #4
 8005aee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005b10:	e33e      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d141      	bne.n	8005bac <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	461a      	mov	r2, r3
 8005b36:	2320      	movs	r3, #32
 8005b38:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	440b      	add	r3, r1
 8005b48:	333d      	adds	r3, #61	; 0x3d
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	f040 831f 	bne.w	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	440b      	add	r3, r1
 8005b60:	333d      	adds	r3, #61	; 0x3d
 8005b62:	2200      	movs	r2, #0
 8005b64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	440b      	add	r3, r1
 8005b74:	335c      	adds	r3, #92	; 0x5c
 8005b76:	2202      	movs	r2, #2
 8005b78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f007 fb7c 	bl	800d2a2 <USB_HC_Halt>
}
 8005baa:	e2f1      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d13f      	bne.n	8005c42 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	440b      	add	r3, r1
 8005bd0:	335d      	adds	r3, #93	; 0x5d
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	440b      	add	r3, r1
 8005be4:	333d      	adds	r3, #61	; 0x3d
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	3358      	adds	r3, #88	; 0x58
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	4611      	mov	r1, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f007 fb3a 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2340      	movs	r3, #64	; 0x40
 8005c3e:	6093      	str	r3, [r2, #8]
}
 8005c40:	e2a6      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c58:	d122      	bne.n	8005ca0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f007 fb0c 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	461a      	mov	r2, r3
 8005c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c9c:	6093      	str	r3, [r2, #8]
}
 8005c9e:	e277      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d135      	bne.n	8005d22 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3358      	adds	r3, #88	; 0x58
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f007 fad4 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d06:	461a      	mov	r2, r3
 8005d08:	2301      	movs	r3, #1
 8005d0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	440b      	add	r3, r1
 8005d1a:	335d      	adds	r3, #93	; 0x5d
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
}
 8005d20:	e236      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d12b      	bne.n	8005d90 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d44:	461a      	mov	r2, r3
 8005d46:	2308      	movs	r3, #8
 8005d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d64:	f043 0302 	orr.w	r3, r3, #2
 8005d68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f007 fa94 	bl	800d2a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	440b      	add	r3, r1
 8005d88:	335d      	adds	r3, #93	; 0x5d
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	701a      	strb	r2, [r3, #0]
}
 8005d8e:	e1ff      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d155      	bne.n	8005e52 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	440b      	add	r3, r1
 8005db4:	3358      	adds	r3, #88	; 0x58
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	440b      	add	r3, r1
 8005dc8:	335d      	adds	r3, #93	; 0x5d
 8005dca:	2203      	movs	r2, #3
 8005dcc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	440b      	add	r3, r1
 8005ddc:	333d      	adds	r3, #61	; 0x3d
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d114      	bne.n	8005e0e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	440b      	add	r3, r1
 8005df2:	333c      	adds	r3, #60	; 0x3c
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	440b      	add	r3, r1
 8005e08:	333d      	adds	r3, #61	; 0x3d
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f007 fa32 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	6093      	str	r3, [r2, #8]
}
 8005e50:	e19e      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e64:	2b80      	cmp	r3, #128	; 0x80
 8005e66:	d12b      	bne.n	8005ec0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e82:	f043 0302 	orr.w	r3, r3, #2
 8005e86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f007 fa05 	bl	800d2a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	440b      	add	r3, r1
 8005ea6:	335d      	adds	r3, #93	; 0x5d
 8005ea8:	2206      	movs	r2, #6
 8005eaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	6093      	str	r3, [r2, #8]
}
 8005ebe:	e167      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed6:	d135      	bne.n	8005f44 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef2:	f043 0302 	orr.w	r3, r3, #2
 8005ef6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f007 f9cd 	bl	800d2a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	461a      	mov	r2, r3
 8005f16:	2310      	movs	r3, #16
 8005f18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	461a      	mov	r2, r3
 8005f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	440b      	add	r3, r1
 8005f3c:	335d      	adds	r3, #93	; 0x5d
 8005f3e:	2208      	movs	r2, #8
 8005f40:	701a      	strb	r2, [r3, #0]
}
 8005f42:	e125      	b.n	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	f040 811a 	bne.w	8006190 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f76:	f023 0302 	bic.w	r3, r3, #2
 8005f7a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	440b      	add	r3, r1
 8005f8a:	335d      	adds	r3, #93	; 0x5d
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d137      	bne.n	8006002 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	440b      	add	r3, r1
 8005fa0:	335c      	adds	r3, #92	; 0x5c
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	440b      	add	r3, r1
 8005fb4:	333f      	adds	r3, #63	; 0x3f
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d00b      	beq.n	8005fd4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	333f      	adds	r3, #63	; 0x3f
 8005fcc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	f040 80c5 	bne.w	800615e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	440b      	add	r3, r1
 8005fe2:	3351      	adds	r3, #81	; 0x51
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f083 0301 	eor.w	r3, r3, #1
 8005fea:	b2d8      	uxtb	r0, r3
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3351      	adds	r3, #81	; 0x51
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e0ad      	b.n	800615e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	335d      	adds	r3, #93	; 0x5d
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d10a      	bne.n	800602e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	440b      	add	r3, r1
 8006026:	335c      	adds	r3, #92	; 0x5c
 8006028:	2202      	movs	r2, #2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	e097      	b.n	800615e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	440b      	add	r3, r1
 800603c:	335d      	adds	r3, #93	; 0x5d
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d10a      	bne.n	800605a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	440b      	add	r3, r1
 8006052:	335c      	adds	r3, #92	; 0x5c
 8006054:	2202      	movs	r2, #2
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e081      	b.n	800615e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	440b      	add	r3, r1
 8006068:	335d      	adds	r3, #93	; 0x5d
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b05      	cmp	r3, #5
 800606e:	d10a      	bne.n	8006086 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	335c      	adds	r3, #92	; 0x5c
 8006080:	2205      	movs	r2, #5
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e06b      	b.n	800615e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	440b      	add	r3, r1
 8006094:	335d      	adds	r3, #93	; 0x5d
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b06      	cmp	r3, #6
 800609a:	d00a      	beq.n	80060b2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	335d      	adds	r3, #93	; 0x5d
 80060ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d155      	bne.n	800615e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	440b      	add	r3, r1
 80060c0:	3358      	adds	r3, #88	; 0x58
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4403      	add	r3, r0
 80060d4:	3358      	adds	r3, #88	; 0x58
 80060d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	440b      	add	r3, r1
 80060e6:	3358      	adds	r3, #88	; 0x58
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d914      	bls.n	8006118 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	440b      	add	r3, r1
 80060fc:	3358      	adds	r3, #88	; 0x58
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	440b      	add	r3, r1
 8006110:	335c      	adds	r3, #92	; 0x5c
 8006112:	2204      	movs	r2, #4
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e009      	b.n	800612c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	440b      	add	r3, r1
 8006126:	335c      	adds	r3, #92	; 0x5c
 8006128:	2202      	movs	r2, #2
 800612a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4413      	add	r3, r2
 8006134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006142:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800614a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4413      	add	r3, r2
 8006166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616a:	461a      	mov	r2, r3
 800616c:	2302      	movs	r3, #2
 800616e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	b2d8      	uxtb	r0, r3
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	440b      	add	r3, r1
 8006182:	335c      	adds	r3, #92	; 0x5c
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	4601      	mov	r1, r0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f00c f9fe 	bl	801258c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006190:	bf00      	nop
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	; 0x28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	0c5b      	lsrs	r3, r3, #17
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	091b      	lsrs	r3, r3, #4
 80061c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d003      	beq.n	80061dc <HCD_RXQLVL_IRQHandler+0x44>
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	f000 8082 	beq.w	80062de <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80061da:	e083      	b.n	80062e4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d07f      	beq.n	80062e2 <HCD_RXQLVL_IRQHandler+0x14a>
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	440b      	add	r3, r1
 80061f0:	3344      	adds	r3, #68	; 0x44
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d074      	beq.n	80062e2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	440b      	add	r3, r1
 800620a:	3344      	adds	r3, #68	; 0x44
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	b292      	uxth	r2, r2
 8006212:	4619      	mov	r1, r3
 8006214:	f006 fbf1 	bl	800c9fa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	440b      	add	r3, r1
 8006226:	3344      	adds	r3, #68	; 0x44
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	18d1      	adds	r1, r2, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4403      	add	r3, r0
 800623c:	3344      	adds	r3, #68	; 0x44
 800623e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	440b      	add	r3, r1
 800624e:	334c      	adds	r3, #76	; 0x4c
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	18d1      	adds	r1, r2, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4403      	add	r3, r0
 8006264:	334c      	adds	r3, #76	; 0x4c
 8006266:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <HCD_RXQLVL_IRQHandler+0x154>)
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d031      	beq.n	80062e2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006294:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800629c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	440b      	add	r3, r1
 80062be:	3350      	adds	r3, #80	; 0x50
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f083 0301 	eor.w	r3, r3, #1
 80062c6:	b2d8      	uxtb	r0, r3
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	440b      	add	r3, r1
 80062d6:	3350      	adds	r3, #80	; 0x50
 80062d8:	4602      	mov	r2, r0
 80062da:	701a      	strb	r2, [r3, #0]
      break;
 80062dc:	e001      	b.n	80062e2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80062de:	bf00      	nop
 80062e0:	e000      	b.n	80062e4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80062e2:	bf00      	nop
  }
}
 80062e4:	bf00      	nop
 80062e6:	3728      	adds	r7, #40	; 0x28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	1ff80000 	.word	0x1ff80000

080062f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800631c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b02      	cmp	r3, #2
 8006326:	d10b      	bne.n	8006340 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b01      	cmp	r3, #1
 8006330:	d102      	bne.n	8006338 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f00c f90e 	bl	8012554 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b08      	cmp	r3, #8
 8006348:	d132      	bne.n	80063b0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f043 0308 	orr.w	r3, r3, #8
 8006350:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b04      	cmp	r3, #4
 800635a:	d126      	bne.n	80063aa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d113      	bne.n	800638c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800636a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800636e:	d106      	bne.n	800637e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f006 fc6e 	bl	800cc58 <USB_InitFSLSPClkSel>
 800637c:	e011      	b.n	80063a2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2101      	movs	r1, #1
 8006384:	4618      	mov	r0, r3
 8006386:	f006 fc67 	bl	800cc58 <USB_InitFSLSPClkSel>
 800638a:	e00a      	b.n	80063a2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d106      	bne.n	80063a2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639a:	461a      	mov	r2, r3
 800639c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80063a0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f00c f904 	bl	80125b0 <HAL_HCD_PortEnabled_Callback>
 80063a8:	e002      	b.n	80063b0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f00c f90e 	bl	80125cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d103      	bne.n	80063c2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f043 0320 	orr.w	r3, r3, #32
 80063c0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063c8:	461a      	mov	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6013      	str	r3, [r2, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e07f      	b.n	80064ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fa ff18 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0201 	bic.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d107      	bne.n	8006452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800644e:	609a      	str	r2, [r3, #8]
 8006450:	e006      	b.n	8006460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800645e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d104      	bne.n	8006472 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6859      	ldr	r1, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <HAL_I2C_Init+0x11c>)
 800647e:	430b      	orrs	r3, r1
 8006480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	ea42 0103 	orr.w	r1, r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	021a      	lsls	r2, r3, #8
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1a      	ldr	r2, [r3, #32]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	02008000 	.word	0x02008000

080064f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b20      	cmp	r3, #32
 800650c:	d138      	bne.n	8006580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006518:	2302      	movs	r3, #2
 800651a:	e032      	b.n	8006582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800654a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d139      	bne.n	8006618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e033      	b.n	800661a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2224      	movs	r2, #36	; 0x24
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e000      	b.n	800661a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
  }
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e0bf      	b.n	80067ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa ff1e 	bl	8001490 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800666a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6999      	ldr	r1, [r3, #24]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006680:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6899      	ldr	r1, [r3, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b4a      	ldr	r3, [pc, #296]	; (80067c4 <HAL_LTDC_Init+0x19c>)
 800669c:	400b      	ands	r3, r1
 800669e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	041b      	lsls	r3, r3, #16
 80066a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6899      	ldr	r1, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68d9      	ldr	r1, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	4b3e      	ldr	r3, [pc, #248]	; (80067c4 <HAL_LTDC_Init+0x19c>)
 80066ca:	400b      	ands	r3, r1
 80066cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68d9      	ldr	r1, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6919      	ldr	r1, [r3, #16]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b33      	ldr	r3, [pc, #204]	; (80067c4 <HAL_LTDC_Init+0x19c>)
 80066f8:	400b      	ands	r3, r1
 80066fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6919      	ldr	r1, [r3, #16]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6959      	ldr	r1, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <HAL_LTDC_Init+0x19c>)
 8006726:	400b      	ands	r3, r1
 8006728:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6959      	ldr	r1, [r3, #20]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0206 	orr.w	r2, r2, #6
 8006796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	f000f800 	.word	0xf000f800

080067c8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067de:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d023      	beq.n	8006832 <HAL_LTDC_IRQHandler+0x6a>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01e      	beq.n	8006832 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0204 	bic.w	r2, r2, #4
 8006802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2204      	movs	r2, #4
 800680a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006812:	f043 0201 	orr.w	r2, r3, #1
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2204      	movs	r2, #4
 8006820:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f86f 	bl	8006910 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d023      	beq.n	8006884 <HAL_LTDC_IRQHandler+0xbc>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01e      	beq.n	8006884 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0202 	bic.w	r2, r2, #2
 8006854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2202      	movs	r2, #2
 800685c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006864:	f043 0202 	orr.w	r2, r3, #2
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2204      	movs	r2, #4
 8006872:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f846 	bl	8006910 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01b      	beq.n	80068c6 <HAL_LTDC_IRQHandler+0xfe>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d016      	beq.n	80068c6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2201      	movs	r2, #1
 80068ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f82f 	bl	8006924 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01b      	beq.n	8006908 <HAL_LTDC_IRQHandler+0x140>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d016      	beq.n	8006908 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0208 	bic.w	r2, r2, #8
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2208      	movs	r2, #8
 80068f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f818 	bl	8006938 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800694c:	b5b0      	push	{r4, r5, r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_LTDC_ConfigLayer+0x1a>
 8006962:	2302      	movs	r3, #2
 8006964:	e02c      	b.n	80069c0 <HAL_LTDC_ConfigLayer+0x74>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2202      	movs	r2, #2
 8006972:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2134      	movs	r1, #52	; 0x34
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4614      	mov	r4, r2
 800698a:	461d      	mov	r5, r3
 800698c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800698e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f811 	bl	80069c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bdb0      	pop	{r4, r5, r7, pc}

080069c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b089      	sub	sp, #36	; 0x24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e4:	4413      	add	r3, r2
 80069e6:	041b      	lsls	r3, r3, #16
 80069e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	4413      	add	r3, r2
 80069f6:	3384      	adds	r3, #132	; 0x84
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	4611      	mov	r1, r2
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	01d2      	lsls	r2, r2, #7
 8006a04:	440a      	add	r2, r1
 8006a06:	3284      	adds	r2, #132	; 0x84
 8006a08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	0c1b      	lsrs	r3, r3, #16
 8006a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a1e:	4413      	add	r3, r2
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4619      	mov	r1, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	01db      	lsls	r3, r3, #7
 8006a2c:	440b      	add	r3, r1
 8006a2e:	3384      	adds	r3, #132	; 0x84
 8006a30:	4619      	mov	r1, r3
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a46:	4413      	add	r3, r2
 8006a48:	041b      	lsls	r3, r3, #16
 8006a4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	01db      	lsls	r3, r3, #7
 8006a56:	4413      	add	r3, r2
 8006a58:	3384      	adds	r3, #132	; 0x84
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	4611      	mov	r1, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	01d2      	lsls	r2, r2, #7
 8006a66:	440a      	add	r2, r1
 8006a68:	3284      	adds	r2, #132	; 0x84
 8006a6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a7e:	4413      	add	r3, r2
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4619      	mov	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	01db      	lsls	r3, r3, #7
 8006a8c:	440b      	add	r3, r1
 8006a8e:	3384      	adds	r3, #132	; 0x84
 8006a90:	4619      	mov	r1, r3
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	01db      	lsls	r3, r3, #7
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3384      	adds	r3, #132	; 0x84
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	4611      	mov	r1, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	01d2      	lsls	r2, r2, #7
 8006ab2:	440a      	add	r2, r1
 8006ab4:	3284      	adds	r2, #132	; 0x84
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	01db      	lsls	r3, r3, #7
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3384      	adds	r3, #132	; 0x84
 8006aca:	461a      	mov	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	061b      	lsls	r3, r3, #24
 8006aec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	01db      	lsls	r3, r3, #7
 8006af8:	4413      	add	r3, r2
 8006afa:	3384      	adds	r3, #132	; 0x84
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	4413      	add	r3, r2
 8006b0a:	3384      	adds	r3, #132	; 0x84
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b18:	461a      	mov	r2, r3
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	431a      	orrs	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	01db      	lsls	r3, r3, #7
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3384      	adds	r3, #132	; 0x84
 8006b30:	4619      	mov	r1, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	01db      	lsls	r3, r3, #7
 8006b42:	4413      	add	r3, r2
 8006b44:	3384      	adds	r3, #132	; 0x84
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	01d2      	lsls	r2, r2, #7
 8006b52:	440a      	add	r2, r1
 8006b54:	3284      	adds	r2, #132	; 0x84
 8006b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	01db      	lsls	r3, r3, #7
 8006b66:	4413      	add	r3, r2
 8006b68:	3384      	adds	r3, #132	; 0x84
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	01db      	lsls	r3, r3, #7
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3384      	adds	r3, #132	; 0x84
 8006b80:	69da      	ldr	r2, [r3, #28]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	01db      	lsls	r3, r3, #7
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3384      	adds	r3, #132	; 0x84
 8006b90:	4619      	mov	r1, r3
 8006b92:	4b58      	ldr	r3, [pc, #352]	; (8006cf4 <LTDC_SetConfig+0x32c>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	68f9      	ldr	r1, [r7, #12]
 8006ba2:	6809      	ldr	r1, [r1, #0]
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	01c9      	lsls	r1, r1, #7
 8006baa:	4401      	add	r1, r0
 8006bac:	3184      	adds	r1, #132	; 0x84
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	01db      	lsls	r3, r3, #7
 8006bbc:	4413      	add	r3, r2
 8006bbe:	3384      	adds	r3, #132	; 0x84
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	01db      	lsls	r3, r3, #7
 8006bcc:	4413      	add	r3, r2
 8006bce:	3384      	adds	r3, #132	; 0x84
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	4413      	add	r3, r2
 8006be2:	3384      	adds	r3, #132	; 0x84
 8006be4:	461a      	mov	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e01b      	b.n	8006c32 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d102      	bne.n	8006c08 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006c02:	2303      	movs	r3, #3
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e014      	b.n	8006c32 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d00b      	beq.n	8006c28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d007      	beq.n	8006c28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d003      	beq.n	8006c28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d102      	bne.n	8006c2e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	e001      	b.n	8006c32 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	01db      	lsls	r3, r3, #7
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3384      	adds	r3, #132	; 0x84
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	6812      	ldr	r2, [r2, #0]
 8006c46:	4611      	mov	r1, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	01d2      	lsls	r2, r2, #7
 8006c4c:	440a      	add	r2, r1
 8006c4e:	3284      	adds	r2, #132	; 0x84
 8006c50:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c54:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	fb02 f303 	mul.w	r3, r2, r3
 8006c60:	041a      	lsls	r2, r3, #16
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	1acb      	subs	r3, r1, r3
 8006c6c:	69f9      	ldr	r1, [r7, #28]
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	3303      	adds	r3, #3
 8006c74:	68f9      	ldr	r1, [r7, #12]
 8006c76:	6809      	ldr	r1, [r1, #0]
 8006c78:	4608      	mov	r0, r1
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	01c9      	lsls	r1, r1, #7
 8006c7e:	4401      	add	r1, r0
 8006c80:	3184      	adds	r1, #132	; 0x84
 8006c82:	4313      	orrs	r3, r2
 8006c84:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	4413      	add	r3, r2
 8006c92:	3384      	adds	r3, #132	; 0x84
 8006c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	01db      	lsls	r3, r3, #7
 8006ca0:	440b      	add	r3, r1
 8006ca2:	3384      	adds	r3, #132	; 0x84
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <LTDC_SetConfig+0x330>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	01db      	lsls	r3, r3, #7
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3384      	adds	r3, #132	; 0x84
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	01db      	lsls	r3, r3, #7
 8006ccc:	4413      	add	r3, r2
 8006cce:	3384      	adds	r3, #132	; 0x84
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	01d2      	lsls	r2, r2, #7
 8006cdc:	440a      	add	r2, r1
 8006cde:	3284      	adds	r2, #132	; 0x84
 8006ce0:	f043 0301 	orr.w	r3, r3, #1
 8006ce4:	6013      	str	r3, [r2, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3724      	adds	r7, #36	; 0x24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	fffff8f8 	.word	0xfffff8f8
 8006cf8:	fffff800 	.word	0xfffff800

08006cfc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0a:	6013      	str	r3, [r2, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40007000 	.word	0x40007000

08006d1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d26:	4b23      	ldr	r3, [pc, #140]	; (8006db4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	4a22      	ldr	r2, [pc, #136]	; (8006db4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d30:	6413      	str	r3, [r2, #64]	; 0x40
 8006d32:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d3e:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1d      	ldr	r2, [pc, #116]	; (8006db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d4a:	f7fc f88b 	bl	8002e64 <HAL_GetTick>
 8006d4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d50:	e009      	b.n	8006d66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d52:	f7fc f887 	bl	8002e64 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d60:	d901      	bls.n	8006d66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e022      	b.n	8006dac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d72:	d1ee      	bne.n	8006d52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d74:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a0f      	ldr	r2, [pc, #60]	; (8006db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d80:	f7fc f870 	bl	8002e64 <HAL_GetTick>
 8006d84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d86:	e009      	b.n	8006d9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d88:	f7fc f86c 	bl	8002e64 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d96:	d901      	bls.n	8006d9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e007      	b.n	8006dac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006da8:	d1ee      	bne.n	8006d88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40023800 	.word	0x40023800
 8006db8:	40007000 	.word	0x40007000

08006dbc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006dc4:	f7fc f84e 	bl	8002e64 <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e067      	b.n	8006ea4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10b      	bne.n	8006df8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fa fd83 	bl	80018f4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006dee:	f241 3188 	movw	r1, #5000	; 0x1388
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f85e 	bl	8006eb4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	021a      	lsls	r2, r3, #8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2120      	movs	r1, #32
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f856 	bl	8006ed0 <QSPI_WaitFlagStateUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d135      	bne.n	8006e9a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <HAL_QSPI_Init+0xf0>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6852      	ldr	r2, [r2, #4]
 8006e3c:	0611      	lsls	r1, r2, #24
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68d2      	ldr	r2, [r2, #12]
 8006e42:	4311      	orrs	r1, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	69d2      	ldr	r2, [r2, #28]
 8006e48:	4311      	orrs	r1, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6a12      	ldr	r2, [r2, #32]
 8006e4e:	4311      	orrs	r1, r2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <HAL_QSPI_Init+0xf4>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6912      	ldr	r2, [r2, #16]
 8006e66:	0411      	lsls	r1, r2, #16
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6952      	ldr	r2, [r2, #20]
 8006e6c:	4311      	orrs	r1, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6992      	ldr	r2, [r2, #24]
 8006e72:	4311      	orrs	r1, r2
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	00ffff2f 	.word	0x00ffff2f
 8006eb0:	ffe0f8fe 	.word	0xffe0f8fe

08006eb4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ee0:	e01a      	b.n	8006f18 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d016      	beq.n	8006f18 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eea:	f7fb ffbb 	bl	8002e64 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d302      	bcc.n	8006f00 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2204      	movs	r2, #4
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0c:	f043 0201 	orr.w	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e00e      	b.n	8006f36 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4013      	ands	r3, r2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf14      	ite	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	2300      	moveq	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d1d6      	bne.n	8006ee2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e291      	b.n	800747a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 8087 	beq.w	8007072 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f64:	4b96      	ldr	r3, [pc, #600]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 030c 	and.w	r3, r3, #12
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d00c      	beq.n	8006f8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f70:	4b93      	ldr	r3, [pc, #588]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 030c 	and.w	r3, r3, #12
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d112      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x62>
 8006f7c:	4b90      	ldr	r3, [pc, #576]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f88:	d10b      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f8a:	4b8d      	ldr	r3, [pc, #564]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d06c      	beq.n	8007070 <HAL_RCC_OscConfig+0x130>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d168      	bne.n	8007070 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e26b      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006faa:	d106      	bne.n	8006fba <HAL_RCC_OscConfig+0x7a>
 8006fac:	4b84      	ldr	r3, [pc, #528]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a83      	ldr	r2, [pc, #524]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e02e      	b.n	8007018 <HAL_RCC_OscConfig+0xd8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x9c>
 8006fc2:	4b7f      	ldr	r3, [pc, #508]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a7e      	ldr	r2, [pc, #504]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	4b7c      	ldr	r3, [pc, #496]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a7b      	ldr	r2, [pc, #492]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e01d      	b.n	8007018 <HAL_RCC_OscConfig+0xd8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCC_OscConfig+0xc0>
 8006fe6:	4b76      	ldr	r3, [pc, #472]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a75      	ldr	r2, [pc, #468]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b73      	ldr	r3, [pc, #460]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a72      	ldr	r2, [pc, #456]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e00b      	b.n	8007018 <HAL_RCC_OscConfig+0xd8>
 8007000:	4b6f      	ldr	r3, [pc, #444]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a6e      	ldr	r2, [pc, #440]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	4b6c      	ldr	r3, [pc, #432]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a6b      	ldr	r2, [pc, #428]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d013      	beq.n	8007048 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fb ff20 	bl	8002e64 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007028:	f7fb ff1c 	bl	8002e64 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e21f      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	4b61      	ldr	r3, [pc, #388]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0xe8>
 8007046:	e014      	b.n	8007072 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007048:	f7fb ff0c 	bl	8002e64 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007050:	f7fb ff08 	bl	8002e64 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	; 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e20b      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007062:	4b57      	ldr	r3, [pc, #348]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0x110>
 800706e:	e000      	b.n	8007072 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d069      	beq.n	8007152 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800707e:	4b50      	ldr	r3, [pc, #320]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708a:	4b4d      	ldr	r3, [pc, #308]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 030c 	and.w	r3, r3, #12
 8007092:	2b08      	cmp	r3, #8
 8007094:	d11c      	bne.n	80070d0 <HAL_RCC_OscConfig+0x190>
 8007096:	4b4a      	ldr	r3, [pc, #296]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d116      	bne.n	80070d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a2:	4b47      	ldr	r3, [pc, #284]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_RCC_OscConfig+0x17a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e1df      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ba:	4b41      	ldr	r3, [pc, #260]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	493d      	ldr	r1, [pc, #244]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ce:	e040      	b.n	8007152 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d023      	beq.n	8007120 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d8:	4b39      	ldr	r3, [pc, #228]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a38      	ldr	r2, [pc, #224]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fb febe 	bl	8002e64 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ec:	f7fb feba 	bl	8002e64 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e1bd      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070fe:	4b30      	ldr	r3, [pc, #192]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800710a:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	4929      	ldr	r1, [pc, #164]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800711a:	4313      	orrs	r3, r2
 800711c:	600b      	str	r3, [r1, #0]
 800711e:	e018      	b.n	8007152 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007120:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007126:	f023 0301 	bic.w	r3, r3, #1
 800712a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fb fe9a 	bl	8002e64 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007134:	f7fb fe96 	bl	8002e64 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e199      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007146:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f0      	bne.n	8007134 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d038      	beq.n	80071d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d019      	beq.n	800719a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007166:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 8007168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716a:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007172:	f7fb fe77 	bl	8002e64 <HAL_GetTick>
 8007176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717a:	f7fb fe73 	bl	8002e64 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e176      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800718c:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800718e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d0f0      	beq.n	800717a <HAL_RCC_OscConfig+0x23a>
 8007198:	e01a      	b.n	80071d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800719a:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 800719c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800719e:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <HAL_RCC_OscConfig+0x280>)
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a6:	f7fb fe5d 	bl	8002e64 <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ac:	e00a      	b.n	80071c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ae:	f7fb fe59 	bl	8002e64 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d903      	bls.n	80071c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e15c      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
 80071c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c4:	4b91      	ldr	r3, [pc, #580]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80071c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1ee      	bne.n	80071ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80a4 	beq.w	8007326 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071de:	4b8b      	ldr	r3, [pc, #556]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10d      	bne.n	8007206 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ea:	4b88      	ldr	r3, [pc, #544]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	4a87      	ldr	r2, [pc, #540]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80071f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f4:	6413      	str	r3, [r2, #64]	; 0x40
 80071f6:	4b85      	ldr	r3, [pc, #532]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007206:	4b82      	ldr	r3, [pc, #520]	; (8007410 <HAL_RCC_OscConfig+0x4d0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d118      	bne.n	8007244 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007212:	4b7f      	ldr	r3, [pc, #508]	; (8007410 <HAL_RCC_OscConfig+0x4d0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a7e      	ldr	r2, [pc, #504]	; (8007410 <HAL_RCC_OscConfig+0x4d0>)
 8007218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800721e:	f7fb fe21 	bl	8002e64 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007226:	f7fb fe1d 	bl	8002e64 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b64      	cmp	r3, #100	; 0x64
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e120      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007238:	4b75      	ldr	r3, [pc, #468]	; (8007410 <HAL_RCC_OscConfig+0x4d0>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0f0      	beq.n	8007226 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d106      	bne.n	800725a <HAL_RCC_OscConfig+0x31a>
 800724c:	4b6f      	ldr	r3, [pc, #444]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	4a6e      	ldr	r2, [pc, #440]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	6713      	str	r3, [r2, #112]	; 0x70
 8007258:	e02d      	b.n	80072b6 <HAL_RCC_OscConfig+0x376>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10c      	bne.n	800727c <HAL_RCC_OscConfig+0x33c>
 8007262:	4b6a      	ldr	r3, [pc, #424]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	4a69      	ldr	r2, [pc, #420]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	6713      	str	r3, [r2, #112]	; 0x70
 800726e:	4b67      	ldr	r3, [pc, #412]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4a66      	ldr	r2, [pc, #408]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007274:	f023 0304 	bic.w	r3, r3, #4
 8007278:	6713      	str	r3, [r2, #112]	; 0x70
 800727a:	e01c      	b.n	80072b6 <HAL_RCC_OscConfig+0x376>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b05      	cmp	r3, #5
 8007282:	d10c      	bne.n	800729e <HAL_RCC_OscConfig+0x35e>
 8007284:	4b61      	ldr	r3, [pc, #388]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	4a60      	ldr	r2, [pc, #384]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 800728a:	f043 0304 	orr.w	r3, r3, #4
 800728e:	6713      	str	r3, [r2, #112]	; 0x70
 8007290:	4b5e      	ldr	r3, [pc, #376]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007294:	4a5d      	ldr	r2, [pc, #372]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	6713      	str	r3, [r2, #112]	; 0x70
 800729c:	e00b      	b.n	80072b6 <HAL_RCC_OscConfig+0x376>
 800729e:	4b5b      	ldr	r3, [pc, #364]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a5a      	ldr	r2, [pc, #360]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	6713      	str	r3, [r2, #112]	; 0x70
 80072aa:	4b58      	ldr	r3, [pc, #352]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	4a57      	ldr	r2, [pc, #348]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80072b0:	f023 0304 	bic.w	r3, r3, #4
 80072b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d015      	beq.n	80072ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072be:	f7fb fdd1 	bl	8002e64 <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c4:	e00a      	b.n	80072dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c6:	f7fb fdcd 	bl	8002e64 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e0ce      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072dc:	4b4b      	ldr	r3, [pc, #300]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80072de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0ee      	beq.n	80072c6 <HAL_RCC_OscConfig+0x386>
 80072e8:	e014      	b.n	8007314 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ea:	f7fb fdbb 	bl	8002e64 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072f0:	e00a      	b.n	8007308 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f2:	f7fb fdb7 	bl	8002e64 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007300:	4293      	cmp	r3, r2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e0b8      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007308:	4b40      	ldr	r3, [pc, #256]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1ee      	bne.n	80072f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d105      	bne.n	8007326 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800731a:	4b3c      	ldr	r3, [pc, #240]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	4a3b      	ldr	r2, [pc, #236]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80a4 	beq.w	8007478 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007330:	4b36      	ldr	r3, [pc, #216]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 030c 	and.w	r3, r3, #12
 8007338:	2b08      	cmp	r3, #8
 800733a:	d06b      	beq.n	8007414 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d149      	bne.n	80073d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007344:	4b31      	ldr	r3, [pc, #196]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a30      	ldr	r2, [pc, #192]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 800734a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800734e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007350:	f7fb fd88 	bl	8002e64 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007358:	f7fb fd84 	bl	8002e64 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e087      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736a:	4b28      	ldr	r3, [pc, #160]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f0      	bne.n	8007358 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69da      	ldr	r2, [r3, #28]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	019b      	lsls	r3, r3, #6
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	3b01      	subs	r3, #1
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	061b      	lsls	r3, r3, #24
 800739a:	4313      	orrs	r3, r2
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 800739e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073a4:	4b19      	ldr	r3, [pc, #100]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80073aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b0:	f7fb fd58 	bl	8002e64 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b8:	f7fb fd54 	bl	8002e64 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e057      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ca:	4b10      	ldr	r3, [pc, #64]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0f0      	beq.n	80073b8 <HAL_RCC_OscConfig+0x478>
 80073d6:	e04f      	b.n	8007478 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a0b      	ldr	r2, [pc, #44]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 80073de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fb fd3e 	bl	8002e64 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ec:	f7fb fd3a 	bl	8002e64 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e03d      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fe:	4b03      	ldr	r3, [pc, #12]	; (800740c <HAL_RCC_OscConfig+0x4cc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x4ac>
 800740a:	e035      	b.n	8007478 <HAL_RCC_OscConfig+0x538>
 800740c:	40023800 	.word	0x40023800
 8007410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <HAL_RCC_OscConfig+0x544>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d028      	beq.n	8007474 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800742c:	429a      	cmp	r2, r3
 800742e:	d121      	bne.n	8007474 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800743a:	429a      	cmp	r2, r3
 800743c:	d11a      	bne.n	8007474 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800744a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800744c:	4293      	cmp	r3, r2
 800744e:	d111      	bne.n	8007474 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	3b01      	subs	r3, #1
 800745e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007460:	429a      	cmp	r2, r3
 8007462:	d107      	bne.n	8007474 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007470:	429a      	cmp	r2, r3
 8007472:	d001      	beq.n	8007478 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40023800 	.word	0x40023800

08007488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0d0      	b.n	8007642 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074a0:	4b6a      	ldr	r3, [pc, #424]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d910      	bls.n	80074d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ae:	4b67      	ldr	r3, [pc, #412]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f023 020f 	bic.w	r2, r3, #15
 80074b6:	4965      	ldr	r1, [pc, #404]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074be:	4b63      	ldr	r3, [pc, #396]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d001      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0b8      	b.n	8007642 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d020      	beq.n	800751e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074e8:	4b59      	ldr	r3, [pc, #356]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	4a58      	ldr	r2, [pc, #352]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 80074ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007500:	4b53      	ldr	r3, [pc, #332]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	4a52      	ldr	r2, [pc, #328]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 8007506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800750a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800750c:	4b50      	ldr	r3, [pc, #320]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	494d      	ldr	r1, [pc, #308]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 800751a:	4313      	orrs	r3, r2
 800751c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d040      	beq.n	80075ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d107      	bne.n	8007542 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007532:	4b47      	ldr	r3, [pc, #284]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d115      	bne.n	800756a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e07f      	b.n	8007642 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d107      	bne.n	800755a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800754a:	4b41      	ldr	r3, [pc, #260]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e073      	b.n	8007642 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800755a:	4b3d      	ldr	r3, [pc, #244]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e06b      	b.n	8007642 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800756a:	4b39      	ldr	r3, [pc, #228]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f023 0203 	bic.w	r2, r3, #3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	4936      	ldr	r1, [pc, #216]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 8007578:	4313      	orrs	r3, r2
 800757a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800757c:	f7fb fc72 	bl	8002e64 <HAL_GetTick>
 8007580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007582:	e00a      	b.n	800759a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007584:	f7fb fc6e 	bl	8002e64 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007592:	4293      	cmp	r3, r2
 8007594:	d901      	bls.n	800759a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e053      	b.n	8007642 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800759a:	4b2d      	ldr	r3, [pc, #180]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 020c 	and.w	r2, r3, #12
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d1eb      	bne.n	8007584 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075ac:	4b27      	ldr	r3, [pc, #156]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d210      	bcs.n	80075dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b24      	ldr	r3, [pc, #144]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 020f 	bic.w	r2, r3, #15
 80075c2:	4922      	ldr	r1, [pc, #136]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b20      	ldr	r3, [pc, #128]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e032      	b.n	8007642 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075e8:	4b19      	ldr	r3, [pc, #100]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	4916      	ldr	r1, [pc, #88]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d009      	beq.n	800761a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007606:	4b12      	ldr	r3, [pc, #72]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	490e      	ldr	r1, [pc, #56]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 8007616:	4313      	orrs	r3, r2
 8007618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800761a:	f000 f821 	bl	8007660 <HAL_RCC_GetSysClockFreq>
 800761e:	4601      	mov	r1, r0
 8007620:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	091b      	lsrs	r3, r3, #4
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <HAL_RCC_ClockConfig+0x1cc>)
 800762c:	5cd3      	ldrb	r3, [r2, r3]
 800762e:	fa21 f303 	lsr.w	r3, r1, r3
 8007632:	4a09      	ldr	r2, [pc, #36]	; (8007658 <HAL_RCC_ClockConfig+0x1d0>)
 8007634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <HAL_RCC_ClockConfig+0x1d4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7fa fd78 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	40023c00 	.word	0x40023c00
 8007650:	40023800 	.word	0x40023800
 8007654:	080133e4 	.word	0x080133e4
 8007658:	20000000 	.word	0x20000000
 800765c:	20000004 	.word	0x20000004

08007660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	607b      	str	r3, [r7, #4]
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	2300      	movs	r3, #0
 8007670:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007676:	4b50      	ldr	r3, [pc, #320]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 030c 	and.w	r3, r3, #12
 800767e:	2b04      	cmp	r3, #4
 8007680:	d007      	beq.n	8007692 <HAL_RCC_GetSysClockFreq+0x32>
 8007682:	2b08      	cmp	r3, #8
 8007684:	d008      	beq.n	8007698 <HAL_RCC_GetSysClockFreq+0x38>
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 808d 	bne.w	80077a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800768c:	4b4b      	ldr	r3, [pc, #300]	; (80077bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800768e:	60bb      	str	r3, [r7, #8]
      break;
 8007690:	e08c      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007692:	4b4b      	ldr	r3, [pc, #300]	; (80077c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007694:	60bb      	str	r3, [r7, #8]
      break;
 8007696:	e089      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007698:	4b47      	ldr	r3, [pc, #284]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076a2:	4b45      	ldr	r3, [pc, #276]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d023      	beq.n	80076f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ae:	4b42      	ldr	r3, [pc, #264]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	099b      	lsrs	r3, r3, #6
 80076b4:	f04f 0400 	mov.w	r4, #0
 80076b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	ea03 0501 	and.w	r5, r3, r1
 80076c4:	ea04 0602 	and.w	r6, r4, r2
 80076c8:	4a3d      	ldr	r2, [pc, #244]	; (80077c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80076ca:	fb02 f106 	mul.w	r1, r2, r6
 80076ce:	2200      	movs	r2, #0
 80076d0:	fb02 f205 	mul.w	r2, r2, r5
 80076d4:	440a      	add	r2, r1
 80076d6:	493a      	ldr	r1, [pc, #232]	; (80077c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80076d8:	fba5 0101 	umull	r0, r1, r5, r1
 80076dc:	1853      	adds	r3, r2, r1
 80076de:	4619      	mov	r1, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f04f 0400 	mov.w	r4, #0
 80076e6:	461a      	mov	r2, r3
 80076e8:	4623      	mov	r3, r4
 80076ea:	f7f8 fd91 	bl	8000210 <__aeabi_uldivmod>
 80076ee:	4603      	mov	r3, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e049      	b.n	800778a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f6:	4b30      	ldr	r3, [pc, #192]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	099b      	lsrs	r3, r3, #6
 80076fc:	f04f 0400 	mov.w	r4, #0
 8007700:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	ea03 0501 	and.w	r5, r3, r1
 800770c:	ea04 0602 	and.w	r6, r4, r2
 8007710:	4629      	mov	r1, r5
 8007712:	4632      	mov	r2, r6
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	f04f 0400 	mov.w	r4, #0
 800771c:	0154      	lsls	r4, r2, #5
 800771e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007722:	014b      	lsls	r3, r1, #5
 8007724:	4619      	mov	r1, r3
 8007726:	4622      	mov	r2, r4
 8007728:	1b49      	subs	r1, r1, r5
 800772a:	eb62 0206 	sbc.w	r2, r2, r6
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	f04f 0400 	mov.w	r4, #0
 8007736:	0194      	lsls	r4, r2, #6
 8007738:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800773c:	018b      	lsls	r3, r1, #6
 800773e:	1a5b      	subs	r3, r3, r1
 8007740:	eb64 0402 	sbc.w	r4, r4, r2
 8007744:	f04f 0100 	mov.w	r1, #0
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	00e2      	lsls	r2, r4, #3
 800774e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007752:	00d9      	lsls	r1, r3, #3
 8007754:	460b      	mov	r3, r1
 8007756:	4614      	mov	r4, r2
 8007758:	195b      	adds	r3, r3, r5
 800775a:	eb44 0406 	adc.w	r4, r4, r6
 800775e:	f04f 0100 	mov.w	r1, #0
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	02a2      	lsls	r2, r4, #10
 8007768:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800776c:	0299      	lsls	r1, r3, #10
 800776e:	460b      	mov	r3, r1
 8007770:	4614      	mov	r4, r2
 8007772:	4618      	mov	r0, r3
 8007774:	4621      	mov	r1, r4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f04f 0400 	mov.w	r4, #0
 800777c:	461a      	mov	r2, r3
 800777e:	4623      	mov	r3, r4
 8007780:	f7f8 fd46 	bl	8000210 <__aeabi_uldivmod>
 8007784:	4603      	mov	r3, r0
 8007786:	460c      	mov	r4, r1
 8007788:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	0c1b      	lsrs	r3, r3, #16
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	3301      	adds	r3, #1
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a2:	60bb      	str	r3, [r7, #8]
      break;
 80077a4:	e002      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80077a8:	60bb      	str	r3, [r7, #8]
      break;
 80077aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ac:	68bb      	ldr	r3, [r7, #8]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b6:	bf00      	nop
 80077b8:	40023800 	.word	0x40023800
 80077bc:	00f42400 	.word	0x00f42400
 80077c0:	017d7840 	.word	0x017d7840

080077c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077c8:	4b03      	ldr	r3, [pc, #12]	; (80077d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077ca:	681b      	ldr	r3, [r3, #0]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20000000 	.word	0x20000000

080077dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077e0:	f7ff fff0 	bl	80077c4 <HAL_RCC_GetHCLKFreq>
 80077e4:	4601      	mov	r1, r0
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	0a9b      	lsrs	r3, r3, #10
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	4a03      	ldr	r2, [pc, #12]	; (8007800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077f2:	5cd3      	ldrb	r3, [r2, r3]
 80077f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40023800 	.word	0x40023800
 8007800:	080133f4 	.word	0x080133f4

08007804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007808:	f7ff ffdc 	bl	80077c4 <HAL_RCC_GetHCLKFreq>
 800780c:	4601      	mov	r1, r0
 800780e:	4b05      	ldr	r3, [pc, #20]	; (8007824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	0b5b      	lsrs	r3, r3, #13
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	4a03      	ldr	r2, [pc, #12]	; (8007828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800781a:	5cd3      	ldrb	r3, [r2, r3]
 800781c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40023800 	.word	0x40023800
 8007828:	080133f4 	.word	0x080133f4

0800782c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	220f      	movs	r2, #15
 800783a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800783c:	4b12      	ldr	r3, [pc, #72]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0203 	and.w	r2, r3, #3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007848:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007860:	4b09      	ldr	r3, [pc, #36]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	08db      	lsrs	r3, r3, #3
 8007866:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <HAL_RCC_GetClockConfig+0x60>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 020f 	and.w	r2, r3, #15
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	601a      	str	r2, [r3, #0]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40023800 	.word	0x40023800
 800788c:	40023c00 	.word	0x40023c00

08007890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d012      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078b8:	4b69      	ldr	r3, [pc, #420]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4a68      	ldr	r2, [pc, #416]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078c2:	6093      	str	r3, [r2, #8]
 80078c4:	4b66      	ldr	r3, [pc, #408]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	4964      	ldr	r1, [pc, #400]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078da:	2301      	movs	r3, #1
 80078dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d017      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078ea:	4b5d      	ldr	r3, [pc, #372]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f8:	4959      	ldr	r1, [pc, #356]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007908:	d101      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800790a:	2301      	movs	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007916:	2301      	movs	r3, #1
 8007918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d017      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007926:	4b4e      	ldr	r3, [pc, #312]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800792c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	494a      	ldr	r1, [pc, #296]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007936:	4313      	orrs	r3, r2
 8007938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007944:	d101      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007946:	2301      	movs	r3, #1
 8007948:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007952:	2301      	movs	r3, #1
 8007954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 808b 	beq.w	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007974:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	4a39      	ldr	r2, [pc, #228]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797e:	6413      	str	r3, [r2, #64]	; 0x40
 8007980:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800798c:	4b35      	ldr	r3, [pc, #212]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a34      	ldr	r2, [pc, #208]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007998:	f7fb fa64 	bl	8002e64 <HAL_GetTick>
 800799c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800799e:	e008      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079a0:	f7fb fa60 	bl	8002e64 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b64      	cmp	r3, #100	; 0x64
 80079ac:	d901      	bls.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e355      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079b2:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0f0      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079be:	4b28      	ldr	r3, [pc, #160]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d035      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d02e      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079e6:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079fe:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a04:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d114      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fb fa28 	bl	8002e64 <HAL_GetTick>
 8007a14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a16:	e00a      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a18:	f7fb fa24 	bl	8002e64 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e317      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0ee      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a46:	d111      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a56:	400b      	ands	r3, r1
 8007a58:	4901      	ldr	r1, [pc, #4]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	608b      	str	r3, [r1, #8]
 8007a5e:	e00b      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a60:	40023800 	.word	0x40023800
 8007a64:	40007000 	.word	0x40007000
 8007a68:	0ffffcff 	.word	0x0ffffcff
 8007a6c:	4bb0      	ldr	r3, [pc, #704]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	4aaf      	ldr	r2, [pc, #700]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a76:	6093      	str	r3, [r2, #8]
 8007a78:	4bad      	ldr	r3, [pc, #692]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a84:	49aa      	ldr	r1, [pc, #680]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d010      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a96:	4ba6      	ldr	r3, [pc, #664]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9c:	4aa4      	ldr	r2, [pc, #656]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007aa6:	4ba2      	ldr	r3, [pc, #648]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	499f      	ldr	r1, [pc, #636]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00a      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ac4:	4b9a      	ldr	r3, [pc, #616]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad2:	4997      	ldr	r1, [pc, #604]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00a      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ae6:	4b92      	ldr	r3, [pc, #584]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af4:	498e      	ldr	r1, [pc, #568]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b08:	4b89      	ldr	r3, [pc, #548]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b16:	4986      	ldr	r1, [pc, #536]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b2a:	4b81      	ldr	r3, [pc, #516]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b38:	497d      	ldr	r1, [pc, #500]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00a      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b4c:	4b78      	ldr	r3, [pc, #480]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b52:	f023 0203 	bic.w	r2, r3, #3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	4975      	ldr	r1, [pc, #468]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b6e:	4b70      	ldr	r3, [pc, #448]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b74:	f023 020c 	bic.w	r2, r3, #12
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7c:	496c      	ldr	r1, [pc, #432]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b90:	4b67      	ldr	r3, [pc, #412]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9e:	4964      	ldr	r1, [pc, #400]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bb2:	4b5f      	ldr	r3, [pc, #380]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc0:	495b      	ldr	r1, [pc, #364]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bd4:	4b56      	ldr	r3, [pc, #344]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	4953      	ldr	r1, [pc, #332]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007bf6:	4b4e      	ldr	r3, [pc, #312]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c04:	494a      	ldr	r1, [pc, #296]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c18:	4b45      	ldr	r3, [pc, #276]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c26:	4942      	ldr	r1, [pc, #264]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c3a:	4b3d      	ldr	r3, [pc, #244]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c48:	4939      	ldr	r1, [pc, #228]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c5c:	4b34      	ldr	r3, [pc, #208]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c6a:	4931      	ldr	r1, [pc, #196]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d011      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c7e:	4b2c      	ldr	r3, [pc, #176]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8c:	4928      	ldr	r1, [pc, #160]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ccc:	4918      	ldr	r1, [pc, #96]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ce0:	4b13      	ldr	r3, [pc, #76]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf0:	490f      	ldr	r1, [pc, #60]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d005      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d06:	f040 80d8 	bne.w	8007eba <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d16:	f7fb f8a5 	bl	8002e64 <HAL_GetTick>
 8007d1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d1c:	e00a      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d1e:	f7fb f8a1 	bl	8002e64 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b64      	cmp	r3, #100	; 0x64
 8007d2a:	d903      	bls.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e196      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007d30:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d34:	4b6c      	ldr	r3, [pc, #432]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1ee      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d021      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11d      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d54:	4b64      	ldr	r3, [pc, #400]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d62:	4b61      	ldr	r3, [pc, #388]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d68:	0e1b      	lsrs	r3, r3, #24
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	019a      	lsls	r2, r3, #6
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	041b      	lsls	r3, r3, #16
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	061b      	lsls	r3, r3, #24
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	071b      	lsls	r3, r3, #28
 8007d88:	4957      	ldr	r1, [pc, #348]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007da4:	d00a      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d02e      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dba:	d129      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007dbc:	4b4a      	ldr	r3, [pc, #296]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dca:	4b47      	ldr	r3, [pc, #284]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd0:	0f1b      	lsrs	r3, r3, #28
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	019a      	lsls	r2, r3, #6
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	041b      	lsls	r3, r3, #16
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	061b      	lsls	r3, r3, #24
 8007dea:	431a      	orrs	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	071b      	lsls	r3, r3, #28
 8007df0:	493d      	ldr	r1, [pc, #244]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007df8:	4b3b      	ldr	r3, [pc, #236]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dfe:	f023 021f 	bic.w	r2, r3, #31
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	3b01      	subs	r3, #1
 8007e08:	4937      	ldr	r1, [pc, #220]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01d      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e1c:	4b32      	ldr	r3, [pc, #200]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e22:	0e1b      	lsrs	r3, r3, #24
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e2a:	4b2f      	ldr	r3, [pc, #188]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e30:	0f1b      	lsrs	r3, r3, #28
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	019a      	lsls	r2, r3, #6
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	431a      	orrs	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	061b      	lsls	r3, r3, #24
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	071b      	lsls	r3, r3, #28
 8007e50:	4925      	ldr	r1, [pc, #148]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d011      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	019a      	lsls	r2, r3, #6
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	041b      	lsls	r3, r3, #16
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	061b      	lsls	r3, r3, #24
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	071b      	lsls	r3, r3, #28
 8007e80:	4919      	ldr	r1, [pc, #100]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e88:	4b17      	ldr	r3, [pc, #92]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a16      	ldr	r2, [pc, #88]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e94:	f7fa ffe6 	bl	8002e64 <HAL_GetTick>
 8007e98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e9c:	f7fa ffe2 	bl	8002e64 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b64      	cmp	r3, #100	; 0x64
 8007ea8:	d901      	bls.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e0d7      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	f040 80cd 	bne.w	800805c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a08      	ldr	r2, [pc, #32]	; (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ece:	f7fa ffc9 	bl	8002e64 <HAL_GetTick>
 8007ed2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ed4:	e00a      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ed6:	f7fa ffc5 	bl	8002e64 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b64      	cmp	r3, #100	; 0x64
 8007ee2:	d903      	bls.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e0ba      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007ee8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eec:	4b5e      	ldr	r3, [pc, #376]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef8:	d0ed      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d02e      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d12a      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f22:	4b51      	ldr	r3, [pc, #324]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f30:	4b4d      	ldr	r3, [pc, #308]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f36:	0f1b      	lsrs	r3, r3, #28
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	019a      	lsls	r2, r3, #6
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	041b      	lsls	r3, r3, #16
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	061b      	lsls	r3, r3, #24
 8007f50:	431a      	orrs	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	071b      	lsls	r3, r3, #28
 8007f56:	4944      	ldr	r1, [pc, #272]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f5e:	4b42      	ldr	r3, [pc, #264]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	493d      	ldr	r1, [pc, #244]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d022      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f8c:	d11d      	bne.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f8e:	4b36      	ldr	r3, [pc, #216]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f94:	0e1b      	lsrs	r3, r3, #24
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f9c:	4b32      	ldr	r3, [pc, #200]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa2:	0f1b      	lsrs	r3, r3, #28
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	019a      	lsls	r2, r3, #6
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	041b      	lsls	r3, r3, #16
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	061b      	lsls	r3, r3, #24
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	071b      	lsls	r3, r3, #28
 8007fc2:	4929      	ldr	r1, [pc, #164]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d028      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fdc:	0e1b      	lsrs	r3, r3, #24
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fe4:	4b20      	ldr	r3, [pc, #128]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fea:	0c1b      	lsrs	r3, r3, #16
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	019a      	lsls	r2, r3, #6
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	061b      	lsls	r3, r3, #24
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	071b      	lsls	r3, r3, #28
 800800a:	4917      	ldr	r1, [pc, #92]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800800c:	4313      	orrs	r3, r2
 800800e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	4911      	ldr	r1, [pc, #68]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008028:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800802e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008034:	f7fa ff16 	bl	8002e64 <HAL_GetTick>
 8008038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800803a:	e008      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800803c:	f7fa ff12 	bl	8002e64 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b64      	cmp	r3, #100	; 0x64
 8008048:	d901      	bls.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e007      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800804e:	4b06      	ldr	r3, [pc, #24]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805a:	d1ef      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40023800 	.word	0x40023800

0800806c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800808a:	f040 8086 	bne.w	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800808e:	4b8d      	ldr	r3, [pc, #564]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008094:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800809c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a4:	d03e      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80080a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080aa:	d073      	beq.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d000      	beq.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80080b0:	e074      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080b2:	4b84      	ldr	r3, [pc, #528]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d108      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080be:	4b81      	ldr	r3, [pc, #516]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c6:	4a80      	ldr	r2, [pc, #512]	; (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80080c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	e007      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080d0:	4b7c      	ldr	r3, [pc, #496]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d8:	4a7c      	ldr	r2, [pc, #496]	; (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80080da:	fbb2 f3f3 	udiv	r3, r2, r3
 80080de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80080e0:	4b78      	ldr	r3, [pc, #480]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e6:	0e1b      	lsrs	r3, r3, #24
 80080e8:	f003 030f 	and.w	r3, r3, #15
 80080ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80080ee:	4b75      	ldr	r3, [pc, #468]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	099b      	lsrs	r3, r3, #6
 80080f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	fb02 f203 	mul.w	r2, r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	fbb2 f3f3 	udiv	r3, r2, r3
 8008106:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008108:	4b6e      	ldr	r3, [pc, #440]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800810a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800810e:	0a1b      	lsrs	r3, r3, #8
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	3301      	adds	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	617b      	str	r3, [r7, #20]
        break;
 8008122:	e03b      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008124:	4b67      	ldr	r3, [pc, #412]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d108      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008130:	4b64      	ldr	r3, [pc, #400]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008138:	4a63      	ldr	r2, [pc, #396]	; (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	e007      	b.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008142:	4b60      	ldr	r3, [pc, #384]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800814a:	4a60      	ldr	r2, [pc, #384]	; (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008152:	4b5c      	ldr	r3, [pc, #368]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008158:	0e1b      	lsrs	r3, r3, #24
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008160:	4b58      	ldr	r3, [pc, #352]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008166:	099b      	lsrs	r3, r3, #6
 8008168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	fb02 f203 	mul.w	r2, r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	fbb2 f3f3 	udiv	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800817a:	4b52      	ldr	r3, [pc, #328]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800817c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	3301      	adds	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008190:	617b      	str	r3, [r7, #20]
        break;
 8008192:	e003      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008194:	4b4e      	ldr	r3, [pc, #312]	; (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008196:	617b      	str	r3, [r7, #20]
        break;
 8008198:	e000      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800819a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081a2:	f040 8086 	bne.w	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80081a6:	4b47      	ldr	r3, [pc, #284]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80081b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081bc:	d03e      	beq.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80081be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081c2:	d073      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d000      	beq.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80081c8:	e074      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081ca:	4b3e      	ldr	r3, [pc, #248]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d108      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081d6:	4b3b      	ldr	r3, [pc, #236]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081de:	4a3a      	ldr	r2, [pc, #232]	; (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80081e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	e007      	b.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081e8:	4b36      	ldr	r3, [pc, #216]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f0:	4a36      	ldr	r2, [pc, #216]	; (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80081f8:	4b32      	ldr	r3, [pc, #200]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fe:	0e1b      	lsrs	r3, r3, #24
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008206:	4b2f      	ldr	r3, [pc, #188]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820c:	099b      	lsrs	r3, r3, #6
 800820e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	fb02 f203 	mul.w	r2, r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	fbb2 f3f3 	udiv	r3, r2, r3
 800821e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008226:	0a1b      	lsrs	r3, r3, #8
 8008228:	f003 031f 	and.w	r3, r3, #31
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	fbb2 f3f3 	udiv	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]
        break;
 800823a:	e03b      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800823c:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d108      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008248:	4b1e      	ldr	r3, [pc, #120]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008250:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008252:	fbb2 f3f3 	udiv	r3, r2, r3
 8008256:	613b      	str	r3, [r7, #16]
 8008258:	e007      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800825a:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008262:	4a1a      	ldr	r2, [pc, #104]	; (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008264:	fbb2 f3f3 	udiv	r3, r2, r3
 8008268:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800826a:	4b16      	ldr	r3, [pc, #88]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800826c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008270:	0e1b      	lsrs	r3, r3, #24
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008278:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800827a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800827e:	099b      	lsrs	r3, r3, #6
 8008280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	fb02 f203 	mul.w	r2, r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008292:	4b0c      	ldr	r3, [pc, #48]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a8:	617b      	str	r3, [r7, #20]
        break;
 80082aa:	e003      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80082ac:	4b08      	ldr	r3, [pc, #32]	; (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80082ae:	617b      	str	r3, [r7, #20]
        break;
 80082b0:	e000      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80082b2:	bf00      	nop

  return frequency;
 80082b4:	697b      	ldr	r3, [r7, #20]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40023800 	.word	0x40023800
 80082c8:	00f42400 	.word	0x00f42400
 80082cc:	017d7840 	.word	0x017d7840
 80082d0:	00bb8000 	.word	0x00bb8000

080082d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e06b      	b.n	80083be <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7f5b      	ldrb	r3, [r3, #29]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d105      	bne.n	80082fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7f9 fc32 	bl	8001b60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	22ca      	movs	r2, #202	; 0xca
 8008308:	625a      	str	r2, [r3, #36]	; 0x24
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2253      	movs	r2, #83	; 0x53
 8008310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fb00 	bl	8008918 <RTC_EnterInitMode>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	22ff      	movs	r2, #255	; 0xff
 8008324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2204      	movs	r2, #4
 800832a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e046      	b.n	80083be <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6899      	ldr	r1, [r3, #8]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4b23      	ldr	r3, [pc, #140]	; (80083c8 <HAL_RTC_Init+0xf4>)
 800833c:	400b      	ands	r3, r1
 800833e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6899      	ldr	r1, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68d2      	ldr	r2, [r2, #12]
 8008366:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6919      	ldr	r1, [r3, #16]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	041a      	lsls	r2, r3, #16
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800838a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0208 	bic.w	r2, r2, #8
 800839a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	22ff      	movs	r2, #255	; 0xff
 80083b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80083bc:	2300      	movs	r3, #0
  }
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	ff8fffbf 	.word	0xff8fffbf

080083cc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	7f1b      	ldrb	r3, [r3, #28]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_RTC_SetTime+0x1c>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e0a8      	b.n	800853a <HAL_RTC_SetTime+0x16e>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2202      	movs	r2, #2
 80083f2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d126      	bne.n	8008448 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 faac 	bl	8008970 <RTC_ByteToBcd2>
 8008418:	4603      	mov	r3, r0
 800841a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 faa5 	bl	8008970 <RTC_ByteToBcd2>
 8008426:	4603      	mov	r3, r0
 8008428:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800842a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	789b      	ldrb	r3, [r3, #2]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fa9d 	bl	8008970 <RTC_ByteToBcd2>
 8008436:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008438:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	7b1b      	ldrb	r3, [r3, #12]
 8008440:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	e018      	b.n	800847a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2200      	movs	r2, #0
 800845a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008468:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800846e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	7b1b      	ldrb	r3, [r3, #12]
 8008474:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008476:	4313      	orrs	r3, r2
 8008478:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	22ca      	movs	r2, #202	; 0xca
 8008480:	625a      	str	r2, [r3, #36]	; 0x24
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2253      	movs	r2, #83	; 0x53
 8008488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 fa44 	bl	8008918 <RTC_EnterInitMode>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00b      	beq.n	80084ae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	22ff      	movs	r2, #255	; 0xff
 800849c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2204      	movs	r2, #4
 80084a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e045      	b.n	800853a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	6979      	ldr	r1, [r7, #20]
 80084b4:	4b23      	ldr	r3, [pc, #140]	; (8008544 <HAL_RTC_SetTime+0x178>)
 80084b6:	400b      	ands	r3, r1
 80084b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6899      	ldr	r1, [r3, #8]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	431a      	orrs	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d111      	bne.n	8008524 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 f9e1 	bl	80088c8 <HAL_RTC_WaitForSynchro>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	22ff      	movs	r2, #255	; 0xff
 8008512:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2204      	movs	r2, #4
 8008518:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e00a      	b.n	800853a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	22ff      	movs	r2, #255	; 0xff
 800852a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008538:	2300      	movs	r3, #0
  }
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd90      	pop	{r4, r7, pc}
 8008542:	bf00      	nop
 8008544:	007f7f7f 	.word	0x007f7f7f

08008548 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	7f1b      	ldrb	r3, [r3, #28]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_RTC_SetDate+0x1c>
 8008560:	2302      	movs	r3, #2
 8008562:	e092      	b.n	800868a <HAL_RTC_SetDate+0x142>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2202      	movs	r2, #2
 800856e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10e      	bne.n	8008594 <HAL_RTC_SetDate+0x4c>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	785b      	ldrb	r3, [r3, #1]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	d008      	beq.n	8008594 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	f023 0310 	bic.w	r3, r3, #16
 800858a:	b2db      	uxtb	r3, r3
 800858c:	330a      	adds	r3, #10
 800858e:	b2da      	uxtb	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d11c      	bne.n	80085d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	78db      	ldrb	r3, [r3, #3]
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f9e6 	bl	8008970 <RTC_ByteToBcd2>
 80085a4:	4603      	mov	r3, r0
 80085a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 f9df 	bl	8008970 <RTC_ByteToBcd2>
 80085b2:	4603      	mov	r3, r0
 80085b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f9d7 	bl	8008970 <RTC_ByteToBcd2>
 80085c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80085c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e00e      	b.n	80085f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	78db      	ldrb	r3, [r3, #3]
 80085d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80085e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	22ca      	movs	r2, #202	; 0xca
 80085f8:	625a      	str	r2, [r3, #36]	; 0x24
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2253      	movs	r2, #83	; 0x53
 8008600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f988 	bl	8008918 <RTC_EnterInitMode>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	22ff      	movs	r2, #255	; 0xff
 8008614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2204      	movs	r2, #4
 800861a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e031      	b.n	800868a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6979      	ldr	r1, [r7, #20]
 800862c:	4b19      	ldr	r3, [pc, #100]	; (8008694 <HAL_RTC_SetDate+0x14c>)
 800862e:	400b      	ands	r3, r1
 8008630:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008640:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d111      	bne.n	8008674 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f939 	bl	80088c8 <HAL_RTC_WaitForSynchro>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2204      	movs	r2, #4
 8008668:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e00a      	b.n	800868a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	22ff      	movs	r2, #255	; 0xff
 800867a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008688:	2300      	movs	r3, #0
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	bd90      	pop	{r4, r7, pc}
 8008692:	bf00      	nop
 8008694:	00ffff3f 	.word	0x00ffff3f

08008698 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b089      	sub	sp, #36	; 0x24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61fb      	str	r3, [r7, #28]
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	7f1b      	ldrb	r3, [r3, #28]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_RTC_SetAlarm+0x24>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e101      	b.n	80088c0 <HAL_RTC_SetAlarm+0x228>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2202      	movs	r2, #2
 80086c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d137      	bne.n	800873e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f942 	bl	8008970 <RTC_ByteToBcd2>
 80086ec:	4603      	mov	r3, r0
 80086ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	785b      	ldrb	r3, [r3, #1]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f93b 	bl	8008970 <RTC_ByteToBcd2>
 80086fa:	4603      	mov	r3, r0
 80086fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	789b      	ldrb	r3, [r3, #2]
 8008704:	4618      	mov	r0, r3
 8008706:	f000 f933 	bl	8008970 <RTC_ByteToBcd2>
 800870a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800870c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	7b1b      	ldrb	r3, [r3, #12]
 8008714:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008716:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f925 	bl	8008970 <RTC_ByteToBcd2>
 8008726:	4603      	mov	r3, r0
 8008728:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800872a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008732:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008738:	4313      	orrs	r3, r2
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	e023      	b.n	8008786 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800875e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008764:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	7b1b      	ldrb	r3, [r3, #12]
 800876a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800876c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008774:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008776:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800877c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008782:	4313      	orrs	r3, r2
 8008784:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	22ca      	movs	r2, #202	; 0xca
 8008798:	625a      	str	r2, [r3, #36]	; 0x24
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2253      	movs	r2, #83	; 0x53
 80087a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087aa:	d13f      	bne.n	800882c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087ba:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087ca:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087cc:	f7fa fb4a 	bl	8002e64 <HAL_GetTick>
 80087d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087d2:	e013      	b.n	80087fc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087d4:	f7fa fb46 	bl	8002e64 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087e2:	d90b      	bls.n	80087fc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	22ff      	movs	r2, #255	; 0xff
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2203      	movs	r2, #3
 80087f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e061      	b.n	80088c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0e4      	beq.n	80087d4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008828:	609a      	str	r2, [r3, #8]
 800882a:	e03e      	b.n	80088aa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800883a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800884a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800884c:	f7fa fb0a 	bl	8002e64 <HAL_GetTick>
 8008850:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008852:	e013      	b.n	800887c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008854:	f7fa fb06 	bl	8002e64 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008862:	d90b      	bls.n	800887c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	22ff      	movs	r2, #255	; 0xff
 800886a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2203      	movs	r2, #3
 8008870:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e021      	b.n	80088c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0e4      	beq.n	8008854 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	22ff      	movs	r2, #255	; 0xff
 80088b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3724      	adds	r7, #36	; 0x24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd90      	pop	{r4, r7, pc}

080088c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088e4:	f7fa fabe 	bl	8002e64 <HAL_GetTick>
 80088e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088ea:	e009      	b.n	8008900 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088ec:	f7fa faba 	bl	8002e64 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088fa:	d901      	bls.n	8008900 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e007      	b.n	8008910 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ee      	beq.n	80088ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d119      	bne.n	8008966 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f04f 32ff 	mov.w	r2, #4294967295
 800893a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800893c:	f7fa fa92 	bl	8002e64 <HAL_GetTick>
 8008940:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008942:	e009      	b.n	8008958 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008944:	f7fa fa8e 	bl	8002e64 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008952:	d901      	bls.n	8008958 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e007      	b.n	8008968 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0ee      	beq.n	8008944 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800897e:	e005      	b.n	800898c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	3b0a      	subs	r3, #10
 800898a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	2b09      	cmp	r3, #9
 8008990:	d8f6      	bhi.n	8008980 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	b2da      	uxtb	r2, r3
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	4313      	orrs	r3, r2
 800899e:	b2db      	uxtb	r3, r3
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	7f1b      	ldrb	r3, [r3, #28]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e03e      	b.n	8008a46 <HAL_RTCEx_SetTimeStamp+0x9a>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2202      	movs	r2, #2
 80089d2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	4b1e      	ldr	r3, [pc, #120]	; (8008a54 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80089dc:	4013      	ands	r3, r2
 80089de:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	22ca      	movs	r2, #202	; 0xca
 80089ee:	625a      	str	r2, [r3, #36]	; 0x24
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2253      	movs	r2, #83	; 0x53
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0206 	bic.w	r2, r2, #6
 8008a06:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689a      	ldr	r2, [r3, #8]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a2e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	22ff      	movs	r2, #255	; 0xff
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	fffff7f7 	.word	0xfffff7f7

08008a58 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e149      	b.n	8008d0a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7f9 f92a 	bl	8001ce4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f94f 	bl	8008d3c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d007      	beq.n	8008ab6 <HAL_SAI_Init+0x5e>
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d302      	bcc.n	8008ab0 <HAL_SAI_Init+0x58>
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d006      	beq.n	8008abc <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008aae:	e008      	b.n	8008ac2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61fb      	str	r3, [r7, #28]
      break;
 8008ab4:	e005      	b.n	8008ac2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008ab6:	2310      	movs	r3, #16
 8008ab8:	61fb      	str	r3, [r7, #28]
      break;
 8008aba:	e002      	b.n	8008ac2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008abc:	2320      	movs	r3, #32
 8008abe:	61fb      	str	r3, [r7, #28]
      break;
 8008ac0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d81d      	bhi.n	8008b06 <HAL_SAI_Init+0xae>
 8008aca:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <HAL_SAI_Init+0x78>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008ae1 	.word	0x08008ae1
 8008ad4:	08008ae7 	.word	0x08008ae7
 8008ad8:	08008aef 	.word	0x08008aef
 8008adc:	08008af7 	.word	0x08008af7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
      }
      break;
 8008ae4:	e010      	b.n	8008b08 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aea:	617b      	str	r3, [r7, #20]
      }
      break;
 8008aec:	e00c      	b.n	8008b08 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008af2:	617b      	str	r3, [r7, #20]
      }
      break;
 8008af4:	e008      	b.n	8008b08 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008afa:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008b04:	e000      	b.n	8008b08 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008b06:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a81      	ldr	r2, [pc, #516]	; (8008d14 <HAL_SAI_Init+0x2bc>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <HAL_SAI_Init+0xc4>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a80      	ldr	r2, [pc, #512]	; (8008d18 <HAL_SAI_Init+0x2c0>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d103      	bne.n	8008b24 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008b1c:	4a7f      	ldr	r2, [pc, #508]	; (8008d1c <HAL_SAI_Init+0x2c4>)
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	e002      	b.n	8008b2a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b24:	4a7e      	ldr	r2, [pc, #504]	; (8008d20 <HAL_SAI_Init+0x2c8>)
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d043      	beq.n	8008bba <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a76      	ldr	r2, [pc, #472]	; (8008d14 <HAL_SAI_Init+0x2bc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <HAL_SAI_Init+0xf2>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a74      	ldr	r2, [pc, #464]	; (8008d18 <HAL_SAI_Init+0x2c0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d104      	bne.n	8008b54 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b4a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b4e:	f7ff fa8d 	bl	800806c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b52:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a72      	ldr	r2, [pc, #456]	; (8008d24 <HAL_SAI_Init+0x2cc>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d004      	beq.n	8008b68 <HAL_SAI_Init+0x110>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a71      	ldr	r2, [pc, #452]	; (8008d28 <HAL_SAI_Init+0x2d0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d104      	bne.n	8008b72 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b6c:	f7ff fa7e 	bl	800806c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b70:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	025b      	lsls	r3, r3, #9
 8008b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b88:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4a67      	ldr	r2, [pc, #412]	; (8008d2c <HAL_SAI_Init+0x2d4>)
 8008b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b92:	08da      	lsrs	r2, r3, #3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	4b64      	ldr	r3, [pc, #400]	; (8008d2c <HAL_SAI_Init+0x2d4>)
 8008b9c:	fba3 2301 	umull	r2, r3, r3, r1
 8008ba0:	08da      	lsrs	r2, r3, #3
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	1aca      	subs	r2, r1, r3
 8008bac:	2a08      	cmp	r2, #8
 8008bae:	d904      	bls.n	8008bba <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_SAI_Init+0x172>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d109      	bne.n	8008bde <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_SAI_Init+0x17e>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e001      	b.n	8008bda <HAL_SAI_Init+0x182>
 8008bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bda:	61bb      	str	r3, [r7, #24]
 8008bdc:	e008      	b.n	8008bf0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d102      	bne.n	8008bec <HAL_SAI_Init+0x194>
 8008be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bea:	e000      	b.n	8008bee <HAL_SAI_Init+0x196>
 8008bec:	2300      	movs	r3, #0
 8008bee:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6819      	ldr	r1, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <HAL_SAI_Init+0x2d8>)
 8008bfc:	400b      	ands	r3, r1
 8008bfe:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6819      	ldr	r1, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c14:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008c28:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c34:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	051b      	lsls	r3, r3, #20
 8008c3c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6859      	ldr	r1, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	4b38      	ldr	r3, [pc, #224]	; (8008d34 <HAL_SAI_Init+0x2dc>)
 8008c52:	400b      	ands	r3, r1
 8008c54:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6859      	ldr	r1, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6899      	ldr	r1, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	4b2e      	ldr	r3, [pc, #184]	; (8008d38 <HAL_SAI_Init+0x2e0>)
 8008c80:	400b      	ands	r3, r1
 8008c82:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6899      	ldr	r1, [r3, #8]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008c94:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008c9a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008ca0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008caa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68d9      	ldr	r1, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008cc2:	400b      	ands	r3, r1
 8008cc4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68d9      	ldr	r1, [r3, #12]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cda:	041b      	lsls	r3, r3, #16
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	021b      	lsls	r3, r3, #8
 8008ce6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	40015804 	.word	0x40015804
 8008d18:	40015824 	.word	0x40015824
 8008d1c:	40015800 	.word	0x40015800
 8008d20:	40015c00 	.word	0x40015c00
 8008d24:	40015c04 	.word	0x40015c04
 8008d28:	40015c24 	.word	0x40015c24
 8008d2c:	cccccccd 	.word	0xcccccccd
 8008d30:	ff05c010 	.word	0xff05c010
 8008d34:	ffff1ff0 	.word	0xffff1ff0
 8008d38:	fff88000 	.word	0xfff88000

08008d3c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d3c:	b490      	push	{r4, r7}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008d44:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <SAI_Disable+0x64>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a16      	ldr	r2, [pc, #88]	; (8008da4 <SAI_Disable+0x68>)
 8008d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4e:	0b1b      	lsrs	r3, r3, #12
 8008d50:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d64:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d66:	4623      	mov	r3, r4
 8008d68:	1e5c      	subs	r4, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10a      	bne.n	8008d84 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	73fb      	strb	r3, [r7, #15]
      break;
 8008d82:	e006      	b.n	8008d92 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e9      	bne.n	8008d66 <SAI_Disable+0x2a>

  return status;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bc90      	pop	{r4, r7}
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20000000 	.word	0x20000000
 8008da4:	95cbec1b 	.word	0x95cbec1b

08008da8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e022      	b.n	8008e00 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d105      	bne.n	8008dd2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7f9 f813 	bl	8001df8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f814 	bl	8008e08 <HAL_SD_InitCard>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e00a      	b.n	8008e00 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e08:	b5b0      	push	{r4, r5, r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e10:	2300      	movs	r3, #0
 8008e12:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008e24:	2376      	movs	r3, #118	; 0x76
 8008e26:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681d      	ldr	r5, [r3, #0]
 8008e2c:	466c      	mov	r4, sp
 8008e2e:	f107 0314 	add.w	r3, r7, #20
 8008e32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e3a:	f107 0308 	add.w	r3, r7, #8
 8008e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e40:	4628      	mov	r0, r5
 8008e42:	f002 ff63 	bl	800bd0c <SDMMC_Init>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e03b      	b.n	8008ed0 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e66:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f002 ff86 	bl	800bd7e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e80:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fde6 	bl	8009a54 <SD_PowerON>
 8008e88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e013      	b.n	8008ed0 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fd05 	bl	80098b8 <SD_InitCard>
 8008eae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3728      	adds	r7, #40	; 0x28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bdb0      	pop	{r4, r5, r7, pc}

08008ed8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08c      	sub	sp, #48	; 0x30
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d107      	bne.n	8008f00 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0cc      	b.n	800909a <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	f040 80c5 	bne.w	8009098 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	441a      	add	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d907      	bls.n	8008f32 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e0b3      	b.n	800909a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2203      	movs	r2, #3
 8008f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	4a53      	ldr	r2, [pc, #332]	; (80090a4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008f58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	4a52      	ldr	r2, [pc, #328]	; (80090a8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008f60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	2200      	movs	r2, #0
 8008f68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3380      	adds	r3, #128	; 0x80
 8008f74:	4619      	mov	r1, r3
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	025b      	lsls	r3, r3, #9
 8008f7c:	089b      	lsrs	r3, r3, #2
 8008f7e:	f7fa fc6d 	bl	800385c <HAL_DMA_Start_IT>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d017      	beq.n	8008fb8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f96:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a43      	ldr	r2, [pc, #268]	; (80090ac <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e070      	b.n	800909a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0208 	orr.w	r2, r2, #8
 8008fc6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d002      	beq.n	8008fd6 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	025b      	lsls	r3, r3, #9
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f002 ff60 	bl	800bea4 <SDMMC_CmdBlockLength>
 8008fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00f      	beq.n	800900c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a2e      	ldr	r2, [pc, #184]	; (80090ac <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e046      	b.n	800909a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800900c:	f04f 33ff 	mov.w	r3, #4294967295
 8009010:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	025b      	lsls	r3, r3, #9
 8009016:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009018:	2390      	movs	r3, #144	; 0x90
 800901a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800901c:	2302      	movs	r3, #2
 800901e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009020:	2300      	movs	r3, #0
 8009022:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009024:	2301      	movs	r3, #1
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f107 0210 	add.w	r2, r7, #16
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f002 ff0a 	bl	800be4c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d90a      	bls.n	8009054 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2282      	movs	r2, #130	; 0x82
 8009042:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800904a:	4618      	mov	r0, r3
 800904c:	f002 ff6e 	bl	800bf2c <SDMMC_CmdReadMultiBlock>
 8009050:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009052:	e009      	b.n	8009068 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2281      	movs	r2, #129	; 0x81
 8009058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009060:	4618      	mov	r0, r3
 8009062:	f002 ff41 	bl	800bee8 <SDMMC_CmdReadSingleBlock>
 8009066:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d012      	beq.n	8009094 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a0e      	ldr	r2, [pc, #56]	; (80090ac <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8009074:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	431a      	orrs	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e002      	b.n	800909a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	e000      	b.n	800909a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8009098:	2302      	movs	r3, #2
  }
}
 800909a:	4618      	mov	r0, r3
 800909c:	3730      	adds	r7, #48	; 0x30
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	080097a3 	.word	0x080097a3
 80090a8:	08009815 	.word	0x08009815
 80090ac:	004005ff 	.word	0x004005ff

080090b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08c      	sub	sp, #48	; 0x30
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d107      	bne.n	80090d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e0cf      	b.n	8009278 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	f040 80c8 	bne.w	8009276 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	441a      	add	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d907      	bls.n	800910a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e0b6      	b.n	8009278 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2203      	movs	r2, #3
 800910e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2200      	movs	r2, #0
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 021a 	orr.w	r2, r2, #26
 8009128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912e:	4a54      	ldr	r2, [pc, #336]	; (8009280 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009136:	4a53      	ldr	r2, [pc, #332]	; (8009284 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009138:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	2200      	movs	r2, #0
 8009140:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009146:	2b01      	cmp	r3, #1
 8009148:	d002      	beq.n	8009150 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	025b      	lsls	r3, r3, #9
 800914e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009158:	4618      	mov	r0, r3
 800915a:	f002 fea3 	bl	800bea4 <SDMMC_CmdBlockLength>
 800915e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00f      	beq.n	8009186 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a47      	ldr	r2, [pc, #284]	; (8009288 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	431a      	orrs	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e078      	b.n	8009278 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d90a      	bls.n	80091a2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	22a0      	movs	r2, #160	; 0xa0
 8009190:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009198:	4618      	mov	r0, r3
 800919a:	f002 ff0b 	bl	800bfb4 <SDMMC_CmdWriteMultiBlock>
 800919e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80091a0:	e009      	b.n	80091b6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2290      	movs	r2, #144	; 0x90
 80091a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ae:	4618      	mov	r0, r3
 80091b0:	f002 fede 	bl	800bf70 <SDMMC_CmdWriteSingleBlock>
 80091b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d012      	beq.n	80091e2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a31      	ldr	r2, [pc, #196]	; (8009288 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80091c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	431a      	orrs	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e04a      	b.n	8009278 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0208 	orr.w	r2, r2, #8
 80091f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3380      	adds	r3, #128	; 0x80
 80091fe:	461a      	mov	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	025b      	lsls	r3, r3, #9
 8009204:	089b      	lsrs	r3, r3, #2
 8009206:	f7fa fb29 	bl	800385c <HAL_DMA_Start_IT>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01a      	beq.n	8009246 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 021a 	bic.w	r2, r2, #26
 800921e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a18      	ldr	r2, [pc, #96]	; (8009288 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009226:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e018      	b.n	8009278 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009246:	f04f 33ff 	mov.w	r3, #4294967295
 800924a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	025b      	lsls	r3, r3, #9
 8009250:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009252:	2390      	movs	r3, #144	; 0x90
 8009254:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009256:	2300      	movs	r3, #0
 8009258:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800925a:	2300      	movs	r3, #0
 800925c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800925e:	2301      	movs	r3, #1
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f107 0210 	add.w	r2, r7, #16
 800926a:	4611      	mov	r1, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f002 fded 	bl	800be4c <SDMMC_ConfigData>

      return HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	e000      	b.n	8009278 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009276:	2302      	movs	r3, #2
  }
}
 8009278:	4618      	mov	r0, r3
 800927a:	3730      	adds	r7, #48	; 0x30
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	08009779 	.word	0x08009779
 8009284:	08009815 	.word	0x08009815
 8009288:	004005ff 	.word	0x004005ff

0800928c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ae:	0f9b      	lsrs	r3, r3, #30
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ba:	0e9b      	lsrs	r3, r3, #26
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092cc:	0e1b      	lsrs	r3, r3, #24
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092de:	0c1b      	lsrs	r3, r3, #16
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092ea:	0a1b      	lsrs	r3, r3, #8
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009300:	0d1b      	lsrs	r3, r3, #20
 8009302:	b29a      	uxth	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800930c:	0c1b      	lsrs	r3, r3, #16
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	b2da      	uxtb	r2, r3
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800931e:	0bdb      	lsrs	r3, r3, #15
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	b2da      	uxtb	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009330:	0b9b      	lsrs	r3, r3, #14
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	b2da      	uxtb	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009342:	0b5b      	lsrs	r3, r3, #13
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009354:	0b1b      	lsrs	r3, r3, #12
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2200      	movs	r2, #0
 8009366:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936c:	2b00      	cmp	r3, #0
 800936e:	d163      	bne.n	8009438 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009374:	009a      	lsls	r2, r3, #2
 8009376:	f640 73fc 	movw	r3, #4092	; 0xffc
 800937a:	4013      	ands	r3, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009380:	0f92      	lsrs	r2, r2, #30
 8009382:	431a      	orrs	r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938c:	0edb      	lsrs	r3, r3, #27
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	b2da      	uxtb	r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939e:	0e1b      	lsrs	r3, r3, #24
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b0:	0d5b      	lsrs	r3, r3, #21
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c2:	0c9b      	lsrs	r3, r3, #18
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d4:	0bdb      	lsrs	r3, r3, #15
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	7e1b      	ldrb	r3, [r3, #24]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	3302      	adds	r3, #2
 80093f8:	2201      	movs	r2, #1
 80093fa:	fa02 f303 	lsl.w	r3, r2, r3
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009402:	fb02 f203 	mul.w	r2, r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	7a1b      	ldrb	r3, [r3, #8]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f003 030f 	and.w	r3, r3, #15
 8009414:	2201      	movs	r2, #1
 8009416:	409a      	lsls	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009424:	0a52      	lsrs	r2, r2, #9
 8009426:	fb02 f203 	mul.w	r2, r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009434:	661a      	str	r2, [r3, #96]	; 0x60
 8009436:	e031      	b.n	800949c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943c:	2b01      	cmp	r3, #1
 800943e:	d11d      	bne.n	800947c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	431a      	orrs	r2, r3
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	3301      	adds	r3, #1
 800945c:	029a      	lsls	r2, r3, #10
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009470:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	661a      	str	r2, [r3, #96]	; 0x60
 800947a:	e00f      	b.n	800949c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a58      	ldr	r2, [pc, #352]	; (80095e4 <HAL_SD_GetCardCSD+0x344>)
 8009482:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e09d      	b.n	80095d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a0:	0b9b      	lsrs	r3, r3, #14
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b2:	09db      	lsrs	r3, r3, #7
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d4:	0fdb      	lsrs	r3, r3, #31
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e0:	0f5b      	lsrs	r3, r3, #29
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 0303 	and.w	r3, r3, #3
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f2:	0e9b      	lsrs	r3, r3, #26
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009504:	0d9b      	lsrs	r3, r3, #22
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 030f 	and.w	r3, r3, #15
 800950c:	b2da      	uxtb	r2, r3
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	0d5b      	lsrs	r3, r3, #21
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009532:	0c1b      	lsrs	r3, r3, #16
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	b2da      	uxtb	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009546:	0bdb      	lsrs	r3, r3, #15
 8009548:	b2db      	uxtb	r3, r3
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	b2da      	uxtb	r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955a:	0b9b      	lsrs	r3, r3, #14
 800955c:	b2db      	uxtb	r3, r3
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	b2da      	uxtb	r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956e:	0b5b      	lsrs	r3, r3, #13
 8009570:	b2db      	uxtb	r3, r3
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	b2da      	uxtb	r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009582:	0b1b      	lsrs	r3, r3, #12
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	b2da      	uxtb	r2, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009596:	0a9b      	lsrs	r3, r3, #10
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095be:	085b      	lsrs	r3, r3, #1
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	004005ff 	.word	0x004005ff

080095e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009640:	b5b0      	push	{r4, r5, r7, lr}
 8009642:	b08e      	sub	sp, #56	; 0x38
 8009644:	af04      	add	r7, sp, #16
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2203      	movs	r2, #3
 800964e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009656:	2b03      	cmp	r3, #3
 8009658:	d02e      	beq.n	80096b8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009660:	d106      	bne.n	8009670 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
 800966e:	e029      	b.n	80096c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009676:	d10a      	bne.n	800968e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 faa1 	bl	8009bc0 <SD_WideBus_Enable>
 800967e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	639a      	str	r2, [r3, #56]	; 0x38
 800968c:	e01a      	b.n	80096c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fade 	bl	8009c56 <SD_WideBus_Disable>
 800969a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	639a      	str	r2, [r3, #56]	; 0x38
 80096a8:	e00c      	b.n	80096c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	639a      	str	r2, [r3, #56]	; 0x38
 80096b6:	e005      	b.n	80096c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d009      	beq.n	80096e0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a18      	ldr	r2, [pc, #96]	; (8009734 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e024      	b.n	800972a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	466c      	mov	r4, sp
 8009708:	f107 0318 	add.w	r3, r7, #24
 800970c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009714:	f107 030c 	add.w	r3, r7, #12
 8009718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800971a:	4628      	mov	r0, r5
 800971c:	f002 faf6 	bl	800bd0c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3728      	adds	r7, #40	; 0x28
 800972e:	46bd      	mov	sp, r7
 8009730:	bdb0      	pop	{r4, r5, r7, pc}
 8009732:	bf00      	nop
 8009734:	004005ff 	.word	0x004005ff

08009738 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009744:	f107 030c 	add.w	r3, r7, #12
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa10 	bl	8009b70 <SD_SendStatus>
 8009750:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	431a      	orrs	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	0a5b      	lsrs	r3, r3, #9
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800976e:	693b      	ldr	r3, [r7, #16]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009794:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	2b82      	cmp	r3, #130	; 0x82
 80097b6:	d111      	bne.n	80097dc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4618      	mov	r0, r3
 80097be:	f002 fc1b 	bl	800bff8 <SDMMC_CmdStopTransfer>
 80097c2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f7ff fd58 	bl	800928c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0208 	bic.w	r2, r2, #8
 80097ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f003 ff97 	bl	800d738 <HAL_SD_RxCpltCallback>
#endif
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7fa f87a 	bl	800391c <HAL_DMA_GetError>
 8009828:	4603      	mov	r3, r0
 800982a:	2b02      	cmp	r3, #2
 800982c:	d03e      	beq.n	80098ac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009834:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d002      	beq.n	800984a <SD_DMAError+0x36>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d12d      	bne.n	80098a6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a19      	ldr	r2, [pc, #100]	; (80098b4 <SD_DMAError+0xa0>)
 8009850:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009860:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f7ff ff62 	bl	8009738 <HAL_SD_GetCardState>
 8009874:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2b06      	cmp	r3, #6
 800987a:	d002      	beq.n	8009882 <SD_DMAError+0x6e>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2b05      	cmp	r3, #5
 8009880:	d10a      	bne.n	8009898 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f002 fbb6 	bl	800bff8 <SDMMC_CmdStopTransfer>
 800988c:	4602      	mov	r2, r0
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	431a      	orrs	r2, r3
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2200      	movs	r2, #0
 80098a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80098a6:	6978      	ldr	r0, [r7, #20]
 80098a8:	f7ff fcf0 	bl	800928c <HAL_SD_ErrorCallback>
#endif
  }
}
 80098ac:	bf00      	nop
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	004005ff 	.word	0x004005ff

080098b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098b8:	b5b0      	push	{r4, r5, r7, lr}
 80098ba:	b094      	sub	sp, #80	; 0x50
 80098bc:	af04      	add	r7, sp, #16
 80098be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80098c0:	2301      	movs	r3, #1
 80098c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f002 fa67 	bl	800bd9c <SDMMC_GetPowerState>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80098d8:	e0b7      	b.n	8009a4a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d02f      	beq.n	8009942 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f002 fc91 	bl	800c20e <SDMMC_CmdSendCID>
 80098ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80098ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80098f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f6:	e0a8      	b.n	8009a4a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f002 fa91 	bl	800be26 <SDMMC_GetResponse>
 8009904:	4602      	mov	r2, r0
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2104      	movs	r1, #4
 8009910:	4618      	mov	r0, r3
 8009912:	f002 fa88 	bl	800be26 <SDMMC_GetResponse>
 8009916:	4602      	mov	r2, r0
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2108      	movs	r1, #8
 8009922:	4618      	mov	r0, r3
 8009924:	f002 fa7f 	bl	800be26 <SDMMC_GetResponse>
 8009928:	4602      	mov	r2, r0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	210c      	movs	r1, #12
 8009934:	4618      	mov	r0, r3
 8009936:	f002 fa76 	bl	800be26 <SDMMC_GetResponse>
 800993a:	4602      	mov	r2, r0
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	2b03      	cmp	r3, #3
 8009948:	d00d      	beq.n	8009966 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f107 020e 	add.w	r2, r7, #14
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f002 fc97 	bl	800c288 <SDMMC_CmdSetRelAdd>
 800995a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800995c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <SD_InitCard+0xae>
    {
      return errorstate;
 8009962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009964:	e071      	b.n	8009a4a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996a:	2b03      	cmp	r3, #3
 800996c:	d036      	beq.n	80099dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800996e:	89fb      	ldrh	r3, [r7, #14]
 8009970:	461a      	mov	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f002 fc61 	bl	800c24a <SDMMC_CmdSendCSD>
 8009988:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009992:	e05a      	b.n	8009a4a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2100      	movs	r1, #0
 800999a:	4618      	mov	r0, r3
 800999c:	f002 fa43 	bl	800be26 <SDMMC_GetResponse>
 80099a0:	4602      	mov	r2, r0
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2104      	movs	r1, #4
 80099ac:	4618      	mov	r0, r3
 80099ae:	f002 fa3a 	bl	800be26 <SDMMC_GetResponse>
 80099b2:	4602      	mov	r2, r0
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2108      	movs	r1, #8
 80099be:	4618      	mov	r0, r3
 80099c0:	f002 fa31 	bl	800be26 <SDMMC_GetResponse>
 80099c4:	4602      	mov	r2, r0
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	210c      	movs	r1, #12
 80099d0:	4618      	mov	r0, r3
 80099d2:	f002 fa28 	bl	800be26 <SDMMC_GetResponse>
 80099d6:	4602      	mov	r2, r0
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2104      	movs	r1, #4
 80099e2:	4618      	mov	r0, r3
 80099e4:	f002 fa1f 	bl	800be26 <SDMMC_GetResponse>
 80099e8:	4603      	mov	r3, r0
 80099ea:	0d1a      	lsrs	r2, r3, #20
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80099f0:	f107 0310 	add.w	r3, r7, #16
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fc52 	bl	80092a0 <HAL_SD_GetCardCSD>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a06:	e020      	b.n	8009a4a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6819      	ldr	r1, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a10:	041b      	lsls	r3, r3, #16
 8009a12:	f04f 0400 	mov.w	r4, #0
 8009a16:	461a      	mov	r2, r3
 8009a18:	4623      	mov	r3, r4
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	f002 fb0e 	bl	800c03c <SDMMC_CmdSelDesel>
 8009a20:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <SD_InitCard+0x174>
  {
    return errorstate;
 8009a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2a:	e00e      	b.n	8009a4a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681d      	ldr	r5, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	466c      	mov	r4, sp
 8009a34:	f103 0210 	add.w	r2, r3, #16
 8009a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a3e:	3304      	adds	r3, #4
 8009a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a42:	4628      	mov	r0, r5
 8009a44:	f002 f962 	bl	800bd0c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3740      	adds	r7, #64	; 0x40
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009a54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f002 fb08 	bl	800c082 <SDMMC_CmdGoIdleState>
 8009a72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	e072      	b.n	8009b64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f002 fb1b 	bl	800c0be <SDMMC_CmdOperCond>
 8009a88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00d      	beq.n	8009aac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f002 faf1 	bl	800c082 <SDMMC_CmdGoIdleState>
 8009aa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	e05b      	b.n	8009b64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d137      	bne.n	8009b2a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f002 fb1b 	bl	800c0fc <SDMMC_CmdAppCommand>
 8009ac6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d02d      	beq.n	8009b2a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ace:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ad2:	e047      	b.n	8009b64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f002 fb0e 	bl	800c0fc <SDMMC_CmdAppCommand>
 8009ae0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <SD_PowerON+0x98>
    {
      return errorstate;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	e03b      	b.n	8009b64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	491e      	ldr	r1, [pc, #120]	; (8009b6c <SD_PowerON+0x118>)
 8009af2:	4618      	mov	r0, r3
 8009af4:	f002 fb24 	bl	800c140 <SDMMC_CmdAppOperCommand>
 8009af8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b04:	e02e      	b.n	8009b64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f002 f98a 	bl	800be26 <SDMMC_GetResponse>
 8009b12:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	0fdb      	lsrs	r3, r3, #31
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <SD_PowerON+0xcc>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e000      	b.n	8009b22 <SD_PowerON+0xce>
 8009b20:	2300      	movs	r3, #0
 8009b22:	613b      	str	r3, [r7, #16]

    count++;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3301      	adds	r3, #1
 8009b28:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d802      	bhi.n	8009b3a <SD_PowerON+0xe6>
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0cc      	beq.n	8009ad4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d902      	bls.n	8009b4a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b48:	e00c      	b.n	8009b64 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	645a      	str	r2, [r3, #68]	; 0x44
 8009b5a:	e002      	b.n	8009b62 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	c1100000 	.word	0xc1100000

08009b70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b84:	e018      	b.n	8009bb8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8e:	041b      	lsls	r3, r3, #16
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f002 fb99 	bl	800c2ca <SDMMC_CmdSendStatus>
 8009b98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	e009      	b.n	8009bb8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f002 f93b 	bl	800be26 <SDMMC_GetResponse>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	2300      	movs	r3, #0
 8009bce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f002 f925 	bl	800be26 <SDMMC_GetResponse>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009be6:	d102      	bne.n	8009bee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bec:	e02f      	b.n	8009c4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009bee:	f107 030c 	add.w	r3, r7, #12
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f879 	bl	8009cec <SD_FindSCR>
 8009bfa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	e023      	b.n	8009c4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01c      	beq.n	8009c4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	041b      	lsls	r3, r3, #16
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f002 fa6d 	bl	800c0fc <SDMMC_CmdAppCommand>
 8009c22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	e00f      	b.n	8009c4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2102      	movs	r1, #2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f002 faa7 	bl	800c188 <SDMMC_CmdBusWidth>
 8009c3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	e003      	b.n	8009c4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e001      	b.n	8009c4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	2300      	movs	r3, #0
 8009c64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f002 f8da 	bl	800be26 <SDMMC_GetResponse>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c7c:	d102      	bne.n	8009c84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c82:	e02f      	b.n	8009ce4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c84:	f107 030c 	add.w	r3, r7, #12
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f82e 	bl	8009cec <SD_FindSCR>
 8009c90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	e023      	b.n	8009ce4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d01c      	beq.n	8009ce0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cae:	041b      	lsls	r3, r3, #16
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f002 fa22 	bl	800c0fc <SDMMC_CmdAppCommand>
 8009cb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	e00f      	b.n	8009ce4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f002 fa5c 	bl	800c188 <SDMMC_CmdBusWidth>
 8009cd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	e003      	b.n	8009ce4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	e001      	b.n	8009ce4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ce0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b08f      	sub	sp, #60	; 0x3c
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009cf6:	f7f9 f8b5 	bl	8002e64 <HAL_GetTick>
 8009cfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009d00:	2300      	movs	r3, #0
 8009d02:	60bb      	str	r3, [r7, #8]
 8009d04:	2300      	movs	r3, #0
 8009d06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2108      	movs	r1, #8
 8009d12:	4618      	mov	r0, r3
 8009d14:	f002 f8c6 	bl	800bea4 <SDMMC_CmdBlockLength>
 8009d18:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	e0a9      	b.n	8009e78 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d2c:	041b      	lsls	r3, r3, #16
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4610      	mov	r0, r2
 8009d32:	f002 f9e3 	bl	800c0fc <SDMMC_CmdAppCommand>
 8009d36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	e09a      	b.n	8009e78 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d42:	f04f 33ff 	mov.w	r3, #4294967295
 8009d46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009d48:	2308      	movs	r3, #8
 8009d4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009d4c:	2330      	movs	r3, #48	; 0x30
 8009d4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d50:	2302      	movs	r3, #2
 8009d52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f107 0210 	add.w	r2, r7, #16
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f002 f870 	bl	800be4c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f002 fa2b 	bl	800c1cc <SDMMC_CmdSendSCR>
 8009d76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d022      	beq.n	8009dc4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	e07a      	b.n	8009e78 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00e      	beq.n	8009dae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	f107 0208 	add.w	r2, r7, #8
 8009d9c:	18d4      	adds	r4, r2, r3
 8009d9e:	4608      	mov	r0, r1
 8009da0:	f001 ffe0 	bl	800bd64 <SDMMC_ReadFIFO>
 8009da4:	4603      	mov	r3, r0
 8009da6:	6023      	str	r3, [r4, #0]
      index++;
 8009da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009daa:	3301      	adds	r3, #1
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dae:	f7f9 f859 	bl	8002e64 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbc:	d102      	bne.n	8009dc4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dc2:	e059      	b.n	8009e78 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dca:	f240 432a 	movw	r3, #1066	; 0x42a
 8009dce:	4013      	ands	r3, r2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0d6      	beq.n	8009d82 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2208      	movs	r2, #8
 8009de8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009dea:	2308      	movs	r3, #8
 8009dec:	e044      	b.n	8009e78 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d005      	beq.n	8009e08 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2202      	movs	r2, #2
 8009e02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e04:	2302      	movs	r3, #2
 8009e06:	e037      	b.n	8009e78 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d005      	beq.n	8009e22 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009e1e:	2320      	movs	r3, #32
 8009e20:	e02a      	b.n	8009e78 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e2a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	061a      	lsls	r2, r3, #24
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e38:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	0a1b      	lsrs	r3, r3, #8
 8009e3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	0e1b      	lsrs	r3, r3, #24
 8009e48:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	601a      	str	r2, [r3, #0]
    scr++;
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	3304      	adds	r3, #4
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	061a      	lsls	r2, r3, #24
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	021b      	lsls	r3, r3, #8
 8009e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e60:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	0a1b      	lsrs	r3, r3, #8
 8009e66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	0e1b      	lsrs	r3, r3, #24
 8009e70:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e74:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	373c      	adds	r7, #60	; 0x3c
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd90      	pop	{r4, r7, pc}

08009e80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e025      	b.n	8009ee0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d106      	bne.n	8009eae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7f6 ff21 	bl	8000cf0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f001 fe31 	bl	800bb28 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	f001 fe9b 	bl	800bc0c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e04c      	b.n	8009f94 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d106      	bne.n	8009f14 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f8 f804 	bl	8001f1c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 0203 	bic.w	r2, r2, #3
 8009f2a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	4b19      	ldr	r3, [pc, #100]	; (8009f9c <HAL_SPDIFRX_Init+0xb4>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009f44:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009f4a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009f50:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009f56:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009f5c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009f62:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009f68:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009f6e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009f74:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	fff88407 	.word	0xfff88407

08009fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e084      	b.n	800a0bc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d106      	bne.n	8009fd2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7f8 f825 	bl	800201c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fe8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ff2:	d902      	bls.n	8009ffa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e002      	b.n	800a000 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ffe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a008:	d007      	beq.n	800a01a <HAL_SPI_Init+0x7a>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a012:	d002      	beq.n	800a01a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10b      	bne.n	800a03a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a02a:	d903      	bls.n	800a034 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	631a      	str	r2, [r3, #48]	; 0x30
 800a032:	e002      	b.n	800a03a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a058:	431a      	orrs	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	431a      	orrs	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	ea42 0103 	orr.w	r1, r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	0c1b      	lsrs	r3, r3, #16
 800a07a:	f003 0204 	and.w	r2, r3, #4
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	431a      	orrs	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	431a      	orrs	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	ea42 0103 	orr.w	r1, r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	430a      	orrs	r2, r1
 800a09a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69da      	ldr	r2, [r3, #28]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e01d      	b.n	800a112 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7f8 fc20 	bl	8002930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4619      	mov	r1, r3
 800a102:	4610      	mov	r0, r2
 800a104:	f000 fb78 	bl	800a7f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0201 	orr.w	r2, r2, #1
 800a132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <HAL_TIM_Base_Start_IT+0x50>)
 800a13c:	4013      	ands	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b06      	cmp	r3, #6
 800a144:	d00b      	beq.n	800a15e <HAL_TIM_Base_Start_IT+0x42>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14c:	d007      	beq.n	800a15e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 0201 	orr.w	r2, r2, #1
 800a15c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	00010007 	.word	0x00010007

0800a170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e01d      	b.n	800a1be <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7f8 fc38 	bl	8002a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	f000 fb22 	bl	800a7f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d122      	bne.n	800a222 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d11b      	bne.n	800a222 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f06f 0202 	mvn.w	r2, #2
 800a1f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fad7 	bl	800a7bc <HAL_TIM_IC_CaptureCallback>
 800a20e:	e005      	b.n	800a21c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fac9 	bl	800a7a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fada 	bl	800a7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d122      	bne.n	800a276 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d11b      	bne.n	800a276 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f06f 0204 	mvn.w	r2, #4
 800a246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 faad 	bl	800a7bc <HAL_TIM_IC_CaptureCallback>
 800a262:	e005      	b.n	800a270 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fa9f 	bl	800a7a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fab0 	bl	800a7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	f003 0308 	and.w	r3, r3, #8
 800a280:	2b08      	cmp	r3, #8
 800a282:	d122      	bne.n	800a2ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b08      	cmp	r3, #8
 800a290:	d11b      	bne.n	800a2ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f06f 0208 	mvn.w	r2, #8
 800a29a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2204      	movs	r2, #4
 800a2a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fa83 	bl	800a7bc <HAL_TIM_IC_CaptureCallback>
 800a2b6:	e005      	b.n	800a2c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa75 	bl	800a7a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa86 	bl	800a7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b10      	cmp	r3, #16
 800a2d6:	d122      	bne.n	800a31e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f003 0310 	and.w	r3, r3, #16
 800a2e2:	2b10      	cmp	r3, #16
 800a2e4:	d11b      	bne.n	800a31e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f06f 0210 	mvn.w	r2, #16
 800a2ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	69db      	ldr	r3, [r3, #28]
 800a2fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a300:	2b00      	cmp	r3, #0
 800a302:	d003      	beq.n	800a30c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa59 	bl	800a7bc <HAL_TIM_IC_CaptureCallback>
 800a30a:	e005      	b.n	800a318 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fa4b 	bl	800a7a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa5c 	bl	800a7d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d10e      	bne.n	800a34a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b01      	cmp	r3, #1
 800a338:	d107      	bne.n	800a34a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f06f 0201 	mvn.w	r2, #1
 800a342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7f7 fa8f 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a354:	2b80      	cmp	r3, #128	; 0x80
 800a356:	d10e      	bne.n	800a376 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a362:	2b80      	cmp	r3, #128	; 0x80
 800a364:	d107      	bne.n	800a376 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a36e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 feef 	bl	800b154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a384:	d10e      	bne.n	800a3a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a390:	2b80      	cmp	r3, #128	; 0x80
 800a392:	d107      	bne.n	800a3a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a39c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fee2 	bl	800b168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ae:	2b40      	cmp	r3, #64	; 0x40
 800a3b0:	d10e      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3bc:	2b40      	cmp	r3, #64	; 0x40
 800a3be:	d107      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa0a 	bl	800a7e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f003 0320 	and.w	r3, r3, #32
 800a3da:	2b20      	cmp	r3, #32
 800a3dc:	d10e      	bne.n	800a3fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f003 0320 	and.w	r3, r3, #32
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	d107      	bne.n	800a3fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0220 	mvn.w	r2, #32
 800a3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fea2 	bl	800b140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e105      	b.n	800a62a <HAL_TIM_PWM_ConfigChannel+0x226>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2202      	movs	r2, #2
 800a42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b14      	cmp	r3, #20
 800a432:	f200 80f0 	bhi.w	800a616 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a436:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43c:	0800a491 	.word	0x0800a491
 800a440:	0800a617 	.word	0x0800a617
 800a444:	0800a617 	.word	0x0800a617
 800a448:	0800a617 	.word	0x0800a617
 800a44c:	0800a4d1 	.word	0x0800a4d1
 800a450:	0800a617 	.word	0x0800a617
 800a454:	0800a617 	.word	0x0800a617
 800a458:	0800a617 	.word	0x0800a617
 800a45c:	0800a513 	.word	0x0800a513
 800a460:	0800a617 	.word	0x0800a617
 800a464:	0800a617 	.word	0x0800a617
 800a468:	0800a617 	.word	0x0800a617
 800a46c:	0800a553 	.word	0x0800a553
 800a470:	0800a617 	.word	0x0800a617
 800a474:	0800a617 	.word	0x0800a617
 800a478:	0800a617 	.word	0x0800a617
 800a47c:	0800a595 	.word	0x0800a595
 800a480:	0800a617 	.word	0x0800a617
 800a484:	0800a617 	.word	0x0800a617
 800a488:	0800a617 	.word	0x0800a617
 800a48c:	0800a5d5 	.word	0x0800a5d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 fa4e 	bl	800a938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	699a      	ldr	r2, [r3, #24]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0208 	orr.w	r2, r2, #8
 800a4aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	699a      	ldr	r2, [r3, #24]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 0204 	bic.w	r2, r2, #4
 800a4ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6999      	ldr	r1, [r3, #24]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	619a      	str	r2, [r3, #24]
      break;
 800a4ce:	e0a3      	b.n	800a618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68b9      	ldr	r1, [r7, #8]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 faa0 	bl	800aa1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	699a      	ldr	r2, [r3, #24]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6999      	ldr	r1, [r3, #24]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	021a      	lsls	r2, r3, #8
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	619a      	str	r2, [r3, #24]
      break;
 800a510:	e082      	b.n	800a618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68b9      	ldr	r1, [r7, #8]
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 faf7 	bl	800ab0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69da      	ldr	r2, [r3, #28]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f042 0208 	orr.w	r2, r2, #8
 800a52c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	69da      	ldr	r2, [r3, #28]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0204 	bic.w	r2, r2, #4
 800a53c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	69d9      	ldr	r1, [r3, #28]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	691a      	ldr	r2, [r3, #16]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	61da      	str	r2, [r3, #28]
      break;
 800a550:	e062      	b.n	800a618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fb4d 	bl	800abf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	69da      	ldr	r2, [r3, #28]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a56c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	69da      	ldr	r2, [r3, #28]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a57c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69d9      	ldr	r1, [r3, #28]
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	021a      	lsls	r2, r3, #8
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	61da      	str	r2, [r3, #28]
      break;
 800a592:	e041      	b.n	800a618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fb84 	bl	800aca8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f042 0208 	orr.w	r2, r2, #8
 800a5ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0204 	bic.w	r2, r2, #4
 800a5be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	691a      	ldr	r2, [r3, #16]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a5d2:	e021      	b.n	800a618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68b9      	ldr	r1, [r7, #8]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fbb6 	bl	800ad4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	021a      	lsls	r2, r3, #8
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a614:	e000      	b.n	800a618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a616:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop

0800a634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a644:	2b01      	cmp	r3, #1
 800a646:	d101      	bne.n	800a64c <HAL_TIM_ConfigClockSource+0x18>
 800a648:	2302      	movs	r3, #2
 800a64a:	e0a6      	b.n	800a79a <HAL_TIM_ConfigClockSource+0x166>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4b4f      	ldr	r3, [pc, #316]	; (800a7a4 <HAL_TIM_ConfigClockSource+0x170>)
 800a668:	4013      	ands	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a672:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b40      	cmp	r3, #64	; 0x40
 800a682:	d067      	beq.n	800a754 <HAL_TIM_ConfigClockSource+0x120>
 800a684:	2b40      	cmp	r3, #64	; 0x40
 800a686:	d80b      	bhi.n	800a6a0 <HAL_TIM_ConfigClockSource+0x6c>
 800a688:	2b10      	cmp	r3, #16
 800a68a:	d073      	beq.n	800a774 <HAL_TIM_ConfigClockSource+0x140>
 800a68c:	2b10      	cmp	r3, #16
 800a68e:	d802      	bhi.n	800a696 <HAL_TIM_ConfigClockSource+0x62>
 800a690:	2b00      	cmp	r3, #0
 800a692:	d06f      	beq.n	800a774 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a694:	e078      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a696:	2b20      	cmp	r3, #32
 800a698:	d06c      	beq.n	800a774 <HAL_TIM_ConfigClockSource+0x140>
 800a69a:	2b30      	cmp	r3, #48	; 0x30
 800a69c:	d06a      	beq.n	800a774 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a69e:	e073      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a6a0:	2b70      	cmp	r3, #112	; 0x70
 800a6a2:	d00d      	beq.n	800a6c0 <HAL_TIM_ConfigClockSource+0x8c>
 800a6a4:	2b70      	cmp	r3, #112	; 0x70
 800a6a6:	d804      	bhi.n	800a6b2 <HAL_TIM_ConfigClockSource+0x7e>
 800a6a8:	2b50      	cmp	r3, #80	; 0x50
 800a6aa:	d033      	beq.n	800a714 <HAL_TIM_ConfigClockSource+0xe0>
 800a6ac:	2b60      	cmp	r3, #96	; 0x60
 800a6ae:	d041      	beq.n	800a734 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a6b0:	e06a      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b6:	d066      	beq.n	800a786 <HAL_TIM_ConfigClockSource+0x152>
 800a6b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6bc:	d017      	beq.n	800a6ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a6be:	e063      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6818      	ldr	r0, [r3, #0]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	6899      	ldr	r1, [r3, #8]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f000 fc0a 	bl	800aee8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	609a      	str	r2, [r3, #8]
      break;
 800a6ec:	e04c      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	6899      	ldr	r1, [r3, #8]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f000 fbf3 	bl	800aee8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689a      	ldr	r2, [r3, #8]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a710:	609a      	str	r2, [r3, #8]
      break;
 800a712:	e039      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	6859      	ldr	r1, [r3, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	461a      	mov	r2, r3
 800a722:	f000 fb67 	bl	800adf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2150      	movs	r1, #80	; 0x50
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fbc0 	bl	800aeb2 <TIM_ITRx_SetConfig>
      break;
 800a732:	e029      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	6859      	ldr	r1, [r3, #4]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	461a      	mov	r2, r3
 800a742:	f000 fb86 	bl	800ae52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2160      	movs	r1, #96	; 0x60
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fbb0 	bl	800aeb2 <TIM_ITRx_SetConfig>
      break;
 800a752:	e019      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6818      	ldr	r0, [r3, #0]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	6859      	ldr	r1, [r3, #4]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	461a      	mov	r2, r3
 800a762:	f000 fb47 	bl	800adf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2140      	movs	r1, #64	; 0x40
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 fba0 	bl	800aeb2 <TIM_ITRx_SetConfig>
      break;
 800a772:	e009      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4619      	mov	r1, r3
 800a77e:	4610      	mov	r0, r2
 800a780:	f000 fb97 	bl	800aeb2 <TIM_ITRx_SetConfig>
      break;
 800a784:	e000      	b.n	800a788 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	fffeff88 	.word	0xfffeff88

0800a7a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a40      	ldr	r2, [pc, #256]	; (800a90c <TIM_Base_SetConfig+0x114>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d013      	beq.n	800a838 <TIM_Base_SetConfig+0x40>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a816:	d00f      	beq.n	800a838 <TIM_Base_SetConfig+0x40>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a3d      	ldr	r2, [pc, #244]	; (800a910 <TIM_Base_SetConfig+0x118>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d00b      	beq.n	800a838 <TIM_Base_SetConfig+0x40>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a3c      	ldr	r2, [pc, #240]	; (800a914 <TIM_Base_SetConfig+0x11c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d007      	beq.n	800a838 <TIM_Base_SetConfig+0x40>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a3b      	ldr	r2, [pc, #236]	; (800a918 <TIM_Base_SetConfig+0x120>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d003      	beq.n	800a838 <TIM_Base_SetConfig+0x40>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a3a      	ldr	r2, [pc, #232]	; (800a91c <TIM_Base_SetConfig+0x124>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d108      	bne.n	800a84a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a83e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a2f      	ldr	r2, [pc, #188]	; (800a90c <TIM_Base_SetConfig+0x114>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d02b      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a858:	d027      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a2c      	ldr	r2, [pc, #176]	; (800a910 <TIM_Base_SetConfig+0x118>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d023      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a2b      	ldr	r2, [pc, #172]	; (800a914 <TIM_Base_SetConfig+0x11c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d01f      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a2a      	ldr	r2, [pc, #168]	; (800a918 <TIM_Base_SetConfig+0x120>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d01b      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a29      	ldr	r2, [pc, #164]	; (800a91c <TIM_Base_SetConfig+0x124>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d017      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a28      	ldr	r2, [pc, #160]	; (800a920 <TIM_Base_SetConfig+0x128>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d013      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a27      	ldr	r2, [pc, #156]	; (800a924 <TIM_Base_SetConfig+0x12c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d00f      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a26      	ldr	r2, [pc, #152]	; (800a928 <TIM_Base_SetConfig+0x130>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00b      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a25      	ldr	r2, [pc, #148]	; (800a92c <TIM_Base_SetConfig+0x134>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d007      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a24      	ldr	r2, [pc, #144]	; (800a930 <TIM_Base_SetConfig+0x138>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d003      	beq.n	800a8aa <TIM_Base_SetConfig+0xb2>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a23      	ldr	r2, [pc, #140]	; (800a934 <TIM_Base_SetConfig+0x13c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d108      	bne.n	800a8bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a0a      	ldr	r2, [pc, #40]	; (800a90c <TIM_Base_SetConfig+0x114>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d003      	beq.n	800a8f0 <TIM_Base_SetConfig+0xf8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a0c      	ldr	r2, [pc, #48]	; (800a91c <TIM_Base_SetConfig+0x124>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d103      	bne.n	800a8f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	691a      	ldr	r2, [r3, #16]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	615a      	str	r2, [r3, #20]
}
 800a8fe:	bf00      	nop
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	40010000 	.word	0x40010000
 800a910:	40000400 	.word	0x40000400
 800a914:	40000800 	.word	0x40000800
 800a918:	40000c00 	.word	0x40000c00
 800a91c:	40010400 	.word	0x40010400
 800a920:	40014000 	.word	0x40014000
 800a924:	40014400 	.word	0x40014400
 800a928:	40014800 	.word	0x40014800
 800a92c:	40001800 	.word	0x40001800
 800a930:	40001c00 	.word	0x40001c00
 800a934:	40002000 	.word	0x40002000

0800a938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a938:	b480      	push	{r7}
 800a93a:	b087      	sub	sp, #28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f023 0201 	bic.w	r2, r3, #1
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	4b2b      	ldr	r3, [pc, #172]	; (800aa10 <TIM_OC1_SetConfig+0xd8>)
 800a964:	4013      	ands	r3, r2
 800a966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f023 0303 	bic.w	r3, r3, #3
 800a96e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4313      	orrs	r3, r2
 800a978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f023 0302 	bic.w	r3, r3, #2
 800a980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4313      	orrs	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a21      	ldr	r2, [pc, #132]	; (800aa14 <TIM_OC1_SetConfig+0xdc>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d003      	beq.n	800a99c <TIM_OC1_SetConfig+0x64>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a20      	ldr	r2, [pc, #128]	; (800aa18 <TIM_OC1_SetConfig+0xe0>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d10c      	bne.n	800a9b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f023 0308 	bic.w	r3, r3, #8
 800a9a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f023 0304 	bic.w	r3, r3, #4
 800a9b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a16      	ldr	r2, [pc, #88]	; (800aa14 <TIM_OC1_SetConfig+0xdc>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d003      	beq.n	800a9c6 <TIM_OC1_SetConfig+0x8e>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a15      	ldr	r2, [pc, #84]	; (800aa18 <TIM_OC1_SetConfig+0xe0>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d111      	bne.n	800a9ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	621a      	str	r2, [r3, #32]
}
 800aa04:	bf00      	nop
 800aa06:	371c      	adds	r7, #28
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	fffeff8f 	.word	0xfffeff8f
 800aa14:	40010000 	.word	0x40010000
 800aa18:	40010400 	.word	0x40010400

0800aa1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	f023 0210 	bic.w	r2, r3, #16
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4b2e      	ldr	r3, [pc, #184]	; (800ab00 <TIM_OC2_SetConfig+0xe4>)
 800aa48:	4013      	ands	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	021b      	lsls	r3, r3, #8
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f023 0320 	bic.w	r3, r3, #32
 800aa66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	011b      	lsls	r3, r3, #4
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a23      	ldr	r2, [pc, #140]	; (800ab04 <TIM_OC2_SetConfig+0xe8>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d003      	beq.n	800aa84 <TIM_OC2_SetConfig+0x68>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a22      	ldr	r2, [pc, #136]	; (800ab08 <TIM_OC2_SetConfig+0xec>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d10d      	bne.n	800aaa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a18      	ldr	r2, [pc, #96]	; (800ab04 <TIM_OC2_SetConfig+0xe8>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d003      	beq.n	800aab0 <TIM_OC2_SetConfig+0x94>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a17      	ldr	r2, [pc, #92]	; (800ab08 <TIM_OC2_SetConfig+0xec>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d113      	bne.n	800aad8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aabe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	621a      	str	r2, [r3, #32]
}
 800aaf2:	bf00      	nop
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	feff8fff 	.word	0xfeff8fff
 800ab04:	40010000 	.word	0x40010000
 800ab08:	40010400 	.word	0x40010400

0800ab0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4b2d      	ldr	r3, [pc, #180]	; (800abec <TIM_OC3_SetConfig+0xe0>)
 800ab38:	4013      	ands	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f023 0303 	bic.w	r3, r3, #3
 800ab42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	021b      	lsls	r3, r3, #8
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a22      	ldr	r2, [pc, #136]	; (800abf0 <TIM_OC3_SetConfig+0xe4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d003      	beq.n	800ab72 <TIM_OC3_SetConfig+0x66>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a21      	ldr	r2, [pc, #132]	; (800abf4 <TIM_OC3_SetConfig+0xe8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d10d      	bne.n	800ab8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	021b      	lsls	r3, r3, #8
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a17      	ldr	r2, [pc, #92]	; (800abf0 <TIM_OC3_SetConfig+0xe4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d003      	beq.n	800ab9e <TIM_OC3_SetConfig+0x92>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a16      	ldr	r2, [pc, #88]	; (800abf4 <TIM_OC3_SetConfig+0xe8>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d113      	bne.n	800abc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	621a      	str	r2, [r3, #32]
}
 800abe0:	bf00      	nop
 800abe2:	371c      	adds	r7, #28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	fffeff8f 	.word	0xfffeff8f
 800abf0:	40010000 	.word	0x40010000
 800abf4:	40010400 	.word	0x40010400

0800abf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4b1e      	ldr	r3, [pc, #120]	; (800ac9c <TIM_OC4_SetConfig+0xa4>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	021b      	lsls	r3, r3, #8
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	031b      	lsls	r3, r3, #12
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <TIM_OC4_SetConfig+0xa8>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d003      	beq.n	800ac60 <TIM_OC4_SetConfig+0x68>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a12      	ldr	r2, [pc, #72]	; (800aca4 <TIM_OC4_SetConfig+0xac>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d109      	bne.n	800ac74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	019b      	lsls	r3, r3, #6
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	621a      	str	r2, [r3, #32]
}
 800ac8e:	bf00      	nop
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	feff8fff 	.word	0xfeff8fff
 800aca0:	40010000 	.word	0x40010000
 800aca4:	40010400 	.word	0x40010400

0800aca8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4b1b      	ldr	r3, [pc, #108]	; (800ad40 <TIM_OC5_SetConfig+0x98>)
 800acd4:	4013      	ands	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ace8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	041b      	lsls	r3, r3, #16
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a12      	ldr	r2, [pc, #72]	; (800ad44 <TIM_OC5_SetConfig+0x9c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d003      	beq.n	800ad06 <TIM_OC5_SetConfig+0x5e>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a11      	ldr	r2, [pc, #68]	; (800ad48 <TIM_OC5_SetConfig+0xa0>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d109      	bne.n	800ad1a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	021b      	lsls	r3, r3, #8
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	621a      	str	r2, [r3, #32]
}
 800ad34:	bf00      	nop
 800ad36:	371c      	adds	r7, #28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	fffeff8f 	.word	0xfffeff8f
 800ad44:	40010000 	.word	0x40010000
 800ad48:	40010400 	.word	0x40010400

0800ad4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4b1c      	ldr	r3, [pc, #112]	; (800ade8 <TIM_OC6_SetConfig+0x9c>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	021b      	lsls	r3, r3, #8
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	051b      	lsls	r3, r3, #20
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a13      	ldr	r2, [pc, #76]	; (800adec <TIM_OC6_SetConfig+0xa0>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d003      	beq.n	800adac <TIM_OC6_SetConfig+0x60>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a12      	ldr	r2, [pc, #72]	; (800adf0 <TIM_OC6_SetConfig+0xa4>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d109      	bne.n	800adc0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800adb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	695b      	ldr	r3, [r3, #20]
 800adb8:	029b      	lsls	r3, r3, #10
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	621a      	str	r2, [r3, #32]
}
 800adda:	bf00      	nop
 800addc:	371c      	adds	r7, #28
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	feff8fff 	.word	0xfeff8fff
 800adec:	40010000 	.word	0x40010000
 800adf0:	40010400 	.word	0x40010400

0800adf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b087      	sub	sp, #28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	f023 0201 	bic.w	r2, r3, #1
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	011b      	lsls	r3, r3, #4
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f023 030a 	bic.w	r3, r3, #10
 800ae30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	621a      	str	r2, [r3, #32]
}
 800ae46:	bf00      	nop
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b087      	sub	sp, #28
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	60f8      	str	r0, [r7, #12]
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f023 0210 	bic.w	r2, r3, #16
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	031b      	lsls	r3, r3, #12
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	621a      	str	r2, [r3, #32]
}
 800aea6:	bf00      	nop
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b085      	sub	sp, #20
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	4313      	orrs	r3, r2
 800aed0:	f043 0307 	orr.w	r3, r3, #7
 800aed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	609a      	str	r2, [r3, #8]
}
 800aedc:	bf00      	nop
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	021a      	lsls	r2, r3, #8
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	431a      	orrs	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4313      	orrs	r3, r2
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	609a      	str	r2, [r3, #8]
}
 800af1c:	bf00      	nop
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e06d      	b.n	800b01c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2202      	movs	r2, #2
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a30      	ldr	r2, [pc, #192]	; (800b028 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d004      	beq.n	800af74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a2f      	ldr	r2, [pc, #188]	; (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d108      	bne.n	800af86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a20      	ldr	r2, [pc, #128]	; (800b028 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d022      	beq.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb2:	d01d      	beq.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a1d      	ldr	r2, [pc, #116]	; (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d018      	beq.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a1c      	ldr	r2, [pc, #112]	; (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d013      	beq.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a1a      	ldr	r2, [pc, #104]	; (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00e      	beq.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a15      	ldr	r2, [pc, #84]	; (800b02c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d009      	beq.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a16      	ldr	r2, [pc, #88]	; (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d004      	beq.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a15      	ldr	r2, [pc, #84]	; (800b040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d10c      	bne.n	800b00a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	4313      	orrs	r3, r2
 800b000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr
 800b028:	40010000 	.word	0x40010000
 800b02c:	40010400 	.word	0x40010400
 800b030:	40000400 	.word	0x40000400
 800b034:	40000800 	.word	0x40000800
 800b038:	40000c00 	.word	0x40000c00
 800b03c:	40014000 	.word	0x40014000
 800b040:	40001800 	.word	0x40001800

0800b044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d101      	bne.n	800b060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b05c:	2302      	movs	r3, #2
 800b05e:	e065      	b.n	800b12c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	4313      	orrs	r3, r2
 800b074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	4313      	orrs	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4313      	orrs	r3, r2
 800b090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	041b      	lsls	r3, r3, #16
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a16      	ldr	r2, [pc, #88]	; (800b138 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d004      	beq.n	800b0ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a14      	ldr	r2, [pc, #80]	; (800b13c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d115      	bne.n	800b11a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	051b      	lsls	r3, r3, #20
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	69db      	ldr	r3, [r3, #28]
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	4313      	orrs	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	40010000 	.word	0x40010000
 800b13c:	40010400 	.word	0x40010400

0800b140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e040      	b.n	800b210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b192:	2b00      	cmp	r3, #0
 800b194:	d106      	bne.n	800b1a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7f7 fd82 	bl	8002ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2224      	movs	r2, #36	; 0x24
 800b1a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f022 0201 	bic.w	r2, r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f8be 	bl	800b33c <UART_SetConfig>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d101      	bne.n	800b1ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e022      	b.n	800b210 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fb5c 	bl	800b890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689a      	ldr	r2, [r3, #8]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f042 0201 	orr.w	r2, r2, #1
 800b206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fbe3 	bl	800b9d4 <UART_CheckIdleState>
 800b20e:	4603      	mov	r3, r0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08a      	sub	sp, #40	; 0x28
 800b21c:	af02      	add	r7, sp, #8
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	4613      	mov	r3, r2
 800b226:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	d17f      	bne.n	800b330 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <HAL_UART_Transmit+0x24>
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d101      	bne.n	800b240 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e078      	b.n	800b332 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b246:	2b01      	cmp	r3, #1
 800b248:	d101      	bne.n	800b24e <HAL_UART_Transmit+0x36>
 800b24a:	2302      	movs	r3, #2
 800b24c:	e071      	b.n	800b332 <HAL_UART_Transmit+0x11a>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2221      	movs	r2, #33	; 0x21
 800b260:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b262:	f7f7 fdff 	bl	8002e64 <HAL_GetTick>
 800b266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	88fa      	ldrh	r2, [r7, #6]
 800b26c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	88fa      	ldrh	r2, [r7, #6]
 800b274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b280:	d108      	bne.n	800b294 <HAL_UART_Transmit+0x7c>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d104      	bne.n	800b294 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	61bb      	str	r3, [r7, #24]
 800b292:	e003      	b.n	800b29c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b2a4:	e02c      	b.n	800b300 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2180      	movs	r1, #128	; 0x80
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 fbbe 	bl	800ba32 <UART_WaitOnFlagUntilTimeout>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e038      	b.n	800b332 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10b      	bne.n	800b2de <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	3302      	adds	r3, #2
 800b2da:	61bb      	str	r3, [r7, #24]
 800b2dc:	e007      	b.n	800b2ee <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	781a      	ldrb	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b306:	b29b      	uxth	r3, r3
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1cc      	bne.n	800b2a6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2200      	movs	r2, #0
 800b314:	2140      	movs	r1, #64	; 0x40
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f000 fb8b 	bl	800ba32 <UART_WaitOnFlagUntilTimeout>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e005      	b.n	800b332 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2220      	movs	r2, #32
 800b32a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	e000      	b.n	800b332 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b330:	2302      	movs	r3, #2
  }
}
 800b332:	4618      	mov	r0, r3
 800b334:	3720      	adds	r7, #32
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b344:	2300      	movs	r3, #0
 800b346:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689a      	ldr	r2, [r3, #8]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	431a      	orrs	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	431a      	orrs	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	4313      	orrs	r3, r2
 800b362:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	4bb1      	ldr	r3, [pc, #708]	; (800b630 <UART_SetConfig+0x2f4>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	6812      	ldr	r2, [r2, #0]
 800b372:	6939      	ldr	r1, [r7, #16]
 800b374:	430b      	orrs	r3, r1
 800b376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68da      	ldr	r2, [r3, #12]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	430a      	orrs	r2, r1
 800b38c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a9f      	ldr	r2, [pc, #636]	; (800b634 <UART_SetConfig+0x2f8>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d121      	bne.n	800b400 <UART_SetConfig+0xc4>
 800b3bc:	4b9e      	ldr	r3, [pc, #632]	; (800b638 <UART_SetConfig+0x2fc>)
 800b3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d816      	bhi.n	800b3f8 <UART_SetConfig+0xbc>
 800b3ca:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <UART_SetConfig+0x94>)
 800b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d0:	0800b3e1 	.word	0x0800b3e1
 800b3d4:	0800b3ed 	.word	0x0800b3ed
 800b3d8:	0800b3e7 	.word	0x0800b3e7
 800b3dc:	0800b3f3 	.word	0x0800b3f3
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	77fb      	strb	r3, [r7, #31]
 800b3e4:	e151      	b.n	800b68a <UART_SetConfig+0x34e>
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	77fb      	strb	r3, [r7, #31]
 800b3ea:	e14e      	b.n	800b68a <UART_SetConfig+0x34e>
 800b3ec:	2304      	movs	r3, #4
 800b3ee:	77fb      	strb	r3, [r7, #31]
 800b3f0:	e14b      	b.n	800b68a <UART_SetConfig+0x34e>
 800b3f2:	2308      	movs	r3, #8
 800b3f4:	77fb      	strb	r3, [r7, #31]
 800b3f6:	e148      	b.n	800b68a <UART_SetConfig+0x34e>
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	77fb      	strb	r3, [r7, #31]
 800b3fc:	bf00      	nop
 800b3fe:	e144      	b.n	800b68a <UART_SetConfig+0x34e>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a8d      	ldr	r2, [pc, #564]	; (800b63c <UART_SetConfig+0x300>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d134      	bne.n	800b474 <UART_SetConfig+0x138>
 800b40a:	4b8b      	ldr	r3, [pc, #556]	; (800b638 <UART_SetConfig+0x2fc>)
 800b40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b410:	f003 030c 	and.w	r3, r3, #12
 800b414:	2b0c      	cmp	r3, #12
 800b416:	d829      	bhi.n	800b46c <UART_SetConfig+0x130>
 800b418:	a201      	add	r2, pc, #4	; (adr r2, 800b420 <UART_SetConfig+0xe4>)
 800b41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41e:	bf00      	nop
 800b420:	0800b455 	.word	0x0800b455
 800b424:	0800b46d 	.word	0x0800b46d
 800b428:	0800b46d 	.word	0x0800b46d
 800b42c:	0800b46d 	.word	0x0800b46d
 800b430:	0800b461 	.word	0x0800b461
 800b434:	0800b46d 	.word	0x0800b46d
 800b438:	0800b46d 	.word	0x0800b46d
 800b43c:	0800b46d 	.word	0x0800b46d
 800b440:	0800b45b 	.word	0x0800b45b
 800b444:	0800b46d 	.word	0x0800b46d
 800b448:	0800b46d 	.word	0x0800b46d
 800b44c:	0800b46d 	.word	0x0800b46d
 800b450:	0800b467 	.word	0x0800b467
 800b454:	2300      	movs	r3, #0
 800b456:	77fb      	strb	r3, [r7, #31]
 800b458:	e117      	b.n	800b68a <UART_SetConfig+0x34e>
 800b45a:	2302      	movs	r3, #2
 800b45c:	77fb      	strb	r3, [r7, #31]
 800b45e:	e114      	b.n	800b68a <UART_SetConfig+0x34e>
 800b460:	2304      	movs	r3, #4
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e111      	b.n	800b68a <UART_SetConfig+0x34e>
 800b466:	2308      	movs	r3, #8
 800b468:	77fb      	strb	r3, [r7, #31]
 800b46a:	e10e      	b.n	800b68a <UART_SetConfig+0x34e>
 800b46c:	2310      	movs	r3, #16
 800b46e:	77fb      	strb	r3, [r7, #31]
 800b470:	bf00      	nop
 800b472:	e10a      	b.n	800b68a <UART_SetConfig+0x34e>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a71      	ldr	r2, [pc, #452]	; (800b640 <UART_SetConfig+0x304>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d120      	bne.n	800b4c0 <UART_SetConfig+0x184>
 800b47e:	4b6e      	ldr	r3, [pc, #440]	; (800b638 <UART_SetConfig+0x2fc>)
 800b480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b484:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b488:	2b10      	cmp	r3, #16
 800b48a:	d00f      	beq.n	800b4ac <UART_SetConfig+0x170>
 800b48c:	2b10      	cmp	r3, #16
 800b48e:	d802      	bhi.n	800b496 <UART_SetConfig+0x15a>
 800b490:	2b00      	cmp	r3, #0
 800b492:	d005      	beq.n	800b4a0 <UART_SetConfig+0x164>
 800b494:	e010      	b.n	800b4b8 <UART_SetConfig+0x17c>
 800b496:	2b20      	cmp	r3, #32
 800b498:	d005      	beq.n	800b4a6 <UART_SetConfig+0x16a>
 800b49a:	2b30      	cmp	r3, #48	; 0x30
 800b49c:	d009      	beq.n	800b4b2 <UART_SetConfig+0x176>
 800b49e:	e00b      	b.n	800b4b8 <UART_SetConfig+0x17c>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	77fb      	strb	r3, [r7, #31]
 800b4a4:	e0f1      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	77fb      	strb	r3, [r7, #31]
 800b4aa:	e0ee      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	77fb      	strb	r3, [r7, #31]
 800b4b0:	e0eb      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4b2:	2308      	movs	r3, #8
 800b4b4:	77fb      	strb	r3, [r7, #31]
 800b4b6:	e0e8      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4b8:	2310      	movs	r3, #16
 800b4ba:	77fb      	strb	r3, [r7, #31]
 800b4bc:	bf00      	nop
 800b4be:	e0e4      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a5f      	ldr	r2, [pc, #380]	; (800b644 <UART_SetConfig+0x308>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d120      	bne.n	800b50c <UART_SetConfig+0x1d0>
 800b4ca:	4b5b      	ldr	r3, [pc, #364]	; (800b638 <UART_SetConfig+0x2fc>)
 800b4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b4d4:	2b40      	cmp	r3, #64	; 0x40
 800b4d6:	d00f      	beq.n	800b4f8 <UART_SetConfig+0x1bc>
 800b4d8:	2b40      	cmp	r3, #64	; 0x40
 800b4da:	d802      	bhi.n	800b4e2 <UART_SetConfig+0x1a6>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d005      	beq.n	800b4ec <UART_SetConfig+0x1b0>
 800b4e0:	e010      	b.n	800b504 <UART_SetConfig+0x1c8>
 800b4e2:	2b80      	cmp	r3, #128	; 0x80
 800b4e4:	d005      	beq.n	800b4f2 <UART_SetConfig+0x1b6>
 800b4e6:	2bc0      	cmp	r3, #192	; 0xc0
 800b4e8:	d009      	beq.n	800b4fe <UART_SetConfig+0x1c2>
 800b4ea:	e00b      	b.n	800b504 <UART_SetConfig+0x1c8>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	77fb      	strb	r3, [r7, #31]
 800b4f0:	e0cb      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	77fb      	strb	r3, [r7, #31]
 800b4f6:	e0c8      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4f8:	2304      	movs	r3, #4
 800b4fa:	77fb      	strb	r3, [r7, #31]
 800b4fc:	e0c5      	b.n	800b68a <UART_SetConfig+0x34e>
 800b4fe:	2308      	movs	r3, #8
 800b500:	77fb      	strb	r3, [r7, #31]
 800b502:	e0c2      	b.n	800b68a <UART_SetConfig+0x34e>
 800b504:	2310      	movs	r3, #16
 800b506:	77fb      	strb	r3, [r7, #31]
 800b508:	bf00      	nop
 800b50a:	e0be      	b.n	800b68a <UART_SetConfig+0x34e>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a4d      	ldr	r2, [pc, #308]	; (800b648 <UART_SetConfig+0x30c>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d124      	bne.n	800b560 <UART_SetConfig+0x224>
 800b516:	4b48      	ldr	r3, [pc, #288]	; (800b638 <UART_SetConfig+0x2fc>)
 800b518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b524:	d012      	beq.n	800b54c <UART_SetConfig+0x210>
 800b526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b52a:	d802      	bhi.n	800b532 <UART_SetConfig+0x1f6>
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d007      	beq.n	800b540 <UART_SetConfig+0x204>
 800b530:	e012      	b.n	800b558 <UART_SetConfig+0x21c>
 800b532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b536:	d006      	beq.n	800b546 <UART_SetConfig+0x20a>
 800b538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b53c:	d009      	beq.n	800b552 <UART_SetConfig+0x216>
 800b53e:	e00b      	b.n	800b558 <UART_SetConfig+0x21c>
 800b540:	2300      	movs	r3, #0
 800b542:	77fb      	strb	r3, [r7, #31]
 800b544:	e0a1      	b.n	800b68a <UART_SetConfig+0x34e>
 800b546:	2302      	movs	r3, #2
 800b548:	77fb      	strb	r3, [r7, #31]
 800b54a:	e09e      	b.n	800b68a <UART_SetConfig+0x34e>
 800b54c:	2304      	movs	r3, #4
 800b54e:	77fb      	strb	r3, [r7, #31]
 800b550:	e09b      	b.n	800b68a <UART_SetConfig+0x34e>
 800b552:	2308      	movs	r3, #8
 800b554:	77fb      	strb	r3, [r7, #31]
 800b556:	e098      	b.n	800b68a <UART_SetConfig+0x34e>
 800b558:	2310      	movs	r3, #16
 800b55a:	77fb      	strb	r3, [r7, #31]
 800b55c:	bf00      	nop
 800b55e:	e094      	b.n	800b68a <UART_SetConfig+0x34e>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a39      	ldr	r2, [pc, #228]	; (800b64c <UART_SetConfig+0x310>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d124      	bne.n	800b5b4 <UART_SetConfig+0x278>
 800b56a:	4b33      	ldr	r3, [pc, #204]	; (800b638 <UART_SetConfig+0x2fc>)
 800b56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b578:	d012      	beq.n	800b5a0 <UART_SetConfig+0x264>
 800b57a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b57e:	d802      	bhi.n	800b586 <UART_SetConfig+0x24a>
 800b580:	2b00      	cmp	r3, #0
 800b582:	d007      	beq.n	800b594 <UART_SetConfig+0x258>
 800b584:	e012      	b.n	800b5ac <UART_SetConfig+0x270>
 800b586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b58a:	d006      	beq.n	800b59a <UART_SetConfig+0x25e>
 800b58c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b590:	d009      	beq.n	800b5a6 <UART_SetConfig+0x26a>
 800b592:	e00b      	b.n	800b5ac <UART_SetConfig+0x270>
 800b594:	2301      	movs	r3, #1
 800b596:	77fb      	strb	r3, [r7, #31]
 800b598:	e077      	b.n	800b68a <UART_SetConfig+0x34e>
 800b59a:	2302      	movs	r3, #2
 800b59c:	77fb      	strb	r3, [r7, #31]
 800b59e:	e074      	b.n	800b68a <UART_SetConfig+0x34e>
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	77fb      	strb	r3, [r7, #31]
 800b5a4:	e071      	b.n	800b68a <UART_SetConfig+0x34e>
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	77fb      	strb	r3, [r7, #31]
 800b5aa:	e06e      	b.n	800b68a <UART_SetConfig+0x34e>
 800b5ac:	2310      	movs	r3, #16
 800b5ae:	77fb      	strb	r3, [r7, #31]
 800b5b0:	bf00      	nop
 800b5b2:	e06a      	b.n	800b68a <UART_SetConfig+0x34e>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a25      	ldr	r2, [pc, #148]	; (800b650 <UART_SetConfig+0x314>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d124      	bne.n	800b608 <UART_SetConfig+0x2cc>
 800b5be:	4b1e      	ldr	r3, [pc, #120]	; (800b638 <UART_SetConfig+0x2fc>)
 800b5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5cc:	d012      	beq.n	800b5f4 <UART_SetConfig+0x2b8>
 800b5ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d2:	d802      	bhi.n	800b5da <UART_SetConfig+0x29e>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <UART_SetConfig+0x2ac>
 800b5d8:	e012      	b.n	800b600 <UART_SetConfig+0x2c4>
 800b5da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5de:	d006      	beq.n	800b5ee <UART_SetConfig+0x2b2>
 800b5e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5e4:	d009      	beq.n	800b5fa <UART_SetConfig+0x2be>
 800b5e6:	e00b      	b.n	800b600 <UART_SetConfig+0x2c4>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	77fb      	strb	r3, [r7, #31]
 800b5ec:	e04d      	b.n	800b68a <UART_SetConfig+0x34e>
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	77fb      	strb	r3, [r7, #31]
 800b5f2:	e04a      	b.n	800b68a <UART_SetConfig+0x34e>
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e047      	b.n	800b68a <UART_SetConfig+0x34e>
 800b5fa:	2308      	movs	r3, #8
 800b5fc:	77fb      	strb	r3, [r7, #31]
 800b5fe:	e044      	b.n	800b68a <UART_SetConfig+0x34e>
 800b600:	2310      	movs	r3, #16
 800b602:	77fb      	strb	r3, [r7, #31]
 800b604:	bf00      	nop
 800b606:	e040      	b.n	800b68a <UART_SetConfig+0x34e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a11      	ldr	r2, [pc, #68]	; (800b654 <UART_SetConfig+0x318>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d139      	bne.n	800b686 <UART_SetConfig+0x34a>
 800b612:	4b09      	ldr	r3, [pc, #36]	; (800b638 <UART_SetConfig+0x2fc>)
 800b614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b61c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b620:	d027      	beq.n	800b672 <UART_SetConfig+0x336>
 800b622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b626:	d817      	bhi.n	800b658 <UART_SetConfig+0x31c>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d01c      	beq.n	800b666 <UART_SetConfig+0x32a>
 800b62c:	e027      	b.n	800b67e <UART_SetConfig+0x342>
 800b62e:	bf00      	nop
 800b630:	efff69f3 	.word	0xefff69f3
 800b634:	40011000 	.word	0x40011000
 800b638:	40023800 	.word	0x40023800
 800b63c:	40004400 	.word	0x40004400
 800b640:	40004800 	.word	0x40004800
 800b644:	40004c00 	.word	0x40004c00
 800b648:	40005000 	.word	0x40005000
 800b64c:	40011400 	.word	0x40011400
 800b650:	40007800 	.word	0x40007800
 800b654:	40007c00 	.word	0x40007c00
 800b658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b65c:	d006      	beq.n	800b66c <UART_SetConfig+0x330>
 800b65e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b662:	d009      	beq.n	800b678 <UART_SetConfig+0x33c>
 800b664:	e00b      	b.n	800b67e <UART_SetConfig+0x342>
 800b666:	2300      	movs	r3, #0
 800b668:	77fb      	strb	r3, [r7, #31]
 800b66a:	e00e      	b.n	800b68a <UART_SetConfig+0x34e>
 800b66c:	2302      	movs	r3, #2
 800b66e:	77fb      	strb	r3, [r7, #31]
 800b670:	e00b      	b.n	800b68a <UART_SetConfig+0x34e>
 800b672:	2304      	movs	r3, #4
 800b674:	77fb      	strb	r3, [r7, #31]
 800b676:	e008      	b.n	800b68a <UART_SetConfig+0x34e>
 800b678:	2308      	movs	r3, #8
 800b67a:	77fb      	strb	r3, [r7, #31]
 800b67c:	e005      	b.n	800b68a <UART_SetConfig+0x34e>
 800b67e:	2310      	movs	r3, #16
 800b680:	77fb      	strb	r3, [r7, #31]
 800b682:	bf00      	nop
 800b684:	e001      	b.n	800b68a <UART_SetConfig+0x34e>
 800b686:	2310      	movs	r3, #16
 800b688:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b692:	d17f      	bne.n	800b794 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b694:	7ffb      	ldrb	r3, [r7, #31]
 800b696:	2b08      	cmp	r3, #8
 800b698:	d85c      	bhi.n	800b754 <UART_SetConfig+0x418>
 800b69a:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <UART_SetConfig+0x364>)
 800b69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a0:	0800b6c5 	.word	0x0800b6c5
 800b6a4:	0800b6e5 	.word	0x0800b6e5
 800b6a8:	0800b705 	.word	0x0800b705
 800b6ac:	0800b755 	.word	0x0800b755
 800b6b0:	0800b71d 	.word	0x0800b71d
 800b6b4:	0800b755 	.word	0x0800b755
 800b6b8:	0800b755 	.word	0x0800b755
 800b6bc:	0800b755 	.word	0x0800b755
 800b6c0:	0800b73d 	.word	0x0800b73d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6c4:	f7fc f88a 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 800b6c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	005a      	lsls	r2, r3, #1
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	085b      	lsrs	r3, r3, #1
 800b6d4:	441a      	add	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	61bb      	str	r3, [r7, #24]
        break;
 800b6e2:	e03a      	b.n	800b75a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6e4:	f7fc f88e 	bl	8007804 <HAL_RCC_GetPCLK2Freq>
 800b6e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	005a      	lsls	r2, r3, #1
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	085b      	lsrs	r3, r3, #1
 800b6f4:	441a      	add	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	61bb      	str	r3, [r7, #24]
        break;
 800b702:	e02a      	b.n	800b75a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	085a      	lsrs	r2, r3, #1
 800b70a:	4b5f      	ldr	r3, [pc, #380]	; (800b888 <UART_SetConfig+0x54c>)
 800b70c:	4413      	add	r3, r2
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	6852      	ldr	r2, [r2, #4]
 800b712:	fbb3 f3f2 	udiv	r3, r3, r2
 800b716:	b29b      	uxth	r3, r3
 800b718:	61bb      	str	r3, [r7, #24]
        break;
 800b71a:	e01e      	b.n	800b75a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b71c:	f7fb ffa0 	bl	8007660 <HAL_RCC_GetSysClockFreq>
 800b720:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	005a      	lsls	r2, r3, #1
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	441a      	add	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	fbb2 f3f3 	udiv	r3, r2, r3
 800b736:	b29b      	uxth	r3, r3
 800b738:	61bb      	str	r3, [r7, #24]
        break;
 800b73a:	e00e      	b.n	800b75a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	085b      	lsrs	r3, r3, #1
 800b742:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74e:	b29b      	uxth	r3, r3
 800b750:	61bb      	str	r3, [r7, #24]
        break;
 800b752:	e002      	b.n	800b75a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	75fb      	strb	r3, [r7, #23]
        break;
 800b758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	2b0f      	cmp	r3, #15
 800b75e:	d916      	bls.n	800b78e <UART_SetConfig+0x452>
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b766:	d212      	bcs.n	800b78e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	f023 030f 	bic.w	r3, r3, #15
 800b770:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	085b      	lsrs	r3, r3, #1
 800b776:	b29b      	uxth	r3, r3
 800b778:	f003 0307 	and.w	r3, r3, #7
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	897b      	ldrh	r3, [r7, #10]
 800b780:	4313      	orrs	r3, r2
 800b782:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	897a      	ldrh	r2, [r7, #10]
 800b78a:	60da      	str	r2, [r3, #12]
 800b78c:	e070      	b.n	800b870 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	75fb      	strb	r3, [r7, #23]
 800b792:	e06d      	b.n	800b870 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b794:	7ffb      	ldrb	r3, [r7, #31]
 800b796:	2b08      	cmp	r3, #8
 800b798:	d859      	bhi.n	800b84e <UART_SetConfig+0x512>
 800b79a:	a201      	add	r2, pc, #4	; (adr r2, 800b7a0 <UART_SetConfig+0x464>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b7c5 	.word	0x0800b7c5
 800b7a4:	0800b7e3 	.word	0x0800b7e3
 800b7a8:	0800b801 	.word	0x0800b801
 800b7ac:	0800b84f 	.word	0x0800b84f
 800b7b0:	0800b819 	.word	0x0800b819
 800b7b4:	0800b84f 	.word	0x0800b84f
 800b7b8:	0800b84f 	.word	0x0800b84f
 800b7bc:	0800b84f 	.word	0x0800b84f
 800b7c0:	0800b837 	.word	0x0800b837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7c4:	f7fc f80a 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 800b7c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	085a      	lsrs	r2, r3, #1
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	441a      	add	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	61bb      	str	r3, [r7, #24]
        break;
 800b7e0:	e038      	b.n	800b854 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7e2:	f7fc f80f 	bl	8007804 <HAL_RCC_GetPCLK2Freq>
 800b7e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	085a      	lsrs	r2, r3, #1
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	441a      	add	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	61bb      	str	r3, [r7, #24]
        break;
 800b7fe:	e029      	b.n	800b854 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	085a      	lsrs	r2, r3, #1
 800b806:	4b21      	ldr	r3, [pc, #132]	; (800b88c <UART_SetConfig+0x550>)
 800b808:	4413      	add	r3, r2
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	6852      	ldr	r2, [r2, #4]
 800b80e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b812:	b29b      	uxth	r3, r3
 800b814:	61bb      	str	r3, [r7, #24]
        break;
 800b816:	e01d      	b.n	800b854 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b818:	f7fb ff22 	bl	8007660 <HAL_RCC_GetSysClockFreq>
 800b81c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	085a      	lsrs	r2, r3, #1
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	441a      	add	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b830:	b29b      	uxth	r3, r3
 800b832:	61bb      	str	r3, [r7, #24]
        break;
 800b834:	e00e      	b.n	800b854 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	085b      	lsrs	r3, r3, #1
 800b83c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	fbb2 f3f3 	udiv	r3, r2, r3
 800b848:	b29b      	uxth	r3, r3
 800b84a:	61bb      	str	r3, [r7, #24]
        break;
 800b84c:	e002      	b.n	800b854 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	75fb      	strb	r3, [r7, #23]
        break;
 800b852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b0f      	cmp	r3, #15
 800b858:	d908      	bls.n	800b86c <UART_SetConfig+0x530>
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b860:	d204      	bcs.n	800b86c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69ba      	ldr	r2, [r7, #24]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	e001      	b.n	800b870 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	01e84800 	.word	0x01e84800
 800b88c:	00f42400 	.word	0x00f42400

0800b890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00a      	beq.n	800b8ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8be:	f003 0302 	and.w	r3, r3, #2
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00a      	beq.n	800b8dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00a      	beq.n	800b8fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	f003 0308 	and.w	r3, r3, #8
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	430a      	orrs	r2, r1
 800b91e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	f003 0310 	and.w	r3, r3, #16
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00a      	beq.n	800b942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b946:	f003 0320 	and.w	r3, r3, #32
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00a      	beq.n	800b964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	430a      	orrs	r2, r1
 800b962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d01a      	beq.n	800b9a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b98e:	d10a      	bne.n	800b9a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	605a      	str	r2, [r3, #4]
  }
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b9e2:	f7f7 fa3f 	bl	8002e64 <HAL_GetTick>
 800b9e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0308 	and.w	r3, r3, #8
 800b9f2:	2b08      	cmp	r3, #8
 800b9f4:	d10e      	bne.n	800ba14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f814 	bl	800ba32 <UART_WaitOnFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e00a      	b.n	800ba2a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	603b      	str	r3, [r7, #0]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba42:	e05d      	b.n	800bb00 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4a:	d059      	beq.n	800bb00 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba4c:	f7f7 fa0a 	bl	8002e64 <HAL_GetTick>
 800ba50:	4602      	mov	r2, r0
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d302      	bcc.n	800ba62 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d11b      	bne.n	800ba9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0201 	bic.w	r2, r2, #1
 800ba80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2220      	movs	r2, #32
 800ba86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2220      	movs	r2, #32
 800ba8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ba96:	2303      	movs	r3, #3
 800ba98:	e042      	b.n	800bb20 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d02b      	beq.n	800bb00 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bab6:	d123      	bne.n	800bb00 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bac0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bad0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0201 	bic.w	r2, r2, #1
 800bae0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2220      	movs	r2, #32
 800bae6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2220      	movs	r2, #32
 800baec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2220      	movs	r2, #32
 800baf2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e00f      	b.n	800bb20 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	69da      	ldr	r2, [r3, #28]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	4013      	ands	r3, r2
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	bf0c      	ite	eq
 800bb10:	2301      	moveq	r3, #1
 800bb12:	2300      	movne	r3, #0
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	461a      	mov	r2, r3
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d092      	beq.n	800ba44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d027      	beq.n	800bb92 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4b2f      	ldr	r3, [pc, #188]	; (800bc08 <FMC_SDRAM_Init+0xe0>)
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb58:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bb5e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bb64:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bb6a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bb70:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bb76:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bb7c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	e032      	b.n	800bbf8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb9e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bba8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bbae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <FMC_SDRAM_Init+0xe0>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbcc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bbd2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bbd8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bbde:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bbe4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	ffff8000 	.word	0xffff8000

0800bc0c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d02e      	beq.n	800bc84 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc32:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc42:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bc4c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bc56:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc60:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc6a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	699b      	ldr	r3, [r3, #24]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc74:	4313      	orrs	r3, r2
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	609a      	str	r2, [r3, #8]
 800bc82:	e039      	b.n	800bcf8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	4b1e      	ldr	r3, [pc, #120]	; (800bd08 <FMC_SDRAM_Timing_Init+0xfc>)
 800bc8e:	4013      	ands	r3, r2
 800bc90:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bca2:	4313      	orrs	r3, r2
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bcb6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bcc6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bcd0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bcda:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bce4:	4313      	orrs	r3, r2
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	ff0f0fff 	.word	0xff0f0fff

0800bd0c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	f107 001c 	add.w	r0, r7, #28
 800bd1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bd22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bd24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bd26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bd2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bd2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bd32:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bd36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	4b07      	ldr	r3, [pc, #28]	; (800bd60 <SDMMC_Init+0x54>)
 800bd44:	4013      	ands	r3, r2
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	b004      	add	sp, #16
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	ffff8100 	.word	0xffff8100

0800bd64 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b082      	sub	sp, #8
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2203      	movs	r2, #3
 800bd8a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bd8c:	2002      	movs	r0, #2
 800bd8e:	f7f7 f875 	bl	8002e7c <HAL_Delay>
  
  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 0303 	and.w	r3, r3, #3
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdd6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bddc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bde2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68da      	ldr	r2, [r3, #12]
 800bdee:	4b06      	ldr	r3, [pc, #24]	; (800be08 <SDMMC_SendCommand+0x50>)
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	431a      	orrs	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	fffff000 	.word	0xfffff000

0800be0c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	b2db      	uxtb	r3, r3
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3314      	adds	r3, #20
 800be34:	461a      	mov	r2, r3
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	4413      	add	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
}  
 800be40:	4618      	mov	r0, r3
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be72:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800be78:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800be7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4313      	orrs	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	431a      	orrs	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800be96:	2300      	movs	r3, #0

}
 800be98:	4618      	mov	r0, r3
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800beb2:	2310      	movs	r3, #16
 800beb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beb6:	2340      	movs	r3, #64	; 0x40
 800beb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beba:	2300      	movs	r3, #0
 800bebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bec4:	f107 0308 	add.w	r3, r7, #8
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff ff74 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed4:	2110      	movs	r1, #16
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fa42 	bl	800c360 <SDMMC_GetCmdResp1>
 800bedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bede:	69fb      	ldr	r3, [r7, #28]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3720      	adds	r7, #32
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bef6:	2311      	movs	r3, #17
 800bef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800befa:	2340      	movs	r3, #64	; 0x40
 800befc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf08:	f107 0308 	add.w	r3, r7, #8
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff ff52 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf18:	2111      	movs	r1, #17
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa20 	bl	800c360 <SDMMC_GetCmdResp1>
 800bf20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf22:	69fb      	ldr	r3, [r7, #28]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bf3a:	2312      	movs	r3, #18
 800bf3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf3e:	2340      	movs	r3, #64	; 0x40
 800bf40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf4c:	f107 0308 	add.w	r3, r7, #8
 800bf50:	4619      	mov	r1, r3
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff ff30 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf5c:	2112      	movs	r1, #18
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f9fe 	bl	800c360 <SDMMC_GetCmdResp1>
 800bf64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf66:	69fb      	ldr	r3, [r7, #28]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3720      	adds	r7, #32
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bf7e:	2318      	movs	r3, #24
 800bf80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf82:	2340      	movs	r3, #64	; 0x40
 800bf84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf86:	2300      	movs	r3, #0
 800bf88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf90:	f107 0308 	add.w	r3, r7, #8
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff ff0e 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa0:	2118      	movs	r1, #24
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f9dc 	bl	800c360 <SDMMC_GetCmdResp1>
 800bfa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfaa:	69fb      	ldr	r3, [r7, #28]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3720      	adds	r7, #32
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b088      	sub	sp, #32
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bfc2:	2319      	movs	r3, #25
 800bfc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfc6:	2340      	movs	r3, #64	; 0x40
 800bfc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfd4:	f107 0308 	add.w	r3, r7, #8
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff feec 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe4:	2119      	movs	r1, #25
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f9ba 	bl	800c360 <SDMMC_GetCmdResp1>
 800bfec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfee:	69fb      	ldr	r3, [r7, #28]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3720      	adds	r7, #32
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b088      	sub	sp, #32
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c004:	230c      	movs	r3, #12
 800c006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c008:	2340      	movs	r3, #64	; 0x40
 800c00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c014:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c016:	f107 0308 	add.w	r3, r7, #8
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fecb 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c022:	4a05      	ldr	r2, [pc, #20]	; (800c038 <SDMMC_CmdStopTransfer+0x40>)
 800c024:	210c      	movs	r1, #12
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f99a 	bl	800c360 <SDMMC_GetCmdResp1>
 800c02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c02e:	69fb      	ldr	r3, [r7, #28]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3720      	adds	r7, #32
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	05f5e100 	.word	0x05f5e100

0800c03c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08a      	sub	sp, #40	; 0x28
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c04c:	2307      	movs	r3, #7
 800c04e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c050:	2340      	movs	r3, #64	; 0x40
 800c052:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c054:	2300      	movs	r3, #0
 800c056:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c05c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c05e:	f107 0310 	add.w	r3, r7, #16
 800c062:	4619      	mov	r1, r3
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f7ff fea7 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c06a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c06e:	2107      	movs	r1, #7
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 f975 	bl	800c360 <SDMMC_GetCmdResp1>
 800c076:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3728      	adds	r7, #40	; 0x28
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b088      	sub	sp, #32
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c092:	2300      	movs	r3, #0
 800c094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c096:	2300      	movs	r3, #0
 800c098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c09a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c09e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0a0:	f107 0308 	add.w	r3, r7, #8
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff fe86 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 f92f 	bl	800c310 <SDMMC_GetCmdError>
 800c0b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3720      	adds	r7, #32
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b088      	sub	sp, #32
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c0c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c0ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c0cc:	2308      	movs	r3, #8
 800c0ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0d0:	2340      	movs	r3, #64	; 0x40
 800c0d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0de:	f107 0308 	add.w	r3, r7, #8
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7ff fe67 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fb18 	bl	800c720 <SDMMC_GetCmdResp7>
 800c0f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3720      	adds	r7, #32
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c10a:	2337      	movs	r3, #55	; 0x37
 800c10c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c10e:	2340      	movs	r3, #64	; 0x40
 800c110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c112:	2300      	movs	r3, #0
 800c114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c11a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c11c:	f107 0308 	add.w	r3, r7, #8
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff fe48 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c128:	f241 3288 	movw	r2, #5000	; 0x1388
 800c12c:	2137      	movs	r1, #55	; 0x37
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f916 	bl	800c360 <SDMMC_GetCmdResp1>
 800c134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c136:	69fb      	ldr	r3, [r7, #28]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3720      	adds	r7, #32
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b088      	sub	sp, #32
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <SDMMC_CmdAppOperCommand+0x44>)
 800c14e:	4313      	orrs	r3, r2
 800c150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c152:	2329      	movs	r3, #41	; 0x29
 800c154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c156:	2340      	movs	r3, #64	; 0x40
 800c158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c164:	f107 0308 	add.w	r3, r7, #8
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7ff fe24 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fa27 	bl	800c5c4 <SDMMC_GetCmdResp3>
 800c176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c178:	69fb      	ldr	r3, [r7, #28]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3720      	adds	r7, #32
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	80100000 	.word	0x80100000

0800c188 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b088      	sub	sp, #32
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c196:	2306      	movs	r3, #6
 800c198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c19a:	2340      	movs	r3, #64	; 0x40
 800c19c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1a8:	f107 0308 	add.w	r3, r7, #8
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff fe02 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c1b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1b8:	2106      	movs	r1, #6
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f8d0 	bl	800c360 <SDMMC_GetCmdResp1>
 800c1c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1c2:	69fb      	ldr	r3, [r7, #28]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3720      	adds	r7, #32
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c1d8:	2333      	movs	r3, #51	; 0x33
 800c1da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1dc:	2340      	movs	r3, #64	; 0x40
 800c1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1ea:	f107 0308 	add.w	r3, r7, #8
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff fde1 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1fa:	2133      	movs	r1, #51	; 0x33
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f8af 	bl	800c360 <SDMMC_GetCmdResp1>
 800c202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c204:	69fb      	ldr	r3, [r7, #28]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3720      	adds	r7, #32
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b088      	sub	sp, #32
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c216:	2300      	movs	r3, #0
 800c218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c21a:	2302      	movs	r3, #2
 800c21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c21e:	23c0      	movs	r3, #192	; 0xc0
 800c220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c222:	2300      	movs	r3, #0
 800c224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c22a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c22c:	f107 0308 	add.w	r3, r7, #8
 800c230:	4619      	mov	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff fdc0 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f97d 	bl	800c538 <SDMMC_GetCmdResp2>
 800c23e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c240:	69fb      	ldr	r3, [r7, #28]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b088      	sub	sp, #32
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c258:	2309      	movs	r3, #9
 800c25a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c25c:	23c0      	movs	r3, #192	; 0xc0
 800c25e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c260:	2300      	movs	r3, #0
 800c262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c268:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7ff fda1 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f95e 	bl	800c538 <SDMMC_GetCmdResp2>
 800c27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c27e:	69fb      	ldr	r3, [r7, #28]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c296:	2303      	movs	r3, #3
 800c298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c29a:	2340      	movs	r3, #64	; 0x40
 800c29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2a8:	f107 0308 	add.w	r3, r7, #8
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fd82 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	2103      	movs	r1, #3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f9bd 	bl	800c638 <SDMMC_GetCmdResp6>
 800c2be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3720      	adds	r7, #32
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b088      	sub	sp, #32
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c2d8:	230d      	movs	r3, #13
 800c2da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2dc:	2340      	movs	r3, #64	; 0x40
 800c2de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2ea:	f107 0308 	add.w	r3, r7, #8
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff fd61 	bl	800bdb8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2fa:	210d      	movs	r1, #13
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f82f 	bl	800c360 <SDMMC_GetCmdResp1>
 800c302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c304:	69fb      	ldr	r3, [r7, #28]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3720      	adds	r7, #32
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c310:	b490      	push	{r4, r7}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c318:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <SDMMC_GetCmdError+0x48>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a0f      	ldr	r2, [pc, #60]	; (800c35c <SDMMC_GetCmdError+0x4c>)
 800c31e:	fba2 2303 	umull	r2, r3, r2, r3
 800c322:	0a5b      	lsrs	r3, r3, #9
 800c324:	f241 3288 	movw	r2, #5000	; 0x1388
 800c328:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c32c:	4623      	mov	r3, r4
 800c32e:	1e5c      	subs	r4, r3, #1
 800c330:	2b00      	cmp	r3, #0
 800c332:	d102      	bne.n	800c33a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c338:	e009      	b.n	800c34e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0f2      	beq.n	800c32c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	22c5      	movs	r2, #197	; 0xc5
 800c34a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bc90      	pop	{r4, r7}
 800c356:	4770      	bx	lr
 800c358:	20000000 	.word	0x20000000
 800c35c:	10624dd3 	.word	0x10624dd3

0800c360 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c360:	b590      	push	{r4, r7, lr}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	460b      	mov	r3, r1
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c36e:	4b6f      	ldr	r3, [pc, #444]	; (800c52c <SDMMC_GetCmdResp1+0x1cc>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a6f      	ldr	r2, [pc, #444]	; (800c530 <SDMMC_GetCmdResp1+0x1d0>)
 800c374:	fba2 2303 	umull	r2, r3, r2, r3
 800c378:	0a5b      	lsrs	r3, r3, #9
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c380:	4623      	mov	r3, r4
 800c382:	1e5c      	subs	r4, r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	d102      	bne.n	800c38e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c38c:	e0c9      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c392:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0f0      	beq.n	800c380 <SDMMC_GetCmdResp1+0x20>
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1eb      	bne.n	800c380 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d004      	beq.n	800c3be <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3ba:	2304      	movs	r3, #4
 800c3bc:	e0b1      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d004      	beq.n	800c3d4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e0a6      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	22c5      	movs	r2, #197	; 0xc5
 800c3d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f7ff fd16 	bl	800be0c <SDMMC_GetCommandResponse>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	7afb      	ldrb	r3, [r7, #11]
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d001      	beq.n	800c3ee <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e099      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7ff fd18 	bl	800be26 <SDMMC_GetResponse>
 800c3f6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3f8:	693a      	ldr	r2, [r7, #16]
 800c3fa:	4b4e      	ldr	r3, [pc, #312]	; (800c534 <SDMMC_GetCmdResp1+0x1d4>)
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c402:	2300      	movs	r3, #0
 800c404:	e08d      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	da02      	bge.n	800c412 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c40c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c410:	e087      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c41c:	2340      	movs	r3, #64	; 0x40
 800c41e:	e080      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c42a:	2380      	movs	r3, #128	; 0x80
 800c42c:	e079      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c43c:	e071      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c44c:	e069      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c45c:	e061      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c46c:	e059      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c47c:	e051      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c48c:	e049      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c49c:	e041      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c4a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ac:	e039      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4bc:	e031      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c4c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4cc:	e029      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4dc:	e021      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c4ec:	e019      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c4fc:	e011      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c50c:	e009      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f003 0308 	and.w	r3, r3, #8
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c518:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c51c:	e001      	b.n	800c522 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c51e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c522:	4618      	mov	r0, r3
 800c524:	371c      	adds	r7, #28
 800c526:	46bd      	mov	sp, r7
 800c528:	bd90      	pop	{r4, r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20000000 	.word	0x20000000
 800c530:	10624dd3 	.word	0x10624dd3
 800c534:	fdffe008 	.word	0xfdffe008

0800c538 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c538:	b490      	push	{r4, r7}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c540:	4b1e      	ldr	r3, [pc, #120]	; (800c5bc <SDMMC_GetCmdResp2+0x84>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a1e      	ldr	r2, [pc, #120]	; (800c5c0 <SDMMC_GetCmdResp2+0x88>)
 800c546:	fba2 2303 	umull	r2, r3, r2, r3
 800c54a:	0a5b      	lsrs	r3, r3, #9
 800c54c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c550:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c554:	4623      	mov	r3, r4
 800c556:	1e5c      	subs	r4, r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c560:	e026      	b.n	800c5b0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c566:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0f0      	beq.n	800c554 <SDMMC_GetCmdResp2+0x1c>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1eb      	bne.n	800c554 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	d004      	beq.n	800c592 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2204      	movs	r2, #4
 800c58c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c58e:	2304      	movs	r3, #4
 800c590:	e00e      	b.n	800c5b0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c596:	f003 0301 	and.w	r3, r3, #1
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d004      	beq.n	800c5a8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e003      	b.n	800c5b0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	22c5      	movs	r2, #197	; 0xc5
 800c5ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bc90      	pop	{r4, r7}
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	20000000 	.word	0x20000000
 800c5c0:	10624dd3 	.word	0x10624dd3

0800c5c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c5c4:	b490      	push	{r4, r7}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5cc:	4b18      	ldr	r3, [pc, #96]	; (800c630 <SDMMC_GetCmdResp3+0x6c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a18      	ldr	r2, [pc, #96]	; (800c634 <SDMMC_GetCmdResp3+0x70>)
 800c5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d6:	0a5b      	lsrs	r3, r3, #9
 800c5d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5e0:	4623      	mov	r3, r4
 800c5e2:	1e5c      	subs	r4, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d102      	bne.n	800c5ee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5ec:	e01b      	b.n	800c626 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0f0      	beq.n	800c5e0 <SDMMC_GetCmdResp3+0x1c>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1eb      	bne.n	800c5e0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60c:	f003 0304 	and.w	r3, r3, #4
 800c610:	2b00      	cmp	r3, #0
 800c612:	d004      	beq.n	800c61e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2204      	movs	r2, #4
 800c618:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c61a:	2304      	movs	r3, #4
 800c61c:	e003      	b.n	800c626 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	22c5      	movs	r2, #197	; 0xc5
 800c622:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bc90      	pop	{r4, r7}
 800c62e:	4770      	bx	lr
 800c630:	20000000 	.word	0x20000000
 800c634:	10624dd3 	.word	0x10624dd3

0800c638 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c638:	b590      	push	{r4, r7, lr}
 800c63a:	b087      	sub	sp, #28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	460b      	mov	r3, r1
 800c642:	607a      	str	r2, [r7, #4]
 800c644:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c646:	4b34      	ldr	r3, [pc, #208]	; (800c718 <SDMMC_GetCmdResp6+0xe0>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a34      	ldr	r2, [pc, #208]	; (800c71c <SDMMC_GetCmdResp6+0xe4>)
 800c64c:	fba2 2303 	umull	r2, r3, r2, r3
 800c650:	0a5b      	lsrs	r3, r3, #9
 800c652:	f241 3288 	movw	r2, #5000	; 0x1388
 800c656:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c65a:	4623      	mov	r3, r4
 800c65c:	1e5c      	subs	r4, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c662:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c666:	e052      	b.n	800c70e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c66c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0f0      	beq.n	800c65a <SDMMC_GetCmdResp6+0x22>
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1eb      	bne.n	800c65a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c686:	f003 0304 	and.w	r3, r3, #4
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d004      	beq.n	800c698 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2204      	movs	r2, #4
 800c692:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c694:	2304      	movs	r3, #4
 800c696:	e03a      	b.n	800c70e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69c:	f003 0301 	and.w	r3, r3, #1
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e02f      	b.n	800c70e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7ff fbac 	bl	800be0c <SDMMC_GetCommandResponse>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	7afb      	ldrb	r3, [r7, #11]
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d001      	beq.n	800c6c2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e025      	b.n	800c70e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	22c5      	movs	r2, #197	; 0xc5
 800c6c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f7ff fbab 	bl	800be26 <SDMMC_GetResponse>
 800c6d0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	0c1b      	lsrs	r3, r3, #16
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e011      	b.n	800c70e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d002      	beq.n	800c6fa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6f8:	e009      	b.n	800c70e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c708:	e001      	b.n	800c70e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c70a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c70e:	4618      	mov	r0, r3
 800c710:	371c      	adds	r7, #28
 800c712:	46bd      	mov	sp, r7
 800c714:	bd90      	pop	{r4, r7, pc}
 800c716:	bf00      	nop
 800c718:	20000000 	.word	0x20000000
 800c71c:	10624dd3 	.word	0x10624dd3

0800c720 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c720:	b490      	push	{r4, r7}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c728:	4b21      	ldr	r3, [pc, #132]	; (800c7b0 <SDMMC_GetCmdResp7+0x90>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a21      	ldr	r2, [pc, #132]	; (800c7b4 <SDMMC_GetCmdResp7+0x94>)
 800c72e:	fba2 2303 	umull	r2, r3, r2, r3
 800c732:	0a5b      	lsrs	r3, r3, #9
 800c734:	f241 3288 	movw	r2, #5000	; 0x1388
 800c738:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c73c:	4623      	mov	r3, r4
 800c73e:	1e5c      	subs	r4, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d102      	bne.n	800c74a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c744:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c748:	e02c      	b.n	800c7a4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c74e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0f0      	beq.n	800c73c <SDMMC_GetCmdResp7+0x1c>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1eb      	bne.n	800c73c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c768:	f003 0304 	and.w	r3, r3, #4
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d004      	beq.n	800c77a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2204      	movs	r2, #4
 800c774:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c776:	2304      	movs	r3, #4
 800c778:	e014      	b.n	800c7a4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	2b00      	cmp	r3, #0
 800c784:	d004      	beq.n	800c790 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e009      	b.n	800c7a4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2240      	movs	r2, #64	; 0x40
 800c7a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7a2:	2300      	movs	r3, #0
  
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bc90      	pop	{r4, r7}
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	20000000 	.word	0x20000000
 800c7b4:	10624dd3 	.word	0x10624dd3

0800c7b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b084      	sub	sp, #16
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	f107 001c 	add.w	r0, r7, #28
 800c7c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d120      	bne.n	800c812 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68da      	ldr	r2, [r3, #12]
 800c7e0:	4b20      	ldr	r3, [pc, #128]	; (800c864 <USB_CoreInit+0xac>)
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d105      	bne.n	800c806 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f942 	bl	800ca90 <USB_CoreReset>
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]
 800c810:	e010      	b.n	800c834 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f936 	bl	800ca90 <USB_CoreReset>
 800c824:	4603      	mov	r3, r0
 800c826:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	2b01      	cmp	r3, #1
 800c838:	d10b      	bne.n	800c852 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f043 0206 	orr.w	r2, r3, #6
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	f043 0220 	orr.w	r2, r3, #32
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c852:	7bfb      	ldrb	r3, [r7, #15]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c85e:	b004      	add	sp, #16
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	ffbdffbf 	.word	0xffbdffbf

0800c868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	f043 0201 	orr.w	r2, r3, #1
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b083      	sub	sp, #12
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f023 0201 	bic.w	r2, r3, #1
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c8c4:	78fb      	ldrb	r3, [r7, #3]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d106      	bne.n	800c8d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60da      	str	r2, [r3, #12]
 800c8d6:	e00b      	b.n	800c8f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c8d8:	78fb      	ldrb	r3, [r7, #3]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d106      	bne.n	800c8ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	60da      	str	r2, [r3, #12]
 800c8ea:	e001      	b.n	800c8f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e003      	b.n	800c8f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c8f0:	2032      	movs	r0, #50	; 0x32
 800c8f2:	f7f6 fac3 	bl	8002e7c <HAL_Delay>

  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c90a:	2300      	movs	r3, #0
 800c90c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	019b      	lsls	r3, r3, #6
 800c912:	f043 0220 	orr.w	r2, r3, #32
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3301      	adds	r3, #1
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4a09      	ldr	r2, [pc, #36]	; (800c948 <USB_FlushTxFifo+0x48>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d901      	bls.n	800c92c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c928:	2303      	movs	r3, #3
 800c92a:	e006      	b.n	800c93a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	f003 0320 	and.w	r3, r3, #32
 800c934:	2b20      	cmp	r3, #32
 800c936:	d0f0      	beq.n	800c91a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	00030d40 	.word	0x00030d40

0800c94c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2210      	movs	r2, #16
 800c95c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3301      	adds	r3, #1
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4a09      	ldr	r2, [pc, #36]	; (800c98c <USB_FlushRxFifo+0x40>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d901      	bls.n	800c970 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c96c:	2303      	movs	r3, #3
 800c96e:	e006      	b.n	800c97e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	f003 0310 	and.w	r3, r3, #16
 800c978:	2b10      	cmp	r3, #16
 800c97a:	d0f0      	beq.n	800c95e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	00030d40 	.word	0x00030d40

0800c990 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c990:	b480      	push	{r7}
 800c992:	b089      	sub	sp, #36	; 0x24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4611      	mov	r1, r2
 800c99c:	461a      	mov	r2, r3
 800c99e:	460b      	mov	r3, r1
 800c9a0:	71fb      	strb	r3, [r7, #7]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c9ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d11a      	bne.n	800c9ec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c9b6:	88bb      	ldrh	r3, [r7, #4]
 800c9b8:	3303      	adds	r3, #3
 800c9ba:	089b      	lsrs	r3, r3, #2
 800c9bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c9be:	2300      	movs	r3, #0
 800c9c0:	61bb      	str	r3, [r7, #24]
 800c9c2:	e00f      	b.n	800c9e4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	031a      	lsls	r2, r3, #12
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	61bb      	str	r3, [r7, #24]
 800c9e4:	69ba      	ldr	r2, [r7, #24]
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d3eb      	bcc.n	800c9c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3724      	adds	r7, #36	; 0x24
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b089      	sub	sp, #36	; 0x24
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	60f8      	str	r0, [r7, #12]
 800ca02:	60b9      	str	r1, [r7, #8]
 800ca04:	4613      	mov	r3, r2
 800ca06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ca10:	88fb      	ldrh	r3, [r7, #6]
 800ca12:	3303      	adds	r3, #3
 800ca14:	089b      	lsrs	r3, r3, #2
 800ca16:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61bb      	str	r3, [r7, #24]
 800ca1c:	e00b      	b.n	800ca36 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	601a      	str	r2, [r3, #0]
    pDest++;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	3301      	adds	r3, #1
 800ca34:	61bb      	str	r3, [r7, #24]
 800ca36:	69ba      	ldr	r2, [r7, #24]
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d3ef      	bcc.n	800ca1e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ca3e:	69fb      	ldr	r3, [r7, #28]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3724      	adds	r7, #36	; 0x24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	695b      	ldr	r3, [r3, #20]
 800ca58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	4013      	ands	r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca64:	68fb      	ldr	r3, [r7, #12]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3714      	adds	r7, #20
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca72:	b480      	push	{r7}
 800ca74:	b083      	sub	sp, #12
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	695b      	ldr	r3, [r3, #20]
 800ca7e:	f003 0301 	and.w	r3, r3, #1
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	370c      	adds	r7, #12
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
	...

0800ca90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4a13      	ldr	r2, [pc, #76]	; (800caf4 <USB_CoreReset+0x64>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d901      	bls.n	800caae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800caaa:	2303      	movs	r3, #3
 800caac:	e01b      	b.n	800cae6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	daf2      	bge.n	800ca9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	f043 0201 	orr.w	r2, r3, #1
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3301      	adds	r3, #1
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4a09      	ldr	r2, [pc, #36]	; (800caf4 <USB_CoreReset+0x64>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d901      	bls.n	800cad8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e006      	b.n	800cae6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	f003 0301 	and.w	r3, r3, #1
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d0f0      	beq.n	800cac6 <USB_CoreReset+0x36>

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	00030d40 	.word	0x00030d40

0800caf8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800caf8:	b084      	sub	sp, #16
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	f107 001c 	add.w	r0, r7, #28
 800cb06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb14:	461a      	mov	r2, r3
 800cb16:	2300      	movs	r3, #0
 800cb18:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d018      	beq.n	800cb64 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d10a      	bne.n	800cb4e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb46:	f043 0304 	orr.w	r3, r3, #4
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	e014      	b.n	800cb78 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb5c:	f023 0304 	bic.w	r3, r3, #4
 800cb60:	6013      	str	r3, [r2, #0]
 800cb62:	e009      	b.n	800cb78 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb72:	f023 0304 	bic.w	r3, r3, #4
 800cb76:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cb78:	2110      	movs	r1, #16
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff fec0 	bl	800c900 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff fee3 	bl	800c94c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cb86:	2300      	movs	r3, #0
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	e015      	b.n	800cbb8 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb98:	461a      	mov	r2, r3
 800cb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbac:	461a      	mov	r2, r3
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d3e5      	bcc.n	800cb8c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cbc0:	2101      	movs	r1, #1
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f8ac 	bl	800cd20 <USB_DriveVbus>

  HAL_Delay(200U);
 800cbc8:	20c8      	movs	r0, #200	; 0xc8
 800cbca:	f7f6 f957 	bl	8002e7c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbda:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00b      	beq.n	800cc00 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a14      	ldr	r2, [pc, #80]	; (800cc44 <USB_HostInit+0x14c>)
 800cbf4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a13      	ldr	r2, [pc, #76]	; (800cc48 <USB_HostInit+0x150>)
 800cbfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cbfe:	e009      	b.n	800cc14 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2280      	movs	r2, #128	; 0x80
 800cc04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a10      	ldr	r2, [pc, #64]	; (800cc4c <USB_HostInit+0x154>)
 800cc0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a10      	ldr	r2, [pc, #64]	; (800cc50 <USB_HostInit+0x158>)
 800cc10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	699b      	ldr	r3, [r3, #24]
 800cc1e:	f043 0210 	orr.w	r2, r3, #16
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	699a      	ldr	r2, [r3, #24]
 800cc2a:	4b0a      	ldr	r3, [pc, #40]	; (800cc54 <USB_HostInit+0x15c>)
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cc32:	2300      	movs	r3, #0
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc3e:	b004      	add	sp, #16
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	01000200 	.word	0x01000200
 800cc48:	00e00300 	.word	0x00e00300
 800cc4c:	00600080 	.word	0x00600080
 800cc50:	004000e0 	.word	0x004000e0
 800cc54:	a3200008 	.word	0xa3200008

0800cc58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc76:	f023 0303 	bic.w	r3, r3, #3
 800cc7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	f003 0303 	and.w	r3, r3, #3
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cc90:	4313      	orrs	r3, r2
 800cc92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d107      	bne.n	800ccaa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cca0:	461a      	mov	r2, r3
 800cca2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800cca6:	6053      	str	r3, [r2, #4]
 800cca8:	e009      	b.n	800ccbe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ccaa:	78fb      	ldrb	r3, [r7, #3]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d106      	bne.n	800ccbe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f241 7370 	movw	r3, #6000	; 0x1770
 800ccbc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ccec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ccf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ccfc:	2064      	movs	r0, #100	; 0x64
 800ccfe:	f7f6 f8bd 	bl	8002e7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cd10:	200a      	movs	r0, #10
 800cd12:	f7f6 f8b3 	bl	8002e7c <HAL_Delay>

  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d109      	bne.n	800cd64 <USB_DriveVbus+0x44>
 800cd50:	78fb      	ldrb	r3, [r7, #3]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d106      	bne.n	800cd64 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd62:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd6e:	d109      	bne.n	800cd84 <USB_DriveVbus+0x64>
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d106      	bne.n	800cd84 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd82:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cd92:	b480      	push	{r7}
 800cd94:	b085      	sub	sp, #20
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	0c5b      	lsrs	r3, r3, #17
 800cdb0:	f003 0303 	and.w	r3, r3, #3
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	b29b      	uxth	r3, r3
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3714      	adds	r7, #20
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
	...

0800cde4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	4608      	mov	r0, r1
 800cdee:	4611      	mov	r1, r2
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	70fb      	strb	r3, [r7, #3]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70bb      	strb	r3, [r7, #2]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	015a      	lsls	r2, r3, #5
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce12:	461a      	mov	r2, r3
 800ce14:	f04f 33ff 	mov.w	r3, #4294967295
 800ce18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ce1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce1e:	2b03      	cmp	r3, #3
 800ce20:	d87e      	bhi.n	800cf20 <USB_HC_Init+0x13c>
 800ce22:	a201      	add	r2, pc, #4	; (adr r2, 800ce28 <USB_HC_Init+0x44>)
 800ce24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce28:	0800ce39 	.word	0x0800ce39
 800ce2c:	0800cee3 	.word	0x0800cee3
 800ce30:	0800ce39 	.word	0x0800ce39
 800ce34:	0800cea5 	.word	0x0800cea5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	015a      	lsls	r2, r3, #5
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	4413      	add	r3, r2
 800ce40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce44:	461a      	mov	r2, r3
 800ce46:	f240 439d 	movw	r3, #1181	; 0x49d
 800ce4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ce4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	da10      	bge.n	800ce76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ce54:	78fb      	ldrb	r3, [r7, #3]
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	78fa      	ldrb	r2, [r7, #3]
 800ce64:	0151      	lsls	r1, r2, #5
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	440a      	add	r2, r1
 800ce6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce72:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ce74:	e057      	b.n	800cf26 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d051      	beq.n	800cf26 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ce82:	78fb      	ldrb	r3, [r7, #3]
 800ce84:	015a      	lsls	r2, r3, #5
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	4413      	add	r3, r2
 800ce8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	78fa      	ldrb	r2, [r7, #3]
 800ce92:	0151      	lsls	r1, r2, #5
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	440a      	add	r2, r1
 800ce98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cea0:	60d3      	str	r3, [r2, #12]
      break;
 800cea2:	e040      	b.n	800cf26 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cea4:	78fb      	ldrb	r3, [r7, #3]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	f240 639d 	movw	r3, #1693	; 0x69d
 800ceb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ceb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da34      	bge.n	800cf2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cec0:	78fb      	ldrb	r3, [r7, #3]
 800cec2:	015a      	lsls	r2, r3, #5
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	4413      	add	r3, r2
 800cec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	78fa      	ldrb	r2, [r7, #3]
 800ced0:	0151      	lsls	r1, r2, #5
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	440a      	add	r2, r1
 800ced6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ceda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cede:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cee0:	e023      	b.n	800cf2a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cee2:	78fb      	ldrb	r3, [r7, #3]
 800cee4:	015a      	lsls	r2, r3, #5
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	4413      	add	r3, r2
 800ceea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceee:	461a      	mov	r2, r3
 800cef0:	f240 2325 	movw	r3, #549	; 0x225
 800cef4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cef6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	da17      	bge.n	800cf2e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	015a      	lsls	r2, r3, #5
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	4413      	add	r3, r2
 800cf06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	78fa      	ldrb	r2, [r7, #3]
 800cf0e:	0151      	lsls	r1, r2, #5
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	440a      	add	r2, r1
 800cf14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf18:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cf1c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cf1e:	e006      	b.n	800cf2e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	75fb      	strb	r3, [r7, #23]
      break;
 800cf24:	e004      	b.n	800cf30 <USB_HC_Init+0x14c>
      break;
 800cf26:	bf00      	nop
 800cf28:	e002      	b.n	800cf30 <USB_HC_Init+0x14c>
      break;
 800cf2a:	bf00      	nop
 800cf2c:	e000      	b.n	800cf30 <USB_HC_Init+0x14c>
      break;
 800cf2e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf36:	699a      	ldr	r2, [r3, #24]
 800cf38:	78fb      	ldrb	r3, [r7, #3]
 800cf3a:	f003 030f 	and.w	r3, r3, #15
 800cf3e:	2101      	movs	r1, #1
 800cf40:	fa01 f303 	lsl.w	r3, r1, r3
 800cf44:	68b9      	ldr	r1, [r7, #8]
 800cf46:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	699b      	ldr	r3, [r3, #24]
 800cf52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cf5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	da03      	bge.n	800cf6a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cf62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf66:	613b      	str	r3, [r7, #16]
 800cf68:	e001      	b.n	800cf6e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800cf6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d103      	bne.n	800cf7e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cf76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf7a:	60fb      	str	r3, [r7, #12]
 800cf7c:	e001      	b.n	800cf82 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf82:	787b      	ldrb	r3, [r7, #1]
 800cf84:	059b      	lsls	r3, r3, #22
 800cf86:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cf8a:	78bb      	ldrb	r3, [r7, #2]
 800cf8c:	02db      	lsls	r3, r3, #11
 800cf8e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf92:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cf94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cf98:	049b      	lsls	r3, r3, #18
 800cf9a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cf9e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfa0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cfa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cfa6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	0159      	lsls	r1, r3, #5
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	440b      	add	r3, r1
 800cfb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfb8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfbe:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cfc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cfc4:	2b03      	cmp	r3, #3
 800cfc6:	d10f      	bne.n	800cfe8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cfc8:	78fb      	ldrb	r3, [r7, #3]
 800cfca:	015a      	lsls	r2, r3, #5
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	4413      	add	r3, r2
 800cfd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	78fa      	ldrb	r2, [r7, #3]
 800cfd8:	0151      	lsls	r1, r2, #5
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	440a      	add	r2, r1
 800cfde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfe6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	371c      	adds	r7, #28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop

0800cff8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08c      	sub	sp, #48	; 0x30
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	4613      	mov	r3, r2
 800d004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	785b      	ldrb	r3, [r3, #1]
 800d00e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d014:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d028      	beq.n	800d074 <USB_HC_StartXfer+0x7c>
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	791b      	ldrb	r3, [r3, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d124      	bne.n	800d074 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10b      	bne.n	800d048 <USB_HC_StartXfer+0x50>
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	795b      	ldrb	r3, [r3, #5]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d107      	bne.n	800d048 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	785b      	ldrb	r3, [r3, #1]
 800d03c:	4619      	mov	r1, r3
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f000 fa2e 	bl	800d4a0 <USB_DoPing>
      return HAL_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	e112      	b.n	800d26e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d112      	bne.n	800d074 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	015a      	lsls	r2, r3, #5
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	4413      	add	r3, r2
 800d056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	69fa      	ldr	r2, [r7, #28]
 800d05e:	0151      	lsls	r1, r2, #5
 800d060:	6a3a      	ldr	r2, [r7, #32]
 800d062:	440a      	add	r2, r1
 800d064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d068:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d06c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2200      	movs	r2, #0
 800d072:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d018      	beq.n	800d0ae <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	8912      	ldrh	r2, [r2, #8]
 800d084:	4413      	add	r3, r2
 800d086:	3b01      	subs	r3, #1
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	8912      	ldrh	r2, [r2, #8]
 800d08c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d090:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d092:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d094:	8b7b      	ldrh	r3, [r7, #26]
 800d096:	429a      	cmp	r2, r3
 800d098:	d90b      	bls.n	800d0b2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800d09a:	8b7b      	ldrh	r3, [r7, #26]
 800d09c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d09e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	8912      	ldrh	r2, [r2, #8]
 800d0a4:	fb02 f203 	mul.w	r2, r2, r3
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	611a      	str	r2, [r3, #16]
 800d0ac:	e001      	b.n	800d0b2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	78db      	ldrb	r3, [r3, #3]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d006      	beq.n	800d0c8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d0ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	8912      	ldrh	r2, [r2, #8]
 800d0c0:	fb02 f203 	mul.w	r2, r2, r3
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d0d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0d2:	04d9      	lsls	r1, r3, #19
 800d0d4:	4b68      	ldr	r3, [pc, #416]	; (800d278 <USB_HC_StartXfer+0x280>)
 800d0d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d0d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	7a9b      	ldrb	r3, [r3, #10]
 800d0de:	075b      	lsls	r3, r3, #29
 800d0e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d0e4:	69f9      	ldr	r1, [r7, #28]
 800d0e6:	0148      	lsls	r0, r1, #5
 800d0e8:	6a39      	ldr	r1, [r7, #32]
 800d0ea:	4401      	add	r1, r0
 800d0ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d0f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d0f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d009      	beq.n	800d10e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	68d9      	ldr	r1, [r3, #12]
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	015a      	lsls	r2, r3, #5
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	4413      	add	r3, r2
 800d106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d10a:	460a      	mov	r2, r1
 800d10c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d10e:	6a3b      	ldr	r3, [r7, #32]
 800d110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	bf0c      	ite	eq
 800d11e:	2301      	moveq	r3, #1
 800d120:	2300      	movne	r3, #0
 800d122:	b2db      	uxtb	r3, r3
 800d124:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	015a      	lsls	r2, r3, #5
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	4413      	add	r3, r2
 800d12e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	69fa      	ldr	r2, [r7, #28]
 800d136:	0151      	lsls	r1, r2, #5
 800d138:	6a3a      	ldr	r2, [r7, #32]
 800d13a:	440a      	add	r2, r1
 800d13c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d140:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d144:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	015a      	lsls	r2, r3, #5
 800d14a:	6a3b      	ldr	r3, [r7, #32]
 800d14c:	4413      	add	r3, r2
 800d14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	7e7b      	ldrb	r3, [r7, #25]
 800d156:	075b      	lsls	r3, r3, #29
 800d158:	69f9      	ldr	r1, [r7, #28]
 800d15a:	0148      	lsls	r0, r1, #5
 800d15c:	6a39      	ldr	r1, [r7, #32]
 800d15e:	4401      	add	r1, r0
 800d160:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d164:	4313      	orrs	r3, r2
 800d166:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	015a      	lsls	r2, r3, #5
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	4413      	add	r3, r2
 800d170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a41      	ldr	r2, [pc, #260]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d178:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d17a:	4b40      	ldr	r3, [pc, #256]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d182:	4a3e      	ldr	r2, [pc, #248]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d184:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	78db      	ldrb	r3, [r3, #3]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d006      	beq.n	800d19c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d18e:	4b3b      	ldr	r3, [pc, #236]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d196:	4a39      	ldr	r2, [pc, #228]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	e005      	b.n	800d1a8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d19c:	4b37      	ldr	r3, [pc, #220]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1a4:	4a35      	ldr	r2, [pc, #212]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d1a6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d1a8:	4b34      	ldr	r3, [pc, #208]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d1b0:	4a32      	ldr	r2, [pc, #200]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d1b2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	015a      	lsls	r2, r3, #5
 800d1b8:	6a3b      	ldr	r3, [r7, #32]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	4b2e      	ldr	r3, [pc, #184]	; (800d27c <USB_HC_StartXfer+0x284>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d14e      	bne.n	800d26c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	78db      	ldrb	r3, [r3, #3]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d14a      	bne.n	800d26c <USB_HC_StartXfer+0x274>
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d046      	beq.n	800d26c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	79db      	ldrb	r3, [r3, #7]
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d830      	bhi.n	800d248 <USB_HC_StartXfer+0x250>
 800d1e6:	a201      	add	r2, pc, #4	; (adr r2, 800d1ec <USB_HC_StartXfer+0x1f4>)
 800d1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ec:	0800d1fd 	.word	0x0800d1fd
 800d1f0:	0800d221 	.word	0x0800d221
 800d1f4:	0800d1fd 	.word	0x0800d1fd
 800d1f8:	0800d221 	.word	0x0800d221
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	3303      	adds	r3, #3
 800d202:	089b      	lsrs	r3, r3, #2
 800d204:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d206:	8afa      	ldrh	r2, [r7, #22]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	429a      	cmp	r2, r3
 800d210:	d91c      	bls.n	800d24c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	699b      	ldr	r3, [r3, #24]
 800d216:	f043 0220 	orr.w	r2, r3, #32
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	619a      	str	r2, [r3, #24]
          }
          break;
 800d21e:	e015      	b.n	800d24c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	3303      	adds	r3, #3
 800d226:	089b      	lsrs	r3, r3, #2
 800d228:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d22a:	8afa      	ldrh	r2, [r7, #22]
 800d22c:	6a3b      	ldr	r3, [r7, #32]
 800d22e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	b29b      	uxth	r3, r3
 800d236:	429a      	cmp	r2, r3
 800d238:	d90a      	bls.n	800d250 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	619a      	str	r2, [r3, #24]
          }
          break;
 800d246:	e003      	b.n	800d250 <USB_HC_StartXfer+0x258>

        default:
          break;
 800d248:	bf00      	nop
 800d24a:	e002      	b.n	800d252 <USB_HC_StartXfer+0x25a>
          break;
 800d24c:	bf00      	nop
 800d24e:	e000      	b.n	800d252 <USB_HC_StartXfer+0x25a>
          break;
 800d250:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	68d9      	ldr	r1, [r3, #12]
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	785a      	ldrb	r2, [r3, #1]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	b298      	uxth	r0, r3
 800d260:	2300      	movs	r3, #0
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	4603      	mov	r3, r0
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7ff fb92 	bl	800c990 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3728      	adds	r7, #40	; 0x28
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	1ff80000 	.word	0x1ff80000
 800d27c:	20000314 	.word	0x20000314

0800d280 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	b29b      	uxth	r3, r3
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b087      	sub	sp, #28
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800d2b2:	78fb      	ldrb	r3, [r7, #3]
 800d2b4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	015a      	lsls	r2, r3, #5
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	0c9b      	lsrs	r3, r3, #18
 800d2ca:	f003 0303 	and.w	r3, r3, #3
 800d2ce:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <USB_HC_Halt+0x3a>
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d16c      	bne.n	800d3b6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	015a      	lsls	r2, r3, #5
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68fa      	ldr	r2, [r7, #12]
 800d2ec:	0151      	lsls	r1, r2, #5
 800d2ee:	693a      	ldr	r2, [r7, #16]
 800d2f0:	440a      	add	r2, r1
 800d2f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2fa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d143      	bne.n	800d390 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	0151      	lsls	r1, r2, #5
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	440a      	add	r2, r1
 800d31e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d322:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d326:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	0151      	lsls	r1, r2, #5
 800d33a:	693a      	ldr	r2, [r7, #16]
 800d33c:	440a      	add	r2, r1
 800d33e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d346:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	0151      	lsls	r1, r2, #5
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	440a      	add	r2, r1
 800d35e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d362:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d366:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	3301      	adds	r3, #1
 800d36c:	617b      	str	r3, [r7, #20]
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d374:	d81d      	bhi.n	800d3b2 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	015a      	lsls	r2, r3, #5
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	4413      	add	r3, r2
 800d37e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d38c:	d0ec      	beq.n	800d368 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d38e:	e080      	b.n	800d492 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	015a      	lsls	r2, r3, #5
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	4413      	add	r3, r2
 800d398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68fa      	ldr	r2, [r7, #12]
 800d3a0:	0151      	lsls	r1, r2, #5
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	440a      	add	r2, r1
 800d3a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3ae:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d3b0:	e06f      	b.n	800d492 <USB_HC_Halt+0x1f0>
          break;
 800d3b2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d3b4:	e06d      	b.n	800d492 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	015a      	lsls	r2, r3, #5
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	4413      	add	r3, r2
 800d3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	0151      	lsls	r1, r2, #5
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	440a      	add	r2, r1
 800d3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3d4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3dc:	691b      	ldr	r3, [r3, #16]
 800d3de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d143      	bne.n	800d46e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	015a      	lsls	r2, r3, #5
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	0151      	lsls	r1, r2, #5
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	440a      	add	r2, r1
 800d3fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d404:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	015a      	lsls	r2, r3, #5
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	0151      	lsls	r1, r2, #5
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	440a      	add	r2, r1
 800d41c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d424:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	015a      	lsls	r2, r3, #5
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	4413      	add	r3, r2
 800d42e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	0151      	lsls	r1, r2, #5
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	440a      	add	r2, r1
 800d43c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d440:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d444:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	3301      	adds	r3, #1
 800d44a:	617b      	str	r3, [r7, #20]
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d452:	d81d      	bhi.n	800d490 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	015a      	lsls	r2, r3, #5
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	4413      	add	r3, r2
 800d45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d46a:	d0ec      	beq.n	800d446 <USB_HC_Halt+0x1a4>
 800d46c:	e011      	b.n	800d492 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	015a      	lsls	r2, r3, #5
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	4413      	add	r3, r2
 800d476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	0151      	lsls	r1, r2, #5
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	440a      	add	r2, r1
 800d484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	e000      	b.n	800d492 <USB_HC_Halt+0x1f0>
          break;
 800d490:	bf00      	nop
    }
  }

  return HAL_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	371c      	adds	r7, #28
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b087      	sub	sp, #28
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	04da      	lsls	r2, r3, #19
 800d4bc:	4b15      	ldr	r3, [pc, #84]	; (800d514 <USB_DoPing+0x74>)
 800d4be:	4013      	ands	r3, r2
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	0151      	lsls	r1, r2, #5
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	440a      	add	r2, r1
 800d4c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	015a      	lsls	r2, r3, #5
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	4413      	add	r3, r2
 800d4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	015a      	lsls	r2, r3, #5
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4fe:	461a      	mov	r2, r3
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	371c      	adds	r7, #28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	1ff80000 	.word	0x1ff80000

0800d518 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d524:	2300      	movs	r3, #0
 800d526:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f7ff f9ae 	bl	800c88a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d52e:	2110      	movs	r1, #16
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff f9e5 	bl	800c900 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7ff fa08 	bl	800c94c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d53c:	2300      	movs	r3, #0
 800d53e:	613b      	str	r3, [r7, #16]
 800d540:	e01f      	b.n	800d582 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	015a      	lsls	r2, r3, #5
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	4413      	add	r3, r2
 800d54a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d558:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d560:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d568:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	015a      	lsls	r2, r3, #5
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	4413      	add	r3, r2
 800d572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d576:	461a      	mov	r2, r3
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	3301      	adds	r3, #1
 800d580:	613b      	str	r3, [r7, #16]
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	2b0f      	cmp	r3, #15
 800d586:	d9dc      	bls.n	800d542 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d588:	2300      	movs	r3, #0
 800d58a:	613b      	str	r3, [r7, #16]
 800d58c:	e034      	b.n	800d5f8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	015a      	lsls	r2, r3, #5
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	4413      	add	r3, r2
 800d596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5d4:	d80c      	bhi.n	800d5f0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5ec:	d0ec      	beq.n	800d5c8 <USB_StopHost+0xb0>
 800d5ee:	e000      	b.n	800d5f2 <USB_StopHost+0xda>
        break;
 800d5f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	613b      	str	r3, [r7, #16]
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	2b0f      	cmp	r3, #15
 800d5fc:	d9c7      	bls.n	800d58e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d604:	461a      	mov	r2, r3
 800d606:	f04f 33ff 	mov.w	r3, #4294967295
 800d60a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f04f 32ff 	mov.w	r2, #4294967295
 800d612:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff f927 	bl	800c868 <USB_EnableGlobalInt>

  return HAL_OK;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d628:	4904      	ldr	r1, [pc, #16]	; (800d63c <MX_FATFS_Init+0x18>)
 800d62a:	4805      	ldr	r0, [pc, #20]	; (800d640 <MX_FATFS_Init+0x1c>)
 800d62c:	f002 fbec 	bl	800fe08 <FATFS_LinkDriver>
 800d630:	4603      	mov	r3, r0
 800d632:	461a      	mov	r2, r3
 800d634:	4b03      	ldr	r3, [pc, #12]	; (800d644 <MX_FATFS_Init+0x20>)
 800d636:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d638:	bf00      	nop
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20008cac 	.word	0x20008cac
 800d640:	080133fc 	.word	0x080133fc
 800d644:	20008ca8 	.word	0x20008ca8

0800d648 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d652:	f000 f87b 	bl	800d74c <BSP_SD_IsDetected>
 800d656:	4603      	mov	r3, r0
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d001      	beq.n	800d660 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d65c:	2302      	movs	r3, #2
 800d65e:	e012      	b.n	800d686 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d660:	480b      	ldr	r0, [pc, #44]	; (800d690 <BSP_SD_Init+0x48>)
 800d662:	f7fb fba1 	bl	8008da8 <HAL_SD_Init>
 800d666:	4603      	mov	r3, r0
 800d668:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d109      	bne.n	800d684 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d674:	4806      	ldr	r0, [pc, #24]	; (800d690 <BSP_SD_Init+0x48>)
 800d676:	f7fb ffe3 	bl	8009640 <HAL_SD_ConfigWideBusOperation>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d684:	79fb      	ldrb	r3, [r7, #7]
}
 800d686:	4618      	mov	r0, r3
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	200088b0 	.word	0x200088b0

0800d694 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	68f9      	ldr	r1, [r7, #12]
 800d6aa:	4806      	ldr	r0, [pc, #24]	; (800d6c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d6ac:	f7fb fc14 	bl	8008ed8 <HAL_SD_ReadBlocks_DMA>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	200088b0 	.word	0x200088b0

0800d6c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	68f9      	ldr	r1, [r7, #12]
 800d6de:	4806      	ldr	r0, [pc, #24]	; (800d6f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d6e0:	f7fb fce6 	bl	80090b0 <HAL_SD_WriteBlocks_DMA>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3718      	adds	r7, #24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	200088b0 	.word	0x200088b0

0800d6fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d700:	4805      	ldr	r0, [pc, #20]	; (800d718 <BSP_SD_GetCardState+0x1c>)
 800d702:	f7fc f819 	bl	8009738 <HAL_SD_GetCardState>
 800d706:	4603      	mov	r3, r0
 800d708:	2b04      	cmp	r3, #4
 800d70a:	bf14      	ite	ne
 800d70c:	2301      	movne	r3, #1
 800d70e:	2300      	moveq	r3, #0
 800d710:	b2db      	uxtb	r3, r3
}
 800d712:	4618      	mov	r0, r3
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	200088b0 	.word	0x200088b0

0800d71c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d724:	6879      	ldr	r1, [r7, #4]
 800d726:	4803      	ldr	r0, [pc, #12]	; (800d734 <BSP_SD_GetCardInfo+0x18>)
 800d728:	f7fb ff5e 	bl	80095e8 <HAL_SD_GetCardInfo>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	200088b0 	.word	0x200088b0

0800d738 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d740:	f000 f9b2 	bl	800daa8 <BSP_SD_ReadCpltCallback>
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d752:	2301      	movs	r3, #1
 800d754:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d756:	f000 f80b 	bl	800d770 <BSP_PlatformIsDetected>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d101      	bne.n	800d764 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d760:	2300      	movs	r3, #0
 800d762:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d764:	79fb      	ldrb	r3, [r7, #7]
 800d766:	b2db      	uxtb	r3, r3
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d776:	2301      	movs	r3, #1
 800d778:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d77a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d77e:	4806      	ldr	r0, [pc, #24]	; (800d798 <BSP_PlatformIsDetected+0x28>)
 800d780:	f7f7 f908 	bl	8004994 <HAL_GPIO_ReadPin>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d78a:	2300      	movs	r3, #0
 800d78c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d78e:	79fb      	ldrb	r3, [r7, #7]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	40020800 	.word	0x40020800

0800d79c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d7a4:	f002 fb7c 	bl	800fea0 <osKernelSysTick>
 800d7a8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d7aa:	e006      	b.n	800d7ba <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7ac:	f7ff ffa6 	bl	800d6fc <BSP_SD_GetCardState>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d101      	bne.n	800d7ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	e009      	b.n	800d7ce <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d7ba:	f002 fb71 	bl	800fea0 <osKernelSysTick>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d8f0      	bhi.n	800d7ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d7ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
	...

0800d7d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d7e2:	4b0b      	ldr	r3, [pc, #44]	; (800d810 <SD_CheckStatus+0x38>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7e8:	f7ff ff88 	bl	800d6fc <BSP_SD_GetCardState>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d107      	bne.n	800d802 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d7f2:	4b07      	ldr	r3, [pc, #28]	; (800d810 <SD_CheckStatus+0x38>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	f023 0301 	bic.w	r3, r3, #1
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	4b04      	ldr	r3, [pc, #16]	; (800d810 <SD_CheckStatus+0x38>)
 800d800:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d802:	4b03      	ldr	r3, [pc, #12]	; (800d810 <SD_CheckStatus+0x38>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	b2db      	uxtb	r3, r3
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	20000009 	.word	0x20000009

0800d814 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d814:	b590      	push	{r4, r7, lr}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d81e:	4b20      	ldr	r3, [pc, #128]	; (800d8a0 <SD_initialize+0x8c>)
 800d820:	2201      	movs	r2, #1
 800d822:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d824:	f002 fb30 	bl	800fe88 <osKernelRunning>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d030      	beq.n	800d890 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d82e:	f7ff ff0b 	bl	800d648 <BSP_SD_Init>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d107      	bne.n	800d848 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff ffcc 	bl	800d7d8 <SD_CheckStatus>
 800d840:	4603      	mov	r3, r0
 800d842:	461a      	mov	r2, r3
 800d844:	4b16      	ldr	r3, [pc, #88]	; (800d8a0 <SD_initialize+0x8c>)
 800d846:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d848:	4b15      	ldr	r3, [pc, #84]	; (800d8a0 <SD_initialize+0x8c>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d01e      	beq.n	800d890 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d852:	4b14      	ldr	r3, [pc, #80]	; (800d8a4 <SD_initialize+0x90>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10e      	bne.n	800d878 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d85a:	4b13      	ldr	r3, [pc, #76]	; (800d8a8 <SD_initialize+0x94>)
 800d85c:	f107 0408 	add.w	r4, r7, #8
 800d860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d866:	f107 0308 	add.w	r3, r7, #8
 800d86a:	2100      	movs	r1, #0
 800d86c:	4618      	mov	r0, r3
 800d86e:	f002 fb87 	bl	800ff80 <osMessageCreate>
 800d872:	4602      	mov	r2, r0
 800d874:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <SD_initialize+0x90>)
 800d876:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d878:	4b0a      	ldr	r3, [pc, #40]	; (800d8a4 <SD_initialize+0x90>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d107      	bne.n	800d890 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d880:	4b07      	ldr	r3, [pc, #28]	; (800d8a0 <SD_initialize+0x8c>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f043 0301 	orr.w	r3, r3, #1
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	4b04      	ldr	r3, [pc, #16]	; (800d8a0 <SD_initialize+0x8c>)
 800d88e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d890:	4b03      	ldr	r3, [pc, #12]	; (800d8a0 <SD_initialize+0x8c>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	b2db      	uxtb	r3, r3
}
 800d896:	4618      	mov	r0, r3
 800d898:	371c      	adds	r7, #28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd90      	pop	{r4, r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	20000009 	.word	0x20000009
 800d8a4:	20000318 	.word	0x20000318
 800d8a8:	08013390 	.word	0x08013390

0800d8ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d8b6:	79fb      	ldrb	r3, [r7, #7]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7ff ff8d 	bl	800d7d8 <SD_CheckStatus>
 800d8be:	4603      	mov	r3, r0
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b08a      	sub	sp, #40	; 0x28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	607a      	str	r2, [r7, #4]
 800d8d2:	603b      	str	r3, [r7, #0]
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d8de:	f247 5030 	movw	r0, #30000	; 0x7530
 800d8e2:	f7ff ff5b 	bl	800d79c <SD_CheckStatusWithTimeout>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	da02      	bge.n	800d8f2 <SD_read+0x2a>
  {
    return res;
 800d8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8f0:	e032      	b.n	800d958 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	68b8      	ldr	r0, [r7, #8]
 800d8f8:	f7ff fecc 	bl	800d694 <BSP_SD_ReadBlocks_DMA>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d902:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d906:	2b00      	cmp	r3, #0
 800d908:	d124      	bne.n	800d954 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d90a:	4b15      	ldr	r3, [pc, #84]	; (800d960 <SD_read+0x98>)
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	f107 0314 	add.w	r3, r7, #20
 800d912:	f247 5230 	movw	r2, #30000	; 0x7530
 800d916:	4618      	mov	r0, r3
 800d918:	f002 fb9c 	bl	8010054 <osMessageGet>

    if (event.status == osEventMessage)
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	2b10      	cmp	r3, #16
 800d920:	d118      	bne.n	800d954 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d115      	bne.n	800d954 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d928:	f002 faba 	bl	800fea0 <osKernelSysTick>
 800d92c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d92e:	e008      	b.n	800d942 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d930:	f7ff fee4 	bl	800d6fc <BSP_SD_GetCardState>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d103      	bne.n	800d942 <SD_read+0x7a>
              {
                res = RES_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d940:	e008      	b.n	800d954 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d942:	f002 faad 	bl	800fea0 <osKernelSysTick>
 800d946:	4602      	mov	r2, r0
 800d948:	6a3b      	ldr	r3, [r7, #32]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d950:	4293      	cmp	r3, r2
 800d952:	d9ed      	bls.n	800d930 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3728      	adds	r7, #40	; 0x28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	20000318 	.word	0x20000318

0800d964 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60b9      	str	r1, [r7, #8]
 800d96c:	607a      	str	r2, [r7, #4]
 800d96e:	603b      	str	r3, [r7, #0]
 800d970:	4603      	mov	r3, r0
 800d972:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d974:	2301      	movs	r3, #1
 800d976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d97a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d97e:	f7ff ff0d 	bl	800d79c <SD_CheckStatusWithTimeout>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	da02      	bge.n	800d98e <SD_write+0x2a>
  {
    return res;
 800d988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d98c:	e02e      	b.n	800d9ec <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	68b8      	ldr	r0, [r7, #8]
 800d994:	f7ff fe98 	bl	800d6c8 <BSP_SD_WriteBlocks_DMA>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d124      	bne.n	800d9e8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d99e:	4b15      	ldr	r3, [pc, #84]	; (800d9f4 <SD_write+0x90>)
 800d9a0:	6819      	ldr	r1, [r3, #0]
 800d9a2:	f107 0314 	add.w	r3, r7, #20
 800d9a6:	f247 5230 	movw	r2, #30000	; 0x7530
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f002 fb52 	bl	8010054 <osMessageGet>

    if (event.status == osEventMessage)
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	2b10      	cmp	r3, #16
 800d9b4:	d118      	bne.n	800d9e8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d115      	bne.n	800d9e8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d9bc:	f002 fa70 	bl	800fea0 <osKernelSysTick>
 800d9c0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d9c2:	e008      	b.n	800d9d6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d9c4:	f7ff fe9a 	bl	800d6fc <BSP_SD_GetCardState>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d103      	bne.n	800d9d6 <SD_write+0x72>
          {
            res = RES_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d9d4:	e008      	b.n	800d9e8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d9d6:	f002 fa63 	bl	800fea0 <osKernelSysTick>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d9ed      	bls.n	800d9c4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3728      	adds	r7, #40	; 0x28
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	20000318 	.word	0x20000318

0800d9f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08c      	sub	sp, #48	; 0x30
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	4603      	mov	r3, r0
 800da00:	603a      	str	r2, [r7, #0]
 800da02:	71fb      	strb	r3, [r7, #7]
 800da04:	460b      	mov	r3, r1
 800da06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800da0e:	4b25      	ldr	r3, [pc, #148]	; (800daa4 <SD_ioctl+0xac>)
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d001      	beq.n	800da20 <SD_ioctl+0x28>
 800da1c:	2303      	movs	r3, #3
 800da1e:	e03c      	b.n	800da9a <SD_ioctl+0xa2>

  switch (cmd)
 800da20:	79bb      	ldrb	r3, [r7, #6]
 800da22:	2b03      	cmp	r3, #3
 800da24:	d834      	bhi.n	800da90 <SD_ioctl+0x98>
 800da26:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <SD_ioctl+0x34>)
 800da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2c:	0800da3d 	.word	0x0800da3d
 800da30:	0800da45 	.word	0x0800da45
 800da34:	0800da5d 	.word	0x0800da5d
 800da38:	0800da77 	.word	0x0800da77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da42:	e028      	b.n	800da96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800da44:	f107 030c 	add.w	r3, r7, #12
 800da48:	4618      	mov	r0, r3
 800da4a:	f7ff fe67 	bl	800d71c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800da4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da5a:	e01c      	b.n	800da96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800da5c:	f107 030c 	add.w	r3, r7, #12
 800da60:	4618      	mov	r0, r3
 800da62:	f7ff fe5b 	bl	800d71c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800da66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da68:	b29a      	uxth	r2, r3
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800da6e:	2300      	movs	r3, #0
 800da70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da74:	e00f      	b.n	800da96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800da76:	f107 030c 	add.w	r3, r7, #12
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7ff fe4e 	bl	800d71c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da82:	0a5a      	lsrs	r2, r3, #9
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da8e:	e002      	b.n	800da96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800da90:	2304      	movs	r3, #4
 800da92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800da96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3730      	adds	r7, #48	; 0x30
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	20000009 	.word	0x20000009

0800daa8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800daac:	4b04      	ldr	r3, [pc, #16]	; (800dac0 <BSP_SD_ReadCpltCallback+0x18>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2200      	movs	r2, #0
 800dab2:	2101      	movs	r1, #1
 800dab4:	4618      	mov	r0, r3
 800dab6:	f002 fa8d 	bl	800ffd4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800daba:	bf00      	nop
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	20000318 	.word	0x20000318

0800dac4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800dac4:	b590      	push	{r4, r7, lr}
 800dac6:	b089      	sub	sp, #36	; 0x24
 800dac8:	af04      	add	r7, sp, #16
 800daca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800dacc:	2301      	movs	r3, #1
 800dace:	2202      	movs	r2, #2
 800dad0:	2102      	movs	r1, #2
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fcba 	bl	800e44c <USBH_FindInterface>
 800dad8:	4603      	mov	r3, r0
 800dada:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	2bff      	cmp	r3, #255	; 0xff
 800dae0:	d002      	beq.n	800dae8 <USBH_CDC_InterfaceInit+0x24>
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d901      	bls.n	800daec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dae8:	2302      	movs	r3, #2
 800daea:	e13d      	b.n	800dd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fc8f 	bl	800e414 <USBH_SelectInterface>
 800daf6:	4603      	mov	r3, r0
 800daf8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800db00:	2302      	movs	r3, #2
 800db02:	e131      	b.n	800dd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800db0a:	2050      	movs	r0, #80	; 0x50
 800db0c:	f004 ff8a 	bl	8012a24 <malloc>
 800db10:	4603      	mov	r3, r0
 800db12:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db1a:	69db      	ldr	r3, [r3, #28]
 800db1c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800db24:	2302      	movs	r3, #2
 800db26:	e11f      	b.n	800dd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800db28:	2250      	movs	r2, #80	; 0x50
 800db2a:	2100      	movs	r1, #0
 800db2c:	68b8      	ldr	r0, [r7, #8]
 800db2e:	f004 ff94 	bl	8012a5a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800db32:	7bfb      	ldrb	r3, [r7, #15]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	211a      	movs	r1, #26
 800db38:	fb01 f303 	mul.w	r3, r1, r3
 800db3c:	4413      	add	r3, r2
 800db3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	b25b      	sxtb	r3, r3
 800db46:	2b00      	cmp	r3, #0
 800db48:	da15      	bge.n	800db76 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800db4a:	7bfb      	ldrb	r3, [r7, #15]
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	211a      	movs	r1, #26
 800db50:	fb01 f303 	mul.w	r3, r1, r3
 800db54:	4413      	add	r3, r2
 800db56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800db5a:	781a      	ldrb	r2, [r3, #0]
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	211a      	movs	r1, #26
 800db66:	fb01 f303 	mul.w	r3, r1, r3
 800db6a:	4413      	add	r3, r2
 800db6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800db70:	881a      	ldrh	r2, [r3, #0]
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	785b      	ldrb	r3, [r3, #1]
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f002 f894 	bl	800fcaa <USBH_AllocPipe>
 800db82:	4603      	mov	r3, r0
 800db84:	461a      	mov	r2, r3
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	7819      	ldrb	r1, [r3, #0]
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	7858      	ldrb	r0, [r3, #1]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	8952      	ldrh	r2, [r2, #10]
 800dba2:	9202      	str	r2, [sp, #8]
 800dba4:	2203      	movs	r2, #3
 800dba6:	9201      	str	r2, [sp, #4]
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	4623      	mov	r3, r4
 800dbac:	4602      	mov	r2, r0
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f002 f84c 	bl	800fc4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f004 fe81 	bl	80128c4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	210a      	movs	r1, #10
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 fc3f 	bl	800e44c <USBH_FindInterface>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	2bff      	cmp	r3, #255	; 0xff
 800dbd6:	d002      	beq.n	800dbde <USBH_CDC_InterfaceInit+0x11a>
 800dbd8:	7bfb      	ldrb	r3, [r7, #15]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d901      	bls.n	800dbe2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dbde:	2302      	movs	r3, #2
 800dbe0:	e0c2      	b.n	800dd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dbe2:	7bfb      	ldrb	r3, [r7, #15]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	211a      	movs	r1, #26
 800dbe8:	fb01 f303 	mul.w	r3, r1, r3
 800dbec:	4413      	add	r3, r2
 800dbee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	b25b      	sxtb	r3, r3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	da16      	bge.n	800dc28 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	211a      	movs	r1, #26
 800dc00:	fb01 f303 	mul.w	r3, r1, r3
 800dc04:	4413      	add	r3, r2
 800dc06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc0a:	781a      	ldrb	r2, [r3, #0]
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	211a      	movs	r1, #26
 800dc16:	fb01 f303 	mul.w	r3, r1, r3
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dc20:	881a      	ldrh	r2, [r3, #0]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	835a      	strh	r2, [r3, #26]
 800dc26:	e015      	b.n	800dc54 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	211a      	movs	r1, #26
 800dc2e:	fb01 f303 	mul.w	r3, r1, r3
 800dc32:	4413      	add	r3, r2
 800dc34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc38:	781a      	ldrb	r2, [r3, #0]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	211a      	movs	r1, #26
 800dc44:	fb01 f303 	mul.w	r3, r1, r3
 800dc48:	4413      	add	r3, r2
 800dc4a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dc4e:	881a      	ldrh	r2, [r3, #0]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	211a      	movs	r1, #26
 800dc5a:	fb01 f303 	mul.w	r3, r1, r3
 800dc5e:	4413      	add	r3, r2
 800dc60:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	b25b      	sxtb	r3, r3
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	da16      	bge.n	800dc9a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dc6c:	7bfb      	ldrb	r3, [r7, #15]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	211a      	movs	r1, #26
 800dc72:	fb01 f303 	mul.w	r3, r1, r3
 800dc76:	4413      	add	r3, r2
 800dc78:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	211a      	movs	r1, #26
 800dc88:	fb01 f303 	mul.w	r3, r1, r3
 800dc8c:	4413      	add	r3, r2
 800dc8e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dc92:	881a      	ldrh	r2, [r3, #0]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	835a      	strh	r2, [r3, #26]
 800dc98:	e015      	b.n	800dcc6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	211a      	movs	r1, #26
 800dca0:	fb01 f303 	mul.w	r3, r1, r3
 800dca4:	4413      	add	r3, r2
 800dca6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dcaa:	781a      	ldrb	r2, [r3, #0]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	211a      	movs	r1, #26
 800dcb6:	fb01 f303 	mul.w	r3, r1, r3
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dcc0:	881a      	ldrh	r2, [r3, #0]
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	7b9b      	ldrb	r3, [r3, #14]
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f001 ffec 	bl	800fcaa <USBH_AllocPipe>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	7bdb      	ldrb	r3, [r3, #15]
 800dcde:	4619      	mov	r1, r3
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f001 ffe2 	bl	800fcaa <USBH_AllocPipe>
 800dce6:	4603      	mov	r3, r0
 800dce8:	461a      	mov	r2, r3
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	7b59      	ldrb	r1, [r3, #13]
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	7b98      	ldrb	r0, [r3, #14]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	8b12      	ldrh	r2, [r2, #24]
 800dd06:	9202      	str	r2, [sp, #8]
 800dd08:	2202      	movs	r2, #2
 800dd0a:	9201      	str	r2, [sp, #4]
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	4623      	mov	r3, r4
 800dd10:	4602      	mov	r2, r0
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f001 ff9a 	bl	800fc4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	7b19      	ldrb	r1, [r3, #12]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	7bd8      	ldrb	r0, [r3, #15]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	8b52      	ldrh	r2, [r2, #26]
 800dd30:	9202      	str	r2, [sp, #8]
 800dd32:	2202      	movs	r2, #2
 800dd34:	9201      	str	r2, [sp, #4]
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	4623      	mov	r3, r4
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f001 ff85 	bl	800fc4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	7b5b      	ldrb	r3, [r3, #13]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	4619      	mov	r1, r3
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f004 fdb6 	bl	80128c4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	7b1b      	ldrb	r3, [r3, #12]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f004 fdaf 	bl	80128c4 <USBH_LL_SetToggle>

  return USBH_OK;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd90      	pop	{r4, r7, pc}

0800dd70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd7e:	69db      	ldr	r3, [r3, #28]
 800dd80:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00e      	beq.n	800dda8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f001 ff7a 	bl	800fc8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f001 ffa5 	bl	800fcec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	7b1b      	ldrb	r3, [r3, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00e      	beq.n	800ddce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	7b1b      	ldrb	r3, [r3, #12]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f001 ff67 	bl	800fc8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	7b1b      	ldrb	r3, [r3, #12]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f001 ff92 	bl	800fcec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	7b5b      	ldrb	r3, [r3, #13]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00e      	beq.n	800ddf4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	7b5b      	ldrb	r3, [r3, #13]
 800ddda:	4619      	mov	r1, r3
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f001 ff54 	bl	800fc8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	7b5b      	ldrb	r3, [r3, #13]
 800dde6:	4619      	mov	r1, r3
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f001 ff7f 	bl	800fcec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00b      	beq.n	800de18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de06:	69db      	ldr	r3, [r3, #28]
 800de08:	4618      	mov	r0, r3
 800de0a:	f004 fe13 	bl	8012a34 <free>
    phost->pActiveClass->pData = 0U;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de14:	2200      	movs	r2, #0
 800de16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b084      	sub	sp, #16
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de30:	69db      	ldr	r3, [r3, #28]
 800de32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	3340      	adds	r3, #64	; 0x40
 800de38:	4619      	mov	r1, r3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f8b1 	bl	800dfa2 <GetLineCoding>
 800de40:	4603      	mov	r3, r0
 800de42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800de44:	7afb      	ldrb	r3, [r7, #11]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d105      	bne.n	800de56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de50:	2102      	movs	r1, #2
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800de56:	7afb      	ldrb	r3, [r7, #11]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800de68:	2301      	movs	r3, #1
 800de6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de76:	69db      	ldr	r3, [r3, #28]
 800de78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800de80:	2b04      	cmp	r3, #4
 800de82:	d877      	bhi.n	800df74 <USBH_CDC_Process+0x114>
 800de84:	a201      	add	r2, pc, #4	; (adr r2, 800de8c <USBH_CDC_Process+0x2c>)
 800de86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8a:	bf00      	nop
 800de8c:	0800dea1 	.word	0x0800dea1
 800de90:	0800dea7 	.word	0x0800dea7
 800de94:	0800ded7 	.word	0x0800ded7
 800de98:	0800df4b 	.word	0x0800df4b
 800de9c:	0800df59 	.word	0x0800df59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	73fb      	strb	r3, [r7, #15]
      break;
 800dea4:	e06d      	b.n	800df82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deaa:	4619      	mov	r1, r3
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 f897 	bl	800dfe0 <SetLineCoding>
 800deb2:	4603      	mov	r3, r0
 800deb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800deb6:	7bbb      	ldrb	r3, [r7, #14]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d104      	bne.n	800dec6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2202      	movs	r2, #2
 800dec0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dec4:	e058      	b.n	800df78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d055      	beq.n	800df78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2204      	movs	r2, #4
 800ded0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ded4:	e050      	b.n	800df78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	3340      	adds	r3, #64	; 0x40
 800deda:	4619      	mov	r1, r3
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f860 	bl	800dfa2 <GetLineCoding>
 800dee2:	4603      	mov	r3, r0
 800dee4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dee6:	7bbb      	ldrb	r3, [r7, #14]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d126      	bne.n	800df3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	2200      	movs	r2, #0
 800def0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800defe:	791b      	ldrb	r3, [r3, #4]
 800df00:	429a      	cmp	r2, r3
 800df02:	d13b      	bne.n	800df7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800df10:	429a      	cmp	r2, r3
 800df12:	d133      	bne.n	800df7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800df20:	429a      	cmp	r2, r3
 800df22:	d12b      	bne.n	800df7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800df2e:	429a      	cmp	r2, r3
 800df30:	d124      	bne.n	800df7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f984 	bl	800e240 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800df38:	e020      	b.n	800df7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800df3a:	7bbb      	ldrb	r3, [r7, #14]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d01d      	beq.n	800df7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2204      	movs	r2, #4
 800df44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800df48:	e018      	b.n	800df7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f867 	bl	800e01e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 f8f8 	bl	800e146 <CDC_ProcessReception>
      break;
 800df56:	e014      	b.n	800df82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800df58:	2100      	movs	r1, #0
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f001 f953 	bl	800f206 <USBH_ClrFeature>
 800df60:	4603      	mov	r3, r0
 800df62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df64:	7bbb      	ldrb	r3, [r7, #14]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10a      	bne.n	800df80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800df72:	e005      	b.n	800df80 <USBH_CDC_Process+0x120>

    default:
      break;
 800df74:	bf00      	nop
 800df76:	e004      	b.n	800df82 <USBH_CDC_Process+0x122>
      break;
 800df78:	bf00      	nop
 800df7a:	e002      	b.n	800df82 <USBH_CDC_Process+0x122>
      break;
 800df7c:	bf00      	nop
 800df7e:	e000      	b.n	800df82 <USBH_CDC_Process+0x122>
      break;
 800df80:	bf00      	nop

  }

  return status;
 800df82:	7bfb      	ldrb	r3, [r7, #15]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	22a1      	movs	r2, #161	; 0xa1
 800dfb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2221      	movs	r2, #33	; 0x21
 800dfb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2207      	movs	r2, #7
 800dfc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2207      	movs	r2, #7
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f001 faf8 	bl	800f5c6 <USBH_CtlReq>
 800dfd6:	4603      	mov	r3, r0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2221      	movs	r2, #33	; 0x21
 800dfee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2220      	movs	r2, #32
 800dff4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2207      	movs	r2, #7
 800e006:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	2207      	movs	r2, #7
 800e00c:	4619      	mov	r1, r3
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f001 fad9 	bl	800f5c6 <USBH_CtlReq>
 800e014:	4603      	mov	r3, r0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b086      	sub	sp, #24
 800e022:	af02      	add	r7, sp, #8
 800e024:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e030:	2300      	movs	r3, #0
 800e032:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d002      	beq.n	800e044 <CDC_ProcessTransmission+0x26>
 800e03e:	2b02      	cmp	r3, #2
 800e040:	d025      	beq.n	800e08e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e042:	e07c      	b.n	800e13e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	8b12      	ldrh	r2, [r2, #24]
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d90c      	bls.n	800e06a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	69d9      	ldr	r1, [r3, #28]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	8b1a      	ldrh	r2, [r3, #24]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	7b58      	ldrb	r0, [r3, #13]
 800e05c:	2301      	movs	r3, #1
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	4603      	mov	r3, r0
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f001 fdaf 	bl	800fbc6 <USBH_BulkSendData>
 800e068:	e00c      	b.n	800e084 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e072:	b29a      	uxth	r2, r3
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	7b58      	ldrb	r0, [r3, #13]
 800e078:	2301      	movs	r3, #1
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	4603      	mov	r3, r0
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f001 fda1 	bl	800fbc6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2202      	movs	r2, #2
 800e088:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e08c:	e057      	b.n	800e13e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	7b5b      	ldrb	r3, [r3, #13]
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f004 fbeb 	bl	8012870 <USBH_LL_GetURBState>
 800e09a:	4603      	mov	r3, r0
 800e09c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e09e:	7afb      	ldrb	r3, [r7, #11]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d136      	bne.n	800e112 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	8b12      	ldrh	r2, [r2, #24]
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d90e      	bls.n	800e0ce <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	8b12      	ldrh	r2, [r2, #24]
 800e0b8:	1a9a      	subs	r2, r3, r2
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	69db      	ldr	r3, [r3, #28]
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	8b12      	ldrh	r2, [r2, #24]
 800e0c6:	441a      	add	r2, r3
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	61da      	str	r2, [r3, #28]
 800e0cc:	e002      	b.n	800e0d4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d004      	beq.n	800e0e6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e0e4:	e006      	b.n	800e0f4 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 f892 	bl	800e218 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2204      	movs	r2, #4
 800e0f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e108:	2200      	movs	r2, #0
 800e10a:	4619      	mov	r1, r3
 800e10c:	f001 ff62 	bl	800ffd4 <osMessagePut>
      break;
 800e110:	e014      	b.n	800e13c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800e112:	7afb      	ldrb	r3, [r7, #11]
 800e114:	2b02      	cmp	r3, #2
 800e116:	d111      	bne.n	800e13c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2204      	movs	r2, #4
 800e124:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e134:	2200      	movs	r2, #0
 800e136:	4619      	mov	r1, r3
 800e138:	f001 ff4c 	bl	800ffd4 <osMessagePut>
      break;
 800e13c:	bf00      	nop
  }
}
 800e13e:	bf00      	nop
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b086      	sub	sp, #24
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e158:	2300      	movs	r3, #0
 800e15a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e162:	2b03      	cmp	r3, #3
 800e164:	d002      	beq.n	800e16c <CDC_ProcessReception+0x26>
 800e166:	2b04      	cmp	r3, #4
 800e168:	d00e      	beq.n	800e188 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e16a:	e051      	b.n	800e210 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	6a19      	ldr	r1, [r3, #32]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	8b5a      	ldrh	r2, [r3, #26]
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	7b1b      	ldrb	r3, [r3, #12]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f001 fd49 	bl	800fc10 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	2204      	movs	r2, #4
 800e182:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e186:	e043      	b.n	800e210 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	7b1b      	ldrb	r3, [r3, #12]
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f004 fb6e 	bl	8012870 <USBH_LL_GetURBState>
 800e194:	4603      	mov	r3, r0
 800e196:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e198:	7cfb      	ldrb	r3, [r7, #19]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d137      	bne.n	800e20e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	7b1b      	ldrb	r3, [r3, #12]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f004 fad1 	bl	801274c <USBH_LL_GetLastXferSize>
 800e1aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d016      	beq.n	800e1e4 <CDC_ProcessReception+0x9e>
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d910      	bls.n	800e1e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	1ad2      	subs	r2, r2, r3
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	6a1a      	ldr	r2, [r3, #32]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	441a      	add	r2, r3
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2203      	movs	r2, #3
 800e1de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e1e2:	e006      	b.n	800e1f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f81d 	bl	800e22c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2204      	movs	r2, #4
 800e1f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e206:	2200      	movs	r2, #0
 800e208:	4619      	mov	r1, r3
 800e20a:	f001 fee3 	bl	800ffd4 <osMessagePut>
      break;
 800e20e:	bf00      	nop
  }
}
 800e210:	bf00      	nop
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e234:	bf00      	nop
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e254:	b5b0      	push	{r4, r5, r7, lr}
 800e256:	b090      	sub	sp, #64	; 0x40
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	4613      	mov	r3, r2
 800e260:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e268:	2302      	movs	r3, #2
 800e26a:	e04d      	b.n	800e308 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	79fa      	ldrb	r2, [r7, #7]
 800e270:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f000 f847 	bl	800e318 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2200      	movs	r2, #0
 800e28e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d003      	beq.n	800e2b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e2b8:	4b15      	ldr	r3, [pc, #84]	; (800e310 <USBH_Init+0xbc>)
 800e2ba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e2be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e2c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e2c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f001 fe58 	bl	800ff80 <osMessageCreate>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e2d8:	4b0e      	ldr	r3, [pc, #56]	; (800e314 <USBH_Init+0xc0>)
 800e2da:	f107 0414 	add.w	r4, r7, #20
 800e2de:	461d      	mov	r5, r3
 800e2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e2e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e2ec:	f107 0314 	add.w	r3, r7, #20
 800e2f0:	68f9      	ldr	r1, [r7, #12]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f001 fde4 	bl	800fec0 <osThreadCreate>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f004 f971 	bl	80125e8 <USBH_LL_Init>

  return USBH_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3740      	adds	r7, #64	; 0x40
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bdb0      	pop	{r4, r5, r7, pc}
 800e310:	080133a4 	.word	0x080133a4
 800e314:	080133c0 	.word	0x080133c0

0800e318 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e320:	2300      	movs	r3, #0
 800e322:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e324:	2300      	movs	r3, #0
 800e326:	60fb      	str	r3, [r7, #12]
 800e328:	e009      	b.n	800e33e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	33e0      	adds	r3, #224	; 0xe0
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	2200      	movs	r2, #0
 800e336:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3301      	adds	r3, #1
 800e33c:	60fb      	str	r3, [r7, #12]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b0e      	cmp	r3, #14
 800e342:	d9f2      	bls.n	800e32a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	e009      	b.n	800e35e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	4413      	add	r3, r2
 800e350:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e354:	2200      	movs	r2, #0
 800e356:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	3301      	adds	r3, #1
 800e35c:	60fb      	str	r3, [r7, #12]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e364:	d3f1      	bcc.n	800e34a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2201      	movs	r2, #1
 800e384:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2240      	movs	r2, #64	; 0x40
 800e38a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2200      	movs	r2, #0
 800e390:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d016      	beq.n	800e402 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d10e      	bne.n	800e3fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e3e4:	1c59      	adds	r1, r3, #1
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	33de      	adds	r3, #222	; 0xde
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	73fb      	strb	r3, [r7, #15]
 800e3fa:	e004      	b.n	800e406 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	73fb      	strb	r3, [r7, #15]
 800e400:	e001      	b.n	800e406 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e402:	2302      	movs	r3, #2
 800e404:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e406:	7bfb      	ldrb	r3, [r7, #15]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e420:	2300      	movs	r3, #0
 800e422:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e42a:	78fa      	ldrb	r2, [r7, #3]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d204      	bcs.n	800e43a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	78fa      	ldrb	r2, [r7, #3]
 800e434:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e438:	e001      	b.n	800e43e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e43a:	2302      	movs	r3, #2
 800e43c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b087      	sub	sp, #28
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	4608      	mov	r0, r1
 800e456:	4611      	mov	r1, r2
 800e458:	461a      	mov	r2, r3
 800e45a:	4603      	mov	r3, r0
 800e45c:	70fb      	strb	r3, [r7, #3]
 800e45e:	460b      	mov	r3, r1
 800e460:	70bb      	strb	r3, [r7, #2]
 800e462:	4613      	mov	r3, r2
 800e464:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e466:	2300      	movs	r3, #0
 800e468:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e474:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e476:	e025      	b.n	800e4c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e478:	7dfb      	ldrb	r3, [r7, #23]
 800e47a:	221a      	movs	r2, #26
 800e47c:	fb02 f303 	mul.w	r3, r2, r3
 800e480:	3308      	adds	r3, #8
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	4413      	add	r3, r2
 800e486:	3302      	adds	r3, #2
 800e488:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	795b      	ldrb	r3, [r3, #5]
 800e48e:	78fa      	ldrb	r2, [r7, #3]
 800e490:	429a      	cmp	r2, r3
 800e492:	d002      	beq.n	800e49a <USBH_FindInterface+0x4e>
 800e494:	78fb      	ldrb	r3, [r7, #3]
 800e496:	2bff      	cmp	r3, #255	; 0xff
 800e498:	d111      	bne.n	800e4be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e49e:	78ba      	ldrb	r2, [r7, #2]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d002      	beq.n	800e4aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e4a4:	78bb      	ldrb	r3, [r7, #2]
 800e4a6:	2bff      	cmp	r3, #255	; 0xff
 800e4a8:	d109      	bne.n	800e4be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e4ae:	787a      	ldrb	r2, [r7, #1]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d002      	beq.n	800e4ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e4b4:	787b      	ldrb	r3, [r7, #1]
 800e4b6:	2bff      	cmp	r3, #255	; 0xff
 800e4b8:	d101      	bne.n	800e4be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e4ba:	7dfb      	ldrb	r3, [r7, #23]
 800e4bc:	e006      	b.n	800e4cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d9d6      	bls.n	800e478 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e4ca:	23ff      	movs	r3, #255	; 0xff
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	371c      	adds	r7, #28
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f004 f8bd 	bl	8012660 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f004 f9d4 	bl	8012896 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e4ee:	2300      	movs	r3, #0
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af04      	add	r7, sp, #16
 800e4fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e500:	2302      	movs	r3, #2
 800e502:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e504:	2300      	movs	r3, #0
 800e506:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	2b01      	cmp	r3, #1
 800e512:	d102      	bne.n	800e51a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2203      	movs	r2, #3
 800e518:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	2b0b      	cmp	r3, #11
 800e522:	f200 823c 	bhi.w	800e99e <USBH_Process+0x4a6>
 800e526:	a201      	add	r2, pc, #4	; (adr r2, 800e52c <USBH_Process+0x34>)
 800e528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e52c:	0800e55d 	.word	0x0800e55d
 800e530:	0800e5ab 	.word	0x0800e5ab
 800e534:	0800e62f 	.word	0x0800e62f
 800e538:	0800e91d 	.word	0x0800e91d
 800e53c:	0800e99f 	.word	0x0800e99f
 800e540:	0800e6ef 	.word	0x0800e6ef
 800e544:	0800e8a7 	.word	0x0800e8a7
 800e548:	0800e741 	.word	0x0800e741
 800e54c:	0800e77d 	.word	0x0800e77d
 800e550:	0800e7b7 	.word	0x0800e7b7
 800e554:	0800e7ff 	.word	0x0800e7ff
 800e558:	0800e905 	.word	0x0800e905
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e562:	b2db      	uxtb	r3, r3
 800e564:	2b00      	cmp	r3, #0
 800e566:	f000 821c 	beq.w	800e9a2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e570:	20c8      	movs	r0, #200	; 0xc8
 800e572:	f004 f9da 	bl	801292a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f004 f8cd 	bl	8012716 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	f001 fd16 	bl	800ffd4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e5a8:	e1fb      	b.n	800e9a2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d107      	bne.n	800e5c4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2202      	movs	r2, #2
 800e5c0:	701a      	strb	r2, [r3, #0]
 800e5c2:	e025      	b.n	800e610 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e5ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5ce:	d914      	bls.n	800e5fa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d903      	bls.n	800e5f2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	220d      	movs	r2, #13
 800e5ee:	701a      	strb	r2, [r3, #0]
 800e5f0:	e00e      	b.n	800e610 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	701a      	strb	r2, [r3, #0]
 800e5f8:	e00a      	b.n	800e610 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e600:	f103 020a 	add.w	r2, r3, #10
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e60a:	200a      	movs	r0, #10
 800e60c:	f004 f98d 	bl	801292a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2201      	movs	r2, #1
 800e614:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e624:	2200      	movs	r2, #0
 800e626:	4619      	mov	r1, r3
 800e628:	f001 fcd4 	bl	800ffd4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e62c:	e1c0      	b.n	800e9b0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e63e:	2104      	movs	r1, #4
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e644:	2064      	movs	r0, #100	; 0x64
 800e646:	f004 f970 	bl	801292a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f004 f83e 	bl	80126cc <USBH_LL_GetSpeed>
 800e650:	4603      	mov	r3, r0
 800e652:	461a      	mov	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2205      	movs	r2, #5
 800e65e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e660:	2100      	movs	r1, #0
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f001 fb21 	bl	800fcaa <USBH_AllocPipe>
 800e668:	4603      	mov	r3, r0
 800e66a:	461a      	mov	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e670:	2180      	movs	r1, #128	; 0x80
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f001 fb19 	bl	800fcaa <USBH_AllocPipe>
 800e678:	4603      	mov	r3, r0
 800e67a:	461a      	mov	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	7919      	ldrb	r1, [r3, #4]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e694:	b292      	uxth	r2, r2
 800e696:	9202      	str	r2, [sp, #8]
 800e698:	2200      	movs	r2, #0
 800e69a:	9201      	str	r2, [sp, #4]
 800e69c:	9300      	str	r3, [sp, #0]
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2280      	movs	r2, #128	; 0x80
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 fad2 	bl	800fc4c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	7959      	ldrb	r1, [r3, #5]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e6bc:	b292      	uxth	r2, r2
 800e6be:	9202      	str	r2, [sp, #8]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	9201      	str	r2, [sp, #4]
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f001 fabe 	bl	800fc4c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	f001 fc74 	bl	800ffd4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e6ec:	e160      	b.n	800e9b0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 f964 	bl	800e9bc <USBH_HandleEnum>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e6f8:	7bbb      	ldrb	r3, [r7, #14]
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f040 8152 	bne.w	800e9a6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e710:	2b01      	cmp	r3, #1
 800e712:	d103      	bne.n	800e71c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2208      	movs	r2, #8
 800e718:	701a      	strb	r2, [r3, #0]
 800e71a:	e002      	b.n	800e722 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2207      	movs	r2, #7
 800e720:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2205      	movs	r2, #5
 800e726:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e736:	2200      	movs	r2, #0
 800e738:	4619      	mov	r1, r3
 800e73a:	f001 fc4b 	bl	800ffd4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e73e:	e132      	b.n	800e9a6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 812f 	beq.w	800e9aa <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e752:	2101      	movs	r1, #1
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2208      	movs	r2, #8
 800e75c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2205      	movs	r2, #5
 800e762:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e772:	2200      	movs	r2, #0
 800e774:	4619      	mov	r1, r3
 800e776:	f001 fc2d 	bl	800ffd4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e77a:	e116      	b.n	800e9aa <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e782:	b29b      	uxth	r3, r3
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fcf6 	bl	800f178 <USBH_SetCfg>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d102      	bne.n	800e798 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2209      	movs	r2, #9
 800e796:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	f001 fc10 	bl	800ffd4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e7b4:	e0fc      	b.n	800e9b0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e7bc:	f003 0320 	and.w	r3, r3, #32
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00a      	beq.n	800e7da <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e7c4:	2101      	movs	r1, #1
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 fcf9 	bl	800f1be <USBH_SetFeature>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d106      	bne.n	800e7e0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	220a      	movs	r2, #10
 800e7d6:	701a      	strb	r2, [r3, #0]
 800e7d8:	e002      	b.n	800e7e0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	220a      	movs	r2, #10
 800e7de:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	f001 fbec 	bl	800ffd4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e7fc:	e0d8      	b.n	800e9b0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e804:	2b00      	cmp	r3, #0
 800e806:	d03f      	beq.n	800e888 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e810:	2300      	movs	r3, #0
 800e812:	73fb      	strb	r3, [r7, #15]
 800e814:	e016      	b.n	800e844 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e816:	7bfa      	ldrb	r2, [r7, #15]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	32de      	adds	r2, #222	; 0xde
 800e81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e820:	791a      	ldrb	r2, [r3, #4]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e828:	429a      	cmp	r2, r3
 800e82a:	d108      	bne.n	800e83e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e82c:	7bfa      	ldrb	r2, [r7, #15]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	32de      	adds	r2, #222	; 0xde
 800e832:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e83c:	e005      	b.n	800e84a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	3301      	adds	r3, #1
 800e842:	73fb      	strb	r3, [r7, #15]
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d0e5      	beq.n	800e816 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e850:	2b00      	cmp	r3, #0
 800e852:	d016      	beq.n	800e882 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	4798      	blx	r3
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d109      	bne.n	800e87a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2206      	movs	r2, #6
 800e86a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e872:	2103      	movs	r1, #3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	4798      	blx	r3
 800e878:	e006      	b.n	800e888 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	220d      	movs	r2, #13
 800e87e:	701a      	strb	r2, [r3, #0]
 800e880:	e002      	b.n	800e888 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	220d      	movs	r2, #13
 800e886:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2205      	movs	r2, #5
 800e88c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e89c:	2200      	movs	r2, #0
 800e89e:	4619      	mov	r1, r3
 800e8a0:	f001 fb98 	bl	800ffd4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e8a4:	e084      	b.n	800e9b0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d017      	beq.n	800e8e0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	4798      	blx	r3
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e8c0:	7bbb      	ldrb	r3, [r7, #14]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d103      	bne.n	800e8d0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	220b      	movs	r2, #11
 800e8cc:	701a      	strb	r2, [r3, #0]
 800e8ce:	e00a      	b.n	800e8e6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800e8d0:	7bbb      	ldrb	r3, [r7, #14]
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d106      	bne.n	800e8e6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	220d      	movs	r2, #13
 800e8dc:	701a      	strb	r2, [r3, #0]
 800e8de:	e002      	b.n	800e8e6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	220d      	movs	r2, #13
 800e8e4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2205      	movs	r2, #5
 800e8ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	f001 fb69 	bl	800ffd4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e902:	e055      	b.n	800e9b0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d04f      	beq.n	800e9ae <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	4798      	blx	r3
      }
      break;
 800e91a:	e048      	b.n	800e9ae <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff fcf7 	bl	800e318 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e930:	2b00      	cmp	r3, #0
 800e932:	d009      	beq.n	800e948 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d005      	beq.n	800e95e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e958:	2105      	movs	r1, #5
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b01      	cmp	r3, #1
 800e968:	d107      	bne.n	800e97a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7ff fdb0 	bl	800e4d8 <USBH_Start>
 800e978:	e002      	b.n	800e980 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f003 fe70 	bl	8012660 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2201      	movs	r2, #1
 800e984:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e994:	2200      	movs	r2, #0
 800e996:	4619      	mov	r1, r3
 800e998:	f001 fb1c 	bl	800ffd4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e99c:	e008      	b.n	800e9b0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800e99e:	bf00      	nop
 800e9a0:	e006      	b.n	800e9b0 <USBH_Process+0x4b8>
      break;
 800e9a2:	bf00      	nop
 800e9a4:	e004      	b.n	800e9b0 <USBH_Process+0x4b8>
      break;
 800e9a6:	bf00      	nop
 800e9a8:	e002      	b.n	800e9b0 <USBH_Process+0x4b8>
    break;
 800e9aa:	bf00      	nop
 800e9ac:	e000      	b.n	800e9b0 <USBH_Process+0x4b8>
      break;
 800e9ae:	bf00      	nop
  }
  return USBH_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop

0800e9bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b088      	sub	sp, #32
 800e9c0:	af04      	add	r7, sp, #16
 800e9c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	785b      	ldrb	r3, [r3, #1]
 800e9d0:	2b07      	cmp	r3, #7
 800e9d2:	f200 8208 	bhi.w	800ede6 <USBH_HandleEnum+0x42a>
 800e9d6:	a201      	add	r2, pc, #4	; (adr r2, 800e9dc <USBH_HandleEnum+0x20>)
 800e9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9dc:	0800e9fd 	.word	0x0800e9fd
 800e9e0:	0800eabb 	.word	0x0800eabb
 800e9e4:	0800eb25 	.word	0x0800eb25
 800e9e8:	0800ebb3 	.word	0x0800ebb3
 800e9ec:	0800ec1d 	.word	0x0800ec1d
 800e9f0:	0800ec8d 	.word	0x0800ec8d
 800e9f4:	0800ed29 	.word	0x0800ed29
 800e9f8:	0800eda7 	.word	0x0800eda7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e9fc:	2108      	movs	r1, #8
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 faea 	bl	800efd8 <USBH_Get_DevDesc>
 800ea04:	4603      	mov	r3, r0
 800ea06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea08:	7bbb      	ldrb	r3, [r7, #14]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d130      	bne.n	800ea70 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	7919      	ldrb	r1, [r3, #4]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ea32:	b292      	uxth	r2, r2
 800ea34:	9202      	str	r2, [sp, #8]
 800ea36:	2200      	movs	r2, #0
 800ea38:	9201      	str	r2, [sp, #4]
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2280      	movs	r2, #128	; 0x80
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f001 f903 	bl	800fc4c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	7959      	ldrb	r1, [r3, #5]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ea5a:	b292      	uxth	r2, r2
 800ea5c:	9202      	str	r2, [sp, #8]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	9201      	str	r2, [sp, #4]
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	4603      	mov	r3, r0
 800ea66:	2200      	movs	r2, #0
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f001 f8ef 	bl	800fc4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ea6e:	e1bc      	b.n	800edea <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea70:	7bbb      	ldrb	r3, [r7, #14]
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	f040 81b9 	bne.w	800edea <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea7e:	3301      	adds	r3, #1
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea8e:	2b03      	cmp	r3, #3
 800ea90:	d903      	bls.n	800ea9a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	220d      	movs	r2, #13
 800ea96:	701a      	strb	r2, [r3, #0]
      break;
 800ea98:	e1a7      	b.n	800edea <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	795b      	ldrb	r3, [r3, #5]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f001 f923 	bl	800fcec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	791b      	ldrb	r3, [r3, #4]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f001 f91d 	bl	800fcec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2200      	movs	r2, #0
 800eab6:	701a      	strb	r2, [r3, #0]
      break;
 800eab8:	e197      	b.n	800edea <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800eaba:	2112      	movs	r1, #18
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 fa8b 	bl	800efd8 <USBH_Get_DevDesc>
 800eac2:	4603      	mov	r3, r0
 800eac4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eac6:	7bbb      	ldrb	r3, [r7, #14]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2202      	movs	r2, #2
 800ead0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ead2:	e18c      	b.n	800edee <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ead4:	7bbb      	ldrb	r3, [r7, #14]
 800ead6:	2b03      	cmp	r3, #3
 800ead8:	f040 8189 	bne.w	800edee <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eae2:	3301      	adds	r3, #1
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eaf2:	2b03      	cmp	r3, #3
 800eaf4:	d903      	bls.n	800eafe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	220d      	movs	r2, #13
 800eafa:	701a      	strb	r2, [r3, #0]
      break;
 800eafc:	e177      	b.n	800edee <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	795b      	ldrb	r3, [r3, #5]
 800eb02:	4619      	mov	r1, r3
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f001 f8f1 	bl	800fcec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	791b      	ldrb	r3, [r3, #4]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f001 f8eb 	bl	800fcec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	701a      	strb	r2, [r3, #0]
      break;
 800eb22:	e164      	b.n	800edee <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800eb24:	2101      	movs	r1, #1
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fb02 	bl	800f130 <USBH_SetAddress>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eb30:	7bbb      	ldrb	r3, [r7, #14]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d132      	bne.n	800eb9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800eb36:	2002      	movs	r0, #2
 800eb38:	f003 fef7 	bl	801292a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2203      	movs	r2, #3
 800eb48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	7919      	ldrb	r1, [r3, #4]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800eb5e:	b292      	uxth	r2, r2
 800eb60:	9202      	str	r2, [sp, #8]
 800eb62:	2200      	movs	r2, #0
 800eb64:	9201      	str	r2, [sp, #4]
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2280      	movs	r2, #128	; 0x80
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f001 f86d 	bl	800fc4c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7959      	ldrb	r1, [r3, #5]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eb86:	b292      	uxth	r2, r2
 800eb88:	9202      	str	r2, [sp, #8]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	9201      	str	r2, [sp, #4]
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	4603      	mov	r3, r0
 800eb92:	2200      	movs	r2, #0
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 f859 	bl	800fc4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eb9a:	e12a      	b.n	800edf2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb9c:	7bbb      	ldrb	r3, [r7, #14]
 800eb9e:	2b03      	cmp	r3, #3
 800eba0:	f040 8127 	bne.w	800edf2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	220d      	movs	r2, #13
 800eba8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	705a      	strb	r2, [r3, #1]
      break;
 800ebb0:	e11f      	b.n	800edf2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ebb2:	2109      	movs	r1, #9
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 fa37 	bl	800f028 <USBH_Get_CfgDesc>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ebbe:	7bbb      	ldrb	r3, [r7, #14]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d103      	bne.n	800ebcc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2204      	movs	r2, #4
 800ebc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ebca:	e114      	b.n	800edf6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ebcc:	7bbb      	ldrb	r3, [r7, #14]
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	f040 8111 	bne.w	800edf6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ebda:	3301      	adds	r3, #1
 800ebdc:	b2da      	uxtb	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d903      	bls.n	800ebf6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	220d      	movs	r2, #13
 800ebf2:	701a      	strb	r2, [r3, #0]
      break;
 800ebf4:	e0ff      	b.n	800edf6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	795b      	ldrb	r3, [r3, #5]
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f001 f875 	bl	800fcec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	791b      	ldrb	r3, [r3, #4]
 800ec06:	4619      	mov	r1, r3
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f001 f86f 	bl	800fcec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	701a      	strb	r2, [r3, #0]
      break;
 800ec1a:	e0ec      	b.n	800edf6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ec22:	4619      	mov	r1, r3
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 f9ff 	bl	800f028 <USBH_Get_CfgDesc>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec2e:	7bbb      	ldrb	r3, [r7, #14]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d103      	bne.n	800ec3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2205      	movs	r2, #5
 800ec38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ec3a:	e0de      	b.n	800edfa <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec3c:	7bbb      	ldrb	r3, [r7, #14]
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	f040 80db 	bne.w	800edfa <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	b2da      	uxtb	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec5a:	2b03      	cmp	r3, #3
 800ec5c:	d903      	bls.n	800ec66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	220d      	movs	r2, #13
 800ec62:	701a      	strb	r2, [r3, #0]
      break;
 800ec64:	e0c9      	b.n	800edfa <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	795b      	ldrb	r3, [r3, #5]
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f001 f83d 	bl	800fcec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	791b      	ldrb	r3, [r3, #4]
 800ec76:	4619      	mov	r1, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 f837 	bl	800fcec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	701a      	strb	r2, [r3, #0]
      break;
 800ec8a:	e0b6      	b.n	800edfa <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d036      	beq.n	800ed04 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800eca2:	23ff      	movs	r3, #255	; 0xff
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f000 f9e3 	bl	800f070 <USBH_Get_StringDesc>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ecae:	7bbb      	ldrb	r3, [r7, #14]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d111      	bne.n	800ecd8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2206      	movs	r2, #6
 800ecb8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2205      	movs	r2, #5
 800ecbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ecce:	2200      	movs	r2, #0
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	f001 f97f 	bl	800ffd4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ecd6:	e092      	b.n	800edfe <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ecd8:	7bbb      	ldrb	r3, [r7, #14]
 800ecda:	2b03      	cmp	r3, #3
 800ecdc:	f040 808f 	bne.w	800edfe <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2206      	movs	r2, #6
 800ece4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2205      	movs	r2, #5
 800ecea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	f001 f969 	bl	800ffd4 <osMessagePut>
      break;
 800ed02:	e07c      	b.n	800edfe <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2206      	movs	r2, #6
 800ed08:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2205      	movs	r2, #5
 800ed0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed1e:	2200      	movs	r2, #0
 800ed20:	4619      	mov	r1, r3
 800ed22:	f001 f957 	bl	800ffd4 <osMessagePut>
      break;
 800ed26:	e06a      	b.n	800edfe <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d027      	beq.n	800ed82 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ed3e:	23ff      	movs	r3, #255	; 0xff
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 f995 	bl	800f070 <USBH_Get_StringDesc>
 800ed46:	4603      	mov	r3, r0
 800ed48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ed4a:	7bbb      	ldrb	r3, [r7, #14]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d103      	bne.n	800ed58 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2207      	movs	r2, #7
 800ed54:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ed56:	e054      	b.n	800ee02 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d151      	bne.n	800ee02 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2207      	movs	r2, #7
 800ed62:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2205      	movs	r2, #5
 800ed68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed78:	2200      	movs	r2, #0
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	f001 f92a 	bl	800ffd4 <osMessagePut>
      break;
 800ed80:	e03f      	b.n	800ee02 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2207      	movs	r2, #7
 800ed86:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2205      	movs	r2, #5
 800ed8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	4619      	mov	r1, r3
 800eda0:	f001 f918 	bl	800ffd4 <osMessagePut>
      break;
 800eda4:	e02d      	b.n	800ee02 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800edac:	2b00      	cmp	r3, #0
 800edae:	d017      	beq.n	800ede0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800edbc:	23ff      	movs	r3, #255	; 0xff
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f956 	bl	800f070 <USBH_Get_StringDesc>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800edce:	2300      	movs	r3, #0
 800edd0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800edd2:	e018      	b.n	800ee06 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800edd4:	7bbb      	ldrb	r3, [r7, #14]
 800edd6:	2b03      	cmp	r3, #3
 800edd8:	d115      	bne.n	800ee06 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800edda:	2300      	movs	r3, #0
 800eddc:	73fb      	strb	r3, [r7, #15]
      break;
 800edde:	e012      	b.n	800ee06 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	73fb      	strb	r3, [r7, #15]
      break;
 800ede4:	e00f      	b.n	800ee06 <USBH_HandleEnum+0x44a>

    default:
      break;
 800ede6:	bf00      	nop
 800ede8:	e00e      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800edea:	bf00      	nop
 800edec:	e00c      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800edee:	bf00      	nop
 800edf0:	e00a      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800edf2:	bf00      	nop
 800edf4:	e008      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800edf6:	bf00      	nop
 800edf8:	e006      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800edfa:	bf00      	nop
 800edfc:	e004      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800edfe:	bf00      	nop
 800ee00:	e002      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800ee02:	bf00      	nop
 800ee04:	e000      	b.n	800ee08 <USBH_HandleEnum+0x44c>
      break;
 800ee06:	bf00      	nop
  }
  return Status;
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop

0800ee14 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ee40:	1c5a      	adds	r2, r3, #1
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f804 	bl	800ee56 <USBH_HandleSof>
}
 800ee4e:	bf00      	nop
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b082      	sub	sp, #8
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b0b      	cmp	r3, #11
 800ee66:	d10a      	bne.n	800ee7e <USBH_HandleSof+0x28>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d005      	beq.n	800ee7e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee78:	699b      	ldr	r3, [r3, #24]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	4798      	blx	r3
  }
}
 800ee7e:	bf00      	nop
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b082      	sub	sp, #8
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2201      	movs	r2, #1
 800ee92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4619      	mov	r1, r3
 800eeae:	f001 f891 	bl	800ffd4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800eeb2:	bf00      	nop
}
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800eeba:	b480      	push	{r7}
 800eebc:	b083      	sub	sp, #12
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800eeca:	bf00      	nop
}
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b082      	sub	sp, #8
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	f001 f861 	bl	800ffd4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f003 fbaa 	bl	8012696 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	791b      	ldrb	r3, [r3, #4]
 800ef46:	4619      	mov	r1, r3
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 fecf 	bl	800fcec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	795b      	ldrb	r3, [r3, #5]
 800ef52:	4619      	mov	r1, r3
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fec9 	bl	800fcec <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef6e:	2200      	movs	r2, #0
 800ef70:	4619      	mov	r1, r3
 800ef72:	f001 f82f 	bl	800ffd4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ef76:	2300      	movs	r3, #0
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800ef8e:	f107 030c 	add.w	r3, r7, #12
 800ef92:	f04f 32ff 	mov.w	r2, #4294967295
 800ef96:	4618      	mov	r0, r3
 800ef98:	f001 f85c 	bl	8010054 <osMessageGet>
    if (event.status == osEventMessage)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2b10      	cmp	r3, #16
 800efa0:	d1f2      	bne.n	800ef88 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f7ff faa8 	bl	800e4f8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800efa8:	e7ee      	b.n	800ef88 <USBH_Process_OS+0x8>

0800efaa <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b082      	sub	sp, #8
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800efc6:	2200      	movs	r2, #0
 800efc8:	4619      	mov	r1, r3
 800efca:	f001 f803 	bl	800ffd4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af02      	add	r7, sp, #8
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	460b      	mov	r3, r1
 800efe2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800efea:	78fb      	ldrb	r3, [r7, #3]
 800efec:	b29b      	uxth	r3, r3
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	4613      	mov	r3, r2
 800eff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eff6:	2100      	movs	r1, #0
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f864 	bl	800f0c6 <USBH_GetDescriptor>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10a      	bne.n	800f01e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f014:	78fa      	ldrb	r2, [r7, #3]
 800f016:	b292      	uxth	r2, r2
 800f018:	4619      	mov	r1, r3
 800f01a:	f000 f918 	bl	800f24e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af02      	add	r7, sp, #8
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	331c      	adds	r3, #28
 800f038:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f03a:	887b      	ldrh	r3, [r7, #2]
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f044:	2100      	movs	r1, #0
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 f83d 	bl	800f0c6 <USBH_GetDescriptor>
 800f04c:	4603      	mov	r3, r0
 800f04e:	72fb      	strb	r3, [r7, #11]
 800f050:	7afb      	ldrb	r3, [r7, #11]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d107      	bne.n	800f066 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f05c:	887a      	ldrh	r2, [r7, #2]
 800f05e:	68f9      	ldr	r1, [r7, #12]
 800f060:	4618      	mov	r0, r3
 800f062:	f000 f964 	bl	800f32e <USBH_ParseCfgDesc>
  }

  return status;
 800f066:	7afb      	ldrb	r3, [r7, #11]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b088      	sub	sp, #32
 800f074:	af02      	add	r7, sp, #8
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	607a      	str	r2, [r7, #4]
 800f07a:	461a      	mov	r2, r3
 800f07c:	460b      	mov	r3, r1
 800f07e:	72fb      	strb	r3, [r7, #11]
 800f080:	4613      	mov	r3, r2
 800f082:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f084:	7afb      	ldrb	r3, [r7, #11]
 800f086:	b29b      	uxth	r3, r3
 800f088:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f08c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f094:	893b      	ldrh	r3, [r7, #8]
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	460b      	mov	r3, r1
 800f09a:	2100      	movs	r1, #0
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f000 f812 	bl	800f0c6 <USBH_GetDescriptor>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	75fb      	strb	r3, [r7, #23]
 800f0a6:	7dfb      	ldrb	r3, [r7, #23]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d107      	bne.n	800f0bc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f0b2:	893a      	ldrh	r2, [r7, #8]
 800f0b4:	6879      	ldr	r1, [r7, #4]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 fa37 	bl	800f52a <USBH_ParseStringDesc>
  }

  return status;
 800f0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	60f8      	str	r0, [r7, #12]
 800f0ce:	607b      	str	r3, [r7, #4]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	72fb      	strb	r3, [r7, #11]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	789b      	ldrb	r3, [r3, #2]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d11c      	bne.n	800f11a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f0e0:	7afb      	ldrb	r3, [r7, #11]
 800f0e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0e6:	b2da      	uxtb	r2, r3
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2206      	movs	r2, #6
 800f0f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	893a      	ldrh	r2, [r7, #8]
 800f0f6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f0f8:	893b      	ldrh	r3, [r7, #8]
 800f0fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f0fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f102:	d104      	bne.n	800f10e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f240 4209 	movw	r2, #1033	; 0x409
 800f10a:	829a      	strh	r2, [r3, #20]
 800f10c:	e002      	b.n	800f114 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	8b3a      	ldrh	r2, [r7, #24]
 800f118:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f11a:	8b3b      	ldrh	r3, [r7, #24]
 800f11c:	461a      	mov	r2, r3
 800f11e:	6879      	ldr	r1, [r7, #4]
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 fa50 	bl	800f5c6 <USBH_CtlReq>
 800f126:	4603      	mov	r3, r0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	460b      	mov	r3, r1
 800f13a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	789b      	ldrb	r3, [r3, #2]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d10f      	bne.n	800f164 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2205      	movs	r2, #5
 800f14e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f150:	78fb      	ldrb	r3, [r7, #3]
 800f152:	b29a      	uxth	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f164:	2200      	movs	r2, #0
 800f166:	2100      	movs	r1, #0
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fa2c 	bl	800f5c6 <USBH_CtlReq>
 800f16e:	4603      	mov	r3, r0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	460b      	mov	r3, r1
 800f182:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	789b      	ldrb	r3, [r3, #2]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d10e      	bne.n	800f1aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2209      	movs	r2, #9
 800f196:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	887a      	ldrh	r2, [r7, #2]
 800f19c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fa09 	bl	800f5c6 <USBH_CtlReq>
 800f1b4:	4603      	mov	r3, r0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b082      	sub	sp, #8
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	789b      	ldrb	r3, [r3, #2]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d10f      	bne.n	800f1f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2203      	movs	r2, #3
 800f1dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f1de:	78fb      	ldrb	r3, [r7, #3]
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 f9e5 	bl	800f5c6 <USBH_CtlReq>
 800f1fc:	4603      	mov	r3, r0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b082      	sub	sp, #8
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	460b      	mov	r3, r1
 800f210:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	789b      	ldrb	r3, [r3, #2]
 800f216:	2b01      	cmp	r3, #1
 800f218:	d10f      	bne.n	800f23a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2202      	movs	r2, #2
 800f21e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2201      	movs	r2, #1
 800f224:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f22c:	78fb      	ldrb	r3, [r7, #3]
 800f22e:	b29a      	uxth	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f23a:	2200      	movs	r2, #0
 800f23c:	2100      	movs	r1, #0
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 f9c1 	bl	800f5c6 <USBH_CtlReq>
 800f244:	4603      	mov	r3, r0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f24e:	b480      	push	{r7}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	60f8      	str	r0, [r7, #12]
 800f256:	60b9      	str	r1, [r7, #8]
 800f258:	4613      	mov	r3, r2
 800f25a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	781a      	ldrb	r2, [r3, #0]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	785a      	ldrb	r2, [r3, #1]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	3302      	adds	r3, #2
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	b29a      	uxth	r2, r3
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	3303      	adds	r3, #3
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	021b      	lsls	r3, r3, #8
 800f27e:	b29b      	uxth	r3, r3
 800f280:	4313      	orrs	r3, r2
 800f282:	b29a      	uxth	r2, r3
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	791a      	ldrb	r2, [r3, #4]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	795a      	ldrb	r2, [r3, #5]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	799a      	ldrb	r2, [r3, #6]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	79da      	ldrb	r2, [r3, #7]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f2a8:	88fb      	ldrh	r3, [r7, #6]
 800f2aa:	2b08      	cmp	r3, #8
 800f2ac:	d939      	bls.n	800f322 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	3308      	adds	r3, #8
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	b29a      	uxth	r2, r3
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	3309      	adds	r3, #9
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	021b      	lsls	r3, r3, #8
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	330a      	adds	r3, #10
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	330b      	adds	r3, #11
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	021b      	lsls	r3, r3, #8
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	330c      	adds	r3, #12
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	330d      	adds	r3, #13
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	021b      	lsls	r3, r3, #8
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	7b9a      	ldrb	r2, [r3, #14]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	7bda      	ldrb	r2, [r3, #15]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	7c1a      	ldrb	r2, [r3, #16]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	7c5a      	ldrb	r2, [r3, #17]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	745a      	strb	r2, [r3, #17]
  }
}
 800f322:	bf00      	nop
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b08a      	sub	sp, #40	; 0x28
 800f332:	af00      	add	r7, sp, #0
 800f334:	60f8      	str	r0, [r7, #12]
 800f336:	60b9      	str	r1, [r7, #8]
 800f338:	4613      	mov	r3, r2
 800f33a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f340:	2300      	movs	r3, #0
 800f342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f346:	2300      	movs	r3, #0
 800f348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	781a      	ldrb	r2, [r3, #0]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	785a      	ldrb	r2, [r3, #1]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	3302      	adds	r3, #2
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	b29a      	uxth	r2, r3
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	3303      	adds	r3, #3
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	021b      	lsls	r3, r3, #8
 800f372:	b29b      	uxth	r3, r3
 800f374:	4313      	orrs	r3, r2
 800f376:	b29a      	uxth	r2, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	791a      	ldrb	r2, [r3, #4]
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	795a      	ldrb	r2, [r3, #5]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	799a      	ldrb	r2, [r3, #6]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	79da      	ldrb	r2, [r3, #7]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	7a1a      	ldrb	r2, [r3, #8]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f3a4:	88fb      	ldrh	r3, [r7, #6]
 800f3a6:	2b09      	cmp	r3, #9
 800f3a8:	d95f      	bls.n	800f46a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f3aa:	2309      	movs	r3, #9
 800f3ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f3b2:	e051      	b.n	800f458 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f3b4:	f107 0316 	add.w	r3, r7, #22
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3bc:	f000 f8e8 	bl	800f590 <USBH_GetNextDesc>
 800f3c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	785b      	ldrb	r3, [r3, #1]
 800f3c6:	2b04      	cmp	r3, #4
 800f3c8:	d146      	bne.n	800f458 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f3ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f3ce:	221a      	movs	r2, #26
 800f3d0:	fb02 f303 	mul.w	r3, r2, r3
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	4413      	add	r3, r2
 800f3da:	3302      	adds	r3, #2
 800f3dc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f3de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3e0:	69f8      	ldr	r0, [r7, #28]
 800f3e2:	f000 f846 	bl	800f472 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f3f0:	e022      	b.n	800f438 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f3f2:	f107 0316 	add.w	r3, r7, #22
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3fa:	f000 f8c9 	bl	800f590 <USBH_GetNextDesc>
 800f3fe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f402:	785b      	ldrb	r3, [r3, #1]
 800f404:	2b05      	cmp	r3, #5
 800f406:	d117      	bne.n	800f438 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f40c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f410:	3201      	adds	r2, #1
 800f412:	00d2      	lsls	r2, r2, #3
 800f414:	211a      	movs	r1, #26
 800f416:	fb01 f303 	mul.w	r3, r1, r3
 800f41a:	4413      	add	r3, r2
 800f41c:	3308      	adds	r3, #8
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	4413      	add	r3, r2
 800f422:	3304      	adds	r3, #4
 800f424:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f428:	69b8      	ldr	r0, [r7, #24]
 800f42a:	f000 f851 	bl	800f4d0 <USBH_ParseEPDesc>
            ep_ix++;
 800f42e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f432:	3301      	adds	r3, #1
 800f434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	791b      	ldrb	r3, [r3, #4]
 800f43c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f440:	429a      	cmp	r2, r3
 800f442:	d204      	bcs.n	800f44e <USBH_ParseCfgDesc+0x120>
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	885a      	ldrh	r2, [r3, #2]
 800f448:	8afb      	ldrh	r3, [r7, #22]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d8d1      	bhi.n	800f3f2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f44e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f452:	3301      	adds	r3, #1
 800f454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d804      	bhi.n	800f46a <USBH_ParseCfgDesc+0x13c>
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	885a      	ldrh	r2, [r3, #2]
 800f464:	8afb      	ldrh	r3, [r7, #22]
 800f466:	429a      	cmp	r2, r3
 800f468:	d8a4      	bhi.n	800f3b4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f46a:	bf00      	nop
 800f46c:	3728      	adds	r7, #40	; 0x28
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	781a      	ldrb	r2, [r3, #0]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	785a      	ldrb	r2, [r3, #1]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	789a      	ldrb	r2, [r3, #2]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	78da      	ldrb	r2, [r3, #3]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	791a      	ldrb	r2, [r3, #4]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	795a      	ldrb	r2, [r3, #5]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	799a      	ldrb	r2, [r3, #6]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	79da      	ldrb	r2, [r3, #7]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	7a1a      	ldrb	r2, [r3, #8]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	721a      	strb	r2, [r3, #8]
}
 800f4c4:	bf00      	nop
 800f4c6:	370c      	adds	r7, #12
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr

0800f4d0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	781a      	ldrb	r2, [r3, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	785a      	ldrb	r2, [r3, #1]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	789a      	ldrb	r2, [r3, #2]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	78da      	ldrb	r2, [r3, #3]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	b29a      	uxth	r2, r3
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	3305      	adds	r3, #5
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	b29b      	uxth	r3, r3
 800f50a:	021b      	lsls	r3, r3, #8
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	4313      	orrs	r3, r2
 800f510:	b29a      	uxth	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	799a      	ldrb	r2, [r3, #6]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	719a      	strb	r2, [r3, #6]
}
 800f51e:	bf00      	nop
 800f520:	370c      	adds	r7, #12
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr

0800f52a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f52a:	b480      	push	{r7}
 800f52c:	b087      	sub	sp, #28
 800f52e:	af00      	add	r7, sp, #0
 800f530:	60f8      	str	r0, [r7, #12]
 800f532:	60b9      	str	r1, [r7, #8]
 800f534:	4613      	mov	r3, r2
 800f536:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	3301      	adds	r3, #1
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	2b03      	cmp	r3, #3
 800f540:	d120      	bne.n	800f584 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	1e9a      	subs	r2, r3, #2
 800f548:	88fb      	ldrh	r3, [r7, #6]
 800f54a:	4293      	cmp	r3, r2
 800f54c:	bf28      	it	cs
 800f54e:	4613      	movcs	r3, r2
 800f550:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	3302      	adds	r3, #2
 800f556:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f558:	2300      	movs	r3, #0
 800f55a:	82fb      	strh	r3, [r7, #22]
 800f55c:	e00b      	b.n	800f576 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f55e:	8afb      	ldrh	r3, [r7, #22]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	4413      	add	r3, r2
 800f564:	781a      	ldrb	r2, [r3, #0]
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	3301      	adds	r3, #1
 800f56e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f570:	8afb      	ldrh	r3, [r7, #22]
 800f572:	3302      	adds	r3, #2
 800f574:	82fb      	strh	r3, [r7, #22]
 800f576:	8afa      	ldrh	r2, [r7, #22]
 800f578:	8abb      	ldrh	r3, [r7, #20]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d3ef      	bcc.n	800f55e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	2200      	movs	r2, #0
 800f582:	701a      	strb	r2, [r3, #0]
  }
}
 800f584:	bf00      	nop
 800f586:	371c      	adds	r7, #28
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f590:	b480      	push	{r7}
 800f592:	b085      	sub	sp, #20
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	881a      	ldrh	r2, [r3, #0]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	4413      	add	r3, r2
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3714      	adds	r7, #20
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b086      	sub	sp, #24
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	60f8      	str	r0, [r7, #12]
 800f5ce:	60b9      	str	r1, [r7, #8]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	789b      	ldrb	r3, [r3, #2]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d002      	beq.n	800f5e6 <USBH_CtlReq+0x20>
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	d01d      	beq.n	800f620 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f5e4:	e043      	b.n	800f66e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	68ba      	ldr	r2, [r7, #8]
 800f5ea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	88fa      	ldrh	r2, [r7, #6]
 800f5f0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2202      	movs	r2, #2
 800f5fc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f5fe:	2301      	movs	r3, #1
 800f600:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2203      	movs	r2, #3
 800f606:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f616:	2200      	movs	r2, #0
 800f618:	4619      	mov	r1, r3
 800f61a:	f000 fcdb 	bl	800ffd4 <osMessagePut>
      break;
 800f61e:	e026      	b.n	800f66e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f000 f829 	bl	800f678 <USBH_HandleControl>
 800f626:	4603      	mov	r3, r0
 800f628:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <USBH_CtlReq+0x70>
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	2b03      	cmp	r3, #3
 800f634:	d106      	bne.n	800f644 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2201      	movs	r2, #1
 800f63a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2200      	movs	r2, #0
 800f640:	761a      	strb	r2, [r3, #24]
 800f642:	e005      	b.n	800f650 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f644:	7dfb      	ldrb	r3, [r7, #23]
 800f646:	2b02      	cmp	r3, #2
 800f648:	d102      	bne.n	800f650 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2201      	movs	r2, #1
 800f64e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2203      	movs	r2, #3
 800f654:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f664:	2200      	movs	r2, #0
 800f666:	4619      	mov	r1, r3
 800f668:	f000 fcb4 	bl	800ffd4 <osMessagePut>
      break;
 800f66c:	bf00      	nop
  }
  return status;
 800f66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3718      	adds	r7, #24
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af02      	add	r7, sp, #8
 800f67e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f680:	2301      	movs	r3, #1
 800f682:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f684:	2300      	movs	r3, #0
 800f686:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	7e1b      	ldrb	r3, [r3, #24]
 800f68c:	3b01      	subs	r3, #1
 800f68e:	2b0a      	cmp	r3, #10
 800f690:	f200 822b 	bhi.w	800faea <USBH_HandleControl+0x472>
 800f694:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <USBH_HandleControl+0x24>)
 800f696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69a:	bf00      	nop
 800f69c:	0800f6c9 	.word	0x0800f6c9
 800f6a0:	0800f6e3 	.word	0x0800f6e3
 800f6a4:	0800f785 	.word	0x0800f785
 800f6a8:	0800f7ab 	.word	0x0800f7ab
 800f6ac:	0800f837 	.word	0x0800f837
 800f6b0:	0800f863 	.word	0x0800f863
 800f6b4:	0800f925 	.word	0x0800f925
 800f6b8:	0800f947 	.word	0x0800f947
 800f6bc:	0800f9d9 	.word	0x0800f9d9
 800f6c0:	0800fa01 	.word	0x0800fa01
 800f6c4:	0800fa93 	.word	0x0800fa93
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f103 0110 	add.w	r1, r3, #16
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	795b      	ldrb	r3, [r3, #5]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 fa19 	bl	800fb0c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2202      	movs	r2, #2
 800f6de:	761a      	strb	r2, [r3, #24]
      break;
 800f6e0:	e20e      	b.n	800fb00 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	795b      	ldrb	r3, [r3, #5]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f003 f8c1 	bl	8012870 <USBH_LL_GetURBState>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f6f2:	7bbb      	ldrb	r3, [r7, #14]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d12c      	bne.n	800f752 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	7c1b      	ldrb	r3, [r3, #16]
 800f6fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f700:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	8adb      	ldrh	r3, [r3, #22]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00a      	beq.n	800f720 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f70a:	7b7b      	ldrb	r3, [r7, #13]
 800f70c:	2b80      	cmp	r3, #128	; 0x80
 800f70e:	d103      	bne.n	800f718 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2203      	movs	r2, #3
 800f714:	761a      	strb	r2, [r3, #24]
 800f716:	e00d      	b.n	800f734 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2205      	movs	r2, #5
 800f71c:	761a      	strb	r2, [r3, #24]
 800f71e:	e009      	b.n	800f734 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f720:	7b7b      	ldrb	r3, [r7, #13]
 800f722:	2b80      	cmp	r3, #128	; 0x80
 800f724:	d103      	bne.n	800f72e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2209      	movs	r2, #9
 800f72a:	761a      	strb	r2, [r3, #24]
 800f72c:	e002      	b.n	800f734 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2207      	movs	r2, #7
 800f732:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2203      	movs	r2, #3
 800f738:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f748:	2200      	movs	r2, #0
 800f74a:	4619      	mov	r1, r3
 800f74c:	f000 fc42 	bl	800ffd4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f750:	e1cd      	b.n	800faee <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f752:	7bbb      	ldrb	r3, [r7, #14]
 800f754:	2b04      	cmp	r3, #4
 800f756:	d003      	beq.n	800f760 <USBH_HandleControl+0xe8>
 800f758:	7bbb      	ldrb	r3, [r7, #14]
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	f040 81c7 	bne.w	800faee <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	220b      	movs	r2, #11
 800f764:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2203      	movs	r2, #3
 800f76a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f77a:	2200      	movs	r2, #0
 800f77c:	4619      	mov	r1, r3
 800f77e:	f000 fc29 	bl	800ffd4 <osMessagePut>
      break;
 800f782:	e1b4      	b.n	800faee <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6899      	ldr	r1, [r3, #8]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	899a      	ldrh	r2, [r3, #12]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	791b      	ldrb	r3, [r3, #4]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f9f4 	bl	800fb8a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2204      	movs	r2, #4
 800f7a6:	761a      	strb	r2, [r3, #24]
      break;
 800f7a8:	e1aa      	b.n	800fb00 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	791b      	ldrb	r3, [r3, #4]
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f003 f85d 	bl	8012870 <USBH_LL_GetURBState>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f7ba:	7bbb      	ldrb	r3, [r7, #14]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d110      	bne.n	800f7e2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2209      	movs	r2, #9
 800f7c4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2203      	movs	r2, #3
 800f7ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4619      	mov	r1, r3
 800f7de:	f000 fbf9 	bl	800ffd4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f7e2:	7bbb      	ldrb	r3, [r7, #14]
 800f7e4:	2b05      	cmp	r3, #5
 800f7e6:	d110      	bne.n	800f80a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f7e8:	2303      	movs	r3, #3
 800f7ea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2203      	movs	r2, #3
 800f7f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f800:	2200      	movs	r2, #0
 800f802:	4619      	mov	r1, r3
 800f804:	f000 fbe6 	bl	800ffd4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f808:	e173      	b.n	800faf2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f80a:	7bbb      	ldrb	r3, [r7, #14]
 800f80c:	2b04      	cmp	r3, #4
 800f80e:	f040 8170 	bne.w	800faf2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	220b      	movs	r2, #11
 800f816:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2203      	movs	r2, #3
 800f81c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f82c:	2200      	movs	r2, #0
 800f82e:	4619      	mov	r1, r3
 800f830:	f000 fbd0 	bl	800ffd4 <osMessagePut>
      break;
 800f834:	e15d      	b.n	800faf2 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6899      	ldr	r1, [r3, #8]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	899a      	ldrh	r2, [r3, #12]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	7958      	ldrb	r0, [r3, #5]
 800f842:	2301      	movs	r3, #1
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	4603      	mov	r3, r0
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 f979 	bl	800fb40 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f854:	b29a      	uxth	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2206      	movs	r2, #6
 800f85e:	761a      	strb	r2, [r3, #24]
      break;
 800f860:	e14e      	b.n	800fb00 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	795b      	ldrb	r3, [r3, #5]
 800f866:	4619      	mov	r1, r3
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f003 f801 	bl	8012870 <USBH_LL_GetURBState>
 800f86e:	4603      	mov	r3, r0
 800f870:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f872:	7bbb      	ldrb	r3, [r7, #14]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d111      	bne.n	800f89c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2207      	movs	r2, #7
 800f87c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2203      	movs	r2, #3
 800f882:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f892:	2200      	movs	r2, #0
 800f894:	4619      	mov	r1, r3
 800f896:	f000 fb9d 	bl	800ffd4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f89a:	e12c      	b.n	800faf6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800f89c:	7bbb      	ldrb	r3, [r7, #14]
 800f89e:	2b05      	cmp	r3, #5
 800f8a0:	d113      	bne.n	800f8ca <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	220c      	movs	r2, #12
 800f8a6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f8a8:	2303      	movs	r3, #3
 800f8aa:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	f000 fb86 	bl	800ffd4 <osMessagePut>
      break;
 800f8c8:	e115      	b.n	800faf6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f8ca:	7bbb      	ldrb	r3, [r7, #14]
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d111      	bne.n	800f8f4 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2205      	movs	r2, #5
 800f8d4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2203      	movs	r2, #3
 800f8da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	f000 fb71 	bl	800ffd4 <osMessagePut>
      break;
 800f8f2:	e100      	b.n	800faf6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800f8f4:	7bbb      	ldrb	r3, [r7, #14]
 800f8f6:	2b04      	cmp	r3, #4
 800f8f8:	f040 80fd 	bne.w	800faf6 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	220b      	movs	r2, #11
 800f900:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f902:	2302      	movs	r3, #2
 800f904:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2203      	movs	r2, #3
 800f90a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f91a:	2200      	movs	r2, #0
 800f91c:	4619      	mov	r1, r3
 800f91e:	f000 fb59 	bl	800ffd4 <osMessagePut>
      break;
 800f922:	e0e8      	b.n	800faf6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	791b      	ldrb	r3, [r3, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	2100      	movs	r1, #0
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 f92c 	bl	800fb8a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f938:	b29a      	uxth	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2208      	movs	r2, #8
 800f942:	761a      	strb	r2, [r3, #24]

      break;
 800f944:	e0dc      	b.n	800fb00 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	791b      	ldrb	r3, [r3, #4]
 800f94a:	4619      	mov	r1, r3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f002 ff8f 	bl	8012870 <USBH_LL_GetURBState>
 800f952:	4603      	mov	r3, r0
 800f954:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f956:	7bbb      	ldrb	r3, [r7, #14]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d113      	bne.n	800f984 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	220d      	movs	r2, #13
 800f960:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f962:	2300      	movs	r3, #0
 800f964:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2203      	movs	r2, #3
 800f96a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f97a:	2200      	movs	r2, #0
 800f97c:	4619      	mov	r1, r3
 800f97e:	f000 fb29 	bl	800ffd4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f982:	e0ba      	b.n	800fafa <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800f984:	7bbb      	ldrb	r3, [r7, #14]
 800f986:	2b04      	cmp	r3, #4
 800f988:	d111      	bne.n	800f9ae <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	220b      	movs	r2, #11
 800f98e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2203      	movs	r2, #3
 800f994:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	f000 fb14 	bl	800ffd4 <osMessagePut>
      break;
 800f9ac:	e0a5      	b.n	800fafa <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800f9ae:	7bbb      	ldrb	r3, [r7, #14]
 800f9b0:	2b05      	cmp	r3, #5
 800f9b2:	f040 80a2 	bne.w	800fafa <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800f9b6:	2303      	movs	r3, #3
 800f9b8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2203      	movs	r2, #3
 800f9be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	f000 faff 	bl	800ffd4 <osMessagePut>
      break;
 800f9d6:	e090      	b.n	800fafa <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	795a      	ldrb	r2, [r3, #5]
 800f9dc:	2301      	movs	r3, #1
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	4613      	mov	r3, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f8aa 	bl	800fb40 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	220a      	movs	r2, #10
 800f9fc:	761a      	strb	r2, [r3, #24]
      break;
 800f9fe:	e07f      	b.n	800fb00 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	795b      	ldrb	r3, [r3, #5]
 800fa04:	4619      	mov	r1, r3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f002 ff32 	bl	8012870 <USBH_LL_GetURBState>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fa10:	7bbb      	ldrb	r3, [r7, #14]
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d113      	bne.n	800fa3e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800fa16:	2300      	movs	r3, #0
 800fa18:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	220d      	movs	r2, #13
 800fa1e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2203      	movs	r2, #3
 800fa24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa34:	2200      	movs	r2, #0
 800fa36:	4619      	mov	r1, r3
 800fa38:	f000 facc 	bl	800ffd4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fa3c:	e05f      	b.n	800fafe <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fa3e:	7bbb      	ldrb	r3, [r7, #14]
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d111      	bne.n	800fa68 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2209      	movs	r2, #9
 800fa48:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2203      	movs	r2, #3
 800fa4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa5e:	2200      	movs	r2, #0
 800fa60:	4619      	mov	r1, r3
 800fa62:	f000 fab7 	bl	800ffd4 <osMessagePut>
      break;
 800fa66:	e04a      	b.n	800fafe <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800fa68:	7bbb      	ldrb	r3, [r7, #14]
 800fa6a:	2b04      	cmp	r3, #4
 800fa6c:	d147      	bne.n	800fafe <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	220b      	movs	r2, #11
 800fa72:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2203      	movs	r2, #3
 800fa78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa88:	2200      	movs	r2, #0
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	f000 faa2 	bl	800ffd4 <osMessagePut>
      break;
 800fa90:	e035      	b.n	800fafe <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	7e5b      	ldrb	r3, [r3, #25]
 800fa96:	3301      	adds	r3, #1
 800fa98:	b2da      	uxtb	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	765a      	strb	r2, [r3, #25]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	7e5b      	ldrb	r3, [r3, #25]
 800faa2:	2b02      	cmp	r3, #2
 800faa4:	d806      	bhi.n	800fab4 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fab2:	e025      	b.n	800fb00 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800faba:	2106      	movs	r1, #6
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	795b      	ldrb	r3, [r3, #5]
 800faca:	4619      	mov	r1, r3
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 f90d 	bl	800fcec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	791b      	ldrb	r3, [r3, #4]
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f907 	bl	800fcec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fae4:	2302      	movs	r3, #2
 800fae6:	73fb      	strb	r3, [r7, #15]
      break;
 800fae8:	e00a      	b.n	800fb00 <USBH_HandleControl+0x488>

    default:
      break;
 800faea:	bf00      	nop
 800faec:	e008      	b.n	800fb00 <USBH_HandleControl+0x488>
      break;
 800faee:	bf00      	nop
 800faf0:	e006      	b.n	800fb00 <USBH_HandleControl+0x488>
      break;
 800faf2:	bf00      	nop
 800faf4:	e004      	b.n	800fb00 <USBH_HandleControl+0x488>
      break;
 800faf6:	bf00      	nop
 800faf8:	e002      	b.n	800fb00 <USBH_HandleControl+0x488>
      break;
 800fafa:	bf00      	nop
 800fafc:	e000      	b.n	800fb00 <USBH_HandleControl+0x488>
      break;
 800fafe:	bf00      	nop
  }

  return status;
 800fb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop

0800fb0c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b088      	sub	sp, #32
 800fb10:	af04      	add	r7, sp, #16
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4613      	mov	r3, r2
 800fb18:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb1a:	79f9      	ldrb	r1, [r7, #7]
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	9303      	str	r3, [sp, #12]
 800fb20:	2308      	movs	r3, #8
 800fb22:	9302      	str	r3, [sp, #8]
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	9301      	str	r3, [sp, #4]
 800fb28:	2300      	movs	r3, #0
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	2200      	movs	r2, #0
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f002 fe6c 	bl	801280e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b088      	sub	sp, #32
 800fb44:	af04      	add	r7, sp, #16
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	460b      	mov	r3, r1
 800fb50:	80fb      	strh	r3, [r7, #6]
 800fb52:	4613      	mov	r3, r2
 800fb54:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fb60:	2300      	movs	r3, #0
 800fb62:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb64:	7979      	ldrb	r1, [r7, #5]
 800fb66:	7e3b      	ldrb	r3, [r7, #24]
 800fb68:	9303      	str	r3, [sp, #12]
 800fb6a:	88fb      	ldrh	r3, [r7, #6]
 800fb6c:	9302      	str	r3, [sp, #8]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	9301      	str	r3, [sp, #4]
 800fb72:	2301      	movs	r3, #1
 800fb74:	9300      	str	r3, [sp, #0]
 800fb76:	2300      	movs	r3, #0
 800fb78:	2200      	movs	r2, #0
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f002 fe47 	bl	801280e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b088      	sub	sp, #32
 800fb8e:	af04      	add	r7, sp, #16
 800fb90:	60f8      	str	r0, [r7, #12]
 800fb92:	60b9      	str	r1, [r7, #8]
 800fb94:	4611      	mov	r1, r2
 800fb96:	461a      	mov	r2, r3
 800fb98:	460b      	mov	r3, r1
 800fb9a:	80fb      	strh	r3, [r7, #6]
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fba0:	7979      	ldrb	r1, [r7, #5]
 800fba2:	2300      	movs	r3, #0
 800fba4:	9303      	str	r3, [sp, #12]
 800fba6:	88fb      	ldrh	r3, [r7, #6]
 800fba8:	9302      	str	r3, [sp, #8]
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	9301      	str	r3, [sp, #4]
 800fbae:	2301      	movs	r3, #1
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	f002 fe29 	bl	801280e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fbbc:	2300      	movs	r3, #0

}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fbc6:	b580      	push	{r7, lr}
 800fbc8:	b088      	sub	sp, #32
 800fbca:	af04      	add	r7, sp, #16
 800fbcc:	60f8      	str	r0, [r7, #12]
 800fbce:	60b9      	str	r1, [r7, #8]
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	80fb      	strh	r3, [r7, #6]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d001      	beq.n	800fbea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fbea:	7979      	ldrb	r1, [r7, #5]
 800fbec:	7e3b      	ldrb	r3, [r7, #24]
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	88fb      	ldrh	r3, [r7, #6]
 800fbf2:	9302      	str	r3, [sp, #8]
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	9301      	str	r3, [sp, #4]
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f002 fe04 	bl	801280e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fc06:	2300      	movs	r3, #0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b088      	sub	sp, #32
 800fc14:	af04      	add	r7, sp, #16
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	460b      	mov	r3, r1
 800fc20:	80fb      	strh	r3, [r7, #6]
 800fc22:	4613      	mov	r3, r2
 800fc24:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc26:	7979      	ldrb	r1, [r7, #5]
 800fc28:	2300      	movs	r3, #0
 800fc2a:	9303      	str	r3, [sp, #12]
 800fc2c:	88fb      	ldrh	r3, [r7, #6]
 800fc2e:	9302      	str	r3, [sp, #8]
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	9301      	str	r3, [sp, #4]
 800fc34:	2301      	movs	r3, #1
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	2302      	movs	r3, #2
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f002 fde6 	bl	801280e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fc42:	2300      	movs	r3, #0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af04      	add	r7, sp, #16
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	4608      	mov	r0, r1
 800fc56:	4611      	mov	r1, r2
 800fc58:	461a      	mov	r2, r3
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	70fb      	strb	r3, [r7, #3]
 800fc5e:	460b      	mov	r3, r1
 800fc60:	70bb      	strb	r3, [r7, #2]
 800fc62:	4613      	mov	r3, r2
 800fc64:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fc66:	7878      	ldrb	r0, [r7, #1]
 800fc68:	78ba      	ldrb	r2, [r7, #2]
 800fc6a:	78f9      	ldrb	r1, [r7, #3]
 800fc6c:	8b3b      	ldrh	r3, [r7, #24]
 800fc6e:	9302      	str	r3, [sp, #8]
 800fc70:	7d3b      	ldrb	r3, [r7, #20]
 800fc72:	9301      	str	r3, [sp, #4]
 800fc74:	7c3b      	ldrb	r3, [r7, #16]
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	4603      	mov	r3, r0
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f002 fd79 	bl	8012772 <USBH_LL_OpenPipe>

  return USBH_OK;
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
 800fc92:	460b      	mov	r3, r1
 800fc94:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fc96:	78fb      	ldrb	r3, [r7, #3]
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f002 fd98 	bl	80127d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}

0800fcaa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fcaa:	b580      	push	{r7, lr}
 800fcac:	b084      	sub	sp, #16
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 f836 	bl	800fd28 <USBH_GetFreePipe>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fcc0:	89fb      	ldrh	r3, [r7, #14]
 800fcc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d00a      	beq.n	800fce0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fcca:	78fa      	ldrb	r2, [r7, #3]
 800fccc:	89fb      	ldrh	r3, [r7, #14]
 800fcce:	f003 030f 	and.w	r3, r3, #15
 800fcd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fcd6:	6879      	ldr	r1, [r7, #4]
 800fcd8:	33e0      	adds	r3, #224	; 0xe0
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	440b      	add	r3, r1
 800fcde:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fce0:	89fb      	ldrh	r3, [r7, #14]
 800fce2:	b2db      	uxtb	r3, r3
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3710      	adds	r7, #16
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fcf8:	78fb      	ldrb	r3, [r7, #3]
 800fcfa:	2b0a      	cmp	r3, #10
 800fcfc:	d80d      	bhi.n	800fd1a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fcfe:	78fb      	ldrb	r3, [r7, #3]
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	33e0      	adds	r3, #224	; 0xe0
 800fd04:	009b      	lsls	r3, r3, #2
 800fd06:	4413      	add	r3, r2
 800fd08:	685a      	ldr	r2, [r3, #4]
 800fd0a:	78fb      	ldrb	r3, [r7, #3]
 800fd0c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fd10:	6879      	ldr	r1, [r7, #4]
 800fd12:	33e0      	adds	r3, #224	; 0xe0
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	440b      	add	r3, r1
 800fd18:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fd1a:	2300      	movs	r3, #0
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fd30:	2300      	movs	r3, #0
 800fd32:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800fd34:	2300      	movs	r3, #0
 800fd36:	73fb      	strb	r3, [r7, #15]
 800fd38:	e00f      	b.n	800fd5a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	33e0      	adds	r3, #224	; 0xe0
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	4413      	add	r3, r2
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d102      	bne.n	800fd54 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	e007      	b.n	800fd64 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	3301      	adds	r3, #1
 800fd58:	73fb      	strb	r3, [r7, #15]
 800fd5a:	7bfb      	ldrb	r3, [r7, #15]
 800fd5c:	2b0a      	cmp	r3, #10
 800fd5e:	d9ec      	bls.n	800fd3a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fd60:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3714      	adds	r7, #20
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b087      	sub	sp, #28
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fd86:	4b1f      	ldr	r3, [pc, #124]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fd88:	7a5b      	ldrb	r3, [r3, #9]
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d131      	bne.n	800fdf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fd90:	4b1c      	ldr	r3, [pc, #112]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fd92:	7a5b      	ldrb	r3, [r3, #9]
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	461a      	mov	r2, r3
 800fd98:	4b1a      	ldr	r3, [pc, #104]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fd9e:	4b19      	ldr	r3, [pc, #100]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fda0:	7a5b      	ldrb	r3, [r3, #9]
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	4a17      	ldr	r2, [pc, #92]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	68fa      	ldr	r2, [r7, #12]
 800fdac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fdae:	4b15      	ldr	r3, [pc, #84]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fdb0:	7a5b      	ldrb	r3, [r3, #9]
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	4b13      	ldr	r3, [pc, #76]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fdb8:	4413      	add	r3, r2
 800fdba:	79fa      	ldrb	r2, [r7, #7]
 800fdbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fdbe:	4b11      	ldr	r3, [pc, #68]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fdc0:	7a5b      	ldrb	r3, [r3, #9]
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	1c5a      	adds	r2, r3, #1
 800fdc6:	b2d1      	uxtb	r1, r2
 800fdc8:	4a0e      	ldr	r2, [pc, #56]	; (800fe04 <FATFS_LinkDriverEx+0x94>)
 800fdca:	7251      	strb	r1, [r2, #9]
 800fdcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fdce:	7dbb      	ldrb	r3, [r7, #22]
 800fdd0:	3330      	adds	r3, #48	; 0x30
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	3301      	adds	r3, #1
 800fddc:	223a      	movs	r2, #58	; 0x3a
 800fdde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	3302      	adds	r3, #2
 800fde4:	222f      	movs	r2, #47	; 0x2f
 800fde6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	3303      	adds	r3, #3
 800fdec:	2200      	movs	r2, #0
 800fdee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fdf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	371c      	adds	r7, #28
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	2000031c 	.word	0x2000031c

0800fe08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe12:	2200      	movs	r2, #0
 800fe14:	6839      	ldr	r1, [r7, #0]
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f7ff ffaa 	bl	800fd70 <FATFS_LinkDriverEx>
 800fe1c:	4603      	mov	r3, r0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fe26:	b480      	push	{r7}
 800fe28:	b085      	sub	sp, #20
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fe30:	2300      	movs	r3, #0
 800fe32:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fe34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe38:	2b84      	cmp	r3, #132	; 0x84
 800fe3a:	d005      	beq.n	800fe48 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fe3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4413      	add	r3, r2
 800fe44:	3303      	adds	r3, #3
 800fe46:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fe48:	68fb      	ldr	r3, [r7, #12]
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3714      	adds	r7, #20
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe54:	4770      	bx	lr

0800fe56 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fe56:	b480      	push	{r7}
 800fe58:	b083      	sub	sp, #12
 800fe5a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe5c:	f3ef 8305 	mrs	r3, IPSR
 800fe60:	607b      	str	r3, [r7, #4]
  return(result);
 800fe62:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	bf14      	ite	ne
 800fe68:	2301      	movne	r3, #1
 800fe6a:	2300      	moveq	r3, #0
 800fe6c:	b2db      	uxtb	r3, r3
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr

0800fe7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fe7e:	f001 f945 	bl	801110c <vTaskStartScheduler>
  
  return osOK;
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800fe8c:	f001 fd90 	bl	80119b0 <xTaskGetSchedulerState>
 800fe90:	4603      	mov	r3, r0
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d101      	bne.n	800fe9a <osKernelRunning+0x12>
    return 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	e000      	b.n	800fe9c <osKernelRunning+0x14>
  else
    return 1;
 800fe9a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fea4:	f7ff ffd7 	bl	800fe56 <inHandlerMode>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d003      	beq.n	800feb6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800feae:	f001 fa4b 	bl	8011348 <xTaskGetTickCountFromISR>
 800feb2:	4603      	mov	r3, r0
 800feb4:	e002      	b.n	800febc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800feb6:	f001 fa37 	bl	8011328 <xTaskGetTickCount>
 800feba:	4603      	mov	r3, r0
  }
}
 800febc:	4618      	mov	r0, r3
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fec2:	b089      	sub	sp, #36	; 0x24
 800fec4:	af04      	add	r7, sp, #16
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	695b      	ldr	r3, [r3, #20]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d020      	beq.n	800ff14 <osThreadCreate+0x54>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	699b      	ldr	r3, [r3, #24]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d01c      	beq.n	800ff14 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	685c      	ldr	r4, [r3, #4]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681d      	ldr	r5, [r3, #0]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	691e      	ldr	r6, [r3, #16]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800feec:	4618      	mov	r0, r3
 800feee:	f7ff ff9a 	bl	800fe26 <makeFreeRtosPriority>
 800fef2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	695b      	ldr	r3, [r3, #20]
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fefc:	9202      	str	r2, [sp, #8]
 800fefe:	9301      	str	r3, [sp, #4]
 800ff00:	9100      	str	r1, [sp, #0]
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	4632      	mov	r2, r6
 800ff06:	4629      	mov	r1, r5
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f000 ff26 	bl	8010d5a <xTaskCreateStatic>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	60fb      	str	r3, [r7, #12]
 800ff12:	e01c      	b.n	800ff4e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	685c      	ldr	r4, [r3, #4]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff20:	b29e      	uxth	r6, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7ff ff7c 	bl	800fe26 <makeFreeRtosPriority>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	f107 030c 	add.w	r3, r7, #12
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	9200      	str	r2, [sp, #0]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	4632      	mov	r2, r6
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f000 ff6b 	bl	8010e1a <xTaskCreate>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d001      	beq.n	800ff4e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	e000      	b.n	800ff50 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3714      	adds	r7, #20
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d001      	beq.n	800ff6e <osDelay+0x16>
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	e000      	b.n	800ff70 <osDelay+0x18>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	4618      	mov	r0, r3
 800ff72:	f001 f895 	bl	80110a0 <vTaskDelay>
  
  return osOK;
 800ff76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ff80:	b590      	push	{r4, r7, lr}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af02      	add	r7, sp, #8
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d012      	beq.n	800ffb8 <osMessageCreate+0x38>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00e      	beq.n	800ffb8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6818      	ldr	r0, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6859      	ldr	r1, [r3, #4]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	689a      	ldr	r2, [r3, #8]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	68dc      	ldr	r4, [r3, #12]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	9300      	str	r3, [sp, #0]
 800ffae:	4623      	mov	r3, r4
 800ffb0:	f000 f9e2 	bl	8010378 <xQueueGenericCreateStatic>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	e008      	b.n	800ffca <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6818      	ldr	r0, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	f000 fa55 	bl	8010472 <xQueueGenericCreate>
 800ffc8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	370c      	adds	r7, #12
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd90      	pop	{r4, r7, pc}
	...

0800ffd4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d101      	bne.n	800fff2 <osMessagePut+0x1e>
    ticks = 1;
 800ffee:	2301      	movs	r3, #1
 800fff0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fff2:	f7ff ff30 	bl	800fe56 <inHandlerMode>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d018      	beq.n	801002e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fffc:	f107 0210 	add.w	r2, r7, #16
 8010000:	f107 0108 	add.w	r1, r7, #8
 8010004:	2300      	movs	r3, #0
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f000 fb96 	bl	8010738 <xQueueGenericSendFromISR>
 801000c:	4603      	mov	r3, r0
 801000e:	2b01      	cmp	r3, #1
 8010010:	d001      	beq.n	8010016 <osMessagePut+0x42>
      return osErrorOS;
 8010012:	23ff      	movs	r3, #255	; 0xff
 8010014:	e018      	b.n	8010048 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d014      	beq.n	8010046 <osMessagePut+0x72>
 801001c:	4b0c      	ldr	r3, [pc, #48]	; (8010050 <osMessagePut+0x7c>)
 801001e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	e00b      	b.n	8010046 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801002e:	f107 0108 	add.w	r1, r7, #8
 8010032:	2300      	movs	r3, #0
 8010034:	697a      	ldr	r2, [r7, #20]
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	f000 fa7c 	bl	8010534 <xQueueGenericSend>
 801003c:	4603      	mov	r3, r0
 801003e:	2b01      	cmp	r3, #1
 8010040:	d001      	beq.n	8010046 <osMessagePut+0x72>
      return osErrorOS;
 8010042:	23ff      	movs	r3, #255	; 0xff
 8010044:	e000      	b.n	8010048 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	3718      	adds	r7, #24
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	e000ed04 	.word	0xe000ed04

08010054 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010054:	b590      	push	{r4, r7, lr}
 8010056:	b08b      	sub	sp, #44	; 0x2c
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010064:	2300      	movs	r3, #0
 8010066:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d10a      	bne.n	8010084 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801006e:	2380      	movs	r3, #128	; 0x80
 8010070:	617b      	str	r3, [r7, #20]
    return event;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	461c      	mov	r4, r3
 8010076:	f107 0314 	add.w	r3, r7, #20
 801007a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801007e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010082:	e054      	b.n	801012e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010084:	2300      	movs	r3, #0
 8010086:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010092:	d103      	bne.n	801009c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010094:	f04f 33ff 	mov.w	r3, #4294967295
 8010098:	627b      	str	r3, [r7, #36]	; 0x24
 801009a:	e009      	b.n	80100b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d006      	beq.n	80100b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80100a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d101      	bne.n	80100b0 <osMessageGet+0x5c>
      ticks = 1;
 80100ac:	2301      	movs	r3, #1
 80100ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80100b0:	f7ff fed1 	bl	800fe56 <inHandlerMode>
 80100b4:	4603      	mov	r3, r0
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d01c      	beq.n	80100f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80100ba:	f107 0220 	add.w	r2, r7, #32
 80100be:	f107 0314 	add.w	r3, r7, #20
 80100c2:	3304      	adds	r3, #4
 80100c4:	4619      	mov	r1, r3
 80100c6:	68b8      	ldr	r0, [r7, #8]
 80100c8:	f000 fcb4 	bl	8010a34 <xQueueReceiveFromISR>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d102      	bne.n	80100d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80100d2:	2310      	movs	r3, #16
 80100d4:	617b      	str	r3, [r7, #20]
 80100d6:	e001      	b.n	80100dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80100d8:	2300      	movs	r3, #0
 80100da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80100dc:	6a3b      	ldr	r3, [r7, #32]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d01d      	beq.n	801011e <osMessageGet+0xca>
 80100e2:	4b15      	ldr	r3, [pc, #84]	; (8010138 <osMessageGet+0xe4>)
 80100e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e8:	601a      	str	r2, [r3, #0]
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	f3bf 8f6f 	isb	sy
 80100f2:	e014      	b.n	801011e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80100f4:	f107 0314 	add.w	r3, r7, #20
 80100f8:	3304      	adds	r3, #4
 80100fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100fc:	4619      	mov	r1, r3
 80100fe:	68b8      	ldr	r0, [r7, #8]
 8010100:	f000 fbb6 	bl	8010870 <xQueueReceive>
 8010104:	4603      	mov	r3, r0
 8010106:	2b01      	cmp	r3, #1
 8010108:	d102      	bne.n	8010110 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801010a:	2310      	movs	r3, #16
 801010c:	617b      	str	r3, [r7, #20]
 801010e:	e006      	b.n	801011e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010112:	2b00      	cmp	r3, #0
 8010114:	d101      	bne.n	801011a <osMessageGet+0xc6>
 8010116:	2300      	movs	r3, #0
 8010118:	e000      	b.n	801011c <osMessageGet+0xc8>
 801011a:	2340      	movs	r3, #64	; 0x40
 801011c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	461c      	mov	r4, r3
 8010122:	f107 0314 	add.w	r3, r7, #20
 8010126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801012a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	372c      	adds	r7, #44	; 0x2c
 8010132:	46bd      	mov	sp, r7
 8010134:	bd90      	pop	{r4, r7, pc}
 8010136:	bf00      	nop
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f103 0208 	add.w	r2, r3, #8
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f04f 32ff 	mov.w	r2, #4294967295
 8010154:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f103 0208 	add.w	r2, r3, #8
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f103 0208 	add.w	r2, r3, #8
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010170:	bf00      	nop
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801018a:	bf00      	nop
 801018c:	370c      	adds	r7, #12
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr

08010196 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010196:	b480      	push	{r7}
 8010198:	b085      	sub	sp, #20
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
 801019e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	689a      	ldr	r2, [r3, #8]
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	683a      	ldr	r2, [r7, #0]
 80101ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	1c5a      	adds	r2, r3, #1
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	601a      	str	r2, [r3, #0]
}
 80101d2:	bf00      	nop
 80101d4:	3714      	adds	r7, #20
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr

080101de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101de:	b480      	push	{r7}
 80101e0:	b085      	sub	sp, #20
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
 80101e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f4:	d103      	bne.n	80101fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	691b      	ldr	r3, [r3, #16]
 80101fa:	60fb      	str	r3, [r7, #12]
 80101fc:	e00c      	b.n	8010218 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	3308      	adds	r3, #8
 8010202:	60fb      	str	r3, [r7, #12]
 8010204:	e002      	b.n	801020c <vListInsert+0x2e>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	60fb      	str	r3, [r7, #12]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	68ba      	ldr	r2, [r7, #8]
 8010214:	429a      	cmp	r2, r3
 8010216:	d2f6      	bcs.n	8010206 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	685a      	ldr	r2, [r3, #4]
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	683a      	ldr	r2, [r7, #0]
 8010226:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	683a      	ldr	r2, [r7, #0]
 8010232:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	1c5a      	adds	r2, r3, #1
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	601a      	str	r2, [r3, #0]
}
 8010244:	bf00      	nop
 8010246:	3714      	adds	r7, #20
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr

08010250 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010250:	b480      	push	{r7}
 8010252:	b085      	sub	sp, #20
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	6892      	ldr	r2, [r2, #8]
 8010266:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	6852      	ldr	r2, [r2, #4]
 8010270:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	429a      	cmp	r2, r3
 801027a:	d103      	bne.n	8010284 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	689a      	ldr	r2, [r3, #8]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	1e5a      	subs	r2, r3, #1
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3714      	adds	r7, #20
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10b      	bne.n	80102d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80102b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102bc:	b672      	cpsid	i
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	b662      	cpsie	i
 80102cc:	60bb      	str	r3, [r7, #8]
 80102ce:	e7fe      	b.n	80102ce <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80102d0:	f001 fd82 	bl	8011dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102dc:	68f9      	ldr	r1, [r7, #12]
 80102de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102e0:	fb01 f303 	mul.w	r3, r1, r3
 80102e4:	441a      	add	r2, r3
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2200      	movs	r2, #0
 80102ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010300:	3b01      	subs	r3, #1
 8010302:	68f9      	ldr	r1, [r7, #12]
 8010304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010306:	fb01 f303 	mul.w	r3, r1, r3
 801030a:	441a      	add	r2, r3
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	22ff      	movs	r2, #255	; 0xff
 8010314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	22ff      	movs	r2, #255	; 0xff
 801031c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d114      	bne.n	8010350 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	691b      	ldr	r3, [r3, #16]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d01a      	beq.n	8010364 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	3310      	adds	r3, #16
 8010332:	4618      	mov	r0, r3
 8010334:	f001 f97c 	bl	8011630 <xTaskRemoveFromEventList>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d012      	beq.n	8010364 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801033e:	4b0d      	ldr	r3, [pc, #52]	; (8010374 <xQueueGenericReset+0xd0>)
 8010340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	e009      	b.n	8010364 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	3310      	adds	r3, #16
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff fef1 	bl	801013c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	3324      	adds	r3, #36	; 0x24
 801035e:	4618      	mov	r0, r3
 8010360:	f7ff feec 	bl	801013c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010364:	f001 fd6a 	bl	8011e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010368:	2301      	movs	r3, #1
}
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	e000ed04 	.word	0xe000ed04

08010378 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010378:	b580      	push	{r7, lr}
 801037a:	b08e      	sub	sp, #56	; 0x38
 801037c:	af02      	add	r7, sp, #8
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10b      	bne.n	80103a4 <xQueueGenericCreateStatic+0x2c>
 801038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010390:	b672      	cpsid	i
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	b662      	cpsie	i
 80103a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80103a2:	e7fe      	b.n	80103a2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d10b      	bne.n	80103c2 <xQueueGenericCreateStatic+0x4a>
 80103aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ae:	b672      	cpsid	i
 80103b0:	f383 8811 	msr	BASEPRI, r3
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	b662      	cpsie	i
 80103be:	627b      	str	r3, [r7, #36]	; 0x24
 80103c0:	e7fe      	b.n	80103c0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <xQueueGenericCreateStatic+0x56>
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d001      	beq.n	80103d2 <xQueueGenericCreateStatic+0x5a>
 80103ce:	2301      	movs	r3, #1
 80103d0:	e000      	b.n	80103d4 <xQueueGenericCreateStatic+0x5c>
 80103d2:	2300      	movs	r3, #0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10b      	bne.n	80103f0 <xQueueGenericCreateStatic+0x78>
 80103d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103dc:	b672      	cpsid	i
 80103de:	f383 8811 	msr	BASEPRI, r3
 80103e2:	f3bf 8f6f 	isb	sy
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	b662      	cpsie	i
 80103ec:	623b      	str	r3, [r7, #32]
 80103ee:	e7fe      	b.n	80103ee <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d102      	bne.n	80103fc <xQueueGenericCreateStatic+0x84>
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d101      	bne.n	8010400 <xQueueGenericCreateStatic+0x88>
 80103fc:	2301      	movs	r3, #1
 80103fe:	e000      	b.n	8010402 <xQueueGenericCreateStatic+0x8a>
 8010400:	2300      	movs	r3, #0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d10b      	bne.n	801041e <xQueueGenericCreateStatic+0xa6>
 8010406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040a:	b672      	cpsid	i
 801040c:	f383 8811 	msr	BASEPRI, r3
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	b662      	cpsie	i
 801041a:	61fb      	str	r3, [r7, #28]
 801041c:	e7fe      	b.n	801041c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801041e:	2348      	movs	r3, #72	; 0x48
 8010420:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2b48      	cmp	r3, #72	; 0x48
 8010426:	d00b      	beq.n	8010440 <xQueueGenericCreateStatic+0xc8>
 8010428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042c:	b672      	cpsid	i
 801042e:	f383 8811 	msr	BASEPRI, r3
 8010432:	f3bf 8f6f 	isb	sy
 8010436:	f3bf 8f4f 	dsb	sy
 801043a:	b662      	cpsie	i
 801043c:	61bb      	str	r3, [r7, #24]
 801043e:	e7fe      	b.n	801043e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010440:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010448:	2b00      	cmp	r3, #0
 801044a:	d00d      	beq.n	8010468 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	2201      	movs	r2, #1
 8010450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010454:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	4613      	mov	r3, r2
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	68b9      	ldr	r1, [r7, #8]
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	f000 f846 	bl	80104f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801046a:	4618      	mov	r0, r3
 801046c:	3730      	adds	r7, #48	; 0x30
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010472:	b580      	push	{r7, lr}
 8010474:	b08a      	sub	sp, #40	; 0x28
 8010476:	af02      	add	r7, sp, #8
 8010478:	60f8      	str	r0, [r7, #12]
 801047a:	60b9      	str	r1, [r7, #8]
 801047c:	4613      	mov	r3, r2
 801047e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d10b      	bne.n	801049e <xQueueGenericCreate+0x2c>
 8010486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048a:	b672      	cpsid	i
 801048c:	f383 8811 	msr	BASEPRI, r3
 8010490:	f3bf 8f6f 	isb	sy
 8010494:	f3bf 8f4f 	dsb	sy
 8010498:	b662      	cpsie	i
 801049a:	613b      	str	r3, [r7, #16]
 801049c:	e7fe      	b.n	801049c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d102      	bne.n	80104aa <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80104a4:	2300      	movs	r3, #0
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	e004      	b.n	80104b4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	68ba      	ldr	r2, [r7, #8]
 80104ae:	fb02 f303 	mul.w	r3, r2, r3
 80104b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	3348      	adds	r3, #72	; 0x48
 80104b8:	4618      	mov	r0, r3
 80104ba:	f001 fdaf 	bl	801201c <pvPortMalloc>
 80104be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d011      	beq.n	80104ea <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	3348      	adds	r3, #72	; 0x48
 80104ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	2200      	movs	r2, #0
 80104d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80104d8:	79fa      	ldrb	r2, [r7, #7]
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	4613      	mov	r3, r2
 80104e0:	697a      	ldr	r2, [r7, #20]
 80104e2:	68b9      	ldr	r1, [r7, #8]
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	f000 f805 	bl	80104f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80104ea:	69bb      	ldr	r3, [r7, #24]
	}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3720      	adds	r7, #32
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
 8010500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d103      	bne.n	8010510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	69ba      	ldr	r2, [r7, #24]
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	e002      	b.n	8010516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	68ba      	ldr	r2, [r7, #8]
 8010520:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010522:	2101      	movs	r1, #1
 8010524:	69b8      	ldr	r0, [r7, #24]
 8010526:	f7ff febd 	bl	80102a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801052a:	bf00      	nop
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
	...

08010534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b08e      	sub	sp, #56	; 0x38
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
 8010540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010542:	2300      	movs	r3, #0
 8010544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801054a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054c:	2b00      	cmp	r3, #0
 801054e:	d10b      	bne.n	8010568 <xQueueGenericSend+0x34>
 8010550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010554:	b672      	cpsid	i
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	b662      	cpsie	i
 8010564:	62bb      	str	r3, [r7, #40]	; 0x28
 8010566:	e7fe      	b.n	8010566 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d103      	bne.n	8010576 <xQueueGenericSend+0x42>
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <xQueueGenericSend+0x46>
 8010576:	2301      	movs	r3, #1
 8010578:	e000      	b.n	801057c <xQueueGenericSend+0x48>
 801057a:	2300      	movs	r3, #0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d10b      	bne.n	8010598 <xQueueGenericSend+0x64>
 8010580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010584:	b672      	cpsid	i
 8010586:	f383 8811 	msr	BASEPRI, r3
 801058a:	f3bf 8f6f 	isb	sy
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	b662      	cpsie	i
 8010594:	627b      	str	r3, [r7, #36]	; 0x24
 8010596:	e7fe      	b.n	8010596 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	2b02      	cmp	r3, #2
 801059c:	d103      	bne.n	80105a6 <xQueueGenericSend+0x72>
 801059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d101      	bne.n	80105aa <xQueueGenericSend+0x76>
 80105a6:	2301      	movs	r3, #1
 80105a8:	e000      	b.n	80105ac <xQueueGenericSend+0x78>
 80105aa:	2300      	movs	r3, #0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d10b      	bne.n	80105c8 <xQueueGenericSend+0x94>
 80105b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b4:	b672      	cpsid	i
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	b662      	cpsie	i
 80105c4:	623b      	str	r3, [r7, #32]
 80105c6:	e7fe      	b.n	80105c6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105c8:	f001 f9f2 	bl	80119b0 <xTaskGetSchedulerState>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d102      	bne.n	80105d8 <xQueueGenericSend+0xa4>
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <xQueueGenericSend+0xa8>
 80105d8:	2301      	movs	r3, #1
 80105da:	e000      	b.n	80105de <xQueueGenericSend+0xaa>
 80105dc:	2300      	movs	r3, #0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d10b      	bne.n	80105fa <xQueueGenericSend+0xc6>
 80105e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e6:	b672      	cpsid	i
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	b662      	cpsie	i
 80105f6:	61fb      	str	r3, [r7, #28]
 80105f8:	e7fe      	b.n	80105f8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105fa:	f001 fbed 	bl	8011dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010606:	429a      	cmp	r2, r3
 8010608:	d302      	bcc.n	8010610 <xQueueGenericSend+0xdc>
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2b02      	cmp	r3, #2
 801060e:	d129      	bne.n	8010664 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010610:	683a      	ldr	r2, [r7, #0]
 8010612:	68b9      	ldr	r1, [r7, #8]
 8010614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010616:	f000 fa90 	bl	8010b3a <prvCopyDataToQueue>
 801061a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010620:	2b00      	cmp	r3, #0
 8010622:	d010      	beq.n	8010646 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010626:	3324      	adds	r3, #36	; 0x24
 8010628:	4618      	mov	r0, r3
 801062a:	f001 f801 	bl	8011630 <xTaskRemoveFromEventList>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d013      	beq.n	801065c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010634:	4b3f      	ldr	r3, [pc, #252]	; (8010734 <xQueueGenericSend+0x200>)
 8010636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801063a:	601a      	str	r2, [r3, #0]
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	f3bf 8f6f 	isb	sy
 8010644:	e00a      	b.n	801065c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010648:	2b00      	cmp	r3, #0
 801064a:	d007      	beq.n	801065c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801064c:	4b39      	ldr	r3, [pc, #228]	; (8010734 <xQueueGenericSend+0x200>)
 801064e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010652:	601a      	str	r2, [r3, #0]
 8010654:	f3bf 8f4f 	dsb	sy
 8010658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801065c:	f001 fbee 	bl	8011e3c <vPortExitCritical>
				return pdPASS;
 8010660:	2301      	movs	r3, #1
 8010662:	e063      	b.n	801072c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d103      	bne.n	8010672 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801066a:	f001 fbe7 	bl	8011e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801066e:	2300      	movs	r3, #0
 8010670:	e05c      	b.n	801072c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010674:	2b00      	cmp	r3, #0
 8010676:	d106      	bne.n	8010686 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010678:	f107 0314 	add.w	r3, r7, #20
 801067c:	4618      	mov	r0, r3
 801067e:	f001 f83b 	bl	80116f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010682:	2301      	movs	r3, #1
 8010684:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010686:	f001 fbd9 	bl	8011e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801068a:	f000 fda1 	bl	80111d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801068e:	f001 fba3 	bl	8011dd8 <vPortEnterCritical>
 8010692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010698:	b25b      	sxtb	r3, r3
 801069a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069e:	d103      	bne.n	80106a8 <xQueueGenericSend+0x174>
 80106a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106ae:	b25b      	sxtb	r3, r3
 80106b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b4:	d103      	bne.n	80106be <xQueueGenericSend+0x18a>
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106be:	f001 fbbd 	bl	8011e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106c2:	1d3a      	adds	r2, r7, #4
 80106c4:	f107 0314 	add.w	r3, r7, #20
 80106c8:	4611      	mov	r1, r2
 80106ca:	4618      	mov	r0, r3
 80106cc:	f001 f82a 	bl	8011724 <xTaskCheckForTimeOut>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d124      	bne.n	8010720 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80106d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106d8:	f000 fb27 	bl	8010d2a <prvIsQueueFull>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d018      	beq.n	8010714 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80106e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e4:	3310      	adds	r3, #16
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	4611      	mov	r1, r2
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 ff7a 	bl	80115e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80106f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106f2:	f000 fab2 	bl	8010c5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80106f6:	f000 fd79 	bl	80111ec <xTaskResumeAll>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f47f af7c 	bne.w	80105fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010702:	4b0c      	ldr	r3, [pc, #48]	; (8010734 <xQueueGenericSend+0x200>)
 8010704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010708:	601a      	str	r2, [r3, #0]
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	f3bf 8f6f 	isb	sy
 8010712:	e772      	b.n	80105fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010716:	f000 faa0 	bl	8010c5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801071a:	f000 fd67 	bl	80111ec <xTaskResumeAll>
 801071e:	e76c      	b.n	80105fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010722:	f000 fa9a 	bl	8010c5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010726:	f000 fd61 	bl	80111ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801072a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801072c:	4618      	mov	r0, r3
 801072e:	3738      	adds	r7, #56	; 0x38
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	e000ed04 	.word	0xe000ed04

08010738 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08e      	sub	sp, #56	; 0x38
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10b      	bne.n	8010768 <xQueueGenericSendFromISR+0x30>
 8010750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010754:	b672      	cpsid	i
 8010756:	f383 8811 	msr	BASEPRI, r3
 801075a:	f3bf 8f6f 	isb	sy
 801075e:	f3bf 8f4f 	dsb	sy
 8010762:	b662      	cpsie	i
 8010764:	627b      	str	r3, [r7, #36]	; 0x24
 8010766:	e7fe      	b.n	8010766 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d103      	bne.n	8010776 <xQueueGenericSendFromISR+0x3e>
 801076e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010772:	2b00      	cmp	r3, #0
 8010774:	d101      	bne.n	801077a <xQueueGenericSendFromISR+0x42>
 8010776:	2301      	movs	r3, #1
 8010778:	e000      	b.n	801077c <xQueueGenericSendFromISR+0x44>
 801077a:	2300      	movs	r3, #0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10b      	bne.n	8010798 <xQueueGenericSendFromISR+0x60>
 8010780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010784:	b672      	cpsid	i
 8010786:	f383 8811 	msr	BASEPRI, r3
 801078a:	f3bf 8f6f 	isb	sy
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	b662      	cpsie	i
 8010794:	623b      	str	r3, [r7, #32]
 8010796:	e7fe      	b.n	8010796 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	2b02      	cmp	r3, #2
 801079c:	d103      	bne.n	80107a6 <xQueueGenericSendFromISR+0x6e>
 801079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d101      	bne.n	80107aa <xQueueGenericSendFromISR+0x72>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e000      	b.n	80107ac <xQueueGenericSendFromISR+0x74>
 80107aa:	2300      	movs	r3, #0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d10b      	bne.n	80107c8 <xQueueGenericSendFromISR+0x90>
 80107b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b4:	b672      	cpsid	i
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
 80107c2:	b662      	cpsie	i
 80107c4:	61fb      	str	r3, [r7, #28]
 80107c6:	e7fe      	b.n	80107c6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107c8:	f001 fbe6 	bl	8011f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80107cc:	f3ef 8211 	mrs	r2, BASEPRI
 80107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d4:	b672      	cpsid	i
 80107d6:	f383 8811 	msr	BASEPRI, r3
 80107da:	f3bf 8f6f 	isb	sy
 80107de:	f3bf 8f4f 	dsb	sy
 80107e2:	b662      	cpsie	i
 80107e4:	61ba      	str	r2, [r7, #24]
 80107e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80107e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80107ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d302      	bcc.n	80107fe <xQueueGenericSendFromISR+0xc6>
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	2b02      	cmp	r3, #2
 80107fc:	d12c      	bne.n	8010858 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80107fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010808:	683a      	ldr	r2, [r7, #0]
 801080a:	68b9      	ldr	r1, [r7, #8]
 801080c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801080e:	f000 f994 	bl	8010b3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010812:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081a:	d112      	bne.n	8010842 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010820:	2b00      	cmp	r3, #0
 8010822:	d016      	beq.n	8010852 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	3324      	adds	r3, #36	; 0x24
 8010828:	4618      	mov	r0, r3
 801082a:	f000 ff01 	bl	8011630 <xTaskRemoveFromEventList>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d00e      	beq.n	8010852 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00b      	beq.n	8010852 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2201      	movs	r2, #1
 801083e:	601a      	str	r2, [r3, #0]
 8010840:	e007      	b.n	8010852 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010846:	3301      	adds	r3, #1
 8010848:	b2db      	uxtb	r3, r3
 801084a:	b25a      	sxtb	r2, r3
 801084c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010852:	2301      	movs	r3, #1
 8010854:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010856:	e001      	b.n	801085c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010858:	2300      	movs	r3, #0
 801085a:	637b      	str	r3, [r7, #52]	; 0x34
 801085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801085e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010868:	4618      	mov	r0, r3
 801086a:	3738      	adds	r7, #56	; 0x38
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b08c      	sub	sp, #48	; 0x30
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801087c:	2300      	movs	r3, #0
 801087e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010886:	2b00      	cmp	r3, #0
 8010888:	d10b      	bne.n	80108a2 <xQueueReceive+0x32>
	__asm volatile
 801088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088e:	b672      	cpsid	i
 8010890:	f383 8811 	msr	BASEPRI, r3
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	b662      	cpsie	i
 801089e:	623b      	str	r3, [r7, #32]
 80108a0:	e7fe      	b.n	80108a0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d103      	bne.n	80108b0 <xQueueReceive+0x40>
 80108a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d101      	bne.n	80108b4 <xQueueReceive+0x44>
 80108b0:	2301      	movs	r3, #1
 80108b2:	e000      	b.n	80108b6 <xQueueReceive+0x46>
 80108b4:	2300      	movs	r3, #0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d10b      	bne.n	80108d2 <xQueueReceive+0x62>
 80108ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108be:	b672      	cpsid	i
 80108c0:	f383 8811 	msr	BASEPRI, r3
 80108c4:	f3bf 8f6f 	isb	sy
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	b662      	cpsie	i
 80108ce:	61fb      	str	r3, [r7, #28]
 80108d0:	e7fe      	b.n	80108d0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108d2:	f001 f86d 	bl	80119b0 <xTaskGetSchedulerState>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d102      	bne.n	80108e2 <xQueueReceive+0x72>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <xQueueReceive+0x76>
 80108e2:	2301      	movs	r3, #1
 80108e4:	e000      	b.n	80108e8 <xQueueReceive+0x78>
 80108e6:	2300      	movs	r3, #0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10b      	bne.n	8010904 <xQueueReceive+0x94>
 80108ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f0:	b672      	cpsid	i
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	b662      	cpsie	i
 8010900:	61bb      	str	r3, [r7, #24]
 8010902:	e7fe      	b.n	8010902 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010904:	f001 fa68 	bl	8011dd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801090c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010910:	2b00      	cmp	r3, #0
 8010912:	d01f      	beq.n	8010954 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010914:	68b9      	ldr	r1, [r7, #8]
 8010916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010918:	f000 f979 	bl	8010c0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091e:	1e5a      	subs	r2, r3, #1
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00f      	beq.n	801094c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092e:	3310      	adds	r3, #16
 8010930:	4618      	mov	r0, r3
 8010932:	f000 fe7d 	bl	8011630 <xTaskRemoveFromEventList>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d007      	beq.n	801094c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801093c:	4b3c      	ldr	r3, [pc, #240]	; (8010a30 <xQueueReceive+0x1c0>)
 801093e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010942:	601a      	str	r2, [r3, #0]
 8010944:	f3bf 8f4f 	dsb	sy
 8010948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801094c:	f001 fa76 	bl	8011e3c <vPortExitCritical>
				return pdPASS;
 8010950:	2301      	movs	r3, #1
 8010952:	e069      	b.n	8010a28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d103      	bne.n	8010962 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801095a:	f001 fa6f 	bl	8011e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801095e:	2300      	movs	r3, #0
 8010960:	e062      	b.n	8010a28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010964:	2b00      	cmp	r3, #0
 8010966:	d106      	bne.n	8010976 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010968:	f107 0310 	add.w	r3, r7, #16
 801096c:	4618      	mov	r0, r3
 801096e:	f000 fec3 	bl	80116f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010972:	2301      	movs	r3, #1
 8010974:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010976:	f001 fa61 	bl	8011e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801097a:	f000 fc29 	bl	80111d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801097e:	f001 fa2b 	bl	8011dd8 <vPortEnterCritical>
 8010982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010988:	b25b      	sxtb	r3, r3
 801098a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801098e:	d103      	bne.n	8010998 <xQueueReceive+0x128>
 8010990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010992:	2200      	movs	r2, #0
 8010994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801099e:	b25b      	sxtb	r3, r3
 80109a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a4:	d103      	bne.n	80109ae <xQueueReceive+0x13e>
 80109a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a8:	2200      	movs	r2, #0
 80109aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109ae:	f001 fa45 	bl	8011e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109b2:	1d3a      	adds	r2, r7, #4
 80109b4:	f107 0310 	add.w	r3, r7, #16
 80109b8:	4611      	mov	r1, r2
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 feb2 	bl	8011724 <xTaskCheckForTimeOut>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d123      	bne.n	8010a0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109c8:	f000 f999 	bl	8010cfe <prvIsQueueEmpty>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d017      	beq.n	8010a02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80109d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d4:	3324      	adds	r3, #36	; 0x24
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	4611      	mov	r1, r2
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 fe02 	bl	80115e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80109e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109e2:	f000 f93a 	bl	8010c5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80109e6:	f000 fc01 	bl	80111ec <xTaskResumeAll>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d189      	bne.n	8010904 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80109f0:	4b0f      	ldr	r3, [pc, #60]	; (8010a30 <xQueueReceive+0x1c0>)
 80109f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109f6:	601a      	str	r2, [r3, #0]
 80109f8:	f3bf 8f4f 	dsb	sy
 80109fc:	f3bf 8f6f 	isb	sy
 8010a00:	e780      	b.n	8010904 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a04:	f000 f929 	bl	8010c5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a08:	f000 fbf0 	bl	80111ec <xTaskResumeAll>
 8010a0c:	e77a      	b.n	8010904 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a10:	f000 f923 	bl	8010c5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a14:	f000 fbea 	bl	80111ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a1a:	f000 f970 	bl	8010cfe <prvIsQueueEmpty>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f43f af6f 	beq.w	8010904 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010a26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3730      	adds	r7, #48	; 0x30
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	e000ed04 	.word	0xe000ed04

08010a34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b08e      	sub	sp, #56	; 0x38
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10b      	bne.n	8010a62 <xQueueReceiveFromISR+0x2e>
 8010a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a4e:	b672      	cpsid	i
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	b662      	cpsie	i
 8010a5e:	623b      	str	r3, [r7, #32]
 8010a60:	e7fe      	b.n	8010a60 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d103      	bne.n	8010a70 <xQueueReceiveFromISR+0x3c>
 8010a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d101      	bne.n	8010a74 <xQueueReceiveFromISR+0x40>
 8010a70:	2301      	movs	r3, #1
 8010a72:	e000      	b.n	8010a76 <xQueueReceiveFromISR+0x42>
 8010a74:	2300      	movs	r3, #0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10b      	bne.n	8010a92 <xQueueReceiveFromISR+0x5e>
 8010a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7e:	b672      	cpsid	i
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	b662      	cpsie	i
 8010a8e:	61fb      	str	r3, [r7, #28]
 8010a90:	e7fe      	b.n	8010a90 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a92:	f001 fa81 	bl	8011f98 <vPortValidateInterruptPriority>
	__asm volatile
 8010a96:	f3ef 8211 	mrs	r2, BASEPRI
 8010a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9e:	b672      	cpsid	i
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	b662      	cpsie	i
 8010aae:	61ba      	str	r2, [r7, #24]
 8010ab0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010ab2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d02f      	beq.n	8010b22 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010acc:	68b9      	ldr	r1, [r7, #8]
 8010ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ad0:	f000 f89d 	bl	8010c0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad6:	1e5a      	subs	r2, r3, #1
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ada:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae4:	d112      	bne.n	8010b0c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	691b      	ldr	r3, [r3, #16]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d016      	beq.n	8010b1c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af0:	3310      	adds	r3, #16
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 fd9c 	bl	8011630 <xTaskRemoveFromEventList>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00e      	beq.n	8010b1c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d00b      	beq.n	8010b1c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	601a      	str	r2, [r3, #0]
 8010b0a:	e007      	b.n	8010b1c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b10:	3301      	adds	r3, #1
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	b25a      	sxtb	r2, r3
 8010b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8010b20:	e001      	b.n	8010b26 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010b22:	2300      	movs	r3, #0
 8010b24:	637b      	str	r3, [r7, #52]	; 0x34
 8010b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3738      	adds	r7, #56	; 0x38
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b086      	sub	sp, #24
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	60f8      	str	r0, [r7, #12]
 8010b42:	60b9      	str	r1, [r7, #8]
 8010b44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010b46:	2300      	movs	r3, #0
 8010b48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d10d      	bne.n	8010b74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d14d      	bne.n	8010bfc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	689b      	ldr	r3, [r3, #8]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f000 ff41 	bl	80119ec <xTaskPriorityDisinherit>
 8010b6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	609a      	str	r2, [r3, #8]
 8010b72:	e043      	b.n	8010bfc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d119      	bne.n	8010bae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	6858      	ldr	r0, [r3, #4]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b82:	461a      	mov	r2, r3
 8010b84:	68b9      	ldr	r1, [r7, #8]
 8010b86:	f001 ff5d 	bl	8012a44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	685a      	ldr	r2, [r3, #4]
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b92:	441a      	add	r2, r3
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	685a      	ldr	r2, [r3, #4]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d32b      	bcc.n	8010bfc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	605a      	str	r2, [r3, #4]
 8010bac:	e026      	b.n	8010bfc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	68d8      	ldr	r0, [r3, #12]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	f001 ff43 	bl	8012a44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	68da      	ldr	r2, [r3, #12]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bc6:	425b      	negs	r3, r3
 8010bc8:	441a      	add	r2, r3
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	68da      	ldr	r2, [r3, #12]
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d207      	bcs.n	8010bea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	689a      	ldr	r2, [r3, #8]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be2:	425b      	negs	r3, r3
 8010be4:	441a      	add	r2, r3
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b02      	cmp	r3, #2
 8010bee:	d105      	bne.n	8010bfc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d002      	beq.n	8010bfc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	1c5a      	adds	r2, r3, #1
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010c04:	697b      	ldr	r3, [r7, #20]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3718      	adds	r7, #24
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}

08010c0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010c0e:	b580      	push	{r7, lr}
 8010c10:	b082      	sub	sp, #8
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
 8010c16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d018      	beq.n	8010c52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	68da      	ldr	r2, [r3, #12]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c28:	441a      	add	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	68da      	ldr	r2, [r3, #12]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	689b      	ldr	r3, [r3, #8]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d303      	bcc.n	8010c42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	68d9      	ldr	r1, [r3, #12]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	6838      	ldr	r0, [r7, #0]
 8010c4e:	f001 fef9 	bl	8012a44 <memcpy>
	}
}
 8010c52:	bf00      	nop
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b084      	sub	sp, #16
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010c62:	f001 f8b9 	bl	8011dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c6e:	e011      	b.n	8010c94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d012      	beq.n	8010c9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	3324      	adds	r3, #36	; 0x24
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f000 fcd7 	bl	8011630 <xTaskRemoveFromEventList>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010c88:	f000 fdb0 	bl	80117ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	dce9      	bgt.n	8010c70 <prvUnlockQueue+0x16>
 8010c9c:	e000      	b.n	8010ca0 <prvUnlockQueue+0x46>
					break;
 8010c9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	22ff      	movs	r2, #255	; 0xff
 8010ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010ca8:	f001 f8c8 	bl	8011e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010cac:	f001 f894 	bl	8011dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cb8:	e011      	b.n	8010cde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	691b      	ldr	r3, [r3, #16]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d012      	beq.n	8010ce8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	3310      	adds	r3, #16
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f000 fcb2 	bl	8011630 <xTaskRemoveFromEventList>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d001      	beq.n	8010cd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010cd2:	f000 fd8b 	bl	80117ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010cd6:	7bbb      	ldrb	r3, [r7, #14]
 8010cd8:	3b01      	subs	r3, #1
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	dce9      	bgt.n	8010cba <prvUnlockQueue+0x60>
 8010ce6:	e000      	b.n	8010cea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010ce8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	22ff      	movs	r2, #255	; 0xff
 8010cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010cf2:	f001 f8a3 	bl	8011e3c <vPortExitCritical>
}
 8010cf6:	bf00      	nop
 8010cf8:	3710      	adds	r7, #16
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}

08010cfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010cfe:	b580      	push	{r7, lr}
 8010d00:	b084      	sub	sp, #16
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d06:	f001 f867 	bl	8011dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d102      	bne.n	8010d18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010d12:	2301      	movs	r3, #1
 8010d14:	60fb      	str	r3, [r7, #12]
 8010d16:	e001      	b.n	8010d1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d1c:	f001 f88e 	bl	8011e3c <vPortExitCritical>

	return xReturn;
 8010d20:	68fb      	ldr	r3, [r7, #12]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d2a:	b580      	push	{r7, lr}
 8010d2c:	b084      	sub	sp, #16
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d32:	f001 f851 	bl	8011dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d102      	bne.n	8010d48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010d42:	2301      	movs	r3, #1
 8010d44:	60fb      	str	r3, [r7, #12]
 8010d46:	e001      	b.n	8010d4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d4c:	f001 f876 	bl	8011e3c <vPortExitCritical>

	return xReturn;
 8010d50:	68fb      	ldr	r3, [r7, #12]
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3710      	adds	r7, #16
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010d5a:	b580      	push	{r7, lr}
 8010d5c:	b08e      	sub	sp, #56	; 0x38
 8010d5e:	af04      	add	r7, sp, #16
 8010d60:	60f8      	str	r0, [r7, #12]
 8010d62:	60b9      	str	r1, [r7, #8]
 8010d64:	607a      	str	r2, [r7, #4]
 8010d66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10b      	bne.n	8010d86 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d72:	b672      	cpsid	i
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	b662      	cpsie	i
 8010d82:	623b      	str	r3, [r7, #32]
 8010d84:	e7fe      	b.n	8010d84 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8010d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10b      	bne.n	8010da4 <xTaskCreateStatic+0x4a>
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	b672      	cpsid	i
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	b662      	cpsie	i
 8010da0:	61fb      	str	r3, [r7, #28]
 8010da2:	e7fe      	b.n	8010da2 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010da4:	2358      	movs	r3, #88	; 0x58
 8010da6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	2b58      	cmp	r3, #88	; 0x58
 8010dac:	d00b      	beq.n	8010dc6 <xTaskCreateStatic+0x6c>
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	b672      	cpsid	i
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	b662      	cpsie	i
 8010dc2:	61bb      	str	r3, [r7, #24]
 8010dc4:	e7fe      	b.n	8010dc4 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010dc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d01e      	beq.n	8010e0c <xTaskCreateStatic+0xb2>
 8010dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d01b      	beq.n	8010e0c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ddc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de0:	2202      	movs	r2, #2
 8010de2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010de6:	2300      	movs	r3, #0
 8010de8:	9303      	str	r3, [sp, #12]
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	9302      	str	r3, [sp, #8]
 8010dee:	f107 0314 	add.w	r3, r7, #20
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df6:	9300      	str	r3, [sp, #0]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	68b9      	ldr	r1, [r7, #8]
 8010dfe:	68f8      	ldr	r0, [r7, #12]
 8010e00:	f000 f850 	bl	8010ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e06:	f000 f8e1 	bl	8010fcc <prvAddNewTaskToReadyList>
 8010e0a:	e001      	b.n	8010e10 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010e10:	697b      	ldr	r3, [r7, #20]
	}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3728      	adds	r7, #40	; 0x28
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b08c      	sub	sp, #48	; 0x30
 8010e1e:	af04      	add	r7, sp, #16
 8010e20:	60f8      	str	r0, [r7, #12]
 8010e22:	60b9      	str	r1, [r7, #8]
 8010e24:	603b      	str	r3, [r7, #0]
 8010e26:	4613      	mov	r3, r2
 8010e28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e2a:	88fb      	ldrh	r3, [r7, #6]
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f001 f8f4 	bl	801201c <pvPortMalloc>
 8010e34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00e      	beq.n	8010e5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e3c:	2058      	movs	r0, #88	; 0x58
 8010e3e:	f001 f8ed 	bl	801201c <pvPortMalloc>
 8010e42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d003      	beq.n	8010e52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8010e50:	e005      	b.n	8010e5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010e52:	6978      	ldr	r0, [r7, #20]
 8010e54:	f001 f9ae 	bl	80121b4 <vPortFree>
 8010e58:	e001      	b.n	8010e5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d017      	beq.n	8010e94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e6c:	88fa      	ldrh	r2, [r7, #6]
 8010e6e:	2300      	movs	r3, #0
 8010e70:	9303      	str	r3, [sp, #12]
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	9302      	str	r3, [sp, #8]
 8010e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e78:	9301      	str	r3, [sp, #4]
 8010e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	68b9      	ldr	r1, [r7, #8]
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f000 f80e 	bl	8010ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e88:	69f8      	ldr	r0, [r7, #28]
 8010e8a:	f000 f89f 	bl	8010fcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	61bb      	str	r3, [r7, #24]
 8010e92:	e002      	b.n	8010e9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e94:	f04f 33ff 	mov.w	r3, #4294967295
 8010e98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e9a:	69bb      	ldr	r3, [r7, #24]
	}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3720      	adds	r7, #32
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b088      	sub	sp, #32
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	60b9      	str	r1, [r7, #8]
 8010eae:	607a      	str	r2, [r7, #4]
 8010eb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	461a      	mov	r2, r3
 8010ebc:	21a5      	movs	r1, #165	; 0xa5
 8010ebe:	f001 fdcc 	bl	8012a5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ec6:	6879      	ldr	r1, [r7, #4]
 8010ec8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010ecc:	440b      	add	r3, r1
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	4413      	add	r3, r2
 8010ed2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ed4:	69bb      	ldr	r3, [r7, #24]
 8010ed6:	f023 0307 	bic.w	r3, r3, #7
 8010eda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010edc:	69bb      	ldr	r3, [r7, #24]
 8010ede:	f003 0307 	and.w	r3, r3, #7
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00b      	beq.n	8010efe <prvInitialiseNewTask+0x5a>
 8010ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eea:	b672      	cpsid	i
 8010eec:	f383 8811 	msr	BASEPRI, r3
 8010ef0:	f3bf 8f6f 	isb	sy
 8010ef4:	f3bf 8f4f 	dsb	sy
 8010ef8:	b662      	cpsie	i
 8010efa:	617b      	str	r3, [r7, #20]
 8010efc:	e7fe      	b.n	8010efc <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d01f      	beq.n	8010f44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f04:	2300      	movs	r3, #0
 8010f06:	61fb      	str	r3, [r7, #28]
 8010f08:	e012      	b.n	8010f30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	4413      	add	r3, r2
 8010f10:	7819      	ldrb	r1, [r3, #0]
 8010f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	4413      	add	r3, r2
 8010f18:	3334      	adds	r3, #52	; 0x34
 8010f1a:	460a      	mov	r2, r1
 8010f1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	4413      	add	r3, r2
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d006      	beq.n	8010f38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	61fb      	str	r3, [r7, #28]
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	2b0f      	cmp	r3, #15
 8010f34:	d9e9      	bls.n	8010f0a <prvInitialiseNewTask+0x66>
 8010f36:	e000      	b.n	8010f3a <prvInitialiseNewTask+0x96>
			{
				break;
 8010f38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010f42:	e003      	b.n	8010f4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f46:	2200      	movs	r2, #0
 8010f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4e:	2b06      	cmp	r3, #6
 8010f50:	d901      	bls.n	8010f56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f52:	2306      	movs	r3, #6
 8010f54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f60:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	2200      	movs	r2, #0
 8010f66:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ff f905 	bl	801017c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	3318      	adds	r3, #24
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7ff f900 	bl	801017c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f84:	f1c3 0207 	rsb	r2, r3, #7
 8010f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8010f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f94:	2200      	movs	r2, #0
 8010f96:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010fa6:	683a      	ldr	r2, [r7, #0]
 8010fa8:	68f9      	ldr	r1, [r7, #12]
 8010faa:	69b8      	ldr	r0, [r7, #24]
 8010fac:	f000 fe0c 	bl	8011bc8 <pxPortInitialiseStack>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d002      	beq.n	8010fc2 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fc2:	bf00      	nop
 8010fc4:	3720      	adds	r7, #32
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
	...

08010fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010fd4:	f000 ff00 	bl	8011dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010fd8:	4b2a      	ldr	r3, [pc, #168]	; (8011084 <prvAddNewTaskToReadyList+0xb8>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	3301      	adds	r3, #1
 8010fde:	4a29      	ldr	r2, [pc, #164]	; (8011084 <prvAddNewTaskToReadyList+0xb8>)
 8010fe0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010fe2:	4b29      	ldr	r3, [pc, #164]	; (8011088 <prvAddNewTaskToReadyList+0xbc>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d109      	bne.n	8010ffe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010fea:	4a27      	ldr	r2, [pc, #156]	; (8011088 <prvAddNewTaskToReadyList+0xbc>)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ff0:	4b24      	ldr	r3, [pc, #144]	; (8011084 <prvAddNewTaskToReadyList+0xb8>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d110      	bne.n	801101a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ff8:	f000 fc1e 	bl	8011838 <prvInitialiseTaskLists>
 8010ffc:	e00d      	b.n	801101a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ffe:	4b23      	ldr	r3, [pc, #140]	; (801108c <prvAddNewTaskToReadyList+0xc0>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d109      	bne.n	801101a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011006:	4b20      	ldr	r3, [pc, #128]	; (8011088 <prvAddNewTaskToReadyList+0xbc>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011010:	429a      	cmp	r2, r3
 8011012:	d802      	bhi.n	801101a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011014:	4a1c      	ldr	r2, [pc, #112]	; (8011088 <prvAddNewTaskToReadyList+0xbc>)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801101a:	4b1d      	ldr	r3, [pc, #116]	; (8011090 <prvAddNewTaskToReadyList+0xc4>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	3301      	adds	r3, #1
 8011020:	4a1b      	ldr	r2, [pc, #108]	; (8011090 <prvAddNewTaskToReadyList+0xc4>)
 8011022:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011028:	2201      	movs	r2, #1
 801102a:	409a      	lsls	r2, r3
 801102c:	4b19      	ldr	r3, [pc, #100]	; (8011094 <prvAddNewTaskToReadyList+0xc8>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	4313      	orrs	r3, r2
 8011032:	4a18      	ldr	r2, [pc, #96]	; (8011094 <prvAddNewTaskToReadyList+0xc8>)
 8011034:	6013      	str	r3, [r2, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801103a:	4613      	mov	r3, r2
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	4413      	add	r3, r2
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	4a15      	ldr	r2, [pc, #84]	; (8011098 <prvAddNewTaskToReadyList+0xcc>)
 8011044:	441a      	add	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	3304      	adds	r3, #4
 801104a:	4619      	mov	r1, r3
 801104c:	4610      	mov	r0, r2
 801104e:	f7ff f8a2 	bl	8010196 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011052:	f000 fef3 	bl	8011e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011056:	4b0d      	ldr	r3, [pc, #52]	; (801108c <prvAddNewTaskToReadyList+0xc0>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00e      	beq.n	801107c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801105e:	4b0a      	ldr	r3, [pc, #40]	; (8011088 <prvAddNewTaskToReadyList+0xbc>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011068:	429a      	cmp	r2, r3
 801106a:	d207      	bcs.n	801107c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801106c:	4b0b      	ldr	r3, [pc, #44]	; (801109c <prvAddNewTaskToReadyList+0xd0>)
 801106e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801107c:	bf00      	nop
 801107e:	3708      	adds	r7, #8
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}
 8011084:	20000428 	.word	0x20000428
 8011088:	20000328 	.word	0x20000328
 801108c:	20000434 	.word	0x20000434
 8011090:	20000444 	.word	0x20000444
 8011094:	20000430 	.word	0x20000430
 8011098:	2000032c 	.word	0x2000032c
 801109c:	e000ed04 	.word	0xe000ed04

080110a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110a8:	2300      	movs	r3, #0
 80110aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d018      	beq.n	80110e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80110b2:	4b14      	ldr	r3, [pc, #80]	; (8011104 <vTaskDelay+0x64>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d00b      	beq.n	80110d2 <vTaskDelay+0x32>
 80110ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110be:	b672      	cpsid	i
 80110c0:	f383 8811 	msr	BASEPRI, r3
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	f3bf 8f4f 	dsb	sy
 80110cc:	b662      	cpsie	i
 80110ce:	60bb      	str	r3, [r7, #8]
 80110d0:	e7fe      	b.n	80110d0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80110d2:	f000 f87d 	bl	80111d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80110d6:	2100      	movs	r1, #0
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fd0f 	bl	8011afc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80110de:	f000 f885 	bl	80111ec <xTaskResumeAll>
 80110e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d107      	bne.n	80110fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80110ea:	4b07      	ldr	r3, [pc, #28]	; (8011108 <vTaskDelay+0x68>)
 80110ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110f0:	601a      	str	r2, [r3, #0]
 80110f2:	f3bf 8f4f 	dsb	sy
 80110f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80110fa:	bf00      	nop
 80110fc:	3710      	adds	r7, #16
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	20000450 	.word	0x20000450
 8011108:	e000ed04 	.word	0xe000ed04

0801110c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b08a      	sub	sp, #40	; 0x28
 8011110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011112:	2300      	movs	r3, #0
 8011114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011116:	2300      	movs	r3, #0
 8011118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801111a:	463a      	mov	r2, r7
 801111c:	1d39      	adds	r1, r7, #4
 801111e:	f107 0308 	add.w	r3, r7, #8
 8011122:	4618      	mov	r0, r3
 8011124:	f7ef fe08 	bl	8000d38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011128:	6839      	ldr	r1, [r7, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	68ba      	ldr	r2, [r7, #8]
 801112e:	9202      	str	r2, [sp, #8]
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	2300      	movs	r3, #0
 8011134:	9300      	str	r3, [sp, #0]
 8011136:	2300      	movs	r3, #0
 8011138:	460a      	mov	r2, r1
 801113a:	491f      	ldr	r1, [pc, #124]	; (80111b8 <vTaskStartScheduler+0xac>)
 801113c:	481f      	ldr	r0, [pc, #124]	; (80111bc <vTaskStartScheduler+0xb0>)
 801113e:	f7ff fe0c 	bl	8010d5a <xTaskCreateStatic>
 8011142:	4602      	mov	r2, r0
 8011144:	4b1e      	ldr	r3, [pc, #120]	; (80111c0 <vTaskStartScheduler+0xb4>)
 8011146:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011148:	4b1d      	ldr	r3, [pc, #116]	; (80111c0 <vTaskStartScheduler+0xb4>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d002      	beq.n	8011156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011150:	2301      	movs	r3, #1
 8011152:	617b      	str	r3, [r7, #20]
 8011154:	e001      	b.n	801115a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011156:	2300      	movs	r3, #0
 8011158:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d117      	bne.n	8011190 <vTaskStartScheduler+0x84>
 8011160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011164:	b672      	cpsid	i
 8011166:	f383 8811 	msr	BASEPRI, r3
 801116a:	f3bf 8f6f 	isb	sy
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	b662      	cpsie	i
 8011174:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011176:	4b13      	ldr	r3, [pc, #76]	; (80111c4 <vTaskStartScheduler+0xb8>)
 8011178:	f04f 32ff 	mov.w	r2, #4294967295
 801117c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801117e:	4b12      	ldr	r3, [pc, #72]	; (80111c8 <vTaskStartScheduler+0xbc>)
 8011180:	2201      	movs	r2, #1
 8011182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011184:	4b11      	ldr	r3, [pc, #68]	; (80111cc <vTaskStartScheduler+0xc0>)
 8011186:	2200      	movs	r2, #0
 8011188:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801118a:	f000 fda9 	bl	8011ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801118e:	e00f      	b.n	80111b0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011196:	d10b      	bne.n	80111b0 <vTaskStartScheduler+0xa4>
 8011198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119c:	b672      	cpsid	i
 801119e:	f383 8811 	msr	BASEPRI, r3
 80111a2:	f3bf 8f6f 	isb	sy
 80111a6:	f3bf 8f4f 	dsb	sy
 80111aa:	b662      	cpsie	i
 80111ac:	60fb      	str	r3, [r7, #12]
 80111ae:	e7fe      	b.n	80111ae <vTaskStartScheduler+0xa2>
}
 80111b0:	bf00      	nop
 80111b2:	3718      	adds	r7, #24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	080133dc 	.word	0x080133dc
 80111bc:	08011805 	.word	0x08011805
 80111c0:	2000044c 	.word	0x2000044c
 80111c4:	20000448 	.word	0x20000448
 80111c8:	20000434 	.word	0x20000434
 80111cc:	2000042c 	.word	0x2000042c

080111d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80111d0:	b480      	push	{r7}
 80111d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80111d4:	4b04      	ldr	r3, [pc, #16]	; (80111e8 <vTaskSuspendAll+0x18>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	3301      	adds	r3, #1
 80111da:	4a03      	ldr	r2, [pc, #12]	; (80111e8 <vTaskSuspendAll+0x18>)
 80111dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80111de:	bf00      	nop
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr
 80111e8:	20000450 	.word	0x20000450

080111ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80111f2:	2300      	movs	r3, #0
 80111f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80111f6:	2300      	movs	r3, #0
 80111f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80111fa:	4b42      	ldr	r3, [pc, #264]	; (8011304 <xTaskResumeAll+0x118>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d10b      	bne.n	801121a <xTaskResumeAll+0x2e>
 8011202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011206:	b672      	cpsid	i
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	b662      	cpsie	i
 8011216:	603b      	str	r3, [r7, #0]
 8011218:	e7fe      	b.n	8011218 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801121a:	f000 fddd 	bl	8011dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801121e:	4b39      	ldr	r3, [pc, #228]	; (8011304 <xTaskResumeAll+0x118>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	3b01      	subs	r3, #1
 8011224:	4a37      	ldr	r2, [pc, #220]	; (8011304 <xTaskResumeAll+0x118>)
 8011226:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011228:	4b36      	ldr	r3, [pc, #216]	; (8011304 <xTaskResumeAll+0x118>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d161      	bne.n	80112f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011230:	4b35      	ldr	r3, [pc, #212]	; (8011308 <xTaskResumeAll+0x11c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d05d      	beq.n	80112f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011238:	e02e      	b.n	8011298 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801123a:	4b34      	ldr	r3, [pc, #208]	; (801130c <xTaskResumeAll+0x120>)
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	3318      	adds	r3, #24
 8011246:	4618      	mov	r0, r3
 8011248:	f7ff f802 	bl	8010250 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	3304      	adds	r3, #4
 8011250:	4618      	mov	r0, r3
 8011252:	f7fe fffd 	bl	8010250 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801125a:	2201      	movs	r2, #1
 801125c:	409a      	lsls	r2, r3
 801125e:	4b2c      	ldr	r3, [pc, #176]	; (8011310 <xTaskResumeAll+0x124>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	4313      	orrs	r3, r2
 8011264:	4a2a      	ldr	r2, [pc, #168]	; (8011310 <xTaskResumeAll+0x124>)
 8011266:	6013      	str	r3, [r2, #0]
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801126c:	4613      	mov	r3, r2
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	4413      	add	r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	4a27      	ldr	r2, [pc, #156]	; (8011314 <xTaskResumeAll+0x128>)
 8011276:	441a      	add	r2, r3
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	3304      	adds	r3, #4
 801127c:	4619      	mov	r1, r3
 801127e:	4610      	mov	r0, r2
 8011280:	f7fe ff89 	bl	8010196 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011288:	4b23      	ldr	r3, [pc, #140]	; (8011318 <xTaskResumeAll+0x12c>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128e:	429a      	cmp	r2, r3
 8011290:	d302      	bcc.n	8011298 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011292:	4b22      	ldr	r3, [pc, #136]	; (801131c <xTaskResumeAll+0x130>)
 8011294:	2201      	movs	r2, #1
 8011296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011298:	4b1c      	ldr	r3, [pc, #112]	; (801130c <xTaskResumeAll+0x120>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d1cc      	bne.n	801123a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d001      	beq.n	80112aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80112a6:	f000 fb63 	bl	8011970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80112aa:	4b1d      	ldr	r3, [pc, #116]	; (8011320 <xTaskResumeAll+0x134>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d010      	beq.n	80112d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80112b6:	f000 f859 	bl	801136c <xTaskIncrementTick>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80112c0:	4b16      	ldr	r3, [pc, #88]	; (801131c <xTaskResumeAll+0x130>)
 80112c2:	2201      	movs	r2, #1
 80112c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	3b01      	subs	r3, #1
 80112ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1f1      	bne.n	80112b6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80112d2:	4b13      	ldr	r3, [pc, #76]	; (8011320 <xTaskResumeAll+0x134>)
 80112d4:	2200      	movs	r2, #0
 80112d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80112d8:	4b10      	ldr	r3, [pc, #64]	; (801131c <xTaskResumeAll+0x130>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d009      	beq.n	80112f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80112e0:	2301      	movs	r3, #1
 80112e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80112e4:	4b0f      	ldr	r3, [pc, #60]	; (8011324 <xTaskResumeAll+0x138>)
 80112e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80112f4:	f000 fda2 	bl	8011e3c <vPortExitCritical>

	return xAlreadyYielded;
 80112f8:	68bb      	ldr	r3, [r7, #8]
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	20000450 	.word	0x20000450
 8011308:	20000428 	.word	0x20000428
 801130c:	200003e8 	.word	0x200003e8
 8011310:	20000430 	.word	0x20000430
 8011314:	2000032c 	.word	0x2000032c
 8011318:	20000328 	.word	0x20000328
 801131c:	2000043c 	.word	0x2000043c
 8011320:	20000438 	.word	0x20000438
 8011324:	e000ed04 	.word	0xe000ed04

08011328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011328:	b480      	push	{r7}
 801132a:	b083      	sub	sp, #12
 801132c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801132e:	4b05      	ldr	r3, [pc, #20]	; (8011344 <xTaskGetTickCount+0x1c>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011334:	687b      	ldr	r3, [r7, #4]
}
 8011336:	4618      	mov	r0, r3
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
 8011342:	bf00      	nop
 8011344:	2000042c 	.word	0x2000042c

08011348 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801134e:	f000 fe23 	bl	8011f98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011352:	2300      	movs	r3, #0
 8011354:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011356:	4b04      	ldr	r3, [pc, #16]	; (8011368 <xTaskGetTickCountFromISR+0x20>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801135c:	683b      	ldr	r3, [r7, #0]
}
 801135e:	4618      	mov	r0, r3
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	2000042c 	.word	0x2000042c

0801136c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b086      	sub	sp, #24
 8011370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011372:	2300      	movs	r3, #0
 8011374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011376:	4b4f      	ldr	r3, [pc, #316]	; (80114b4 <xTaskIncrementTick+0x148>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	f040 8089 	bne.w	8011492 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011380:	4b4d      	ldr	r3, [pc, #308]	; (80114b8 <xTaskIncrementTick+0x14c>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	3301      	adds	r3, #1
 8011386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011388:	4a4b      	ldr	r2, [pc, #300]	; (80114b8 <xTaskIncrementTick+0x14c>)
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d121      	bne.n	80113d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011394:	4b49      	ldr	r3, [pc, #292]	; (80114bc <xTaskIncrementTick+0x150>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00b      	beq.n	80113b6 <xTaskIncrementTick+0x4a>
 801139e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a2:	b672      	cpsid	i
 80113a4:	f383 8811 	msr	BASEPRI, r3
 80113a8:	f3bf 8f6f 	isb	sy
 80113ac:	f3bf 8f4f 	dsb	sy
 80113b0:	b662      	cpsie	i
 80113b2:	603b      	str	r3, [r7, #0]
 80113b4:	e7fe      	b.n	80113b4 <xTaskIncrementTick+0x48>
 80113b6:	4b41      	ldr	r3, [pc, #260]	; (80114bc <xTaskIncrementTick+0x150>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	60fb      	str	r3, [r7, #12]
 80113bc:	4b40      	ldr	r3, [pc, #256]	; (80114c0 <xTaskIncrementTick+0x154>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a3e      	ldr	r2, [pc, #248]	; (80114bc <xTaskIncrementTick+0x150>)
 80113c2:	6013      	str	r3, [r2, #0]
 80113c4:	4a3e      	ldr	r2, [pc, #248]	; (80114c0 <xTaskIncrementTick+0x154>)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6013      	str	r3, [r2, #0]
 80113ca:	4b3e      	ldr	r3, [pc, #248]	; (80114c4 <xTaskIncrementTick+0x158>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	3301      	adds	r3, #1
 80113d0:	4a3c      	ldr	r2, [pc, #240]	; (80114c4 <xTaskIncrementTick+0x158>)
 80113d2:	6013      	str	r3, [r2, #0]
 80113d4:	f000 facc 	bl	8011970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80113d8:	4b3b      	ldr	r3, [pc, #236]	; (80114c8 <xTaskIncrementTick+0x15c>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	693a      	ldr	r2, [r7, #16]
 80113de:	429a      	cmp	r2, r3
 80113e0:	d348      	bcc.n	8011474 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113e2:	4b36      	ldr	r3, [pc, #216]	; (80114bc <xTaskIncrementTick+0x150>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d104      	bne.n	80113f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113ec:	4b36      	ldr	r3, [pc, #216]	; (80114c8 <xTaskIncrementTick+0x15c>)
 80113ee:	f04f 32ff 	mov.w	r2, #4294967295
 80113f2:	601a      	str	r2, [r3, #0]
					break;
 80113f4:	e03e      	b.n	8011474 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113f6:	4b31      	ldr	r3, [pc, #196]	; (80114bc <xTaskIncrementTick+0x150>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011406:	693a      	ldr	r2, [r7, #16]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	429a      	cmp	r2, r3
 801140c:	d203      	bcs.n	8011416 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801140e:	4a2e      	ldr	r2, [pc, #184]	; (80114c8 <xTaskIncrementTick+0x15c>)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011414:	e02e      	b.n	8011474 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	3304      	adds	r3, #4
 801141a:	4618      	mov	r0, r3
 801141c:	f7fe ff18 	bl	8010250 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011424:	2b00      	cmp	r3, #0
 8011426:	d004      	beq.n	8011432 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	3318      	adds	r3, #24
 801142c:	4618      	mov	r0, r3
 801142e:	f7fe ff0f 	bl	8010250 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011436:	2201      	movs	r2, #1
 8011438:	409a      	lsls	r2, r3
 801143a:	4b24      	ldr	r3, [pc, #144]	; (80114cc <xTaskIncrementTick+0x160>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4313      	orrs	r3, r2
 8011440:	4a22      	ldr	r2, [pc, #136]	; (80114cc <xTaskIncrementTick+0x160>)
 8011442:	6013      	str	r3, [r2, #0]
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011448:	4613      	mov	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4413      	add	r3, r2
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	4a1f      	ldr	r2, [pc, #124]	; (80114d0 <xTaskIncrementTick+0x164>)
 8011452:	441a      	add	r2, r3
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	3304      	adds	r3, #4
 8011458:	4619      	mov	r1, r3
 801145a:	4610      	mov	r0, r2
 801145c:	f7fe fe9b 	bl	8010196 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011464:	4b1b      	ldr	r3, [pc, #108]	; (80114d4 <xTaskIncrementTick+0x168>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146a:	429a      	cmp	r2, r3
 801146c:	d3b9      	bcc.n	80113e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801146e:	2301      	movs	r3, #1
 8011470:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011472:	e7b6      	b.n	80113e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011474:	4b17      	ldr	r3, [pc, #92]	; (80114d4 <xTaskIncrementTick+0x168>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801147a:	4915      	ldr	r1, [pc, #84]	; (80114d0 <xTaskIncrementTick+0x164>)
 801147c:	4613      	mov	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	4413      	add	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	440b      	add	r3, r1
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d907      	bls.n	801149c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 801148c:	2301      	movs	r3, #1
 801148e:	617b      	str	r3, [r7, #20]
 8011490:	e004      	b.n	801149c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011492:	4b11      	ldr	r3, [pc, #68]	; (80114d8 <xTaskIncrementTick+0x16c>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3301      	adds	r3, #1
 8011498:	4a0f      	ldr	r2, [pc, #60]	; (80114d8 <xTaskIncrementTick+0x16c>)
 801149a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801149c:	4b0f      	ldr	r3, [pc, #60]	; (80114dc <xTaskIncrementTick+0x170>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d001      	beq.n	80114a8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80114a4:	2301      	movs	r3, #1
 80114a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80114a8:	697b      	ldr	r3, [r7, #20]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	20000450 	.word	0x20000450
 80114b8:	2000042c 	.word	0x2000042c
 80114bc:	200003e0 	.word	0x200003e0
 80114c0:	200003e4 	.word	0x200003e4
 80114c4:	20000440 	.word	0x20000440
 80114c8:	20000448 	.word	0x20000448
 80114cc:	20000430 	.word	0x20000430
 80114d0:	2000032c 	.word	0x2000032c
 80114d4:	20000328 	.word	0x20000328
 80114d8:	20000438 	.word	0x20000438
 80114dc:	2000043c 	.word	0x2000043c

080114e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b088      	sub	sp, #32
 80114e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80114e6:	4b3a      	ldr	r3, [pc, #232]	; (80115d0 <vTaskSwitchContext+0xf0>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d003      	beq.n	80114f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80114ee:	4b39      	ldr	r3, [pc, #228]	; (80115d4 <vTaskSwitchContext+0xf4>)
 80114f0:	2201      	movs	r2, #1
 80114f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80114f4:	e067      	b.n	80115c6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80114f6:	4b37      	ldr	r3, [pc, #220]	; (80115d4 <vTaskSwitchContext+0xf4>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80114fc:	4b36      	ldr	r3, [pc, #216]	; (80115d8 <vTaskSwitchContext+0xf8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011502:	61fb      	str	r3, [r7, #28]
 8011504:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011508:	61bb      	str	r3, [r7, #24]
 801150a:	69fb      	ldr	r3, [r7, #28]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	69ba      	ldr	r2, [r7, #24]
 8011510:	429a      	cmp	r2, r3
 8011512:	d111      	bne.n	8011538 <vTaskSwitchContext+0x58>
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	3304      	adds	r3, #4
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	69ba      	ldr	r2, [r7, #24]
 801151c:	429a      	cmp	r2, r3
 801151e:	d10b      	bne.n	8011538 <vTaskSwitchContext+0x58>
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	3308      	adds	r3, #8
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	69ba      	ldr	r2, [r7, #24]
 8011528:	429a      	cmp	r2, r3
 801152a:	d105      	bne.n	8011538 <vTaskSwitchContext+0x58>
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	330c      	adds	r3, #12
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	69ba      	ldr	r2, [r7, #24]
 8011534:	429a      	cmp	r2, r3
 8011536:	d008      	beq.n	801154a <vTaskSwitchContext+0x6a>
 8011538:	4b27      	ldr	r3, [pc, #156]	; (80115d8 <vTaskSwitchContext+0xf8>)
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	4b26      	ldr	r3, [pc, #152]	; (80115d8 <vTaskSwitchContext+0xf8>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	3334      	adds	r3, #52	; 0x34
 8011542:	4619      	mov	r1, r3
 8011544:	4610      	mov	r0, r2
 8011546:	f7ef fbe4 	bl	8000d12 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801154a:	4b24      	ldr	r3, [pc, #144]	; (80115dc <vTaskSwitchContext+0xfc>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	fab3 f383 	clz	r3, r3
 8011556:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011558:	7afb      	ldrb	r3, [r7, #11]
 801155a:	f1c3 031f 	rsb	r3, r3, #31
 801155e:	617b      	str	r3, [r7, #20]
 8011560:	491f      	ldr	r1, [pc, #124]	; (80115e0 <vTaskSwitchContext+0x100>)
 8011562:	697a      	ldr	r2, [r7, #20]
 8011564:	4613      	mov	r3, r2
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	4413      	add	r3, r2
 801156a:	009b      	lsls	r3, r3, #2
 801156c:	440b      	add	r3, r1
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d10b      	bne.n	801158c <vTaskSwitchContext+0xac>
	__asm volatile
 8011574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011578:	b672      	cpsid	i
 801157a:	f383 8811 	msr	BASEPRI, r3
 801157e:	f3bf 8f6f 	isb	sy
 8011582:	f3bf 8f4f 	dsb	sy
 8011586:	b662      	cpsie	i
 8011588:	607b      	str	r3, [r7, #4]
 801158a:	e7fe      	b.n	801158a <vTaskSwitchContext+0xaa>
 801158c:	697a      	ldr	r2, [r7, #20]
 801158e:	4613      	mov	r3, r2
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	4a12      	ldr	r2, [pc, #72]	; (80115e0 <vTaskSwitchContext+0x100>)
 8011598:	4413      	add	r3, r2
 801159a:	613b      	str	r3, [r7, #16]
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	685a      	ldr	r2, [r3, #4]
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	605a      	str	r2, [r3, #4]
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	685a      	ldr	r2, [r3, #4]
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	3308      	adds	r3, #8
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d104      	bne.n	80115bc <vTaskSwitchContext+0xdc>
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	685a      	ldr	r2, [r3, #4]
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	605a      	str	r2, [r3, #4]
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	4a05      	ldr	r2, [pc, #20]	; (80115d8 <vTaskSwitchContext+0xf8>)
 80115c4:	6013      	str	r3, [r2, #0]
}
 80115c6:	bf00      	nop
 80115c8:	3720      	adds	r7, #32
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	20000450 	.word	0x20000450
 80115d4:	2000043c 	.word	0x2000043c
 80115d8:	20000328 	.word	0x20000328
 80115dc:	20000430 	.word	0x20000430
 80115e0:	2000032c 	.word	0x2000032c

080115e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d10b      	bne.n	801160c <vTaskPlaceOnEventList+0x28>
 80115f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f8:	b672      	cpsid	i
 80115fa:	f383 8811 	msr	BASEPRI, r3
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	f3bf 8f4f 	dsb	sy
 8011606:	b662      	cpsie	i
 8011608:	60fb      	str	r3, [r7, #12]
 801160a:	e7fe      	b.n	801160a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801160c:	4b07      	ldr	r3, [pc, #28]	; (801162c <vTaskPlaceOnEventList+0x48>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	3318      	adds	r3, #24
 8011612:	4619      	mov	r1, r3
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f7fe fde2 	bl	80101de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801161a:	2101      	movs	r1, #1
 801161c:	6838      	ldr	r0, [r7, #0]
 801161e:	f000 fa6d 	bl	8011afc <prvAddCurrentTaskToDelayedList>
}
 8011622:	bf00      	nop
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	20000328 	.word	0x20000328

08011630 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	68db      	ldr	r3, [r3, #12]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10b      	bne.n	801165e <xTaskRemoveFromEventList+0x2e>
 8011646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164a:	b672      	cpsid	i
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	b662      	cpsie	i
 801165a:	60fb      	str	r3, [r7, #12]
 801165c:	e7fe      	b.n	801165c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	3318      	adds	r3, #24
 8011662:	4618      	mov	r0, r3
 8011664:	f7fe fdf4 	bl	8010250 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011668:	4b1d      	ldr	r3, [pc, #116]	; (80116e0 <xTaskRemoveFromEventList+0xb0>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d11c      	bne.n	80116aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	3304      	adds	r3, #4
 8011674:	4618      	mov	r0, r3
 8011676:	f7fe fdeb 	bl	8010250 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801167e:	2201      	movs	r2, #1
 8011680:	409a      	lsls	r2, r3
 8011682:	4b18      	ldr	r3, [pc, #96]	; (80116e4 <xTaskRemoveFromEventList+0xb4>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4313      	orrs	r3, r2
 8011688:	4a16      	ldr	r2, [pc, #88]	; (80116e4 <xTaskRemoveFromEventList+0xb4>)
 801168a:	6013      	str	r3, [r2, #0]
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011690:	4613      	mov	r3, r2
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4a13      	ldr	r2, [pc, #76]	; (80116e8 <xTaskRemoveFromEventList+0xb8>)
 801169a:	441a      	add	r2, r3
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	3304      	adds	r3, #4
 80116a0:	4619      	mov	r1, r3
 80116a2:	4610      	mov	r0, r2
 80116a4:	f7fe fd77 	bl	8010196 <vListInsertEnd>
 80116a8:	e005      	b.n	80116b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	3318      	adds	r3, #24
 80116ae:	4619      	mov	r1, r3
 80116b0:	480e      	ldr	r0, [pc, #56]	; (80116ec <xTaskRemoveFromEventList+0xbc>)
 80116b2:	f7fe fd70 	bl	8010196 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ba:	4b0d      	ldr	r3, [pc, #52]	; (80116f0 <xTaskRemoveFromEventList+0xc0>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d905      	bls.n	80116d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80116c4:	2301      	movs	r3, #1
 80116c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80116c8:	4b0a      	ldr	r3, [pc, #40]	; (80116f4 <xTaskRemoveFromEventList+0xc4>)
 80116ca:	2201      	movs	r2, #1
 80116cc:	601a      	str	r2, [r3, #0]
 80116ce:	e001      	b.n	80116d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80116d0:	2300      	movs	r3, #0
 80116d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80116d4:	697b      	ldr	r3, [r7, #20]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3718      	adds	r7, #24
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	20000450 	.word	0x20000450
 80116e4:	20000430 	.word	0x20000430
 80116e8:	2000032c 	.word	0x2000032c
 80116ec:	200003e8 	.word	0x200003e8
 80116f0:	20000328 	.word	0x20000328
 80116f4:	2000043c 	.word	0x2000043c

080116f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011700:	4b06      	ldr	r3, [pc, #24]	; (801171c <vTaskInternalSetTimeOutState+0x24>)
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011708:	4b05      	ldr	r3, [pc, #20]	; (8011720 <vTaskInternalSetTimeOutState+0x28>)
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	605a      	str	r2, [r3, #4]
}
 8011710:	bf00      	nop
 8011712:	370c      	adds	r7, #12
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	20000440 	.word	0x20000440
 8011720:	2000042c 	.word	0x2000042c

08011724 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b088      	sub	sp, #32
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d10b      	bne.n	801174c <xTaskCheckForTimeOut+0x28>
 8011734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011738:	b672      	cpsid	i
 801173a:	f383 8811 	msr	BASEPRI, r3
 801173e:	f3bf 8f6f 	isb	sy
 8011742:	f3bf 8f4f 	dsb	sy
 8011746:	b662      	cpsie	i
 8011748:	613b      	str	r3, [r7, #16]
 801174a:	e7fe      	b.n	801174a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10b      	bne.n	801176a <xTaskCheckForTimeOut+0x46>
 8011752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011756:	b672      	cpsid	i
 8011758:	f383 8811 	msr	BASEPRI, r3
 801175c:	f3bf 8f6f 	isb	sy
 8011760:	f3bf 8f4f 	dsb	sy
 8011764:	b662      	cpsie	i
 8011766:	60fb      	str	r3, [r7, #12]
 8011768:	e7fe      	b.n	8011768 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801176a:	f000 fb35 	bl	8011dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801176e:	4b1d      	ldr	r3, [pc, #116]	; (80117e4 <xTaskCheckForTimeOut+0xc0>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	69ba      	ldr	r2, [r7, #24]
 801177a:	1ad3      	subs	r3, r2, r3
 801177c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011786:	d102      	bne.n	801178e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011788:	2300      	movs	r3, #0
 801178a:	61fb      	str	r3, [r7, #28]
 801178c:	e023      	b.n	80117d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	4b15      	ldr	r3, [pc, #84]	; (80117e8 <xTaskCheckForTimeOut+0xc4>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	429a      	cmp	r2, r3
 8011798:	d007      	beq.n	80117aa <xTaskCheckForTimeOut+0x86>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	69ba      	ldr	r2, [r7, #24]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d302      	bcc.n	80117aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80117a4:	2301      	movs	r3, #1
 80117a6:	61fb      	str	r3, [r7, #28]
 80117a8:	e015      	b.n	80117d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	697a      	ldr	r2, [r7, #20]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d20b      	bcs.n	80117cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	1ad2      	subs	r2, r2, r3
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f7ff ff99 	bl	80116f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80117c6:	2300      	movs	r3, #0
 80117c8:	61fb      	str	r3, [r7, #28]
 80117ca:	e004      	b.n	80117d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2200      	movs	r2, #0
 80117d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80117d2:	2301      	movs	r3, #1
 80117d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80117d6:	f000 fb31 	bl	8011e3c <vPortExitCritical>

	return xReturn;
 80117da:	69fb      	ldr	r3, [r7, #28]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3720      	adds	r7, #32
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	2000042c 	.word	0x2000042c
 80117e8:	20000440 	.word	0x20000440

080117ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80117ec:	b480      	push	{r7}
 80117ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80117f0:	4b03      	ldr	r3, [pc, #12]	; (8011800 <vTaskMissedYield+0x14>)
 80117f2:	2201      	movs	r2, #1
 80117f4:	601a      	str	r2, [r3, #0]
}
 80117f6:	bf00      	nop
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr
 8011800:	2000043c 	.word	0x2000043c

08011804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801180c:	f000 f854 	bl	80118b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011810:	4b07      	ldr	r3, [pc, #28]	; (8011830 <prvIdleTask+0x2c>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	2b01      	cmp	r3, #1
 8011816:	d907      	bls.n	8011828 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011818:	4b06      	ldr	r3, [pc, #24]	; (8011834 <prvIdleTask+0x30>)
 801181a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801181e:	601a      	str	r2, [r3, #0]
 8011820:	f3bf 8f4f 	dsb	sy
 8011824:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011828:	f7ef fa6c 	bl	8000d04 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801182c:	e7ee      	b.n	801180c <prvIdleTask+0x8>
 801182e:	bf00      	nop
 8011830:	2000032c 	.word	0x2000032c
 8011834:	e000ed04 	.word	0xe000ed04

08011838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801183e:	2300      	movs	r3, #0
 8011840:	607b      	str	r3, [r7, #4]
 8011842:	e00c      	b.n	801185e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	4613      	mov	r3, r2
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4413      	add	r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4a12      	ldr	r2, [pc, #72]	; (8011898 <prvInitialiseTaskLists+0x60>)
 8011850:	4413      	add	r3, r2
 8011852:	4618      	mov	r0, r3
 8011854:	f7fe fc72 	bl	801013c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	3301      	adds	r3, #1
 801185c:	607b      	str	r3, [r7, #4]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2b06      	cmp	r3, #6
 8011862:	d9ef      	bls.n	8011844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011864:	480d      	ldr	r0, [pc, #52]	; (801189c <prvInitialiseTaskLists+0x64>)
 8011866:	f7fe fc69 	bl	801013c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801186a:	480d      	ldr	r0, [pc, #52]	; (80118a0 <prvInitialiseTaskLists+0x68>)
 801186c:	f7fe fc66 	bl	801013c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011870:	480c      	ldr	r0, [pc, #48]	; (80118a4 <prvInitialiseTaskLists+0x6c>)
 8011872:	f7fe fc63 	bl	801013c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011876:	480c      	ldr	r0, [pc, #48]	; (80118a8 <prvInitialiseTaskLists+0x70>)
 8011878:	f7fe fc60 	bl	801013c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801187c:	480b      	ldr	r0, [pc, #44]	; (80118ac <prvInitialiseTaskLists+0x74>)
 801187e:	f7fe fc5d 	bl	801013c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011882:	4b0b      	ldr	r3, [pc, #44]	; (80118b0 <prvInitialiseTaskLists+0x78>)
 8011884:	4a05      	ldr	r2, [pc, #20]	; (801189c <prvInitialiseTaskLists+0x64>)
 8011886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011888:	4b0a      	ldr	r3, [pc, #40]	; (80118b4 <prvInitialiseTaskLists+0x7c>)
 801188a:	4a05      	ldr	r2, [pc, #20]	; (80118a0 <prvInitialiseTaskLists+0x68>)
 801188c:	601a      	str	r2, [r3, #0]
}
 801188e:	bf00      	nop
 8011890:	3708      	adds	r7, #8
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	2000032c 	.word	0x2000032c
 801189c:	200003b8 	.word	0x200003b8
 80118a0:	200003cc 	.word	0x200003cc
 80118a4:	200003e8 	.word	0x200003e8
 80118a8:	200003fc 	.word	0x200003fc
 80118ac:	20000414 	.word	0x20000414
 80118b0:	200003e0 	.word	0x200003e0
 80118b4:	200003e4 	.word	0x200003e4

080118b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118be:	e019      	b.n	80118f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80118c0:	f000 fa8a 	bl	8011dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <prvCheckTasksWaitingTermination+0x4c>)
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	3304      	adds	r3, #4
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7fe fcbd 	bl	8010250 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80118d6:	4b0c      	ldr	r3, [pc, #48]	; (8011908 <prvCheckTasksWaitingTermination+0x50>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3b01      	subs	r3, #1
 80118dc:	4a0a      	ldr	r2, [pc, #40]	; (8011908 <prvCheckTasksWaitingTermination+0x50>)
 80118de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80118e0:	4b0a      	ldr	r3, [pc, #40]	; (801190c <prvCheckTasksWaitingTermination+0x54>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	3b01      	subs	r3, #1
 80118e6:	4a09      	ldr	r2, [pc, #36]	; (801190c <prvCheckTasksWaitingTermination+0x54>)
 80118e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80118ea:	f000 faa7 	bl	8011e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 f80e 	bl	8011910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118f4:	4b05      	ldr	r3, [pc, #20]	; (801190c <prvCheckTasksWaitingTermination+0x54>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d1e1      	bne.n	80118c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	200003fc 	.word	0x200003fc
 8011908:	20000428 	.word	0x20000428
 801190c:	20000410 	.word	0x20000410

08011910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801191e:	2b00      	cmp	r3, #0
 8011920:	d108      	bne.n	8011934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011926:	4618      	mov	r0, r3
 8011928:	f000 fc44 	bl	80121b4 <vPortFree>
				vPortFree( pxTCB );
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 fc41 	bl	80121b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011932:	e019      	b.n	8011968 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801193a:	2b01      	cmp	r3, #1
 801193c:	d103      	bne.n	8011946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 fc38 	bl	80121b4 <vPortFree>
	}
 8011944:	e010      	b.n	8011968 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801194c:	2b02      	cmp	r3, #2
 801194e:	d00b      	beq.n	8011968 <prvDeleteTCB+0x58>
 8011950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011954:	b672      	cpsid	i
 8011956:	f383 8811 	msr	BASEPRI, r3
 801195a:	f3bf 8f6f 	isb	sy
 801195e:	f3bf 8f4f 	dsb	sy
 8011962:	b662      	cpsie	i
 8011964:	60fb      	str	r3, [r7, #12]
 8011966:	e7fe      	b.n	8011966 <prvDeleteTCB+0x56>
	}
 8011968:	bf00      	nop
 801196a:	3710      	adds	r7, #16
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011970:	b480      	push	{r7}
 8011972:	b083      	sub	sp, #12
 8011974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011976:	4b0c      	ldr	r3, [pc, #48]	; (80119a8 <prvResetNextTaskUnblockTime+0x38>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d104      	bne.n	801198a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011980:	4b0a      	ldr	r3, [pc, #40]	; (80119ac <prvResetNextTaskUnblockTime+0x3c>)
 8011982:	f04f 32ff 	mov.w	r2, #4294967295
 8011986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011988:	e008      	b.n	801199c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801198a:	4b07      	ldr	r3, [pc, #28]	; (80119a8 <prvResetNextTaskUnblockTime+0x38>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	4a04      	ldr	r2, [pc, #16]	; (80119ac <prvResetNextTaskUnblockTime+0x3c>)
 801199a:	6013      	str	r3, [r2, #0]
}
 801199c:	bf00      	nop
 801199e:	370c      	adds	r7, #12
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr
 80119a8:	200003e0 	.word	0x200003e0
 80119ac:	20000448 	.word	0x20000448

080119b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80119b0:	b480      	push	{r7}
 80119b2:	b083      	sub	sp, #12
 80119b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80119b6:	4b0b      	ldr	r3, [pc, #44]	; (80119e4 <xTaskGetSchedulerState+0x34>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d102      	bne.n	80119c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80119be:	2301      	movs	r3, #1
 80119c0:	607b      	str	r3, [r7, #4]
 80119c2:	e008      	b.n	80119d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119c4:	4b08      	ldr	r3, [pc, #32]	; (80119e8 <xTaskGetSchedulerState+0x38>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d102      	bne.n	80119d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80119cc:	2302      	movs	r3, #2
 80119ce:	607b      	str	r3, [r7, #4]
 80119d0:	e001      	b.n	80119d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80119d2:	2300      	movs	r3, #0
 80119d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80119d6:	687b      	ldr	r3, [r7, #4]
	}
 80119d8:	4618      	mov	r0, r3
 80119da:	370c      	adds	r7, #12
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	20000434 	.word	0x20000434
 80119e8:	20000450 	.word	0x20000450

080119ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b086      	sub	sp, #24
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119f8:	2300      	movs	r3, #0
 80119fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d070      	beq.n	8011ae4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a02:	4b3b      	ldr	r3, [pc, #236]	; (8011af0 <xTaskPriorityDisinherit+0x104>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	693a      	ldr	r2, [r7, #16]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d00b      	beq.n	8011a24 <xTaskPriorityDisinherit+0x38>
 8011a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a10:	b672      	cpsid	i
 8011a12:	f383 8811 	msr	BASEPRI, r3
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	f3bf 8f4f 	dsb	sy
 8011a1e:	b662      	cpsie	i
 8011a20:	60fb      	str	r3, [r7, #12]
 8011a22:	e7fe      	b.n	8011a22 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10b      	bne.n	8011a44 <xTaskPriorityDisinherit+0x58>
 8011a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a30:	b672      	cpsid	i
 8011a32:	f383 8811 	msr	BASEPRI, r3
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	b662      	cpsie	i
 8011a40:	60bb      	str	r3, [r7, #8]
 8011a42:	e7fe      	b.n	8011a42 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a48:	1e5a      	subs	r2, r3, #1
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d044      	beq.n	8011ae4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d140      	bne.n	8011ae4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	3304      	adds	r3, #4
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fe fbf2 	bl	8010250 <uxListRemove>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d115      	bne.n	8011a9e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a76:	491f      	ldr	r1, [pc, #124]	; (8011af4 <xTaskPriorityDisinherit+0x108>)
 8011a78:	4613      	mov	r3, r2
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4413      	add	r3, r2
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	440b      	add	r3, r1
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10a      	bne.n	8011a9e <xTaskPriorityDisinherit+0xb2>
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a8c:	2201      	movs	r2, #1
 8011a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011a92:	43da      	mvns	r2, r3
 8011a94:	4b18      	ldr	r3, [pc, #96]	; (8011af8 <xTaskPriorityDisinherit+0x10c>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4013      	ands	r3, r2
 8011a9a:	4a17      	ldr	r2, [pc, #92]	; (8011af8 <xTaskPriorityDisinherit+0x10c>)
 8011a9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aaa:	f1c3 0207 	rsb	r2, r3, #7
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	409a      	lsls	r2, r3
 8011aba:	4b0f      	ldr	r3, [pc, #60]	; (8011af8 <xTaskPriorityDisinherit+0x10c>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	4a0d      	ldr	r2, [pc, #52]	; (8011af8 <xTaskPriorityDisinherit+0x10c>)
 8011ac2:	6013      	str	r3, [r2, #0]
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac8:	4613      	mov	r3, r2
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4413      	add	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4a08      	ldr	r2, [pc, #32]	; (8011af4 <xTaskPriorityDisinherit+0x108>)
 8011ad2:	441a      	add	r2, r3
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	4619      	mov	r1, r3
 8011ada:	4610      	mov	r0, r2
 8011adc:	f7fe fb5b 	bl	8010196 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ae4:	697b      	ldr	r3, [r7, #20]
	}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3718      	adds	r7, #24
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	20000328 	.word	0x20000328
 8011af4:	2000032c 	.word	0x2000032c
 8011af8:	20000430 	.word	0x20000430

08011afc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011b06:	4b29      	ldr	r3, [pc, #164]	; (8011bac <prvAddCurrentTaskToDelayedList+0xb0>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b0c:	4b28      	ldr	r3, [pc, #160]	; (8011bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	3304      	adds	r3, #4
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fe fb9c 	bl	8010250 <uxListRemove>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d10b      	bne.n	8011b36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011b1e:	4b24      	ldr	r3, [pc, #144]	; (8011bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b24:	2201      	movs	r2, #1
 8011b26:	fa02 f303 	lsl.w	r3, r2, r3
 8011b2a:	43da      	mvns	r2, r3
 8011b2c:	4b21      	ldr	r3, [pc, #132]	; (8011bb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4013      	ands	r3, r2
 8011b32:	4a20      	ldr	r2, [pc, #128]	; (8011bb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011b34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b3c:	d10a      	bne.n	8011b54 <prvAddCurrentTaskToDelayedList+0x58>
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d007      	beq.n	8011b54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b44:	4b1a      	ldr	r3, [pc, #104]	; (8011bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	3304      	adds	r3, #4
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	481a      	ldr	r0, [pc, #104]	; (8011bb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011b4e:	f7fe fb22 	bl	8010196 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011b52:	e026      	b.n	8011ba2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011b54:	68fa      	ldr	r2, [r7, #12]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	4413      	add	r3, r2
 8011b5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011b5c:	4b14      	ldr	r3, [pc, #80]	; (8011bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	68ba      	ldr	r2, [r7, #8]
 8011b62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d209      	bcs.n	8011b80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b6c:	4b13      	ldr	r3, [pc, #76]	; (8011bbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	4b0f      	ldr	r3, [pc, #60]	; (8011bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	3304      	adds	r3, #4
 8011b76:	4619      	mov	r1, r3
 8011b78:	4610      	mov	r0, r2
 8011b7a:	f7fe fb30 	bl	80101de <vListInsert>
}
 8011b7e:	e010      	b.n	8011ba2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b80:	4b0f      	ldr	r3, [pc, #60]	; (8011bc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	4b0a      	ldr	r3, [pc, #40]	; (8011bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	3304      	adds	r3, #4
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	f7fe fb26 	bl	80101de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011b92:	4b0c      	ldr	r3, [pc, #48]	; (8011bc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	68ba      	ldr	r2, [r7, #8]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d202      	bcs.n	8011ba2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011b9c:	4a09      	ldr	r2, [pc, #36]	; (8011bc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	6013      	str	r3, [r2, #0]
}
 8011ba2:	bf00      	nop
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	2000042c 	.word	0x2000042c
 8011bb0:	20000328 	.word	0x20000328
 8011bb4:	20000430 	.word	0x20000430
 8011bb8:	20000414 	.word	0x20000414
 8011bbc:	200003e4 	.word	0x200003e4
 8011bc0:	200003e0 	.word	0x200003e0
 8011bc4:	20000448 	.word	0x20000448

08011bc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	3b04      	subs	r3, #4
 8011bd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	3b04      	subs	r3, #4
 8011be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	f023 0201 	bic.w	r2, r3, #1
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	3b04      	subs	r3, #4
 8011bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011bf8:	4a0c      	ldr	r2, [pc, #48]	; (8011c2c <pxPortInitialiseStack+0x64>)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	3b14      	subs	r3, #20
 8011c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	3b04      	subs	r3, #4
 8011c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	f06f 0202 	mvn.w	r2, #2
 8011c16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	3b20      	subs	r3, #32
 8011c1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr
 8011c2c:	08011c31 	.word	0x08011c31

08011c30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011c30:	b480      	push	{r7}
 8011c32:	b085      	sub	sp, #20
 8011c34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011c36:	2300      	movs	r3, #0
 8011c38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011c3a:	4b13      	ldr	r3, [pc, #76]	; (8011c88 <prvTaskExitError+0x58>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c42:	d00b      	beq.n	8011c5c <prvTaskExitError+0x2c>
 8011c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c48:	b672      	cpsid	i
 8011c4a:	f383 8811 	msr	BASEPRI, r3
 8011c4e:	f3bf 8f6f 	isb	sy
 8011c52:	f3bf 8f4f 	dsb	sy
 8011c56:	b662      	cpsie	i
 8011c58:	60fb      	str	r3, [r7, #12]
 8011c5a:	e7fe      	b.n	8011c5a <prvTaskExitError+0x2a>
 8011c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c60:	b672      	cpsid	i
 8011c62:	f383 8811 	msr	BASEPRI, r3
 8011c66:	f3bf 8f6f 	isb	sy
 8011c6a:	f3bf 8f4f 	dsb	sy
 8011c6e:	b662      	cpsie	i
 8011c70:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011c72:	bf00      	nop
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d0fc      	beq.n	8011c74 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011c7a:	bf00      	nop
 8011c7c:	3714      	adds	r7, #20
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	2000002c 	.word	0x2000002c
 8011c8c:	00000000 	.word	0x00000000

08011c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011c90:	4b07      	ldr	r3, [pc, #28]	; (8011cb0 <pxCurrentTCBConst2>)
 8011c92:	6819      	ldr	r1, [r3, #0]
 8011c94:	6808      	ldr	r0, [r1, #0]
 8011c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9a:	f380 8809 	msr	PSP, r0
 8011c9e:	f3bf 8f6f 	isb	sy
 8011ca2:	f04f 0000 	mov.w	r0, #0
 8011ca6:	f380 8811 	msr	BASEPRI, r0
 8011caa:	4770      	bx	lr
 8011cac:	f3af 8000 	nop.w

08011cb0 <pxCurrentTCBConst2>:
 8011cb0:	20000328 	.word	0x20000328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011cb4:	bf00      	nop
 8011cb6:	bf00      	nop

08011cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011cb8:	4808      	ldr	r0, [pc, #32]	; (8011cdc <prvPortStartFirstTask+0x24>)
 8011cba:	6800      	ldr	r0, [r0, #0]
 8011cbc:	6800      	ldr	r0, [r0, #0]
 8011cbe:	f380 8808 	msr	MSP, r0
 8011cc2:	f04f 0000 	mov.w	r0, #0
 8011cc6:	f380 8814 	msr	CONTROL, r0
 8011cca:	b662      	cpsie	i
 8011ccc:	b661      	cpsie	f
 8011cce:	f3bf 8f4f 	dsb	sy
 8011cd2:	f3bf 8f6f 	isb	sy
 8011cd6:	df00      	svc	0
 8011cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011cda:	bf00      	nop
 8011cdc:	e000ed08 	.word	0xe000ed08

08011ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011ce6:	4b36      	ldr	r3, [pc, #216]	; (8011dc0 <xPortStartScheduler+0xe0>)
 8011ce8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	22ff      	movs	r2, #255	; 0xff
 8011cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011d00:	78fb      	ldrb	r3, [r7, #3]
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	4b2e      	ldr	r3, [pc, #184]	; (8011dc4 <xPortStartScheduler+0xe4>)
 8011d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011d0e:	4b2e      	ldr	r3, [pc, #184]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d10:	2207      	movs	r2, #7
 8011d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011d14:	e009      	b.n	8011d2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011d16:	4b2c      	ldr	r3, [pc, #176]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	3b01      	subs	r3, #1
 8011d1c:	4a2a      	ldr	r2, [pc, #168]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	005b      	lsls	r3, r3, #1
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011d2a:	78fb      	ldrb	r3, [r7, #3]
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d32:	2b80      	cmp	r3, #128	; 0x80
 8011d34:	d0ef      	beq.n	8011d16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011d36:	4b24      	ldr	r3, [pc, #144]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	f1c3 0307 	rsb	r3, r3, #7
 8011d3e:	2b04      	cmp	r3, #4
 8011d40:	d00b      	beq.n	8011d5a <xPortStartScheduler+0x7a>
 8011d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d46:	b672      	cpsid	i
 8011d48:	f383 8811 	msr	BASEPRI, r3
 8011d4c:	f3bf 8f6f 	isb	sy
 8011d50:	f3bf 8f4f 	dsb	sy
 8011d54:	b662      	cpsie	i
 8011d56:	60bb      	str	r3, [r7, #8]
 8011d58:	e7fe      	b.n	8011d58 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011d5a:	4b1b      	ldr	r3, [pc, #108]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	021b      	lsls	r3, r3, #8
 8011d60:	4a19      	ldr	r2, [pc, #100]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d62:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011d64:	4b18      	ldr	r3, [pc, #96]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011d6c:	4a16      	ldr	r2, [pc, #88]	; (8011dc8 <xPortStartScheduler+0xe8>)
 8011d6e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	b2da      	uxtb	r2, r3
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011d78:	4b14      	ldr	r3, [pc, #80]	; (8011dcc <xPortStartScheduler+0xec>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	4a13      	ldr	r2, [pc, #76]	; (8011dcc <xPortStartScheduler+0xec>)
 8011d7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011d82:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011d84:	4b11      	ldr	r3, [pc, #68]	; (8011dcc <xPortStartScheduler+0xec>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4a10      	ldr	r2, [pc, #64]	; (8011dcc <xPortStartScheduler+0xec>)
 8011d8a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011d8e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011d90:	f000 f8d4 	bl	8011f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011d94:	4b0e      	ldr	r3, [pc, #56]	; (8011dd0 <xPortStartScheduler+0xf0>)
 8011d96:	2200      	movs	r2, #0
 8011d98:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011d9a:	f000 f8f3 	bl	8011f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011d9e:	4b0d      	ldr	r3, [pc, #52]	; (8011dd4 <xPortStartScheduler+0xf4>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	4a0c      	ldr	r2, [pc, #48]	; (8011dd4 <xPortStartScheduler+0xf4>)
 8011da4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011da8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011daa:	f7ff ff85 	bl	8011cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011dae:	f7ff fb97 	bl	80114e0 <vTaskSwitchContext>
	prvTaskExitError();
 8011db2:	f7ff ff3d 	bl	8011c30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	e000e400 	.word	0xe000e400
 8011dc4:	20000454 	.word	0x20000454
 8011dc8:	20000458 	.word	0x20000458
 8011dcc:	e000ed20 	.word	0xe000ed20
 8011dd0:	2000002c 	.word	0x2000002c
 8011dd4:	e000ef34 	.word	0xe000ef34

08011dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de2:	b672      	cpsid	i
 8011de4:	f383 8811 	msr	BASEPRI, r3
 8011de8:	f3bf 8f6f 	isb	sy
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	b662      	cpsie	i
 8011df2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011df4:	4b0f      	ldr	r3, [pc, #60]	; (8011e34 <vPortEnterCritical+0x5c>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	3301      	adds	r3, #1
 8011dfa:	4a0e      	ldr	r2, [pc, #56]	; (8011e34 <vPortEnterCritical+0x5c>)
 8011dfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011dfe:	4b0d      	ldr	r3, [pc, #52]	; (8011e34 <vPortEnterCritical+0x5c>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d110      	bne.n	8011e28 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011e06:	4b0c      	ldr	r3, [pc, #48]	; (8011e38 <vPortEnterCritical+0x60>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <vPortEnterCritical+0x50>
 8011e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e14:	b672      	cpsid	i
 8011e16:	f383 8811 	msr	BASEPRI, r3
 8011e1a:	f3bf 8f6f 	isb	sy
 8011e1e:	f3bf 8f4f 	dsb	sy
 8011e22:	b662      	cpsie	i
 8011e24:	603b      	str	r3, [r7, #0]
 8011e26:	e7fe      	b.n	8011e26 <vPortEnterCritical+0x4e>
	}
}
 8011e28:	bf00      	nop
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr
 8011e34:	2000002c 	.word	0x2000002c
 8011e38:	e000ed04 	.word	0xe000ed04

08011e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011e42:	4b12      	ldr	r3, [pc, #72]	; (8011e8c <vPortExitCritical+0x50>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10b      	bne.n	8011e62 <vPortExitCritical+0x26>
 8011e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4e:	b672      	cpsid	i
 8011e50:	f383 8811 	msr	BASEPRI, r3
 8011e54:	f3bf 8f6f 	isb	sy
 8011e58:	f3bf 8f4f 	dsb	sy
 8011e5c:	b662      	cpsie	i
 8011e5e:	607b      	str	r3, [r7, #4]
 8011e60:	e7fe      	b.n	8011e60 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8011e62:	4b0a      	ldr	r3, [pc, #40]	; (8011e8c <vPortExitCritical+0x50>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	3b01      	subs	r3, #1
 8011e68:	4a08      	ldr	r2, [pc, #32]	; (8011e8c <vPortExitCritical+0x50>)
 8011e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011e6c:	4b07      	ldr	r3, [pc, #28]	; (8011e8c <vPortExitCritical+0x50>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d104      	bne.n	8011e7e <vPortExitCritical+0x42>
 8011e74:	2300      	movs	r3, #0
 8011e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011e7e:	bf00      	nop
 8011e80:	370c      	adds	r7, #12
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop
 8011e8c:	2000002c 	.word	0x2000002c

08011e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011e90:	f3ef 8009 	mrs	r0, PSP
 8011e94:	f3bf 8f6f 	isb	sy
 8011e98:	4b15      	ldr	r3, [pc, #84]	; (8011ef0 <pxCurrentTCBConst>)
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	f01e 0f10 	tst.w	lr, #16
 8011ea0:	bf08      	it	eq
 8011ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eaa:	6010      	str	r0, [r2, #0]
 8011eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011eb4:	b672      	cpsid	i
 8011eb6:	f380 8811 	msr	BASEPRI, r0
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	b662      	cpsie	i
 8011ec4:	f7ff fb0c 	bl	80114e0 <vTaskSwitchContext>
 8011ec8:	f04f 0000 	mov.w	r0, #0
 8011ecc:	f380 8811 	msr	BASEPRI, r0
 8011ed0:	bc09      	pop	{r0, r3}
 8011ed2:	6819      	ldr	r1, [r3, #0]
 8011ed4:	6808      	ldr	r0, [r1, #0]
 8011ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eda:	f01e 0f10 	tst.w	lr, #16
 8011ede:	bf08      	it	eq
 8011ee0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011ee4:	f380 8809 	msr	PSP, r0
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop

08011ef0 <pxCurrentTCBConst>:
 8011ef0:	20000328 	.word	0x20000328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011ef4:	bf00      	nop
 8011ef6:	bf00      	nop

08011ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
	__asm volatile
 8011efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f02:	b672      	cpsid	i
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	b662      	cpsie	i
 8011f12:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011f14:	f7ff fa2a 	bl	801136c <xTaskIncrementTick>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d003      	beq.n	8011f26 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011f1e:	4b06      	ldr	r3, [pc, #24]	; (8011f38 <SysTick_Handler+0x40>)
 8011f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f24:	601a      	str	r2, [r3, #0]
 8011f26:	2300      	movs	r3, #0
 8011f28:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011f30:	bf00      	nop
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	e000ed04 	.word	0xe000ed04

08011f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011f40:	4b0b      	ldr	r3, [pc, #44]	; (8011f70 <vPortSetupTimerInterrupt+0x34>)
 8011f42:	2200      	movs	r2, #0
 8011f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011f46:	4b0b      	ldr	r3, [pc, #44]	; (8011f74 <vPortSetupTimerInterrupt+0x38>)
 8011f48:	2200      	movs	r2, #0
 8011f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011f4c:	4b0a      	ldr	r3, [pc, #40]	; (8011f78 <vPortSetupTimerInterrupt+0x3c>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a0a      	ldr	r2, [pc, #40]	; (8011f7c <vPortSetupTimerInterrupt+0x40>)
 8011f52:	fba2 2303 	umull	r2, r3, r2, r3
 8011f56:	099b      	lsrs	r3, r3, #6
 8011f58:	4a09      	ldr	r2, [pc, #36]	; (8011f80 <vPortSetupTimerInterrupt+0x44>)
 8011f5a:	3b01      	subs	r3, #1
 8011f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011f5e:	4b04      	ldr	r3, [pc, #16]	; (8011f70 <vPortSetupTimerInterrupt+0x34>)
 8011f60:	2207      	movs	r2, #7
 8011f62:	601a      	str	r2, [r3, #0]
}
 8011f64:	bf00      	nop
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr
 8011f6e:	bf00      	nop
 8011f70:	e000e010 	.word	0xe000e010
 8011f74:	e000e018 	.word	0xe000e018
 8011f78:	20000000 	.word	0x20000000
 8011f7c:	10624dd3 	.word	0x10624dd3
 8011f80:	e000e014 	.word	0xe000e014

08011f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011f94 <vPortEnableVFP+0x10>
 8011f88:	6801      	ldr	r1, [r0, #0]
 8011f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011f8e:	6001      	str	r1, [r0, #0]
 8011f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011f92:	bf00      	nop
 8011f94:	e000ed88 	.word	0xe000ed88

08011f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011f9e:	f3ef 8305 	mrs	r3, IPSR
 8011fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2b0f      	cmp	r3, #15
 8011fa8:	d915      	bls.n	8011fd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011faa:	4a18      	ldr	r2, [pc, #96]	; (801200c <vPortValidateInterruptPriority+0x74>)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	4413      	add	r3, r2
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011fb4:	4b16      	ldr	r3, [pc, #88]	; (8012010 <vPortValidateInterruptPriority+0x78>)
 8011fb6:	781b      	ldrb	r3, [r3, #0]
 8011fb8:	7afa      	ldrb	r2, [r7, #11]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d20b      	bcs.n	8011fd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc2:	b672      	cpsid	i
 8011fc4:	f383 8811 	msr	BASEPRI, r3
 8011fc8:	f3bf 8f6f 	isb	sy
 8011fcc:	f3bf 8f4f 	dsb	sy
 8011fd0:	b662      	cpsie	i
 8011fd2:	607b      	str	r3, [r7, #4]
 8011fd4:	e7fe      	b.n	8011fd4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011fd6:	4b0f      	ldr	r3, [pc, #60]	; (8012014 <vPortValidateInterruptPriority+0x7c>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011fde:	4b0e      	ldr	r3, [pc, #56]	; (8012018 <vPortValidateInterruptPriority+0x80>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d90b      	bls.n	8011ffe <vPortValidateInterruptPriority+0x66>
 8011fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fea:	b672      	cpsid	i
 8011fec:	f383 8811 	msr	BASEPRI, r3
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	f3bf 8f4f 	dsb	sy
 8011ff8:	b662      	cpsie	i
 8011ffa:	603b      	str	r3, [r7, #0]
 8011ffc:	e7fe      	b.n	8011ffc <vPortValidateInterruptPriority+0x64>
	}
 8011ffe:	bf00      	nop
 8012000:	3714      	adds	r7, #20
 8012002:	46bd      	mov	sp, r7
 8012004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	e000e3f0 	.word	0xe000e3f0
 8012010:	20000454 	.word	0x20000454
 8012014:	e000ed0c 	.word	0xe000ed0c
 8012018:	20000458 	.word	0x20000458

0801201c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b08a      	sub	sp, #40	; 0x28
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012024:	2300      	movs	r3, #0
 8012026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012028:	f7ff f8d2 	bl	80111d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801202c:	4b5c      	ldr	r3, [pc, #368]	; (80121a0 <pvPortMalloc+0x184>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d101      	bne.n	8012038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012034:	f000 f91a 	bl	801226c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012038:	4b5a      	ldr	r3, [pc, #360]	; (80121a4 <pvPortMalloc+0x188>)
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	4013      	ands	r3, r2
 8012040:	2b00      	cmp	r3, #0
 8012042:	f040 8090 	bne.w	8012166 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d01e      	beq.n	801208a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801204c:	2208      	movs	r2, #8
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	4413      	add	r3, r2
 8012052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f003 0307 	and.w	r3, r3, #7
 801205a:	2b00      	cmp	r3, #0
 801205c:	d015      	beq.n	801208a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f023 0307 	bic.w	r3, r3, #7
 8012064:	3308      	adds	r3, #8
 8012066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f003 0307 	and.w	r3, r3, #7
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00b      	beq.n	801208a <pvPortMalloc+0x6e>
 8012072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012076:	b672      	cpsid	i
 8012078:	f383 8811 	msr	BASEPRI, r3
 801207c:	f3bf 8f6f 	isb	sy
 8012080:	f3bf 8f4f 	dsb	sy
 8012084:	b662      	cpsie	i
 8012086:	617b      	str	r3, [r7, #20]
 8012088:	e7fe      	b.n	8012088 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d06a      	beq.n	8012166 <pvPortMalloc+0x14a>
 8012090:	4b45      	ldr	r3, [pc, #276]	; (80121a8 <pvPortMalloc+0x18c>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	429a      	cmp	r2, r3
 8012098:	d865      	bhi.n	8012166 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801209a:	4b44      	ldr	r3, [pc, #272]	; (80121ac <pvPortMalloc+0x190>)
 801209c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801209e:	4b43      	ldr	r3, [pc, #268]	; (80121ac <pvPortMalloc+0x190>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80120a4:	e004      	b.n	80120b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80120a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80120b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d903      	bls.n	80120c2 <pvPortMalloc+0xa6>
 80120ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1f1      	bne.n	80120a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80120c2:	4b37      	ldr	r3, [pc, #220]	; (80121a0 <pvPortMalloc+0x184>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d04c      	beq.n	8012166 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80120cc:	6a3b      	ldr	r3, [r7, #32]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2208      	movs	r2, #8
 80120d2:	4413      	add	r3, r2
 80120d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80120d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80120de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e0:	685a      	ldr	r2, [r3, #4]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	1ad2      	subs	r2, r2, r3
 80120e6:	2308      	movs	r3, #8
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d920      	bls.n	8012130 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80120ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	4413      	add	r3, r2
 80120f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	f003 0307 	and.w	r3, r3, #7
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d00b      	beq.n	8012118 <pvPortMalloc+0xfc>
 8012100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012104:	b672      	cpsid	i
 8012106:	f383 8811 	msr	BASEPRI, r3
 801210a:	f3bf 8f6f 	isb	sy
 801210e:	f3bf 8f4f 	dsb	sy
 8012112:	b662      	cpsie	i
 8012114:	613b      	str	r3, [r7, #16]
 8012116:	e7fe      	b.n	8012116 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211a:	685a      	ldr	r2, [r3, #4]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	1ad2      	subs	r2, r2, r3
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801212a:	69b8      	ldr	r0, [r7, #24]
 801212c:	f000 f900 	bl	8012330 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012130:	4b1d      	ldr	r3, [pc, #116]	; (80121a8 <pvPortMalloc+0x18c>)
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	1ad3      	subs	r3, r2, r3
 801213a:	4a1b      	ldr	r2, [pc, #108]	; (80121a8 <pvPortMalloc+0x18c>)
 801213c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801213e:	4b1a      	ldr	r3, [pc, #104]	; (80121a8 <pvPortMalloc+0x18c>)
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	4b1b      	ldr	r3, [pc, #108]	; (80121b0 <pvPortMalloc+0x194>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	429a      	cmp	r2, r3
 8012148:	d203      	bcs.n	8012152 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801214a:	4b17      	ldr	r3, [pc, #92]	; (80121a8 <pvPortMalloc+0x18c>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	4a18      	ldr	r2, [pc, #96]	; (80121b0 <pvPortMalloc+0x194>)
 8012150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	685a      	ldr	r2, [r3, #4]
 8012156:	4b13      	ldr	r3, [pc, #76]	; (80121a4 <pvPortMalloc+0x188>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	431a      	orrs	r2, r3
 801215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012166:	f7ff f841 	bl	80111ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d101      	bne.n	8012174 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012170:	f7ee fdda 	bl	8000d28 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	f003 0307 	and.w	r3, r3, #7
 801217a:	2b00      	cmp	r3, #0
 801217c:	d00b      	beq.n	8012196 <pvPortMalloc+0x17a>
 801217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012182:	b672      	cpsid	i
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	b662      	cpsie	i
 8012192:	60fb      	str	r3, [r7, #12]
 8012194:	e7fe      	b.n	8012194 <pvPortMalloc+0x178>
	return pvReturn;
 8012196:	69fb      	ldr	r3, [r7, #28]
}
 8012198:	4618      	mov	r0, r3
 801219a:	3728      	adds	r7, #40	; 0x28
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	20008464 	.word	0x20008464
 80121a4:	20008470 	.word	0x20008470
 80121a8:	20008468 	.word	0x20008468
 80121ac:	2000845c 	.word	0x2000845c
 80121b0:	2000846c 	.word	0x2000846c

080121b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b086      	sub	sp, #24
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d04a      	beq.n	801225c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80121c6:	2308      	movs	r3, #8
 80121c8:	425b      	negs	r3, r3
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	4413      	add	r3, r2
 80121ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	685a      	ldr	r2, [r3, #4]
 80121d8:	4b22      	ldr	r3, [pc, #136]	; (8012264 <vPortFree+0xb0>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4013      	ands	r3, r2
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10b      	bne.n	80121fa <vPortFree+0x46>
 80121e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e6:	b672      	cpsid	i
 80121e8:	f383 8811 	msr	BASEPRI, r3
 80121ec:	f3bf 8f6f 	isb	sy
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	b662      	cpsie	i
 80121f6:	60fb      	str	r3, [r7, #12]
 80121f8:	e7fe      	b.n	80121f8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00b      	beq.n	801221a <vPortFree+0x66>
 8012202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012206:	b672      	cpsid	i
 8012208:	f383 8811 	msr	BASEPRI, r3
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	b662      	cpsie	i
 8012216:	60bb      	str	r3, [r7, #8]
 8012218:	e7fe      	b.n	8012218 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	685a      	ldr	r2, [r3, #4]
 801221e:	4b11      	ldr	r3, [pc, #68]	; (8012264 <vPortFree+0xb0>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4013      	ands	r3, r2
 8012224:	2b00      	cmp	r3, #0
 8012226:	d019      	beq.n	801225c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d115      	bne.n	801225c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	685a      	ldr	r2, [r3, #4]
 8012234:	4b0b      	ldr	r3, [pc, #44]	; (8012264 <vPortFree+0xb0>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	43db      	mvns	r3, r3
 801223a:	401a      	ands	r2, r3
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012240:	f7fe ffc6 	bl	80111d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	685a      	ldr	r2, [r3, #4]
 8012248:	4b07      	ldr	r3, [pc, #28]	; (8012268 <vPortFree+0xb4>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	4413      	add	r3, r2
 801224e:	4a06      	ldr	r2, [pc, #24]	; (8012268 <vPortFree+0xb4>)
 8012250:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012252:	6938      	ldr	r0, [r7, #16]
 8012254:	f000 f86c 	bl	8012330 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012258:	f7fe ffc8 	bl	80111ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801225c:	bf00      	nop
 801225e:	3718      	adds	r7, #24
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}
 8012264:	20008470 	.word	0x20008470
 8012268:	20008468 	.word	0x20008468

0801226c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801226c:	b480      	push	{r7}
 801226e:	b085      	sub	sp, #20
 8012270:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012276:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012278:	4b27      	ldr	r3, [pc, #156]	; (8012318 <prvHeapInit+0xac>)
 801227a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f003 0307 	and.w	r3, r3, #7
 8012282:	2b00      	cmp	r3, #0
 8012284:	d00c      	beq.n	80122a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3307      	adds	r3, #7
 801228a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f023 0307 	bic.w	r3, r3, #7
 8012292:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	4a1f      	ldr	r2, [pc, #124]	; (8012318 <prvHeapInit+0xac>)
 801229c:	4413      	add	r3, r2
 801229e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80122a4:	4a1d      	ldr	r2, [pc, #116]	; (801231c <prvHeapInit+0xb0>)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80122aa:	4b1c      	ldr	r3, [pc, #112]	; (801231c <prvHeapInit+0xb0>)
 80122ac:	2200      	movs	r2, #0
 80122ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	68ba      	ldr	r2, [r7, #8]
 80122b4:	4413      	add	r3, r2
 80122b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80122b8:	2208      	movs	r2, #8
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	1a9b      	subs	r3, r3, r2
 80122be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	f023 0307 	bic.w	r3, r3, #7
 80122c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	4a15      	ldr	r2, [pc, #84]	; (8012320 <prvHeapInit+0xb4>)
 80122cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80122ce:	4b14      	ldr	r3, [pc, #80]	; (8012320 <prvHeapInit+0xb4>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2200      	movs	r2, #0
 80122d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80122d6:	4b12      	ldr	r3, [pc, #72]	; (8012320 <prvHeapInit+0xb4>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2200      	movs	r2, #0
 80122dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	68fa      	ldr	r2, [r7, #12]
 80122e6:	1ad2      	subs	r2, r2, r3
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80122ec:	4b0c      	ldr	r3, [pc, #48]	; (8012320 <prvHeapInit+0xb4>)
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	4a0a      	ldr	r2, [pc, #40]	; (8012324 <prvHeapInit+0xb8>)
 80122fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	4a09      	ldr	r2, [pc, #36]	; (8012328 <prvHeapInit+0xbc>)
 8012302:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012304:	4b09      	ldr	r3, [pc, #36]	; (801232c <prvHeapInit+0xc0>)
 8012306:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801230a:	601a      	str	r2, [r3, #0]
}
 801230c:	bf00      	nop
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr
 8012318:	2000045c 	.word	0x2000045c
 801231c:	2000845c 	.word	0x2000845c
 8012320:	20008464 	.word	0x20008464
 8012324:	2000846c 	.word	0x2000846c
 8012328:	20008468 	.word	0x20008468
 801232c:	20008470 	.word	0x20008470

08012330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012330:	b480      	push	{r7}
 8012332:	b085      	sub	sp, #20
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012338:	4b28      	ldr	r3, [pc, #160]	; (80123dc <prvInsertBlockIntoFreeList+0xac>)
 801233a:	60fb      	str	r3, [r7, #12]
 801233c:	e002      	b.n	8012344 <prvInsertBlockIntoFreeList+0x14>
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	60fb      	str	r3, [r7, #12]
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	429a      	cmp	r2, r3
 801234c:	d8f7      	bhi.n	801233e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	68ba      	ldr	r2, [r7, #8]
 8012358:	4413      	add	r3, r2
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	429a      	cmp	r2, r3
 801235e:	d108      	bne.n	8012372 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	685a      	ldr	r2, [r3, #4]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	441a      	add	r2, r3
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	441a      	add	r2, r3
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	429a      	cmp	r2, r3
 8012384:	d118      	bne.n	80123b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681a      	ldr	r2, [r3, #0]
 801238a:	4b15      	ldr	r3, [pc, #84]	; (80123e0 <prvInsertBlockIntoFreeList+0xb0>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	429a      	cmp	r2, r3
 8012390:	d00d      	beq.n	80123ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	685a      	ldr	r2, [r3, #4]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	441a      	add	r2, r3
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	601a      	str	r2, [r3, #0]
 80123ac:	e008      	b.n	80123c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80123ae:	4b0c      	ldr	r3, [pc, #48]	; (80123e0 <prvInsertBlockIntoFreeList+0xb0>)
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	601a      	str	r2, [r3, #0]
 80123b6:	e003      	b.n	80123c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80123c0:	68fa      	ldr	r2, [r7, #12]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d002      	beq.n	80123ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123ce:	bf00      	nop
 80123d0:	3714      	adds	r7, #20
 80123d2:	46bd      	mov	sp, r7
 80123d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d8:	4770      	bx	lr
 80123da:	bf00      	nop
 80123dc:	2000845c 	.word	0x2000845c
 80123e0:	20008464 	.word	0x20008464

080123e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80123e8:	2201      	movs	r2, #1
 80123ea:	490e      	ldr	r1, [pc, #56]	; (8012424 <MX_USB_HOST_Init+0x40>)
 80123ec:	480e      	ldr	r0, [pc, #56]	; (8012428 <MX_USB_HOST_Init+0x44>)
 80123ee:	f7fb ff31 	bl	800e254 <USBH_Init>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d001      	beq.n	80123fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80123f8:	f7ef fa48 	bl	800188c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80123fc:	490b      	ldr	r1, [pc, #44]	; (801242c <MX_USB_HOST_Init+0x48>)
 80123fe:	480a      	ldr	r0, [pc, #40]	; (8012428 <MX_USB_HOST_Init+0x44>)
 8012400:	f7fb ffde 	bl	800e3c0 <USBH_RegisterClass>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d001      	beq.n	801240e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801240a:	f7ef fa3f 	bl	800188c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801240e:	4806      	ldr	r0, [pc, #24]	; (8012428 <MX_USB_HOST_Init+0x44>)
 8012410:	f7fc f862 	bl	800e4d8 <USBH_Start>
 8012414:	4603      	mov	r3, r0
 8012416:	2b00      	cmp	r3, #0
 8012418:	d001      	beq.n	801241e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801241a:	f7ef fa37 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801241e:	bf00      	nop
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	08012431 	.word	0x08012431
 8012428:	20009114 	.word	0x20009114
 801242c:	2000000c 	.word	0x2000000c

08012430 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	460b      	mov	r3, r1
 801243a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801243c:	78fb      	ldrb	r3, [r7, #3]
 801243e:	3b01      	subs	r3, #1
 8012440:	2b04      	cmp	r3, #4
 8012442:	d819      	bhi.n	8012478 <USBH_UserProcess+0x48>
 8012444:	a201      	add	r2, pc, #4	; (adr r2, 801244c <USBH_UserProcess+0x1c>)
 8012446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801244a:	bf00      	nop
 801244c:	08012479 	.word	0x08012479
 8012450:	08012469 	.word	0x08012469
 8012454:	08012479 	.word	0x08012479
 8012458:	08012471 	.word	0x08012471
 801245c:	08012461 	.word	0x08012461
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012460:	4b09      	ldr	r3, [pc, #36]	; (8012488 <USBH_UserProcess+0x58>)
 8012462:	2203      	movs	r2, #3
 8012464:	701a      	strb	r2, [r3, #0]
  break;
 8012466:	e008      	b.n	801247a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012468:	4b07      	ldr	r3, [pc, #28]	; (8012488 <USBH_UserProcess+0x58>)
 801246a:	2202      	movs	r2, #2
 801246c:	701a      	strb	r2, [r3, #0]
  break;
 801246e:	e004      	b.n	801247a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012470:	4b05      	ldr	r3, [pc, #20]	; (8012488 <USBH_UserProcess+0x58>)
 8012472:	2201      	movs	r2, #1
 8012474:	701a      	strb	r2, [r3, #0]
  break;
 8012476:	e000      	b.n	801247a <USBH_UserProcess+0x4a>

  default:
  break;
 8012478:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801247a:	bf00      	nop
 801247c:	370c      	adds	r7, #12
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop
 8012488:	20008474 	.word	0x20008474

0801248c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b08a      	sub	sp, #40	; 0x28
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012494:	f107 0314 	add.w	r3, r7, #20
 8012498:	2200      	movs	r2, #0
 801249a:	601a      	str	r2, [r3, #0]
 801249c:	605a      	str	r2, [r3, #4]
 801249e:	609a      	str	r2, [r3, #8]
 80124a0:	60da      	str	r2, [r3, #12]
 80124a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80124ac:	d13c      	bne.n	8012528 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80124ae:	4b20      	ldr	r3, [pc, #128]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 80124b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124b2:	4a1f      	ldr	r2, [pc, #124]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 80124b4:	f043 0301 	orr.w	r3, r3, #1
 80124b8:	6313      	str	r3, [r2, #48]	; 0x30
 80124ba:	4b1d      	ldr	r3, [pc, #116]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 80124bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124be:	f003 0301 	and.w	r3, r3, #1
 80124c2:	613b      	str	r3, [r7, #16]
 80124c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80124c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80124ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124cc:	2302      	movs	r3, #2
 80124ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124d0:	2300      	movs	r3, #0
 80124d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80124d4:	2303      	movs	r3, #3
 80124d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80124d8:	230a      	movs	r3, #10
 80124da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80124dc:	f107 0314 	add.w	r3, r7, #20
 80124e0:	4619      	mov	r1, r3
 80124e2:	4814      	ldr	r0, [pc, #80]	; (8012534 <HAL_HCD_MspInit+0xa8>)
 80124e4:	f7f2 f8ac 	bl	8004640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80124e8:	4b11      	ldr	r3, [pc, #68]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 80124ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ec:	4a10      	ldr	r2, [pc, #64]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 80124ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124f2:	6353      	str	r3, [r2, #52]	; 0x34
 80124f4:	4b0e      	ldr	r3, [pc, #56]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 80124f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124fc:	60fb      	str	r3, [r7, #12]
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	4b0b      	ldr	r3, [pc, #44]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 8012502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012504:	4a0a      	ldr	r2, [pc, #40]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 8012506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801250a:	6453      	str	r3, [r2, #68]	; 0x44
 801250c:	4b08      	ldr	r3, [pc, #32]	; (8012530 <HAL_HCD_MspInit+0xa4>)
 801250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012514:	60bb      	str	r3, [r7, #8]
 8012516:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012518:	2200      	movs	r2, #0
 801251a:	2100      	movs	r1, #0
 801251c:	2043      	movs	r0, #67	; 0x43
 801251e:	f7f1 f80f 	bl	8003540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012522:	2043      	movs	r0, #67	; 0x43
 8012524:	f7f1 f828 	bl	8003578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012528:	bf00      	nop
 801252a:	3728      	adds	r7, #40	; 0x28
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	40023800 	.word	0x40023800
 8012534:	40020000 	.word	0x40020000

08012538 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012546:	4618      	mov	r0, r3
 8012548:	f7fc fc73 	bl	800ee32 <USBH_LL_IncTimer>
}
 801254c:	bf00      	nop
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012562:	4618      	mov	r0, r3
 8012564:	f7fc fcb7 	bl	800eed6 <USBH_LL_Connect>
}
 8012568:	bf00      	nop
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801257e:	4618      	mov	r0, r3
 8012580:	f7fc fccc 	bl	800ef1c <USBH_LL_Disconnect>
}
 8012584:	bf00      	nop
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	460b      	mov	r3, r1
 8012596:	70fb      	strb	r3, [r7, #3]
 8012598:	4613      	mov	r3, r2
 801259a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7fc fd01 	bl	800efaa <USBH_LL_NotifyURBChange>
#endif
}
 80125a8:	bf00      	nop
 80125aa:	3708      	adds	r7, #8
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80125be:	4618      	mov	r0, r3
 80125c0:	f7fc fc61 	bl	800ee86 <USBH_LL_PortEnabled>
}
 80125c4:	bf00      	nop
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80125da:	4618      	mov	r0, r3
 80125dc:	f7fc fc6d 	bl	800eeba <USBH_LL_PortDisabled>
}
 80125e0:	bf00      	nop
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d12a      	bne.n	8012650 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80125fa:	4a18      	ldr	r2, [pc, #96]	; (801265c <USBH_LL_Init+0x74>)
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4a15      	ldr	r2, [pc, #84]	; (801265c <USBH_LL_Init+0x74>)
 8012606:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801260a:	4b14      	ldr	r3, [pc, #80]	; (801265c <USBH_LL_Init+0x74>)
 801260c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012610:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012612:	4b12      	ldr	r3, [pc, #72]	; (801265c <USBH_LL_Init+0x74>)
 8012614:	2208      	movs	r2, #8
 8012616:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012618:	4b10      	ldr	r3, [pc, #64]	; (801265c <USBH_LL_Init+0x74>)
 801261a:	2201      	movs	r2, #1
 801261c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801261e:	4b0f      	ldr	r3, [pc, #60]	; (801265c <USBH_LL_Init+0x74>)
 8012620:	2200      	movs	r2, #0
 8012622:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012624:	4b0d      	ldr	r3, [pc, #52]	; (801265c <USBH_LL_Init+0x74>)
 8012626:	2202      	movs	r2, #2
 8012628:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801262a:	4b0c      	ldr	r3, [pc, #48]	; (801265c <USBH_LL_Init+0x74>)
 801262c:	2200      	movs	r2, #0
 801262e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012630:	480a      	ldr	r0, [pc, #40]	; (801265c <USBH_LL_Init+0x74>)
 8012632:	f7f2 f9e0 	bl	80049f6 <HAL_HCD_Init>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d001      	beq.n	8012640 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801263c:	f7ef f926 	bl	800188c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012640:	4806      	ldr	r0, [pc, #24]	; (801265c <USBH_LL_Init+0x74>)
 8012642:	f7f2 fde3 	bl	800520c <HAL_HCD_GetCurrentFrame>
 8012646:	4603      	mov	r3, r0
 8012648:	4619      	mov	r1, r3
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7fc fbe2 	bl	800ee14 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012650:	2300      	movs	r3, #0
}
 8012652:	4618      	mov	r0, r3
 8012654:	3708      	adds	r7, #8
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	200094f8 	.word	0x200094f8

08012660 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012668:	2300      	movs	r3, #0
 801266a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012676:	4618      	mov	r0, r3
 8012678:	f7f2 fd50 	bl	800511c <HAL_HCD_Start>
 801267c:	4603      	mov	r3, r0
 801267e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012680:	7bfb      	ldrb	r3, [r7, #15]
 8012682:	4618      	mov	r0, r3
 8012684:	f000 f95c 	bl	8012940 <USBH_Get_USB_Status>
 8012688:	4603      	mov	r3, r0
 801268a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801268c:	7bbb      	ldrb	r3, [r7, #14]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012696:	b580      	push	{r7, lr}
 8012698:	b084      	sub	sp, #16
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801269e:	2300      	movs	r3, #0
 80126a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7f2 fd58 	bl	8005162 <HAL_HCD_Stop>
 80126b2:	4603      	mov	r3, r0
 80126b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80126b6:	7bfb      	ldrb	r3, [r7, #15]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 f941 	bl	8012940 <USBH_Get_USB_Status>
 80126be:	4603      	mov	r3, r0
 80126c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3710      	adds	r7, #16
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}

080126cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80126d4:	2301      	movs	r3, #1
 80126d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80126de:	4618      	mov	r0, r3
 80126e0:	f7f2 fda2 	bl	8005228 <HAL_HCD_GetCurrentSpeed>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	d007      	beq.n	80126fa <USBH_LL_GetSpeed+0x2e>
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	d302      	bcc.n	80126f4 <USBH_LL_GetSpeed+0x28>
 80126ee:	2b02      	cmp	r3, #2
 80126f0:	d006      	beq.n	8012700 <USBH_LL_GetSpeed+0x34>
 80126f2:	e008      	b.n	8012706 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80126f4:	2300      	movs	r3, #0
 80126f6:	73fb      	strb	r3, [r7, #15]
    break;
 80126f8:	e008      	b.n	801270c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80126fa:	2301      	movs	r3, #1
 80126fc:	73fb      	strb	r3, [r7, #15]
    break;
 80126fe:	e005      	b.n	801270c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012700:	2302      	movs	r3, #2
 8012702:	73fb      	strb	r3, [r7, #15]
    break;
 8012704:	e002      	b.n	801270c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8012706:	2301      	movs	r3, #1
 8012708:	73fb      	strb	r3, [r7, #15]
    break;
 801270a:	bf00      	nop
  }
  return  speed;
 801270c:	7bfb      	ldrb	r3, [r7, #15]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}

08012716 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012716:	b580      	push	{r7, lr}
 8012718:	b084      	sub	sp, #16
 801271a:	af00      	add	r7, sp, #0
 801271c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801271e:	2300      	movs	r3, #0
 8012720:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801272c:	4618      	mov	r0, r3
 801272e:	f7f2 fd35 	bl	800519c <HAL_HCD_ResetPort>
 8012732:	4603      	mov	r3, r0
 8012734:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012736:	7bfb      	ldrb	r3, [r7, #15]
 8012738:	4618      	mov	r0, r3
 801273a:	f000 f901 	bl	8012940 <USBH_Get_USB_Status>
 801273e:	4603      	mov	r3, r0
 8012740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012742:	7bbb      	ldrb	r3, [r7, #14]
}
 8012744:	4618      	mov	r0, r3
 8012746:	3710      	adds	r7, #16
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	460b      	mov	r3, r1
 8012756:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801275e:	78fa      	ldrb	r2, [r7, #3]
 8012760:	4611      	mov	r1, r2
 8012762:	4618      	mov	r0, r3
 8012764:	f7f2 fd3d 	bl	80051e2 <HAL_HCD_HC_GetXferCount>
 8012768:	4603      	mov	r3, r0
}
 801276a:	4618      	mov	r0, r3
 801276c:	3708      	adds	r7, #8
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012772:	b590      	push	{r4, r7, lr}
 8012774:	b089      	sub	sp, #36	; 0x24
 8012776:	af04      	add	r7, sp, #16
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	4608      	mov	r0, r1
 801277c:	4611      	mov	r1, r2
 801277e:	461a      	mov	r2, r3
 8012780:	4603      	mov	r3, r0
 8012782:	70fb      	strb	r3, [r7, #3]
 8012784:	460b      	mov	r3, r1
 8012786:	70bb      	strb	r3, [r7, #2]
 8012788:	4613      	mov	r3, r2
 801278a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801278c:	2300      	movs	r3, #0
 801278e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012790:	2300      	movs	r3, #0
 8012792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801279a:	787c      	ldrb	r4, [r7, #1]
 801279c:	78ba      	ldrb	r2, [r7, #2]
 801279e:	78f9      	ldrb	r1, [r7, #3]
 80127a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80127a2:	9302      	str	r3, [sp, #8]
 80127a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80127a8:	9301      	str	r3, [sp, #4]
 80127aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80127ae:	9300      	str	r3, [sp, #0]
 80127b0:	4623      	mov	r3, r4
 80127b2:	f7f2 f982 	bl	8004aba <HAL_HCD_HC_Init>
 80127b6:	4603      	mov	r3, r0
 80127b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80127ba:	7bfb      	ldrb	r3, [r7, #15]
 80127bc:	4618      	mov	r0, r3
 80127be:	f000 f8bf 	bl	8012940 <USBH_Get_USB_Status>
 80127c2:	4603      	mov	r3, r0
 80127c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3714      	adds	r7, #20
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd90      	pop	{r4, r7, pc}

080127d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127dc:	2300      	movs	r3, #0
 80127de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80127e0:	2300      	movs	r3, #0
 80127e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80127ea:	78fa      	ldrb	r2, [r7, #3]
 80127ec:	4611      	mov	r1, r2
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7f2 f9fb 	bl	8004bea <HAL_HCD_HC_Halt>
 80127f4:	4603      	mov	r3, r0
 80127f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80127f8:	7bfb      	ldrb	r3, [r7, #15]
 80127fa:	4618      	mov	r0, r3
 80127fc:	f000 f8a0 	bl	8012940 <USBH_Get_USB_Status>
 8012800:	4603      	mov	r3, r0
 8012802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012804:	7bbb      	ldrb	r3, [r7, #14]
}
 8012806:	4618      	mov	r0, r3
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}

0801280e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801280e:	b590      	push	{r4, r7, lr}
 8012810:	b089      	sub	sp, #36	; 0x24
 8012812:	af04      	add	r7, sp, #16
 8012814:	6078      	str	r0, [r7, #4]
 8012816:	4608      	mov	r0, r1
 8012818:	4611      	mov	r1, r2
 801281a:	461a      	mov	r2, r3
 801281c:	4603      	mov	r3, r0
 801281e:	70fb      	strb	r3, [r7, #3]
 8012820:	460b      	mov	r3, r1
 8012822:	70bb      	strb	r3, [r7, #2]
 8012824:	4613      	mov	r3, r2
 8012826:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012828:	2300      	movs	r3, #0
 801282a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801282c:	2300      	movs	r3, #0
 801282e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012836:	787c      	ldrb	r4, [r7, #1]
 8012838:	78ba      	ldrb	r2, [r7, #2]
 801283a:	78f9      	ldrb	r1, [r7, #3]
 801283c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012840:	9303      	str	r3, [sp, #12]
 8012842:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012844:	9302      	str	r3, [sp, #8]
 8012846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012848:	9301      	str	r3, [sp, #4]
 801284a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	4623      	mov	r3, r4
 8012852:	f7f2 f9ed 	bl	8004c30 <HAL_HCD_HC_SubmitRequest>
 8012856:	4603      	mov	r3, r0
 8012858:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801285a:	7bfb      	ldrb	r3, [r7, #15]
 801285c:	4618      	mov	r0, r3
 801285e:	f000 f86f 	bl	8012940 <USBH_Get_USB_Status>
 8012862:	4603      	mov	r3, r0
 8012864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012866:	7bbb      	ldrb	r3, [r7, #14]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3714      	adds	r7, #20
 801286c:	46bd      	mov	sp, r7
 801286e:	bd90      	pop	{r4, r7, pc}

08012870 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	460b      	mov	r3, r1
 801287a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012882:	78fa      	ldrb	r2, [r7, #3]
 8012884:	4611      	mov	r1, r2
 8012886:	4618      	mov	r0, r3
 8012888:	f7f2 fc96 	bl	80051b8 <HAL_HCD_HC_GetURBState>
 801288c:	4603      	mov	r3, r0
}
 801288e:	4618      	mov	r0, r3
 8012890:	3708      	adds	r7, #8
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b082      	sub	sp, #8
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
 801289e:	460b      	mov	r3, r1
 80128a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d103      	bne.n	80128b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80128ac:	78fb      	ldrb	r3, [r7, #3]
 80128ae:	4618      	mov	r0, r3
 80128b0:	f000 f872 	bl	8012998 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80128b4:	20c8      	movs	r0, #200	; 0xc8
 80128b6:	f7f0 fae1 	bl	8002e7c <HAL_Delay>
  return USBH_OK;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b085      	sub	sp, #20
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	460b      	mov	r3, r1
 80128ce:	70fb      	strb	r3, [r7, #3]
 80128d0:	4613      	mov	r3, r2
 80128d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80128da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80128dc:	78fa      	ldrb	r2, [r7, #3]
 80128de:	68f9      	ldr	r1, [r7, #12]
 80128e0:	4613      	mov	r3, r2
 80128e2:	009b      	lsls	r3, r3, #2
 80128e4:	4413      	add	r3, r2
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	440b      	add	r3, r1
 80128ea:	333b      	adds	r3, #59	; 0x3b
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00a      	beq.n	8012908 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80128f2:	78fa      	ldrb	r2, [r7, #3]
 80128f4:	68f9      	ldr	r1, [r7, #12]
 80128f6:	4613      	mov	r3, r2
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	4413      	add	r3, r2
 80128fc:	00db      	lsls	r3, r3, #3
 80128fe:	440b      	add	r3, r1
 8012900:	3350      	adds	r3, #80	; 0x50
 8012902:	78ba      	ldrb	r2, [r7, #2]
 8012904:	701a      	strb	r2, [r3, #0]
 8012906:	e009      	b.n	801291c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012908:	78fa      	ldrb	r2, [r7, #3]
 801290a:	68f9      	ldr	r1, [r7, #12]
 801290c:	4613      	mov	r3, r2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	4413      	add	r3, r2
 8012912:	00db      	lsls	r3, r3, #3
 8012914:	440b      	add	r3, r1
 8012916:	3351      	adds	r3, #81	; 0x51
 8012918:	78ba      	ldrb	r2, [r7, #2]
 801291a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801291c:	2300      	movs	r3, #0
}
 801291e:	4618      	mov	r0, r3
 8012920:	3714      	adds	r7, #20
 8012922:	46bd      	mov	sp, r7
 8012924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012928:	4770      	bx	lr

0801292a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801292a:	b580      	push	{r7, lr}
 801292c:	b082      	sub	sp, #8
 801292e:	af00      	add	r7, sp, #0
 8012930:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7f0 faa2 	bl	8002e7c <HAL_Delay>
}
 8012938:	bf00      	nop
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012940:	b480      	push	{r7}
 8012942:	b085      	sub	sp, #20
 8012944:	af00      	add	r7, sp, #0
 8012946:	4603      	mov	r3, r0
 8012948:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801294a:	2300      	movs	r3, #0
 801294c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801294e:	79fb      	ldrb	r3, [r7, #7]
 8012950:	2b03      	cmp	r3, #3
 8012952:	d817      	bhi.n	8012984 <USBH_Get_USB_Status+0x44>
 8012954:	a201      	add	r2, pc, #4	; (adr r2, 801295c <USBH_Get_USB_Status+0x1c>)
 8012956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801295a:	bf00      	nop
 801295c:	0801296d 	.word	0x0801296d
 8012960:	08012973 	.word	0x08012973
 8012964:	08012979 	.word	0x08012979
 8012968:	0801297f 	.word	0x0801297f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801296c:	2300      	movs	r3, #0
 801296e:	73fb      	strb	r3, [r7, #15]
    break;
 8012970:	e00b      	b.n	801298a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012972:	2302      	movs	r3, #2
 8012974:	73fb      	strb	r3, [r7, #15]
    break;
 8012976:	e008      	b.n	801298a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012978:	2301      	movs	r3, #1
 801297a:	73fb      	strb	r3, [r7, #15]
    break;
 801297c:	e005      	b.n	801298a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801297e:	2302      	movs	r3, #2
 8012980:	73fb      	strb	r3, [r7, #15]
    break;
 8012982:	e002      	b.n	801298a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012984:	2302      	movs	r3, #2
 8012986:	73fb      	strb	r3, [r7, #15]
    break;
 8012988:	bf00      	nop
  }
  return usb_status;
 801298a:	7bfb      	ldrb	r3, [r7, #15]
}
 801298c:	4618      	mov	r0, r3
 801298e:	3714      	adds	r7, #20
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	4603      	mov	r3, r0
 80129a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80129a2:	79fb      	ldrb	r3, [r7, #7]
 80129a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80129a6:	79fb      	ldrb	r3, [r7, #7]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d102      	bne.n	80129b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80129ac:	2301      	movs	r3, #1
 80129ae:	73fb      	strb	r3, [r7, #15]
 80129b0:	e001      	b.n	80129b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80129b2:	2300      	movs	r3, #0
 80129b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80129b6:	7bfb      	ldrb	r3, [r7, #15]
 80129b8:	461a      	mov	r2, r3
 80129ba:	2120      	movs	r1, #32
 80129bc:	4803      	ldr	r0, [pc, #12]	; (80129cc <MX_DriverVbusFS+0x34>)
 80129be:	f7f2 f801 	bl	80049c4 <HAL_GPIO_WritePin>
}
 80129c2:	bf00      	nop
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	40020c00 	.word	0x40020c00

080129d0 <__errno>:
 80129d0:	4b01      	ldr	r3, [pc, #4]	; (80129d8 <__errno+0x8>)
 80129d2:	6818      	ldr	r0, [r3, #0]
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	20000030 	.word	0x20000030

080129dc <__libc_init_array>:
 80129dc:	b570      	push	{r4, r5, r6, lr}
 80129de:	4e0d      	ldr	r6, [pc, #52]	; (8012a14 <__libc_init_array+0x38>)
 80129e0:	4c0d      	ldr	r4, [pc, #52]	; (8012a18 <__libc_init_array+0x3c>)
 80129e2:	1ba4      	subs	r4, r4, r6
 80129e4:	10a4      	asrs	r4, r4, #2
 80129e6:	2500      	movs	r5, #0
 80129e8:	42a5      	cmp	r5, r4
 80129ea:	d109      	bne.n	8012a00 <__libc_init_array+0x24>
 80129ec:	4e0b      	ldr	r6, [pc, #44]	; (8012a1c <__libc_init_array+0x40>)
 80129ee:	4c0c      	ldr	r4, [pc, #48]	; (8012a20 <__libc_init_array+0x44>)
 80129f0:	f000 fca4 	bl	801333c <_init>
 80129f4:	1ba4      	subs	r4, r4, r6
 80129f6:	10a4      	asrs	r4, r4, #2
 80129f8:	2500      	movs	r5, #0
 80129fa:	42a5      	cmp	r5, r4
 80129fc:	d105      	bne.n	8012a0a <__libc_init_array+0x2e>
 80129fe:	bd70      	pop	{r4, r5, r6, pc}
 8012a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012a04:	4798      	blx	r3
 8012a06:	3501      	adds	r5, #1
 8012a08:	e7ee      	b.n	80129e8 <__libc_init_array+0xc>
 8012a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012a0e:	4798      	blx	r3
 8012a10:	3501      	adds	r5, #1
 8012a12:	e7f2      	b.n	80129fa <__libc_init_array+0x1e>
 8012a14:	0801347c 	.word	0x0801347c
 8012a18:	0801347c 	.word	0x0801347c
 8012a1c:	0801347c 	.word	0x0801347c
 8012a20:	08013480 	.word	0x08013480

08012a24 <malloc>:
 8012a24:	4b02      	ldr	r3, [pc, #8]	; (8012a30 <malloc+0xc>)
 8012a26:	4601      	mov	r1, r0
 8012a28:	6818      	ldr	r0, [r3, #0]
 8012a2a:	f000 b86d 	b.w	8012b08 <_malloc_r>
 8012a2e:	bf00      	nop
 8012a30:	20000030 	.word	0x20000030

08012a34 <free>:
 8012a34:	4b02      	ldr	r3, [pc, #8]	; (8012a40 <free+0xc>)
 8012a36:	4601      	mov	r1, r0
 8012a38:	6818      	ldr	r0, [r3, #0]
 8012a3a:	f000 b817 	b.w	8012a6c <_free_r>
 8012a3e:	bf00      	nop
 8012a40:	20000030 	.word	0x20000030

08012a44 <memcpy>:
 8012a44:	b510      	push	{r4, lr}
 8012a46:	1e43      	subs	r3, r0, #1
 8012a48:	440a      	add	r2, r1
 8012a4a:	4291      	cmp	r1, r2
 8012a4c:	d100      	bne.n	8012a50 <memcpy+0xc>
 8012a4e:	bd10      	pop	{r4, pc}
 8012a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a58:	e7f7      	b.n	8012a4a <memcpy+0x6>

08012a5a <memset>:
 8012a5a:	4402      	add	r2, r0
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d100      	bne.n	8012a64 <memset+0xa>
 8012a62:	4770      	bx	lr
 8012a64:	f803 1b01 	strb.w	r1, [r3], #1
 8012a68:	e7f9      	b.n	8012a5e <memset+0x4>
	...

08012a6c <_free_r>:
 8012a6c:	b538      	push	{r3, r4, r5, lr}
 8012a6e:	4605      	mov	r5, r0
 8012a70:	2900      	cmp	r1, #0
 8012a72:	d045      	beq.n	8012b00 <_free_r+0x94>
 8012a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a78:	1f0c      	subs	r4, r1, #4
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	bfb8      	it	lt
 8012a7e:	18e4      	addlt	r4, r4, r3
 8012a80:	f000 fbae 	bl	80131e0 <__malloc_lock>
 8012a84:	4a1f      	ldr	r2, [pc, #124]	; (8012b04 <_free_r+0x98>)
 8012a86:	6813      	ldr	r3, [r2, #0]
 8012a88:	4610      	mov	r0, r2
 8012a8a:	b933      	cbnz	r3, 8012a9a <_free_r+0x2e>
 8012a8c:	6063      	str	r3, [r4, #4]
 8012a8e:	6014      	str	r4, [r2, #0]
 8012a90:	4628      	mov	r0, r5
 8012a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a96:	f000 bba4 	b.w	80131e2 <__malloc_unlock>
 8012a9a:	42a3      	cmp	r3, r4
 8012a9c:	d90c      	bls.n	8012ab8 <_free_r+0x4c>
 8012a9e:	6821      	ldr	r1, [r4, #0]
 8012aa0:	1862      	adds	r2, r4, r1
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	bf04      	itt	eq
 8012aa6:	681a      	ldreq	r2, [r3, #0]
 8012aa8:	685b      	ldreq	r3, [r3, #4]
 8012aaa:	6063      	str	r3, [r4, #4]
 8012aac:	bf04      	itt	eq
 8012aae:	1852      	addeq	r2, r2, r1
 8012ab0:	6022      	streq	r2, [r4, #0]
 8012ab2:	6004      	str	r4, [r0, #0]
 8012ab4:	e7ec      	b.n	8012a90 <_free_r+0x24>
 8012ab6:	4613      	mov	r3, r2
 8012ab8:	685a      	ldr	r2, [r3, #4]
 8012aba:	b10a      	cbz	r2, 8012ac0 <_free_r+0x54>
 8012abc:	42a2      	cmp	r2, r4
 8012abe:	d9fa      	bls.n	8012ab6 <_free_r+0x4a>
 8012ac0:	6819      	ldr	r1, [r3, #0]
 8012ac2:	1858      	adds	r0, r3, r1
 8012ac4:	42a0      	cmp	r0, r4
 8012ac6:	d10b      	bne.n	8012ae0 <_free_r+0x74>
 8012ac8:	6820      	ldr	r0, [r4, #0]
 8012aca:	4401      	add	r1, r0
 8012acc:	1858      	adds	r0, r3, r1
 8012ace:	4282      	cmp	r2, r0
 8012ad0:	6019      	str	r1, [r3, #0]
 8012ad2:	d1dd      	bne.n	8012a90 <_free_r+0x24>
 8012ad4:	6810      	ldr	r0, [r2, #0]
 8012ad6:	6852      	ldr	r2, [r2, #4]
 8012ad8:	605a      	str	r2, [r3, #4]
 8012ada:	4401      	add	r1, r0
 8012adc:	6019      	str	r1, [r3, #0]
 8012ade:	e7d7      	b.n	8012a90 <_free_r+0x24>
 8012ae0:	d902      	bls.n	8012ae8 <_free_r+0x7c>
 8012ae2:	230c      	movs	r3, #12
 8012ae4:	602b      	str	r3, [r5, #0]
 8012ae6:	e7d3      	b.n	8012a90 <_free_r+0x24>
 8012ae8:	6820      	ldr	r0, [r4, #0]
 8012aea:	1821      	adds	r1, r4, r0
 8012aec:	428a      	cmp	r2, r1
 8012aee:	bf04      	itt	eq
 8012af0:	6811      	ldreq	r1, [r2, #0]
 8012af2:	6852      	ldreq	r2, [r2, #4]
 8012af4:	6062      	str	r2, [r4, #4]
 8012af6:	bf04      	itt	eq
 8012af8:	1809      	addeq	r1, r1, r0
 8012afa:	6021      	streq	r1, [r4, #0]
 8012afc:	605c      	str	r4, [r3, #4]
 8012afe:	e7c7      	b.n	8012a90 <_free_r+0x24>
 8012b00:	bd38      	pop	{r3, r4, r5, pc}
 8012b02:	bf00      	nop
 8012b04:	20008478 	.word	0x20008478

08012b08 <_malloc_r>:
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	1ccd      	adds	r5, r1, #3
 8012b0c:	f025 0503 	bic.w	r5, r5, #3
 8012b10:	3508      	adds	r5, #8
 8012b12:	2d0c      	cmp	r5, #12
 8012b14:	bf38      	it	cc
 8012b16:	250c      	movcc	r5, #12
 8012b18:	2d00      	cmp	r5, #0
 8012b1a:	4606      	mov	r6, r0
 8012b1c:	db01      	blt.n	8012b22 <_malloc_r+0x1a>
 8012b1e:	42a9      	cmp	r1, r5
 8012b20:	d903      	bls.n	8012b2a <_malloc_r+0x22>
 8012b22:	230c      	movs	r3, #12
 8012b24:	6033      	str	r3, [r6, #0]
 8012b26:	2000      	movs	r0, #0
 8012b28:	bd70      	pop	{r4, r5, r6, pc}
 8012b2a:	f000 fb59 	bl	80131e0 <__malloc_lock>
 8012b2e:	4a21      	ldr	r2, [pc, #132]	; (8012bb4 <_malloc_r+0xac>)
 8012b30:	6814      	ldr	r4, [r2, #0]
 8012b32:	4621      	mov	r1, r4
 8012b34:	b991      	cbnz	r1, 8012b5c <_malloc_r+0x54>
 8012b36:	4c20      	ldr	r4, [pc, #128]	; (8012bb8 <_malloc_r+0xb0>)
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	b91b      	cbnz	r3, 8012b44 <_malloc_r+0x3c>
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	f000 f8a1 	bl	8012c84 <_sbrk_r>
 8012b42:	6020      	str	r0, [r4, #0]
 8012b44:	4629      	mov	r1, r5
 8012b46:	4630      	mov	r0, r6
 8012b48:	f000 f89c 	bl	8012c84 <_sbrk_r>
 8012b4c:	1c43      	adds	r3, r0, #1
 8012b4e:	d124      	bne.n	8012b9a <_malloc_r+0x92>
 8012b50:	230c      	movs	r3, #12
 8012b52:	6033      	str	r3, [r6, #0]
 8012b54:	4630      	mov	r0, r6
 8012b56:	f000 fb44 	bl	80131e2 <__malloc_unlock>
 8012b5a:	e7e4      	b.n	8012b26 <_malloc_r+0x1e>
 8012b5c:	680b      	ldr	r3, [r1, #0]
 8012b5e:	1b5b      	subs	r3, r3, r5
 8012b60:	d418      	bmi.n	8012b94 <_malloc_r+0x8c>
 8012b62:	2b0b      	cmp	r3, #11
 8012b64:	d90f      	bls.n	8012b86 <_malloc_r+0x7e>
 8012b66:	600b      	str	r3, [r1, #0]
 8012b68:	50cd      	str	r5, [r1, r3]
 8012b6a:	18cc      	adds	r4, r1, r3
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f000 fb38 	bl	80131e2 <__malloc_unlock>
 8012b72:	f104 000b 	add.w	r0, r4, #11
 8012b76:	1d23      	adds	r3, r4, #4
 8012b78:	f020 0007 	bic.w	r0, r0, #7
 8012b7c:	1ac3      	subs	r3, r0, r3
 8012b7e:	d0d3      	beq.n	8012b28 <_malloc_r+0x20>
 8012b80:	425a      	negs	r2, r3
 8012b82:	50e2      	str	r2, [r4, r3]
 8012b84:	e7d0      	b.n	8012b28 <_malloc_r+0x20>
 8012b86:	428c      	cmp	r4, r1
 8012b88:	684b      	ldr	r3, [r1, #4]
 8012b8a:	bf16      	itet	ne
 8012b8c:	6063      	strne	r3, [r4, #4]
 8012b8e:	6013      	streq	r3, [r2, #0]
 8012b90:	460c      	movne	r4, r1
 8012b92:	e7eb      	b.n	8012b6c <_malloc_r+0x64>
 8012b94:	460c      	mov	r4, r1
 8012b96:	6849      	ldr	r1, [r1, #4]
 8012b98:	e7cc      	b.n	8012b34 <_malloc_r+0x2c>
 8012b9a:	1cc4      	adds	r4, r0, #3
 8012b9c:	f024 0403 	bic.w	r4, r4, #3
 8012ba0:	42a0      	cmp	r0, r4
 8012ba2:	d005      	beq.n	8012bb0 <_malloc_r+0xa8>
 8012ba4:	1a21      	subs	r1, r4, r0
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	f000 f86c 	bl	8012c84 <_sbrk_r>
 8012bac:	3001      	adds	r0, #1
 8012bae:	d0cf      	beq.n	8012b50 <_malloc_r+0x48>
 8012bb0:	6025      	str	r5, [r4, #0]
 8012bb2:	e7db      	b.n	8012b6c <_malloc_r+0x64>
 8012bb4:	20008478 	.word	0x20008478
 8012bb8:	2000847c 	.word	0x2000847c

08012bbc <_puts_r>:
 8012bbc:	b570      	push	{r4, r5, r6, lr}
 8012bbe:	460e      	mov	r6, r1
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	b118      	cbz	r0, 8012bcc <_puts_r+0x10>
 8012bc4:	6983      	ldr	r3, [r0, #24]
 8012bc6:	b90b      	cbnz	r3, 8012bcc <_puts_r+0x10>
 8012bc8:	f000 fa1c 	bl	8013004 <__sinit>
 8012bcc:	69ab      	ldr	r3, [r5, #24]
 8012bce:	68ac      	ldr	r4, [r5, #8]
 8012bd0:	b913      	cbnz	r3, 8012bd8 <_puts_r+0x1c>
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	f000 fa16 	bl	8013004 <__sinit>
 8012bd8:	4b23      	ldr	r3, [pc, #140]	; (8012c68 <_puts_r+0xac>)
 8012bda:	429c      	cmp	r4, r3
 8012bdc:	d117      	bne.n	8012c0e <_puts_r+0x52>
 8012bde:	686c      	ldr	r4, [r5, #4]
 8012be0:	89a3      	ldrh	r3, [r4, #12]
 8012be2:	071b      	lsls	r3, r3, #28
 8012be4:	d51d      	bpl.n	8012c22 <_puts_r+0x66>
 8012be6:	6923      	ldr	r3, [r4, #16]
 8012be8:	b1db      	cbz	r3, 8012c22 <_puts_r+0x66>
 8012bea:	3e01      	subs	r6, #1
 8012bec:	68a3      	ldr	r3, [r4, #8]
 8012bee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	60a3      	str	r3, [r4, #8]
 8012bf6:	b9e9      	cbnz	r1, 8012c34 <_puts_r+0x78>
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	da2e      	bge.n	8012c5a <_puts_r+0x9e>
 8012bfc:	4622      	mov	r2, r4
 8012bfe:	210a      	movs	r1, #10
 8012c00:	4628      	mov	r0, r5
 8012c02:	f000 f84f 	bl	8012ca4 <__swbuf_r>
 8012c06:	3001      	adds	r0, #1
 8012c08:	d011      	beq.n	8012c2e <_puts_r+0x72>
 8012c0a:	200a      	movs	r0, #10
 8012c0c:	e011      	b.n	8012c32 <_puts_r+0x76>
 8012c0e:	4b17      	ldr	r3, [pc, #92]	; (8012c6c <_puts_r+0xb0>)
 8012c10:	429c      	cmp	r4, r3
 8012c12:	d101      	bne.n	8012c18 <_puts_r+0x5c>
 8012c14:	68ac      	ldr	r4, [r5, #8]
 8012c16:	e7e3      	b.n	8012be0 <_puts_r+0x24>
 8012c18:	4b15      	ldr	r3, [pc, #84]	; (8012c70 <_puts_r+0xb4>)
 8012c1a:	429c      	cmp	r4, r3
 8012c1c:	bf08      	it	eq
 8012c1e:	68ec      	ldreq	r4, [r5, #12]
 8012c20:	e7de      	b.n	8012be0 <_puts_r+0x24>
 8012c22:	4621      	mov	r1, r4
 8012c24:	4628      	mov	r0, r5
 8012c26:	f000 f88f 	bl	8012d48 <__swsetup_r>
 8012c2a:	2800      	cmp	r0, #0
 8012c2c:	d0dd      	beq.n	8012bea <_puts_r+0x2e>
 8012c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c32:	bd70      	pop	{r4, r5, r6, pc}
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	da04      	bge.n	8012c42 <_puts_r+0x86>
 8012c38:	69a2      	ldr	r2, [r4, #24]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	dc06      	bgt.n	8012c4c <_puts_r+0x90>
 8012c3e:	290a      	cmp	r1, #10
 8012c40:	d004      	beq.n	8012c4c <_puts_r+0x90>
 8012c42:	6823      	ldr	r3, [r4, #0]
 8012c44:	1c5a      	adds	r2, r3, #1
 8012c46:	6022      	str	r2, [r4, #0]
 8012c48:	7019      	strb	r1, [r3, #0]
 8012c4a:	e7cf      	b.n	8012bec <_puts_r+0x30>
 8012c4c:	4622      	mov	r2, r4
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f000 f828 	bl	8012ca4 <__swbuf_r>
 8012c54:	3001      	adds	r0, #1
 8012c56:	d1c9      	bne.n	8012bec <_puts_r+0x30>
 8012c58:	e7e9      	b.n	8012c2e <_puts_r+0x72>
 8012c5a:	6823      	ldr	r3, [r4, #0]
 8012c5c:	200a      	movs	r0, #10
 8012c5e:	1c5a      	adds	r2, r3, #1
 8012c60:	6022      	str	r2, [r4, #0]
 8012c62:	7018      	strb	r0, [r3, #0]
 8012c64:	e7e5      	b.n	8012c32 <_puts_r+0x76>
 8012c66:	bf00      	nop
 8012c68:	08013434 	.word	0x08013434
 8012c6c:	08013454 	.word	0x08013454
 8012c70:	08013414 	.word	0x08013414

08012c74 <puts>:
 8012c74:	4b02      	ldr	r3, [pc, #8]	; (8012c80 <puts+0xc>)
 8012c76:	4601      	mov	r1, r0
 8012c78:	6818      	ldr	r0, [r3, #0]
 8012c7a:	f7ff bf9f 	b.w	8012bbc <_puts_r>
 8012c7e:	bf00      	nop
 8012c80:	20000030 	.word	0x20000030

08012c84 <_sbrk_r>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4c06      	ldr	r4, [pc, #24]	; (8012ca0 <_sbrk_r+0x1c>)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	4605      	mov	r5, r0
 8012c8c:	4608      	mov	r0, r1
 8012c8e:	6023      	str	r3, [r4, #0]
 8012c90:	f7ef fb56 	bl	8002340 <_sbrk>
 8012c94:	1c43      	adds	r3, r0, #1
 8012c96:	d102      	bne.n	8012c9e <_sbrk_r+0x1a>
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	b103      	cbz	r3, 8012c9e <_sbrk_r+0x1a>
 8012c9c:	602b      	str	r3, [r5, #0]
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	200097bc 	.word	0x200097bc

08012ca4 <__swbuf_r>:
 8012ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca6:	460e      	mov	r6, r1
 8012ca8:	4614      	mov	r4, r2
 8012caa:	4605      	mov	r5, r0
 8012cac:	b118      	cbz	r0, 8012cb6 <__swbuf_r+0x12>
 8012cae:	6983      	ldr	r3, [r0, #24]
 8012cb0:	b90b      	cbnz	r3, 8012cb6 <__swbuf_r+0x12>
 8012cb2:	f000 f9a7 	bl	8013004 <__sinit>
 8012cb6:	4b21      	ldr	r3, [pc, #132]	; (8012d3c <__swbuf_r+0x98>)
 8012cb8:	429c      	cmp	r4, r3
 8012cba:	d12a      	bne.n	8012d12 <__swbuf_r+0x6e>
 8012cbc:	686c      	ldr	r4, [r5, #4]
 8012cbe:	69a3      	ldr	r3, [r4, #24]
 8012cc0:	60a3      	str	r3, [r4, #8]
 8012cc2:	89a3      	ldrh	r3, [r4, #12]
 8012cc4:	071a      	lsls	r2, r3, #28
 8012cc6:	d52e      	bpl.n	8012d26 <__swbuf_r+0x82>
 8012cc8:	6923      	ldr	r3, [r4, #16]
 8012cca:	b363      	cbz	r3, 8012d26 <__swbuf_r+0x82>
 8012ccc:	6923      	ldr	r3, [r4, #16]
 8012cce:	6820      	ldr	r0, [r4, #0]
 8012cd0:	1ac0      	subs	r0, r0, r3
 8012cd2:	6963      	ldr	r3, [r4, #20]
 8012cd4:	b2f6      	uxtb	r6, r6
 8012cd6:	4283      	cmp	r3, r0
 8012cd8:	4637      	mov	r7, r6
 8012cda:	dc04      	bgt.n	8012ce6 <__swbuf_r+0x42>
 8012cdc:	4621      	mov	r1, r4
 8012cde:	4628      	mov	r0, r5
 8012ce0:	f000 f926 	bl	8012f30 <_fflush_r>
 8012ce4:	bb28      	cbnz	r0, 8012d32 <__swbuf_r+0x8e>
 8012ce6:	68a3      	ldr	r3, [r4, #8]
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	60a3      	str	r3, [r4, #8]
 8012cec:	6823      	ldr	r3, [r4, #0]
 8012cee:	1c5a      	adds	r2, r3, #1
 8012cf0:	6022      	str	r2, [r4, #0]
 8012cf2:	701e      	strb	r6, [r3, #0]
 8012cf4:	6963      	ldr	r3, [r4, #20]
 8012cf6:	3001      	adds	r0, #1
 8012cf8:	4283      	cmp	r3, r0
 8012cfa:	d004      	beq.n	8012d06 <__swbuf_r+0x62>
 8012cfc:	89a3      	ldrh	r3, [r4, #12]
 8012cfe:	07db      	lsls	r3, r3, #31
 8012d00:	d519      	bpl.n	8012d36 <__swbuf_r+0x92>
 8012d02:	2e0a      	cmp	r6, #10
 8012d04:	d117      	bne.n	8012d36 <__swbuf_r+0x92>
 8012d06:	4621      	mov	r1, r4
 8012d08:	4628      	mov	r0, r5
 8012d0a:	f000 f911 	bl	8012f30 <_fflush_r>
 8012d0e:	b190      	cbz	r0, 8012d36 <__swbuf_r+0x92>
 8012d10:	e00f      	b.n	8012d32 <__swbuf_r+0x8e>
 8012d12:	4b0b      	ldr	r3, [pc, #44]	; (8012d40 <__swbuf_r+0x9c>)
 8012d14:	429c      	cmp	r4, r3
 8012d16:	d101      	bne.n	8012d1c <__swbuf_r+0x78>
 8012d18:	68ac      	ldr	r4, [r5, #8]
 8012d1a:	e7d0      	b.n	8012cbe <__swbuf_r+0x1a>
 8012d1c:	4b09      	ldr	r3, [pc, #36]	; (8012d44 <__swbuf_r+0xa0>)
 8012d1e:	429c      	cmp	r4, r3
 8012d20:	bf08      	it	eq
 8012d22:	68ec      	ldreq	r4, [r5, #12]
 8012d24:	e7cb      	b.n	8012cbe <__swbuf_r+0x1a>
 8012d26:	4621      	mov	r1, r4
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f000 f80d 	bl	8012d48 <__swsetup_r>
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d0cc      	beq.n	8012ccc <__swbuf_r+0x28>
 8012d32:	f04f 37ff 	mov.w	r7, #4294967295
 8012d36:	4638      	mov	r0, r7
 8012d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	08013434 	.word	0x08013434
 8012d40:	08013454 	.word	0x08013454
 8012d44:	08013414 	.word	0x08013414

08012d48 <__swsetup_r>:
 8012d48:	4b32      	ldr	r3, [pc, #200]	; (8012e14 <__swsetup_r+0xcc>)
 8012d4a:	b570      	push	{r4, r5, r6, lr}
 8012d4c:	681d      	ldr	r5, [r3, #0]
 8012d4e:	4606      	mov	r6, r0
 8012d50:	460c      	mov	r4, r1
 8012d52:	b125      	cbz	r5, 8012d5e <__swsetup_r+0x16>
 8012d54:	69ab      	ldr	r3, [r5, #24]
 8012d56:	b913      	cbnz	r3, 8012d5e <__swsetup_r+0x16>
 8012d58:	4628      	mov	r0, r5
 8012d5a:	f000 f953 	bl	8013004 <__sinit>
 8012d5e:	4b2e      	ldr	r3, [pc, #184]	; (8012e18 <__swsetup_r+0xd0>)
 8012d60:	429c      	cmp	r4, r3
 8012d62:	d10f      	bne.n	8012d84 <__swsetup_r+0x3c>
 8012d64:	686c      	ldr	r4, [r5, #4]
 8012d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	0715      	lsls	r5, r2, #28
 8012d6e:	d42c      	bmi.n	8012dca <__swsetup_r+0x82>
 8012d70:	06d0      	lsls	r0, r2, #27
 8012d72:	d411      	bmi.n	8012d98 <__swsetup_r+0x50>
 8012d74:	2209      	movs	r2, #9
 8012d76:	6032      	str	r2, [r6, #0]
 8012d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d7c:	81a3      	strh	r3, [r4, #12]
 8012d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d82:	e03e      	b.n	8012e02 <__swsetup_r+0xba>
 8012d84:	4b25      	ldr	r3, [pc, #148]	; (8012e1c <__swsetup_r+0xd4>)
 8012d86:	429c      	cmp	r4, r3
 8012d88:	d101      	bne.n	8012d8e <__swsetup_r+0x46>
 8012d8a:	68ac      	ldr	r4, [r5, #8]
 8012d8c:	e7eb      	b.n	8012d66 <__swsetup_r+0x1e>
 8012d8e:	4b24      	ldr	r3, [pc, #144]	; (8012e20 <__swsetup_r+0xd8>)
 8012d90:	429c      	cmp	r4, r3
 8012d92:	bf08      	it	eq
 8012d94:	68ec      	ldreq	r4, [r5, #12]
 8012d96:	e7e6      	b.n	8012d66 <__swsetup_r+0x1e>
 8012d98:	0751      	lsls	r1, r2, #29
 8012d9a:	d512      	bpl.n	8012dc2 <__swsetup_r+0x7a>
 8012d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d9e:	b141      	cbz	r1, 8012db2 <__swsetup_r+0x6a>
 8012da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012da4:	4299      	cmp	r1, r3
 8012da6:	d002      	beq.n	8012dae <__swsetup_r+0x66>
 8012da8:	4630      	mov	r0, r6
 8012daa:	f7ff fe5f 	bl	8012a6c <_free_r>
 8012dae:	2300      	movs	r3, #0
 8012db0:	6363      	str	r3, [r4, #52]	; 0x34
 8012db2:	89a3      	ldrh	r3, [r4, #12]
 8012db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012db8:	81a3      	strh	r3, [r4, #12]
 8012dba:	2300      	movs	r3, #0
 8012dbc:	6063      	str	r3, [r4, #4]
 8012dbe:	6923      	ldr	r3, [r4, #16]
 8012dc0:	6023      	str	r3, [r4, #0]
 8012dc2:	89a3      	ldrh	r3, [r4, #12]
 8012dc4:	f043 0308 	orr.w	r3, r3, #8
 8012dc8:	81a3      	strh	r3, [r4, #12]
 8012dca:	6923      	ldr	r3, [r4, #16]
 8012dcc:	b94b      	cbnz	r3, 8012de2 <__swsetup_r+0x9a>
 8012dce:	89a3      	ldrh	r3, [r4, #12]
 8012dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dd8:	d003      	beq.n	8012de2 <__swsetup_r+0x9a>
 8012dda:	4621      	mov	r1, r4
 8012ddc:	4630      	mov	r0, r6
 8012dde:	f000 f9bf 	bl	8013160 <__smakebuf_r>
 8012de2:	89a2      	ldrh	r2, [r4, #12]
 8012de4:	f012 0301 	ands.w	r3, r2, #1
 8012de8:	d00c      	beq.n	8012e04 <__swsetup_r+0xbc>
 8012dea:	2300      	movs	r3, #0
 8012dec:	60a3      	str	r3, [r4, #8]
 8012dee:	6963      	ldr	r3, [r4, #20]
 8012df0:	425b      	negs	r3, r3
 8012df2:	61a3      	str	r3, [r4, #24]
 8012df4:	6923      	ldr	r3, [r4, #16]
 8012df6:	b953      	cbnz	r3, 8012e0e <__swsetup_r+0xc6>
 8012df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dfc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012e00:	d1ba      	bne.n	8012d78 <__swsetup_r+0x30>
 8012e02:	bd70      	pop	{r4, r5, r6, pc}
 8012e04:	0792      	lsls	r2, r2, #30
 8012e06:	bf58      	it	pl
 8012e08:	6963      	ldrpl	r3, [r4, #20]
 8012e0a:	60a3      	str	r3, [r4, #8]
 8012e0c:	e7f2      	b.n	8012df4 <__swsetup_r+0xac>
 8012e0e:	2000      	movs	r0, #0
 8012e10:	e7f7      	b.n	8012e02 <__swsetup_r+0xba>
 8012e12:	bf00      	nop
 8012e14:	20000030 	.word	0x20000030
 8012e18:	08013434 	.word	0x08013434
 8012e1c:	08013454 	.word	0x08013454
 8012e20:	08013414 	.word	0x08013414

08012e24 <__sflush_r>:
 8012e24:	898a      	ldrh	r2, [r1, #12]
 8012e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e2a:	4605      	mov	r5, r0
 8012e2c:	0710      	lsls	r0, r2, #28
 8012e2e:	460c      	mov	r4, r1
 8012e30:	d458      	bmi.n	8012ee4 <__sflush_r+0xc0>
 8012e32:	684b      	ldr	r3, [r1, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	dc05      	bgt.n	8012e44 <__sflush_r+0x20>
 8012e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	dc02      	bgt.n	8012e44 <__sflush_r+0x20>
 8012e3e:	2000      	movs	r0, #0
 8012e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e46:	2e00      	cmp	r6, #0
 8012e48:	d0f9      	beq.n	8012e3e <__sflush_r+0x1a>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e50:	682f      	ldr	r7, [r5, #0]
 8012e52:	6a21      	ldr	r1, [r4, #32]
 8012e54:	602b      	str	r3, [r5, #0]
 8012e56:	d032      	beq.n	8012ebe <__sflush_r+0x9a>
 8012e58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e5a:	89a3      	ldrh	r3, [r4, #12]
 8012e5c:	075a      	lsls	r2, r3, #29
 8012e5e:	d505      	bpl.n	8012e6c <__sflush_r+0x48>
 8012e60:	6863      	ldr	r3, [r4, #4]
 8012e62:	1ac0      	subs	r0, r0, r3
 8012e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e66:	b10b      	cbz	r3, 8012e6c <__sflush_r+0x48>
 8012e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e6a:	1ac0      	subs	r0, r0, r3
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	4602      	mov	r2, r0
 8012e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e72:	6a21      	ldr	r1, [r4, #32]
 8012e74:	4628      	mov	r0, r5
 8012e76:	47b0      	blx	r6
 8012e78:	1c43      	adds	r3, r0, #1
 8012e7a:	89a3      	ldrh	r3, [r4, #12]
 8012e7c:	d106      	bne.n	8012e8c <__sflush_r+0x68>
 8012e7e:	6829      	ldr	r1, [r5, #0]
 8012e80:	291d      	cmp	r1, #29
 8012e82:	d848      	bhi.n	8012f16 <__sflush_r+0xf2>
 8012e84:	4a29      	ldr	r2, [pc, #164]	; (8012f2c <__sflush_r+0x108>)
 8012e86:	40ca      	lsrs	r2, r1
 8012e88:	07d6      	lsls	r6, r2, #31
 8012e8a:	d544      	bpl.n	8012f16 <__sflush_r+0xf2>
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	6062      	str	r2, [r4, #4]
 8012e90:	04d9      	lsls	r1, r3, #19
 8012e92:	6922      	ldr	r2, [r4, #16]
 8012e94:	6022      	str	r2, [r4, #0]
 8012e96:	d504      	bpl.n	8012ea2 <__sflush_r+0x7e>
 8012e98:	1c42      	adds	r2, r0, #1
 8012e9a:	d101      	bne.n	8012ea0 <__sflush_r+0x7c>
 8012e9c:	682b      	ldr	r3, [r5, #0]
 8012e9e:	b903      	cbnz	r3, 8012ea2 <__sflush_r+0x7e>
 8012ea0:	6560      	str	r0, [r4, #84]	; 0x54
 8012ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ea4:	602f      	str	r7, [r5, #0]
 8012ea6:	2900      	cmp	r1, #0
 8012ea8:	d0c9      	beq.n	8012e3e <__sflush_r+0x1a>
 8012eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eae:	4299      	cmp	r1, r3
 8012eb0:	d002      	beq.n	8012eb8 <__sflush_r+0x94>
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	f7ff fdda 	bl	8012a6c <_free_r>
 8012eb8:	2000      	movs	r0, #0
 8012eba:	6360      	str	r0, [r4, #52]	; 0x34
 8012ebc:	e7c0      	b.n	8012e40 <__sflush_r+0x1c>
 8012ebe:	2301      	movs	r3, #1
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	47b0      	blx	r6
 8012ec4:	1c41      	adds	r1, r0, #1
 8012ec6:	d1c8      	bne.n	8012e5a <__sflush_r+0x36>
 8012ec8:	682b      	ldr	r3, [r5, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d0c5      	beq.n	8012e5a <__sflush_r+0x36>
 8012ece:	2b1d      	cmp	r3, #29
 8012ed0:	d001      	beq.n	8012ed6 <__sflush_r+0xb2>
 8012ed2:	2b16      	cmp	r3, #22
 8012ed4:	d101      	bne.n	8012eda <__sflush_r+0xb6>
 8012ed6:	602f      	str	r7, [r5, #0]
 8012ed8:	e7b1      	b.n	8012e3e <__sflush_r+0x1a>
 8012eda:	89a3      	ldrh	r3, [r4, #12]
 8012edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ee0:	81a3      	strh	r3, [r4, #12]
 8012ee2:	e7ad      	b.n	8012e40 <__sflush_r+0x1c>
 8012ee4:	690f      	ldr	r7, [r1, #16]
 8012ee6:	2f00      	cmp	r7, #0
 8012ee8:	d0a9      	beq.n	8012e3e <__sflush_r+0x1a>
 8012eea:	0793      	lsls	r3, r2, #30
 8012eec:	680e      	ldr	r6, [r1, #0]
 8012eee:	bf08      	it	eq
 8012ef0:	694b      	ldreq	r3, [r1, #20]
 8012ef2:	600f      	str	r7, [r1, #0]
 8012ef4:	bf18      	it	ne
 8012ef6:	2300      	movne	r3, #0
 8012ef8:	eba6 0807 	sub.w	r8, r6, r7
 8012efc:	608b      	str	r3, [r1, #8]
 8012efe:	f1b8 0f00 	cmp.w	r8, #0
 8012f02:	dd9c      	ble.n	8012e3e <__sflush_r+0x1a>
 8012f04:	4643      	mov	r3, r8
 8012f06:	463a      	mov	r2, r7
 8012f08:	6a21      	ldr	r1, [r4, #32]
 8012f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	47b0      	blx	r6
 8012f10:	2800      	cmp	r0, #0
 8012f12:	dc06      	bgt.n	8012f22 <__sflush_r+0xfe>
 8012f14:	89a3      	ldrh	r3, [r4, #12]
 8012f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f1a:	81a3      	strh	r3, [r4, #12]
 8012f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f20:	e78e      	b.n	8012e40 <__sflush_r+0x1c>
 8012f22:	4407      	add	r7, r0
 8012f24:	eba8 0800 	sub.w	r8, r8, r0
 8012f28:	e7e9      	b.n	8012efe <__sflush_r+0xda>
 8012f2a:	bf00      	nop
 8012f2c:	20400001 	.word	0x20400001

08012f30 <_fflush_r>:
 8012f30:	b538      	push	{r3, r4, r5, lr}
 8012f32:	690b      	ldr	r3, [r1, #16]
 8012f34:	4605      	mov	r5, r0
 8012f36:	460c      	mov	r4, r1
 8012f38:	b1db      	cbz	r3, 8012f72 <_fflush_r+0x42>
 8012f3a:	b118      	cbz	r0, 8012f44 <_fflush_r+0x14>
 8012f3c:	6983      	ldr	r3, [r0, #24]
 8012f3e:	b90b      	cbnz	r3, 8012f44 <_fflush_r+0x14>
 8012f40:	f000 f860 	bl	8013004 <__sinit>
 8012f44:	4b0c      	ldr	r3, [pc, #48]	; (8012f78 <_fflush_r+0x48>)
 8012f46:	429c      	cmp	r4, r3
 8012f48:	d109      	bne.n	8012f5e <_fflush_r+0x2e>
 8012f4a:	686c      	ldr	r4, [r5, #4]
 8012f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f50:	b17b      	cbz	r3, 8012f72 <_fflush_r+0x42>
 8012f52:	4621      	mov	r1, r4
 8012f54:	4628      	mov	r0, r5
 8012f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f5a:	f7ff bf63 	b.w	8012e24 <__sflush_r>
 8012f5e:	4b07      	ldr	r3, [pc, #28]	; (8012f7c <_fflush_r+0x4c>)
 8012f60:	429c      	cmp	r4, r3
 8012f62:	d101      	bne.n	8012f68 <_fflush_r+0x38>
 8012f64:	68ac      	ldr	r4, [r5, #8]
 8012f66:	e7f1      	b.n	8012f4c <_fflush_r+0x1c>
 8012f68:	4b05      	ldr	r3, [pc, #20]	; (8012f80 <_fflush_r+0x50>)
 8012f6a:	429c      	cmp	r4, r3
 8012f6c:	bf08      	it	eq
 8012f6e:	68ec      	ldreq	r4, [r5, #12]
 8012f70:	e7ec      	b.n	8012f4c <_fflush_r+0x1c>
 8012f72:	2000      	movs	r0, #0
 8012f74:	bd38      	pop	{r3, r4, r5, pc}
 8012f76:	bf00      	nop
 8012f78:	08013434 	.word	0x08013434
 8012f7c:	08013454 	.word	0x08013454
 8012f80:	08013414 	.word	0x08013414

08012f84 <std>:
 8012f84:	2300      	movs	r3, #0
 8012f86:	b510      	push	{r4, lr}
 8012f88:	4604      	mov	r4, r0
 8012f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8012f8e:	6083      	str	r3, [r0, #8]
 8012f90:	8181      	strh	r1, [r0, #12]
 8012f92:	6643      	str	r3, [r0, #100]	; 0x64
 8012f94:	81c2      	strh	r2, [r0, #14]
 8012f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f9a:	6183      	str	r3, [r0, #24]
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	2208      	movs	r2, #8
 8012fa0:	305c      	adds	r0, #92	; 0x5c
 8012fa2:	f7ff fd5a 	bl	8012a5a <memset>
 8012fa6:	4b05      	ldr	r3, [pc, #20]	; (8012fbc <std+0x38>)
 8012fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8012faa:	4b05      	ldr	r3, [pc, #20]	; (8012fc0 <std+0x3c>)
 8012fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8012fae:	4b05      	ldr	r3, [pc, #20]	; (8012fc4 <std+0x40>)
 8012fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012fb2:	4b05      	ldr	r3, [pc, #20]	; (8012fc8 <std+0x44>)
 8012fb4:	6224      	str	r4, [r4, #32]
 8012fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8012fb8:	bd10      	pop	{r4, pc}
 8012fba:	bf00      	nop
 8012fbc:	080131e5 	.word	0x080131e5
 8012fc0:	08013207 	.word	0x08013207
 8012fc4:	0801323f 	.word	0x0801323f
 8012fc8:	08013263 	.word	0x08013263

08012fcc <_cleanup_r>:
 8012fcc:	4901      	ldr	r1, [pc, #4]	; (8012fd4 <_cleanup_r+0x8>)
 8012fce:	f000 b885 	b.w	80130dc <_fwalk_reent>
 8012fd2:	bf00      	nop
 8012fd4:	08012f31 	.word	0x08012f31

08012fd8 <__sfmoreglue>:
 8012fd8:	b570      	push	{r4, r5, r6, lr}
 8012fda:	1e4a      	subs	r2, r1, #1
 8012fdc:	2568      	movs	r5, #104	; 0x68
 8012fde:	4355      	muls	r5, r2
 8012fe0:	460e      	mov	r6, r1
 8012fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012fe6:	f7ff fd8f 	bl	8012b08 <_malloc_r>
 8012fea:	4604      	mov	r4, r0
 8012fec:	b140      	cbz	r0, 8013000 <__sfmoreglue+0x28>
 8012fee:	2100      	movs	r1, #0
 8012ff0:	e9c0 1600 	strd	r1, r6, [r0]
 8012ff4:	300c      	adds	r0, #12
 8012ff6:	60a0      	str	r0, [r4, #8]
 8012ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ffc:	f7ff fd2d 	bl	8012a5a <memset>
 8013000:	4620      	mov	r0, r4
 8013002:	bd70      	pop	{r4, r5, r6, pc}

08013004 <__sinit>:
 8013004:	6983      	ldr	r3, [r0, #24]
 8013006:	b510      	push	{r4, lr}
 8013008:	4604      	mov	r4, r0
 801300a:	bb33      	cbnz	r3, 801305a <__sinit+0x56>
 801300c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013010:	6503      	str	r3, [r0, #80]	; 0x50
 8013012:	4b12      	ldr	r3, [pc, #72]	; (801305c <__sinit+0x58>)
 8013014:	4a12      	ldr	r2, [pc, #72]	; (8013060 <__sinit+0x5c>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	6282      	str	r2, [r0, #40]	; 0x28
 801301a:	4298      	cmp	r0, r3
 801301c:	bf04      	itt	eq
 801301e:	2301      	moveq	r3, #1
 8013020:	6183      	streq	r3, [r0, #24]
 8013022:	f000 f81f 	bl	8013064 <__sfp>
 8013026:	6060      	str	r0, [r4, #4]
 8013028:	4620      	mov	r0, r4
 801302a:	f000 f81b 	bl	8013064 <__sfp>
 801302e:	60a0      	str	r0, [r4, #8]
 8013030:	4620      	mov	r0, r4
 8013032:	f000 f817 	bl	8013064 <__sfp>
 8013036:	2200      	movs	r2, #0
 8013038:	60e0      	str	r0, [r4, #12]
 801303a:	2104      	movs	r1, #4
 801303c:	6860      	ldr	r0, [r4, #4]
 801303e:	f7ff ffa1 	bl	8012f84 <std>
 8013042:	2201      	movs	r2, #1
 8013044:	2109      	movs	r1, #9
 8013046:	68a0      	ldr	r0, [r4, #8]
 8013048:	f7ff ff9c 	bl	8012f84 <std>
 801304c:	2202      	movs	r2, #2
 801304e:	2112      	movs	r1, #18
 8013050:	68e0      	ldr	r0, [r4, #12]
 8013052:	f7ff ff97 	bl	8012f84 <std>
 8013056:	2301      	movs	r3, #1
 8013058:	61a3      	str	r3, [r4, #24]
 801305a:	bd10      	pop	{r4, pc}
 801305c:	08013410 	.word	0x08013410
 8013060:	08012fcd 	.word	0x08012fcd

08013064 <__sfp>:
 8013064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013066:	4b1b      	ldr	r3, [pc, #108]	; (80130d4 <__sfp+0x70>)
 8013068:	681e      	ldr	r6, [r3, #0]
 801306a:	69b3      	ldr	r3, [r6, #24]
 801306c:	4607      	mov	r7, r0
 801306e:	b913      	cbnz	r3, 8013076 <__sfp+0x12>
 8013070:	4630      	mov	r0, r6
 8013072:	f7ff ffc7 	bl	8013004 <__sinit>
 8013076:	3648      	adds	r6, #72	; 0x48
 8013078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801307c:	3b01      	subs	r3, #1
 801307e:	d503      	bpl.n	8013088 <__sfp+0x24>
 8013080:	6833      	ldr	r3, [r6, #0]
 8013082:	b133      	cbz	r3, 8013092 <__sfp+0x2e>
 8013084:	6836      	ldr	r6, [r6, #0]
 8013086:	e7f7      	b.n	8013078 <__sfp+0x14>
 8013088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801308c:	b16d      	cbz	r5, 80130aa <__sfp+0x46>
 801308e:	3468      	adds	r4, #104	; 0x68
 8013090:	e7f4      	b.n	801307c <__sfp+0x18>
 8013092:	2104      	movs	r1, #4
 8013094:	4638      	mov	r0, r7
 8013096:	f7ff ff9f 	bl	8012fd8 <__sfmoreglue>
 801309a:	6030      	str	r0, [r6, #0]
 801309c:	2800      	cmp	r0, #0
 801309e:	d1f1      	bne.n	8013084 <__sfp+0x20>
 80130a0:	230c      	movs	r3, #12
 80130a2:	603b      	str	r3, [r7, #0]
 80130a4:	4604      	mov	r4, r0
 80130a6:	4620      	mov	r0, r4
 80130a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130aa:	4b0b      	ldr	r3, [pc, #44]	; (80130d8 <__sfp+0x74>)
 80130ac:	6665      	str	r5, [r4, #100]	; 0x64
 80130ae:	e9c4 5500 	strd	r5, r5, [r4]
 80130b2:	60a5      	str	r5, [r4, #8]
 80130b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80130b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80130bc:	2208      	movs	r2, #8
 80130be:	4629      	mov	r1, r5
 80130c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80130c4:	f7ff fcc9 	bl	8012a5a <memset>
 80130c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80130cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80130d0:	e7e9      	b.n	80130a6 <__sfp+0x42>
 80130d2:	bf00      	nop
 80130d4:	08013410 	.word	0x08013410
 80130d8:	ffff0001 	.word	0xffff0001

080130dc <_fwalk_reent>:
 80130dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130e0:	4680      	mov	r8, r0
 80130e2:	4689      	mov	r9, r1
 80130e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80130e8:	2600      	movs	r6, #0
 80130ea:	b914      	cbnz	r4, 80130f2 <_fwalk_reent+0x16>
 80130ec:	4630      	mov	r0, r6
 80130ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80130f6:	3f01      	subs	r7, #1
 80130f8:	d501      	bpl.n	80130fe <_fwalk_reent+0x22>
 80130fa:	6824      	ldr	r4, [r4, #0]
 80130fc:	e7f5      	b.n	80130ea <_fwalk_reent+0xe>
 80130fe:	89ab      	ldrh	r3, [r5, #12]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d907      	bls.n	8013114 <_fwalk_reent+0x38>
 8013104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013108:	3301      	adds	r3, #1
 801310a:	d003      	beq.n	8013114 <_fwalk_reent+0x38>
 801310c:	4629      	mov	r1, r5
 801310e:	4640      	mov	r0, r8
 8013110:	47c8      	blx	r9
 8013112:	4306      	orrs	r6, r0
 8013114:	3568      	adds	r5, #104	; 0x68
 8013116:	e7ee      	b.n	80130f6 <_fwalk_reent+0x1a>

08013118 <__swhatbuf_r>:
 8013118:	b570      	push	{r4, r5, r6, lr}
 801311a:	460e      	mov	r6, r1
 801311c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013120:	2900      	cmp	r1, #0
 8013122:	b096      	sub	sp, #88	; 0x58
 8013124:	4614      	mov	r4, r2
 8013126:	461d      	mov	r5, r3
 8013128:	da07      	bge.n	801313a <__swhatbuf_r+0x22>
 801312a:	2300      	movs	r3, #0
 801312c:	602b      	str	r3, [r5, #0]
 801312e:	89b3      	ldrh	r3, [r6, #12]
 8013130:	061a      	lsls	r2, r3, #24
 8013132:	d410      	bmi.n	8013156 <__swhatbuf_r+0x3e>
 8013134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013138:	e00e      	b.n	8013158 <__swhatbuf_r+0x40>
 801313a:	466a      	mov	r2, sp
 801313c:	f000 f8b8 	bl	80132b0 <_fstat_r>
 8013140:	2800      	cmp	r0, #0
 8013142:	dbf2      	blt.n	801312a <__swhatbuf_r+0x12>
 8013144:	9a01      	ldr	r2, [sp, #4]
 8013146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801314a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801314e:	425a      	negs	r2, r3
 8013150:	415a      	adcs	r2, r3
 8013152:	602a      	str	r2, [r5, #0]
 8013154:	e7ee      	b.n	8013134 <__swhatbuf_r+0x1c>
 8013156:	2340      	movs	r3, #64	; 0x40
 8013158:	2000      	movs	r0, #0
 801315a:	6023      	str	r3, [r4, #0]
 801315c:	b016      	add	sp, #88	; 0x58
 801315e:	bd70      	pop	{r4, r5, r6, pc}

08013160 <__smakebuf_r>:
 8013160:	898b      	ldrh	r3, [r1, #12]
 8013162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013164:	079d      	lsls	r5, r3, #30
 8013166:	4606      	mov	r6, r0
 8013168:	460c      	mov	r4, r1
 801316a:	d507      	bpl.n	801317c <__smakebuf_r+0x1c>
 801316c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013170:	6023      	str	r3, [r4, #0]
 8013172:	6123      	str	r3, [r4, #16]
 8013174:	2301      	movs	r3, #1
 8013176:	6163      	str	r3, [r4, #20]
 8013178:	b002      	add	sp, #8
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	ab01      	add	r3, sp, #4
 801317e:	466a      	mov	r2, sp
 8013180:	f7ff ffca 	bl	8013118 <__swhatbuf_r>
 8013184:	9900      	ldr	r1, [sp, #0]
 8013186:	4605      	mov	r5, r0
 8013188:	4630      	mov	r0, r6
 801318a:	f7ff fcbd 	bl	8012b08 <_malloc_r>
 801318e:	b948      	cbnz	r0, 80131a4 <__smakebuf_r+0x44>
 8013190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013194:	059a      	lsls	r2, r3, #22
 8013196:	d4ef      	bmi.n	8013178 <__smakebuf_r+0x18>
 8013198:	f023 0303 	bic.w	r3, r3, #3
 801319c:	f043 0302 	orr.w	r3, r3, #2
 80131a0:	81a3      	strh	r3, [r4, #12]
 80131a2:	e7e3      	b.n	801316c <__smakebuf_r+0xc>
 80131a4:	4b0d      	ldr	r3, [pc, #52]	; (80131dc <__smakebuf_r+0x7c>)
 80131a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80131a8:	89a3      	ldrh	r3, [r4, #12]
 80131aa:	6020      	str	r0, [r4, #0]
 80131ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131b0:	81a3      	strh	r3, [r4, #12]
 80131b2:	9b00      	ldr	r3, [sp, #0]
 80131b4:	6163      	str	r3, [r4, #20]
 80131b6:	9b01      	ldr	r3, [sp, #4]
 80131b8:	6120      	str	r0, [r4, #16]
 80131ba:	b15b      	cbz	r3, 80131d4 <__smakebuf_r+0x74>
 80131bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131c0:	4630      	mov	r0, r6
 80131c2:	f000 f887 	bl	80132d4 <_isatty_r>
 80131c6:	b128      	cbz	r0, 80131d4 <__smakebuf_r+0x74>
 80131c8:	89a3      	ldrh	r3, [r4, #12]
 80131ca:	f023 0303 	bic.w	r3, r3, #3
 80131ce:	f043 0301 	orr.w	r3, r3, #1
 80131d2:	81a3      	strh	r3, [r4, #12]
 80131d4:	89a3      	ldrh	r3, [r4, #12]
 80131d6:	431d      	orrs	r5, r3
 80131d8:	81a5      	strh	r5, [r4, #12]
 80131da:	e7cd      	b.n	8013178 <__smakebuf_r+0x18>
 80131dc:	08012fcd 	.word	0x08012fcd

080131e0 <__malloc_lock>:
 80131e0:	4770      	bx	lr

080131e2 <__malloc_unlock>:
 80131e2:	4770      	bx	lr

080131e4 <__sread>:
 80131e4:	b510      	push	{r4, lr}
 80131e6:	460c      	mov	r4, r1
 80131e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131ec:	f000 f894 	bl	8013318 <_read_r>
 80131f0:	2800      	cmp	r0, #0
 80131f2:	bfab      	itete	ge
 80131f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80131f6:	89a3      	ldrhlt	r3, [r4, #12]
 80131f8:	181b      	addge	r3, r3, r0
 80131fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80131fe:	bfac      	ite	ge
 8013200:	6563      	strge	r3, [r4, #84]	; 0x54
 8013202:	81a3      	strhlt	r3, [r4, #12]
 8013204:	bd10      	pop	{r4, pc}

08013206 <__swrite>:
 8013206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801320a:	461f      	mov	r7, r3
 801320c:	898b      	ldrh	r3, [r1, #12]
 801320e:	05db      	lsls	r3, r3, #23
 8013210:	4605      	mov	r5, r0
 8013212:	460c      	mov	r4, r1
 8013214:	4616      	mov	r6, r2
 8013216:	d505      	bpl.n	8013224 <__swrite+0x1e>
 8013218:	2302      	movs	r3, #2
 801321a:	2200      	movs	r2, #0
 801321c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013220:	f000 f868 	bl	80132f4 <_lseek_r>
 8013224:	89a3      	ldrh	r3, [r4, #12]
 8013226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801322a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801322e:	81a3      	strh	r3, [r4, #12]
 8013230:	4632      	mov	r2, r6
 8013232:	463b      	mov	r3, r7
 8013234:	4628      	mov	r0, r5
 8013236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801323a:	f000 b817 	b.w	801326c <_write_r>

0801323e <__sseek>:
 801323e:	b510      	push	{r4, lr}
 8013240:	460c      	mov	r4, r1
 8013242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013246:	f000 f855 	bl	80132f4 <_lseek_r>
 801324a:	1c43      	adds	r3, r0, #1
 801324c:	89a3      	ldrh	r3, [r4, #12]
 801324e:	bf15      	itete	ne
 8013250:	6560      	strne	r0, [r4, #84]	; 0x54
 8013252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801325a:	81a3      	strheq	r3, [r4, #12]
 801325c:	bf18      	it	ne
 801325e:	81a3      	strhne	r3, [r4, #12]
 8013260:	bd10      	pop	{r4, pc}

08013262 <__sclose>:
 8013262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013266:	f000 b813 	b.w	8013290 <_close_r>
	...

0801326c <_write_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	4c07      	ldr	r4, [pc, #28]	; (801328c <_write_r+0x20>)
 8013270:	4605      	mov	r5, r0
 8013272:	4608      	mov	r0, r1
 8013274:	4611      	mov	r1, r2
 8013276:	2200      	movs	r2, #0
 8013278:	6022      	str	r2, [r4, #0]
 801327a:	461a      	mov	r2, r3
 801327c:	f7ef f80f 	bl	800229e <_write>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d102      	bne.n	801328a <_write_r+0x1e>
 8013284:	6823      	ldr	r3, [r4, #0]
 8013286:	b103      	cbz	r3, 801328a <_write_r+0x1e>
 8013288:	602b      	str	r3, [r5, #0]
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	200097bc 	.word	0x200097bc

08013290 <_close_r>:
 8013290:	b538      	push	{r3, r4, r5, lr}
 8013292:	4c06      	ldr	r4, [pc, #24]	; (80132ac <_close_r+0x1c>)
 8013294:	2300      	movs	r3, #0
 8013296:	4605      	mov	r5, r0
 8013298:	4608      	mov	r0, r1
 801329a:	6023      	str	r3, [r4, #0]
 801329c:	f7ef f81b 	bl	80022d6 <_close>
 80132a0:	1c43      	adds	r3, r0, #1
 80132a2:	d102      	bne.n	80132aa <_close_r+0x1a>
 80132a4:	6823      	ldr	r3, [r4, #0]
 80132a6:	b103      	cbz	r3, 80132aa <_close_r+0x1a>
 80132a8:	602b      	str	r3, [r5, #0]
 80132aa:	bd38      	pop	{r3, r4, r5, pc}
 80132ac:	200097bc 	.word	0x200097bc

080132b0 <_fstat_r>:
 80132b0:	b538      	push	{r3, r4, r5, lr}
 80132b2:	4c07      	ldr	r4, [pc, #28]	; (80132d0 <_fstat_r+0x20>)
 80132b4:	2300      	movs	r3, #0
 80132b6:	4605      	mov	r5, r0
 80132b8:	4608      	mov	r0, r1
 80132ba:	4611      	mov	r1, r2
 80132bc:	6023      	str	r3, [r4, #0]
 80132be:	f7ef f816 	bl	80022ee <_fstat>
 80132c2:	1c43      	adds	r3, r0, #1
 80132c4:	d102      	bne.n	80132cc <_fstat_r+0x1c>
 80132c6:	6823      	ldr	r3, [r4, #0]
 80132c8:	b103      	cbz	r3, 80132cc <_fstat_r+0x1c>
 80132ca:	602b      	str	r3, [r5, #0]
 80132cc:	bd38      	pop	{r3, r4, r5, pc}
 80132ce:	bf00      	nop
 80132d0:	200097bc 	.word	0x200097bc

080132d4 <_isatty_r>:
 80132d4:	b538      	push	{r3, r4, r5, lr}
 80132d6:	4c06      	ldr	r4, [pc, #24]	; (80132f0 <_isatty_r+0x1c>)
 80132d8:	2300      	movs	r3, #0
 80132da:	4605      	mov	r5, r0
 80132dc:	4608      	mov	r0, r1
 80132de:	6023      	str	r3, [r4, #0]
 80132e0:	f7ef f815 	bl	800230e <_isatty>
 80132e4:	1c43      	adds	r3, r0, #1
 80132e6:	d102      	bne.n	80132ee <_isatty_r+0x1a>
 80132e8:	6823      	ldr	r3, [r4, #0]
 80132ea:	b103      	cbz	r3, 80132ee <_isatty_r+0x1a>
 80132ec:	602b      	str	r3, [r5, #0]
 80132ee:	bd38      	pop	{r3, r4, r5, pc}
 80132f0:	200097bc 	.word	0x200097bc

080132f4 <_lseek_r>:
 80132f4:	b538      	push	{r3, r4, r5, lr}
 80132f6:	4c07      	ldr	r4, [pc, #28]	; (8013314 <_lseek_r+0x20>)
 80132f8:	4605      	mov	r5, r0
 80132fa:	4608      	mov	r0, r1
 80132fc:	4611      	mov	r1, r2
 80132fe:	2200      	movs	r2, #0
 8013300:	6022      	str	r2, [r4, #0]
 8013302:	461a      	mov	r2, r3
 8013304:	f7ef f80e 	bl	8002324 <_lseek>
 8013308:	1c43      	adds	r3, r0, #1
 801330a:	d102      	bne.n	8013312 <_lseek_r+0x1e>
 801330c:	6823      	ldr	r3, [r4, #0]
 801330e:	b103      	cbz	r3, 8013312 <_lseek_r+0x1e>
 8013310:	602b      	str	r3, [r5, #0]
 8013312:	bd38      	pop	{r3, r4, r5, pc}
 8013314:	200097bc 	.word	0x200097bc

08013318 <_read_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	4c07      	ldr	r4, [pc, #28]	; (8013338 <_read_r+0x20>)
 801331c:	4605      	mov	r5, r0
 801331e:	4608      	mov	r0, r1
 8013320:	4611      	mov	r1, r2
 8013322:	2200      	movs	r2, #0
 8013324:	6022      	str	r2, [r4, #0]
 8013326:	461a      	mov	r2, r3
 8013328:	f7ee ff9c 	bl	8002264 <_read>
 801332c:	1c43      	adds	r3, r0, #1
 801332e:	d102      	bne.n	8013336 <_read_r+0x1e>
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	b103      	cbz	r3, 8013336 <_read_r+0x1e>
 8013334:	602b      	str	r3, [r5, #0]
 8013336:	bd38      	pop	{r3, r4, r5, pc}
 8013338:	200097bc 	.word	0x200097bc

0801333c <_init>:
 801333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801333e:	bf00      	nop
 8013340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013342:	bc08      	pop	{r3}
 8013344:	469e      	mov	lr, r3
 8013346:	4770      	bx	lr

08013348 <_fini>:
 8013348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801334a:	bf00      	nop
 801334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801334e:	bc08      	pop	{r3}
 8013350:	469e      	mov	lr, r3
 8013352:	4770      	bx	lr
