
KEY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020bc  080020bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080020bc  080020bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020bc  080020bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020bc  080020bc  000120bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020c0  080020c0  000120c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080020c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080020c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080020c8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085fb  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001482  00000000  00000000  00028628  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000368  00000000  00000000  00029ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002d0  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001013e  00000000  00000000  0002a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005765  00000000  00000000  0003a226  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005ef76  00000000  00000000  0003f98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009e901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b74  00000000  00000000  0009e97c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	08002080 	.word	0x08002080

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	08002080 	.word	0x08002080

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <MX_GPIO_Init+0xac>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0310 	and.w	r3, r3, #16
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 8000242:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <MX_GPIO_Init+0xac>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a1c      	ldr	r2, [pc, #112]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000260:	f043 0308 	orr.w	r3, r3, #8
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_GPIO_Init+0xac>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0308 	and.w	r3, r3, #8
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000278:	4816      	ldr	r0, [pc, #88]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800027a:	f000 fcae 	bl	8000bda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = UP_Pin|LEFT_Pin|DOWN_Pin;
 800027e:	230e      	movs	r3, #14
 8000280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000286:	2301      	movs	r3, #1
 8000288:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800028a:	f107 0310 	add.w	r3, r7, #16
 800028e:	4619      	mov	r1, r3
 8000290:	4811      	ldr	r0, [pc, #68]	; (80002d8 <MX_GPIO_Init+0xb4>)
 8000292:	f000 fb1d 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RIGHT_Pin|CTR_Pin;
 8000296:	2303      	movs	r3, #3
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	4619      	mov	r1, r3
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <MX_GPIO_Init+0xb8>)
 80002aa:	f000 fb11 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80002ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80002b8:	2302      	movs	r3, #2
 80002ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	4619      	mov	r1, r3
 80002c2:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_GPIO_Init+0xb0>)
 80002c4:	f000 fb04 	bl	80008d0 <HAL_GPIO_Init>

}
 80002c8:	bf00      	nop
 80002ca:	3720      	adds	r7, #32
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	40011000 	.word	0x40011000
 80002dc:	40010800 	.word	0x40010800

080002e0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 f988 	bl	80005f8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f8ac 	bl	8000444 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f7ff ff9a 	bl	8000224 <MX_GPIO_Init>
  SystemClock_Config();
 80002f0:	f000 f8a8 	bl	8000444 <SystemClock_Config>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fa:	484f      	ldr	r0, [pc, #316]	; (8000438 <main+0x158>)
 80002fc:	f000 fc6d 	bl	8000bda <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000306:	484c      	ldr	r0, [pc, #304]	; (8000438 <main+0x158>)
 8000308:	f000 fc67 	bl	8000bda <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000312:	4849      	ldr	r0, [pc, #292]	; (8000438 <main+0x158>)
 8000314:	f000 fc61 	bl	8000bda <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031e:	4846      	ldr	r0, [pc, #280]	; (8000438 <main+0x158>)
 8000320:	f000 fc5b 	bl	8000bda <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(1000);

	  if(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin) == GPIO_PIN_SET)
 8000324:	2102      	movs	r1, #2
 8000326:	4845      	ldr	r0, [pc, #276]	; (800043c <main+0x15c>)
 8000328:	f000 fc40 	bl	8000bac <HAL_GPIO_ReadPin>
 800032c:	4603      	mov	r3, r0
 800032e:	2b01      	cmp	r3, #1
 8000330:	d106      	bne.n	8000340 <main+0x60>
	  {
	  	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000338:	483f      	ldr	r0, [pc, #252]	; (8000438 <main+0x158>)
 800033a:	f000 fc4e 	bl	8000bda <HAL_GPIO_WritePin>
 800033e:	e005      	b.n	800034c <main+0x6c>
	  }
	  else	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000346:	483c      	ldr	r0, [pc, #240]	; (8000438 <main+0x158>)
 8000348:	f000 fc47 	bl	8000bda <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin) == GPIO_PIN_SET)
 800034c:	2108      	movs	r1, #8
 800034e:	483b      	ldr	r0, [pc, #236]	; (800043c <main+0x15c>)
 8000350:	f000 fc2c 	bl	8000bac <HAL_GPIO_ReadPin>
 8000354:	4603      	mov	r3, r0
 8000356:	2b01      	cmp	r3, #1
 8000358:	d106      	bne.n	8000368 <main+0x88>
	  {
	  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000360:	4835      	ldr	r0, [pc, #212]	; (8000438 <main+0x158>)
 8000362:	f000 fc3a 	bl	8000bda <HAL_GPIO_WritePin>
 8000366:	e005      	b.n	8000374 <main+0x94>
	  }
	  else	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	4832      	ldr	r0, [pc, #200]	; (8000438 <main+0x158>)
 8000370:	f000 fc33 	bl	8000bda <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_SET)
 8000374:	2104      	movs	r1, #4
 8000376:	4831      	ldr	r0, [pc, #196]	; (800043c <main+0x15c>)
 8000378:	f000 fc18 	bl	8000bac <HAL_GPIO_ReadPin>
 800037c:	4603      	mov	r3, r0
 800037e:	2b01      	cmp	r3, #1
 8000380:	d106      	bne.n	8000390 <main+0xb0>
	  {
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	482b      	ldr	r0, [pc, #172]	; (8000438 <main+0x158>)
 800038a:	f000 fc26 	bl	8000bda <HAL_GPIO_WritePin>
 800038e:	e005      	b.n	800039c <main+0xbc>
	  }
	  else	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000396:	4828      	ldr	r0, [pc, #160]	; (8000438 <main+0x158>)
 8000398:	f000 fc1f 	bl	8000bda <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) == GPIO_PIN_SET)
 800039c:	2101      	movs	r1, #1
 800039e:	4828      	ldr	r0, [pc, #160]	; (8000440 <main+0x160>)
 80003a0:	f000 fc04 	bl	8000bac <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d106      	bne.n	80003b8 <main+0xd8>
	  {
	  	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b0:	4821      	ldr	r0, [pc, #132]	; (8000438 <main+0x158>)
 80003b2:	f000 fc12 	bl	8000bda <HAL_GPIO_WritePin>
 80003b6:	e005      	b.n	80003c4 <main+0xe4>
	  }
	  else	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003be:	481e      	ldr	r0, [pc, #120]	; (8000438 <main+0x158>)
 80003c0:	f000 fc0b 	bl	8000bda <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(CTR_GPIO_Port, CTR_Pin) == GPIO_PIN_SET)
 80003c4:	2102      	movs	r1, #2
 80003c6:	481e      	ldr	r0, [pc, #120]	; (8000440 <main+0x160>)
 80003c8:	f000 fbf0 	bl	8000bac <HAL_GPIO_ReadPin>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d118      	bne.n	8000404 <main+0x124>
	  {
	  	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d8:	4817      	ldr	r0, [pc, #92]	; (8000438 <main+0x158>)
 80003da:	f000 fbfe 	bl	8000bda <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e4:	4814      	ldr	r0, [pc, #80]	; (8000438 <main+0x158>)
 80003e6:	f000 fbf8 	bl	8000bda <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003f0:	4811      	ldr	r0, [pc, #68]	; (8000438 <main+0x158>)
 80003f2:	f000 fbf2 	bl	8000bda <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fc:	480e      	ldr	r0, [pc, #56]	; (8000438 <main+0x158>)
 80003fe:	f000 fbec 	bl	8000bda <HAL_GPIO_WritePin>
 8000402:	e78f      	b.n	8000324 <main+0x44>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040a:	480b      	ldr	r0, [pc, #44]	; (8000438 <main+0x158>)
 800040c:	f000 fbe5 	bl	8000bda <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	4808      	ldr	r0, [pc, #32]	; (8000438 <main+0x158>)
 8000418:	f000 fbdf 	bl	8000bda <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <main+0x158>)
 8000424:	f000 fbd9 	bl	8000bda <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800042e:	4802      	ldr	r0, [pc, #8]	; (8000438 <main+0x158>)
 8000430:	f000 fbd3 	bl	8000bda <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin) == GPIO_PIN_SET)
 8000434:	e776      	b.n	8000324 <main+0x44>
 8000436:	bf00      	nop
 8000438:	40010c00 	.word	0x40010c00
 800043c:	40011000 	.word	0x40011000
 8000440:	40010800 	.word	0x40010800

08000444 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b090      	sub	sp, #64	; 0x40
 8000448:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000452:	2310      	movs	r3, #16
 8000454:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000456:	2300      	movs	r3, #0
 8000458:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fbd4 	bl	8000c0c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	230f      	movs	r3, #15
 8000466:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fab3 	bl	80019e8 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000482:	f001 fdb1 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8000486:	4602      	mov	r2, r0
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <SystemClock_Config+0x6c>)
 800048a:	fba3 2302 	umull	r2, r3, r3, r2
 800048e:	099b      	lsrs	r3, r3, #6
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f9e8 	bl	8000866 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000496:	2004      	movs	r0, #4
 8000498:	f000 f9f2 	bl	8000880 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295
 80004a4:	f000 f9c3 	bl	800082e <HAL_NVIC_SetPriority>
}
 80004a8:	bf00      	nop
 80004aa:	3740      	adds	r7, #64	; 0x40
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	10624dd3 	.word	0x10624dd3

080004b4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <HAL_MspInit+0x78>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <HAL_MspInit+0x78>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <HAL_MspInit+0x78>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f9a0 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2100      	movs	r1, #0
 80004dc:	f06f 000b 	mvn.w	r0, #11
 80004e0:	f000 f9a5 	bl	800082e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	f06f 000a 	mvn.w	r0, #10
 80004ec:	f000 f99f 	bl	800082e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	f06f 0009 	mvn.w	r0, #9
 80004f8:	f000 f999 	bl	800082e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2100      	movs	r1, #0
 8000500:	f06f 0003 	mvn.w	r0, #3
 8000504:	f000 f993 	bl	800082e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 f98d 	bl	800082e <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_MspInit+0x7c>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_MspInit+0x7c>)
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000522:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	40010000 	.word	0x40010000

08000534 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000538:	f000 f890 	bl	800065c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800053c:	f000 f9bc 	bl	80008b8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <SystemInit+0x5c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <SystemInit+0x5c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SystemInit+0x5c>)
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	4911      	ldr	r1, [pc, #68]	; (80005a0 <SystemInit+0x5c>)
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <SystemInit+0x60>)
 800055c:	4013      	ands	r3, r2
 800055e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <SystemInit+0x5c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <SystemInit+0x5c>)
 8000566:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800056a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <SystemInit+0x5c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <SystemInit+0x5c>)
 8000576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800057a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <SystemInit+0x5c>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <SystemInit+0x5c>)
 8000582:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000586:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <SystemInit+0x5c>)
 800058a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800058e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <SystemInit+0x64>)
 8000592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000596:	609a      	str	r2, [r3, #8]
#endif 
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	f8ff0000 	.word	0xf8ff0000
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ae:	e003      	b.n	80005b8 <LoopCopyDataInit>

080005b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005b6:	3104      	adds	r1, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005c0:	d3f6      	bcc.n	80005b0 <CopyDataInit>
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005c4:	e002      	b.n	80005cc <LoopFillZerobss>

080005c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005c8:	f842 3b04 	str.w	r3, [r2], #4

080005cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005d0:	d3f9      	bcc.n	80005c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005d2:	f7ff ffb7 	bl	8000544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d6:	f001 fd2f 	bl	8002038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff fe81 	bl	80002e0 <main>
  bx lr
 80005de:	4770      	bx	lr
  ldr r3, =_sidata
 80005e0:	080020c4 	.word	0x080020c4
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005e8:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80005ec:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80005f0:	20000024 	.word	0x20000024

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_Init+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_Init+0x28>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f905 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 f808 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000614:	f7ff ff4e 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800062c:	f001 fcdc 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8000630:	4602      	mov	r2, r0
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_InitTick+0x34>)
 8000634:	fba3 2302 	umull	r2, r3, r3, r2
 8000638:	099b      	lsrs	r3, r3, #6
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f913 	bl	8000866 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f8f1 	bl	800082e <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	10624dd3 	.word	0x10624dd3

0800065c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick++;
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_IncTick+0x18>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a03      	ldr	r2, [pc, #12]	; (8000674 <HAL_IncTick+0x18>)
 8000668:	6013      	str	r3, [r2, #0]
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000020 	.word	0x20000020

08000678 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <HAL_GetTick+0x10>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	20000020 	.word	0x20000020

0800068c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800069e:	bf00      	nop
 80006a0:	f7ff ffea 	bl	8000678 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	1ad2      	subs	r2, r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d3f7      	bcc.n	80006a0 <HAL_Delay+0x14>
  {
  }
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	da0b      	bge.n	8000748 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	; (8000768 <NVIC_SetPriority+0x4c>)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	3b04      	subs	r3, #4
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000746:	e009      	b.n	800075c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <NVIC_SetPriority+0x50>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	e000e100 	.word	0xe000e100

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f7ff ff90 	bl	800071c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff49 	bl	80006b8 <NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff5e 	bl	8000700 <NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff90 	bl	8000770 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5f 	bl	800071c <NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffb0 	bl	80007d4 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d106      	bne.n	800089c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800089a:	e005      	b.n	80008a8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008a2:	f023 0304 	bic.w	r3, r3, #4
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008bc:	f000 f802 	bl	80008c4 <HAL_SYSTICK_Callback>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
 80008f2:	e133      	b.n	8000b5c <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008f4:	2201      	movs	r2, #1
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	429a      	cmp	r2, r3
 800090e:	f040 8122 	bne.w	8000b56 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b12      	cmp	r3, #18
 8000918:	d034      	beq.n	8000984 <HAL_GPIO_Init+0xb4>
 800091a:	2b12      	cmp	r3, #18
 800091c:	d80d      	bhi.n	800093a <HAL_GPIO_Init+0x6a>
 800091e:	2b02      	cmp	r3, #2
 8000920:	d02b      	beq.n	800097a <HAL_GPIO_Init+0xaa>
 8000922:	2b02      	cmp	r3, #2
 8000924:	d804      	bhi.n	8000930 <HAL_GPIO_Init+0x60>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d031      	beq.n	800098e <HAL_GPIO_Init+0xbe>
 800092a:	2b01      	cmp	r3, #1
 800092c:	d01c      	beq.n	8000968 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e048      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000930:	2b03      	cmp	r3, #3
 8000932:	d043      	beq.n	80009bc <HAL_GPIO_Init+0xec>
 8000934:	2b11      	cmp	r3, #17
 8000936:	d01b      	beq.n	8000970 <HAL_GPIO_Init+0xa0>
          break;
 8000938:	e043      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800093a:	4a8d      	ldr	r2, [pc, #564]	; (8000b70 <HAL_GPIO_Init+0x2a0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d026      	beq.n	800098e <HAL_GPIO_Init+0xbe>
 8000940:	4a8b      	ldr	r2, [pc, #556]	; (8000b70 <HAL_GPIO_Init+0x2a0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d806      	bhi.n	8000954 <HAL_GPIO_Init+0x84>
 8000946:	4a8b      	ldr	r2, [pc, #556]	; (8000b74 <HAL_GPIO_Init+0x2a4>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d020      	beq.n	800098e <HAL_GPIO_Init+0xbe>
 800094c:	4a8a      	ldr	r2, [pc, #552]	; (8000b78 <HAL_GPIO_Init+0x2a8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d01d      	beq.n	800098e <HAL_GPIO_Init+0xbe>
          break;
 8000952:	e036      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000954:	4a89      	ldr	r2, [pc, #548]	; (8000b7c <HAL_GPIO_Init+0x2ac>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d019      	beq.n	800098e <HAL_GPIO_Init+0xbe>
 800095a:	4a89      	ldr	r2, [pc, #548]	; (8000b80 <HAL_GPIO_Init+0x2b0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d016      	beq.n	800098e <HAL_GPIO_Init+0xbe>
 8000960:	4a88      	ldr	r2, [pc, #544]	; (8000b84 <HAL_GPIO_Init+0x2b4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0xbe>
          break;
 8000966:	e02c      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e028      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	3304      	adds	r3, #4
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e023      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	3308      	adds	r3, #8
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e01e      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	330c      	adds	r3, #12
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e019      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000996:	2304      	movs	r3, #4
 8000998:	623b      	str	r3, [r7, #32]
          break; 
 800099a:	e012      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	611a      	str	r2, [r3, #16]
          break; 
 80009ae:	e008      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b0:	2308      	movs	r3, #8
 80009b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	615a      	str	r2, [r3, #20]
          break; 
 80009ba:	e002      	b.n	80009c2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	2bff      	cmp	r3, #255	; 0xff
 80009c6:	d801      	bhi.n	80009cc <HAL_GPIO_Init+0xfc>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	e001      	b.n	80009d0 <HAL_GPIO_Init+0x100>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3304      	adds	r3, #4
 80009d0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	2bff      	cmp	r3, #255	; 0xff
 80009d6:	d802      	bhi.n	80009de <HAL_GPIO_Init+0x10e>
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x114>
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	3b08      	subs	r3, #8
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	210f      	movs	r1, #15
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	401a      	ands	r2, r3
 80009f6:	6a39      	ldr	r1, [r7, #32]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	431a      	orrs	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f000 80a2 	beq.w	8000b56 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a12:	4b5d      	ldr	r3, [pc, #372]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a5c      	ldr	r2, [pc, #368]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b5a      	ldr	r3, [pc, #360]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2];
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <HAL_GPIO_Init+0x2bc>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	220f      	movs	r2, #15
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4f      	ldr	r2, [pc, #316]	; (8000b90 <HAL_GPIO_Init+0x2c0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d01f      	beq.n	8000a96 <HAL_GPIO_Init+0x1c6>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <HAL_GPIO_Init+0x2c4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d019      	beq.n	8000a92 <HAL_GPIO_Init+0x1c2>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4d      	ldr	r2, [pc, #308]	; (8000b98 <HAL_GPIO_Init+0x2c8>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d013      	beq.n	8000a8e <HAL_GPIO_Init+0x1be>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4c      	ldr	r2, [pc, #304]	; (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d00d      	beq.n	8000a8a <HAL_GPIO_Init+0x1ba>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4b      	ldr	r2, [pc, #300]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d007      	beq.n	8000a86 <HAL_GPIO_Init+0x1b6>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a4a      	ldr	r2, [pc, #296]	; (8000ba4 <HAL_GPIO_Init+0x2d4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_GPIO_Init+0x1b2>
 8000a7e:	2305      	movs	r3, #5
 8000a80:	e00a      	b.n	8000a98 <HAL_GPIO_Init+0x1c8>
 8000a82:	2306      	movs	r3, #6
 8000a84:	e008      	b.n	8000a98 <HAL_GPIO_Init+0x1c8>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x1c8>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e004      	b.n	8000a98 <HAL_GPIO_Init+0x1c8>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x1c8>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x1c8>
 8000a96:	2300      	movs	r3, #0
 8000a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9a:	f002 0203 	and.w	r2, r2, #3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4093      	lsls	r3, r2
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2] = temp;
 8000aa8:	4938      	ldr	r1, [pc, #224]	; (8000b8c <HAL_GPIO_Init+0x2bc>)
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4938      	ldr	r1, [pc, #224]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4933      	ldr	r1, [pc, #204]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	492e      	ldr	r1, [pc, #184]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	604b      	str	r3, [r1, #4]
 8000af6:	e006      	b.n	8000b06 <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4929      	ldr	r1, [pc, #164]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	4924      	ldr	r1, [pc, #144]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	608b      	str	r3, [r1, #8]
 8000b1e:	e006      	b.n	8000b2e <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60cb      	str	r3, [r1, #12]
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	f67f aec8 	bls.w	80008f4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000b64:	bf00      	nop
 8000b66:	372c      	adds	r7, #44	; 0x2c
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	10210000 	.word	0x10210000
 8000b74:	10110000 	.word	0x10110000
 8000b78:	10120000 	.word	0x10120000
 8000b7c:	10310000 	.word	0x10310000
 8000b80:	10320000 	.word	0x10320000
 8000b84:	10220000 	.word	0x10220000
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40011400 	.word	0x40011400
 8000ba0:	40011800 	.word	0x40011800
 8000ba4:	40011c00 	.word	0x40011c00
 8000ba8:	40010400 	.word	0x40010400

08000bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	887b      	ldrh	r3, [r7, #2]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d002      	beq.n	8000bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e001      	b.n	8000bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	807b      	strh	r3, [r7, #2]
 8000be6:	4613      	mov	r3, r2
 8000be8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bea:	787b      	ldrb	r3, [r7, #1]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bf0:	887a      	ldrh	r2, [r7, #2]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000bf6:	e003      	b.n	8000c00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	041a      	lsls	r2, r3, #16
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB FS)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0f0      	sub	sp, #448	; 0x1c0
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 819e 	beq.w	8000f68 <HAL_RCC_OscConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c2c:	4bb9      	ldr	r3, [pc, #740]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 030c 	and.w	r3, r3, #12
 8000c34:	2b04      	cmp	r3, #4
 8000c36:	d00c      	beq.n	8000c52 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c38:	4bb6      	ldr	r3, [pc, #728]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 030c 	and.w	r3, r3, #12
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	d14f      	bne.n	8000ce4 <HAL_RCC_OscConfig+0xd8>
 8000c44:	4bb3      	ldr	r3, [pc, #716]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c50:	d148      	bne.n	8000ce4 <HAL_RCC_OscConfig+0xd8>
 8000c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c56:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6a:	fab3 f383 	clz	r3, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	095b      	lsrs	r3, r3, #5
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d102      	bne.n	8000c84 <HAL_RCC_OscConfig+0x78>
 8000c7e:	4ba5      	ldr	r3, [pc, #660]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	e00b      	b.n	8000c9c <HAL_RCC_OscConfig+0x90>
 8000c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c88:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000c90:	fa93 f3a3 	rbit	r3, r3
 8000c94:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000c98:	4b9e      	ldr	r3, [pc, #632]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ca0:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8000ca4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8000ca8:	fa92 f2a2 	rbit	r2, r2
 8000cac:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
  return(result);
 8000cb0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	b252      	sxtb	r2, r2
 8000cba:	f042 0220 	orr.w	r2, r2, #32
 8000cbe:	b252      	sxtb	r2, r2
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	f002 021f 	and.w	r2, r2, #31
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f000 814a 	beq.w	8000f66 <HAL_RCC_OscConfig+0x35a>
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f040 8144 	bne.w	8000f66 <HAL_RCC_OscConfig+0x35a>
      {
        return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f000 be7b 	b.w	80019da <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000ce4:	4b8b      	ldr	r3, [pc, #556]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a8a      	ldr	r2, [pc, #552]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b88      	ldr	r3, [pc, #544]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a87      	ldr	r2, [pc, #540]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fcbc 	bl	8000678 <HAL_GetTick>
 8000d00:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d04:	e00a      	b.n	8000d1c <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d06:	f7ff fcb7 	bl	8000678 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d902      	bls.n	8000d1c <HAL_RCC_OscConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	f000 be5f 	b.w	80019da <HAL_RCC_OscConfig+0xdce>
 8000d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d20:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d24:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d28:	fa93 f3a3 	rbit	r3, r3
 8000d2c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8000d30:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d34:	fab3 f383 	clz	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d102      	bne.n	8000d4e <HAL_RCC_OscConfig+0x142>
 8000d48:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	e00b      	b.n	8000d66 <HAL_RCC_OscConfig+0x15a>
 8000d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d52:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000d62:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d6a:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8000d6e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8000d72:	fa92 f2a2 	rbit	r2, r2
 8000d76:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
  return(result);
 8000d7a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	b252      	sxtb	r2, r2
 8000d84:	f042 0220 	orr.w	r2, r2, #32
 8000d88:	b252      	sxtb	r2, r2
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	f002 021f 	and.w	r2, r2, #31
 8000d90:	40d3      	lsrs	r3, r2
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1b5      	bne.n	8000d06 <HAL_RCC_OscConfig+0xfa>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d106      	bne.n	8000db4 <HAL_RCC_OscConfig+0x1a8>
 8000da6:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a5a      	ldr	r2, [pc, #360]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e030      	b.n	8000e16 <HAL_RCC_OscConfig+0x20a>
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x1cc>
 8000dbe:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a54      	ldr	r2, [pc, #336]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b52      	ldr	r3, [pc, #328]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a51      	ldr	r2, [pc, #324]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e01e      	b.n	8000e16 <HAL_RCC_OscConfig+0x20a>
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x1f2>
 8000de4:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a47      	ldr	r2, [pc, #284]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e00b      	b.n	8000e16 <HAL_RCC_OscConfig+0x20a>
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a41      	ldr	r2, [pc, #260]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d04f      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc2a 	bl	8000678 <HAL_GetTick>
 8000e24:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fc25 	bl	8000678 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	; 0x64
 8000e38:	d902      	bls.n	8000e40 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f000 bdcd 	b.w	80019da <HAL_RCC_OscConfig+0xdce>
 8000e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e44:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  return(result);
 8000e54:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d102      	bne.n	8000e72 <HAL_RCC_OscConfig+0x266>
 8000e6c:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	e00b      	b.n	8000e8a <HAL_RCC_OscConfig+0x27e>
 8000e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e76:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e96:	fa92 f2a2 	rbit	r2, r2
 8000e9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return(result);
 8000e9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ea2:	fab2 f282 	clz	r2, r2
 8000ea6:	b252      	sxtb	r2, r2
 8000ea8:	f042 0220 	orr.w	r2, r2, #32
 8000eac:	b252      	sxtb	r2, r2
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	f002 021f 	and.w	r2, r2, #31
 8000eb4:	40d3      	lsrs	r3, r2
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0b5      	beq.n	8000e2a <HAL_RCC_OscConfig+0x21e>
 8000ebe:	e053      	b.n	8000f68 <HAL_RCC_OscConfig+0x35c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fbda 	bl	8000678 <HAL_GetTick>
 8000ec4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_RCC_OscConfig+0x2d4>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eca:	f7ff fbd5 	bl	8000678 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d902      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f000 bd7d 	b.w	80019da <HAL_RCC_OscConfig+0xdce>
 8000ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  return(result);
 8000ef4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d105      	bne.n	8000f18 <HAL_RCC_OscConfig+0x30c>
 8000f0c:	4b01      	ldr	r3, [pc, #4]	; (8000f14 <HAL_RCC_OscConfig+0x308>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	e00e      	b.n	8000f30 <HAL_RCC_OscConfig+0x324>
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000f2c:	4bce      	ldr	r3, [pc, #824]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f34:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8000f38:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000f3c:	fa92 f2a2 	rbit	r2, r2
 8000f40:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
  return(result);
 8000f44:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000f48:	fab2 f282 	clz	r2, r2
 8000f4c:	b252      	sxtb	r2, r2
 8000f4e:	f042 0220 	orr.w	r2, r2, #32
 8000f52:	b252      	sxtb	r2, r2
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f002 021f 	and.w	r2, r2, #31
 8000f5a:	40d3      	lsrs	r3, r2
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1b2      	bne.n	8000eca <HAL_RCC_OscConfig+0x2be>
 8000f64:	e000      	b.n	8000f68 <HAL_RCC_OscConfig+0x35c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8151 	beq.w	800121a <HAL_RCC_OscConfig+0x60e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f78:	4bbb      	ldr	r3, [pc, #748]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <HAL_RCC_OscConfig+0x390>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f84:	4bb8      	ldr	r3, [pc, #736]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d163      	bne.n	8001058 <HAL_RCC_OscConfig+0x44c>
 8000f90:	4bb5      	ldr	r3, [pc, #724]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d15d      	bne.n	8001058 <HAL_RCC_OscConfig+0x44c>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8000fae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x3c0>
 8000fc6:	4ba8      	ldr	r3, [pc, #672]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e00a      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3d6>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fde:	4ba2      	ldr	r3, [pc, #648]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000fe8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fec:	fa92 f2a2 	rbit	r2, r2
 8000ff0:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return(result);
 8000ff4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000ff8:	fab2 f282 	clz	r2, r2
 8000ffc:	b252      	sxtb	r2, r2
 8000ffe:	f042 0220 	orr.w	r2, r2, #32
 8001002:	b252      	sxtb	r2, r2
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	f002 021f 	and.w	r2, r2, #31
 800100a:	40d3      	lsrs	r3, r2
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d007      	beq.n	8001024 <HAL_RCC_OscConfig+0x418>
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d002      	beq.n	8001024 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	f000 bcdb 	b.w	80019da <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001024:	4b90      	ldr	r3, [pc, #576]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6959      	ldr	r1, [r3, #20]
 8001032:	23f8      	movs	r3, #248	; 0xf8
 8001034:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  return(result);
 8001044:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4985      	ldr	r1, [pc, #532]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	e0e0      	b.n	800121a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d07a      	beq.n	8001158 <HAL_RCC_OscConfig+0x54c>
 8001062:	2301      	movs	r3, #1
 8001064:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8001074:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001082:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001086:	461a      	mov	r2, r3
 8001088:	2301      	movs	r3, #1
 800108a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff faf4 	bl	8000678 <HAL_GetTick>
 8001090:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff faef 	bl	8000678 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d902      	bls.n	80010ac <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	f000 bc97 	b.w	80019da <HAL_RCC_OscConfig+0xdce>
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 80010be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	095b      	lsrs	r3, r3, #5
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x4d0>
 80010d6:	4b64      	ldr	r3, [pc, #400]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	e00a      	b.n	80010f2 <HAL_RCC_OscConfig+0x4e6>
 80010dc:	2302      	movs	r3, #2
 80010de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010ee:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	2202      	movs	r2, #2
 80010f4:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80010f8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80010fc:	fa92 f2a2 	rbit	r2, r2
 8001100:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
  return(result);
 8001104:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	b252      	sxtb	r2, r2
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	b252      	sxtb	r2, r2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f002 021f 	and.w	r2, r2, #31
 800111a:	40d3      	lsrs	r3, r2
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0b8      	beq.n	8001096 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6959      	ldr	r1, [r3, #20]
 8001132:	23f8      	movs	r3, #248	; 0xf8
 8001134:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 8001144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	4945      	ldr	r1, [pc, #276]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
 8001156:	e060      	b.n	800121a <HAL_RCC_OscConfig+0x60e>
 8001158:	2301      	movs	r3, #1
 800115a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 800116a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001178:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800117c:	461a      	mov	r2, r3
 800117e:	2300      	movs	r3, #0
 8001180:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fa79 	bl	8000678 <HAL_GetTick>
 8001186:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118c:	f7ff fa74 	bl	8000678 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d902      	bls.n	80011a2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	f000 bc1c 	b.w	80019da <HAL_RCC_OscConfig+0xdce>
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 80011b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d102      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5c6>
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x5dc>
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_RCC_OscConfig+0x65c>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	2202      	movs	r2, #2
 80011ea:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80011ee:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80011f2:	fa92 f2a2 	rbit	r2, r2
 80011f6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
  return(result);
 80011fa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80011fe:	fab2 f282 	clz	r2, r2
 8001202:	b252      	sxtb	r2, r2
 8001204:	f042 0220 	orr.w	r2, r2, #32
 8001208:	b252      	sxtb	r2, r2
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	f002 021f 	and.w	r2, r2, #31
 8001210:	40d3      	lsrs	r3, r2
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1b8      	bne.n	800118c <HAL_RCC_OscConfig+0x580>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80b7 	beq.w	8001398 <HAL_RCC_OscConfig+0x78c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d059      	beq.n	80012e8 <HAL_RCC_OscConfig+0x6dc>
 8001234:	2301      	movs	r3, #1
 8001236:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 8001246:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_RCC_OscConfig+0x660>)
 8001254:	4413      	add	r3, r2
 8001256:	461a      	mov	r2, r3
 8001258:	2301      	movs	r3, #1
 800125a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125c:	f7ff fa0c 	bl	8000678 <HAL_GetTick>
 8001260:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001264:	e00e      	b.n	8001284 <HAL_RCC_OscConfig+0x678>
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fa02 	bl	8000678 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e3aa      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800129c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a8:	4bb0      	ldr	r3, [pc, #704]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80012aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80012b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 80012be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0c7      	beq.n	8001270 <HAL_RCC_OscConfig+0x664>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software temporization of 1ms 
          should be added.*/
      HAL_Delay(1);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff f9d3 	bl	800068c <HAL_Delay>
 80012e6:	e057      	b.n	8001398 <HAL_RCC_OscConfig+0x78c>
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 80012fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	461a      	mov	r2, r3
 8001306:	4b9a      	ldr	r3, [pc, #616]	; (8001570 <HAL_RCC_OscConfig+0x964>)
 8001308:	4413      	add	r3, r2
 800130a:	461a      	mov	r2, r3
 800130c:	2300      	movs	r3, #0
 800130e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001310:	f7ff f9b2 	bl	8000678 <HAL_GetTick>
 8001314:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	e009      	b.n	800132e <HAL_RCC_OscConfig+0x722>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff f9ad 	bl	8000678 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x722>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e355      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001340:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001344:	2202      	movs	r2, #2
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	fa93 f2a3 	rbit	r2, r3
 8001352:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001356:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	4b84      	ldr	r3, [pc, #528]	; (800156c <HAL_RCC_OscConfig+0x960>)
 800135a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001360:	2102      	movs	r1, #2
 8001362:	6019      	str	r1, [r3, #0]
 8001364:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fa93 f1a3 	rbit	r1, r3
 800136e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001372:	6019      	str	r1, [r3, #0]
  return(result);
 8001374:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b25b      	sxtb	r3, r3
 8001380:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001384:	b25b      	sxtb	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1c0      	bne.n	800131a <HAL_RCC_OscConfig+0x70e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8188 	beq.w	80016b8 <HAL_RCC_OscConfig+0xaac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	4b70      	ldr	r3, [pc, #448]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	4a6f      	ldr	r2, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b2:	61d3      	str	r3, [r2, #28]
 80013b4:	4b6d      	ldr	r3, [pc, #436]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	681b      	ldr	r3, [r3, #0]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c8:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x968>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a69      	ldr	r2, [pc, #420]	; (8001574 <HAL_RCC_OscConfig+0x968>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013d4:	f7ff f950 	bl	8000678 <HAL_GetTick>
 80013d8:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013dc:	e009      	b.n	80013f2 <HAL_RCC_OscConfig+0x7e6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff f94b 	bl	8000678 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x7e6>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e2f3      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013f2:	4b60      	ldr	r3, [pc, #384]	; (8001574 <HAL_RCC_OscConfig+0x968>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ef      	beq.n	80013de <HAL_RCC_OscConfig+0x7d2>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80013fe:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a5a      	ldr	r2, [pc, #360]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b58      	ldr	r3, [pc, #352]	; (800156c <HAL_RCC_OscConfig+0x960>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a57      	ldr	r2, [pc, #348]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001416:	f7ff f92f 	bl	8000678 <HAL_GetTick>
 800141a:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
    
    /* Wait till LSE is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x82c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff f92a 	bl	8000678 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x82c>
      {
        return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e2d0      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 8001438:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001466:	601a      	str	r2, [r3, #0]
  return(result);
 8001468:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800146c:	681b      	ldr	r3, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	095b      	lsrs	r3, r3, #5
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d102      	bne.n	8001488 <HAL_RCC_OscConfig+0x87c>
 8001482:	4b3a      	ldr	r3, [pc, #232]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	e001      	b.n	800148c <HAL_RCC_OscConfig+0x880>
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_RCC_OscConfig+0x960>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001490:	2102      	movs	r1, #2
 8001492:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	fa92 f1a2 	rbit	r1, r2
 800149e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80014a2:	6011      	str	r1, [r2, #0]
  return(result);
 80014a4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	b252      	sxtb	r2, r2
 80014b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b4:	b252      	sxtb	r2, r2
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	f002 021f 	and.w	r2, r2, #31
 80014bc:	40d3      	lsrs	r3, r2
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ac      	bne.n	8001420 <HAL_RCC_OscConfig+0x814>
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x8d2>
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e02f      	b.n	800153e <HAL_RCC_OscConfig+0x932>
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10c      	bne.n	8001502 <HAL_RCC_OscConfig+0x8f6>
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a1f      	ldr	r2, [pc, #124]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_RCC_OscConfig+0x960>)
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	e01d      	b.n	800153e <HAL_RCC_OscConfig+0x932>
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x91a>
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_RCC_OscConfig+0x960>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a16      	ldr	r2, [pc, #88]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_RCC_OscConfig+0x960>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <HAL_RCC_OscConfig+0x960>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x932>
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_RCC_OscConfig+0x960>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a0d      	ldr	r2, [pc, #52]	; (800156c <HAL_RCC_OscConfig+0x960>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05f      	beq.n	8001608 <HAL_RCC_OscConfig+0x9fc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff f896 	bl	8000678 <HAL_GetTick>
 800154c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	e012      	b.n	8001578 <HAL_RCC_OscConfig+0x96c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff f891 	bl	8000678 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d908      	bls.n	8001578 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e237      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	42420480 	.word	0x42420480
 8001574:	40007000 	.word	0x40007000
 8001578:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800157c:	2202      	movs	r2, #2
 800157e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fa93 f2a3 	rbit	r2, r3
 800158a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015a6:	601a      	str	r2, [r3, #0]
  return(result);
 80015a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d102      	bne.n	80015c8 <HAL_RCC_OscConfig+0x9bc>
 80015c2:	4bb2      	ldr	r3, [pc, #712]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	e001      	b.n	80015cc <HAL_RCC_OscConfig+0x9c0>
 80015c8:	4bb0      	ldr	r3, [pc, #704]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015d0:	2102      	movs	r1, #2
 80015d2:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	fa92 f1a2 	rbit	r1, r2
 80015de:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015e2:	6011      	str	r1, [r2, #0]
  return(result);
 80015e4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	fab2 f282 	clz	r2, r2
 80015ee:	b252      	sxtb	r2, r2
 80015f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f4:	b252      	sxtb	r2, r2
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f002 021f 	and.w	r2, r2, #31
 80015fc:	40d3      	lsrs	r3, r2
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0a5      	beq.n	8001552 <HAL_RCC_OscConfig+0x946>
 8001606:	e057      	b.n	80016b8 <HAL_RCC_OscConfig+0xaac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001608:	f7ff f836 	bl	8000678 <HAL_GetTick>
 800160c:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0xa1e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff f831 	bl	8000678 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xa1e>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1d7      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 800162a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001646:	2202      	movs	r2, #2
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f2a3 	rbit	r2, r3
 8001654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001658:	601a      	str	r2, [r3, #0]
  return(result);
 800165a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800165e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	fab3 f383 	clz	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d102      	bne.n	800167a <HAL_RCC_OscConfig+0xa6e>
 8001674:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	e001      	b.n	800167e <HAL_RCC_OscConfig+0xa72>
 800167a:	4b84      	ldr	r3, [pc, #528]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001682:	2102      	movs	r1, #2
 8001684:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	fa92 f1a2 	rbit	r1, r2
 8001690:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001694:	6011      	str	r1, [r2, #0]
  return(result);
 8001696:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	fab2 f282 	clz	r2, r2
 80016a0:	b252      	sxtb	r2, r2
 80016a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a6:	b252      	sxtb	r2, r2
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f002 021f 	and.w	r2, r2, #31
 80016ae:	40d3      	lsrs	r3, r2
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ac      	bne.n	8001612 <HAL_RCC_OscConfig+0xa06>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 818a 	beq.w	80019d8 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c4:	4b71      	ldr	r3, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	f000 8181 	beq.w	80019d4 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	f040 8107 	bne.w	80018ec <HAL_RCC_OscConfig+0xce0>
 80016de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016f6:	601a      	str	r2, [r3, #0]
  return(result);
 80016f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016fc:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001708:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800170c:	461a      	mov	r2, r3
 800170e:	2300      	movs	r3, #0
 8001710:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7fe ffb1 	bl	8000678 <HAL_GetTick>
 8001716:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	e009      	b.n	8001730 <HAL_RCC_OscConfig+0xb24>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171c:	f7fe ffac 	bl	8000678 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0xb24>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e154      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 8001730:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001734:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001748:	601a      	str	r2, [r3, #0]
  return(result);
 800174a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800174e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001750:	fab3 f383 	clz	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d102      	bne.n	800176a <HAL_RCC_OscConfig+0xb5e>
 8001764:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	e00e      	b.n	8001788 <HAL_RCC_OscConfig+0xb7c>
 800176a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800176e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4b41      	ldr	r3, [pc, #260]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800178c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001790:	6011      	str	r1, [r2, #0]
 8001792:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	fa92 f1a2 	rbit	r1, r2
 800179c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80017a0:	6011      	str	r1, [r2, #0]
  return(result);
 80017a2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	fab2 f282 	clz	r2, r2
 80017ac:	b252      	sxtb	r2, r2
 80017ae:	f042 0220 	orr.w	r2, r2, #32
 80017b2:	b252      	sxtb	r2, r2
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	f002 021f 	and.w	r2, r2, #31
 80017ba:	40d3      	lsrs	r3, r2
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ab      	bne.n	800171c <HAL_RCC_OscConfig+0xb10>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d109      	bne.n	80017e4 <HAL_RCC_OscConfig+0xbd8>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	492b      	ldr	r1, [pc, #172]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a19      	ldr	r1, [r3, #32]
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	430b      	orrs	r3, r1
 80017fa:	4924      	ldr	r1, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001818:	601a      	str	r2, [r3, #0]
  return(result);
 800181a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800181e:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800182a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800182e:	461a      	mov	r2, r3
 8001830:	2301      	movs	r3, #1
 8001832:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7fe ff20 	bl	8000678 <HAL_GetTick>
 8001838:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0xc46>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe ff1b 	bl	8000678 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xc46>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0c3      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 8001852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	fa93 f2a3 	rbit	r2, r3
 8001866:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800186a:	601a      	str	r2, [r3, #0]
  return(result);
 800186c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001870:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d104      	bne.n	8001890 <HAL_RCC_OscConfig+0xc84>
 8001886:	4b01      	ldr	r3, [pc, #4]	; (800188c <HAL_RCC_OscConfig+0xc80>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e010      	b.n	80018ae <HAL_RCC_OscConfig+0xca2>
 800188c:	40021000 	.word	0x40021000
 8001890:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <HAL_RCC_OscConfig+0xdd8>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018b6:	6011      	str	r1, [r2, #0]
 80018b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	fa92 f1a2 	rbit	r1, r2
 80018c2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018c6:	6011      	str	r1, [r2, #0]
  return(result);
 80018c8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	fab2 f282 	clz	r2, r2
 80018d2:	b252      	sxtb	r2, r2
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	b252      	sxtb	r2, r2
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	f002 021f 	and.w	r2, r2, #31
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0a9      	beq.n	800183e <HAL_RCC_OscConfig+0xc32>
 80018ea:	e075      	b.n	80019d8 <HAL_RCC_OscConfig+0xdcc>
 80018ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	601a      	str	r2, [r3, #0]
  return(result);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001916:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800191a:	461a      	mov	r2, r3
 800191c:	2300      	movs	r3, #0
 800191e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7fe feaa 	bl	8000678 <HAL_GetTick>
 8001924:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e009      	b.n	800193e <HAL_RCC_OscConfig+0xd32>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7fe fea5 	bl	8000678 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xd32>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e04d      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	601a      	str	r2, [r3, #0]
  return(result);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0xd6c>
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_RCC_OscConfig+0xdd8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e00e      	b.n	8001996 <HAL_RCC_OscConfig+0xd8a>
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_RCC_OscConfig+0xdd8>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f107 0210 	add.w	r2, r7, #16
 800199a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800199e:	6011      	str	r1, [r2, #0]
 80019a0:	f107 0210 	add.w	r2, r7, #16
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	fa92 f1a2 	rbit	r1, r2
 80019aa:	f107 020c 	add.w	r2, r7, #12
 80019ae:	6011      	str	r1, [r2, #0]
  return(result);
 80019b0:	f107 020c 	add.w	r2, r7, #12
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	fab2 f282 	clz	r2, r2
 80019ba:	b252      	sxtb	r2, r2
 80019bc:	f042 0220 	orr.w	r2, r2, #32
 80019c0:	b252      	sxtb	r2, r2
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f002 021f 	and.w	r2, r2, #31
 80019c8:	40d3      	lsrs	r3, r2
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ab      	bne.n	800192a <HAL_RCC_OscConfig+0xd1e>
 80019d2:	e001      	b.n	80019d8 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b0a8      	sub	sp, #160	; 0xa0
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019f8:	4bb0      	ldr	r3, [pc, #704]	; (8001cbc <HAL_RCC_ClockConfig+0x2d4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	f240 812b 	bls.w	8001c5e <HAL_RCC_ClockConfig+0x276>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a08:	4bac      	ldr	r3, [pc, #688]	; (8001cbc <HAL_RCC_ClockConfig+0x2d4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 0207 	bic.w	r2, r3, #7
 8001a10:	49aa      	ldr	r1, [pc, #680]	; (8001cbc <HAL_RCC_ClockConfig+0x2d4>)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a18:	4ba8      	ldr	r3, [pc, #672]	; (8001cbc <HAL_RCC_ClockConfig+0x2d4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x42>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e25d      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
    }
    
#endif /* FLASH_ACR_LATENCY */
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x60>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a36:	4ba2      	ldr	r3, [pc, #648]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	499f      	ldr	r1, [pc, #636]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8225 	beq.w	8001ea0 <HAL_RCC_ClockConfig+0x4b8>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d140      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
 8001a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8001a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xa8>
 8001a8a:	4b8d      	ldr	r3, [pc, #564]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_ClockConfig+0xc0>
 8001a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001aa4:	4b86      	ldr	r3, [pc, #536]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001ab0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ab4:	fa92 f2a2 	rbit	r2, r2
 8001ab8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
  return(result);
 8001abc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ac0:	fab2 f282 	clz	r2, r2
 8001ac4:	b252      	sxtb	r2, r2
 8001ac6:	f042 0220 	orr.w	r2, r2, #32
 8001aca:	b252      	sxtb	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f002 021f 	and.w	r2, r2, #31
 8001ad2:	40d3      	lsrs	r3, r2
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d170      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e202      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d137      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x170>
 8001ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001afa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x12e>
 8001b10:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_ClockConfig+0x140>
 8001b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	677b      	str	r3, [r7, #116]	; 0x74
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2c:	673a      	str	r2, [r7, #112]	; 0x70
 8001b2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b30:	fa92 f2a2 	rbit	r2, r2
 8001b34:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 8001b36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b38:	fab2 f282 	clz	r2, r2
 8001b3c:	b252      	sxtb	r2, r2
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	b252      	sxtb	r2, r2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	f002 021f 	and.w	r2, r2, #31
 8001b4a:	40d3      	lsrs	r3, r2
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d134      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e1c6      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8001b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x198>
 8001b7a:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e007      	b.n	8001b90 <HAL_RCC_ClockConfig+0x1a8>
 8001b80:	2302      	movs	r3, #2
 8001b82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b8c:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2202      	movs	r2, #2
 8001b92:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b96:	fa92 f2a2 	rbit	r2, r2
 8001b9a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b252      	sxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b252      	sxtb	r2, r2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	40d3      	lsrs	r3, r2
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x1d6>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e193      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	493d      	ldr	r1, [pc, #244]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7fe fd52 	bl	8000678 <HAL_GetTick>
 8001bd4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d113      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x220>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7fe fd49 	bl	8000678 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x212>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e175      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d1ed      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1fa>
 8001c06:	e14b      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x4b8>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d11f      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x268>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	e00b      	b.n	8001c2a <HAL_RCC_ClockConfig+0x242>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c12:	f7fe fd31 	bl	8000678 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_ClockConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e15d      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d1ed      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x22a>
 8001c36:	e133      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x4b8>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7fe fd1e 	bl	8000678 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e14a      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ed      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x250>
 8001c5c:	e120      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x4b8>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x294>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4912      	ldr	r1, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80fa 	beq.w	8001e7e <HAL_RCC_ClockConfig+0x496>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d139      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x31e>
 8001c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x2dc>
 8001cb6:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_RCC_ClockConfig+0x2d8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e00c      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2ee>
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd2:	4b87      	ldr	r3, [pc, #540]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cda:	643a      	str	r2, [r7, #64]	; 0x40
 8001cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cde:	fa92 f2a2 	rbit	r2, r2
 8001ce2:	63fa      	str	r2, [r7, #60]	; 0x3c
  return(result);
 8001ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ce6:	fab2 f282 	clz	r2, r2
 8001cea:	b252      	sxtb	r2, r2
 8001cec:	f042 0220 	orr.w	r2, r2, #32
 8001cf0:	b252      	sxtb	r2, r2
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f002 021f 	and.w	r2, r2, #31
 8001cf8:	40d3      	lsrs	r3, r2
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d16e      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ef      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d135      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x392>
 8001d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x350>
 8001d32:	4b6f      	ldr	r3, [pc, #444]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_ClockConfig+0x362>
 8001d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d46:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d52:	fa92 f2a2 	rbit	r2, r2
 8001d56:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b252      	sxtb	r2, r2
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	b252      	sxtb	r2, r2
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	40d3      	lsrs	r3, r2
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d134      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0b5      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	61fb      	str	r3, [r7, #28]
  return(result);
 8001d86:	69fb      	ldr	r3, [r7, #28]
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x3ba>
 8001d9c:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_RCC_ClockConfig+0x3ca>
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2202      	movs	r2, #2
 8001db4:	613a      	str	r2, [r7, #16]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	fa92 f2a2 	rbit	r2, r2
 8001dbc:	60fa      	str	r2, [r7, #12]
  return(result);
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b252      	sxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b252      	sxtb	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	40d3      	lsrs	r3, r2
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x3f8>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e082      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de0:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 0203 	bic.w	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4940      	ldr	r1, [pc, #256]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe fc41 	bl	8000678 <HAL_GetTick>
 8001df6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d113      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x442>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_ClockConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe fc38 	bl	8000678 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x434>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e064      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d1ed      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x41c>
 8001e28:	e029      	b.n	8001e7e <HAL_RCC_ClockConfig+0x496>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d11f      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x48a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_ClockConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7fe fc20 	bl	8000678 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e04c      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d1ed      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x44c>
 8001e58:	e011      	b.n	8001e7e <HAL_RCC_ClockConfig+0x496>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5a:	f7fe fc0d 	bl	8000678 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e039      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ed      	bne.n	8001e5a <HAL_RCC_ClockConfig+0x472>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_ClockConfig+0x50c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	491b      	ldr	r1, [pc, #108]	; (8001ef4 <HAL_RCC_ClockConfig+0x50c>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_ClockConfig+0x50c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x4b8>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e022      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x4fe>
    }
  }
#endif /* FLASH_ACR_LATENCY */
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x4d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	490d      	ldr	r1, [pc, #52]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x4f6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4905      	ldr	r1, [pc, #20]	; (8001ef0 <HAL_RCC_ClockConfig+0x508>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }
 
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7fe fba0 	bl	8000624 <HAL_InitTick>
  
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	37a0      	adds	r7, #160	; 0xa0
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b490      	push	{r4, r7}
 8001efa:	b08e      	sub	sp, #56	; 0x38
 8001efc:	af00      	add	r7, sp, #0
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001efe:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f00:	1d3c      	adds	r4, r7, #4
 8001f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xe4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x40>
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x46>
 8001f36:	e043      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xc8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f3c:	e043      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f44:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f60:	4413      	add	r3, r2
 8001f62:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01e      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xe4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8001f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	617b      	str	r3, [r7, #20]
  return(result);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f96:	4413      	add	r3, r2
 8001f98:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
 8001fae:	e004      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0xc2>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xce>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3738      	adds	r7, #56	; 0x38
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc90      	pop	{r4, r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	08002098 	.word	0x08002098
 8001fd8:	080020a8 	.word	0x080020a8
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	003d0900 	.word	0x003d0900

08001fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001fee:	f7ff ff83 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_GetHCLKFreq+0x44>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ffc:	23f0      	movs	r3, #240	; 0xf0
 8001ffe:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	603b      	str	r3, [r7, #0]
  return(result);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_RCC_GetHCLKFreq+0x48>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	fa21 f303 	lsr.w	r3, r1, r3
 800201a:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_RCC_GetHCLKFreq+0x4c>)
 800201c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_GetHCLKFreq+0x4c>)
 8002020:	681b      	ldr	r3, [r3, #0]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	080020ac 	.word	0x080020ac
 8002034:	20000000 	.word	0x20000000

08002038 <__libc_init_array>:
 8002038:	b570      	push	{r4, r5, r6, lr}
 800203a:	2500      	movs	r5, #0
 800203c:	4e0c      	ldr	r6, [pc, #48]	; (8002070 <__libc_init_array+0x38>)
 800203e:	4c0d      	ldr	r4, [pc, #52]	; (8002074 <__libc_init_array+0x3c>)
 8002040:	1ba4      	subs	r4, r4, r6
 8002042:	10a4      	asrs	r4, r4, #2
 8002044:	42a5      	cmp	r5, r4
 8002046:	d109      	bne.n	800205c <__libc_init_array+0x24>
 8002048:	f000 f81a 	bl	8002080 <_init>
 800204c:	2500      	movs	r5, #0
 800204e:	4e0a      	ldr	r6, [pc, #40]	; (8002078 <__libc_init_array+0x40>)
 8002050:	4c0a      	ldr	r4, [pc, #40]	; (800207c <__libc_init_array+0x44>)
 8002052:	1ba4      	subs	r4, r4, r6
 8002054:	10a4      	asrs	r4, r4, #2
 8002056:	42a5      	cmp	r5, r4
 8002058:	d105      	bne.n	8002066 <__libc_init_array+0x2e>
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002060:	4798      	blx	r3
 8002062:	3501      	adds	r5, #1
 8002064:	e7ee      	b.n	8002044 <__libc_init_array+0xc>
 8002066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800206a:	4798      	blx	r3
 800206c:	3501      	adds	r5, #1
 800206e:	e7f2      	b.n	8002056 <__libc_init_array+0x1e>
 8002070:	080020bc 	.word	0x080020bc
 8002074:	080020bc 	.word	0x080020bc
 8002078:	080020bc 	.word	0x080020bc
 800207c:	080020c0 	.word	0x080020c0

08002080 <_init>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr

0800208c <_fini>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr
